{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NzY2NjA0", "number": 13760, "title": "[FLINK-19627][table-runtime] Introduce multiple input operator for batch", "bodyText": "What is the purpose of the change\nThis pr aims to introduce multiple input operator for batch. The logic in a multiple input operator is similar to OperatorChain, mainly including: initialize all sub-operators, initialize the Input list of the multiple input operator, connect each sub-operator via Output, delegate open/close/dispose action to each sub-operator, etc\nBrief change log\n\nIntroduce OneInput, FirstInputOfTwoInput, SecondInputOfTwoInput, InputSelectionHandler for multiple input operator\nIntroduce different Output sub-classes for multiple input operator\nIntroduce multiple input operator for batch\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded InputTest to verify different kinds of Input\nAdded OutputTest to verify different kinds of Output\nAdded BatchMultipleInputStreamOperatorTest to verify all actions of BatchMultipleInputStreamOperator\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-10-23T07:06:14Z", "url": "https://github.com/apache/flink/pull/13760", "merged": true, "mergeCommit": {"oid": "649328ab6b96a9ce0a9517e047de35c5b0b5c423"}, "closed": true, "closedAt": "2020-10-28T06:33:47Z", "author": {"login": "godfreyhe"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVVi3YAFqTUxNTU5MzEyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWoXERABqjM5MjU3MTQyODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NTkzMTIx", "url": "https://github.com/apache/flink/pull/13760#pullrequestreview-515593121", "createdAt": "2020-10-23T11:49:55Z", "commit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMTo0OTo1NVrOHnKfWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjoxNDo1OFrOHnLRKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgyODM3Ng==", "bodyText": "nit: use line comment instead of block comment", "url": "https://github.com/apache/flink/pull/13760#discussion_r510828376", "createdAt": "2020-10-23T11:49:55Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMjEwMg==", "bodyText": "nit: Preconditions.checkState?", "url": "https://github.com/apache/flink/pull/13760#discussion_r510832102", "createdAt": "2020-10-23T11:57:30Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMjQ4Mg==", "bodyText": "Use LinkedList instead, as we need to remove its head frequently in endInput.", "url": "https://github.com/apache/flink/pull/13760#discussion_r510832482", "createdAt": "2020-10-23T11:58:19Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}\n+\t\tif (inputIds.isEmpty()) {\n+\t\t\t// remove the finished input\n+\t\t\tsortedAvailableInputs.remove(0);\n+\n+\t\t\tif (sortedAvailableInputs.isEmpty()) {\n+\t\t\t\t// all input are finished\n+\t\t\t\tinputIds = null;\n+\t\t\t} else {\n+\t\t\t\t// read next one\n+\t\t\t\tinputIds = sortedAvailableInputs.get(0);\n+\t\t\t}\n+\t\t\tinputSelection = buildInputSelection(inputIds);\n+\t\t}\n+\t}\n+\n+\tprivate List<List<Integer>> buildSortedAvailableInputs() {\n+\t\tfinal SortedMap<Integer, List<Integer>> orderedAvailableInputIds = new TreeMap<>();\n+\t\tfor (InputSpec inputSpec : inputSpecs) {\n+\t\t\tList<Integer> inputIds = orderedAvailableInputIds\n+\t\t\t\t\t.computeIfAbsent(inputSpec.getReadOrder(), k -> new ArrayList<>());\n+\t\t\tinputIds.add(inputSpec.getMultipleInputId());\n+\t\t}\n+\t\treturn new ArrayList<>(orderedAvailableInputIds.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMzc0OQ==", "bodyText": "inputIds might be null", "url": "https://github.com/apache/flink/pull/13760#discussion_r510833749", "createdAt": "2020-10-23T12:00:44Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}\n+\t\tif (inputIds.isEmpty()) {\n+\t\t\t// remove the finished input\n+\t\t\tsortedAvailableInputs.remove(0);\n+\n+\t\t\tif (sortedAvailableInputs.isEmpty()) {\n+\t\t\t\t// all input are finished\n+\t\t\t\tinputIds = null;\n+\t\t\t} else {\n+\t\t\t\t// read next one\n+\t\t\t\tinputIds = sortedAvailableInputs.get(0);\n+\t\t\t}\n+\t\t\tinputSelection = buildInputSelection(inputIds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDAzNQ==", "bodyText": "Should be InputSelection.None according to the logic of endInput?", "url": "https://github.com/apache/flink/pull/13760#discussion_r510834035", "createdAt": "2020-10-23T12:01:17Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}\n+\t\tif (inputIds.isEmpty()) {\n+\t\t\t// remove the finished input\n+\t\t\tsortedAvailableInputs.remove(0);\n+\n+\t\t\tif (sortedAvailableInputs.isEmpty()) {\n+\t\t\t\t// all input are finished\n+\t\t\t\tinputIds = null;\n+\t\t\t} else {\n+\t\t\t\t// read next one\n+\t\t\t\tinputIds = sortedAvailableInputs.get(0);\n+\t\t\t}\n+\t\t\tinputSelection = buildInputSelection(inputIds);\n+\t\t}\n+\t}\n+\n+\tprivate List<List<Integer>> buildSortedAvailableInputs() {\n+\t\tfinal SortedMap<Integer, List<Integer>> orderedAvailableInputIds = new TreeMap<>();\n+\t\tfor (InputSpec inputSpec : inputSpecs) {\n+\t\t\tList<Integer> inputIds = orderedAvailableInputIds\n+\t\t\t\t\t.computeIfAbsent(inputSpec.getReadOrder(), k -> new ArrayList<>());\n+\t\t\tinputIds.add(inputSpec.getMultipleInputId());\n+\t\t}\n+\t\treturn new ArrayList<>(orderedAvailableInputIds.values());\n+\t}\n+\n+\tprivate InputSelection buildInputSelection(@Nullable List<Integer> inputIds) {\n+\t\tif (inputIds == null) {\n+\t\t\t// TODO throw exception ?\n+\t\t\treturn InputSelection.ALL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDcwMw==", "bodyText": "FirstInputOfTwoInputs?", "url": "https://github.com/apache/flink/pull/13760#discussion_r510840703", "createdAt": "2020-10-23T12:14:10Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the first input of {@link SecondInputOfTwoInput}.\n+ */\n+public class FirstInputOfTwoInput extends InputBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDc5NQ==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/13760#discussion_r510840795", "createdAt": "2020-10-23T12:14:21Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the second input of {@link SecondInputOfTwoInput}.\n+ */\n+public class SecondInputOfTwoInput extends InputBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDk4NA==", "bodyText": "Should be TwoInputStreamOperator?", "url": "https://github.com/apache/flink/pull/13760#discussion_r510840984", "createdAt": "2020-10-23T12:14:44Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the first input of {@link SecondInputOfTwoInput}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MTEyOA==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/13760#discussion_r510841128", "createdAt": "2020-10-23T12:14:58Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the second input of {@link SecondInputOfTwoInput}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dcac98f384df333595164ab13f022edb2c62f26"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NjE0OTQ5", "url": "https://github.com/apache/flink/pull/13760#pullrequestreview-515614949", "createdAt": "2020-10-23T12:22:27Z", "commit": {"oid": "97e346b1c872e148a2a9fa6f4f6fa1f6142f2cbe"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjoyMjoyN1rOHnLhpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjozMDo1NFrOHnLzOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0NTM0OA==", "bodyText": "TwoInput -> TwoInputs. There are some other class names with the same issue.", "url": "https://github.com/apache/flink/pull/13760#discussion_r510845348", "createdAt": "2020-10-23T12:22:27Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/CopyingFirstInputOfTwoInputStreamOperatorOutput.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.output;\n+\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.streaming.api.operators.Output;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * An {@link Output} that can be used to emit copying elements and other messages\n+ * for the first input of {@link TwoInputStreamOperator}.\n+ */\n+public class CopyingFirstInputOfTwoInputStreamOperatorOutput extends FirstInputOfTwoInputStreamOperatorOutput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e346b1c872e148a2a9fa6f4f6fa1f6142f2cbe"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTg1MA==", "bodyText": "MultipleInputOperatorException?", "url": "https://github.com/apache/flink/pull/13760#discussion_r510849850", "createdAt": "2020-10-23T12:30:54Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/ExceptionInMultipleInputOperatorException.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.output;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.util.WrappingRuntimeException;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A special exception that signifies that the cause exception came from a {@link MultipleInputStreamOperator}.\n+ */\n+@Internal\n+public class ExceptionInMultipleInputOperatorException extends WrappingRuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97e346b1c872e148a2a9fa6f4f6fa1f6142f2cbe"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzY1NzYy", "url": "https://github.com/apache/flink/pull/13760#pullrequestreview-516365762", "createdAt": "2020-10-25T14:40:57Z", "commit": {"oid": "8939025b83a01f41702926602ec1ed5abfbd98e1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNDo0MDo1N1rOHn57tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNDo0MDo1N1rOHn57tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYwNTY4Ng==", "bodyText": "This does not seem to be correct. See TableStreamOperator#computeMemorySize and its usage in SortMergeJoinOperator.", "url": "https://github.com/apache/flink/pull/13760#discussion_r511605686", "createdAt": "2020-10-25T14:40:57Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/BatchMultipleInputStreamOperator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.core.memory.ManagedMemoryUseCase;\n+import org.apache.flink.streaming.api.graph.StreamConfig;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.operators.multipleinput.input.InputSelectionHandler;\n+import org.apache.flink.table.runtime.operators.multipleinput.input.InputSpec;\n+\n+import java.util.List;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A {@link MultipleInputStreamOperatorBase} to handle batch operators.\n+ */\n+public class BatchMultipleInputStreamOperator\n+\t\textends MultipleInputStreamOperatorBase\n+\t\timplements BoundedMultiInput, InputSelectable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final InputSelectionHandler inputSelectionHandler;\n+\n+\tpublic BatchMultipleInputStreamOperator(\n+\t\t\tStreamOperatorParameters<RowData> parameters,\n+\t\t\tList<InputSpec> inputSpecs,\n+\t\t\tList<TableOperatorWrapper<?>> headWrapper,\n+\t\t\tTableOperatorWrapper<?> tailWrapper) {\n+\t\tsuper(parameters, inputSpecs, headWrapper, tailWrapper);\n+\t\tinputSelectionHandler = new InputSelectionHandler(inputSpecs);\n+\t}\n+\n+\t@Override\n+\tpublic void endInput(int inputId) throws Exception {\n+\t\tinputSelectionHandler.endInput(inputId);\n+\t\tInputSpec inputSpec = inputSpecMap.get(inputId);\n+\t\tinputSpec.getOutput().endOperatorInput(inputSpec.getOutputOpInputId());\n+\t}\n+\n+\t@Override\n+\tpublic InputSelection nextSelection() {\n+\t\treturn inputSelectionHandler.getInputSelection();\n+\t}\n+\n+\tprotected StreamConfig createStreamConfig(\n+\t\t\tStreamOperatorParameters<RowData> multipleInputOperatorParameters,\n+\t\t\tTableOperatorWrapper<?> wrapper) {\n+\t\tStreamConfig streamConfig = super.createStreamConfig(multipleInputOperatorParameters, wrapper);\n+\t\tcheckState(wrapper.getManagedMemoryFraction() >= 0);\n+\t\tConfiguration taskManagerConfig = getRuntimeContext().getTaskManagerRuntimeInfo().getConfiguration();\n+\t\tdouble managedMemoryFraction = multipleInputOperatorParameters.getStreamConfig()\n+\t\t\t\t.getManagedMemoryFractionOperatorUseCaseOfSlot(\n+\t\t\t\t\t\tManagedMemoryUseCase.BATCH_OP,\n+\t\t\t\t\t\ttaskManagerConfig,\n+\t\t\t\t\t\tgetRuntimeContext().getUserCodeClassLoader()) *\n+\t\t\t\twrapper.getManagedMemoryFraction();\n+\t\tstreamConfig.setManagedMemoryFractionOperatorOfUseCase(ManagedMemoryUseCase.BATCH_OP, managedMemoryFraction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8939025b83a01f41702926602ec1ed5abfbd98e1"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NjI5NjQw", "url": "https://github.com/apache/flink/pull/13760#pullrequestreview-517629640", "createdAt": "2020-10-27T12:05:06Z", "commit": {"oid": "ca2e5e38b1c4d53b9db0e14013fdb80694e4c79d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4871bcd0e44d61ecf8e02364759266214005a9b2", "author": {"user": {"login": "godfreyhe", "name": "godfrey he"}}, "url": "https://github.com/apache/flink/commit/4871bcd0e44d61ecf8e02364759266214005a9b2", "committedDate": "2020-10-27T12:43:50Z", "message": "[FLINK-19627][table-runtime] Introduce OneInput, FirstInputOfTwoInput, SecondInputOfTwoInput, InputSelectionHandler for multiple input operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a1819319fdeace7469a7fd40128881b69d0e9b", "author": {"user": {"login": "godfreyhe", "name": "godfrey he"}}, "url": "https://github.com/apache/flink/commit/a9a1819319fdeace7469a7fd40128881b69d0e9b", "committedDate": "2020-10-27T12:43:51Z", "message": "[FLINK-19627][table-runtime] Introduce different Output sub-classes for multiple input operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1353f7422a706cd50502d62b988b06154d33ffc", "author": {"user": {"login": "godfreyhe", "name": "godfrey he"}}, "url": "https://github.com/apache/flink/commit/b1353f7422a706cd50502d62b988b06154d33ffc", "committedDate": "2020-10-27T12:43:51Z", "message": "[FLINK-19627][table-runtime] Introduce multiple input operator for batch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca2e5e38b1c4d53b9db0e14013fdb80694e4c79d", "author": {"user": {"login": "godfreyhe", "name": "godfrey he"}}, "url": "https://github.com/apache/flink/commit/ca2e5e38b1c4d53b9db0e14013fdb80694e4c79d", "committedDate": "2020-10-27T06:59:47Z", "message": "remove todo and update comments"}, "afterCommit": {"oid": "b1353f7422a706cd50502d62b988b06154d33ffc", "author": {"user": {"login": "godfreyhe", "name": "godfrey he"}}, "url": "https://github.com/apache/flink/commit/b1353f7422a706cd50502d62b988b06154d33ffc", "committedDate": "2020-10-27T12:43:51Z", "message": "[FLINK-19627][table-runtime] Introduce multiple input operator for batch"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}