{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTQ4MDE0", "number": 12630, "title": "[FLINK-18268][docs] Correct Table API in Temporal table docs", "bodyText": "What is the purpose of the change\n\nThis pull request Using DDL define a temporal table to replace out-of-date TableEnvironment API.\n\nBrief change log\n\nupdate  temporal_tables.md\u3001temporal_tables.zh.md\n[minor] update hbase server's port from 2121 to 2181 in hbase connector docs\n\nVerifying this change\nVerify in local environment which servers in http://localhost:4000\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): ( no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-06-12T08:43:02Z", "url": "https://github.com/apache/flink/pull/12630", "merged": true, "mergeCommit": {"oid": "fea20adef1ab5f722e418c1a89600e0786208469"}, "closed": true, "closedAt": "2020-06-16T04:16:22Z", "author": {"login": "leonardBang"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrriGBgFqTQzMTEwNTUwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrtXTAAFqTQzMTE0NzgwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTA1NTA2", "url": "https://github.com/apache/flink/pull/12630#pullrequestreview-431105506", "createdAt": "2020-06-16T01:52:00Z", "commit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo1MjowMFrOGkIevA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjowNToxMFrOGkIsbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MDg2MA==", "bodyText": "nit: an -> a", "url": "https://github.com/apache/flink/pull/12630#discussion_r440540860", "createdAt": "2020-06-16T01:52:00Z", "author": {"login": "godfreyhe"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,43 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n+StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, settings);\n+// or TableEnvironment tEnv = TableEnvironment.create(settings);\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NDM2NQ==", "bodyText": "add some comments here, such as currency as rowkey", "url": "https://github.com/apache/flink/pull/12630#discussion_r440544365", "createdAt": "2020-06-16T02:05:10Z", "author": {"login": "godfreyhe"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,43 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n+StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, settings);\n+// or TableEnvironment tEnv = TableEnvironment.create(settings);\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql\n+tEnv.executeSql(\n+    \"CREATE TABLE LatestRates (\" +\n+    \"   currency STRING,\" +\n+    \"   fam1 ROW<rate DOUBLE>\" +\n+    \") WITH (\" +\n+    \"   'connector' = 'hbase-1.4',\" +\n+    \"   'table-name' = 'Rates',\" +\n+    \"   'zookeeper.quorum' = 'localhost:2181'\" +\n+    \")\");\n {% endhighlight %}\n </div>\n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n // Get the stream and table environments.\n val env = StreamExecutionEnvironment.getExecutionEnvironment\n-val tEnv = TableEnvironment.getTableEnvironment(env)\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-val rates = new HBaseTableSource(conf, \"Rates\")\n-rates.setRowKey(\"currency\", String.class)   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class)\n+val settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n+val tEnv = StreamTableEnvironment.create(env, settings)\n+// or val tEnv = TableEnvironment.create(settings)\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql\n+tEnv.executeSql(\n+    s\"\"\"\n+       |CREATE TABLE LatestRates (\n+       |    currency STRING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44869b7df481390c390051f0c8bbf2f6a7df6a80", "author": {"user": {"login": "leonardBang", "name": "Leonard Xu"}}, "url": "https://github.com/apache/flink/commit/44869b7df481390c390051f0c8bbf2f6a7df6a80", "committedDate": "2020-06-16T02:34:01Z", "message": "[FLINK-18268][docs] Correct Table API in Temporal table docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed3f09a47cd103818f3563d519da24b22da65798", "author": {"user": {"login": "leonardBang", "name": "Leonard Xu"}}, "url": "https://github.com/apache/flink/commit/ed3f09a47cd103818f3563d519da24b22da65798", "committedDate": "2020-06-16T03:18:34Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88", "author": {"user": {"login": "leonardBang", "name": "Leonard Xu"}}, "url": "https://github.com/apache/flink/commit/535ba0fc8ca6ea67ded71fd9a80a24762b381a88", "committedDate": "2020-06-12T08:36:31Z", "message": "[FLINK-18268][docs] Correct Table API in Temporal table docs"}, "afterCommit": {"oid": "ed3f09a47cd103818f3563d519da24b22da65798", "author": {"user": {"login": "leonardBang", "name": "Leonard Xu"}}, "url": "https://github.com/apache/flink/commit/ed3f09a47cd103818f3563d519da24b22da65798", "committedDate": "2020-06-16T03:18:34Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTM3MzE5", "url": "https://github.com/apache/flink/pull/12630#pullrequestreview-431137319", "createdAt": "2020-06-16T03:37:26Z", "commit": {"oid": "ed3f09a47cd103818f3563d519da24b22da65798"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQzNTgw", "url": "https://github.com/apache/flink/pull/12630#pullrequestreview-431143580", "createdAt": "2020-06-16T04:00:29Z", "commit": {"oid": "ed3f09a47cd103818f3563d519da24b22da65798"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowMDozMFrOGkKbXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowMDozMFrOGkKbXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3Mjc2Nw==", "bodyText": "Drop .useBlinkPlanner().inStreamingMode()? Because it is default value.", "url": "https://github.com/apache/flink/pull/12630#discussion_r440572767", "createdAt": "2020-06-16T04:00:30Z", "author": {"login": "JingsongLi"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,45 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3f09a47cd103818f3563d519da24b22da65798"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c47a299bdf759fdad12e4dbfc9643e24c2ea32b7", "author": {"user": {"login": "leonardBang", "name": "Leonard Xu"}}, "url": "https://github.com/apache/flink/commit/c47a299bdf759fdad12e4dbfc9643e24c2ea32b7", "committedDate": "2020-06-16T04:04:21Z", "message": "minor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTQ3ODA5", "url": "https://github.com/apache/flink/pull/12630#pullrequestreview-431147809", "createdAt": "2020-06-16T04:16:00Z", "commit": {"oid": "c47a299bdf759fdad12e4dbfc9643e24c2ea32b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3410, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}