{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1ODI3MjIx", "number": 13932, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowODo1N1rOFDV4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo0NTo1OVrOFD22LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MDQ4NjE3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/table/PrintConnectorITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowODo1N1rOIC8X3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwODowODo1N1rOIC8X3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTk1NzIxNQ==", "bodyText": "Arrays.asList -> Collections.singletonList", "url": "https://github.com/apache/flink/pull/13932#discussion_r539957215", "createdAt": "2020-12-10T08:08:57Z", "author": {"login": "fsk119"}, "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/runtime/stream/table/PrintConnectorITCase.java", "diffHunk": "@@ -77,6 +77,31 @@ public void testStandardError() throws Exception {\n \t\ttest(true);\n \t}\n \n+\t@Test\n+\tpublic void testWithParallelism() throws Exception {\n+\t\ttEnv().executeSql(\"create table print_t (\" +\n+\t\t\t\t\"f0 int,\" +\n+\t\t\t\t\"f1 double\" +\n+\t\t\t\t\") with (\" +\n+\t\t\t\t\"'connector' = 'print',\" +\n+\t\t\t\t\"'print-identifier' = 'test_print',\" +\n+\t\t\t\t\"'sink.parallelism' = '2',\" +\n+\t\t\t\t\"'standard-error'='false')\");\n+\t\tDataType type = tEnv().from(\"print_t\").getSchema().toRowDataType();\n+\t\tRow row = Row.of(1, 1.1);\n+\t\ttEnv().fromValues(type, Arrays.asList(row)).executeInsert(\"print_t\").await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b11d7775fa9eb986c9de33d23d275c3d8fcfbe"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTg4NjUyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/PrintTableSinkFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo0NTo1OVrOIDsyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo0NTo1OVrOIDsyoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1MDQ5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate final Integer parallelism;\n          \n          \n            \n            \t\tprivate final @Nullable Integer parallelism;\n          \n      \n    \n    \n  \n\nWould be better to add @Nullable annotation.\nSee the Flink Code Style Guideline: https://flink.apache.org/contributing/code-style-and-quality-java.html#java-optional", "url": "https://github.com/apache/flink/pull/13932#discussion_r540750496", "createdAt": "2020-12-11T07:45:59Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/PrintTableSinkFactory.java", "diffHunk": "@@ -95,19 +96,22 @@ public DynamicTableSink createDynamicTableSink(Context context) {\n \t\treturn new PrintSink(\n \t\t\t\tcontext.getCatalogTable().getSchema().toPhysicalRowDataType(),\n \t\t\t\toptions.get(PRINT_IDENTIFIER),\n-\t\t\t\toptions.get(STANDARD_ERROR));\n+\t\t\t\toptions.get(STANDARD_ERROR),\n+\t\t\t\toptions.getOptional(FactoryUtil.SINK_PARALLELISM).orElse(null));\n \t}\n \n \tprivate static class PrintSink implements DynamicTableSink {\n \n \t\tprivate final DataType type;\n \t\tprivate final String printIdentifier;\n \t\tprivate final boolean stdErr;\n+\t\tprivate final Integer parallelism;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5464e35dc08ff8d326e298987998e26441b92d92"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4935, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}