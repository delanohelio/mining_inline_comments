{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDE2NDc2", "number": 14218, "title": "[FLINK-20331][checkpointing][task] Don't fail the task if unaligned checkpoint was subsumed", "bodyText": "What is the purpose of the change\nA check was added recently that the RemoteInputChannel.lastBarrierSequenceNumber was not overwritten by a newer barrier.\nThe check itself is valid, however the task  shouldn't fail in that case.\nRelying on the assumption of at most one active unaligned checkpoint at a time, the older checkpoint should simply be declined.\nCleanup is needed for (all) channels, barrier controller, handler and checkpoint writer. Therefore, abort in SingleCheckpointBarrierHandler should be used.\nVerifying this change\nThis change is already covered by existing test: UnalignedCheckpointITCase.parallel pipeline with mixed channels, p = 20\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? no", "createdAt": "2020-11-25T12:40:01Z", "url": "https://github.com/apache/flink/pull/14218", "merged": true, "mergeCommit": {"oid": "50af0b161b1962d9db5c692aa965b310a4000da9"}, "closed": true, "closedAt": "2020-11-26T07:06:21Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf9yINgFqTUzODQ1NjgzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgCvb1ABqjQwMzk0MDM5NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDU2ODM2", "url": "https://github.com/apache/flink/pull/14218#pullrequestreview-538456836", "createdAt": "2020-11-25T12:43:51Z", "commit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0Mzo1MVrOH5xwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NzoyN1rOH5x48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NjAyMw==", "bodyText": "I was in doubt whether this exception type is appropriate here or whether an Optional should be returned.\nBut at the upper level, it ultimately should be used, and the reason is only known here (so it would be harder to analyze the exception/empty buffers later).", "url": "https://github.com/apache/flink/pull/14218#discussion_r530346023", "createdAt": "2020-11-25T12:43:51Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -535,13 +536,16 @@ public void checkpointStopped(long checkpointId) {\n \t/**\n \t * Returns a list of buffers, checking the first n non-priority buffers, and skipping all events.\n \t */\n-\tprivate List<Buffer> getInflightBuffersUnsafe(long checkpointId) {\n+\tprivate List<Buffer> getInflightBuffersUnsafe(long checkpointId) throws CheckpointException {\n \t\tassert Thread.holdsLock(receivedBuffers);\n \n+\t\tif (checkpointId < lastBarrierId) {\n+\t\t\tthrow new CheckpointException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Njg5NQ==", "bodyText": "Please double-check this @AHeise  :)", "url": "https://github.com/apache/flink/pull/14218#discussion_r530346895", "createdAt": "2020-11-25T12:45:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0ODI3NQ==", "bodyText": "This is not necessary currently.\nBut because I extracted this method the assignment became more error-prone, so I added this check.", "url": "https://github.com/apache/flink/pull/14218#discussion_r530348275", "createdAt": "2020-11-25T12:47:27Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {\n+\t\t\tabortInternal(cancelledId, new CheckpointException(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER));\n \t\t}\n+\t}\n+\n+\tprivate void abortInternal(long cancelledId, CheckpointException exception) throws IOException {\n \t\t// by setting the currentCheckpointId to this checkpoint while keeping the numBarriers\n \t\t// at zero means that no checkpoint barrier can start a new alignment\n-\t\tcurrentCheckpointId = cancelledId;\n+\t\tcurrentCheckpointId = Math.max(cancelledId, currentCheckpointId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDcwNDUy", "url": "https://github.com/apache/flink/pull/14218#pullrequestreview-538470452", "createdAt": "2020-11-25T13:01:58Z", "commit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzowMTo1OFrOH5ybBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzowMTo1OFrOH5ybBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM1Njk5Nw==", "bodyText": "It's correct but it might be easier to do\ncancelledId > currentCheckpointId || (currentCheckpointId == cancelledId && numBarriersReceived > 0)\n\nSo either it's a future checkpoint, or it's the current checkpoint and not yet canceled.", "url": "https://github.com/apache/flink/pull/14218#discussion_r530356997", "createdAt": "2020-11-25T13:01:58Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Njg5NQ=="}, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/1109ad24aebd4a283c3ee77d798eff81bfab609f", "committedDate": "2020-11-25T12:30:12Z", "message": "[FLINK-20331][checkpointing][task] Don't fail the task if unaligned checkpoint was subsumed"}, "afterCommit": {"oid": "34bf5e7bd80836aebb708e47d4c029fbb4e90048", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/34bf5e7bd80836aebb708e47d4c029fbb4e90048", "committedDate": "2020-11-25T13:23:04Z", "message": "[FLINK-20331][checkpointing][task] Don't fail the task if unaligned checkpoint was subsumed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb594a837c870bab3a6431ec3d73db19ba8b097", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/cfb594a837c870bab3a6431ec3d73db19ba8b097", "committedDate": "2020-11-25T18:34:02Z", "message": "[FLINK-20331][checkpointing][task] Don't fail the task if unaligned checkpoint was subsumed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34bf5e7bd80836aebb708e47d4c029fbb4e90048", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/34bf5e7bd80836aebb708e47d4c029fbb4e90048", "committedDate": "2020-11-25T13:23:04Z", "message": "[FLINK-20331][checkpointing][task] Don't fail the task if unaligned checkpoint was subsumed"}, "afterCommit": {"oid": "cfb594a837c870bab3a6431ec3d73db19ba8b097", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/cfb594a837c870bab3a6431ec3d73db19ba8b097", "committedDate": "2020-11-25T18:34:02Z", "message": "[FLINK-20331][checkpointing][task] Don't fail the task if unaligned checkpoint was subsumed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4148, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}