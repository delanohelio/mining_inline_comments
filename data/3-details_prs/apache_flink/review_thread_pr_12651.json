{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDEzNjY0", "number": 12651, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxMzoyNVrOEFyLjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxNTowN1rOEFyMfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTAwNDk1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/FileSystemLookupFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxMzoyNVrOGkLf6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxMzoyNVrOGkLf6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MDMxMw==", "bodyText": "10 sec?", "url": "https://github.com/apache/flink/pull/12651#discussion_r440590313", "createdAt": "2020-06-16T05:13:25Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/FileSystemLookupFunction.java", "diffHunk": "@@ -59,6 +59,11 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(FileSystemLookupFunction.class);\n \n+\t// the max number of retries before throwing exception, in case of failure to load the table into cache\n+\tprivate static final int MAX_RETRIES = 3;\n+\t// interval between retries\n+\tprivate static final Duration RETRY_INTERVAL = Duration.ofSeconds(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c257450f6449b99af763adb8c7f15487f676d0d7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTAwNzMzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/FileSystemLookupFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxNTowN1rOGkLheg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNToxNTowN1rOGkLheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5MDcxNA==", "bodyText": "One single line to numRetry ++", "url": "https://github.com/apache/flink/pull/12651#discussion_r440590714", "createdAt": "2020-06-16T05:15:07Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/FileSystemLookupFunction.java", "diffHunk": "@@ -143,26 +148,41 @@ private void checkCacheReload() {\n \t\t} else {\n \t\t\tLOG.info(\"Populating lookup join cache\");\n \t\t}\n-\t\tcache.clear();\n-\t\ttry {\n-\t\t\tT[] inputSplits = inputFormat.createInputSplits(1);\n-\t\t\tGenericRowData reuse = new GenericRowData(producedNames.length);\n-\t\t\tlong count = 0;\n-\t\t\tfor (T split : inputSplits) {\n-\t\t\t\tinputFormat.open(split);\n-\t\t\t\twhile (!inputFormat.reachedEnd()) {\n-\t\t\t\t\tRowData row = inputFormat.nextRecord(reuse);\n-\t\t\t\t\tcount++;\n-\t\t\t\t\tRow key = extractKey(row);\n-\t\t\t\t\tList<RowData> rows = cache.computeIfAbsent(key, k -> new ArrayList<>());\n-\t\t\t\t\trows.add(serializer.copy(row));\n+\t\tint numRetry = 0;\n+\t\twhile (true) {\n+\t\t\tcache.clear();\n+\t\t\ttry {\n+\t\t\t\tT[] inputSplits = inputFormat.createInputSplits(1);\n+\t\t\t\tGenericRowData reuse = new GenericRowData(producedNames.length);\n+\t\t\t\tlong count = 0;\n+\t\t\t\tfor (T split : inputSplits) {\n+\t\t\t\t\tinputFormat.open(split);\n+\t\t\t\t\twhile (!inputFormat.reachedEnd()) {\n+\t\t\t\t\t\tRowData row = inputFormat.nextRecord(reuse);\n+\t\t\t\t\t\tcount++;\n+\t\t\t\t\t\tRow key = extractKey(row);\n+\t\t\t\t\t\tList<RowData> rows = cache.computeIfAbsent(key, k -> new ArrayList<>());\n+\t\t\t\t\t\trows.add(serializer.copy(row));\n+\t\t\t\t\t}\n+\t\t\t\t\tinputFormat.close();\n+\t\t\t\t}\n+\t\t\t\tnextLoadTime = System.currentTimeMillis() + getCacheTTL().toMillis();\n+\t\t\t\tLOG.info(\"Loaded {} row(s) into lookup join cache\", count);\n+\t\t\t\treturn;\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tif (numRetry >= MAX_RETRIES) {\n+\t\t\t\t\tthrow new FlinkRuntimeException(\n+\t\t\t\t\t\t\tString.format(\"Failed to load table into cache after %d retries\", numRetry), e);\n+\t\t\t\t}\n+\t\t\t\tlong toSleep = ++numRetry * RETRY_INTERVAL.toMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c257450f6449b99af763adb8c7f15487f676d0d7"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}