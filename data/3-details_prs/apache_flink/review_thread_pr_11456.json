{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMzIxMTc4", "number": 11456, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo1Mjo1NVrODsgITw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1NDowMlrODvcQcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTkwMzUxOnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/parameters/KubernetesJobManagerParameters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMzo1Mjo1NVrOF9YzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo0MzowMFrOF9qWQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMzc2Mg==", "bodyText": "nit: maybe isInternalServiceEnabled is better. Since we do not really enable the internal service here, we just check the state.", "url": "https://github.com/apache/flink/pull/11456#discussion_r399913762", "createdAt": "2020-03-30T03:52:55Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/parameters/KubernetesJobManagerParameters.java", "diffHunk": "@@ -112,4 +113,8 @@ public String getEntrypointClass() {\n \tpublic KubernetesConfigOptions.ServiceExposedType getRestServiceExposedType() {\n \t\treturn flinkConfig.get(KubernetesConfigOptions.REST_SERVICE_EXPOSED_TYPE);\n \t}\n+\n+\tpublic boolean enableInternalService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d80bf44961a0689f289e1ed7fe3a2ff30e8005eb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwMTI4MA==", "bodyText": "Agree!", "url": "https://github.com/apache/flink/pull/11456#discussion_r400201280", "createdAt": "2020-03-30T13:43:00Z", "author": {"login": "zhengcanbin"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/parameters/KubernetesJobManagerParameters.java", "diffHunk": "@@ -112,4 +113,8 @@ public String getEntrypointClass() {\n \tpublic KubernetesConfigOptions.ServiceExposedType getRestServiceExposedType() {\n \t\treturn flinkConfig.get(KubernetesConfigOptions.REST_SERVICE_EXPOSED_TYPE);\n \t}\n+\n+\tpublic boolean enableInternalService() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkxMzc2Mg=="}, "originalCommit": {"oid": "d80bf44961a0689f289e1ed7fe3a2ff30e8005eb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDcyNDg3OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1Mzo0MVrOGB3Vdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowNzo1OVrOGB32jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwODM3NQ==", "bodyText": "@zhengcanbin does this setting refer to Headless service? Can we move \"None\" into Constants?", "url": "https://github.com/apache/flink/pull/11456#discussion_r404608375", "createdAt": "2020-04-07T07:53:41Z", "author": {"login": "tisonkun"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java", "diffHunk": "@@ -19,63 +19,67 @@\n package org.apache.flink.kubernetes.kubeclient.decorators;\n \n import org.apache.flink.configuration.JobManagerOptions;\n-import org.apache.flink.kubernetes.configuration.KubernetesConfigOptions;\n import org.apache.flink.kubernetes.kubeclient.parameters.KubernetesJobManagerParameters;\n import org.apache.flink.kubernetes.utils.Constants;\n import org.apache.flink.kubernetes.utils.KubernetesUtils;\n \n import io.fabric8.kubernetes.api.model.HasMetadata;\n-import io.fabric8.kubernetes.api.model.ServicePort;\n+import io.fabric8.kubernetes.api.model.Service;\n+import io.fabric8.kubernetes.api.model.ServiceBuilder;\n \n import java.io.IOException;\n+import java.util.Collections;\n import java.util.List;\n \n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n /**\n  * Creates an internal Service which forwards the requests from the TaskManager(s) to the\n  * active JobManager.\n  * Note that only the non-HA scenario relies on this Service for internal communication, since\n  * in the HA mode, the TaskManager(s) directly connects to the JobManager via IP address.\n  */\n-public class InternalServiceDecorator extends AbstractServiceDecorator {\n+public class InternalServiceDecorator extends AbstractKubernetesStepDecorator {\n+\n+\tprivate final KubernetesJobManagerParameters kubernetesJobManagerParameters;\n \n \tpublic InternalServiceDecorator(KubernetesJobManagerParameters kubernetesJobManagerParameters) {\n-\t\tsuper(kubernetesJobManagerParameters);\n+\t\tthis.kubernetesJobManagerParameters = checkNotNull(kubernetesJobManagerParameters);\n \t}\n \n \t@Override\n \tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n-\t\tfinal String serviceName = getServiceName();\n+\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n+\n+\t\tfinal Service headlessService = new ServiceBuilder()\n+\t\t\t.withApiVersion(Constants.API_VERSION)\n+\t\t\t.withNewMetadata()\n+\t\t\t\t.withName(serviceName)\n+\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n+\t\t\t\t.endMetadata()\n+\t\t\t.withNewSpec()\n+\t\t\t\t.withClusterIP(\"None\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c92f7417fc12a878879653e7a17e592a9816640"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNjg0Nw==", "bodyText": "@zhengcanbin does this setting refer to Headless service?\nYes.\n\n\nCan we move \"None\" into Constants?\nFixed by 1188bfd", "url": "https://github.com/apache/flink/pull/11456#discussion_r404616847", "createdAt": "2020-04-07T08:07:59Z", "author": {"login": "zhengcanbin"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/InternalServiceDecorator.java", "diffHunk": "@@ -19,63 +19,67 @@\n package org.apache.flink.kubernetes.kubeclient.decorators;\n \n import org.apache.flink.configuration.JobManagerOptions;\n-import org.apache.flink.kubernetes.configuration.KubernetesConfigOptions;\n import org.apache.flink.kubernetes.kubeclient.parameters.KubernetesJobManagerParameters;\n import org.apache.flink.kubernetes.utils.Constants;\n import org.apache.flink.kubernetes.utils.KubernetesUtils;\n \n import io.fabric8.kubernetes.api.model.HasMetadata;\n-import io.fabric8.kubernetes.api.model.ServicePort;\n+import io.fabric8.kubernetes.api.model.Service;\n+import io.fabric8.kubernetes.api.model.ServiceBuilder;\n \n import java.io.IOException;\n+import java.util.Collections;\n import java.util.List;\n \n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n /**\n  * Creates an internal Service which forwards the requests from the TaskManager(s) to the\n  * active JobManager.\n  * Note that only the non-HA scenario relies on this Service for internal communication, since\n  * in the HA mode, the TaskManager(s) directly connects to the JobManager via IP address.\n  */\n-public class InternalServiceDecorator extends AbstractServiceDecorator {\n+public class InternalServiceDecorator extends AbstractKubernetesStepDecorator {\n+\n+\tprivate final KubernetesJobManagerParameters kubernetesJobManagerParameters;\n \n \tpublic InternalServiceDecorator(KubernetesJobManagerParameters kubernetesJobManagerParameters) {\n-\t\tsuper(kubernetesJobManagerParameters);\n+\t\tthis.kubernetesJobManagerParameters = checkNotNull(kubernetesJobManagerParameters);\n \t}\n \n \t@Override\n \tpublic List<HasMetadata> buildAccompanyingKubernetesResources() throws IOException {\n-\t\tfinal String serviceName = getServiceName();\n+\t\tif (!kubernetesJobManagerParameters.isInternalServiceEnabled()) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n+\n+\t\tfinal String serviceName = KubernetesUtils.getInternalServiceName(kubernetesJobManagerParameters.getClusterId());\n+\n+\t\tfinal Service headlessService = new ServiceBuilder()\n+\t\t\t.withApiVersion(Constants.API_VERSION)\n+\t\t\t.withNewMetadata()\n+\t\t\t\t.withName(serviceName)\n+\t\t\t\t.withLabels(kubernetesJobManagerParameters.getCommonLabels())\n+\t\t\t\t.endMetadata()\n+\t\t\t.withNewSpec()\n+\t\t\t\t.withClusterIP(\"None\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwODM3NQ=="}, "originalCommit": {"oid": "3c92f7417fc12a878879653e7a17e592a9816640"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDcyNjI1OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1NDowMlrOGB3WPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowODoxOFrOGB33MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwODU3NQ==", "bodyText": "Also update literal \"None\" here.", "url": "https://github.com/apache/flink/pull/11456#discussion_r404608575", "createdAt": "2020-04-07T07:54:02Z", "author": {"login": "tisonkun"}, "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java", "diffHunk": "@@ -179,8 +180,9 @@ public void testServices() {\n \t\tfinal Service resultInternalService = internalServiceCandidates.get(0);\n \t\tassertEquals(2, resultInternalService.getMetadata().getLabels().size());\n \n-\t\tassertEquals(resultInternalService.getSpec().getType(), \"ClusterIP\");\n-\t\tassertEquals(3, resultInternalService.getSpec().getPorts().size());\n+\t\tassertNull(resultInternalService.getSpec().getType());\n+\t\tassertEquals(\"None\", resultInternalService.getSpec().getClusterIP());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c92f7417fc12a878879653e7a17e592a9816640"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNzAwOA==", "bodyText": "Fixed by 1188bfd", "url": "https://github.com/apache/flink/pull/11456#discussion_r404617008", "createdAt": "2020-04-07T08:08:18Z", "author": {"login": "zhengcanbin"}, "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/factory/KubernetesJobManagerFactoryTest.java", "diffHunk": "@@ -179,8 +180,9 @@ public void testServices() {\n \t\tfinal Service resultInternalService = internalServiceCandidates.get(0);\n \t\tassertEquals(2, resultInternalService.getMetadata().getLabels().size());\n \n-\t\tassertEquals(resultInternalService.getSpec().getType(), \"ClusterIP\");\n-\t\tassertEquals(3, resultInternalService.getSpec().getPorts().size());\n+\t\tassertNull(resultInternalService.getSpec().getType());\n+\t\tassertEquals(\"None\", resultInternalService.getSpec().getClusterIP());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwODU3NQ=="}, "originalCommit": {"oid": "3c92f7417fc12a878879653e7a17e592a9816640"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 819, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}