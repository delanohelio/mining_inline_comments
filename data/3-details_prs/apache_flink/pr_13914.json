{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDkzODc5", "number": 13914, "title": "[FLINK-19890][table][fs-connector] Introduce LimitableBulkFormat to wrap BulkFormat when limit pushed down", "bodyText": "What is the purpose of the change\nUser requirement:\nUsers need to look at a few random pieces of data in a table to see what the data looks like. So users often use the SQL:\n\"select * from table limit 10\"\nFor a large table, expect to end soon because only a few pieces of data are queried.\nFor DataStream or BoundedStream, they are push based execution models, so the downstream cannot control the end of source operator.\nWe need push down limit to source operator, so that source operator can end early.\nImplement a LimitableBulkFormat wrapper to limit output record number in the file source.\nBrief change log\n\nIntroduce LimitableBulkFormat\nIntegrate to FileSystemTableSource\n\nVerifying this change\nThis change is already covered by existing tests, such as FileSystemITCaseBase.testLimitPushDown.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? yes\nIf yes, how is the feature documented? JavaDocs", "createdAt": "2020-11-04T02:25:18Z", "url": "https://github.com/apache/flink/pull/13914", "merged": true, "mergeCommit": {"oid": "4435fe2f9973886b518f53e10734b8cb7966900c"}, "closed": true, "closedAt": "2020-11-04T10:10:58Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZEPL8gH2gAyNTE1MDkzODc5OjI0MWNjY2FiNTM5ODRlMTNiY2FlYjA5YzA4ODk5YWY4OTNmODM5ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZI0SvAFqTUyMzEwNDE4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "241cccab53984e13bcaeb09c08899af893f83985", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/241cccab53984e13bcaeb09c08899af893f83985", "committedDate": "2020-11-04T02:21:33Z", "message": "[FLINK-19890][table][fs-connector] Introduce LimitableBulkFormat to wrap BulkFormat when limit pushed down"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ca1a0f667a10d006193f43171ea7c482f204c5", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/62ca1a0f667a10d006193f43171ea7c482f204c5", "committedDate": "2020-11-04T02:34:41Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800a929258db1d388bbb1ea4d7ebc21551aad5f8", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/800a929258db1d388bbb1ea4d7ebc21551aad5f8", "committedDate": "2020-11-04T04:10:13Z", "message": "Use AtomicLong"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a254243687687de1b626aeed306f4c622150a6", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/88a254243687687de1b626aeed306f4c622150a6", "committedDate": "2020-11-04T05:54:16Z", "message": "Fix case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDc1MjI5", "url": "https://github.com/apache/flink/pull/13914#pullrequestreview-523075229", "createdAt": "2020-11-04T06:37:38Z", "commit": {"oid": "88a254243687687de1b626aeed306f4c622150a6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozNzozOVrOHtKumA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozNzozOVrOHtKumA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMzczNg==", "bodyText": "Don't we need to synchronize on the initialization here, if numRead can be accessed concurrently?", "url": "https://github.com/apache/flink/pull/13914#discussion_r517123736", "createdAt": "2020-11-04T06:37:39Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/LimitableBulkFormat.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.filesystem;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.connector.file.src.FileSourceSplit;\n+import org.apache.flink.connector.file.src.reader.BulkFormat;\n+import org.apache.flink.connector.file.src.util.RecordAndPosition;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * A {@link BulkFormat} that can limit output record number.\n+ */\n+public class LimitableBulkFormat<T, SplitT extends FileSourceSplit> implements BulkFormat<T, SplitT> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final BulkFormat<T, SplitT> format;\n+\tprivate final long limit;\n+\n+\tprivate transient AtomicLong numRead;\n+\n+\tprivate LimitableBulkFormat(BulkFormat<T, SplitT> format, long limit) {\n+\t\tthis.format = format;\n+\t\tthis.limit = limit;\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> createReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.createReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> restoreReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.restoreReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSplittable() {\n+\t\treturn format.isSplittable();\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<T> getProducedType() {\n+\t\treturn format.getProducedType();\n+\t}\n+\n+\tprivate class LimitableReader implements Reader<T> {\n+\n+\t\tprivate final Reader<T> reader;\n+\n+\t\tprivate LimitableReader(Reader<T> reader) {\n+\t\t\tthis.reader = reader;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordIterator<T> readBatch() throws IOException {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tRecordIterator<T> batch = reader.readBatch();\n+\t\t\treturn batch == null ? null : new LimitableIterator(batch);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\treader.close();\n+\t\t}\n+\t}\n+\n+\tprivate class LimitableIterator implements RecordIterator<T> {\n+\n+\t\tprivate final RecordIterator<T> iterator;\n+\n+\t\tprivate LimitableIterator(RecordIterator<T> iterator) {\n+\t\t\tthis.iterator = iterator;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordAndPosition<T> next() {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tgetNumRead().incrementAndGet();\n+\t\t\treturn iterator.next();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void releaseBatch() {\n+\t\t\titerator.releaseBatch();\n+\t\t}\n+\t}\n+\n+\tprivate AtomicLong getNumRead() {\n+\t\tif (numRead == null) {\n+\t\t\tnumRead = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a254243687687de1b626aeed306f4c622150a6"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44c909445bd9904c5624ff4ccf944bcd8f8bff3d", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/44c909445bd9904c5624ff4ccf944bcd8f8bff3d", "committedDate": "2020-11-04T07:09:22Z", "message": "Address comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e19b0f249789ddc7995ba0f9da816b1283dbd6c", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/1e19b0f249789ddc7995ba0f9da816b1283dbd6c", "committedDate": "2020-11-04T07:12:19Z", "message": "minor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTA0MTg4", "url": "https://github.com/apache/flink/pull/13914#pullrequestreview-523104188", "createdAt": "2020-11-04T07:41:42Z", "commit": {"oid": "1e19b0f249789ddc7995ba0f9da816b1283dbd6c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4751, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}