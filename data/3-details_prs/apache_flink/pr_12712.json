{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODY2Mjg3", "number": 12712, "title": "[FLINK-17544][jdbc]fix close() method bug and add test cases for JdbcOutputFormat", "bodyText": "What is the purpose of the change\nAccording to the description of FLINK-17544, TableJdbcUpsertOutputFormat will throw NPE if someone invokes close() method of formatter before open() or with open() at the same time. Meanwhile we find that JdbcOutputFormat will cause reasource leak if scheduler throws exception. Therefore, we fix these bugs and add tests to verify our work.\nBrief change log\n\ncheck value of  deleteExecutor whether is null before close\nrearrange close method of JdbcBatchingOutput\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded test that validate whether TableJdbcUpsertOutputFormat can quit safely if we invoke TableJdbcUpsertOutputFormat.close() before open()\nAdded test that validate whether JdbcTableOutputFormat can quit safely if flush() method throws exception\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)", "createdAt": "2020-06-19T03:22:15Z", "url": "https://github.com/apache/flink/pull/12712", "merged": true, "mergeCommit": {"oid": "9936a4d45c1e59d8c28a56805c1ab410c755fb6e"}, "closed": true, "closedAt": "2020-06-22T06:15:33Z", "author": {"login": "fsk119"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsqUqgAH2gAyNDM2ODY2Mjg3OjUzOWJlYWFlZjZiMzczYjBiNmE0OTc5Mjk0YTU5M2NiOWEwZmI5Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctqoatAFqTQzNDYyNzM3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/539beaaef6b373b0b6a4979294a593cb9a0fb939", "committedDate": "2020-06-19T03:17:20Z", "message": "fix close() method bug and add test cases for jdbc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODgwMTA3", "url": "https://github.com/apache/flink/pull/12712#pullrequestreview-433880107", "createdAt": "2020-06-19T08:00:55Z", "commit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODowMDo1NlrOGmL22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoxNToxMVrOGmSsQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MzMzNg==", "bodyText": "Please add a comment on this:\n// FLINK-17544: There should be no NPE thrown from this method", "url": "https://github.com/apache/flink/pull/12712#discussion_r442693336", "createdAt": "2020-06-19T08:00:56Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "diffHunk": "@@ -64,6 +64,19 @@ public void setup() {\n \t\tkeyFields = new String[]{\"id\"};\n \t}\n \n+\t@Test\n+\tpublic void testUpsertFormatCloseBeforeOpen() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\t\tJdbcDmlOptions dmlOptions = JdbcDmlOptions.builder()\n+\t\t\t.withTableName(options.getTableName()).withDialect(options.getDialect())\n+\t\t\t.withFieldNames(fieldNames).withKeyFields(keyFields).build();\n+\t\tformat = new TableJdbcUpsertOutputFormat(new SimpleJdbcConnectionProvider(options), dmlOptions, JdbcExecutionOptions.defaults());\n+\t\tformat.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDAwOA==", "bodyText": "Mockito is a bad practice which should be avoided as much as possible. You can\nJdbcExecutionOptions jdbcExecutionOptions = JdbcExecutionOptions.builder()\n\t\t\t.withBatchIntervalMs(1000_000L)\n\t\t\t.withBatchSize(1)\n\t\t\t.withMaxRetries(1)\n\t\t\t.build();\nExecutionConfig executionConfig = new ExecutionConfig();\nto create them.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442804008", "createdAt": "2020-06-19T12:11:54Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDI3Mg==", "bodyText": "I suggest to suse 1000s for the interval and 1 for the batch to quickly throw the exception and avoid a async exception.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442804272", "createdAt": "2020-06-19T12:12:37Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDAwOA=="}, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNTMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t} catch (Exception e) {\n          \n          \n            \n            \t\t\ttry {\n          \n          \n            \n            \t\t\t\tformat.close();\n          \n          \n            \n            \t\t\t} catch (Exception realException){\n          \n          \n            \n            \t\t\t\tConnection connection = format.getConnection();\n          \n          \n            \n            \t\t\t\tif (connection != null && !connection.isClosed()){\n          \n          \n            \n            \t\t\t\t\tthrow new RuntimeException(\"Resource leak!\");\n          \n          \n            \n            \t\t\t\t}\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}\n          \n          \n            \n            } catch (Exception e) {\n          \n          \n            \n            \t\t\t// artifact failure\n          \n          \n            \n            \t\t\tformat.close();\n          \n          \n            \n            \t\t} finally {\n          \n          \n            \n            \t\t\tassertNull(format.getConnection());\n          \n          \n            \n            \t\t}", "url": "https://github.com/apache/flink/pull/12712#discussion_r442805312", "createdAt": "2020-06-19T12:15:11Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();\n+\t\t// always throw Exception to trigger close() method\n+\t\tdoThrow(SQLException.class).when(executor).executeBatch();\n+\n+\t\tJdbcBatchingOutputFormat<Tuple2<Boolean, Row>, Row, JdbcBatchStatementExecutor<Row>> format =\n+\t\t\tnew JdbcBatchingOutputFormat<>(\n+\t\t\t\tnew SimpleJdbcConnectionProvider(options),\n+\t\t\t\tjdbcExecutionOptions,\n+\t\t\t\t(ctx) -> executor,\n+\t\t\t\t(tuple2) -> tuple2.f1);\n+\n+\t\tformat.setRuntimeContext(context);\n+\t\tformat.open(0, 1);\n+\n+\t\ttry {\n+\t\t\tfor (JdbcTestFixture.TestEntry entry : TEST_DATA) {\n+\t\t\t\tformat.writeRecord(Tuple2.of(true, toRow(entry)));\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\ttry {\n+\t\t\t\tformat.close();\n+\t\t\t} catch (Exception realException){\n+\t\t\t\tConnection connection = format.getConnection();\n+\t\t\t\tif (connection != null && !connection.isClosed()){\n+\t\t\t\t\tthrow new RuntimeException(\"Resource leak!\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca407933bdd15df5fe342e63c2820cf6943629d", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/6ca407933bdd15df5fe342e63c2820cf6943629d", "committedDate": "2020-06-19T15:26:32Z", "message": "fix Jark's comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c562cbba8de09ac1cd4b8f42dcbcd7319b95558f", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/c562cbba8de09ac1cd4b8f42dcbcd7319b95558f", "committedDate": "2020-06-19T15:30:16Z", "message": "fix Jark's comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0Mzg3MDMw", "url": "https://github.com/apache/flink/pull/12712#pullrequestreview-434387030", "createdAt": "2020-06-20T00:26:04Z", "commit": {"oid": "c562cbba8de09ac1cd4b8f42dcbcd7319b95558f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMDoyNjowNFrOGmjs0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMDoyNjowNFrOGmjs0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Mzk4Ng==", "bodyText": "I think this comment should be belong to format.close().", "url": "https://github.com/apache/flink/pull/12712#discussion_r443083986", "createdAt": "2020-06-20T00:26:04Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "diffHunk": "@@ -66,6 +66,7 @@ public void setup() {\n \n \t@Test\n \tpublic void testUpsertFormatCloseBeforeOpen() throws Exception{\n+\t\t// FLINK-17544: There should be no NPE thrown from this method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c562cbba8de09ac1cd4b8f42dcbcd7319b95558f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "089a6df7c18f6baa7683d06b5baf47a60ef74731", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/089a6df7c18f6baa7683d06b5baf47a60ef74731", "committedDate": "2020-06-20T01:37:21Z", "message": "fix Jark's comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjI3Mzcx", "url": "https://github.com/apache/flink/pull/12712#pullrequestreview-434627371", "createdAt": "2020-06-22T06:12:51Z", "commit": {"oid": "089a6df7c18f6baa7683d06b5baf47a60ef74731"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3203, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}