{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDY5OTU4", "number": 12746, "title": "[FLINK-15416][task][network] Retry connection to the upstream", "bodyText": "What is the purpose of the change\nThis PR implements retries for connection to the upstream.\nIt contains changes from #11541 and fixes the issue of blocking the whole ConcurrentHashMap by computing the value in Future.\nIt further simplifies the code and fixes some minor issues.\nMerging\nI think the three first commits should be squashed together.\nBrief change log\nOriginal PR:\n\nAdd task manager netty client retry mechenism\nuse computeIfAbsent for exclusively building a new channel\n\nFix:\n3. Don't block the whole NettyPartitionRequestClientFactory while connecting\nOptional changes:\n4. Remove NettyPartitionRequestClientFactory.ConnectingChannel\n5. Simplify loop in NettyPartitionRequestClientFactory.createPartitionRequestClient\n6. Fix logging NettyPartitionRequestClientFactory\n7. Remove ignored test\nVerifying this change\nAdded unit tests in PartitionRequestClientFactoryTest: testNettyClientConnectRetry, testNettyClientConnectRetryMultipleThread, testNettyClientConnectRetryFailure\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? yes\nIf yes, how is the feature documented? docs", "createdAt": "2020-06-22T17:04:54Z", "url": "https://github.com/apache/flink/pull/12746", "merged": true, "mergeCommit": {"oid": "9ddfb958079b2c956b4dd59a6c9448603a476972"}, "closed": true, "closedAt": "2020-07-03T02:46:57Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABct0IyQABqjM0Njk0MTMzMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw72GKABqjM1MDYzMzU0MTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f64354c7a5e0ee42c8389e3a63aaf2ebf22b1765", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/f64354c7a5e0ee42c8389e3a63aaf2ebf22b1765", "committedDate": "2020-06-22T16:55:44Z", "message": "[FLINK-15416][task][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}, "afterCommit": {"oid": "66a9dfae43e2a1f30799e72978ce392a53448ab8", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/66a9dfae43e2a1f30799e72978ce392a53448ab8", "committedDate": "2020-06-22T17:16:56Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66a9dfae43e2a1f30799e72978ce392a53448ab8", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/66a9dfae43e2a1f30799e72978ce392a53448ab8", "committedDate": "2020-06-22T17:16:56Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}, "afterCommit": {"oid": "6d5d1c73dc7f1416ca1677bb6d4aa31c01f69190", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/6d5d1c73dc7f1416ca1677bb6d4aa31c01f69190", "committedDate": "2020-06-22T20:51:39Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzIyNTU1", "url": "https://github.com/apache/flink/pull/12746#pullrequestreview-435322555", "createdAt": "2020-06-22T22:41:54Z", "commit": {"oid": "f64354c7a5e0ee42c8389e3a63aaf2ebf22b1765"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MzIzMjkw", "url": "https://github.com/apache/flink/pull/12746#pullrequestreview-435323290", "createdAt": "2020-06-22T22:43:33Z", "commit": {"oid": "6d5d1c73dc7f1416ca1677bb6d4aa31c01f69190"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjo0MzozNFrOGnTYLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMjo0MzozNFrOGnTYLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg2NTEzMw==", "bodyText": "The line can be removed.", "url": "https://github.com/apache/flink/pull/12746#discussion_r443865133", "createdAt": "2020-06-22T22:43:34Z", "author": {"login": "HuangZhenQiu"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactoryTest.java", "diffHunk": "@@ -39,94 +41,145 @@\n import java.net.UnknownHostException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CompletionException;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.mock;\n \n-@Ignore\n+/**\n+ * {@link PartitionRequestClientFactory} test.\n+ */\n public class PartitionRequestClientFactoryTest {\n \n-\tprivate final static int SERVER_PORT = NetUtils.getAvailablePort();\n+\tprivate static final int SERVER_PORT = NetUtils.getAvailablePort();\n \n \t@Test\n-\tpublic void testResourceReleaseAfterInterruptedConnect() throws Exception {\n+\tpublic void testNettyClientConnectRetry() throws Exception {\n+\t\tNettyTestUtil.NettyServerAndClient serverAndClient = createNettyServerAndClient();\n+\t\tUnstableNettyClient unstableNettyClient = new UnstableNettyClient(serverAndClient.client(), 2);\n \n-\t\t// Latch to synchronize on the connect call.\n-\t\tfinal CountDownLatch syncOnConnect = new CountDownLatch(1);\n+\t\tPartitionRequestClientFactory factory = new PartitionRequestClientFactory(unstableNettyClient, 2);\n+\t\tConnectionID serverAddress = new ConnectionID(new InetSocketAddress(InetAddress.getLocalHost(),\n+\t\t\tserverAndClient.server().getConfig().getServerPort()), 0);\n \n-\t\tfinal Tuple2<NettyServer, NettyClient> netty = createNettyServerAndClient(\n-\t\t\t\tnew NettyProtocol(null, null) {\n+\t\tfactory.createPartitionRequestClient(serverAddress);\n \n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic ChannelHandler[] getServerChannelHandlers() {\n-\t\t\t\t\t\treturn new ChannelHandler[0];\n-\t\t\t\t\t}\n+\t\tserverAndClient.client().shutdown();\n+\t\tserverAndClient.server().shutdown();\n+\t}\n \n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic ChannelHandler[] getClientChannelHandlers() {\n-\t\t\t\t\t\treturn new ChannelHandler[] {\n-\t\t\t\t\t\t\t\tnew CountDownLatchOnConnectHandler(syncOnConnect)};\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t@Test(expected = CompletionException.class)\n+\tpublic void testNettyClientConnectRetryFailure() throws Exception {\n+\t\tNettyTestUtil.NettyServerAndClient serverAndClient = createNettyServerAndClient();\n+\t\tUnstableNettyClient unstableNettyClient = new UnstableNettyClient(serverAndClient.client(), 3);\n \n-\t\tfinal NettyServer server = netty.f0;\n-\t\tfinal NettyClient client = netty.f1;\n+\t\ttry {\n+\t\t\tPartitionRequestClientFactory factory = new PartitionRequestClientFactory(unstableNettyClient, 2);\n+\t\t\tConnectionID serverAddress = new ConnectionID(new InetSocketAddress(InetAddress.getLocalHost(),\n+\t\t\t\tserverAndClient.server().getConfig().getServerPort()), 0);\n \n-\t\tfinal UncaughtTestExceptionHandler exceptionHandler = new UncaughtTestExceptionHandler();\n+\t\t\tfactory.createPartitionRequestClient(serverAddress);\n \n-\t\ttry {\n-\t\t\tfinal PartitionRequestClientFactory factory = new PartitionRequestClientFactory(client);\n+\t\t} catch (Exception e) {\n+\t\t\tthrow e;\n+\t\t} finally {\n+\t\t\tserverAndClient.client().shutdown();\n+\t\t\tserverAndClient.server().shutdown();\n+\t\t}\n+\t}\n \n-\t\t\tfinal Thread connect = new Thread(new Runnable() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void run() {\n-\t\t\t\t\tConnectionID serverAddress = null;\n+\t@Test\n+\tpublic void testNettyClientConnectRetryMultipleThread() throws Exception {\n+\t\tNettyTestUtil.NettyServerAndClient serverAndClient = createNettyServerAndClient();\n+\t\tUnstableNettyClient unstableNettyClient = new UnstableNettyClient(serverAndClient.client(), 2);\n \n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tserverAddress = createServerConnectionID(0);\n+\t\tPartitionRequestClientFactory factory = new PartitionRequestClientFactory(unstableNettyClient, 2);\n+\t\tConnectionID serverAddress = new ConnectionID(new InetSocketAddress(InetAddress.getLocalHost(),\n+\t\t\tserverAndClient.server().getConfig().getServerPort()), 0);\n \n-\t\t\t\t\t\t// This triggers a connect\n-\t\t\t\t\t\tfactory.createPartitionRequestClient(serverAddress);\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (Throwable t) {\n-\n-\t\t\t\t\t\tif (serverAddress != null) {\n-\t\t\t\t\t\t\tfactory.closeOpenChannelConnections(serverAddress);\n-\t\t\t\t\t\t\tThread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), t);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tt.printStackTrace();\n-\t\t\t\t\t\t\tfail(\"Could not create RemoteAddress for server.\");\n-\t\t\t\t\t\t}\n+\t\tExecutorService threadPoolExecutor = Executors.newFixedThreadPool(10);\n+\t\tList<Future<NettyPartitionRequestClient>> futures = new ArrayList<>();\n+\n+\t\tfor (int i = 0; i < 10; i++) {\n+\t\t\tFuture<NettyPartitionRequestClient> future = threadPoolExecutor.submit(new Callable<NettyPartitionRequestClient>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic NettyPartitionRequestClient call() {\n+\t\t\t\t\tNettyPartitionRequestClient client = null;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tclient = factory.createPartitionRequestClient(serverAddress);\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\t// catch exception\n+\t\t\t\t\t\tSystem.out.println(e.getMessage());\n+\t\t\t\t\t\tfail();\n \t\t\t\t\t}\n+\t\t\t\t\treturn client;\n \t\t\t\t}\n \t\t\t});\n \n-\t\t\tconnect.setUncaughtExceptionHandler(exceptionHandler);\n+\t\t\tfutures.add(future);\n+\t\t}\n \n-\t\t\tconnect.start();\n+\t\tfutures.forEach(runnableFuture -> {\n+\t\t\tNettyPartitionRequestClient client = null;\n+\t\t\ttry {\n+\t\t\t\tclient = runnableFuture.get();\n+\t\t\t\tSystem.out.println(\"Result = \" + client == null ? \"null\" : client.toString());\n+\t\t\t\tassertNotNull(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5d1c73dc7f1416ca1677bb6d4aa31c01f69190"}, "originalPosition": 155}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d5d1c73dc7f1416ca1677bb6d4aa31c01f69190", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/6d5d1c73dc7f1416ca1677bb6d4aa31c01f69190", "committedDate": "2020-06-22T20:51:39Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}, "afterCommit": {"oid": "7cd6fde800adb26e305b954bf67daf5abfa56321", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/7cd6fde800adb26e305b954bf67daf5abfa56321", "committedDate": "2020-06-23T07:40:59Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NjQ3MzY0", "url": "https://github.com/apache/flink/pull/12746#pullrequestreview-435647364", "createdAt": "2020-06-23T10:24:52Z", "commit": {"oid": "7cd6fde800adb26e305b954bf67daf5abfa56321"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNDo1M1rOGnjCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNDo1M1rOGnjCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMTYzMQ==", "bodyText": "AtomicReference<Optional<CompletableFuture<NettyPartitionRequestClient>>> is a bit complicated type and it's not that easy to understand how is it working. Why not using something simpler and more precisely expressing the intention, that the first caller completes the future?:\nAtomicBoolean isFirstOne = new AtomicBoolean(false);\nCompletableFuture<NettyPartitionRequestClient> clientFuture = clients.computeIfAbsent(connectionId, unused -> {\n\tCompletableFuture<NettyPartitionRequestClient> future = new CompletableFuture<>();\n\tisFirstOne.set(true);\n\treturn future;\n});\nif (isFirstOne.get()) {\n\tclientFuture.complete(connectWithRetries(connectionId)));\n}", "url": "https://github.com/apache/flink/pull/12746#discussion_r444121631", "createdAt": "2020-06-23T10:24:53Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestClientFactory.java", "diffHunk": "@@ -40,83 +45,91 @@\n  * instances.\n  */\n class PartitionRequestClientFactory {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PartitionRequestClientFactory.class);\n \n \tprivate final NettyClient nettyClient;\n \n-\tprivate final ConcurrentMap<ConnectionID, Object> clients = new ConcurrentHashMap<ConnectionID, Object>();\n+\tprivate final int retryNumber;\n+\n+\tprivate final ConcurrentMap<ConnectionID, CompletableFuture<NettyPartitionRequestClient>> clients = new ConcurrentHashMap<>();\n \n \tPartitionRequestClientFactory(NettyClient nettyClient) {\n+\t\tthis(nettyClient, 0);\n+\t}\n+\n+\tPartitionRequestClientFactory(NettyClient nettyClient, int retryNumber) {\n \t\tthis.nettyClient = nettyClient;\n+\t\tthis.retryNumber = retryNumber;\n \t}\n \n \t/**\n \t * Atomically establishes a TCP connection to the given remote address and\n \t * creates a {@link NettyPartitionRequestClient} instance for this connection.\n \t */\n \tNettyPartitionRequestClient createPartitionRequestClient(ConnectionID connectionId) throws IOException, InterruptedException {\n-\t\tObject entry;\n-\t\tNettyPartitionRequestClient client = null;\n-\n-\t\twhile (client == null) {\n-\t\t\tentry = clients.get(connectionId);\n-\n-\t\t\tif (entry != null) {\n-\t\t\t\t// Existing channel or connecting channel\n-\t\t\t\tif (entry instanceof NettyPartitionRequestClient) {\n-\t\t\t\t\tclient = (NettyPartitionRequestClient) entry;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tConnectingChannel future = (ConnectingChannel) entry;\n-\t\t\t\t\tclient = future.waitForChannel();\n-\n-\t\t\t\t\tclients.replace(connectionId, future, client);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\t// No channel yet. Create one, but watch out for a race.\n-\t\t\t\t// We create a \"connecting future\" and atomically add it to the map.\n-\t\t\t\t// Only the thread that really added it establishes the channel.\n-\t\t\t\t// The others need to wait on that original establisher's future.\n-\t\t\t\tConnectingChannel connectingChannel = new ConnectingChannel(connectionId, this);\n-\t\t\t\tObject old = clients.putIfAbsent(connectionId, connectingChannel);\n-\n-\t\t\t\tif (old == null) {\n-\t\t\t\t\tnettyClient.connect(connectionId.getAddress()).addListener(connectingChannel);\n-\n-\t\t\t\t\tclient = connectingChannel.waitForChannel();\n-\n-\t\t\t\t\tclients.replace(connectionId, connectingChannel, client);\n-\t\t\t\t}\n-\t\t\t\telse if (old instanceof ConnectingChannel) {\n-\t\t\t\t\tclient = ((ConnectingChannel) old).waitForChannel();\n-\n-\t\t\t\t\tclients.replace(connectionId, old, client);\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tclient = (NettyPartitionRequestClient) old;\n-\t\t\t\t}\n+\t\twhile (true) {\n+\t\t\tAtomicReference<Optional<CompletableFuture<NettyPartitionRequestClient>>> computeFuture = new AtomicReference<>(Optional.empty());\n+\t\t\tCompletableFuture<NettyPartitionRequestClient> waitFuture = clients.computeIfAbsent(connectionId, unused -> {\n+\t\t\t\tCompletableFuture<NettyPartitionRequestClient> future = new CompletableFuture<>();\n+\t\t\t\tcomputeFuture.set(Optional.of(future));\n+\t\t\t\treturn future;\n+\t\t\t});\n+\t\t\tcomputeFuture.get().ifPresent(future -> future.complete(connectWithRetries(connectionId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cd6fde800adb26e305b954bf67daf5abfa56321"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTEzODEw", "url": "https://github.com/apache/flink/pull/12746#pullrequestreview-435913810", "createdAt": "2020-06-23T15:42:58Z", "commit": {"oid": "cb1ea702589f13c3b6fe764abc04b22136dbf78a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb1ea702589f13c3b6fe764abc04b22136dbf78a", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/cb1ea702589f13c3b6fe764abc04b22136dbf78a", "committedDate": "2020-06-23T12:50:35Z", "message": "fixup! [FLINK-15416][network] Don't block the whole NettyPartitionRequestClientFactory while (re)connecting"}, "afterCommit": {"oid": "ebc49551875469c1f2851bc5bac22649cbaaa5d9", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/ebc49551875469c1f2851bc5bac22649cbaaa5d9", "committedDate": "2020-06-23T16:21:18Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e020d9c136ef10c165aa6af081e9ceefc4c82f", "author": {"user": {"login": "HuangZhenQiu", "name": "Peter Huang"}}, "url": "https://github.com/apache/flink/commit/b8e020d9c136ef10c165aa6af081e9ceefc4c82f", "committedDate": "2020-07-02T09:57:31Z", "message": "[FLINK-15416][network] Retry connection to the upstream task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db58941bbbd52672ae8cda263e330d0ba029cde3", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/db58941bbbd52672ae8cda263e330d0ba029cde3", "committedDate": "2020-07-02T09:57:31Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebc49551875469c1f2851bc5bac22649cbaaa5d9", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/ebc49551875469c1f2851bc5bac22649cbaaa5d9", "committedDate": "2020-06-23T16:21:18Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}, "afterCommit": {"oid": "db58941bbbd52672ae8cda263e330d0ba029cde3", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/db58941bbbd52672ae8cda263e330d0ba029cde3", "committedDate": "2020-07-02T09:57:31Z", "message": "[FLINK-15416][network] Remove ignored PartitionRequestClientFactoryTest.testResourceReleaseAfterInterruptedConnect\n\nThe test was ignored for 5 years already."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3282, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}