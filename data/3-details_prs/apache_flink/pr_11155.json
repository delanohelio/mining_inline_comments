{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjcwMjA5", "number": 11155, "title": "[FLINK-14818][benchmark] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment.", "bodyText": "What is the purpose of the change\nIn network benchmark (for example 1000 channels benchmark with 4 record writers) StreamNetworkBenchmarkEnvironment#createInputGate creates 1000 input gates with 4 input channels each, which doesn't make much sense. It is expected that either having 4 receivers with single input gate with 1000 channels each, or a single receiver with 4 input gates, with 1000 channels each.\nBrief change log\n\nThe receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment is changed\n\nVerifying this change\nThis change is already covered by existing tests, such as StreamNetworkThroughputBenchmarkTest.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-02-20T10:22:50Z", "url": "https://github.com/apache/flink/pull/11155", "merged": true, "mergeCommit": {"oid": "92253f2e15090f5dac8cfc68c49727b62da23b8c"}, "closed": true, "closedAt": "2020-02-27T07:06:02Z", "author": {"login": "wsry"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGMODHABqjMwNTY0NDA3OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcITUYWABqjMwNzYzMTQ5MTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fee93cecf80cb73fcdf082f47fe0b9bd727a3002", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/fee93cecf80cb73fcdf082f47fe0b9bd727a3002", "committedDate": "2020-02-20T10:09:07Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}, "afterCommit": {"oid": "2d7b20f97e41151ed741a3f6d93756b776b30dc9", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/2d7b20f97e41151ed741a3f6d93756b776b30dc9", "committedDate": "2020-02-20T14:43:01Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d7b20f97e41151ed741a3f6d93756b776b30dc9", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/2d7b20f97e41151ed741a3f6d93756b776b30dc9", "committedDate": "2020-02-20T14:43:01Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}, "afterCommit": {"oid": "cfc691c781ae54d63ecaa7c282e6cb34f73425d8", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/cfc691c781ae54d63ecaa7c282e6cb34f73425d8", "committedDate": "2020-02-20T15:40:05Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfc691c781ae54d63ecaa7c282e6cb34f73425d8", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/cfc691c781ae54d63ecaa7c282e6cb34f73425d8", "committedDate": "2020-02-20T15:40:05Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}, "afterCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/21b36d4fadd73af33edb4fabc7da9d93c2f2d55c", "committedDate": "2020-02-20T16:08:15Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzkwMjg2", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362390286", "createdAt": "2020-02-21T04:14:07Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoxNDowN1rOFsrLgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoxNDowN1rOFsrLgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4OTEyMQ==", "bodyText": "nit: one more indentation for distinguishing with the below core codes.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382389121", "createdAt": "2020-02-21T04:14:07Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and\n+\t * {@link LocalInputChannel} implementation with costume ones.\n+\t */\n+\tprivate static class TestSingleInputGateFactory extends SingleInputGateFactory {\n+\n+\t\tprivate final ResourceID taskExecutorResourceId;\n+\t\tprivate final int partitionRequestInitialBackoff;\n+\t\tprivate final int partitionRequestMaxBackoff;\n+\t\tprivate final ConnectionManager connectionManager;\n+\t\tprivate final ResultPartitionManager partitionManager;\n+\t\tprivate final TaskEventPublisher taskEventPublisher;\n+\t\tprivate final NetworkBufferPool networkBufferPool;\n+\n+\t\tpublic TestSingleInputGateFactory(\n+\t\t\t\t@Nonnull ResourceID taskExecutorResourceId,\n+\t\t\t\t@Nonnull NettyShuffleEnvironmentConfiguration networkConfig,\n+\t\t\t\t@Nonnull ConnectionManager connectionManager,\n+\t\t\t\t@Nonnull ResultPartitionManager partitionManager,\n+\t\t\t\t@Nonnull TaskEventPublisher taskEventPublisher,\n+\t\t\t\t@Nonnull NetworkBufferPool networkBufferPool) {\n+\t\t\tsuper(\n+\t\t\t\ttaskExecutorResourceId,\n+\t\t\t\tnetworkConfig,\n+\t\t\t\tconnectionManager,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tnetworkBufferPool);\n+\t\t\tthis.networkBufferPool = networkBufferPool;\n+\t\t\tthis.taskEventPublisher = taskEventPublisher;\n+\t\t\tthis.partitionManager = partitionManager;\n+\t\t\tthis.connectionManager = connectionManager;\n+\t\t\tthis.partitionRequestMaxBackoff = networkConfig.partitionRequestMaxBackoff();\n+\t\t\tthis.partitionRequestInitialBackoff = networkConfig.partitionRequestInitialBackoff();\n+\t\t\tthis.taskExecutorResourceId = taskExecutorResourceId;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected InputChannel createKnownInputChannel(\n+\t\t\tSingleInputGate inputGate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 176}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzkwNjY3", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362390667", "createdAt": "2020-02-21T04:15:44Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoxNTo0NFrOFsrM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoxNTo0NFrOFsrM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4OTQ3Ng==", "bodyText": "nit: We can make it a separate class to void this class too long. Also rename it SingleInputGateBenchmarkFactory.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382389476", "createdAt": "2020-02-21T04:15:44Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and\n+\t * {@link LocalInputChannel} implementation with costume ones.\n+\t */\n+\tprivate static class TestSingleInputGateFactory extends SingleInputGateFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzkwODE2", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362390816", "createdAt": "2020-02-21T04:16:28Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoxNjoyOFrOFsrNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoxNjoyOFrOFsrNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM4OTYzMQ==", "bodyText": "Make all these fields as protected in parent SingleInputGateFactory for simple.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382389631", "createdAt": "2020-02-21T04:16:28Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and\n+\t * {@link LocalInputChannel} implementation with costume ones.\n+\t */\n+\tprivate static class TestSingleInputGateFactory extends SingleInputGateFactory {\n+\n+\t\tprivate final ResourceID taskExecutorResourceId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzkxNjA3", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362391607", "createdAt": "2020-02-21T04:20:08Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoyMDowOFrOFsrP9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoyMDowOFrOFsrP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MDI2MA==", "bodyText": "Why we need to override this method? I guess that the original partitionId while constructing the SingleInputGate is valid.\nSame issue for the below remote channel.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382390260", "createdAt": "2020-02-21T04:20:08Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and\n+\t * {@link LocalInputChannel} implementation with costume ones.\n+\t */\n+\tprivate static class TestSingleInputGateFactory extends SingleInputGateFactory {\n+\n+\t\tprivate final ResourceID taskExecutorResourceId;\n+\t\tprivate final int partitionRequestInitialBackoff;\n+\t\tprivate final int partitionRequestMaxBackoff;\n+\t\tprivate final ConnectionManager connectionManager;\n+\t\tprivate final ResultPartitionManager partitionManager;\n+\t\tprivate final TaskEventPublisher taskEventPublisher;\n+\t\tprivate final NetworkBufferPool networkBufferPool;\n+\n+\t\tpublic TestSingleInputGateFactory(\n+\t\t\t\t@Nonnull ResourceID taskExecutorResourceId,\n+\t\t\t\t@Nonnull NettyShuffleEnvironmentConfiguration networkConfig,\n+\t\t\t\t@Nonnull ConnectionManager connectionManager,\n+\t\t\t\t@Nonnull ResultPartitionManager partitionManager,\n+\t\t\t\t@Nonnull TaskEventPublisher taskEventPublisher,\n+\t\t\t\t@Nonnull NetworkBufferPool networkBufferPool) {\n+\t\t\tsuper(\n+\t\t\t\ttaskExecutorResourceId,\n+\t\t\t\tnetworkConfig,\n+\t\t\t\tconnectionManager,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tnetworkBufferPool);\n+\t\t\tthis.networkBufferPool = networkBufferPool;\n+\t\t\tthis.taskEventPublisher = taskEventPublisher;\n+\t\t\tthis.partitionManager = partitionManager;\n+\t\t\tthis.connectionManager = connectionManager;\n+\t\t\tthis.partitionRequestMaxBackoff = networkConfig.partitionRequestMaxBackoff();\n+\t\t\tthis.partitionRequestInitialBackoff = networkConfig.partitionRequestInitialBackoff();\n+\t\t\tthis.taskExecutorResourceId = taskExecutorResourceId;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected InputChannel createKnownInputChannel(\n+\t\t\tSingleInputGate inputGate,\n+\t\t\tint index,\n+\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n+\t\t\tChannelStatistics channelStatistics,\n+\t\t\tInputChannelMetrics metrics) {\n+\t\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n+\t\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n+\t\t\t\treturn new TestLocalInputChannel(\n+\t\t\t\t\tinputGate,\n+\t\t\t\t\tindex,\n+\t\t\t\t\tpartitionId,\n+\t\t\t\t\tpartitionManager,\n+\t\t\t\t\ttaskEventPublisher,\n+\t\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\t\tmetrics);\n+\t\t\t} else {\n+\t\t\t\treturn new TestRemoteInputChannel(\n+\t\t\t\t\tinputGate,\n+\t\t\t\t\tindex,\n+\t\t\t\t\tpartitionId,\n+\t\t\t\t\tinputChannelDescriptor.getConnectionId(),\n+\t\t\t\t\tconnectionManager,\n+\t\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\t\tmetrics,\n+\t\t\t\t\tnetworkBufferPool);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link LocalInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestLocalInputChannel extends LocalInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();\n+\n+\t\tpublic TestLocalInputChannel(\n+\t\t\t\tSingleInputGate inputGate,\n+\t\t\t\tint channelIndex,\n+\t\t\t\tResultPartitionID partitionId,\n+\t\t\t\tResultPartitionManager partitionManager,\n+\t\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\t\tint initialBackoff,\n+\t\t\t\tint maxBackoff,\n+\t\t\t\tInputChannelMetrics metrics) {\n+\t\t\tsuper(\n+\t\t\t\tinputGate,\n+\t\t\t\tchannelIndex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tinitialBackoff,\n+\t\t\t\tmaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException {\n+\t\t\tsuper.requestSubpartition(channelIndex);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ResultPartitionID getPartitionId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 241}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzkyMTIx", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362392121", "createdAt": "2020-02-21T04:22:42Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoyMjo0MlrOFsrRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDoyMjo0MlrOFsrRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MDcyNw==", "bodyText": "In addition, we might also need to override the method of retriggerSubpartitionRequest, in case this process might be used to cause invalid subpartitionIndex future.\nSame issue for the below remote channel.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382390727", "createdAt": "2020-02-21T04:22:42Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and\n+\t * {@link LocalInputChannel} implementation with costume ones.\n+\t */\n+\tprivate static class TestSingleInputGateFactory extends SingleInputGateFactory {\n+\n+\t\tprivate final ResourceID taskExecutorResourceId;\n+\t\tprivate final int partitionRequestInitialBackoff;\n+\t\tprivate final int partitionRequestMaxBackoff;\n+\t\tprivate final ConnectionManager connectionManager;\n+\t\tprivate final ResultPartitionManager partitionManager;\n+\t\tprivate final TaskEventPublisher taskEventPublisher;\n+\t\tprivate final NetworkBufferPool networkBufferPool;\n+\n+\t\tpublic TestSingleInputGateFactory(\n+\t\t\t\t@Nonnull ResourceID taskExecutorResourceId,\n+\t\t\t\t@Nonnull NettyShuffleEnvironmentConfiguration networkConfig,\n+\t\t\t\t@Nonnull ConnectionManager connectionManager,\n+\t\t\t\t@Nonnull ResultPartitionManager partitionManager,\n+\t\t\t\t@Nonnull TaskEventPublisher taskEventPublisher,\n+\t\t\t\t@Nonnull NetworkBufferPool networkBufferPool) {\n+\t\t\tsuper(\n+\t\t\t\ttaskExecutorResourceId,\n+\t\t\t\tnetworkConfig,\n+\t\t\t\tconnectionManager,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tnetworkBufferPool);\n+\t\t\tthis.networkBufferPool = networkBufferPool;\n+\t\t\tthis.taskEventPublisher = taskEventPublisher;\n+\t\t\tthis.partitionManager = partitionManager;\n+\t\t\tthis.connectionManager = connectionManager;\n+\t\t\tthis.partitionRequestMaxBackoff = networkConfig.partitionRequestMaxBackoff();\n+\t\t\tthis.partitionRequestInitialBackoff = networkConfig.partitionRequestInitialBackoff();\n+\t\t\tthis.taskExecutorResourceId = taskExecutorResourceId;\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected InputChannel createKnownInputChannel(\n+\t\t\tSingleInputGate inputGate,\n+\t\t\tint index,\n+\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n+\t\t\tChannelStatistics channelStatistics,\n+\t\t\tInputChannelMetrics metrics) {\n+\t\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n+\t\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n+\t\t\t\treturn new TestLocalInputChannel(\n+\t\t\t\t\tinputGate,\n+\t\t\t\t\tindex,\n+\t\t\t\t\tpartitionId,\n+\t\t\t\t\tpartitionManager,\n+\t\t\t\t\ttaskEventPublisher,\n+\t\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\t\tmetrics);\n+\t\t\t} else {\n+\t\t\t\treturn new TestRemoteInputChannel(\n+\t\t\t\t\tinputGate,\n+\t\t\t\t\tindex,\n+\t\t\t\t\tpartitionId,\n+\t\t\t\t\tinputChannelDescriptor.getConnectionId(),\n+\t\t\t\t\tconnectionManager,\n+\t\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\t\tmetrics,\n+\t\t\t\t\tnetworkBufferPool);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link LocalInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestLocalInputChannel extends LocalInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();\n+\n+\t\tpublic TestLocalInputChannel(\n+\t\t\t\tSingleInputGate inputGate,\n+\t\t\t\tint channelIndex,\n+\t\t\t\tResultPartitionID partitionId,\n+\t\t\t\tResultPartitionManager partitionManager,\n+\t\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\t\tint initialBackoff,\n+\t\t\t\tint maxBackoff,\n+\t\t\t\tInputChannelMetrics metrics) {\n+\t\t\tsuper(\n+\t\t\t\tinputGate,\n+\t\t\t\tchannelIndex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tinitialBackoff,\n+\t\t\t\tmaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 236}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzk1OTk4", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362395998", "createdAt": "2020-02-21T04:41:12Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MToxMlrOFsrfug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0MToxMlrOFsrfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NDI5OA==", "bodyText": "I am a bit torn for the connectionIndex value. If we use channelIndex as the value, it would create 1000 connections in theory if there are 1000 subpartitions in writer. I a bit prefer to use gateIndex instead to create less connections.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382394298", "createdAt": "2020-02-21T04:41:12Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -238,18 +252,19 @@ private InputGate createInputGate(TaskManagerLocation senderLocation) throws Exc\n \n \tprivate InputGateDeploymentDescriptor createInputGateDeploymentDescriptor(\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint consumedSubpartitionIndex,\n+\t\t\tint gateIndex,\n \t\t\tResourceID localLocation) {\n \n-\t\tfinal ShuffleDescriptor[] channelDescriptors = Arrays.stream(partitionIds)\n-\t\t\t.map(partitionId ->\n-\t\t\t\tcreateShuffleDescriptor(localMode, partitionId, localLocation, senderLocation, consumedSubpartitionIndex))\n-\t\t\t.toArray(ShuffleDescriptor[]::new);\n+\t\tfinal ShuffleDescriptor[] channelDescriptors = new ShuffleDescriptor[channels];\n+\t\tfor (int channelIndex = 0; channelIndex < channels; ++channelIndex) {\n+\t\t\tchannelDescriptors[channelIndex] = createShuffleDescriptor(\n+\t\t\t\tlocalMode, partitionIds[gateIndex], localLocation, senderLocation, channelIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzk2MzI4", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362396328", "createdAt": "2020-02-21T04:42:44Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0Mjo0NFrOFsrg9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0Mjo0NFrOFsrg9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NDYxMg==", "bodyText": "no need change, we can still reference the parent SingleInputGateFactory", "url": "https://github.com/apache/flink/pull/11155#discussion_r382394612", "createdAt": "2020-02-21T04:42:44Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -84,7 +98,7 @@\n \n \tprivate int dataPort;\n \n-\tprivate SingleInputGateFactory gateFactory;\n+\tprivate TestSingleInputGateFactory gateFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzk3MTAy", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362397102", "createdAt": "2020-02-21T04:46:26Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0NjoyNlrOFsrj8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo0NjoyNlrOFsrj8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NTM3OQ==", "bodyText": "nit: Not really necessary change, because it does not provide any rich informations than the class name.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382395379", "createdAt": "2020-02-21T04:46:26Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateFactory.java", "diffHunk": "@@ -243,7 +244,10 @@ private InputChannel createKnownInputChannel(\n \t\treturn () -> bufferPoolFactory.createBufferPool(0, floatingNetworkBuffersPerGate);\n \t}\n \n-\tprivate static class ChannelStatistics {\n+\t/**\n+\t * Statistics of input channels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzk5MjE0", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362399214", "createdAt": "2020-02-21T04:55:27Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NToyN1rOFsrrJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NToyN1rOFsrrJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzIyMQ==", "bodyText": "We should adjust the descriptions a bit. typo costume\nE.g. A benchmark-specific input gate factory which overrides the respective methods of creating {@link RemotInputChannel} and {@link LocalInputChannel} for requesting specific subpartition.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382397221", "createdAt": "2020-02-21T04:55:27Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDAwMTY5", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362400169", "createdAt": "2020-02-21T04:59:48Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1OTo0OFrOFsrurg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1OTo0OFrOFsrurg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODEyNg==", "bodyText": "I guess it is not necessary to add this annotation which only indicates for private change.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382398126", "createdAt": "2020-02-21T04:59:48Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannel.java", "diffHunk": "@@ -95,7 +96,8 @@ public LocalInputChannel(\n \t// ------------------------------------------------------------------------\n \n \t@Override\n-\tvoid requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException {\n+\t@VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDAxNjA2", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362401606", "createdAt": "2020-02-21T05:06:06Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowNjowNlrOFsrz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowNjowNlrOFsrz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5OTQ0MQ==", "bodyText": "nit: I am a bit torn for @Nonnull with arguments. I know we did it in some cases before like SingleInputGateFactory.\nIn common sense we still consider them as Nonnull w/o this annotation. And we only need to emphasis the Nullable case to add the annotation.\nIn another aspect, it seems not very consistent in this class because other constructors do not have it.", "url": "https://github.com/apache/flink/pull/11155#discussion_r382399441", "createdAt": "2020-02-21T05:06:06Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -272,11 +287,161 @@ private static ShuffleDescriptor createShuffleDescriptor(\n \t\t\tResultPartitionID resultPartitionID,\n \t\t\tResourceID location,\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint channel) {\n+\t\t\tint connectionIndex) {\n \t\tfinal NettyShuffleDescriptorBuilder builder = NettyShuffleDescriptorBuilder.newBuilder()\n \t\t\t.setId(resultPartitionID)\n \t\t\t.setProducerInfoFromTaskManagerLocation(senderLocation)\n-\t\t\t.setConnectionIndex(channel);\n+\t\t\t.setConnectionIndex(connectionIndex);\n \t\treturn localMode ? builder.setProducerLocation(location).buildLocal() : builder.buildRemote();\n \t}\n+\n+\t/**\n+\t * A {@link SingleInputGateFactory} which replaces the default {@link RemoteInputChannel} and\n+\t * {@link LocalInputChannel} implementation with costume ones.\n+\t */\n+\tprivate static class TestSingleInputGateFactory extends SingleInputGateFactory {\n+\n+\t\tprivate final ResourceID taskExecutorResourceId;\n+\t\tprivate final int partitionRequestInitialBackoff;\n+\t\tprivate final int partitionRequestMaxBackoff;\n+\t\tprivate final ConnectionManager connectionManager;\n+\t\tprivate final ResultPartitionManager partitionManager;\n+\t\tprivate final TaskEventPublisher taskEventPublisher;\n+\t\tprivate final NetworkBufferPool networkBufferPool;\n+\n+\t\tpublic TestSingleInputGateFactory(\n+\t\t\t\t@Nonnull ResourceID taskExecutorResourceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDAyMzAy", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362402302", "createdAt": "2020-02-21T05:09:33Z", "commit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21b36d4fadd73af33edb4fabc7da9d93c2f2d55c", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/21b36d4fadd73af33edb4fabc7da9d93c2f2d55c", "committedDate": "2020-02-20T16:08:15Z", "message": "[FLINK-14818] Fix receiving InputGate setup of StreamNetworkBenchmarkEnvironment."}, "afterCommit": {"oid": "090a72bd3101d7111490832526937d3973c75795", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/090a72bd3101d7111490832526937d3973c75795", "committedDate": "2020-02-21T06:45:18Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "090a72bd3101d7111490832526937d3973c75795", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/090a72bd3101d7111490832526937d3973c75795", "committedDate": "2020-02-21T06:45:18Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}, "afterCommit": {"oid": "1ad6ed69318c4043b0536d0cd89e7688c577f09e", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/1ad6ed69318c4043b0536d0cd89e7688c577f09e", "committedDate": "2020-02-21T06:57:20Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ad6ed69318c4043b0536d0cd89e7688c577f09e", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/1ad6ed69318c4043b0536d0cd89e7688c577f09e", "committedDate": "2020-02-21T06:57:20Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}, "afterCommit": {"oid": "bcba3ea4cfe0d777becd78b7a8096fc5f4f7f3a1", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/bcba3ea4cfe0d777becd78b7a8096fc5f4f7f3a1", "committedDate": "2020-02-21T07:06:34Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcba3ea4cfe0d777becd78b7a8096fc5f4f7f3a1", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/bcba3ea4cfe0d777becd78b7a8096fc5f4f7f3a1", "committedDate": "2020-02-21T07:06:34Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}, "afterCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/8fe5e3d33d372b15e15cc52171ea8c3844c02ef9", "committedDate": "2020-02-21T07:08:57Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNDUyMDgw", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-362452080", "createdAt": "2020-02-21T08:00:01Z", "commit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODowMDowMVrOFsuZzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoxMDowM1rOFsunGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0MTkzMw==", "bodyText": "Please copy PR description into the commit message and once you have some expected benchmark results, please include them in the commit message as well :)\nCould you also explain in both places, how are you solving the problem? Maybe something along those lines:\n\nBefore this change, in network benchmark (for example 1000 channels benchmark with 4 record writers) StreamNetworkBenchmarkEnvironment#createInputGate was creating 1000 input gates with 4 input channels each, which doesn't make much sense. This commit is changing that to a single receiver with 4 input gates, with 1000 channels each.\nIt is achieved by providing testing implementations of InputChannels, which are using channel index for requesting subpartitions from ResultPartition, instead of subpartition index. Thanks to that, we can connect single ResultPartition with N subpartitions, to a single instance of InputGate with 1000 channels.\n\n?", "url": "https://github.com/apache/flink/pull/11155#discussion_r382441933", "createdAt": "2020-02-21T08:00:01Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannel.java", "diffHunk": "@@ -95,7 +95,7 @@ public LocalInputChannel(\n \t// ------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0NTMzNg==", "bodyText": "This is always zero, as it's being ignored by Test***InputChannel classes, right?\nIf so, maybe add a comment explaining that?", "url": "https://github.com/apache/flink/pull/11155#discussion_r382445336", "createdAt": "2020-02-21T08:10:03Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -238,18 +241,19 @@ private InputGate createInputGate(TaskManagerLocation senderLocation) throws Exc\n \n \tprivate InputGateDeploymentDescriptor createInputGateDeploymentDescriptor(\n \t\t\tTaskManagerLocation senderLocation,\n-\t\t\tint consumedSubpartitionIndex,\n+\t\t\tint gateIndex,\n \t\t\tResourceID localLocation) {\n \n-\t\tfinal ShuffleDescriptor[] channelDescriptors = Arrays.stream(partitionIds)\n-\t\t\t.map(partitionId ->\n-\t\t\t\tcreateShuffleDescriptor(localMode, partitionId, localLocation, senderLocation, consumedSubpartitionIndex))\n-\t\t\t.toArray(ShuffleDescriptor[]::new);\n+\t\tfinal ShuffleDescriptor[] channelDescriptors = new ShuffleDescriptor[channels];\n+\t\tfor (int channelIndex = 0; channelIndex < channels; ++channelIndex) {\n+\t\t\tchannelDescriptors[channelIndex] = createShuffleDescriptor(\n+\t\t\t\tlocalMode, partitionIds[gateIndex], localLocation, senderLocation, gateIndex);\n+\t\t}\n \n \t\treturn new InputGateDeploymentDescriptor(\n \t\t\tdataSetID,\n \t\t\tResultPartitionType.PIPELINED_BOUNDED,\n-\t\t\tconsumedSubpartitionIndex,\n+\t\t\t0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTY0NTYx", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-363164561", "createdAt": "2020-02-24T04:20:44Z", "commit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNDoyMDo0NVrOFtVbRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNDoyMDo0NVrOFtVbRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4MTI4Ng==", "bodyText": "nit: might supplement the reason why we should guarantee this.\nE.g. Otherwise it might cause unexpected behaviors when {@link PartitionNotFoundException} happens in {@link TestRemoteInputChannel}.", "url": "https://github.com/apache/flink/pull/11155#discussion_r383081286", "createdAt": "2020-02-24T04:20:45Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/StreamNetworkBenchmarkEnvironment.java", "diffHunk": "@@ -158,6 +157,10 @@ public void tearDown() {\n \t\tsuppressExceptions(receiverEnv::close);\n \t}\n \n+\t/**\n+\t * Note: It should be guaranteed that {@link #createResultPartitionWriter(int)} has been called before\n+\t * creating the receiver.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTcyMzk2", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-363172396", "createdAt": "2020-02-24T05:13:52Z", "commit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxMzo1MlrOFtV2tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxMzo1MlrOFtV2tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4ODMxMQ==", "bodyText": "nit: it is better to give some explanations why we need to override this method, otherwise it is not very easy understood by others.", "url": "https://github.com/apache/flink/pull/11155#discussion_r383088311", "createdAt": "2020-02-24T05:13:52Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io.benchmark;\n+\n+import org.apache.flink.core.memory.MemorySegmentProvider;\n+import org.apache.flink.runtime.clusterframework.types.ResourceID;\n+import org.apache.flink.runtime.io.network.ConnectionID;\n+import org.apache.flink.runtime.io.network.ConnectionManager;\n+import org.apache.flink.runtime.io.network.TaskEventPublisher;\n+import org.apache.flink.runtime.io.network.buffer.NetworkBufferPool;\n+import org.apache.flink.runtime.io.network.metrics.InputChannelMetrics;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionID;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionManager;\n+import org.apache.flink.runtime.io.network.partition.consumer.InputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.LocalInputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.RemoteInputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate;\n+import org.apache.flink.runtime.io.network.partition.consumer.SingleInputGateFactory;\n+import org.apache.flink.runtime.shuffle.NettyShuffleDescriptor;\n+import org.apache.flink.runtime.taskmanager.NettyShuffleEnvironmentConfiguration;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A benchmark-specific input gate factory which overrides the respective methods of creating\n+ * {@link RemoteInputChannel} and {@link LocalInputChannel} for requesting specific subpartitions.\n+ */\n+public class SingleInputGateBenchmarkFactory extends SingleInputGateFactory {\n+\n+\tpublic SingleInputGateBenchmarkFactory(\n+\t\t\tResourceID taskExecutorResourceId,\n+\t\t\tNettyShuffleEnvironmentConfiguration networkConfig,\n+\t\t\tConnectionManager connectionManager,\n+\t\t\tResultPartitionManager partitionManager,\n+\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\tNetworkBufferPool networkBufferPool) {\n+\t\tsuper(\n+\t\t\ttaskExecutorResourceId,\n+\t\t\tnetworkConfig,\n+\t\t\tconnectionManager,\n+\t\t\tpartitionManager,\n+\t\t\ttaskEventPublisher,\n+\t\t\tnetworkBufferPool);\n+\t}\n+\n+\t@Override\n+\tprotected InputChannel createKnownInputChannel(\n+\t\t\tSingleInputGate inputGate,\n+\t\t\tint index,\n+\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n+\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n+\t\t\tInputChannelMetrics metrics) {\n+\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n+\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n+\t\t\treturn new TestLocalInputChannel(\n+\t\t\t\tinputGate,\n+\t\t\t\tindex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t} else {\n+\t\t\treturn new TestRemoteInputChannel(\n+\t\t\t\tinputGate,\n+\t\t\t\tindex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tinputChannelDescriptor.getConnectionId(),\n+\t\t\t\tconnectionManager,\n+\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\tmetrics,\n+\t\t\t\tnetworkBufferPool);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link LocalInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestLocalInputChannel extends LocalInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();\n+\n+\t\tpublic TestLocalInputChannel(\n+\t\t\t\tSingleInputGate inputGate,\n+\t\t\t\tint channelIndex,\n+\t\t\t\tResultPartitionID partitionId,\n+\t\t\t\tResultPartitionManager partitionManager,\n+\t\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\t\tint initialBackoff,\n+\t\t\t\tint maxBackoff,\n+\t\t\t\tInputChannelMetrics metrics) {\n+\t\t\tsuper(\n+\t\t\t\tinputGate,\n+\t\t\t\tchannelIndex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tinitialBackoff,\n+\t\t\t\tmaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException {\n+\t\t\tsuper.requestSubpartition(channelIndex);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ResultPartitionID getPartitionId() {\n+\t\t\treturn newPartitionID;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link RemoteInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestRemoteInputChannel extends RemoteInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();\n+\n+\t\tpublic TestRemoteInputChannel(\n+\t\t\t\tSingleInputGate inputGate,\n+\t\t\t\tint channelIndex,\n+\t\t\t\tResultPartitionID partitionId,\n+\t\t\t\tConnectionID connectionId,\n+\t\t\t\tConnectionManager connectionManager,\n+\t\t\t\tint initialBackOff,\n+\t\t\t\tint maxBackoff,\n+\t\t\t\tInputChannelMetrics metrics,\n+\t\t\t\tMemorySegmentProvider memorySegmentProvider) {\n+\t\t\tsuper(\n+\t\t\t\tinputGate,\n+\t\t\t\tchannelIndex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tconnectionId,\n+\t\t\t\tconnectionManager,\n+\t\t\t\tinitialBackOff,\n+\t\t\t\tmaxBackoff,\n+\t\t\t\tmetrics,\n+\t\t\t\tmemorySegmentProvider);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException {\n+\t\t\tsuper.requestSubpartition(channelIndex);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ResultPartitionID getPartitionId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTc5MDM0", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-363179034", "createdAt": "2020-02-24T05:56:05Z", "commit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1NjowNVrOFtWPyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1NjowNVrOFtWPyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NDczMA==", "bodyText": "nit : final", "url": "https://github.com/apache/flink/pull/11155#discussion_r383094730", "createdAt": "2020-02-24T05:56:05Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io.benchmark;\n+\n+import org.apache.flink.core.memory.MemorySegmentProvider;\n+import org.apache.flink.runtime.clusterframework.types.ResourceID;\n+import org.apache.flink.runtime.io.network.ConnectionID;\n+import org.apache.flink.runtime.io.network.ConnectionManager;\n+import org.apache.flink.runtime.io.network.TaskEventPublisher;\n+import org.apache.flink.runtime.io.network.buffer.NetworkBufferPool;\n+import org.apache.flink.runtime.io.network.metrics.InputChannelMetrics;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionID;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionManager;\n+import org.apache.flink.runtime.io.network.partition.consumer.InputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.LocalInputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.RemoteInputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate;\n+import org.apache.flink.runtime.io.network.partition.consumer.SingleInputGateFactory;\n+import org.apache.flink.runtime.shuffle.NettyShuffleDescriptor;\n+import org.apache.flink.runtime.taskmanager.NettyShuffleEnvironmentConfiguration;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A benchmark-specific input gate factory which overrides the respective methods of creating\n+ * {@link RemoteInputChannel} and {@link LocalInputChannel} for requesting specific subpartitions.\n+ */\n+public class SingleInputGateBenchmarkFactory extends SingleInputGateFactory {\n+\n+\tpublic SingleInputGateBenchmarkFactory(\n+\t\t\tResourceID taskExecutorResourceId,\n+\t\t\tNettyShuffleEnvironmentConfiguration networkConfig,\n+\t\t\tConnectionManager connectionManager,\n+\t\t\tResultPartitionManager partitionManager,\n+\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\tNetworkBufferPool networkBufferPool) {\n+\t\tsuper(\n+\t\t\ttaskExecutorResourceId,\n+\t\t\tnetworkConfig,\n+\t\t\tconnectionManager,\n+\t\t\tpartitionManager,\n+\t\t\ttaskEventPublisher,\n+\t\t\tnetworkBufferPool);\n+\t}\n+\n+\t@Override\n+\tprotected InputChannel createKnownInputChannel(\n+\t\t\tSingleInputGate inputGate,\n+\t\t\tint index,\n+\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n+\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n+\t\t\tInputChannelMetrics metrics) {\n+\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n+\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n+\t\t\treturn new TestLocalInputChannel(\n+\t\t\t\tinputGate,\n+\t\t\t\tindex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t} else {\n+\t\t\treturn new TestRemoteInputChannel(\n+\t\t\t\tinputGate,\n+\t\t\t\tindex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tinputChannelDescriptor.getConnectionId(),\n+\t\t\t\tconnectionManager,\n+\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\tmetrics,\n+\t\t\t\tnetworkBufferPool);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link LocalInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestLocalInputChannel extends LocalInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTc5MDg0", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-363179084", "createdAt": "2020-02-24T05:56:19Z", "commit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1NjoyMFrOFtWP4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTo1NjoyMFrOFtWP4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA5NDc1NA==", "bodyText": "nit: final", "url": "https://github.com/apache/flink/pull/11155#discussion_r383094754", "createdAt": "2020-02-24T05:56:20Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/benchmark/SingleInputGateBenchmarkFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io.benchmark;\n+\n+import org.apache.flink.core.memory.MemorySegmentProvider;\n+import org.apache.flink.runtime.clusterframework.types.ResourceID;\n+import org.apache.flink.runtime.io.network.ConnectionID;\n+import org.apache.flink.runtime.io.network.ConnectionManager;\n+import org.apache.flink.runtime.io.network.TaskEventPublisher;\n+import org.apache.flink.runtime.io.network.buffer.NetworkBufferPool;\n+import org.apache.flink.runtime.io.network.metrics.InputChannelMetrics;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionID;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionManager;\n+import org.apache.flink.runtime.io.network.partition.consumer.InputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.LocalInputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.RemoteInputChannel;\n+import org.apache.flink.runtime.io.network.partition.consumer.SingleInputGate;\n+import org.apache.flink.runtime.io.network.partition.consumer.SingleInputGateFactory;\n+import org.apache.flink.runtime.shuffle.NettyShuffleDescriptor;\n+import org.apache.flink.runtime.taskmanager.NettyShuffleEnvironmentConfiguration;\n+\n+import java.io.IOException;\n+\n+/**\n+ * A benchmark-specific input gate factory which overrides the respective methods of creating\n+ * {@link RemoteInputChannel} and {@link LocalInputChannel} for requesting specific subpartitions.\n+ */\n+public class SingleInputGateBenchmarkFactory extends SingleInputGateFactory {\n+\n+\tpublic SingleInputGateBenchmarkFactory(\n+\t\t\tResourceID taskExecutorResourceId,\n+\t\t\tNettyShuffleEnvironmentConfiguration networkConfig,\n+\t\t\tConnectionManager connectionManager,\n+\t\t\tResultPartitionManager partitionManager,\n+\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\tNetworkBufferPool networkBufferPool) {\n+\t\tsuper(\n+\t\t\ttaskExecutorResourceId,\n+\t\t\tnetworkConfig,\n+\t\t\tconnectionManager,\n+\t\t\tpartitionManager,\n+\t\t\ttaskEventPublisher,\n+\t\t\tnetworkBufferPool);\n+\t}\n+\n+\t@Override\n+\tprotected InputChannel createKnownInputChannel(\n+\t\t\tSingleInputGate inputGate,\n+\t\t\tint index,\n+\t\t\tNettyShuffleDescriptor inputChannelDescriptor,\n+\t\t\tSingleInputGateFactory.ChannelStatistics channelStatistics,\n+\t\t\tInputChannelMetrics metrics) {\n+\t\tResultPartitionID partitionId = inputChannelDescriptor.getResultPartitionID();\n+\t\tif (inputChannelDescriptor.isLocalTo(taskExecutorResourceId)) {\n+\t\t\treturn new TestLocalInputChannel(\n+\t\t\t\tinputGate,\n+\t\t\t\tindex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t} else {\n+\t\t\treturn new TestRemoteInputChannel(\n+\t\t\t\tinputGate,\n+\t\t\t\tindex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tinputChannelDescriptor.getConnectionId(),\n+\t\t\t\tconnectionManager,\n+\t\t\t\tpartitionRequestInitialBackoff,\n+\t\t\t\tpartitionRequestMaxBackoff,\n+\t\t\t\tmetrics,\n+\t\t\t\tnetworkBufferPool);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link LocalInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestLocalInputChannel extends LocalInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();\n+\n+\t\tpublic TestLocalInputChannel(\n+\t\t\t\tSingleInputGate inputGate,\n+\t\t\t\tint channelIndex,\n+\t\t\t\tResultPartitionID partitionId,\n+\t\t\t\tResultPartitionManager partitionManager,\n+\t\t\t\tTaskEventPublisher taskEventPublisher,\n+\t\t\t\tint initialBackoff,\n+\t\t\t\tint maxBackoff,\n+\t\t\t\tInputChannelMetrics metrics) {\n+\t\t\tsuper(\n+\t\t\t\tinputGate,\n+\t\t\t\tchannelIndex,\n+\t\t\t\tpartitionId,\n+\t\t\t\tpartitionManager,\n+\t\t\t\ttaskEventPublisher,\n+\t\t\t\tinitialBackoff,\n+\t\t\t\tmaxBackoff,\n+\t\t\t\tmetrics);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void requestSubpartition(int subpartitionIndex) throws IOException, InterruptedException {\n+\t\t\tsuper.requestSubpartition(channelIndex);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic ResultPartitionID getPartitionId() {\n+\t\t\treturn newPartitionID;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * A {@link RemoteInputChannel} which ignores the given subpartition index and uses channel index\n+\t * instead when requesting subpartition.\n+\t */\n+\tprivate static class TestRemoteInputChannel extends RemoteInputChannel {\n+\n+\t\tprivate ResultPartitionID newPartitionID = new ResultPartitionID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9"}, "originalPosition": 139}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fe5e3d33d372b15e15cc52171ea8c3844c02ef9", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/8fe5e3d33d372b15e15cc52171ea8c3844c02ef9", "committedDate": "2020-02-21T07:08:57Z", "message": "[FLINK-14818] Fix receiving InputGate setup logic of StreamNetworkBenchmarkEnvironment"}, "afterCommit": {"oid": "07c2811b17d4ee4bb517b5b1a98d7a3bc91f2dea", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/07c2811b17d4ee4bb517b5b1a98d7a3bc91f2dea", "committedDate": "2020-02-24T09:47:29Z", "message": "Fixup commit."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07c2811b17d4ee4bb517b5b1a98d7a3bc91f2dea", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/07c2811b17d4ee4bb517b5b1a98d7a3bc91f2dea", "committedDate": "2020-02-24T09:47:29Z", "message": "Fixup commit."}, "afterCommit": {"oid": "8f263fe38efaf89c0f001d3995d64e7bd46493b1", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/8f263fe38efaf89c0f001d3995d64e7bd46493b1", "committedDate": "2020-02-24T09:54:48Z", "message": "Fixup commit."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f263fe38efaf89c0f001d3995d64e7bd46493b1", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/8f263fe38efaf89c0f001d3995d64e7bd46493b1", "committedDate": "2020-02-24T09:54:48Z", "message": "Fixup commit."}, "afterCommit": {"oid": "fbf92243b17619df704bf2600d294cda449c7ddc", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/fbf92243b17619df704bf2600d294cda449c7ddc", "committedDate": "2020-02-26T00:53:25Z", "message": "Fixup commit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NjEzMzYz", "url": "https://github.com/apache/flink/pull/11155#pullrequestreview-364613363", "createdAt": "2020-02-26T04:13:52Z", "commit": {"oid": "fbf92243b17619df704bf2600d294cda449c7ddc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035041ed96b561f0d7bb69fa09436a24e42a5a54", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/035041ed96b561f0d7bb69fa09436a24e42a5a54", "committedDate": "2020-02-27T04:04:15Z", "message": "[FLINK-14818][benchmark] Fix InputGate setup logic of StreamNetworkBenchmarkEnvironment\n\nBefore this change, in network benchmark (for example 1000 channels benchmark with 4 record writers) StreamNetworkBenchmarkEnvironment#createInputGate was creating 1000 input gates with 4 input channels each, which doesn't make much sense. This commit is changing that to a single receiver with 4 input gates and each with 1000 channels.\n\nIt is achieved by providing testing implementations of InputChannels, which are using channel index for requesting subpartitions from ResultPartition, instead of subpartition index. Thanks to that, we can map a single ResultPartition with N subpartitions, to a single instance of InputGate with N channels.\n\nThe change also influences the benchmark results, overall, the performance goes down a bit because of the decrease of floating buffers and the followings are benchmark results before and after this change:\n\n------------------------------------------------------------------Before----------------------------------------------------------------------\nBenchmark                                                                     (channelsFlushTimeout)   Mode  Cnt      Score      Error   Units\nDataSkewStreamNetworkThroughputBenchmarkExecutor.networkSkewedThroughput                         N/A  thrpt   30  17079.534 \u00b1  830.532  ops/ms\nStreamNetworkBroadcastThroughputBenchmarkExecutor.networkBroadcastThroughput                     N/A  thrpt   30    599.664 \u00b1   13.325  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                 100,100ms  thrpt   30  45629.898 \u00b1 1623.455  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                             100,100ms,SSL  thrpt   30   9817.421 \u00b1  216.075  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                  1000,1ms  thrpt   30  25442.152 \u00b1  968.340  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                1000,100ms  thrpt   30  27944.285 \u00b1  518.106  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                            1000,100ms,SSL  thrpt   30   7820.549 \u00b1  895.862  ops/ms\nStreamNetworkLatencyBenchmarkExecutor.networkLatency1to1                                         N/A   avgt   30     13.184 \u00b1    0.093   ms/op\n\n------------------------------------------------------------------After-----------------------------------------------------------------------\nBenchmark                                                                     (channelsFlushTimeout)   Mode  Cnt      Score      Error   Units\nDataSkewStreamNetworkThroughputBenchmarkExecutor.networkSkewedThroughput                         N/A  thrpt   30  17345.574 \u00b1  370.647  ops/ms\nStreamNetworkBroadcastThroughputBenchmarkExecutor.networkBroadcastThroughput                     N/A  thrpt   30    608.881 \u00b1   12.054  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                 100,100ms  thrpt   30  41732.518 \u00b1 1109.436  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                             100,100ms,SSL  thrpt   30   9689.525 \u00b1  202.895  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                  1000,1ms  thrpt   30  24106.705 \u00b1 2952.364  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                1000,100ms  thrpt   30  27509.665 \u00b1 3246.965  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                            1000,100ms,SSL  thrpt   30   7691.287 \u00b1  927.775  ops/ms\nStreamNetworkLatencyBenchmarkExecutor.networkLatency1to1                                         N/A   avgt   30     12.758 \u00b1    0.147   ms/op"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbf92243b17619df704bf2600d294cda449c7ddc", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/fbf92243b17619df704bf2600d294cda449c7ddc", "committedDate": "2020-02-26T00:53:25Z", "message": "Fixup commit."}, "afterCommit": {"oid": "035041ed96b561f0d7bb69fa09436a24e42a5a54", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/035041ed96b561f0d7bb69fa09436a24e42a5a54", "committedDate": "2020-02-27T04:04:15Z", "message": "[FLINK-14818][benchmark] Fix InputGate setup logic of StreamNetworkBenchmarkEnvironment\n\nBefore this change, in network benchmark (for example 1000 channels benchmark with 4 record writers) StreamNetworkBenchmarkEnvironment#createInputGate was creating 1000 input gates with 4 input channels each, which doesn't make much sense. This commit is changing that to a single receiver with 4 input gates and each with 1000 channels.\n\nIt is achieved by providing testing implementations of InputChannels, which are using channel index for requesting subpartitions from ResultPartition, instead of subpartition index. Thanks to that, we can map a single ResultPartition with N subpartitions, to a single instance of InputGate with N channels.\n\nThe change also influences the benchmark results, overall, the performance goes down a bit because of the decrease of floating buffers and the followings are benchmark results before and after this change:\n\n------------------------------------------------------------------Before----------------------------------------------------------------------\nBenchmark                                                                     (channelsFlushTimeout)   Mode  Cnt      Score      Error   Units\nDataSkewStreamNetworkThroughputBenchmarkExecutor.networkSkewedThroughput                         N/A  thrpt   30  17079.534 \u00b1  830.532  ops/ms\nStreamNetworkBroadcastThroughputBenchmarkExecutor.networkBroadcastThroughput                     N/A  thrpt   30    599.664 \u00b1   13.325  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                 100,100ms  thrpt   30  45629.898 \u00b1 1623.455  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                             100,100ms,SSL  thrpt   30   9817.421 \u00b1  216.075  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                  1000,1ms  thrpt   30  25442.152 \u00b1  968.340  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                1000,100ms  thrpt   30  27944.285 \u00b1  518.106  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                            1000,100ms,SSL  thrpt   30   7820.549 \u00b1  895.862  ops/ms\nStreamNetworkLatencyBenchmarkExecutor.networkLatency1to1                                         N/A   avgt   30     13.184 \u00b1    0.093   ms/op\n\n------------------------------------------------------------------After-----------------------------------------------------------------------\nBenchmark                                                                     (channelsFlushTimeout)   Mode  Cnt      Score      Error   Units\nDataSkewStreamNetworkThroughputBenchmarkExecutor.networkSkewedThroughput                         N/A  thrpt   30  17345.574 \u00b1  370.647  ops/ms\nStreamNetworkBroadcastThroughputBenchmarkExecutor.networkBroadcastThroughput                     N/A  thrpt   30    608.881 \u00b1   12.054  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                 100,100ms  thrpt   30  41732.518 \u00b1 1109.436  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                             100,100ms,SSL  thrpt   30   9689.525 \u00b1  202.895  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                  1000,1ms  thrpt   30  24106.705 \u00b1 2952.364  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                                1000,100ms  thrpt   30  27509.665 \u00b1 3246.965  ops/ms\nStreamNetworkThroughputBenchmarkExecutor.networkThroughput                            1000,100ms,SSL  thrpt   30   7691.287 \u00b1  927.775  ops/ms\nStreamNetworkLatencyBenchmarkExecutor.networkLatency1to1                                         N/A   avgt   30     12.758 \u00b1    0.147   ms/op"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4867, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}