{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTE1NjI5", "number": 11639, "title": "[FLINK-16626][runtime] Prevent REST handler from being closed more than once", "bodyText": "What is the purpose of the change\nIn Flink 1.10.0 release, job cancellation can be problematic, as users frequently experience java.util.concurrent.TimeoutException at the client side, because the REST endpoint closes pre-maturely before sending out the response.\nAfter discussion with the community and research, it is shown that there are two issues to address:\n\nAbstractHandler and its subclasses can be closed more than once (whether intentionally or unintentionally), so this might lead to unexpected behavior like exceptions, especially when interacting with external systems, or unintended deregistration of Phaser in the handler instance which causes early shutdown of the cluster.\nIn WebMonitorEndpoint class, the same jobCancelTerminationHandler instance has been registered twice, thus during handler closure process, closeAsync method is called twice, therefore, the cluster pre-maturely entered internalShutdown process, leaving unfinished responses behind.\n\nBrief change log\n\nAdded an AtomicBoolean field to prevent closeAsync method of one handler instance from being called multiple times.\nAdded a new legacyJobCancelTerminationHandler to prevent reuse of existing jobCancelTerminationHandler handler instance.\n\nVerifying this change\nThis change added tests and can be verified as follows:\nYARNJobCancellationITCase\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: yes\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-04-05T14:50:58Z", "url": "https://github.com/apache/flink/pull/11639", "merged": true, "mergeCommit": {"oid": "593214993e07a939c96b6bc19e16c7daa110e39d"}, "closed": true, "closedAt": "2020-04-12T10:28:08Z", "author": {"login": "kylemeow"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUrK_AgH2gAyMzk5MTE1NjI5OjQxMWU0ZDZmODg4ZGNlMTQ1NDY3ZDhkNDkyMWE1ZjJlNTdjZjA2NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV8zMngFqTM5MDgwODY5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "411e4d6f888dce145467d8d4921a5f2e57cf0649", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/411e4d6f888dce145467d8d4921a5f2e57cf0649", "committedDate": "2020-04-05T14:42:29Z", "message": "[FLINK-16626][runtime] Prevent REST handler from being closed more than once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d2868f287cd4df7bf4d71947a2f04d482a936cf", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/3d2868f287cd4df7bf4d71947a2f04d482a936cf", "committedDate": "2020-04-05T14:43:35Z", "message": "[FLINK-16626][flink-yarn-tests] Add job cancellation test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/6cec9f68ac5dee45acece3f188ec687d3b87a5f2", "committedDate": "2020-04-05T14:58:45Z", "message": "[FLINK-16626][minor] Fixed code style warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzI4MTI5", "url": "https://github.com/apache/flink/pull/11639#pullrequestreview-388328129", "createdAt": "2020-04-06T14:51:09Z", "commit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo1MTowOVrOGBbj0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowNjozNVrOGBcTKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1MzI5OA==", "bodyText": "Please revert this.", "url": "https://github.com/apache/flink/pull/11639#discussion_r404153298", "createdAt": "2020-04-06T14:51:09Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -217,11 +223,17 @@ private void finalizeRequestProcessing(FileUploads uploadedFiles) {\n \t\t\t\tHttpResponseStatus.INTERNAL_SERVER_ERROR,\n \t\t\t\tresponseHeaders);\n \t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1ODU0NA==", "bodyText": "Without a toString() implementation the reference to the handler isn't that user-friendly; I would instead suggest to use untypedResponseMessageHeaders.getTargetRestEndpointURL.\nSomething along the lines of The handler for the url ({}) was already closed, but another attempt at closing it was made.", "url": "https://github.com/apache/flink/pull/11639#discussion_r404158544", "createdAt": "2020-04-06T14:57:38Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -217,11 +223,17 @@ private void finalizeRequestProcessing(FileUploads uploadedFiles) {\n \t\t\t\tHttpResponseStatus.INTERNAL_SERVER_ERROR,\n \t\t\t\tresponseHeaders);\n \t\t}\n+\n \t}\n \n \t@Override\n \tpublic final CompletableFuture<Void> closeAsync() {\n-\t\treturn FutureUtils.composeAfterwards(closeHandlerAsync(), inFlightRequestTracker::awaitAsync);\n+\t\tif (isHandlerClosed.compareAndSet(false, true)) {\n+\t\t\treturn FutureUtils.composeAfterwards(closeHandlerAsync(), inFlightRequestTracker::awaitAsync);\n+\t\t} else {\n+\t\t\tlog.warn(\"Handler instance {} had already been closed, not allowed to close it again.\", this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTUxMg==", "bodyText": "Let's directly refer to the resulting problem.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// this is to prevent the same JobCancellationHandler from being registered twice\n          \n          \n            \n            \t\t// should be removed once the Yarn proxy can forward all REST verbs\n          \n          \n            \n            \t\t// use a separate handler for the yarn-cancel to ensure close() is only called once", "url": "https://github.com/apache/flink/pull/11639#discussion_r404159512", "createdAt": "2020-04-06T14:58:45Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/webmonitor/WebMonitorEndpoint.java", "diffHunk": "@@ -500,6 +500,15 @@ public WebMonitorEndpoint(\n \t\t\tJobCancellationHeaders.getInstance(),\n \t\t\tTerminationModeQueryParameter.TerminationMode.CANCEL);\n \n+\t\t// this is to prevent the same JobCancellationHandler from being registered twice\n+\t\t// should be removed once the Yarn proxy can forward all REST verbs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTcyOQ==", "bodyText": "We can be a bit more specific with the naming\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal JobCancellationHandler legacyJobCancelTerminationHandler = new JobCancellationHandler(\n          \n          \n            \n            \t\tfinal JobCancellationHandler yarnJobCancelTerminationHandler = new JobCancellationHandler(", "url": "https://github.com/apache/flink/pull/11639#discussion_r404159729", "createdAt": "2020-04-06T14:59:01Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/webmonitor/WebMonitorEndpoint.java", "diffHunk": "@@ -500,6 +500,15 @@ public WebMonitorEndpoint(\n \t\t\tJobCancellationHeaders.getInstance(),\n \t\t\tTerminationModeQueryParameter.TerminationMode.CANCEL);\n \n+\t\t// this is to prevent the same JobCancellationHandler from being registered twice\n+\t\t// should be removed once the Yarn proxy can forward all REST verbs\n+\t\tfinal JobCancellationHandler legacyJobCancelTerminationHandler = new JobCancellationHandler(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NTQxNg==", "bodyText": "I think we can take a more targeted approach if we add stronger assertions to the runtime.\nWe could verify in the RestServerEndpoint that all handlers are unique using an IdentityHashMap. We could then write a simple unit test that sets up a sub-class that registers 1 handler multiple times and assert than an exception is thrown.", "url": "https://github.com/apache/flink/pull/11639#discussion_r404165416", "createdAt": "2020-04-06T15:06:35Z", "author": {"login": "zentol"}, "path": "flink-yarn-tests/src/test/java/org/apache/flink/yarn/YARNJobCancellationITCase.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.client.deployment.ClusterSpecification;\n+import org.apache.flink.client.program.ClusterClient;\n+import org.apache.flink.configuration.AkkaOptions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.MemorySize;\n+import org.apache.flink.configuration.TaskManagerOptions;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.DiscardingSink;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+import org.apache.flink.yarn.util.YarnTestUtils;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.yarn.api.records.ApplicationId;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+\n+\n+/**\n+ * Test cases for the cancellation of Yarn Flink clusters.\n+ */\n+public class YARNJobCancellationITCase extends YarnTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cec9f68ac5dee45acece3f188ec687d3b87a5f2"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8f4b5ef57ba92d87ccf9d7ceb5cd746ad594db0", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/b8f4b5ef57ba92d87ccf9d7ceb5cd746ad594db0", "committedDate": "2020-04-07T03:38:49Z", "message": "[FLINK-16626][runtime] Ensure each REST handler to be registered only once at runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207", "committedDate": "2020-04-07T03:39:58Z", "message": "[FLINK-16626][client] Add test case for duplicate handler registration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODM1MDMx", "url": "https://github.com/apache/flink/pull/11639#pullrequestreview-388835031", "createdAt": "2020-04-07T07:02:49Z", "commit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzowMjo0OVrOGB1lfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzo1NTozOFrOGB3aBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3OTcxMA==", "bodyText": "If we adjust the test name slightly we don't really need the comment (which is always a good thing since if CI fails people only see the test name ;) )\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t * Tests that ensure each handler is registered only once.\n          \n          \n            \n            \t */\n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testDuplicatedHandlerRegistration() throws Exception {\n          \n          \n            \n            \t@Test\n          \n          \n            \n            \tpublic void testDuplicateHandlerRegistrationIsForbidden() throws Exception {", "url": "https://github.com/apache/flink/pull/11639#discussion_r404579710", "createdAt": "2020-04-07T07:02:49Z", "author": {"login": "zentol"}, "path": "flink-clients/src/test/java/org/apache/flink/client/program/rest/RestClusterClientTest.java", "diffHunk": "@@ -271,6 +273,24 @@ public void testDetachedJobSubmission() throws Exception {\n \n \t}\n \n+\t/**\n+\t * Tests that ensure each handler is registered only once.\n+\t */\n+\t@Test\n+\tpublic void testDuplicatedHandlerRegistration() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjAzMA==", "bodyText": "We generally try to avoid matching the exact text; it is quite tiresome having to adjust a test just because you changed added a bit more information.\nSince assertThrows only checks that the string is contained in the exception we can instead use \"Duplicate REST handler\".", "url": "https://github.com/apache/flink/pull/11639#discussion_r404582030", "createdAt": "2020-04-07T07:07:35Z", "author": {"login": "zentol"}, "path": "flink-clients/src/test/java/org/apache/flink/client/program/rest/RestClusterClientTest.java", "diffHunk": "@@ -271,6 +273,24 @@ public void testDetachedJobSubmission() throws Exception {\n \n \t}\n \n+\t/**\n+\t * Tests that ensure each handler is registered only once.\n+\t */\n+\t@Test\n+\tpublic void testDuplicatedHandlerRegistration() throws Exception {\n+\t\tfinal TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler();\n+\n+\t\tassertThrows(\"Duplicate REST handler instance found. Please ensure each instance is registered only once.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjUxNA==", "bodyText": "Having this line obfuscates where the error is thrown. Any reader would assume this line throws the exception; because there would be no need for it if createRestServerEndpoint throws it.", "url": "https://github.com/apache/flink/pull/11639#discussion_r404582514", "createdAt": "2020-04-07T07:08:26Z", "author": {"login": "zentol"}, "path": "flink-clients/src/test/java/org/apache/flink/client/program/rest/RestClusterClientTest.java", "diffHunk": "@@ -271,6 +273,24 @@ public void testDetachedJobSubmission() throws Exception {\n \n \t}\n \n+\t/**\n+\t * Tests that ensure each handler is registered only once.\n+\t */\n+\t@Test\n+\tpublic void testDuplicatedHandlerRegistration() throws Exception {\n+\t\tfinal TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler();\n+\n+\t\tassertThrows(\"Duplicate REST handler instance found. Please ensure each instance is registered only once.\",\n+\t\t\tFlinkRuntimeException.class,\n+\t\t\t() -> {\n+\t\t\t\ttry (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(\n+\t\t\t\t\ttestJobSubmitHandler, testJobSubmitHandler)) {\n+\t\t\t\t\tcreateRestClusterClient(restServerEndpoint.getServerAddress().getPort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4ODk1MQ==", "bodyText": "I don't think this test is in the correct place; it should be in RestServerEndpointTest. Or maybe, to make it a bit easier, RestServerEndpointITCase since it has the required utilities already.", "url": "https://github.com/apache/flink/pull/11639#discussion_r404588951", "createdAt": "2020-04-07T07:20:27Z", "author": {"login": "zentol"}, "path": "flink-clients/src/test/java/org/apache/flink/client/program/rest/RestClusterClientTest.java", "diffHunk": "@@ -271,6 +273,24 @@ public void testDetachedJobSubmission() throws Exception {\n \n \t}\n \n+\t/**\n+\t * Tests that ensure each handler is registered only once.\n+\t */\n+\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4OTY2Nw==", "bodyText": "We are leaking resources here since we never actually get back a restServerEndpoint; createRestServerEndpoint fails with an exception but doesn't close the resource internally if start() fails.", "url": "https://github.com/apache/flink/pull/11639#discussion_r404589667", "createdAt": "2020-04-07T07:21:49Z", "author": {"login": "zentol"}, "path": "flink-clients/src/test/java/org/apache/flink/client/program/rest/RestClusterClientTest.java", "diffHunk": "@@ -271,6 +273,24 @@ public void testDetachedJobSubmission() throws Exception {\n \n \t}\n \n+\t/**\n+\t * Tests that ensure each handler is registered only once.\n+\t */\n+\t@Test\n+\tpublic void testDuplicatedHandlerRegistration() throws Exception {\n+\t\tfinal TestJobSubmitHandler testJobSubmitHandler = new TestJobSubmitHandler();\n+\n+\t\tassertThrows(\"Duplicate REST handler instance found. Please ensure each instance is registered only once.\",\n+\t\t\tFlinkRuntimeException.class,\n+\t\t\t() -> {\n+\t\t\t\ttry (TestRestServerEndpoint restServerEndpoint = createRestServerEndpoint(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwOTU0Mw==", "bodyText": "Do we still need this test?", "url": "https://github.com/apache/flink/pull/11639#discussion_r404609543", "createdAt": "2020-04-07T07:55:38Z", "author": {"login": "zentol"}, "path": "flink-yarn-tests/src/test/java/org/apache/flink/yarn/YARNJobCancellationITCase.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.yarn;\n+\n+import org.apache.flink.client.deployment.ClusterSpecification;\n+import org.apache.flink.client.program.ClusterClient;\n+import org.apache.flink.configuration.AkkaOptions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.MemorySize;\n+import org.apache.flink.configuration.TaskManagerOptions;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.DiscardingSink;\n+import org.apache.flink.streaming.api.functions.source.SourceFunction;\n+import org.apache.flink.yarn.util.YarnTestUtils;\n+\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.yarn.api.records.ApplicationId;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.concurrent.CompletableFuture;\n+\n+\n+/**\n+ * Test cases for the cancellation of Yarn Flink clusters.\n+ */\n+public class YARNJobCancellationITCase extends YarnTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ebe8ddeb78fedc927c8d8d39024f3aa87ce5207"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed239dbb993802200f5ad701bcd6c384a29171dd", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/ed239dbb993802200f5ad701bcd6c384a29171dd", "committedDate": "2020-04-07T09:40:59Z", "message": "[FLINK-16626][tests] Modified test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDA3MTQ4", "url": "https://github.com/apache/flink/pull/11639#pullrequestreview-389007148", "createdAt": "2020-04-07T11:00:09Z", "commit": {"oid": "ed239dbb993802200f5ad701bcd6c384a29171dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTowMDowOVrOGB-OdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTowMDowOVrOGB-OdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcyMTI2OQ==", "bodyText": "I don't think we should return a completed future if the handle has received \"close\" message. It is possible that the handle is still closing. Possibly we alter inFlightRequestTracker::awaitAsync to return the terminate future if it is closed, without deregister the phaser party.\ncc @zentol  @GJL", "url": "https://github.com/apache/flink/pull/11639#discussion_r404721269", "createdAt": "2020-04-07T11:00:09Z", "author": {"login": "tisonkun"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -221,7 +227,12 @@ private void finalizeRequestProcessing(FileUploads uploadedFiles) {\n \n \t@Override\n \tpublic final CompletableFuture<Void> closeAsync() {\n-\t\treturn FutureUtils.composeAfterwards(closeHandlerAsync(), inFlightRequestTracker::awaitAsync);\n+\t\tif (isHandlerClosed.compareAndSet(false, true)) {\n+\t\t\treturn FutureUtils.composeAfterwards(closeHandlerAsync(), inFlightRequestTracker::awaitAsync);\n+\t\t} else {\n+\t\t\tlog.warn(\"The handler instance for {} had already been closed, but another attempt at closing it was made.\", untypedResponseMessageHeaders.getTargetRestEndpointURL());\n+\t\t\treturn CompletableFuture.completedFuture(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed239dbb993802200f5ad701bcd6c384a29171dd"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88ff90473405fa72335e5393b32377134c4b4f11", "author": {"user": {"login": "kylemeow", "name": "Kyle Dong"}}, "url": "https://github.com/apache/flink/commit/88ff90473405fa72335e5393b32377134c4b4f11", "committedDate": "2020-04-09T11:51:15Z", "message": "Make calls to closeAsync idempotent"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNzk3NTU4", "url": "https://github.com/apache/flink/pull/11639#pullrequestreview-390797558", "createdAt": "2020-04-09T13:35:47Z", "commit": {"oid": "88ff90473405fa72335e5393b32377134c4b4f11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODA4Njkw", "url": "https://github.com/apache/flink/pull/11639#pullrequestreview-390808690", "createdAt": "2020-04-09T13:48:43Z", "commit": {"oid": "88ff90473405fa72335e5393b32377134c4b4f11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2314, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}