{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTQ4MDE0", "number": 12630, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo1MjowMFrOEFwP4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowMDozMFrOEFxfbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDY4ODMyOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/streaming/temporal_tables.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMTo1MjowMFrOGkIevA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzoyMzo0MFrOGkJ3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MDg2MA==", "bodyText": "nit: an -> a", "url": "https://github.com/apache/flink/pull/12630#discussion_r440540860", "createdAt": "2020-06-16T01:52:00Z", "author": {"login": "godfreyhe"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,43 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n+StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, settings);\n+// or TableEnvironment tEnv = TableEnvironment.create(settings);\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2MzUyNg==", "bodyText": "The  pronounce of 'H' in 'HBase' is 'e\u026at\u0283', the first sound is vowel, so we should use 'an HBase'", "url": "https://github.com/apache/flink/pull/12630#discussion_r440563526", "createdAt": "2020-06-16T03:23:40Z", "author": {"login": "leonardBang"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,43 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n+StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, settings);\n+// or TableEnvironment tEnv = TableEnvironment.create(settings);\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MDg2MA=="}, "originalCommit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDcwOTg3OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/streaming/temporal_tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjowNToxMFrOGkIsbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMjowNToxMFrOGkIsbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0NDM2NQ==", "bodyText": "add some comments here, such as currency as rowkey", "url": "https://github.com/apache/flink/pull/12630#discussion_r440544365", "createdAt": "2020-06-16T02:05:10Z", "author": {"login": "godfreyhe"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,43 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n+StreamTableEnvironment tEnv = StreamTableEnvironment.create(env, settings);\n+// or TableEnvironment tEnv = TableEnvironment.create(settings);\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql\n+tEnv.executeSql(\n+    \"CREATE TABLE LatestRates (\" +\n+    \"   currency STRING,\" +\n+    \"   fam1 ROW<rate DOUBLE>\" +\n+    \") WITH (\" +\n+    \"   'connector' = 'hbase-1.4',\" +\n+    \"   'table-name' = 'Rates',\" +\n+    \"   'zookeeper.quorum' = 'localhost:2181'\" +\n+    \")\");\n {% endhighlight %}\n </div>\n <div data-lang=\"scala\" markdown=\"1\">\n {% highlight scala %}\n // Get the stream and table environments.\n val env = StreamExecutionEnvironment.getExecutionEnvironment\n-val tEnv = TableEnvironment.getTableEnvironment(env)\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-val rates = new HBaseTableSource(conf, \"Rates\")\n-rates.setRowKey(\"currency\", String.class)   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class)\n+val settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n+val tEnv = StreamTableEnvironment.create(env, settings)\n+// or val tEnv = TableEnvironment.create(settings)\n+\n+// Define an HBase table with DDL, then we can use it as a temporal table in sql\n+tEnv.executeSql(\n+    s\"\"\"\n+       |CREATE TABLE LatestRates (\n+       |    currency STRING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "535ba0fc8ca6ea67ded71fd9a80a24762b381a88"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg5MTk3OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/streaming/temporal_tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowMDozMFrOGkKbXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDowMDozMFrOGkKbXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3Mjc2Nw==", "bodyText": "Drop .useBlinkPlanner().inStreamingMode()? Because it is default value.", "url": "https://github.com/apache/flink/pull/12630#discussion_r440572767", "createdAt": "2020-06-16T04:00:30Z", "author": {"login": "JingsongLi"}, "path": "docs/dev/table/streaming/temporal_tables.md", "diffHunk": "@@ -260,32 +260,45 @@ See also the page about [joins for continuous queries](joins.html) for more info\n {% highlight java %}\n // Get the stream and table environments.\n StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-StreamTableEnvironment tEnv = TableEnvironment.getTableEnvironment(env);\n-\n-// Create an HBaseTableSource as a temporal table which implements LookableTableSource\n-// In the real setup, you should replace this with your own table.\n-HBaseTableSource rates = new HBaseTableSource(conf, \"Rates\");\n-rates.setRowKey(\"currency\", String.class);   // currency as the primary key\n-rates.addColumn(\"fam1\", \"rate\", Double.class);\n-\n-// register the temporal table into environment, then we can query it in sql\n-tEnv.registerTableSource(\"Rates\", rates);\n+EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed3f09a47cd103818f3563d519da24b22da65798"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4265, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}