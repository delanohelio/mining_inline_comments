{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDAwNTg0", "number": 13289, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozODoxOVrOEfagYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxMToyMlrOEl82aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzc1NTg0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkPlannerImpl.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozODoxOVrOHLrGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTozODoxOVrOHLrGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwMjUwMA==", "bodyText": "val relBuilder: RelBuilder to eliminate the IDEA warnings.", "url": "https://github.com/apache/flink/pull/13289#discussion_r482002500", "createdAt": "2020-09-02T11:38:19Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkPlannerImpl.scala", "diffHunk": "@@ -163,7 +163,35 @@ class FlinkPlannerImpl(\n         sqlValidator.getCatalogReader.unwrap(classOf[CalciteCatalogReader]),\n         cluster,\n         convertletTable,\n-        sqlToRelConverterConfig)\n+        sqlToRelConverterConfig) {\n+        // override convertFrom() to support flexible Temporal Table Syntax,\n+        // this can be revert once FLINK-16579(Upgrade Calcite version to 1.23) resolved.\n+        val relBuilder = config.getRelBuilderFactory.create(cluster, null)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e195f2120b88bff90da918c1a5a0ae5327285f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzc4OTQ5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/join/LookupJoinITCase.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0ODowOFrOHLraPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0ODowOFrOHLraPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwNzYxMw==", "bodyText": "You can use junit Assume.assumeTrue() instead.\nPS, can we just create another table with computed column there and add test cases for this patch ? It is not necessary to add another test param which makes the test looks verbose and complex.", "url": "https://github.com/apache/flink/pull/13289#discussion_r482007613", "createdAt": "2020-09-02T11:48:08Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/batch/sql/join/LookupJoinITCase.scala", "diffHunk": "@@ -208,15 +247,19 @@ class LookupJoinITCase(legacyTableSource: Boolean, isAsyncMode: Boolean) extends\n \n   @Test\n   def testLeftJoinTemporalTable(): Unit = {\n-    val sql = s\"SELECT T.id, T.len, D.name, D.age FROM T LEFT JOIN userTable \" +\n+    if (legacyTableSource) {\n+      //Computed column do not support in legacyTableSource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e195f2120b88bff90da918c1a5a0ae5327285f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzc5MzQxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/join/LookupJoinTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0OToyMVrOHLrcpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMTo0OToyMVrOHLrcpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAwODIzMQ==", "bodyText": "No need to add another param useComputedColumn i think. Just add new tables and new cases you want to test.", "url": "https://github.com/apache/flink/pull/13289#discussion_r482008231", "createdAt": "2020-09-02T11:49:21Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/join/LookupJoinTest.scala", "diffHunk": "@@ -489,9 +493,12 @@ class LookupJoinTest(legacyTableSource: Boolean) extends TableTestBase with Seri\n }\n \n object LookupJoinTest {\n-  @Parameterized.Parameters(name = \"LegacyTableSource={0}\")\n+  @Parameterized.Parameters(name = \"LegacyTableSource={0}, useComputedColumn={1}\")\n   def parameters(): JCollection[Array[Object]] = {\n-    Seq[Array[AnyRef]](Array(JBoolean.TRUE), Array(JBoolean.FALSE))\n+    Seq[Array[AnyRef]](", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78e195f2120b88bff90da918c1a5a0ae5327285f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjI5NzM2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkPlannerImpl.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxMToyMlrOHVs2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNzoxMToyMlrOHVs2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxNzExNw==", "bodyText": "Create a JIRA issue to remove this overriding once we bump up Calcite version. And add comment above this method with the JIRA id.", "url": "https://github.com/apache/flink/pull/13289#discussion_r492517117", "createdAt": "2020-09-22T07:11:22Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/calcite/FlinkPlannerImpl.scala", "diffHunk": "@@ -163,7 +163,35 @@ class FlinkPlannerImpl(\n         sqlValidator.getCatalogReader.unwrap(classOf[CalciteCatalogReader]),\n         cluster,\n         convertletTable,\n-        sqlToRelConverterConfig)\n+        sqlToRelConverterConfig) {\n+        // override convertFrom() to support flexible Temporal Table Syntax,\n+        // this can be revert once FLINK-16579(Upgrade Calcite version to 1.23) resolved.\n+        val relBuilder = config.getRelBuilderFactory.create(cluster, null)\n+\n+        override def convertFrom(bb: SqlToRelConverter#Blackboard, from: SqlNode): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8788045dfd7023777299e2a4b514711bb4018c98"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 382, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}