{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDQ4Mjk1", "number": 11483, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToxMDo1MlrODrKihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToxMDo1MlrODrKihg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTg4MDM4OnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-datadog/src/main/java/org/apache/flink/metrics/datadog/DCounter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToxMDo1MlrOF7WNhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToxMDo1MlrOF7WNhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc3NDIxNA==", "bodyText": "I think we can simplify this mechanism a bit; my suggestion would be:\npublic class DCounter extends DMetric {\n\t...\n\tprivate long lastReportCount = 0;\n\tprivate long currentReportCount = 0;\n\t...\n\tpublic Number getMetricValue() {\n\t\tlong currentCount = counter.getCount();\n\t\tlong difference = currentCount - lastReportCount;\n\t\tcurrentReportCount = currentCount;\n\t\treturn difference;\n\t}\n\n\tpublic void ackReport() {\n\t\tlastReportCount = currentReportCount;\n\t}\n}\n\npublic class DatadogHttpReporter ... {\n\t...\n\tpublic void report() {\n\t\t...\n\t\tcounters.values().forEach(request::addCounter);\n\t\t...\n\t\ttry {\n\t\t\tclient.send(request);\n\t\t\tcounters.values().forEach(request::ackReport);\n\t\t} ...\n\t}\n}\n\nThis way we don't assemble another map, we have less of a back-and-forth between the reporter/metric and the error handling remains as is.", "url": "https://github.com/apache/flink/pull/11483#discussion_r397774214", "createdAt": "2020-03-25T11:10:52Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-datadog/src/main/java/org/apache/flink/metrics/datadog/DCounter.java", "diffHunk": "@@ -28,17 +28,34 @@\n public class DCounter extends DMetric {\n \tprivate final Counter counter;\n \n+\tprivate long lastReportedValue = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734a0bc7631586f212a22d9a71e60518d49d2274"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 680, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}