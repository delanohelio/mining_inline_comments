{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTAyNjgw", "number": 12900, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MDoxN1rOEOSzyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjozMlrOEO-1Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDIzNjg5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MDoxN1rOGxXSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1NDoyOFrOGycixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg==", "bodyText": "Is this interface really necessary? Especially with @PublicEvolving annotation? How are users supposed to use it? If I understand it correctly you need it for internal operations. Moreover you need it because the WrapperTypeInfo is in blink-runtime, right?\nCan't we move the WrapperTypeInfo to the table-common instead?  The class itself has no runtime dependencies. Only the factory methods need some runtime classes.", "url": "https://github.com/apache/flink/pull/12900#discussion_r454415036", "createdAt": "2020-07-14T14:50:17Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.types;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+\n+/**\n+ * Indicates that a {@link DataType} can be retrieved from a class that implements this interfaces.\n+ */\n+@PublicEvolving\n+public interface DataTypeQueryable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f0bc79be46f90fd0f34697ed10264907ee2614a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUwNjg0Nw==", "bodyText": "I thought about this as well and decided for keeping WrapperTypeInfo in the runtime package. The reason for this is to keep the serializers close to this utility class in the same package. WrapperTypeInfo is not needed in table-common because it is internal. Actually the constructor of WrappenTypeInfo should even be private but this is not possible due to other failing tests so far. We can mark DataTypeQueryable internal if that helps, but the past around TypeInformation has shown that you need such a simple interface over and over again. It will be more useful in the future once we introduce a \"converter type serializer\" where the return data type is not of internal data structure.", "url": "https://github.com/apache/flink/pull/12900#discussion_r454506847", "createdAt": "2020-07-14T17:03:05Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.types;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+\n+/**\n+ * Indicates that a {@link DataType} can be retrieved from a class that implements this interfaces.\n+ */\n+@PublicEvolving\n+public interface DataTypeQueryable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg=="}, "originalCommit": {"oid": "6f0bc79be46f90fd0f34697ed10264907ee2614a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0ODA0OQ==", "bodyText": "I prefer to keep WrapperTypeInfo in blink-runtime, especially we have a public construct which will cause a lot of problems if the logicalType and typeSerializer are not mapped.", "url": "https://github.com/apache/flink/pull/12900#discussion_r455548049", "createdAt": "2020-07-16T06:50:59Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.types;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+\n+/**\n+ * Indicates that a {@link DataType} can be retrieved from a class that implements this interfaces.\n+ */\n+@PublicEvolving\n+public interface DataTypeQueryable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg=="}, "originalCommit": {"oid": "6f0bc79be46f90fd0f34697ed10264907ee2614a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0OTYzNg==", "bodyText": "Is it possible to make the construct of WrapperTypeInfo to be package visible? We can move the utility TypeInfoDataTypeConverter#createWrapperTypeInfo into WrapperTypeInfo. And the remaining constructor invoking are the tests under the same package.", "url": "https://github.com/apache/flink/pull/12900#discussion_r455549636", "createdAt": "2020-07-16T06:54:28Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/DataTypeQueryable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.types;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+\n+/**\n+ * Indicates that a {@link DataType} can be retrieved from a class that implements this interfaces.\n+ */\n+@PublicEvolving\n+public interface DataTypeQueryable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNTAzNg=="}, "originalCommit": {"oid": "6f0bc79be46f90fd0f34697ed10264907ee2614a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTM0OTgxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo1MTozMlrOGybCpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozNDowM1rOGzKaJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyNTAzMA==", "bodyText": "What's the preferred import order? AFAIK, the code style suggests to put flink imports first: https://flink.apache.org/contributing/code-style-and-quality-formatting.html#imports", "url": "https://github.com/apache/flink/pull/12900#discussion_r455525030", "createdAt": "2020-07-16T05:51:32Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "diffHunk": "@@ -18,23 +18,23 @@\n \n package org.apache.flink.table.planner.codegen\n \n+import java.util.TimeZone\n+\n+import org.apache.calcite.avatica.util.DateTimeUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb895be265bd445b9d36bfc52cf8018a508c333"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMTA5NQ==", "bodyText": "Thanks for the reminder. I only set this for Java not for Scala. However, it difficult to enforce this without a checkstyle plugin in place.", "url": "https://github.com/apache/flink/pull/12900#discussion_r456301095", "createdAt": "2020-07-17T08:34:03Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "diffHunk": "@@ -18,23 +18,23 @@\n \n package org.apache.flink.table.planner.codegen\n \n+import java.util.TimeZone\n+\n+import org.apache.calcite.avatica.util.DateTimeUtils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyNTAzMA=="}, "originalCommit": {"oid": "ceb895be265bd445b9d36bfc52cf8018a508c333"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQyMTU5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyMzowN1rOGybszQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODo1NzowMFrOGzLKDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTgyMQ==", "bodyText": "In which case will we reach here?", "url": "https://github.com/apache/flink/pull/12900#discussion_r455535821", "createdAt": "2020-07-16T06:23:07Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java", "diffHunk": "@@ -249,7 +251,15 @@ public static DataFormatConverter getConverterForDataType(DataType originDataTyp\n \t\t\t\t\t\tDataTypes.INT().bridgedTo(Integer.class));\n \t\t\tcase ROW:\n \t\t\tcase STRUCTURED_TYPE:\n-\t\t\t\tCompositeType compositeType = (CompositeType) fromDataTypeToTypeInfo(dataType);\n+\t\t\t\tTypeInformation<?> asTypeInfo = fromDataTypeToTypeInfo(dataType);\n+\t\t\t\tif (asTypeInfo instanceof WrapperTypeInfo && clazz == RowData.class) {\n+\t\t\t\t\tLogicalType realLogicalType = ((WrapperTypeInfo<?>) asTypeInfo).toLogicalType();\n+\t\t\t\t\treturn new RowDataConverter(getFieldCount(realLogicalType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb895be265bd445b9d36bfc52cf8018a508c333"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMxMzM1OA==", "bodyText": "All cases that went through TypeInfoDataTypeConverter#fromDataTypeToTypeInfo e.g. the legacy sinks.", "url": "https://github.com/apache/flink/pull/12900#discussion_r456313358", "createdAt": "2020-07-17T08:57:00Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/data/util/DataFormatConverters.java", "diffHunk": "@@ -249,7 +251,15 @@ public static DataFormatConverter getConverterForDataType(DataType originDataTyp\n \t\t\t\t\t\tDataTypes.INT().bridgedTo(Integer.class));\n \t\t\tcase ROW:\n \t\t\tcase STRUCTURED_TYPE:\n-\t\t\t\tCompositeType compositeType = (CompositeType) fromDataTypeToTypeInfo(dataType);\n+\t\t\t\tTypeInformation<?> asTypeInfo = fromDataTypeToTypeInfo(dataType);\n+\t\t\t\tif (asTypeInfo instanceof WrapperTypeInfo && clazz == RowData.class) {\n+\t\t\t\t\tLogicalType realLogicalType = ((WrapperTypeInfo<?>) asTypeInfo).toLogicalType();\n+\t\t\t\t\treturn new RowDataConverter(getFieldCount(realLogicalType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNTgyMQ=="}, "originalCommit": {"oid": "ceb895be265bd445b9d36bfc52cf8018a508c333"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ0OTg3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjozMlrOGyb8eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMjozMlrOGyb8eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTgzMw==", "bodyText": "Keep to use DataType here?\n                DataTypes.INT().getLogicalType(),\n\t\tDataTypes.STRING().getLogicalType(),\n\t\tDataTypes.INT().getLogicalType(),\n\t\tDataTypes.STRING().getLogicalType()", "url": "https://github.com/apache/flink/pull/12900#discussion_r455539833", "createdAt": "2020-07-16T06:32:32Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinHarnessTest.java", "diffHunk": "@@ -75,18 +74,19 @@\n \tprivate static final int ASYNC_TIMEOUT_MS = 3000;\n \n \tprivate final TypeSerializer<RowData> inSerializer = new RowDataSerializer(\n-\t\tnew ExecutionConfig(),\n \t\tnew IntType(),\n \t\tnew VarCharType(VarCharType.MAX_LENGTH));\n \n-\tprivate final RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(new TypeInformation[]{\n-\t\tTypes.INT,\n-\t\tTypes.STRING,\n-\t\tTypes.INT,\n-\t\tTypes.STRING\n+\tprivate final RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(new LogicalType[]{\n+\t\tnew IntType(),\n+\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n+\t\tnew IntType(),\n+\t\tnew VarCharType(VarCharType.MAX_LENGTH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb895be265bd445b9d36bfc52cf8018a508c333"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4198, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}