{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDE2OTMy", "number": 12406, "title": " [FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived", "bodyText": "What is the purpose of the change\nThe race condition happens as following:\n\nCheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\nCheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\nWhen ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous one, we should ignore it to exit directly.\nBrief change log\n\nFix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\nRecyle the buffer when exception from ChannelStateWriter.addInputData\nFix the formatting of CheckpointBarrierUnaligner\n\nVerifying this change\n\nAdded CheckpointBarrierUnalignerTest#testBufferRecycleOnNotifyBufferReceivedException\nAdded CheckpointBarrierUnalignerTest#testConcurrentProcessBarrierAndNotifyBarrierReceived\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-05-29T10:20:01Z", "url": "https://github.com/apache/flink/pull/12406", "merged": true, "mergeCommit": {"oid": "64ca88ac989ee7525cb821670f293404b7b30d2d"}, "closed": true, "closedAt": "2020-06-01T08:38:55Z", "author": {"login": "zhijiangW"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmAT4NgH2gAyNDI1MDE2OTMyOjRjZjVlOGU3ZTg4NTVlZDk2Yjc3Y2VmMTZiNmY5NmM2NmVmN2VlZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcm8HSUABqjMzOTIxMDA0MTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4cf5e8e7e8855ed96b77cef16b6f96c66ef7eed5", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/4cf5e8e7e8855ed96b77cef16b6f96c66ef7eed5", "committedDate": "2020-05-29T10:56:55Z", "message": "[hotfix][checkpointing] Fix the formatting of CheckpointBarrierUnaligner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67af5b88a2032e6515d41c26586f2fba88cbcd0e", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/67af5b88a2032e6515d41c26586f2fba88cbcd0e", "committedDate": "2020-05-29T10:14:43Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly."}, "afterCommit": {"oid": "7f43de47342c79294e9e7b05c088b44e2112fe2e", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/7f43de47342c79294e9e7b05c088b44e2112fe2e", "committedDate": "2020-05-29T11:04:24Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f43de47342c79294e9e7b05c088b44e2112fe2e", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/7f43de47342c79294e9e7b05c088b44e2112fe2e", "committedDate": "2020-05-29T11:04:24Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly."}, "afterCommit": {"oid": "f8cd1eac843c85418434db3f82cc1c8f97de3392", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/f8cd1eac843c85418434db3f82cc1c8f97de3392", "committedDate": "2020-05-29T11:09:35Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8cd1eac843c85418434db3f82cc1c8f97de3392", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/f8cd1eac843c85418434db3f82cc1c8f97de3392", "committedDate": "2020-05-29T11:09:35Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly."}, "afterCommit": {"oid": "bee02498f028f38676813dde3b99d318ace084aa", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/bee02498f028f38676813dde3b99d318ace084aa", "committedDate": "2020-05-29T11:11:43Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODU3MTU4", "url": "https://github.com/apache/flink/pull/12406#pullrequestreview-420857158", "createdAt": "2020-05-29T11:07:23Z", "commit": {"oid": "4cf5e8e7e8855ed96b77cef16b6f96c66ef7eed5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMTowNzoyM1rOGcYbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1MzozNVrOGcbZkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxMzU2Nw==", "bodyText": "nit: isn't this comment still valid and worth keeping?", "url": "https://github.com/apache/flink/pull/12406#discussion_r432413567", "createdAt": "2020-05-29T11:07:23Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -164,33 +158,32 @@ public void processBarrier(\n \t\t\thasInflightBuffers[channelIndex] = false;\n \t\t\tnumBarrierConsumed++;\n \t\t}\n-\t\t// processBarrier is called from task thread and can actually happen before notifyBarrierReceived on empty\n-\t\t// buffer queues\n-\t\t// to avoid replicating any logic, we simply call notifyBarrierReceived here as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cf5e8e7e8855ed96b77cef16b6f96c66ef7eed5"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxNDU2Mw==", "bodyText": "nit: just drop the comment as it only adds words \"the\" and \"of\" to the variable name", "url": "https://github.com/apache/flink/pull/12406#discussion_r432414563", "createdAt": "2020-05-29T11:09:41Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -284,21 +280,18 @@ private int getFlattenedChannelIndex(InputChannelInfo channelInfo) {\n \t\t */\n \t\tprivate long currentReceivedCheckpointId = -1L;\n \n-\t\t/** The number of opened channels. */\n+\t\t/** The number of open channels. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cf5e8e7e8855ed96b77cef16b6f96c66ef7eed5"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MjIyNQ==", "bodyText": "I think this is not the best way to test this race condition. It's dubious to override a class that we want to test here (ValidatingCheckpointBarrierUnaligner). Also this is a very tight coupling and depending on the private implementation details, which assumes executeInTaskThread will be called only once. More over it brakes an assumption that mails should be executed in order.\nI think it would be much better to do in the following manner:\n\n\nstraighten up threading model a bit and do not enqueue any emails in CheckpointBarrierUnaligner#processBarrier call, as this is already happening inside mailbox thread. It introduces unnecessary possibility for the race conditions and makes our live so much more difficult in this test. Currently by going through mailbox in processBarrier we are avoiding a bit of code duplication/simplifing a bit notifyBarrierReceived method, in an exchange of bad threading model and actually IMO more complicated code. We should fix this either way.\n\n\npass an AbstractInvokable instance that would be using SteppingMailboxProcessor to implement org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable#executeInTaskThread\n\n\ninside the testConcurrentProcessBarrierAndNotifyBarrierReceived test do the following sequence:\n\n\nhandler.getThreadSafeUnaligner().notifyBarrierReceived(buildCheckpointBarrier(0), channelInfo); // (a)\nhandler.processBarrier(buildCheckpointBarrier(1), 0); // (b)\nsteppingMailboxExecutor.runMailboxStep(); // (c)\n\n(c) would execute mailbox action from (a).\nThis would test the race condition without braking any contracts (like out of order mail execution) and without overriding CheckpointBarrierUnaligner.", "url": "https://github.com/apache/flink/pull/12406#discussion_r432462225", "createdAt": "2020-05-29T12:53:35Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java", "diffHunk": "@@ -639,4 +673,79 @@ public long getLastCanceledCheckpointId() {\n \t\t\treturn lastCanceledCheckpointId;\n \t\t}\n \t}\n+\n+\t/**\n+\t * Specific {@link AbstractInvokable} implementation to record and validate which checkpoint\n+\t * id is executed and how many checkpoints are executed.\n+\t */\n+\tprivate static final class ValidatingCheckpointInvokable extends AbstractInvokable {\n+\n+\t\tprivate long expectedCheckpointId;\n+\n+\t\tprivate int totalNumCheckpoints;\n+\n+\t\tValidatingCheckpointInvokable() {\n+\t\t\tsuper(new DummyEnvironment(\"test\", 1, 0));\n+\t\t}\n+\n+\t\tpublic void invoke() {\n+\t\t\tthrow new UnsupportedOperationException();\n+\t\t}\n+\n+\t\tpublic void triggerCheckpointOnBarrier(\n+\t\t\t\tCheckpointMetaData checkpointMetaData,\n+\t\t\t\tCheckpointOptions checkpointOptions,\n+\t\t\t\tCheckpointMetrics checkpointMetrics) {\n+\t\t\texpectedCheckpointId = checkpointMetaData.getCheckpointId();\n+\t\t\ttotalNumCheckpoints++;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic <E extends Exception> void executeInTaskThread(\n+\t\t\t\tThrowingRunnable<E> runnable,\n+\t\t\t\tString descriptionFormat,\n+\t\t\t\tObject... descriptionArgs) throws E {\n+\t\t\trunnable.run();\n+\t\t}\n+\n+\t\tlong getTriggeredCheckpointId() {\n+\t\t\treturn expectedCheckpointId;\n+\t\t}\n+\n+\t\tint getTotalTriggeredCheckpoints() {\n+\t\t\treturn totalNumCheckpoints;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Specific {@link CheckpointBarrierUnaligner} implementation to mock the scenario that the later triggered\n+\t * checkpoint executes before the preceding triggered checkpoint.\n+\t */\n+\tprivate static final class ValidatingCheckpointBarrierUnaligner extends CheckpointBarrierUnaligner {\n+\n+\t\tprivate ThrowingRunnable waitingRunnable;\n+\t\tprivate boolean firstRunnable = true;\n+\n+\t\tValidatingCheckpointBarrierUnaligner(AbstractInvokable invokable) {\n+\t\t\tsuper(\n+\t\t\t\tnew int[]{1},\n+\t\t\t\tnew ChannelStateWriter.NoOpChannelStateWriter(),\n+\t\t\t\t\"test\",\n+\t\t\t\tinvokable);\n+\t\t}\n+\n+\t\t@Override\n+\t\tprotected <E extends Exception> void executeInTaskThread(\n+\t\t\t\tThrowingRunnable<E> runnable,\n+\t\t\t\tString descriptionFormat,\n+\t\t\t\tObject... descriptionArgs) throws E {\n+\t\t\tif (firstRunnable) {\n+\t\t\t\twaitingRunnable = runnable;\n+\t\t\t\tfirstRunnable = false;\n+\t\t\t} else {\n+\t\t\t\tsuper.executeInTaskThread(runnable, \"checkpoint\");\n+\t\t\t\tsuper.executeInTaskThread(waitingRunnable, \"checkpoint\");\n+\t\t\t}\n+\t\t}\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee02498f028f38676813dde3b99d318ace084aa"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNjYzMzk3", "url": "https://github.com/apache/flink/pull/12406#pullrequestreview-421663397", "createdAt": "2020-06-01T08:06:18Z", "commit": {"oid": "b47a7645fd5636a98050231522a076537576e9a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eb3132c8bab5097d5f7f0f02760e109122915ea", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/1eb3132c8bab5097d5f7f0f02760e109122915ea", "committedDate": "2020-06-01T08:35:34Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly.\n\nThis closes #12406."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b47a7645fd5636a98050231522a076537576e9a8", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/b47a7645fd5636a98050231522a076537576e9a8", "committedDate": "2020-06-01T03:53:22Z", "message": "[fixup] address commets"}, "afterCommit": {"oid": "1eb3132c8bab5097d5f7f0f02760e109122915ea", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/1eb3132c8bab5097d5f7f0f02760e109122915ea", "committedDate": "2020-06-01T08:35:34Z", "message": "[FLINK-17994][checkpointing] Fix the race condition between CheckpointBarrierUnaligner#processBarrier and #notifyBarrierReceived\n\nThe race condition happens as following:\n1. CheckpointBarrierUnaligner#notifyBarrierReceived triggers an async checkpoint(ch1) in mailbox by netty thread.\n2. CheckpointBarrierUnaligner#processBarrier also triggers a sync checkpoint(ch2) by task thread and executes immediately.\n3. When ch1 is taken from mailbox by task thread to execute, it will cause illegal argument exception because it is smaller than the previous executed ch2.\n\nFor async checkpoint action, before it is actual executing, we can compare its id with previous executed checkpoint id. If it is not larger than the previous\none, we should ignore it to exit directly.\n\nThis closes #12406."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4572, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}