{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODM5NTA5", "number": 11382, "title": "[FLINK-16554][task] split StreamTask", "bodyText": "What is the purpose of the change\nStreamTask is currently 1400+ LOC.\nWe can cut it down to 1100+ by simply extracting these static classes into separate files:\nCheckpointingOperation\nAsyncCheckpointRunnable\nThis will also allow changing some checkpointing logic without touching StreamTask.\nNOTE: The scope of the refactoring is intentionally small (because it's a sensitive part of the system).\nNOTE: some cleanup is in separate commits to ease reviewing (could be squashed before -merging)\nBrief change log\n\nextract CheckpointingOperation and AsyncCheckpointRunnable into separate files\ndon't pass StreamTask as a parameter\n\nVerifying this change\nThis change is a trivial rework without any test coverage.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-03-11T18:00:07Z", "url": "https://github.com/apache/flink/pull/11382", "merged": true, "mergeCommit": {"oid": "3b99f7e4d769f6e2b6e9fd8e36a542e063d6c369"}, "closed": true, "closedAt": "2020-03-13T12:58:28Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNIsw9AFqTM3NDA0NTUzOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNMpKRgBqjMxMjU5MzcxNDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDQ1NTM4", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374045538", "createdAt": "2020-03-13T04:35:13Z", "commit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNToxM1rOF13ZMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNToxM1rOF13ZMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjQxOA==", "bodyText": "nit: I guess we do not need this annotation. It can not be defined as private even if no tests.", "url": "https://github.com/apache/flink/pull/11382#discussion_r392026418", "createdAt": "2020-03-13T04:35:13Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.core.fs.CloseableRegistry;\n+import org.apache.flink.core.fs.FileSystemSafetyNet;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.TaskStateSnapshot;\n+import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFinalizer;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFutures;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.io.Closeable;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * This runnable executes the asynchronous parts of all involved backend snapshots for the subtask.\n+ */\n+@VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDQ1NTg3", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374045587", "createdAt": "2020-03-13T04:35:27Z", "commit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNToyN1rOF13ZZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNToyN1rOF13ZZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjQ2OA==", "bodyText": "nit: remove this for consistency.", "url": "https://github.com/apache/flink/pull/11382#discussion_r392026468", "createdAt": "2020-03-13T04:35:27Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.core.fs.CloseableRegistry;\n+import org.apache.flink.core.fs.FileSystemSafetyNet;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.TaskStateSnapshot;\n+import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFinalizer;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFutures;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.io.Closeable;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * This runnable executes the asynchronous parts of all involved backend snapshots for the subtask.\n+ */\n+@VisibleForTesting\n+final class AsyncCheckpointRunnable implements Runnable, Closeable {\n+\n+\tprivate final String taskName;\n+\tprivate final CloseableRegistry closeableRegistry;\n+\tprivate final Environment taskEnvironment;\n+\n+\tprivate enum AsyncCheckpointState {\n+\t\tRUNNING,\n+\t\tDISCARDED,\n+\t\tCOMPLETED\n+\t}\n+\n+\tprivate final AsyncExceptionHandler asyncExceptionHandler;\n+\tprivate final Map<OperatorID, OperatorSnapshotFutures> operatorSnapshotsInProgress;\n+\tprivate final CheckpointMetaData checkpointMetaData;\n+\tprivate final CheckpointMetrics checkpointMetrics;\n+\tprivate final long asyncStartNanos;\n+\tprivate final AtomicReference<AsyncCheckpointState> asyncCheckpointState = new AtomicReference<>(AsyncCheckpointState.RUNNING);\n+\n+\tAsyncCheckpointRunnable(\n+\t\t\tMap<OperatorID, OperatorSnapshotFutures> operatorSnapshotsInProgress,\n+\t\t\tCheckpointMetaData checkpointMetaData,\n+\t\t\tCheckpointMetrics checkpointMetrics,\n+\t\t\tlong asyncStartNanos,\n+\t\t\tString taskName,\n+\t\t\tCloseableRegistry closeableRegistry,\n+\t\t\tEnvironment taskEnvironment,\n+\t\t\tAsyncExceptionHandler asyncExceptionHandler) {\n+\n+\t\tthis.operatorSnapshotsInProgress = checkNotNull(operatorSnapshotsInProgress);\n+\t\tthis.checkpointMetaData = checkNotNull(checkpointMetaData);\n+\t\tthis.checkpointMetrics = checkNotNull(checkpointMetrics);\n+\t\tthis.asyncStartNanos = asyncStartNanos;\n+\t\tthis.taskName = checkNotNull(taskName);\n+\t\tthis.closeableRegistry = checkNotNull(closeableRegistry);\n+\t\tthis.taskEnvironment = checkNotNull(taskEnvironment);\n+\t\tthis.asyncExceptionHandler = checkNotNull(asyncExceptionHandler);\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\tFileSystemSafetyNet.initializeSafetyNetForThread();\n+\t\ttry {\n+\t\t\tcloseableRegistry.registerCloseable(this);\n+\n+\t\t\tTaskStateSnapshot jobManagerTaskOperatorSubtaskStates = new TaskStateSnapshot(operatorSnapshotsInProgress.size());\n+\t\t\tTaskStateSnapshot localTaskOperatorSubtaskStates = new TaskStateSnapshot(operatorSnapshotsInProgress.size());\n+\n+\t\t\tfor (Map.Entry<OperatorID, OperatorSnapshotFutures> entry : operatorSnapshotsInProgress.entrySet()) {\n+\n+\t\t\t\tOperatorID operatorID = entry.getKey();\n+\t\t\t\tOperatorSnapshotFutures snapshotInProgress = entry.getValue();\n+\n+\t\t\t\t// finalize the async part of all by executing all snapshot runnables\n+\t\t\t\tOperatorSnapshotFinalizer finalizedSnapshots =\n+\t\t\t\t\tnew OperatorSnapshotFinalizer(snapshotInProgress);\n+\n+\t\t\t\tjobManagerTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n+\t\t\t\t\toperatorID,\n+\t\t\t\t\tfinalizedSnapshots.getJobManagerOwnedState());\n+\n+\t\t\t\tlocalTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n+\t\t\t\t\toperatorID,\n+\t\t\t\t\tfinalizedSnapshots.getTaskLocalState());\n+\t\t\t}\n+\n+\t\t\tfinal long asyncEndNanos = System.nanoTime();\n+\t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncStartNanos) / 1_000_000L;\n+\n+\t\t\tcheckpointMetrics.setAsyncDurationMillis(asyncDurationMillis);\n+\n+\t\t\tif (asyncCheckpointState.compareAndSet(AsyncCheckpointState.RUNNING, AsyncCheckpointState.COMPLETED)) {\n+\n+\t\t\t\treportCompletedSnapshotStates(\n+\t\t\t\t\tjobManagerTaskOperatorSubtaskStates,\n+\t\t\t\t\tlocalTaskOperatorSubtaskStates,\n+\t\t\t\t\tasyncDurationMillis);\n+\n+\t\t\t} else {\n+\t\t\t\tStreamTask.LOG.debug(\"{} - asynchronous part of checkpoint {} could not be completed because it was closed before.\",\n+\t\t\t\t\ttaskName,\n+\t\t\t\t\tcheckpointMetaData.getCheckpointId());\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tif (StreamTask.LOG.isDebugEnabled()) {\n+\t\t\t\tStreamTask.LOG.debug(\"{} - asynchronous part of checkpoint {} could not be completed.\",\n+\t\t\t\t\ttaskName,\n+\t\t\t\t\tcheckpointMetaData.getCheckpointId(),\n+\t\t\t\t\te);\n+\t\t\t}\n+\t\t\thandleExecutionException(e);\n+\t\t} finally {\n+\t\t\tcloseableRegistry.unregisterCloseable(this);\n+\t\t\tFileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();\n+\t\t}\n+\t}\n+\n+\tprivate void reportCompletedSnapshotStates(\n+\t\tTaskStateSnapshot acknowledgedTaskStateSnapshot,\n+\t\tTaskStateSnapshot localTaskStateSnapshot,\n+\t\tlong asyncDurationMillis) {\n+\n+\t\tboolean hasAckState = acknowledgedTaskStateSnapshot.hasState();\n+\t\tboolean hasLocalState = localTaskStateSnapshot.hasState();\n+\n+\t\tPreconditions.checkState(hasAckState || !hasLocalState,\n+\t\t\t\"Found cached state but no corresponding primary state is reported to the job \" +\n+\t\t\t\t\"manager. This indicates a problem.\");\n+\n+\t\t// we signal stateless tasks by reporting null, so that there are no attempts to assign empty state\n+\t\t// to stateless tasks on restore. This enables simple job modifications that only concern\n+\t\t// stateless without the need to assign them uids to match their (always empty) states.\n+\t\tthis.taskEnvironment.getTaskStateManager().reportTaskStateSnapshots(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDQ1Njg1", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374045685", "createdAt": "2020-03-13T04:35:51Z", "commit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNTo1MVrOF13ZxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNTo1MVrOF13ZxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjU2NQ==", "bodyText": "Also checkNotNull for other arguments?", "url": "https://github.com/apache/flink/pull/11382#discussion_r392026565", "createdAt": "2020-03-13T04:35:51Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/CheckpointingOperation.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.core.fs.CloseableRegistry;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.state.CheckpointStreamFactory;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFutures;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.ExecutorService;\n+\n+final class CheckpointingOperation {\n+\n+\tstatic void execute(\n+\t\t\tCheckpointMetaData checkpointMetaData,\n+\t\t\tCheckpointOptions checkpointOptions,\n+\t\t\tCheckpointMetrics checkpointMetrics,\n+\t\t\tCheckpointStreamFactory storageLocation,\n+\t\t\tOperatorChain<?, ?> operatorChain,\n+\t\t\tString taskName,\n+\t\t\tCloseableRegistry closeableRegistry,\n+\t\t\tExecutorService threadPool,\n+\t\t\tEnvironment environment,\n+\t\t\tAsyncExceptionHandler asyncExceptionHandler) throws Exception {\n+\n+\t\tPreconditions.checkNotNull(checkpointMetaData);\n+\t\tPreconditions.checkNotNull(checkpointOptions);\n+\t\tPreconditions.checkNotNull(checkpointMetrics);\n+\t\tPreconditions.checkNotNull(storageLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDQ1NzIx", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374045721", "createdAt": "2020-03-13T04:36:01Z", "commit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNjowMVrOF13Z5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNjowMVrOF13Z5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjU5Ng==", "bodyText": "nit: also make checkpointMetaData in separate line?", "url": "https://github.com/apache/flink/pull/11382#discussion_r392026596", "createdAt": "2020-03-13T04:36:01Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -928,14 +919,16 @@ private void checkpointState(\n \t\t\t\tcheckpointMetaData.getCheckpointId(),\n \t\t\t\tcheckpointOptions.getTargetLocation());\n \n-\t\tCheckpointingOperation checkpointingOperation = new CheckpointingOperation(\n-\t\t\tthis,\n-\t\t\tcheckpointMetaData,\n+\t\tCheckpointingOperation.execute(checkpointMetaData,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDQ2MDc5", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374046079", "createdAt": "2020-03-13T04:37:32Z", "commit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNzozMlrOF13a5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDozNzozMlrOF13a5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyNjg1NA==", "bodyText": "nit: split line for every field.", "url": "https://github.com/apache/flink/pull/11382#discussion_r392026854", "createdAt": "2020-03-13T04:37:32Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/LocalStateForwardingTest.java", "diffHunk": "@@ -105,13 +105,12 @@ public void testReportingFromSnapshotToTaskStateManager() {\n \t\tOperatorID operatorID = new OperatorID();\n \t\tsnapshots.put(operatorID, osFuture);\n \n-\t\tStreamTask.AsyncCheckpointRunnable checkpointRunnable =\n-\t\t\tnew StreamTask.AsyncCheckpointRunnable(\n-\t\t\t\ttestStreamTask,\n+\t\tAsyncCheckpointRunnable checkpointRunnable =\n+\t\t\tnew AsyncCheckpointRunnable(\n \t\t\t\tsnapshots,\n \t\t\t\tcheckpointMetaData,\n \t\t\t\tcheckpointMetrics,\n-\t\t\t\t0L);\n+\t\t\t\t0L, testStreamTask.getName(), testStreamTask.getCancelables(), testStreamTask.getEnvironment(), testStreamTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDQ2NTc3", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374046577", "createdAt": "2020-03-13T04:39:56Z", "commit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55525e050ada84dcd0e1ea935dffe3b7f09faa42", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/55525e050ada84dcd0e1ea935dffe3b7f09faa42", "committedDate": "2020-03-11T18:15:34Z", "message": "[FLINK-16554][task][refactoring] register AsyncCheckpointRunnable Closeable in its run() method"}, "afterCommit": {"oid": "823cf79209f3ee0b6a38f9a185cdd5e506f3c6ea", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/823cf79209f3ee0b6a38f9a185cdd5e506f3c6ea", "committedDate": "2020-03-13T04:54:42Z", "message": "[FLINK-16554][task][refactoring] split StreamTask\n\n1. Extract static CheckpointingOperation and AsyncCheckpointRunnable\nfrom StreamTask to separate files to reduce complexity.\nNo changes in logic or structure, just a simple refactoring.\n\n2. Cleanup CheckpointingOperation and AsyncCheckpointRunnable:\nDon't pass StreamTask as an argument\n\n3. move registering AsyncCheckpointRunnable Closeable to its run() method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDYwOTc3", "url": "https://github.com/apache/flink/pull/11382#pullrequestreview-374060977", "createdAt": "2020-03-13T05:41:59Z", "commit": {"oid": "823cf79209f3ee0b6a38f9a185cdd5e506f3c6ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNTo0MTo1OVrOF14L2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNTo0MTo1OVrOF14L2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzOTM4Ng==", "bodyText": "Shall we pass the logger from outside instead of expose it as public/(default)?", "url": "https://github.com/apache/flink/pull/11382#discussion_r392039386", "createdAt": "2020-03-13T05:41:59Z", "author": {"login": "tisonkun"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -0,0 +1,252 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.core.fs.CloseableRegistry;\n+import org.apache.flink.core.fs.FileSystemSafetyNet;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.TaskStateSnapshot;\n+import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFinalizer;\n+import org.apache.flink.streaming.api.operators.OperatorSnapshotFutures;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.io.Closeable;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * This runnable executes the asynchronous parts of all involved backend snapshots for the subtask.\n+ */\n+final class AsyncCheckpointRunnable implements Runnable, Closeable {\n+\n+\tprivate final String taskName;\n+\tprivate final CloseableRegistry closeableRegistry;\n+\tprivate final Environment taskEnvironment;\n+\n+\tprivate enum AsyncCheckpointState {\n+\t\tRUNNING,\n+\t\tDISCARDED,\n+\t\tCOMPLETED\n+\t}\n+\n+\tprivate final AsyncExceptionHandler asyncExceptionHandler;\n+\tprivate final Map<OperatorID, OperatorSnapshotFutures> operatorSnapshotsInProgress;\n+\tprivate final CheckpointMetaData checkpointMetaData;\n+\tprivate final CheckpointMetrics checkpointMetrics;\n+\tprivate final long asyncStartNanos;\n+\tprivate final AtomicReference<AsyncCheckpointState> asyncCheckpointState = new AtomicReference<>(AsyncCheckpointState.RUNNING);\n+\n+\tAsyncCheckpointRunnable(\n+\t\t\tMap<OperatorID, OperatorSnapshotFutures> operatorSnapshotsInProgress,\n+\t\t\tCheckpointMetaData checkpointMetaData,\n+\t\t\tCheckpointMetrics checkpointMetrics,\n+\t\t\tlong asyncStartNanos,\n+\t\t\tString taskName,\n+\t\t\tCloseableRegistry closeableRegistry,\n+\t\t\tEnvironment taskEnvironment,\n+\t\t\tAsyncExceptionHandler asyncExceptionHandler) {\n+\n+\t\tthis.operatorSnapshotsInProgress = checkNotNull(operatorSnapshotsInProgress);\n+\t\tthis.checkpointMetaData = checkNotNull(checkpointMetaData);\n+\t\tthis.checkpointMetrics = checkNotNull(checkpointMetrics);\n+\t\tthis.asyncStartNanos = asyncStartNanos;\n+\t\tthis.taskName = checkNotNull(taskName);\n+\t\tthis.closeableRegistry = checkNotNull(closeableRegistry);\n+\t\tthis.taskEnvironment = checkNotNull(taskEnvironment);\n+\t\tthis.asyncExceptionHandler = checkNotNull(asyncExceptionHandler);\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\tFileSystemSafetyNet.initializeSafetyNetForThread();\n+\t\ttry {\n+\t\t\tcloseableRegistry.registerCloseable(this);\n+\n+\t\t\tTaskStateSnapshot jobManagerTaskOperatorSubtaskStates = new TaskStateSnapshot(operatorSnapshotsInProgress.size());\n+\t\t\tTaskStateSnapshot localTaskOperatorSubtaskStates = new TaskStateSnapshot(operatorSnapshotsInProgress.size());\n+\n+\t\t\tfor (Map.Entry<OperatorID, OperatorSnapshotFutures> entry : operatorSnapshotsInProgress.entrySet()) {\n+\n+\t\t\t\tOperatorID operatorID = entry.getKey();\n+\t\t\t\tOperatorSnapshotFutures snapshotInProgress = entry.getValue();\n+\n+\t\t\t\t// finalize the async part of all by executing all snapshot runnables\n+\t\t\t\tOperatorSnapshotFinalizer finalizedSnapshots =\n+\t\t\t\t\tnew OperatorSnapshotFinalizer(snapshotInProgress);\n+\n+\t\t\t\tjobManagerTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n+\t\t\t\t\toperatorID,\n+\t\t\t\t\tfinalizedSnapshots.getJobManagerOwnedState());\n+\n+\t\t\t\tlocalTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n+\t\t\t\t\toperatorID,\n+\t\t\t\t\tfinalizedSnapshots.getTaskLocalState());\n+\t\t\t}\n+\n+\t\t\tfinal long asyncEndNanos = System.nanoTime();\n+\t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncStartNanos) / 1_000_000L;\n+\n+\t\t\tcheckpointMetrics.setAsyncDurationMillis(asyncDurationMillis);\n+\n+\t\t\tif (asyncCheckpointState.compareAndSet(AsyncCheckpointState.RUNNING, AsyncCheckpointState.COMPLETED)) {\n+\n+\t\t\t\treportCompletedSnapshotStates(\n+\t\t\t\t\tjobManagerTaskOperatorSubtaskStates,\n+\t\t\t\t\tlocalTaskOperatorSubtaskStates,\n+\t\t\t\t\tasyncDurationMillis);\n+\n+\t\t\t} else {\n+\t\t\t\tStreamTask.LOG.debug(\"{} - asynchronous part of checkpoint {} could not be completed because it was closed before.\",\n+\t\t\t\t\ttaskName,\n+\t\t\t\t\tcheckpointMetaData.getCheckpointId());\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tif (StreamTask.LOG.isDebugEnabled()) {\n+\t\t\t\tStreamTask.LOG.debug(\"{} - asynchronous part of checkpoint {} could not be completed.\",\n+\t\t\t\t\ttaskName,\n+\t\t\t\t\tcheckpointMetaData.getCheckpointId(),\n+\t\t\t\t\te);\n+\t\t\t}\n+\t\t\thandleExecutionException(e);\n+\t\t} finally {\n+\t\t\tcloseableRegistry.unregisterCloseable(this);\n+\t\t\tFileSystemSafetyNet.closeSafetyNetAndGuardedResourcesForThread();\n+\t\t}\n+\t}\n+\n+\tprivate void reportCompletedSnapshotStates(\n+\t\tTaskStateSnapshot acknowledgedTaskStateSnapshot,\n+\t\tTaskStateSnapshot localTaskStateSnapshot,\n+\t\tlong asyncDurationMillis) {\n+\n+\t\tboolean hasAckState = acknowledgedTaskStateSnapshot.hasState();\n+\t\tboolean hasLocalState = localTaskStateSnapshot.hasState();\n+\n+\t\tPreconditions.checkState(hasAckState || !hasLocalState,\n+\t\t\t\"Found cached state but no corresponding primary state is reported to the job \" +\n+\t\t\t\t\"manager. This indicates a problem.\");\n+\n+\t\t// we signal stateless tasks by reporting null, so that there are no attempts to assign empty state\n+\t\t// to stateless tasks on restore. This enables simple job modifications that only concern\n+\t\t// stateless without the need to assign them uids to match their (always empty) states.\n+\t\ttaskEnvironment.getTaskStateManager().reportTaskStateSnapshots(\n+\t\t\tcheckpointMetaData,\n+\t\t\tcheckpointMetrics,\n+\t\t\thasAckState ? acknowledgedTaskStateSnapshot : null,\n+\t\t\thasLocalState ? localTaskStateSnapshot : null);\n+\n+\t\tStreamTask.LOG.debug(\"{} - finished asynchronous part of checkpoint {}. Asynchronous duration: {} ms\",\n+\t\t\ttaskName, checkpointMetaData.getCheckpointId(), asyncDurationMillis);\n+\n+\t\tStreamTask.LOG.trace(\"{} - reported the following states in snapshot for checkpoint {}: {}.\",\n+\t\t\ttaskName, checkpointMetaData.getCheckpointId(), acknowledgedTaskStateSnapshot);\n+\t}\n+\n+\tprivate void handleExecutionException(Exception e) {\n+\n+\t\tboolean didCleanup = false;\n+\t\tAsyncCheckpointState currentState = asyncCheckpointState.get();\n+\n+\t\twhile (AsyncCheckpointState.DISCARDED != currentState) {\n+\n+\t\t\tif (asyncCheckpointState.compareAndSet(currentState, AsyncCheckpointState.DISCARDED)) {\n+\n+\t\t\t\tdidCleanup = true;\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tcleanup();\n+\t\t\t\t} catch (Exception cleanupException) {\n+\t\t\t\t\te.addSuppressed(cleanupException);\n+\t\t\t\t}\n+\n+\t\t\t\tException checkpointException = new Exception(\n+\t\t\t\t\t\"Could not materialize checkpoint \" + checkpointMetaData.getCheckpointId() + \" for operator \" +\n+\t\t\t\t\t\ttaskName + '.',\n+\t\t\t\t\te);\n+\n+\t\t\t\t// We only report the exception for the original cause of fail and cleanup.\n+\t\t\t\t// Otherwise this followup exception could race the original exception in failing the task.\n+\t\t\t\ttry {\n+\t\t\t\t\ttaskEnvironment.declineCheckpoint(checkpointMetaData.getCheckpointId(), checkpointException);\n+\t\t\t\t} catch (Exception unhandled) {\n+\t\t\t\t\tAsynchronousException asyncException = new AsynchronousException(unhandled);\n+\t\t\t\t\tasyncExceptionHandler.handleAsyncException(\"Failure in asynchronous checkpoint materialization\", asyncException);\n+\t\t\t\t}\n+\n+\t\t\t\tcurrentState = AsyncCheckpointState.DISCARDED;\n+\t\t\t} else {\n+\t\t\t\tcurrentState = asyncCheckpointState.get();\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (!didCleanup) {\n+\t\t\tStreamTask.LOG.trace(\"Caught followup exception from a failed checkpoint thread. This can be ignored.\", e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void close() {\n+\t\tif (asyncCheckpointState.compareAndSet(AsyncCheckpointState.RUNNING, AsyncCheckpointState.DISCARDED)) {\n+\n+\t\t\ttry {\n+\t\t\t\tcleanup();\n+\t\t\t} catch (Exception cleanupException) {\n+\t\t\t\tStreamTask.LOG.warn(\"Could not properly clean up the async checkpoint runnable.\", cleanupException);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tlogFailedCleanupAttempt();\n+\t\t}\n+\t}\n+\n+\tprivate void cleanup() throws Exception {\n+\t\tStreamTask.LOG.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823cf79209f3ee0b6a38f9a185cdd5e506f3c6ea"}, "originalPosition": 223}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b898115d9c7e949cc6751b911098e9b2ee0f295", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/3b898115d9c7e949cc6751b911098e9b2ee0f295", "committedDate": "2020-03-13T08:29:53Z", "message": "[FLINK-16554][task][refactoring] split StreamTask\n\n1. Extract static CheckpointingOperation and AsyncCheckpointRunnable\nfrom StreamTask to separate files to reduce complexity.\nNo changes in logic or structure, just a simple refactoring.\n\n2. Cleanup CheckpointingOperation and AsyncCheckpointRunnable:\nDon't pass StreamTask as an argument\n\n3. move registering AsyncCheckpointRunnable Closeable to its run() method"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "823cf79209f3ee0b6a38f9a185cdd5e506f3c6ea", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/823cf79209f3ee0b6a38f9a185cdd5e506f3c6ea", "committedDate": "2020-03-13T04:54:42Z", "message": "[FLINK-16554][task][refactoring] split StreamTask\n\n1. Extract static CheckpointingOperation and AsyncCheckpointRunnable\nfrom StreamTask to separate files to reduce complexity.\nNo changes in logic or structure, just a simple refactoring.\n\n2. Cleanup CheckpointingOperation and AsyncCheckpointRunnable:\nDon't pass StreamTask as an argument\n\n3. move registering AsyncCheckpointRunnable Closeable to its run() method"}, "afterCommit": {"oid": "3b898115d9c7e949cc6751b911098e9b2ee0f295", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/3b898115d9c7e949cc6751b911098e9b2ee0f295", "committedDate": "2020-03-13T08:29:53Z", "message": "[FLINK-16554][task][refactoring] split StreamTask\n\n1. Extract static CheckpointingOperation and AsyncCheckpointRunnable\nfrom StreamTask to separate files to reduce complexity.\nNo changes in logic or structure, just a simple refactoring.\n\n2. Cleanup CheckpointingOperation and AsyncCheckpointRunnable:\nDon't pass StreamTask as an argument\n\n3. move registering AsyncCheckpointRunnable Closeable to its run() method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2707, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}