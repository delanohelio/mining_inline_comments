{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NTU3OTY0", "number": 12017, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1NDozNVrOD614Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1NzozOFrOD615CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI2NzM4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1NDozNVrOGS5SnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODowODoyNlrOGS5XkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NjIwNQ==", "bodyText": "Can client do more things to include upper couple of lines?", "url": "https://github.com/apache/flink/pull/12017#discussion_r422466205", "createdAt": "2020-05-09T07:54:35Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "diffHunk": "@@ -374,8 +375,30 @@ public void createTable(ObjectPath tablePath, CatalogBaseTable table, boolean ig\n \n \t\tTable hiveTable = instantiateHiveTable(tablePath, table);\n \n+\t\tUniqueConstraint pkConstraint = null;\n+\t\tList<String> notNullCols = new ArrayList<>();\n+\t\tboolean isGeneric = isGenericForCreate(table.getOptions());\n+\t\tif (!isGeneric) {\n+\t\t\tpkConstraint = table.getSchema().getPrimaryKey().orElse(null);\n+\t\t\tfor (int i = 0; i < table.getSchema().getFieldDataTypes().length; i++) {\n+\t\t\t\tif (!table.getSchema().getFieldDataTypes()[i].getLogicalType().isNullable()) {\n+\t\t\t\t\tnotNullCols.add(table.getSchema().getFieldNames()[i]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\ttry {\n-\t\t\tclient.createTable(hiveTable);\n+\t\t\tif (pkConstraint != null || !notNullCols.isEmpty()) {\n+\t\t\t\t// for now we just create constraints that are DISABLE, NOVALIDATE, RELY\n+\t\t\t\tByte[] pkTraits = new Byte[pkConstraint == null ? 0 : pkConstraint.getColumns().size()];\n+\t\t\t\tArrays.fill(pkTraits, HiveTableUtil.relyConstraint((byte) 0));\n+\t\t\t\tByte[] nnTraits = new Byte[notNullCols.size()];\n+\t\t\t\tArrays.fill(nnTraits, HiveTableUtil.relyConstraint((byte) 0));\n+\t\t\t\tclient.createTableWithConstraints(hiveTable, hiveConf,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e31740d8c7693906aae2ace9336e943a7ad2e186"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NzQ3Mg==", "bodyText": "The client is meant to be just a wrapper of IMetaStoreClient. So I think it's more natural to keep such logic in HiveCatalog. We can add util method if that logic has to be repeated somewhere else.", "url": "https://github.com/apache/flink/pull/12017#discussion_r422467472", "createdAt": "2020-05-09T08:08:26Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "diffHunk": "@@ -374,8 +375,30 @@ public void createTable(ObjectPath tablePath, CatalogBaseTable table, boolean ig\n \n \t\tTable hiveTable = instantiateHiveTable(tablePath, table);\n \n+\t\tUniqueConstraint pkConstraint = null;\n+\t\tList<String> notNullCols = new ArrayList<>();\n+\t\tboolean isGeneric = isGenericForCreate(table.getOptions());\n+\t\tif (!isGeneric) {\n+\t\t\tpkConstraint = table.getSchema().getPrimaryKey().orElse(null);\n+\t\t\tfor (int i = 0; i < table.getSchema().getFieldDataTypes().length; i++) {\n+\t\t\t\tif (!table.getSchema().getFieldDataTypes()[i].getLogicalType().isNullable()) {\n+\t\t\t\t\tnotNullCols.add(table.getSchema().getFieldNames()[i]);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n \t\ttry {\n-\t\t\tclient.createTable(hiveTable);\n+\t\t\tif (pkConstraint != null || !notNullCols.isEmpty()) {\n+\t\t\t\t// for now we just create constraints that are DISABLE, NOVALIDATE, RELY\n+\t\t\t\tByte[] pkTraits = new Byte[pkConstraint == null ? 0 : pkConstraint.getColumns().size()];\n+\t\t\t\tArrays.fill(pkTraits, HiveTableUtil.relyConstraint((byte) 0));\n+\t\t\t\tByte[] nnTraits = new Byte[notNullCols.size()];\n+\t\t\t\tArrays.fill(nnTraits, HiveTableUtil.relyConstraint((byte) 0));\n+\t\t\t\tclient.createTableWithConstraints(hiveTable, hiveConf,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NjIwNQ=="}, "originalCommit": {"oid": "e31740d8c7693906aae2ace9336e943a7ad2e186"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI2OTUzOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/client/HiveShimV310.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1NzozOFrOGS5Tvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNzo1NzozOFrOGS5Tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NjQ5NQ==", "bodyText": "Too many parameters should be one parameter one line, both call and declaration are like this.", "url": "https://github.com/apache/flink/pull/12017#discussion_r422466495", "createdAt": "2020-05-09T07:57:38Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/client/HiveShimV310.java", "diffHunk": "@@ -239,4 +241,54 @@ public Writable hivePrimitiveToWritable(Object value) {\n \t\t}\n \t\tthrow new FlinkHiveException(\"Unsupported primitive java value of class \" + value.getClass().getName());\n \t}\n+\n+\t@Override\n+\tpublic void createTableWithConstraints(IMetaStoreClient client, Table table, Configuration conf,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e31740d8c7693906aae2ace9336e943a7ad2e186"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1527, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}