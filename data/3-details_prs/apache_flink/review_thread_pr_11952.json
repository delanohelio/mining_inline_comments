{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDk3NDM3", "number": 11952, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODowNDowMFrOD4JoAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODozOToyNFrOD4KWBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjA0NTQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODowNDowMVrOGO0gRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1Mzo0NlrOGO7p-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MzQ3OA==", "bodyText": "vertex.getOperatorIdPairList().getOperatorIds sounds a bit repetitive to me.\nHow about vertex.getOperatorIDs().getGeneratedIDs()?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418193478", "createdAt": "2020-04-30T18:04:01Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -371,7 +371,7 @@ public TaskAcknowledgeResult acknowledgeTask(\n \t\t\t\tacknowledgedTasks.add(executionAttemptId);\n \t\t\t}\n \n-\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs();\n+\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIdPairList().getOperatorIds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDY1MQ==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310651", "createdAt": "2020-04-30T21:53:46Z", "author": {"login": "edu05"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -371,7 +371,7 @@ public TaskAcknowledgeResult acknowledgeTask(\n \t\t\t\tacknowledgedTasks.add(executionAttemptId);\n \t\t\t}\n \n-\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs();\n+\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIdPairList().getOperatorIds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MzQ3OA=="}, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjA2NzY5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODoxMDozNFrOGO0ukw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1MzozOVrOGO7p0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5NzEzOQ==", "bodyText": "Isn't name getOperatorIdPairs enough (instead of getOperatorIdPairList)?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418197139", "createdAt": "2020-04-30T18:10:34Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java", "diffHunk": "@@ -289,21 +270,12 @@ public ExecutionJobVertex(\n \t}\n \n \t/**\n-\t * Returns a list containing the IDs of all operators contained in this execution job vertex.\n+\t * Returns a list containing the ID pairs of all operators contained in this execution job vertex.\n \t *\n-\t * @return list containing the IDs of all contained operators\n+\t * @return list containing the ID pairs of all contained operators\n \t */\n-\tpublic List<OperatorID> getOperatorIDs() {\n-\t\treturn operatorIDs;\n-\t}\n-\n-\t/**\n-\t * Returns a list containing the alternative IDs of all operators contained in this execution job vertex.\n-\t *\n-\t * @return list containing alternative the IDs of all contained operators\n-\t */\n-\tpublic List<OperatorID> getUserDefinedOperatorIDs() {\n-\t\treturn userDefinedOperatorIds;\n+\tpublic OperatorIdPairList getOperatorIdPairList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDYxMQ==", "bodyText": "done by removing the class altogether", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310611", "createdAt": "2020-04-30T21:53:39Z", "author": {"login": "edu05"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java", "diffHunk": "@@ -289,21 +270,12 @@ public ExecutionJobVertex(\n \t}\n \n \t/**\n-\t * Returns a list containing the IDs of all operators contained in this execution job vertex.\n+\t * Returns a list containing the ID pairs of all operators contained in this execution job vertex.\n \t *\n-\t * @return list containing the IDs of all contained operators\n+\t * @return list containing the ID pairs of all contained operators\n \t */\n-\tpublic List<OperatorID> getOperatorIDs() {\n-\t\treturn operatorIDs;\n-\t}\n-\n-\t/**\n-\t * Returns a list containing the alternative IDs of all operators contained in this execution job vertex.\n-\t *\n-\t * @return list containing alternative the IDs of all contained operators\n-\t */\n-\tpublic List<OperatorID> getUserDefinedOperatorIDs() {\n-\t\treturn userDefinedOperatorIds;\n+\tpublic OperatorIdPairList getOperatorIdPairList() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5NzEzOQ=="}, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjA4OTI3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobVertex.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODoxNjo1M1rOGO08eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1MzoyNFrOGO7pZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMDY5Nw==", "bodyText": "Ideally, this should be done by the caller (i.e. StreamingJobGraphGenerator.createJobVertex) so the constructor receives a list of pairs.\nAlso, lists here don't guarantee constant time get(int) and it's good to check that both lists have the same size.", "url": "https://github.com/apache/flink/pull/11952#discussion_r418200697", "createdAt": "2020-04-30T18:16:53Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobVertex.java", "diffHunk": "@@ -143,27 +145,27 @@ public JobVertex(String name) {\n \tpublic JobVertex(String name, JobVertexID id) {\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = id == null ? new JobVertexID() : id;\n-\t\t// the id lists must have the same size\n-\t\tthis.operatorIDs.add(OperatorID.fromJobVertexID(this.id));\n-\t\tthis.operatorIdsAlternatives.add(null);\n+\t\tOperatorIdPair operatorIdPair = new OperatorIdPair(OperatorID.fromJobVertexID(this.id), null);\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(Collections.singletonList(operatorIdPair));\n \t}\n \n \t/**\n \t * Constructs a new job vertex and assigns it with the given name.\n \t *\n \t * @param name The name of the new job vertex.\n \t * @param primaryId The id of the job vertex.\n-\t * @param alternativeIds The alternative ids of the job vertex.\n \t * @param operatorIds The ids of all operators contained in this job vertex.\n \t * @param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-\n \t */\n-\tpublic JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n+\tpublic JobVertex(String name, JobVertexID primaryId, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n \t\tPreconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size());\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = primaryId == null ? new JobVertexID() : primaryId;\n-\t\tthis.idAlternatives.addAll(alternativeIds);\n-\t\tthis.operatorIDs.addAll(operatorIds);\n-\t\tthis.operatorIdsAlternatives.addAll(alternativeOperatorIds);\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (int i = 0; i < operatorIds.size(); i++) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorIds.get(i), alternativeOperatorIds.get(i)));\n+\t\t}\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(operatorIdPairs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDUwMw==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310503", "createdAt": "2020-04-30T21:53:24Z", "author": {"login": "edu05"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobVertex.java", "diffHunk": "@@ -143,27 +145,27 @@ public JobVertex(String name) {\n \tpublic JobVertex(String name, JobVertexID id) {\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = id == null ? new JobVertexID() : id;\n-\t\t// the id lists must have the same size\n-\t\tthis.operatorIDs.add(OperatorID.fromJobVertexID(this.id));\n-\t\tthis.operatorIdsAlternatives.add(null);\n+\t\tOperatorIdPair operatorIdPair = new OperatorIdPair(OperatorID.fromJobVertexID(this.id), null);\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(Collections.singletonList(operatorIdPair));\n \t}\n \n \t/**\n \t * Constructs a new job vertex and assigns it with the given name.\n \t *\n \t * @param name The name of the new job vertex.\n \t * @param primaryId The id of the job vertex.\n-\t * @param alternativeIds The alternative ids of the job vertex.\n \t * @param operatorIds The ids of all operators contained in this job vertex.\n \t * @param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-\n \t */\n-\tpublic JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n+\tpublic JobVertex(String name, JobVertexID primaryId, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n \t\tPreconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size());\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = primaryId == null ? new JobVertexID() : primaryId;\n-\t\tthis.idAlternatives.addAll(alternativeIds);\n-\t\tthis.operatorIDs.addAll(operatorIds);\n-\t\tthis.operatorIdsAlternatives.addAll(alternativeOperatorIds);\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (int i = 0; i < operatorIds.size(); i++) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorIds.get(i), alternativeOperatorIds.get(i)));\n+\t\t}\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(operatorIdPairs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMDY5Nw=="}, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjE1ODA0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/OperatorIdPairList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODozNzozNlrOGO1oXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1MzoxNFrOGO7pHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMTkzMw==", "bodyText": "I'm not sure if we need this class:\n\ngetUserDefinedOperatorIds is never used\nconstructor can be inlined\ninstead of getOperatorIds() clients could iterate over pairs with minimal changes, e.g. in StateAssignmentOperation:\n\nList<OperatorIdPair> pairs = executionJobVertex.getOperatorIdPairList().getOperatorIds();\n\nint expectedNumberOfSubTasks = newParallelism * pairs.size();\n\nfor (OperatorIdPair pair : operatorIDs) {\n  OperatorInstanceID instanceID = OperatorInstanceID.of(subTaskIndex, pair.getOperatorId());", "url": "https://github.com/apache/flink/pull/11952#discussion_r418211933", "createdAt": "2020-04-30T18:37:36Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/OperatorIdPairList.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobgraph;\n+\n+import org.apache.flink.runtime.OperatorIdPair;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Convenience class to encapsulate the operator ID pairs of a job vertex. It is convenient because it hides\n+ * away the creation of a new list for only operator IDs or user defined operator IDs.\n+ * It also hides the iteration over operator ID pairs.\n+ */\n+public class OperatorIdPairList extends AbstractList<OperatorIdPair> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDQyOQ==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310429", "createdAt": "2020-04-30T21:53:14Z", "author": {"login": "edu05"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/OperatorIdPairList.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobgraph;\n+\n+import org.apache.flink.runtime.OperatorIdPair;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Convenience class to encapsulate the operator ID pairs of a job vertex. It is convenient because it hides\n+ * away the creation of a new list for only operator IDs or user defined operator IDs.\n+ * It also hides the iteration over operator ID pairs.\n+ */\n+public class OperatorIdPairList extends AbstractList<OperatorIdPair> implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMTkzMw=="}, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjE2MzI3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTestingUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODozOToyNFrOGO1rzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwODowMToxMFrOGPEaEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg==", "bodyText": "What do you think about a factory method to create OperatorIdPair from only generated ID?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418212812", "createdAt": "2020-04-30T18:39:24Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTestingUtils.java", "diffHunk": "@@ -357,8 +359,11 @@ static ExecutionJobVertex mockExecutionJobVertex(\n \t\twhen(executionJobVertex.getParallelism()).thenReturn(parallelism);\n \t\twhen(executionJobVertex.getMaxParallelism()).thenReturn(maxParallelism);\n \t\twhen(executionJobVertex.isMaxParallelismConfigured()).thenReturn(true);\n-\t\twhen(executionJobVertex.getOperatorIDs()).thenReturn(jobVertexIDs);\n-\t\twhen(executionJobVertex.getUserDefinedOperatorIDs()).thenReturn(Arrays.asList(new OperatorID[jobVertexIDs.size()]));\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (OperatorID operatorID : jobVertexIDs) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorID, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMxMDM1Ng==", "bodyText": "done, is it a terrible idea that both factory methods have the same name?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418310356", "createdAt": "2020-04-30T21:53:03Z", "author": {"login": "edu05"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTestingUtils.java", "diffHunk": "@@ -357,8 +359,11 @@ static ExecutionJobVertex mockExecutionJobVertex(\n \t\twhen(executionJobVertex.getParallelism()).thenReturn(parallelism);\n \t\twhen(executionJobVertex.getMaxParallelism()).thenReturn(maxParallelism);\n \t\twhen(executionJobVertex.isMaxParallelismConfigured()).thenReturn(true);\n-\t\twhen(executionJobVertex.getOperatorIDs()).thenReturn(jobVertexIDs);\n-\t\twhen(executionJobVertex.getUserDefinedOperatorIDs()).thenReturn(Arrays.asList(new OperatorID[jobVertexIDs.size()]));\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (OperatorID operatorID : jobVertexIDs) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorID, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg=="}, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ1NDAzNQ==", "bodyText": "I'd prefer more descriptive name for one-argument version.", "url": "https://github.com/apache/flink/pull/11952#discussion_r418454035", "createdAt": "2020-05-01T08:01:10Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTestingUtils.java", "diffHunk": "@@ -357,8 +359,11 @@ static ExecutionJobVertex mockExecutionJobVertex(\n \t\twhen(executionJobVertex.getParallelism()).thenReturn(parallelism);\n \t\twhen(executionJobVertex.getMaxParallelism()).thenReturn(maxParallelism);\n \t\twhen(executionJobVertex.isMaxParallelismConfigured()).thenReturn(true);\n-\t\twhen(executionJobVertex.getOperatorIDs()).thenReturn(jobVertexIDs);\n-\t\twhen(executionJobVertex.getUserDefinedOperatorIDs()).thenReturn(Arrays.asList(new OperatorID[jobVertexIDs.size()]));\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (OperatorID operatorID : jobVertexIDs) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorID, null));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg=="}, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1463, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}