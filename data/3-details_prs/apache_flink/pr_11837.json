{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDMxMDQw", "number": 11837, "title": "[FLINK-16160][table-planner-blink] Fix proctime()/rowtime() doesn't w\u2026", "bodyText": "\u2026ork for TableEnvironment.connect().createTemporaryTable()\nWhat is the purpose of the change\nSince FLINK-14490, proctime()/rowtime() doesn't work  for TableEnvironment.connect().createTemporaryTable(), The root cause is:\n\nproctime()/rowtime() are used along with DefinedRowtimeAttributes/DefinedProctimeAttribute and ConnectorCatalogTable.  The original code path stores the ConnectorCatalogTable object in Catalog and in validate phrase, the RowType is derived from ConnectorCatalogTable.getSchema which contains time indicator. After FLINK-14490, we store CatalogTableImpl object in Catalog and in validate phrase, the RowType is derived from CatalogTableImpl.getSchema which doesn't contain time indicator.\nIn SqlToRel phrase, FlinkCalciteCatalogReader converts ConnectorCatalogTable to TableSourceTable and converts CatalogTable to CatalogSourceTable. The TableSourceTable would be converted to LogicalTableScan directly and contains time indicator. Otherwise the CatalogSourceTable would be converted to a LogicalTableScan whose time indicator is erased(by FLINK-16345).\nThis PR fix it.\n\nBrief change log\n\ninstantiate the TableSource in CatalogSchemaTable and check if it's a DefinedRowtimeAttributes/DefinedProctimeAttribute instance. If so, rewrite the TableSchema to patch the time indicator(as it is in ConnectorCatalogTable#calculateSourceSchema)\nAvoid erasing time indicator in CatalogSourceTable if the TableSource is a DefinedRowtimeAttributes/DefinedProctimeAttribute instance\n\nVerifying this change\nThis change added tests.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-04-21T04:32:18Z", "url": "https://github.com/apache/flink/pull/11837", "merged": true, "mergeCommit": {"oid": "0d9c46ea97e337acfcef932f86b73f3ff779c272"}, "closed": true, "closedAt": "2020-05-18T08:01:27Z", "author": {"login": "docete"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaUS3KgFqTM5ODcyMzA1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABciZ0DBgFqTQxMzI5OTU5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzIzMDUw", "url": "https://github.com/apache/flink/pull/11837#pullrequestreview-398723050", "createdAt": "2020-04-23T02:50:02Z", "commit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjo1MDowMlrOGKULcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMzoyMDo1OFrOGKUyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTU1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n          \n          \n            \n            \t\tOptional<TableSource<?>> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n          \n      \n    \n    \n  \n\nAdd <?> to TableSource to avoid IDEA warning.", "url": "https://github.com/apache/flink/pull/11837#discussion_r413469555", "createdAt": "2020-04-23T02:50:02Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MDg2MA==", "bodyText": "Add a hasProctimeAttribute to TableSourceValidation and the condition can be simplified into\nif (hasRowtimeAttribute(source) && hasProctimeAttribute(source))", "url": "https://github.com/apache/flink/pull/11837#discussion_r413470860", "createdAt": "2020-04-23T02:53:45Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n+\t\tif (tableSchema.getTableColumns().stream().noneMatch(TableColumn::isGenerated)\n+\t\t\t&& tableSchema.getWatermarkSpecs().isEmpty()\n+\t\t\t&& sourceOpt.isPresent()) {\n+\t\t\tTableSource source = sourceOpt.get();\n+\t\t\tif ((source instanceof DefinedProctimeAttribute\n+\t\t\t\t\t&& ((DefinedProctimeAttribute) source).getProctimeAttribute() != null)\n+\t\t\t\t\t||\n+\t\t\t\t\t(source instanceof DefinedRowtimeAttributes\n+\t\t\t\t\t\t\t&& ((DefinedRowtimeAttributes) source).getRowtimeAttributeDescriptors() != null\n+\t\t\t\t\t\t\t&& !((DefinedRowtimeAttributes) source).getRowtimeAttributeDescriptors().isEmpty())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3MTU3Nw==", "bodyText": "If the ReadableConfig is always an empty configuration. Please remove the parameter and construct in the findAndCreateTableSource method with a comment to explain why we use an empty configuration.", "url": "https://github.com/apache/flink/pull/11837#discussion_r413471577", "createdAt": "2020-04-23T02:55:59Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2OTU1NQ=="}, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NjAyMw==", "bodyText": "Add isStreamingMode into this condition, and findAndCreateTableSource  when the condition is satisfied.", "url": "https://github.com/apache/flink/pull/11837#discussion_r413476023", "createdAt": "2020-04-23T03:09:29Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/catalog/CatalogSchemaTable.java", "diffHunk": "@@ -153,6 +166,27 @@ private static RelDataType getRowType(RelDataTypeFactory typeFactory,\n \t\t\t\t}\n \t\t\t}\n \t\t}\n+\n+\t\t// The following block is a workaround to support tables defined by TableEnvironment.connect() and\n+\t\t// the actual table sources implement DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\t// It should be removed after we remove DefinedProctimeAttribute/DefinedRowtimeAttributes.\n+\t\tOptional<TableSource> sourceOpt = findAndCreateTableSource(new TableConfig().getConfiguration());\n+\t\tif (tableSchema.getTableColumns().stream().noneMatch(TableColumn::isGenerated)\n+\t\t\t&& tableSchema.getWatermarkSpecs().isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NjU3NQ==", "bodyText": "val legacyTimeAttributeDefined = hasRowtimeAttribute(source) && hasProctimeAttribute(source)", "url": "https://github.com/apache/flink/pull/11837#discussion_r413476575", "createdAt": "2020-04-23T03:11:19Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/schema/CatalogSourceTable.scala", "diffHunk": "@@ -210,20 +208,37 @@ class CatalogSourceTable[T](\n    */\n   private def eraseTimeIndicator(\n       relDataType: RelDataType,\n-      factory: FlinkTypeFactory): RelDataType = {\n-    val logicalRowType = FlinkTypeFactory.toLogicalRowType(relDataType)\n-    val fieldNames = logicalRowType.getFieldNames\n-    val fieldTypes = logicalRowType.getFields.map { f =>\n-      if (FlinkTypeFactory.isTimeIndicatorType(f.getType)) {\n-        val timeIndicatorType = f.getType.asInstanceOf[TimestampType]\n-        new TimestampType(\n-          timeIndicatorType.isNullable,\n-          TimestampKind.REGULAR,\n-          timeIndicatorType.getPrecision)\n-      } else {\n-        f.getType\n+      factory: FlinkTypeFactory,\n+      tableSource: TableSource[_]): RelDataType = {\n+    val isLegacySource = tableSource match {\n+      case rts: DefinedRowtimeAttributes\n+        if (rts.getRowtimeAttributeDescriptors != null\n+          && rts.getRowtimeAttributeDescriptors.nonEmpty) =>\n+        true\n+      case pts: DefinedProctimeAttribute if pts.getProctimeAttribute != null =>\n+         true\n+      case _ => false\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NzA3Ng==", "bodyText": "Can we have a dedicated descriptor for TestTableSourceWithTime? This code looks confusing.", "url": "https://github.com/apache/flink/pull/11837#discussion_r413477076", "createdAt": "2020-04-23T03:13:03Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/TableSourceTest.scala", "diffHunk": "@@ -130,6 +131,60 @@ class TableSourceTest extends TableTestBase {\n     util.verifyPlan(sqlQuery)\n   }\n \n+\n+  @Test\n+  def testLegacyRowTimeTableGroupWindow(): Unit = {\n+    util.tableEnv.connect(new ConnectorDescriptor(\"TestTableSourceWithTime\", 1, false) {\n+      override protected def toConnectorProperties: JMap[String, String] = {\n+        Collections.emptyMap()\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3NzM4Nw==", "bodyText": "remove empty line?", "url": "https://github.com/apache/flink/pull/11837#discussion_r413477387", "createdAt": "2020-04-23T03:14:02Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/resources/META-INF/services/org.apache.flink.table.factories.TableFactory", "diffHunk": "@@ -20,3 +20,5 @@ org.apache.flink.table.planner.utils.TestFilterableTableSourceFactory\n org.apache.flink.table.planner.utils.TestProjectableTableSourceFactory\n org.apache.flink.table.planner.utils.TestCsvFileSystemFormatFactory\n org.apache.flink.table.planner.utils.TestOptionsTableFactory\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ==", "bodyText": "Why the returnType is null? Use tableSchema.toRowType ?", "url": "https://github.com/apache/flink/pull/11837#discussion_r413478569", "createdAt": "2020-04-23T03:17:48Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/utils/testTableSourceSinks.scala", "diffHunk": "@@ -200,6 +199,65 @@ class TestTableSourceWithTime[T](\n   }\n }\n \n+class TestTableSourceWithTimeFactory[T] extends StreamTableSourceFactory[T] {\n+  override def createStreamTableSource(properties: JMap[String, String]): StreamTableSource[T] = {\n+    val dp = new DescriptorProperties()\n+    dp.putProperties(properties)\n+\n+    val isBounded = dp.getOptionalBoolean(\"is-bounded\").orElse(false)\n+    val tableSchema = dp.getTableSchema(Schema.SCHEMA)\n+    val serializedData = dp.getOptionalString(\"data\").orElse(null)\n+    val data = if (serializedData != null) {\n+      EncodingUtils.decodeStringToObject(serializedData, classOf[List[T]])\n+    } else {\n+      Seq.empty[T]\n+    }\n+    val rowtimeAttributes = SchemaValidator.deriveRowtimeAttributes(dp)\n+    val rowtime = if (rowtimeAttributes.isEmpty) {\n+      null\n+    } else {\n+      rowtimeAttributes.head.getAttributeName\n+    }\n+    val proctimeAttribute = SchemaValidator.deriveProctimeAttribute(dp)\n+    val proctime = if (proctimeAttribute.isPresent) {\n+      proctimeAttribute.get()\n+    } else {\n+      null\n+    }\n+\n+    val serializedMapKeys = dp.getOptionalString(\"map-keys\").orElse(null)\n+    val serializedMapVals = dp.getOptionalString(\"map-vals\").orElse(null)\n+    val mapping = if (serializedMapKeys != null && serializedMapVals != null) {\n+      val mapKeys = EncodingUtils.decodeStringToObject(serializedMapKeys, classOf[List[String]])\n+      val mapVals = EncodingUtils.decodeStringToObject(serializedMapVals, classOf[List[String]])\n+      if (mapKeys.length != mapVals.length) {\n+        null\n+      } else {\n+        mapKeys.zip(mapVals).toMap\n+      }\n+    } else {\n+      null\n+    }\n+\n+    val existingTs = dp.getOptionalString(\"existingTs\").orElse(null)\n+\n+    new TestTableSourceWithTime[T](\n+      isBounded, tableSchema, null, data, rowtime, proctime, mapping, existingTs)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3OTQ4Mg==", "bodyText": "If we only use this for planning, do you need to support extracting the data and mapping and existingTs ?", "url": "https://github.com/apache/flink/pull/11837#discussion_r413479482", "createdAt": "2020-04-23T03:20:58Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/utils/testTableSourceSinks.scala", "diffHunk": "@@ -200,6 +199,65 @@ class TestTableSourceWithTime[T](\n   }\n }\n \n+class TestTableSourceWithTimeFactory[T] extends StreamTableSourceFactory[T] {\n+  override def createStreamTableSource(properties: JMap[String, String]): StreamTableSource[T] = {\n+    val dp = new DescriptorProperties()\n+    dp.putProperties(properties)\n+\n+    val isBounded = dp.getOptionalBoolean(\"is-bounded\").orElse(false)\n+    val tableSchema = dp.getTableSchema(Schema.SCHEMA)\n+    val serializedData = dp.getOptionalString(\"data\").orElse(null)\n+    val data = if (serializedData != null) {\n+      EncodingUtils.decodeStringToObject(serializedData, classOf[List[T]])\n+    } else {\n+      Seq.empty[T]\n+    }\n+    val rowtimeAttributes = SchemaValidator.deriveRowtimeAttributes(dp)\n+    val rowtime = if (rowtimeAttributes.isEmpty) {\n+      null\n+    } else {\n+      rowtimeAttributes.head.getAttributeName\n+    }\n+    val proctimeAttribute = SchemaValidator.deriveProctimeAttribute(dp)\n+    val proctime = if (proctimeAttribute.isPresent) {\n+      proctimeAttribute.get()\n+    } else {\n+      null\n+    }\n+\n+    val serializedMapKeys = dp.getOptionalString(\"map-keys\").orElse(null)\n+    val serializedMapVals = dp.getOptionalString(\"map-vals\").orElse(null)\n+    val mapping = if (serializedMapKeys != null && serializedMapVals != null) {\n+      val mapKeys = EncodingUtils.decodeStringToObject(serializedMapKeys, classOf[List[String]])\n+      val mapVals = EncodingUtils.decodeStringToObject(serializedMapVals, classOf[List[String]])\n+      if (mapKeys.length != mapVals.length) {\n+        null\n+      } else {\n+        mapKeys.zip(mapVals).toMap\n+      }\n+    } else {\n+      null\n+    }\n+\n+    val existingTs = dp.getOptionalString(\"existingTs\").orElse(null)\n+\n+    new TestTableSourceWithTime[T](\n+      isBounded, tableSchema, null, data, rowtime, proctime, mapping, existingTs)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ3ODU2OQ=="}, "originalCommit": {"oid": "38df357bc5c54d93159c2d460833cf80c42b5e0c"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e69e1972a5934aed08c7fa655babd53365243ad9", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/e69e1972a5934aed08c7fa655babd53365243ad9", "committedDate": "2020-04-24T07:04:38Z", "message": "fixup: remove redundant newline"}, "afterCommit": {"oid": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "committedDate": "2020-05-08T03:56:24Z", "message": "fixup: use CustomConnectorDescriptor in the added tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNjMwODI5", "url": "https://github.com/apache/flink/pull/11837#pullrequestreview-410630829", "createdAt": "2020-05-13T06:47:39Z", "commit": {"oid": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0Nzo0MFrOGUjlRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo0Nzo0OFrOGUjlfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNzY4NA==", "bodyText": "Not used. Remove?", "url": "https://github.com/apache/flink/pull/11837#discussion_r424207684", "createdAt": "2020-05-13T06:47:40Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sources/TableSourceUtil.scala", "diffHunk": "@@ -303,6 +303,28 @@ object TableSourceUtil {\n     expr\n   }\n \n+  /** Returns whether a table source defines rowtime attributes in legacy way **/\n+  def hasRowtimeAttributes(tableSource: TableSource[_]): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwNzc0Mg==", "bodyText": "Not used. Remove?", "url": "https://github.com/apache/flink/pull/11837#discussion_r424207742", "createdAt": "2020-05-13T06:47:48Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sources/TableSourceUtil.scala", "diffHunk": "@@ -303,6 +303,28 @@ object TableSourceUtil {\n     expr\n   }\n \n+  /** Returns whether a table source defines rowtime attributes in legacy way **/\n+  def hasRowtimeAttributes(tableSource: TableSource[_]): Boolean = {\n+    tableSource match {\n+      case ts: DefinedRowtimeAttributes\n+        if ts.getRowtimeAttributeDescriptors != null\n+          && ts.getRowtimeAttributeDescriptors.nonEmpty =>\n+        true\n+      case _ =>\n+        false\n+    }\n+  }\n+\n+  /** Returns whether a table source defines proctime attribute in legacy way **/\n+  def hasProctimeAttribute(tableSource: TableSource[_]): Boolean = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/b62fcd03a583ef204f21a313f6969c8aaa4ee61d", "committedDate": "2020-05-08T03:56:24Z", "message": "fixup: use CustomConnectorDescriptor in the added tests"}, "afterCommit": {"oid": "75489d25f5a00957a2bbae1ed3a80c13c22a8e53", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/75489d25f5a00957a2bbae1ed3a80c13c22a8e53", "committedDate": "2020-05-15T01:56:35Z", "message": "fixup: rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "committedDate": "2020-05-18T04:43:31Z", "message": "[FLINK-16160][table-planner-blink] Fix proctime()/rowtime() doesn't work for TableEnvironment.connect().createTemporaryTable()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b6338c91d9a1e176fcedf3b1f45dcc1adc0059c", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/2b6338c91d9a1e176fcedf3b1f45dcc1adc0059c", "committedDate": "2020-05-15T02:33:23Z", "message": "fixup: checkstyle"}, "afterCommit": {"oid": "d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "author": {"user": {"login": "docete", "name": "Zhenghua Gao"}}, "url": "https://github.com/apache/flink/commit/d1d16a0c0d9e8b01c6bbf4d39374d25911373f07", "committedDate": "2020-05-18T04:43:31Z", "message": "[FLINK-16160][table-planner-blink] Fix proctime()/rowtime() doesn't work for TableEnvironment.connect().createTemporaryTable()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjk5NTkw", "url": "https://github.com/apache/flink/pull/11837#pullrequestreview-413299590", "createdAt": "2020-05-18T06:23:59Z", "commit": {"oid": "d1d16a0c0d9e8b01c6bbf4d39374d25911373f07"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4691, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}