{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4ODU0NDky", "number": 13766, "title": "[FLINK-19703][runtime] Untrack a result partition if its producer task failed in TaskManager", "bodyText": "What is the purpose of the change\nExecution#maybeReleasePartitionsAndSendCancelRpcCall(...) will be not invoked when a task is reported to be failed in TaskManager, which results in its partitions to still be tacked by the job manager partition tracker.\nVerifying this change\nThis change is already covered by existing tests\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no**)**\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-10-23T09:56:10Z", "url": "https://github.com/apache/flink/pull/13766", "merged": true, "mergeCommit": {"oid": "ed33697c1b8d74eb511cf88ec8e40792c128ad1d"}, "closed": true, "closedAt": "2020-11-02T13:54:02Z", "author": {"login": "zhuzhurk"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWMPSuABqjM5MTg3MzI3NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYke_ZgFqTUyMTYyMTQyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42f066384d04bcfe67ccbb5766f09ab5dde9e19c", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/42f066384d04bcfe67ccbb5766f09ab5dde9e19c", "committedDate": "2020-10-23T07:07:55Z", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions."}, "afterCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b46f97dd6b1fa67b4dd169867c1967877ac8534c", "committedDate": "2020-10-26T03:58:46Z", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDkyOTM4", "url": "https://github.com/apache/flink/pull/13766#pullrequestreview-520092938", "createdAt": "2020-10-29T21:14:53Z", "commit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxNDo1M1rOHqu-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTozMDoxNlrOHqvczQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MTk5OA==", "bodyText": "PRC  -> RPC", "url": "https://github.com/apache/flink/pull/13766#discussion_r514571998", "createdAt": "2020-10-29T21:14:53Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM4OA==", "bodyText": "why should these only be queryable if the state is failed?", "url": "https://github.com/apache/flink/pull/13766#discussion_r514572388", "createdAt": "2020-10-29T21:15:41Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjQ1OA==", "bodyText": "why should these only be queryable if the state is failed? I get the idea, but imo such a simple data-structure shouldn't enforce behaviors.", "url": "https://github.com/apache/flink/pull/13766#discussion_r514572458", "createdAt": "2020-10-29T21:15:51Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODY3MA==", "bodyText": "a more apt name might by \"TaskExecutionStateTransition\"", "url": "https://github.com/apache/flink/pull/13766#discussion_r514578670", "createdAt": "2020-10-29T21:28:14Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ==", "bodyText": "This seems like a dangerous default, and I wouldn't be surprised if we at some point call this by accident instead of creating a failed TaskExecutionStateWrapper", "url": "https://github.com/apache/flink/pull/13766#discussion_r514579189", "createdAt": "2020-10-29T21:29:17Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java", "diffHunk": "@@ -84,7 +85,11 @@\n \n \tvoid handleGlobalFailure(Throwable cause);\n \n-\tboolean updateTaskExecutionState(TaskExecutionState taskExecutionState);\n+\tdefault boolean updateTaskExecutionState(TaskExecutionState taskExecutionState) {\n+\t\treturn updateTaskExecutionState(TaskExecutionStateWrapper.createFrom(taskExecutionState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ==", "bodyText": "it is not intuitive that this method checks for a failed state, but the plain createFrom() does not assert the opposite (i.e., that the task did not fail).", "url": "https://github.com/apache/flink/pull/13766#discussion_r514579661", "createdAt": "2020-10-29T21:30:16Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn releasePartitions;\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n+\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFromFailedState(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b5792e48826ae3e9fe4aed44ccec8ce44be734d5", "committedDate": "2020-10-30T09:15:01Z", "message": "[FLINK-19703][hotfix][runtime] Remove the while-loop in Execution#processFail\n\nThe loop was introduced in case of concurrent issue, while the issue was already solved by FLINK-11417\nwhich forces all ExecutionGraph modification to be performed in the main thread."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a40a286aa55deed570dcac0cdc9196638c3c09e", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/2a40a286aa55deed570dcac0cdc9196638c3c09e", "committedDate": "2020-10-30T09:15:01Z", "message": "[FLINK-19703][runtime] Replace the param 'isCallback' in Execution#processFail(...) with 'cancelTask'\n\nBecause 'isCallback' is not accurate and can lead to confusion.\nThis commit also adds a detailed explanation for params of Execution#processFail(...)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "committedDate": "2020-10-30T09:15:01Z", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b46f97dd6b1fa67b4dd169867c1967877ac8534c", "committedDate": "2020-10-26T03:58:46Z", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions."}, "afterCommit": {"oid": "8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553", "committedDate": "2020-10-30T09:15:01Z", "message": "[FLINK-19703][runtime] Wrap TaskExecutionState with extra info of internal failure handling\n\nExtra info includes wether to cancel task and whether to release partitions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjIxNDI4", "url": "https://github.com/apache/flink/pull/13766#pullrequestreview-521621428", "createdAt": "2020-11-02T13:21:51Z", "commit": {"oid": "8fe7e75c390442fa9aab16ab05c3cc5e0fc6d553"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3092, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}