{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4NDAxMTE0", "number": 14372, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NDo1M1rOFFJWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNzoyOFrOFFJ7YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQwNDM0OnYy", "diffSide": "LEFT", "path": "flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NDo1M1rOIFgVLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NDo1M1rOIFgVLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0MzUwMA==", "bodyText": "revert", "url": "https://github.com/apache/flink/pull/14372#discussion_r542643500", "createdAt": "2020-12-14T18:54:53Z", "author": {"login": "zentol"}, "path": "flink-core/src/main/java/org/apache/flink/api/common/functions/RuntimeContext.java", "diffHunk": "@@ -128,12 +129,11 @@\n \t *\n \t * <p>The release hook is executed just before the user code class loader is being released.\n \t * Registration only happens if no hook has been registered under this name already.\n-\t *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQxMzE4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NjowN1rOIFga4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNzowNVrOIHAqyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDk2MA==", "bodyText": "Shouldn't we be able to use getClass().getClassLoader()? Then we wouldn't have to modify the RuntimeContext API.", "url": "https://github.com/apache/flink/pull/14372#discussion_r542644960", "createdAt": "2020-12-14T18:56:07Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY2Njc1Mg==", "bodyText": "Ignore my previous suggestion; we shouldn't do that on the off-chance that the connector is loaded via /lib.\nCould we use RuntimeContext#getUserCodeClassLoader instead?", "url": "https://github.com/apache/flink/pull/14372#discussion_r542666752", "createdAt": "2020-12-14T19:14:44Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDk2MA=="}, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMTg5Nw==", "bodyText": "Good idea! That works.", "url": "https://github.com/apache/flink/pull/14372#discussion_r544221897", "createdAt": "2020-12-16T11:27:05Z", "author": {"login": "rmetzger"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDk2MA=="}, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQzNzY4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1OTowN1rOIFgqYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNzoyNFrOIHArhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0ODkzMA==", "bodyText": "This should be the key change necessary to ensure the ClassLoader can be cleaned up.\nWe shouldn't have to touch the FileAgeManager#instance reference; so long as no thread has references to them we should be good.", "url": "https://github.com/apache/flink/pull/14372#discussion_r542648930", "createdAt": "2020-12-14T18:59:07Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n+\t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n+\t\t\tinstanceField.setAccessible(true);\n+\n+\t\t\t// unset (static final) field FileAgeManager.instance\n+\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiersField.setAccessible(true);\n+\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n+\t\t\tObject fileAgeManager = instanceField.get(null);\n+\t\t\tinstanceField.set(null, null);\n+\n+\t\t\t// shutdown thread pool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMjA4NA==", "bodyText": "You are right. Only the thread pool is the problem.", "url": "https://github.com/apache/flink/pull/14372#discussion_r544222084", "createdAt": "2020-12-16T11:27:24Z", "author": {"login": "rmetzger"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n+\t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n+\t\t\tinstanceField.setAccessible(true);\n+\n+\t\t\t// unset (static final) field FileAgeManager.instance\n+\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiersField.setAccessible(true);\n+\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n+\t\t\tObject fileAgeManager = instanceField.get(null);\n+\t\t\tinstanceField.set(null, null);\n+\n+\t\t\t// shutdown thread pool", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0ODkzMA=="}, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ2MDQ1OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowMTo1MlrOIFg48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMToyNzozOFrOIHAr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1MjY1Nw==", "bodyText": "Why are we clearing this singleton?", "url": "https://github.com/apache/flink/pull/14372#discussion_r542652657", "createdAt": "2020-12-14T19:01:52Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n+\t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n+\t\t\tinstanceField.setAccessible(true);\n+\n+\t\t\t// unset (static final) field FileAgeManager.instance\n+\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiersField.setAccessible(true);\n+\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n+\t\t\tObject fileAgeManager = instanceField.get(null);\n+\t\t\tinstanceField.set(null, null);\n+\n+\t\t\t// shutdown thread pool\n+\t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n+\t\t\texecutorField.setAccessible(true);\n+\t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n+\t\t\texecutorService.shutdown();\n+\t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n+\n+\t\t\t// Remove InstanceProfileCredentialsProvider\n+\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIyMjIwNg==", "bodyText": "That's again not needed. I'll remove that.", "url": "https://github.com/apache/flink/pull/14372#discussion_r544222206", "createdAt": "2020-12-16T11:27:38Z", "author": {"login": "rmetzger"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager\n+\t\t\tClass<?> fileAgeManagerClazz = Class.forName(\"com.amazonaws.services.kinesis.producer.FileAgeManager\", true, classLoader);\n+\t\t\tField instanceField = fileAgeManagerClazz.getDeclaredField(\"instance\");\n+\t\t\tinstanceField.setAccessible(true);\n+\n+\t\t\t// unset (static final) field FileAgeManager.instance\n+\t\t\tField modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+\t\t\tmodifiersField.setAccessible(true);\n+\t\t\tmodifiersField.setInt(instanceField, instanceField.getModifiers() & ~Modifier.FINAL);\n+\t\t\tObject fileAgeManager = instanceField.get(null);\n+\t\t\tinstanceField.set(null, null);\n+\n+\t\t\t// shutdown thread pool\n+\t\t\tField executorField = fileAgeManagerClazz.getDeclaredField(\"executorService\");\n+\t\t\texecutorField.setAccessible(true);\n+\t\t\tExecutorService executorService = (ExecutorService) executorField.get(fileAgeManager);\n+\t\t\texecutorService.shutdown();\n+\t\t\texecutorService.awaitTermination(1, TimeUnit.MINUTES);\n+\n+\t\t\t// Remove InstanceProfileCredentialsProvider\n+\t\t\tClass<?> credProviderClazz = Class.forName(\"com.amazonaws.auth.InstanceProfileCredentialsProvider\", true, classLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1MjY1Nw=="}, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ5MTI4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNjoyOFrOIFhMSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNjoyOFrOIFhMSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1NzYwOA==", "bodyText": "It would be good to add a version reference for which aws-java-sdk-core was used.", "url": "https://github.com/apache/flink/pull/14372#discussion_r542657608", "createdAt": "2020-12-14T19:06:28Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ5NzkyOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNzoyM1rOIFhQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNzoyM1rOIFhQPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1ODYyMg==", "bodyText": "seems outdated?", "url": "https://github.com/apache/flink/pull/14372#discussion_r542658622", "createdAt": "2020-12-14T19:07:23Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean\n+\t\tAwsSdkMetrics.unregisterMetricAdminMBean();\n+\n+\t\ttry {\n+\t\t\t// Remove FileAgeManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTQ5ODU3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNzoyOFrOIFhQnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTowNzoyOFrOIFhQnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY1ODcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t// unregister admin mbean", "url": "https://github.com/apache/flink/pull/14372#discussion_r542658717", "createdAt": "2020-12-14T19:07:28Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-kinesis/src/main/java/org/apache/flink/streaming/connectors/kinesis/FlinkKinesisProducer.java", "diffHunk": "@@ -423,4 +432,43 @@ private void flushSync() throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Remove references created by the producer, preventing the classloader to unload. References were\n+\t * analyzed as of version 0.14.0.\n+\t */\n+\tprivate void runClassLoaderReleaseHook(ClassLoader classLoader) {\n+\t\t// unregister admin mbean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7cddbfc09ea4961d8675dbb21fd3c2c3ca54586"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}