{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODgyNTg2", "number": 10756, "title": "[FLINK-15465][FLINK-11964][table-runtime-blink] Fix required memory calculation not accurate and hash collision bugs in hash table", "bodyText": "What is the purpose of the change & Brief change log\n\n\nIn BinaryHashBucketArea.insertToBucket.\nWhen BinaryHashTable.buildTableFromSpilledPartition.\"Build in memory hash table\", it requires memory can put all records, if not, will fail.\nBecause the linked hash conflict solution, the required memory calculation are not accurate, in this case, we should apply for insufficient memory from heap.\nAnd must be careful, the steal memory should not return to table.\n\n\nIn HybridHashTable, first select the corresponding partition according to hashCode, and then select the bucket in the partition according to hashCode, using the same hashCode can easily cause hash collision.\nConsider doing some mix to hashCode when choosing bucket.\nLike JDK HashMap, we can just XOR some shifted bits in the cheapest possible way to reduce systematic lossage, as well as to incorporate impact of the highest bits that would otherwise never be used in index calculations because of table bounds. (bucket use power-of-two masking).  Just like:  (hash ^ (hash >>> 16))\nIn some cases, if a lot of conflicts occurred, this will lead to job hang, because hash join will degenerate to nested loop join.\n\n\nVerifying this change\nBinaryHashTableTest\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no", "createdAt": "2020-01-03T06:04:47Z", "url": "https://github.com/apache/flink/pull/10756", "merged": true, "mergeCommit": {"oid": "69ed6feef09d36df48b2e849888f9faebdaa2981"}, "closed": true, "closedAt": "2020-01-07T10:41:26Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2r4PLgFqTMzODAyMzg2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb3-SwhAFqTMzOTE1NTQxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MDIzODY0", "url": "https://github.com/apache/flink/pull/10756#pullrequestreview-338023864", "createdAt": "2020-01-03T10:34:11Z", "commit": {"oid": "82ff8a76280af02f98613526b8b309ae6d4f2e94"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDozNDoxMVrOFZ9asg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDozNDoxMVrOFZ9asg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2NDk3OA==", "bodyText": "@JingsongLi Thanks a lot for bringing this up.\nI agree with you that this is computationally efficient.\nHowever, according to my experince, this may not be a good hash function. In practice, we usually encounter small integers (with most high bits equal to 0), so we have hash >>> 16 == 0, and hash ^ (hash >>> 16) will be equal to hash.\nIMO, hash ^ (hash << 16) is much better, as it maps small integers uniformly into the space of all integers.\nThat being that, this is just my personal suggestion. The final choice should be dependent on the real scenario.", "url": "https://github.com/apache/flink/pull/10756#discussion_r362764978", "createdAt": "2020-01-03T10:34:11Z", "author": {"login": "liyafan82"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/hashtable/BaseHybridHashTable.java", "diffHunk": "@@ -516,4 +511,10 @@ public static int hash(int hashCode, int level) {\n \t\treturn code >= 0 ? code : -(code + 1);\n \t}\n \n+\t/**\n+\t * Partition level hash again, for avoid two layer hash conflict.\n+\t */\n+\tstatic int partitionLevelHash(int hash) {\n+\t\treturn hash ^ (hash >>> 16);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82ff8a76280af02f98613526b8b309ae6d4f2e94"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b9854ae0635f32acad2d56a404e29056fccbc29", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/9b9854ae0635f32acad2d56a404e29056fccbc29", "committedDate": "2020-01-06T03:32:34Z", "message": "[FLINK-15465][FLINK-11964][table-runtime-blink] Fix hash table bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccdd9c9bfa921e64404d8c55d4098588356a9587", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/ccdd9c9bfa921e64404d8c55d4098588356a9587", "committedDate": "2020-01-06T03:40:26Z", "message": "Fix long hash"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82ff8a76280af02f98613526b8b309ae6d4f2e94", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/82ff8a76280af02f98613526b8b309ae6d4f2e94", "committedDate": "2020-01-03T06:02:17Z", "message": "[FLINK-15465][FLINK-11964][table-runtime-blink] Fix hash table bugs"}, "afterCommit": {"oid": "ccdd9c9bfa921e64404d8c55d4098588356a9587", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/ccdd9c9bfa921e64404d8c55d4098588356a9587", "committedDate": "2020-01-06T03:40:26Z", "message": "Fix long hash"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDcyODI4", "url": "https://github.com/apache/flink/pull/10756#pullrequestreview-339072828", "createdAt": "2020-01-07T07:43:49Z", "commit": {"oid": "ccdd9c9bfa921e64404d8c55d4098588356a9587"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MTU1NDEw", "url": "https://github.com/apache/flink/pull/10756#pullrequestreview-339155410", "createdAt": "2020-01-07T10:35:22Z", "commit": {"oid": "ccdd9c9bfa921e64404d8c55d4098588356a9587"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4912, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}