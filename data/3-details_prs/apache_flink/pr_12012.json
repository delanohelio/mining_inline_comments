{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDE2NTc0", "number": 12012, "title": "[FLINK-17289][docs]Translate tutorials/etl.md to Chinese", "bodyText": "What is the purpose of the change\nTranslate tutorials/etl.md to chinese.\nBrief change log\n\netl.zh.md is changed into Chinese version.\n\nVerifying this change\nThis change is a trivial rework without any test coverage.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature?  no", "createdAt": "2020-05-07T01:49:00Z", "url": "https://github.com/apache/flink/pull/12012", "merged": true, "mergeCommit": {"oid": "1a2eb5ea5b13bf641d04df0a6d7a97c983491eaa"}, "closed": true, "closedAt": "2020-05-11T08:01:47Z", "author": {"login": "liying919"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce5mJeAFqTQwNzE2NjMwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfen-agFqTQwODYxMDc3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTY2MzAx", "url": "https://github.com/apache/flink/pull/12012#pullrequestreview-407166301", "createdAt": "2020-05-07T05:53:08Z", "commit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "state": "COMMENTED", "comments": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1MzowOVrOGRvXlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTowMzo0N1rOGR1SbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NTA2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Apache Flink\u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662fETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink\u7684DataStream API\u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002\n          \n          \n            \n            Apache Flink \u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662f ETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink \u7684 DataStream API \u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421255062", "createdAt": "2020-05-07T05:53:09Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -24,35 +24,23 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-One very common use case for Apache Flink is to implement ETL (extract, transform, load) pipelines\n-that take data from one or more sources, perform some transformations and/or enrichments, and\n-then store the results somewhere. In this section we are going to look at how to use Flink's\n-DataStream API to implement this kind of application.\n+Apache Flink\u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662fETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink\u7684DataStream API\u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NTI4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u8fd9\u91cc\u6ce8\u610f\uff0cFlink\u7684[Table \u548c SQL API]({% link dev/table/index.zh.md %})\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u5f88\u591aETL\u4f7f\u7528\u573a\u666f\u3002\u4f46\u65e0\u8bba\u4f60\u6700\u7ec8\u662f\u5426\u76f4\u63a5\u4f7f\u7528DataStream API\uff0c\u5bf9\u8fd9\u91cc\u4ecb\u7ecd\u7684\u57fa\u672c\u77e5\u8bc6\u6709\u624e\u5b9e\u7684\u7406\u89e3\u90fd\u662f\u6709\u4ef7\u503c\u7684\u3002\n          \n          \n            \n            \u8fd9\u91cc\u6ce8\u610f\uff0cFlink \u7684 [Table \u548c SQL API]({% link dev/table/index.zh.md %}) \u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u5f88\u591a ETL \u4f7f\u7528\u573a\u666f\u3002\u4f46\u65e0\u8bba\u4f60\u6700\u7ec8\u662f\u5426\u76f4\u63a5\u4f7f\u7528 DataStream API\uff0c\u5bf9\u8fd9\u91cc\u4ecb\u7ecd\u7684\u57fa\u672c\u77e5\u8bc6\u6709\u624e\u5b9e\u7684\u7406\u89e3\u90fd\u662f\u6709\u4ef7\u503c\u7684\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421255286", "createdAt": "2020-05-07T05:53:45Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -24,35 +24,23 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-One very common use case for Apache Flink is to implement ETL (extract, transform, load) pipelines\n-that take data from one or more sources, perform some transformations and/or enrichments, and\n-then store the results somewhere. In this section we are going to look at how to use Flink's\n-DataStream API to implement this kind of application.\n+Apache Flink\u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662fETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink\u7684DataStream API\u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002\n+\n+\u8fd9\u91cc\u6ce8\u610f\uff0cFlink\u7684[Table \u548c SQL API]({% link dev/table/index.zh.md %})\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u5f88\u591aETL\u4f7f\u7528\u573a\u666f\u3002\u4f46\u65e0\u8bba\u4f60\u6700\u7ec8\u662f\u5426\u76f4\u63a5\u4f7f\u7528DataStream API\uff0c\u5bf9\u8fd9\u91cc\u4ecb\u7ecd\u7684\u57fa\u672c\u77e5\u8bc6\u6709\u624e\u5b9e\u7684\u7406\u89e3\u90fd\u662f\u6709\u4ef7\u503c\u7684\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NTY2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u672c\u8282\u6db5\u76d6\u4e86 `map()` \u548c `flatmap()`\uff0c\u8fd9\u4e24\u79cd\u7b97\u5b50\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u65e0\u72b6\u6001\u8f6c\u6362\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u5efa\u7acb\u5728\u4f60\u5df2\u7ecf\u719f\u6089[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %})\u4e2d\u7684\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u7684\u57fa\u7840\u4e0a\u3002\n          \n          \n            \n            \u672c\u8282\u6db5\u76d6\u4e86 `map()` \u548c `flatmap()`\uff0c\u8fd9\u4e24\u79cd\u7b97\u5b50\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u65e0\u72b6\u6001\u8f6c\u6362\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u5efa\u7acb\u5728\u4f60\u5df2\u7ecf\u719f\u6089 [flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}) \u4e2d\u7684\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u7684\u57fa\u7840\u4e0a\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421255661", "createdAt": "2020-05-07T05:54:48Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -24,35 +24,23 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-One very common use case for Apache Flink is to implement ETL (extract, transform, load) pipelines\n-that take data from one or more sources, perform some transformations and/or enrichments, and\n-then store the results somewhere. In this section we are going to look at how to use Flink's\n-DataStream API to implement this kind of application.\n+Apache Flink\u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662fETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink\u7684DataStream API\u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002\n+\n+\u8fd9\u91cc\u6ce8\u610f\uff0cFlink\u7684[Table \u548c SQL API]({% link dev/table/index.zh.md %})\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u5f88\u591aETL\u4f7f\u7528\u573a\u666f\u3002\u4f46\u65e0\u8bba\u4f60\u6700\u7ec8\u662f\u5426\u76f4\u63a5\u4f7f\u7528DataStream API\uff0c\u5bf9\u8fd9\u91cc\u4ecb\u7ecd\u7684\u57fa\u672c\u77e5\u8bc6\u6709\u624e\u5b9e\u7684\u7406\u89e3\u90fd\u662f\u6709\u4ef7\u503c\u7684\u3002\n \n-Note that Flink's [Table and SQL APIs]({% link dev/table/index.zh.md %})\n-are well suited for many ETL use cases. But regardless of whether you ultimately use\n-the DataStream API directly, or not, having a solid understanding the basics presented here will\n-prove valuable.\n \n * This will be replaced by the TOC\n {:toc}\n \n-## Stateless Transformations\n+## \u65e0\u72b6\u6001\u7684\u8f6c\u6362\n \n-This section covers `map()` and `flatmap()`, the basic operations used to implement\n-stateless transformations. The examples in this section assume you are familiar with the\n-Taxi Ride data used in the hands-on exercises in the\n-[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}).\n+\u672c\u8282\u6db5\u76d6\u4e86 `map()` \u548c `flatmap()`\uff0c\u8fd9\u4e24\u79cd\u7b97\u5b50\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u65e0\u72b6\u6001\u8f6c\u6362\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u5efa\u7acb\u5728\u4f60\u5df2\u7ecf\u719f\u6089[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %})\u4e2d\u7684\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u7684\u57fa\u7840\u4e0a\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NTkyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u5728\u7b2c\u4e00\u4e2a\u7ec3\u4e60\u4e2d\uff0c\u4f60\u8bb2\u8fc7\u6ee4\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u4e2d\u7684\u4e8b\u4ef6\u3002\u5728\u540c\u4e00\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u6709\u4e00\u4e2a `GeoUtils` \u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5 `GeoUtils.mapToGridCell(float lon, float lat)`\uff0c\u5b83\u53ef\u4ee5\u5c06\u4f4d\u7f6e\u5750\u6807\uff08\u7ecf\u5ea6\uff0c\u7ef4\u5ea6\uff09\u6620\u5c04\u5230100x100\u7c73\u7684\u5bf9\u5e94\u4e0d\u540c\u533a\u57df\u7684\u7f51\u683c\u5355\u5143\u3002\n          \n          \n            \n            \u5728\u7b2c\u4e00\u4e2a\u7ec3\u4e60\u4e2d\uff0c\u4f60\u5c06\u8fc7\u6ee4\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u4e2d\u7684\u4e8b\u4ef6\u3002\u5728\u540c\u4e00\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u6709\u4e00\u4e2a `GeoUtils` \u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5 `GeoUtils.mapToGridCell(float lon, float lat)`\uff0c\u5b83\u53ef\u4ee5\u5c06\u4f4d\u7f6e\u5750\u6807\uff08\u7ecf\u5ea6\uff0c\u7ef4\u5ea6\uff09\u6620\u5c04\u5230 100x100 \u7c73\u7684\u5bf9\u5e94\u4e0d\u540c\u533a\u57df\u7684\u7f51\u683c\u5355\u5143\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421255922", "createdAt": "2020-05-07T05:55:40Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -24,35 +24,23 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-One very common use case for Apache Flink is to implement ETL (extract, transform, load) pipelines\n-that take data from one or more sources, perform some transformations and/or enrichments, and\n-then store the results somewhere. In this section we are going to look at how to use Flink's\n-DataStream API to implement this kind of application.\n+Apache Flink\u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662fETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink\u7684DataStream API\u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002\n+\n+\u8fd9\u91cc\u6ce8\u610f\uff0cFlink\u7684[Table \u548c SQL API]({% link dev/table/index.zh.md %})\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u5f88\u591aETL\u4f7f\u7528\u573a\u666f\u3002\u4f46\u65e0\u8bba\u4f60\u6700\u7ec8\u662f\u5426\u76f4\u63a5\u4f7f\u7528DataStream API\uff0c\u5bf9\u8fd9\u91cc\u4ecb\u7ecd\u7684\u57fa\u672c\u77e5\u8bc6\u6709\u624e\u5b9e\u7684\u7406\u89e3\u90fd\u662f\u6709\u4ef7\u503c\u7684\u3002\n \n-Note that Flink's [Table and SQL APIs]({% link dev/table/index.zh.md %})\n-are well suited for many ETL use cases. But regardless of whether you ultimately use\n-the DataStream API directly, or not, having a solid understanding the basics presented here will\n-prove valuable.\n \n * This will be replaced by the TOC\n {:toc}\n \n-## Stateless Transformations\n+## \u65e0\u72b6\u6001\u7684\u8f6c\u6362\n \n-This section covers `map()` and `flatmap()`, the basic operations used to implement\n-stateless transformations. The examples in this section assume you are familiar with the\n-Taxi Ride data used in the hands-on exercises in the\n-[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}).\n+\u672c\u8282\u6db5\u76d6\u4e86 `map()` \u548c `flatmap()`\uff0c\u8fd9\u4e24\u79cd\u7b97\u5b50\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u65e0\u72b6\u6001\u8f6c\u6362\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u5efa\u7acb\u5728\u4f60\u5df2\u7ecf\u719f\u6089[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %})\u4e2d\u7684\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u7684\u57fa\u7840\u4e0a\u3002\n \n ### `map()`\n \n-In the first exercise you filtered a stream of taxi ride events. In that same code base there's a\n-`GeoUtils` class that provides a static method `GeoUtils.mapToGridCell(float lon, float lat)` which\n-maps a location (longitude, latitude) to a grid cell that refers to an area that is approximately\n-100x100 meters in size.\n+\u5728\u7b2c\u4e00\u4e2a\u7ec3\u4e60\u4e2d\uff0c\u4f60\u8bb2\u8fc7\u6ee4\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u4e2d\u7684\u4e8b\u4ef6\u3002\u5728\u540c\u4e00\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u6709\u4e00\u4e2a `GeoUtils` \u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5 `GeoUtils.mapToGridCell(float lon, float lat)`\uff0c\u5b83\u53ef\u4ee5\u5c06\u4f4d\u7f6e\u5750\u6807\uff08\u7ecf\u5ea6\uff0c\u7ef4\u5ea6\uff09\u6620\u5c04\u5230100x100\u7c73\u7684\u5bf9\u5e94\u4e0d\u540c\u533a\u57df\u7684\u7f51\u683c\u5355\u5143\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NjQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u73b0\u5728\u8ba9\u6211\u4eec\u4e3a\u6bcf\u4e2a\u51fa\u79df\u8f66\u884c\u7a0b\u65f6\u95f4\u7684\u6570\u636e\u5bf9\u8c61\u589e\u52a0 `startCell` \u548c `endCell` \u5b57\u6bb5\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f `TaxiRide` and `EnrichedRide` \u7c7b\uff0c\u6dfb\u52a0\u8fd9\u4e9b\u5b57\u6bb5\uff1a\n          \n          \n            \n            \u73b0\u5728\u8ba9\u6211\u4eec\u4e3a\u6bcf\u4e2a\u51fa\u79df\u8f66\u884c\u7a0b\u65f6\u95f4\u7684\u6570\u636e\u5bf9\u8c61\u589e\u52a0 `startCell` \u548c `endCell` \u5b57\u6bb5\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f `TaxiRide` \u7684 `EnrichedRide` \u7c7b\uff0c\u6dfb\u52a0\u8fd9\u4e9b\u5b57\u6bb5\uff1a", "url": "https://github.com/apache/flink/pull/12012#discussion_r421256490", "createdAt": "2020-05-07T05:57:22Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -24,35 +24,23 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-One very common use case for Apache Flink is to implement ETL (extract, transform, load) pipelines\n-that take data from one or more sources, perform some transformations and/or enrichments, and\n-then store the results somewhere. In this section we are going to look at how to use Flink's\n-DataStream API to implement this kind of application.\n+Apache Flink\u7684\u4e00\u79cd\u5e38\u89c1\u5e94\u7528\u573a\u666f\u662fETL\uff08\u62bd\u53d6\u3001\u8f6c\u6362\u3001\u52a0\u8f7d\uff09\u7ba1\u9053\u4efb\u52a1\u3002\u4ece\u4e00\u4e2a\u6216\u591a\u4e2a\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\uff0c\u8fdb\u884c\u4e00\u4e9b\u8f6c\u6362\u64cd\u4f5c\u548c\u4fe1\u606f\u8865\u5145\uff0c\u5c06\u7ed3\u679c\u5b58\u50a8\u8d77\u6765\u3002\u5728\u8fd9\u4e2a\u6559\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528Flink\u7684DataStream API\u5b9e\u73b0\u8fd9\u7c7b\u5e94\u7528\u3002\n+\n+\u8fd9\u91cc\u6ce8\u610f\uff0cFlink\u7684[Table \u548c SQL API]({% link dev/table/index.zh.md %})\u5b8c\u5168\u53ef\u4ee5\u6ee1\u8db3\u5f88\u591aETL\u4f7f\u7528\u573a\u666f\u3002\u4f46\u65e0\u8bba\u4f60\u6700\u7ec8\u662f\u5426\u76f4\u63a5\u4f7f\u7528DataStream API\uff0c\u5bf9\u8fd9\u91cc\u4ecb\u7ecd\u7684\u57fa\u672c\u77e5\u8bc6\u6709\u624e\u5b9e\u7684\u7406\u89e3\u90fd\u662f\u6709\u4ef7\u503c\u7684\u3002\n \n-Note that Flink's [Table and SQL APIs]({% link dev/table/index.zh.md %})\n-are well suited for many ETL use cases. But regardless of whether you ultimately use\n-the DataStream API directly, or not, having a solid understanding the basics presented here will\n-prove valuable.\n \n * This will be replaced by the TOC\n {:toc}\n \n-## Stateless Transformations\n+## \u65e0\u72b6\u6001\u7684\u8f6c\u6362\n \n-This section covers `map()` and `flatmap()`, the basic operations used to implement\n-stateless transformations. The examples in this section assume you are familiar with the\n-Taxi Ride data used in the hands-on exercises in the\n-[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}).\n+\u672c\u8282\u6db5\u76d6\u4e86 `map()` \u548c `flatmap()`\uff0c\u8fd9\u4e24\u79cd\u7b97\u5b50\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u65e0\u72b6\u6001\u8f6c\u6362\u7684\u57fa\u672c\u64cd\u4f5c\u3002\u672c\u8282\u4e2d\u7684\u793a\u4f8b\u5efa\u7acb\u5728\u4f60\u5df2\u7ecf\u719f\u6089[flink-training repo](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %})\u4e2d\u7684\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u7684\u57fa\u7840\u4e0a\u3002\n \n ### `map()`\n \n-In the first exercise you filtered a stream of taxi ride events. In that same code base there's a\n-`GeoUtils` class that provides a static method `GeoUtils.mapToGridCell(float lon, float lat)` which\n-maps a location (longitude, latitude) to a grid cell that refers to an area that is approximately\n-100x100 meters in size.\n+\u5728\u7b2c\u4e00\u4e2a\u7ec3\u4e60\u4e2d\uff0c\u4f60\u8bb2\u8fc7\u6ee4\u51fa\u79df\u8f66\u884c\u7a0b\u6570\u636e\u4e2d\u7684\u4e8b\u4ef6\u3002\u5728\u540c\u4e00\u4ee3\u7801\u4ed3\u5e93\u4e2d\uff0c\u6709\u4e00\u4e2a `GeoUtils` \u7c7b\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9759\u6001\u65b9\u6cd5 `GeoUtils.mapToGridCell(float lon, float lat)`\uff0c\u5b83\u53ef\u4ee5\u5c06\u4f4d\u7f6e\u5750\u6807\uff08\u7ecf\u5ea6\uff0c\u7ef4\u5ea6\uff09\u6620\u5c04\u5230100x100\u7c73\u7684\u5bf9\u5e94\u4e0d\u540c\u533a\u57df\u7684\u7f51\u683c\u5355\u5143\u3002\n \n-Now let's enrich our stream of taxi ride objects by adding `startCell` and `endCell` fields to each\n-event. You can create an `EnrichedRide` object that extends `TaxiRide`, adding these fields:\n+\u73b0\u5728\u8ba9\u6211\u4eec\u4e3a\u6bcf\u4e2a\u51fa\u79df\u8f66\u884c\u7a0b\u65f6\u95f4\u7684\u6570\u636e\u5bf9\u8c61\u589e\u52a0 `startCell` \u548c `endCell` \u5b57\u6bb5\u3002\u4f60\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u7ee7\u627f `TaxiRide` and `EnrichedRide` \u7c7b\uff0c\u6dfb\u52a0\u8fd9\u4e9b\u5b57\u6bb5\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NjkwNA==", "bodyText": "\u201d\u5c06\u53d1\u5c04\u201c \u6539\u6210 \u201d\u4ec5\u8f93\u51fa/\u4ec5\u53d1\u9001\u201c\u662f\u4e0d\u662f\u4f1a\u66f4\u597d\u4e00\u4e9b\uff1f", "url": "https://github.com/apache/flink/pull/12012#discussion_r421256904", "createdAt": "2020-05-07T05:58:38Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -103,9 +91,7 @@ public static class Enrichment implements MapFunction<TaxiRide, EnrichedRide> {\n \n ### `flatmap()`\n \n-A `MapFunction` is suitable only when performing a one-to-one transformation: for each and every\n-stream element coming in, `map()` will emit one transformed element. Otherwise, you will want to use\n-`flatmap()`\n+`MapFunction` \u53ea\u9002\u7528\u4e8e\u4e00\u5bf9\u4e00\u7684\u8f6c\u6362\uff1a\u5bf9\u6bcf\u4e2a\u8fdb\u5165\u7b97\u5b50\u7684\u6d41\u5143\u7d20\uff0c`map()` \u5c06\u53d1\u5c04\u4e00\u4e2a\u8f6c\u6362\u540e\u7684\u5143\u7d20\u3002\u5bf9\u4e8e\u9664\u6b64\u4ee5\u5916\u7684\u573a\u666f\uff0c\u4f60\u5c06\u8981\u4f7f\u7528 `flatmap()`\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzM0MQ==", "bodyText": "\u201d\u53d1\u5c04\u201c\u6539\u6210\u201d\u8f93\u51fa\u201c \u6216\u8005 \u201d\u53d1\u9001\u201c \u7b49\u662f\u4e0d\u662f\u4f1a\u66f4\u597d\u4e00\u4e9b\uff1f", "url": "https://github.com/apache/flink/pull/12012#discussion_r421257341", "createdAt": "2020-05-07T05:59:46Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -131,36 +117,27 @@ public static class NYCEnrichment implements FlatMapFunction<TaxiRide, EnrichedR\n }\n {% endhighlight %}\n \n-With the `Collector` provided in this interface, the `flatmap()` method can emit as many stream\n-elements as you like, including none at all.\n+\u4f7f\u7528\u63a5\u53e3\u4e2d\u63d0\u4f9b\u7684 `Collector` \uff0c`flatmap()` \u53ef\u4ee5\u53d1\u5c04\u4f60\u60f3\u8981\u7684\u4efb\u610f\u6570\u91cf\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u4e00\u4e2a\u90fd\u4e0d\u53d1\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTU2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5c06 \"startCell\" \u8fd9\u4e2a\u5b57\u6bb5\u5b9a\u4e49\u4e3akey\u3002\u8fd9\u79cd\u9009\u62e9key\u7684\u65b9\u5f0f\u6709\u4e2a\u7f3a\u70b9\uff0c\u5c31\u662f\u7f16\u8bd1\u5668\u65e0\u6cd5\u63a8\u65ad\u7528\u4f5c\u952e\u7684\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Flink \u4f1a\u5c06\u952e\u503c\u4f5c\u4e3a\u5143\u7ec4\u4f20\u9012\uff0c\u8fd9\u6709\u65f6\u5019\u4f1a\u6bd4\u8f83\u96be\u5904\u7406\u3002\u6240\u4ee5\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u4e00\u4e2a\u5408\u9002\u7684 KeySelector\uff0c\n          \n          \n            \n            \u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5c06 \"startCell\" \u8fd9\u4e2a\u5b57\u6bb5\u5b9a\u4e49\u4e3a key\u3002\u8fd9\u79cd\u9009\u62e9 key \u7684\u65b9\u5f0f\u6709\u4e2a\u7f3a\u70b9\uff0c\u5c31\u662f\u7f16\u8bd1\u5668\u65e0\u6cd5\u63a8\u65ad\u7528\u4f5c\u952e\u7684\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Flink \u4f1a\u5c06\u952e\u503c\u4f5c\u4e3a\u5143\u7ec4\u4f20\u9012\uff0c\u8fd9\u6709\u65f6\u5019\u4f1a\u6bd4\u8f83\u96be\u5904\u7406\u3002\u6240\u4ee5\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u4e00\u4e2a\u5408\u9002\u7684 KeySelector\uff0c\u6bd4\u5982\uff1a", "url": "https://github.com/apache/flink/pull/12012#discussion_r421259563", "createdAt": "2020-05-07T06:06:38Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -131,36 +117,27 @@ public static class NYCEnrichment implements FlatMapFunction<TaxiRide, EnrichedR\n }\n {% endhighlight %}\n \n-With the `Collector` provided in this interface, the `flatmap()` method can emit as many stream\n-elements as you like, including none at all.\n+\u4f7f\u7528\u63a5\u53e3\u4e2d\u63d0\u4f9b\u7684 `Collector` \uff0c`flatmap()` \u53ef\u4ee5\u53d1\u5c04\u4f60\u60f3\u8981\u7684\u4efb\u610f\u6570\u91cf\u7684\u5143\u7d20\uff0c\u4e5f\u53ef\u4ee5\u4e00\u4e2a\u90fd\u4e0d\u53d1\u3002\n \n {% top %}\n \n ## Keyed Streams\n \n ### `keyBy()`\n \n-It is often very useful to be able to partition a stream around one of its attributes, so that all\n-events with the same value of that attribute are grouped together. For example, suppose you wanted\n-to find the longest taxi rides starting in each of the grid cells. Thinking in terms of a SQL query,\n-this would mean doing some sort of GROUP BY with the `startCell`, while in Flink this is done with\n-`keyBy(KeySelector)`\n+\u5c06\u4e00\u4e2a\u6d41\u6839\u636e\u5176\u4e2d\u7684\u4e00\u4e9b\u5c5e\u6027\u6765\u8fdb\u884c\u5206\u533a\u662f\u5341\u5206\u6709\u7528\u7684\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u4f7f\u6240\u6709\u5177\u6709\u76f8\u540c\u5c5e\u6027\u7684\u4e8b\u4ef6\u5206\u5230\u76f8\u540c\u7684\u7ec4\u91cc\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u60f3\u627e\u5230\u4ece\u6bcf\u4e2a\u7f51\u683c\u5355\u5143\u51fa\u53d1\u7684\u6700\u8fdc\u7684\u51fa\u79df\u8f66\u884c\u7a0b\u3002\u6309 SQL \u67e5\u8be2\u7684\u65b9\u5f0f\u6765\u8003\u8651\uff0c\u8fd9\u610f\u5473\u7740\u8981\u5bf9 `startCell` \u8fdb\u884c GROUP BY \u518d\u6392\u5e8f\uff0c\u5728 Flink \u4e2d\u8fd9\u90e8\u5206\u53ef\u4ee5\u7528 `keyBy(KeySelector)` \u5b9e\u73b0\u3002\n \n {% highlight java %}\n rides\n     .flatMap(new NYCEnrichment())\n     .keyBy(\"startCell\")\n {% endhighlight %}\n \n-Every `keyBy` causes a network shuffle that repartitions the stream. In general this is pretty\n-expensive, since it involves network communication along with serialization and deserialization.\n+\u6bcf\u4e2a `keyBy` \u4f1a\u901a\u8fc7 shuffle \u6765\u4e3a\u6570\u636e\u6d41\u8fdb\u884c\u91cd\u65b0\u5206\u533a\u3002\u603b\u4f53\u6765\u8bf4\u8fd9\u4e2a\u5f00\u9500\u662f\u5f88\u5927\u7684\uff0c\u5b83\u6d89\u53ca\u7f51\u7edc\u901a\u4fe1\u3001\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u3002\n \n <img src=\"{{ site.baseurl }}/fig/keyBy.png\" alt=\"keyBy and network shuffle\" class=\"offset\" width=\"45%\" />\n \n-In the example above, the key has been specified by a field name, \"startCell\". This style of key\n-selection has the drawback that the compiler is unable to infer the type of the field being used for\n-keying, and so Flink will pass around the key values as Tuples, which can be awkward. It is\n-better to use a properly typed KeySelector, e.g.,\n+\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u5c06 \"startCell\" \u8fd9\u4e2a\u5b57\u6bb5\u5b9a\u4e49\u4e3akey\u3002\u8fd9\u79cd\u9009\u62e9key\u7684\u65b9\u5f0f\u6709\u4e2a\u7f3a\u70b9\uff0c\u5c31\u662f\u7f16\u8bd1\u5668\u65e0\u6cd5\u63a8\u65ad\u7528\u4f5c\u952e\u7684\u5b57\u6bb5\u7684\u7c7b\u578b\uff0c\u6240\u4ee5 Flink \u4f1a\u5c06\u952e\u503c\u4f5c\u4e3a\u5143\u7ec4\u4f20\u9012\uff0c\u8fd9\u6709\u65f6\u5019\u4f1a\u6bd4\u8f83\u96be\u5904\u7406\u3002\u6240\u4ee5\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u4e00\u4e2a\u5408\u9002\u7684 KeySelector\uff0c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDM0Ng==", "bodyText": "\u201d\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u7b80\u6d01\u7684 lambda \u8868\u8fbe\u5f0f\uff1a\u201c", "url": "https://github.com/apache/flink/pull/12012#discussion_r421260346", "createdAt": "2020-05-07T06:08:58Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -175,43 +152,35 @@ rides\n         })\n {% endhighlight %}\n \n-which can be more succinctly expressed with a lambda:\n+\u4e5f\u53ef\u4ee5\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4f7f\u5b83\u66f4\u7b80\u6d01\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MTE2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            KeySelector \u4e0d\u4ec5\u9650\u4e8e\u4ece\u4e8b\u4ef6\u4e2d\u62bd\u53d6\u952e\u3002 \u4f60\u4e5f\u53ef\u4ee5\u6309\u60f3\u8981\u7684\u65b9\u5f0f\u8ba1\u7b97\u5f97\u5230\u952e\u503c\uff0c\u53ea\u8981\u6700\u7ec8\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u6709 `hashCode()` \u548c `equals()` \u7684\u5b9e\u73b0\u3002\u8fd9\u4e9b\u9650\u5236\u6761\u4ef6\u4e0d\u5305\u62ec\u4ea7\u751f\u968f\u673a\u6570\u6216\u8005\u8fd4\u56de Arrays \u6216 Enums \u7684 KeySelector \uff0c\u4f46\u4f60\u53ef\u4ee5\u7528\u5143\u7ec4\u548c POJO \u6765\u7ec4\u6210\u952e\uff0c\u53ea\u8981\u4ed6\u4eec\u7684\u5143\u7d20\u9075\u5faa\u4e0a\u8ff0\u6761\u4ef6\u3002\n          \n          \n            \n            KeySelector \u4e0d\u4ec5\u9650\u4e8e\u4ece\u4e8b\u4ef6\u4e2d\u62bd\u53d6\u952e\u3002\u4f60\u4e5f\u53ef\u4ee5\u6309\u60f3\u8981\u7684\u65b9\u5f0f\u8ba1\u7b97\u5f97\u5230\u952e\u503c\uff0c\u53ea\u8981\u6700\u7ec8\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u5b9e\u73b0\u4e86 `hashCode()` \u548c `equals()`\u3002\u8fd9\u4e9b\u9650\u5236\u6761\u4ef6\u4e0d\u5305\u62ec\u4ea7\u751f\u968f\u673a\u6570\u6216\u8005\u8fd4\u56de Arrays \u6216 Enums \u7684 KeySelector\uff0c\u4f46\u4f60\u53ef\u4ee5\u7528\u5143\u7ec4\u548c POJO \u6765\u7ec4\u6210\u952e\uff0c\u53ea\u8981\u4ed6\u4eec\u7684\u5143\u7d20\u9075\u5faa\u4e0a\u8ff0\u6761\u4ef6\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421261166", "createdAt": "2020-05-07T06:11:13Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -175,43 +152,35 @@ rides\n         })\n {% endhighlight %}\n \n-which can be more succinctly expressed with a lambda:\n+\u4e5f\u53ef\u4ee5\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4f7f\u5b83\u66f4\u7b80\u6d01\uff1a\n \n {% highlight java %}\n rides\n     .flatMap(new NYCEnrichment())\n     .keyBy(enrichedRide -> enrichedRide.startCell)\n {% endhighlight %}\n \n-### Keys are computed\n+### \u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u952e\n \n-KeySelectors aren't limited to extracting a key from your events. They can, instead, \n-compute the key in whatever way you want, so long as the resulting key is deterministic,\n-and has valid implementations of `hashCode()` and `equals()`. This restriction rules out\n-KeySelectors that generate random numbers, or that return Arrays or Enums, but you\n-can have composite keys using Tuples or POJOs, for example, so long as their elements\n-follow these same rules.\n+KeySelector \u4e0d\u4ec5\u9650\u4e8e\u4ece\u4e8b\u4ef6\u4e2d\u62bd\u53d6\u952e\u3002 \u4f60\u4e5f\u53ef\u4ee5\u6309\u60f3\u8981\u7684\u65b9\u5f0f\u8ba1\u7b97\u5f97\u5230\u952e\u503c\uff0c\u53ea\u8981\u6700\u7ec8\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u6709 `hashCode()` \u548c `equals()` \u7684\u5b9e\u73b0\u3002\u8fd9\u4e9b\u9650\u5236\u6761\u4ef6\u4e0d\u5305\u62ec\u4ea7\u751f\u968f\u673a\u6570\u6216\u8005\u8fd4\u56de Arrays \u6216 Enums \u7684 KeySelector \uff0c\u4f46\u4f60\u53ef\u4ee5\u7528\u5143\u7ec4\u548c POJO \u6765\u7ec4\u6210\u952e\uff0c\u53ea\u8981\u4ed6\u4eec\u7684\u5143\u7d20\u9075\u5faa\u4e0a\u8ff0\u6761\u4ef6\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MTQxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u952e\u5fc5\u987b\u6309\u786e\u5b9a\u7684\u65b9\u5f0f\u4ea7\u751f\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u518d\u9700\u8981\u7684\u65f6\u5019\u88ab\u91cd\u65b0\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u88ab\u5e26\u5728\u6d41\u7684\u8bb0\u5f55\u4e2d\u3002\n          \n          \n            \n            \u952e\u5fc5\u987b\u6309\u786e\u5b9a\u7684\u65b9\u5f0f\u4ea7\u751f\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u5728\u9700\u8981\u7684\u65f6\u5019\u88ab\u91cd\u65b0\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u88ab\u5e26\u5728\u6d41\u8bb0\u5f55\u4e2d\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421261411", "createdAt": "2020-05-07T06:12:03Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -175,43 +152,35 @@ rides\n         })\n {% endhighlight %}\n \n-which can be more succinctly expressed with a lambda:\n+\u4e5f\u53ef\u4ee5\u4f7f\u7528 lambda \u8868\u8fbe\u5f0f\u4f7f\u5b83\u66f4\u7b80\u6d01\uff1a\n \n {% highlight java %}\n rides\n     .flatMap(new NYCEnrichment())\n     .keyBy(enrichedRide -> enrichedRide.startCell)\n {% endhighlight %}\n \n-### Keys are computed\n+### \u901a\u8fc7\u8ba1\u7b97\u5f97\u5230\u952e\n \n-KeySelectors aren't limited to extracting a key from your events. They can, instead, \n-compute the key in whatever way you want, so long as the resulting key is deterministic,\n-and has valid implementations of `hashCode()` and `equals()`. This restriction rules out\n-KeySelectors that generate random numbers, or that return Arrays or Enums, but you\n-can have composite keys using Tuples or POJOs, for example, so long as their elements\n-follow these same rules.\n+KeySelector \u4e0d\u4ec5\u9650\u4e8e\u4ece\u4e8b\u4ef6\u4e2d\u62bd\u53d6\u952e\u3002 \u4f60\u4e5f\u53ef\u4ee5\u6309\u60f3\u8981\u7684\u65b9\u5f0f\u8ba1\u7b97\u5f97\u5230\u952e\u503c\uff0c\u53ea\u8981\u6700\u7ec8\u7ed3\u679c\u662f\u786e\u5b9a\u7684\uff0c\u5e76\u4e14\u6709 `hashCode()` \u548c `equals()` \u7684\u5b9e\u73b0\u3002\u8fd9\u4e9b\u9650\u5236\u6761\u4ef6\u4e0d\u5305\u62ec\u4ea7\u751f\u968f\u673a\u6570\u6216\u8005\u8fd4\u56de Arrays \u6216 Enums \u7684 KeySelector \uff0c\u4f46\u4f60\u53ef\u4ee5\u7528\u5143\u7ec4\u548c POJO \u6765\u7ec4\u6210\u952e\uff0c\u53ea\u8981\u4ed6\u4eec\u7684\u5143\u7d20\u9075\u5faa\u4e0a\u8ff0\u6761\u4ef6\u3002\n \n-The keys must be produced in a deterministic way, because they are recomputed whenever they\n-are needed, rather than being attached to the stream records.\n+\u952e\u5fc5\u987b\u6309\u786e\u5b9a\u7684\u65b9\u5f0f\u4ea7\u751f\uff0c\u56e0\u4e3a\u5b83\u4eec\u4f1a\u518d\u9700\u8981\u7684\u65f6\u5019\u88ab\u91cd\u65b0\u8ba1\u7b97\uff0c\u800c\u4e0d\u662f\u4e00\u76f4\u88ab\u5e26\u5728\u6d41\u7684\u8bb0\u5f55\u4e2d\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MjkzNw==", "bodyText": "\u8fd9\u91cc\u7684\u610f\u601d\u662f\u6307\u201d\u73b0\u5728\u4ea7\u751f\u7684\u6d41\u4ec5\u5305\u542b\u6bcf\u4e2a startCell \u7684\u90a3\u4e9b longest rides \u7684\u6570\u636e\u201c\uff1f", "url": "https://github.com/apache/flink/pull/12012#discussion_r421262937", "createdAt": "2020-05-07T06:16:06Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -231,13 +200,9 @@ DataStream<Tuple2<Integer, Minutes>> minutesByStartCell = enrichedNYCRides\n     });\n {% endhighlight %}\n \n-Now it is possible to produce a stream that contains only those rides that are the longest rides\n-ever seen (to that point) for each `startCell`.\n+\u73b0\u5728\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e2a `startCell` \u627e\u5230\u6700\u957f\u7684\u884c\u7a0b\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6d41\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MzM4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n          \n          \n            \n            \u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u6d89\u53ca\u5230\u6709\u72b6\u6001\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink \u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421273387", "createdAt": "2020-05-07T06:43:20Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTI4Mw==", "bodyText": "\u201d\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\u201c -> \"\u5728\u6d41\u5904\u7406\u573a\u666f\u4e2d\u201c \u662f\u5426\u4f1a\u66f4\u597d\u5462\uff1f\u6216\u8005\u5176\u4ed6\u7684\u7ffb\u8bd1\u3002\u73b0\u5728\u8fd9\u4e2a\u7ffb\u8bd1\u4e2a\u4eba\u611f\u89c9\u6709\u70b9\u4e0d\u592a\u987a", "url": "https://github.com/apache/flink/pull/12012#discussion_r421341283", "createdAt": "2020-05-07T08:47:00Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n \n-Whenever state gets involved in your application, you should think about how large the state might\n-become. Whenever the key space is unbounded, then so is the amount of state Flink will need.\n+\u53ea\u8981\u5e94\u7528\u4e2d\u6709\u72b6\u6001\uff0c\u4f60\u5c31\u5e94\u8be5\u8003\u8651\u72b6\u6001\u7684\u5927\u5c0f\u3002\u5982\u679c\u952e\u503c\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u90a3 Flink \u7684\u72b6\u6001\u9700\u8981\u7684\u7a7a\u95f4\u4e5f\u540c\u6837\u662f\u65e0\u9650\u7684\u3002\n \n-When working with streams, it generally makes more sense to think in terms of aggregations over\n-finite windows, rather than over the entire stream.\n+\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\uff0c\u8003\u8651\u6709\u9650\u7a97\u53e3\u7684\u805a\u5408\u5f80\u5f80\u6bd4\u6574\u4e2a\u6d41\u805a\u5408\u66f4\u6709\u610f\u4e49\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTg0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f7f\u7528\u7684\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002\n          \n          \n            \n            \u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421341849", "createdAt": "2020-05-07T08:47:53Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n \n-Whenever state gets involved in your application, you should think about how large the state might\n-become. Whenever the key space is unbounded, then so is the amount of state Flink will need.\n+\u53ea\u8981\u5e94\u7528\u4e2d\u6709\u72b6\u6001\uff0c\u4f60\u5c31\u5e94\u8be5\u8003\u8651\u72b6\u6001\u7684\u5927\u5c0f\u3002\u5982\u679c\u952e\u503c\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u90a3 Flink \u7684\u72b6\u6001\u9700\u8981\u7684\u7a7a\u95f4\u4e5f\u540c\u6837\u662f\u65e0\u9650\u7684\u3002\n \n-When working with streams, it generally makes more sense to think in terms of aggregations over\n-finite windows, rather than over the entire stream.\n+\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\uff0c\u8003\u8651\u6709\u9650\u7a97\u53e3\u7684\u805a\u5408\u5f80\u5f80\u6bd4\u6574\u4e2a\u6d41\u805a\u5408\u66f4\u6709\u610f\u4e49\u3002\n \n-### `reduce()` and other aggregators\n+### `reduce()` \u548c\u5176\u4ed6\u805a\u5408\u7b97\u5b50\n \n-`maxBy()`, used above, is just one example of a number of aggregator functions available on Flink's\n-`KeyedStream`s. There is also a more general purpose `reduce()` function that you can use to\n-implement your own custom aggregations.\n+\u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f7f\u7528\u7684\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MjQ4Mw==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u662f\u5426\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\u5462\uff1f", "url": "https://github.com/apache/flink/pull/12012#discussion_r421342483", "createdAt": "2020-05-07T08:48:51Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n \n-Whenever state gets involved in your application, you should think about how large the state might\n-become. Whenever the key space is unbounded, then so is the amount of state Flink will need.\n+\u53ea\u8981\u5e94\u7528\u4e2d\u6709\u72b6\u6001\uff0c\u4f60\u5c31\u5e94\u8be5\u8003\u8651\u72b6\u6001\u7684\u5927\u5c0f\u3002\u5982\u679c\u952e\u503c\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u90a3 Flink \u7684\u72b6\u6001\u9700\u8981\u7684\u7a7a\u95f4\u4e5f\u540c\u6837\u662f\u65e0\u9650\u7684\u3002\n \n-When working with streams, it generally makes more sense to think in terms of aggregations over\n-finite windows, rather than over the entire stream.\n+\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\uff0c\u8003\u8651\u6709\u9650\u7a97\u53e3\u7684\u805a\u5408\u5f80\u5f80\u6bd4\u6574\u4e2a\u6d41\u805a\u5408\u66f4\u6709\u610f\u4e49\u3002\n \n-### `reduce()` and other aggregators\n+### `reduce()` \u548c\u5176\u4ed6\u805a\u5408\u7b97\u5b50\n \n-`maxBy()`, used above, is just one example of a number of aggregator functions available on Flink's\n-`KeyedStream`s. There is also a more general purpose `reduce()` function that you can use to\n-implement your own custom aggregations.\n+\u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f7f\u7528\u7684\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002\n \n {% top %}\n \n-## Stateful Transformations\n+## \u6709\u72b6\u6001\u7684\u8f6c\u6362\n \n-### Why is Flink Involved in Managing State?\n+### \u4e3a\u4ec0\u4e48 Flink \u8981\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\uff1f", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MzA2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u5728Flink\u4e0d\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u5e94\u7528\u4e5f\u53ef\u4ee5\u4f7f\u7528\u72b6\u6001\uff0c\u4f46Flink\u4e3a\u5176\u7ba1\u7406\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f15\u4eba\u6ce8\u76ee\u7684\u7279\u6027\uff1a\n          \n          \n            \n            \u5728 Flink \u4e0d\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u5e94\u7528\u4e5f\u53ef\u4ee5\u4f7f\u7528\u72b6\u6001\uff0c\u4f46 Flink \u4e3a\u5176\u7ba1\u7406\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f15\u4eba\u6ce8\u76ee\u7684\u7279\u6027\uff1a", "url": "https://github.com/apache/flink/pull/12012#discussion_r421343069", "createdAt": "2020-05-07T08:49:41Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n \n-Whenever state gets involved in your application, you should think about how large the state might\n-become. Whenever the key space is unbounded, then so is the amount of state Flink will need.\n+\u53ea\u8981\u5e94\u7528\u4e2d\u6709\u72b6\u6001\uff0c\u4f60\u5c31\u5e94\u8be5\u8003\u8651\u72b6\u6001\u7684\u5927\u5c0f\u3002\u5982\u679c\u952e\u503c\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u90a3 Flink \u7684\u72b6\u6001\u9700\u8981\u7684\u7a7a\u95f4\u4e5f\u540c\u6837\u662f\u65e0\u9650\u7684\u3002\n \n-When working with streams, it generally makes more sense to think in terms of aggregations over\n-finite windows, rather than over the entire stream.\n+\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\uff0c\u8003\u8651\u6709\u9650\u7a97\u53e3\u7684\u805a\u5408\u5f80\u5f80\u6bd4\u6574\u4e2a\u6d41\u805a\u5408\u66f4\u6709\u610f\u4e49\u3002\n \n-### `reduce()` and other aggregators\n+### `reduce()` \u548c\u5176\u4ed6\u805a\u5408\u7b97\u5b50\n \n-`maxBy()`, used above, is just one example of a number of aggregator functions available on Flink's\n-`KeyedStream`s. There is also a more general purpose `reduce()` function that you can use to\n-implement your own custom aggregations.\n+\u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f7f\u7528\u7684\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002\n \n {% top %}\n \n-## Stateful Transformations\n+## \u6709\u72b6\u6001\u7684\u8f6c\u6362\n \n-### Why is Flink Involved in Managing State?\n+### \u4e3a\u4ec0\u4e48 Flink \u8981\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\uff1f\n \n-Your applications are certainly capable of using state without getting Flink involved in managing it\n--- but Flink offers some compelling features for the state it manages:\n+\u5728Flink\u4e0d\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u5e94\u7528\u4e5f\u53ef\u4ee5\u4f7f\u7528\u72b6\u6001\uff0c\u4f46Flink\u4e3a\u5176\u7ba1\u7406\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f15\u4eba\u6ce8\u76ee\u7684\u7279\u6027\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MzM4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **\u6301\u4e45\u6027**: Flink \u72b6\u6001\u662f\u5bb9\u9519\u7684\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u81ea\u52a8\u6309\u4e00\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u4ea7\u751f checkpoint\uff0c \u5e76\u4e14\u5728\u4efb\u52a1\u5931\u8d25\u540e\u8fdb\u884c\u6062\u590d\n          \n          \n            \n            * **\u6301\u4e45\u6027**: Flink \u72b6\u6001\u662f\u5bb9\u9519\u7684\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u81ea\u52a8\u6309\u4e00\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u4ea7\u751f checkpoint\uff0c\u5e76\u4e14\u5728\u4efb\u52a1\u5931\u8d25\u540e\u8fdb\u884c\u6062\u590d", "url": "https://github.com/apache/flink/pull/12012#discussion_r421343381", "createdAt": "2020-05-07T08:50:11Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n \n-Whenever state gets involved in your application, you should think about how large the state might\n-become. Whenever the key space is unbounded, then so is the amount of state Flink will need.\n+\u53ea\u8981\u5e94\u7528\u4e2d\u6709\u72b6\u6001\uff0c\u4f60\u5c31\u5e94\u8be5\u8003\u8651\u72b6\u6001\u7684\u5927\u5c0f\u3002\u5982\u679c\u952e\u503c\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u90a3 Flink \u7684\u72b6\u6001\u9700\u8981\u7684\u7a7a\u95f4\u4e5f\u540c\u6837\u662f\u65e0\u9650\u7684\u3002\n \n-When working with streams, it generally makes more sense to think in terms of aggregations over\n-finite windows, rather than over the entire stream.\n+\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\uff0c\u8003\u8651\u6709\u9650\u7a97\u53e3\u7684\u805a\u5408\u5f80\u5f80\u6bd4\u6574\u4e2a\u6d41\u805a\u5408\u66f4\u6709\u610f\u4e49\u3002\n \n-### `reduce()` and other aggregators\n+### `reduce()` \u548c\u5176\u4ed6\u805a\u5408\u7b97\u5b50\n \n-`maxBy()`, used above, is just one example of a number of aggregator functions available on Flink's\n-`KeyedStream`s. There is also a more general purpose `reduce()` function that you can use to\n-implement your own custom aggregations.\n+\u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f7f\u7528\u7684\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002\n \n {% top %}\n \n-## Stateful Transformations\n+## \u6709\u72b6\u6001\u7684\u8f6c\u6362\n \n-### Why is Flink Involved in Managing State?\n+### \u4e3a\u4ec0\u4e48 Flink \u8981\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\uff1f\n \n-Your applications are certainly capable of using state without getting Flink involved in managing it\n--- but Flink offers some compelling features for the state it manages:\n+\u5728Flink\u4e0d\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\u7684\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u5e94\u7528\u4e5f\u53ef\u4ee5\u4f7f\u7528\u72b6\u6001\uff0c\u4f46Flink\u4e3a\u5176\u7ba1\u7406\u72b6\u6001\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5f15\u4eba\u6ce8\u76ee\u7684\u7279\u6027\uff1a\n \n-* **local**: Flink state is kept local to the machine that processes it, and can be accessed at memory speed\n-* **durable**: Flink state is fault-tolerant, i.e., it is automatically checkpointed at regular intervals, and is restored upon failure\n-* **vertically scalable**: Flink state can be kept in embedded RocksDB instances that scale by adding more local disk\n-* **horizontally scalable**: Flink state is redistributed as your cluster grows and shrinks\n-* **queryable**: Flink state can be queried externally via the [Queryable State API]({% link dev/stream/state/queryable_state.zh.md %}).\n+* **\u672c\u5730\u6027**: Flink \u72b6\u6001\u662f\u5b58\u50a8\u5728\u4f7f\u7528\u5b83\u7684\u673a\u5668\u672c\u5730\u7684\uff0c\u5e76\u4e14\u53ef\u4ee5\u4ee5\u5185\u5b58\u8bbf\u95ee\u901f\u5ea6\u6765\u83b7\u53d6\n+* **\u6301\u4e45\u6027**: Flink \u72b6\u6001\u662f\u5bb9\u9519\u7684\uff0c\u4f8b\u5982\uff0c\u5b83\u53ef\u4ee5\u81ea\u52a8\u6309\u4e00\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u4ea7\u751f checkpoint\uff0c \u5e76\u4e14\u5728\u4efb\u52a1\u5931\u8d25\u540e\u8fdb\u884c\u6062\u590d", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MjA0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u5f53 flatMap \u65b9\u6cd5\u8c03\u7528 `keyHasBeenSeen.value()`\uff0cFlink \u8fd0\u884c\u65f6\u5c06\u5728 _\u5f53\u524d\u952e\u7684\u4e0a\u4e0b\u6587_ \u4e2d\u68c0\u7d22\u72b6\u6001\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5b83\u4e3a `null` \u65f6\uff0c\u624d\u4f1a\u8f93\u51fa\u5f53\u524d\u4e8b\u4ef6\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u540c\u65f6\u4e5f\u5c06\u66f4\u65b0 `keyHasBeenSeen` \u4e3a `true`\u3002\n          \n          \n            \n            \u5f53 flatMap \u65b9\u6cd5\u8c03\u7528 `keyHasBeenSeen.value()` \u65f6\uff0cFlink \u4f1a\u5728 _\u5f53\u524d\u952e\u7684\u4e0a\u4e0b\u6587_ \u4e2d\u68c0\u7d22\u72b6\u6001\u503c\uff0c\u53ea\u6709\u5f53\u72b6\u6001\u4e3a `null` \u65f6\uff0c\u624d\u4f1a\u8f93\u51fa\u5f53\u524d\u4e8b\u4ef6\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u540c\u65f6\u4e5f\u5c06\u66f4\u65b0 `keyHasBeenSeen` \u4e3a `true`\u3002", "url": "https://github.com/apache/flink/pull/12012#discussion_r421352044", "createdAt": "2020-05-07T09:03:47Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -376,76 +320,52 @@ public static class Deduplicator extends RichFlatMapFunction<Event, Event> {\n }\n {% endhighlight %}\n \n-When the flatMap method calls `keyHasBeenSeen.value()`, Flink's runtime looks up the value of this\n-piece of state _for the key in context_, and only if it is `null` does it go ahead and collect the\n-event to the output. It also updates `keyHasBeenSeen` to `true` in this case. \n+\u5f53 flatMap \u65b9\u6cd5\u8c03\u7528 `keyHasBeenSeen.value()`\uff0cFlink \u8fd0\u884c\u65f6\u5c06\u5728 _\u5f53\u524d\u952e\u7684\u4e0a\u4e0b\u6587_ \u4e2d\u68c0\u7d22\u72b6\u6001\u7684\u503c\uff0c\u53ea\u6709\u5f53\u5b83\u4e3a `null` \u65f6\uff0c\u624d\u4f1a\u8f93\u51fa\u5f53\u524d\u4e8b\u4ef6\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5b83\u540c\u65f6\u4e5f\u5c06\u66f4\u65b0 `keyHasBeenSeen` \u4e3a `true`\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 318}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee248e0553fde132e61974c693d1790d454c3155", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/ee248e0553fde132e61974c693d1790d454c3155", "committedDate": "2020-05-07T11:24:54Z", "message": "Merge remote-tracking branch 'origin/master'"}, "afterCommit": {"oid": "5794cc1b8aa17c27c9a3a4427bdb65cda2368bd4", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/5794cc1b8aa17c27c9a3a4427bdb65cda2368bd4", "committedDate": "2020-05-07T11:22:58Z", "message": "Update docs/training/etl.zh.md"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5794cc1b8aa17c27c9a3a4427bdb65cda2368bd4", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/5794cc1b8aa17c27c9a3a4427bdb65cda2368bd4", "committedDate": "2020-05-07T11:22:58Z", "message": "Update docs/training/etl.zh.md"}, "afterCommit": {"oid": "b1e3e4a05c479c22f85552e6a55c99b56ad3f446", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/b1e3e4a05c479c22f85552e6a55c99b56ad3f446", "committedDate": "2020-05-08T01:38:55Z", "message": "Update docs/training/etl.zh.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjAxMjAx", "url": "https://github.com/apache/flink/pull/12012#pullrequestreview-408601201", "createdAt": "2020-05-09T02:01:39Z", "commit": {"oid": "b1e3e4a05c479c22f85552e6a55c99b56ad3f446"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjowMTo0MFrOGS3uUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjowMjowMFrOGS3ubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MDUzMA==", "bodyText": "\u8fd9\u4e2a\u7ffb\u8bd1\u6211\u89c9\u5f97\u53ef\u4ee5\u7684", "url": "https://github.com/apache/flink/pull/12012#discussion_r422440530", "createdAt": "2020-05-09T02:01:40Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -231,13 +200,9 @@ DataStream<Tuple2<Integer, Minutes>> minutesByStartCell = enrichedNYCRides\n     });\n {% endhighlight %}\n \n-Now it is possible to produce a stream that contains only those rides that are the longest rides\n-ever seen (to that point) for each `startCell`.\n+\u73b0\u5728\u5c31\u53ef\u4ee5\u5bf9\u6bcf\u4e2a `startCell` \u627e\u5230\u6700\u957f\u7684\u884c\u7a0b\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u6d41\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MjkzNw=="}, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MDU1OA==", "bodyText": "\u8fd9\u4e2a\u7ffb\u8bd1\u6211\u89c9\u5f97\u53ef\u4ee5\u7684", "url": "https://github.com/apache/flink/pull/12012#discussion_r422440558", "createdAt": "2020-05-09T02:02:00Z", "author": {"login": "klion26"}, "path": "docs/training/etl.zh.md", "diffHunk": "@@ -262,65 +227,51 @@ The output stream now contains a record for each key every time the duration rea\n     ...\n     1> (50797,12M)\n \n-### (Implicit) State\n+### \uff08\u9690\u5f0f\u7684\uff09\u72b6\u6001\n \n-This is the first example in this training that involves stateful streaming. Though the state is\n-being handled transparently, Flink has to keep track of the maximum duration for each distinct\n-key.\n+\u8fd9\u662f\u57f9\u8bad\u4e2d\u7b2c\u4e00\u4e2a\u5305\u542b\u72b6\u6001\u7684\u6d41\u7684\u4f8b\u5b50\u3002\u5c3d\u7ba1\u72b6\u6001\u7684\u5904\u7406\u662f\u900f\u660e\u7684\uff0cFlink\u5fc5\u987b\u8ddf\u8e2a\u6bcf\u4e2a\u4e0d\u540c\u7684\u952e\u7684\u6700\u5927\u65f6\u957f\u3002\n \n-Whenever state gets involved in your application, you should think about how large the state might\n-become. Whenever the key space is unbounded, then so is the amount of state Flink will need.\n+\u53ea\u8981\u5e94\u7528\u4e2d\u6709\u72b6\u6001\uff0c\u4f60\u5c31\u5e94\u8be5\u8003\u8651\u72b6\u6001\u7684\u5927\u5c0f\u3002\u5982\u679c\u952e\u503c\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\uff0c\u90a3 Flink \u7684\u72b6\u6001\u9700\u8981\u7684\u7a7a\u95f4\u4e5f\u540c\u6837\u662f\u65e0\u9650\u7684\u3002\n \n-When working with streams, it generally makes more sense to think in terms of aggregations over\n-finite windows, rather than over the entire stream.\n+\u5f53\u6211\u4eec\u5728\u6d41\u4e0a\u4f5c\u4e1a\u65f6\uff0c\u8003\u8651\u6709\u9650\u7a97\u53e3\u7684\u805a\u5408\u5f80\u5f80\u6bd4\u6574\u4e2a\u6d41\u805a\u5408\u66f4\u6709\u610f\u4e49\u3002\n \n-### `reduce()` and other aggregators\n+### `reduce()` \u548c\u5176\u4ed6\u805a\u5408\u7b97\u5b50\n \n-`maxBy()`, used above, is just one example of a number of aggregator functions available on Flink's\n-`KeyedStream`s. There is also a more general purpose `reduce()` function that you can use to\n-implement your own custom aggregations.\n+\u4e0a\u9762\u7528\u5230\u7684 `maxBy()` \u53ea\u662f Flink \u4e2d `KeyedStream` \u4e0a\u4f7f\u7528\u7684\u4f17\u591a\u805a\u5408\u51fd\u6570\u4e2d\u7684\u4e00\u4e2a\u3002\u8fd8\u6709\u4e00\u4e2a\u66f4\u901a\u7528\u7684 `reduce()` \u51fd\u6570\u53ef\u4ee5\u7528\u6765\u5b9e\u73b0\u4f60\u7684\u81ea\u5b9a\u4e49\u805a\u5408\u3002\n \n {% top %}\n \n-## Stateful Transformations\n+## \u6709\u72b6\u6001\u7684\u8f6c\u6362\n \n-### Why is Flink Involved in Managing State?\n+### \u4e3a\u4ec0\u4e48 Flink \u8981\u53c2\u4e0e\u7ba1\u7406\u72b6\u6001\uff1f", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MjQ4Mw=="}, "originalCommit": {"oid": "d3c197de000c8ffbb4cd20a8244e906bd90487a2"}, "originalPosition": 233}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53e1c3519fd4cb28045bfa26f23371e38f7b4929", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/53e1c3519fd4cb28045bfa26f23371e38f7b4929", "committedDate": "2020-05-09T03:27:55Z", "message": "[FLINK-17289][docs]Translate tutorials/etl.md to Chinese"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c5a2dbdbfda15d94700752f46e5b895b47235b0", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/8c5a2dbdbfda15d94700752f46e5b895b47235b0", "committedDate": "2020-05-09T03:26:56Z", "message": "Update docs/training/etl.zh.md"}, "afterCommit": {"oid": "53e1c3519fd4cb28045bfa26f23371e38f7b4929", "author": {"user": {"login": "liying919", "name": "delayer"}}, "url": "https://github.com/apache/flink/commit/53e1c3519fd4cb28045bfa26f23371e38f7b4929", "committedDate": "2020-05-09T03:27:55Z", "message": "[FLINK-17289][docs]Translate tutorials/etl.md to Chinese"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NjEwNzcz", "url": "https://github.com/apache/flink/pull/12012#pullrequestreview-408610773", "createdAt": "2020-05-09T04:18:33Z", "commit": {"oid": "53e1c3519fd4cb28045bfa26f23371e38f7b4929"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4621, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}