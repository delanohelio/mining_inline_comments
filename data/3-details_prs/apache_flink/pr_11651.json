{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDEwMDA4", "number": 11651, "title": "[FLINK-16995][table-common] Add new data structure interfaces in table-common", "bodyText": "What is the purpose of the change\nThis add the new data structure interfaces to table-common which has been discussed in FLIP-95.\nThe planner and connector refactoring will happen in a separate PR.\nBrief change log\nNew interfaces and JavaDocs for all of them added.\nVerifying this change\n\nAll of them are interfaces except DecimalData and TimestampData, the corresponing tests will be moved to table-common when refactoring planner.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-04-07T03:05:59Z", "url": "https://github.com/apache/flink/pull/11651", "merged": true, "mergeCommit": {"oid": "3933b0466d7258fb69b3f2c8eac9d8a1fcecbe8e"}, "closed": true, "closedAt": "2020-04-14T14:10:50Z", "author": {"login": "wuchong"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVyzD3gH2gAyNDAwMDEwMDA4OmRjNGIwYzU0MWY3ZDVjODQ0M2Y4NWM1ZjFmYTM3YzIyYTEwZTI2ZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZvGVpgFqTM5NzA4NjA3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dc4b0c541f7d5c8443f85c5f1fa37c22a10e26fb", "author": {"user": {"login": "wuchong", "name": "Jark Wu"}}, "url": "https://github.com/apache/flink/commit/dc4b0c541f7d5c8443f85c5f1fa37c22a10e26fb", "committedDate": "2020-04-09T02:09:31Z", "message": "[FLINK-16995][table-common] Add new data structure interfaces in table-common"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8431a5ea4621539a6a45b741006ae9a9bffc3553", "author": {"user": {"login": "wuchong", "name": "Jark Wu"}}, "url": "https://github.com/apache/flink/commit/8431a5ea4621539a6a45b741006ae9a9bffc3553", "committedDate": "2020-04-09T02:09:34Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d13c6fac2cb9688d3c8577744d7a3279cf805491", "author": {"user": {"login": "wuchong", "name": "Jark Wu"}}, "url": "https://github.com/apache/flink/commit/d13c6fac2cb9688d3c8577744d7a3279cf805491", "committedDate": "2020-04-09T03:19:05Z", "message": "Add GenericArrayData, GenericMapData, GenericRowData"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b67024e06b0de3fc6fa79ce7e1296151e992819", "author": {"user": {"login": "wuchong", "name": "Jark Wu"}}, "url": "https://github.com/apache/flink/commit/6b67024e06b0de3fc6fa79ce7e1296151e992819", "committedDate": "2020-04-07T05:34:59Z", "message": "checkstyle"}, "afterCommit": {"oid": "d13c6fac2cb9688d3c8577744d7a3279cf805491", "author": {"user": {"login": "wuchong", "name": "Jark Wu"}}, "url": "https://github.com/apache/flink/commit/d13c6fac2cb9688d3c8577744d7a3279cf805491", "committedDate": "2020-04-09T03:19:05Z", "message": "Add GenericArrayData, GenericMapData, GenericRowData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f24fe42d98e90e7419aaba8c250f44f6e855e6a5", "author": {"user": {"login": "twalthr", "name": "Timo Walther"}}, "url": "https://github.com/apache/flink/commit/f24fe42d98e90e7419aaba8c250f44f6e855e6a5", "committedDate": "2020-04-10T10:10:06Z", "message": "Improve terminology and consistency of JavaDocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6123b4f30f049238128d277a864a02caa96d8f31", "author": {"user": {"login": "wuchong", "name": "Jark Wu"}}, "url": "https://github.com/apache/flink/commit/6123b4f30f049238128d277a864a02caa96d8f31", "committedDate": "2020-04-10T13:12:41Z", "message": "remove \"This data structure is immutable\" from Javadoc of StringData"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDIzNTU2", "url": "https://github.com/apache/flink/pull/11651#pullrequestreview-391423556", "createdAt": "2020-04-10T12:45:43Z", "commit": {"oid": "f24fe42d98e90e7419aaba8c250f44f6e855e6a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMzoxN1rOGD56bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzowMzoxN1rOGD56bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc0Nzc1OQ==", "bodyText": "BinaryStringData is mutable, because it is lazy (de)serialized. The binary is lazily materialized when needed, so it's not thread-safe.", "url": "https://github.com/apache/flink/pull/11651#discussion_r406747759", "createdAt": "2020-04-10T13:03:17Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/StringData.java", "diffHunk": "@@ -23,43 +23,48 @@\n import org.apache.flink.table.types.logical.VarCharType;\n \n /**\n- * {@link StringData} is an internal data structure represents data of {@link VarCharType}\n- * and {@link CharType} in Flink Table/SQL.\n+ * An internal data structure representing data of {@link CharType} and {@link VarCharType}.\n+ *\n+ * <p>This data structure is immutable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f24fe42d98e90e7419aaba8c250f44f6e855e6a5"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzg0Mjcz", "url": "https://github.com/apache/flink/pull/11651#pullrequestreview-392784273", "createdAt": "2020-04-14T10:05:44Z", "commit": {"oid": "6123b4f30f049238128d277a864a02caa96d8f31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MDg2MDcw", "url": "https://github.com/apache/flink/pull/11651#pullrequestreview-397086070", "createdAt": "2020-04-21T08:06:38Z", "commit": {"oid": "6123b4f30f049238128d277a864a02caa96d8f31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNjozOVrOGI4aMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODowNjozOVrOGI4aMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk2NjAwMA==", "bodyText": "Hi @wuchong , this is a wrong implementation here. Can you take https://issues.apache.org/jira/browse/FLINK-16922 and fix that?", "url": "https://github.com/apache/flink/pull/11651#discussion_r411966000", "createdAt": "2020-04-21T08:06:39Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/data/DecimalData.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.data;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.table.types.logical.DecimalType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.math.RoundingMode;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * An internal data structure representing data of {@link DecimalType}.\n+ *\n+ * <p>This data structure is immutable and might store decimal values in a compact representation (as\n+ * a long value) if values are small enough.\n+ */\n+@PublicEvolving\n+public final class DecimalData implements Comparable<DecimalData> {\n+\n+\t// member fields and static fields are package-visible,\n+\t// in order to be accessible for DecimalDataUtils\n+\n+\tstatic final int MAX_COMPACT_PRECISION = 18;\n+\n+\t/**\n+\t * Maximum number of decimal digits an Int can represent. (1e9 < Int.MaxValue < 1e10)\n+\t */\n+\tstatic final int MAX_INT_DIGITS = 9;\n+\n+\t/**\n+\t * Maximum number of decimal digits a Long can represent. (1e18 < Long.MaxValue < 1e19)\n+\t */\n+\tstatic final int MAX_LONG_DIGITS = 18;\n+\n+\tstatic final long[] POW10 = new long[MAX_COMPACT_PRECISION + 1];\n+\n+\tstatic {\n+\t\tPOW10[0] = 1;\n+\t\tfor (int i = 1; i < POW10.length; i++) {\n+\t\t\tPOW10[i] = 10 * POW10[i - 1];\n+\t\t}\n+\t}\n+\n+\t// The semantics of the fields are as follows:\n+\t//  - `precision` and `scale` represent the precision and scale of SQL decimal type\n+\t//  - If `decimalVal` is set, it represents the whole decimal value\n+\t//  - Otherwise, the decimal value is longVal/(10^scale).\n+\t//\n+\t// Note that the (precision, scale) must be correct.\n+\t// if precision > MAX_COMPACT_PRECISION,\n+\t//   `decimalVal` represents the value. `longVal` is undefined\n+\t// otherwise, (longVal, scale) represents the value\n+\t//   `decimalVal` may be set and cached\n+\n+\tfinal int precision;\n+\tfinal int scale;\n+\n+\tfinal long longVal;\n+\tBigDecimal decimalVal;\n+\n+\t// this constructor does not perform any sanity check.\n+\tDecimalData(int precision, int scale, long longVal, BigDecimal decimalVal) {\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.longVal = longVal;\n+\t\tthis.decimalVal = decimalVal;\n+\t}\n+\n+\t// ------------------------------------------------------------------------------------------\n+\t// Public Interfaces\n+\t// ------------------------------------------------------------------------------------------\n+\n+\t/**\n+\t * Returns the <i>precision</i> of this {@link DecimalData}.\n+\t *\n+\t * <p>The precision is the number of digits in the unscaled value.\n+\t */\n+\tpublic int precision() {\n+\t\treturn precision;\n+\t}\n+\n+\t/**\n+\t * Returns the <i>scale</i> of this {@link DecimalData}.\n+\t */\n+\tpublic int scale() {\n+\t\treturn scale;\n+\t}\n+\n+\t/**\n+\t * Converts this {@link DecimalData} into an instance of {@link BigDecimal}.\n+\t */\n+\tpublic BigDecimal toBigDecimal() {\n+\t\tBigDecimal bd = decimalVal;\n+\t\tif (bd == null) {\n+\t\t\tdecimalVal = bd = BigDecimal.valueOf(longVal, scale);\n+\t\t}\n+\t\treturn bd;\n+\t}\n+\n+\t/**\n+\t * Returns a long describing the <i>unscaled value</i> of this {@link DecimalData}.\n+\t *\n+\t * @throws ArithmeticException if this {@link DecimalData} does not exactly fit in a long.\n+\t */\n+\tpublic long toUnscaledLong() {\n+\t\tif (isCompact()) {\n+\t\t\treturn longVal;\n+\t\t} else {\n+\t\t\treturn toBigDecimal().unscaledValue().longValueExact();\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns a byte array describing the <i>unscaled value</i> of this {@link DecimalData}.\n+\t *\n+\t * @return the unscaled byte array of this {@link DecimalData}.\n+\t */\n+\tpublic byte[] toUnscaledBytes() {\n+\t\tif (!isCompact()) {\n+\t\t\treturn toBigDecimal().unscaledValue().toByteArray();\n+\t\t}\n+\n+\t\t// big endian; consistent with BigInteger.toByteArray()\n+\t\tbyte[] bytes = new byte[8];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6123b4f30f049238128d277a864a02caa96d8f31"}, "originalPosition": 146}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2345, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}