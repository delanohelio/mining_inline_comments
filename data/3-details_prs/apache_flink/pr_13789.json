{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NzQ2NjQz", "number": 13789, "title": "[FLINK-19727][table-runtime] Implement ParallelismProvider for sink i\u2026", "bodyText": "\u2026n blink planner\nWhat is the purpose of the change\n\nImplement ParallelismProvider for sink in blink planner\nSinkFunctionProvider and OutputFormatProvider work with ParallelismProvider by implementing ParallelismProvider\nPrepare for the future work that make all the classes that implements SinkRuntimeProvider currently using in all kind of existing connectors implement ParallelismProvider in order to configure the sink parallelism\n\nBrief change log\n\nCommonPhysicalSink : get parallelism from ParallelismProvider if possible and configure the sink parallelism into sink transformation after validation\nSinkFunctionProvider: implements ParallelismProvider, add factory method to work with parameter called parallelism to set the specified sink parallelism\nOutputFormatProvider: implements ParallelismProvider, add factory method to work with parameter called parallelism to set the specified sink parallelism\nAdd necessary tests and helper class for testing the new code mentioned above\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdd helper class InternalDataStreamSinkProviderWithParallelism for the convenience of testing DataStreamSinkProvider working with ParallelismProvider\nAdd new field: @Nullable parallelism in TestValuesTableSink for the test related to  ParallelismProvider in sink\nException is expected if DataStreamSinkProvider work with ParallelismProvider\nTest  SinkFunctionProvider working with ParallelismProvider\nTest  OutputFormatProvider working with ParallelismProvider\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes /no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-10-26T04:22:27Z", "url": "https://github.com/apache/flink/pull/13789", "merged": true, "mergeCommit": {"oid": "eee0d8e99b1efd3d69b9f3877f5de51667e1cb91"}, "closed": true, "closedAt": "2020-11-03T02:12:45Z", "author": {"login": "shouweikun"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWMprMgFqTUxNjQ2MjAyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYe3HLAFqTUyMTM2NDU2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDYyMDIy", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-516462022", "createdAt": "2020-10-26T04:27:56Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDoyNzo1N1rOHoAisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDoyNzo1N1rOHoAisg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxMzk3MA==", "bodyText": "Actually, this part should be under well discussed.\nFor every changelog mode, from my perspective, should be treated differently. Now I only figured out what should be done in UPSERT MODE or INSERT_ONLY mode.\nWhat shall we do for other changelog modes?\nWDYT?", "url": "https://github.com/apache/flink/pull/13789#discussion_r511713970", "createdAt": "2020-10-26T04:27:57Z", "author": {"login": "shouweikun"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism\n+        val parallelism = if (runtimeProvider.isInstanceOf[ParallelismProvider]) runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism.orElse(inputParallelism).intValue()\n+        else inputParallelism\n+\n+        if (implicitly[Ordering[Int]].lteq(parallelism, 0)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism should not be less than zero or equal to zero\")\n+        if (implicitly[Ordering[Int]].gt(parallelism, taskParallelism)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism is larger than the task max parallelism: $taskParallelism\")\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val containedRowKinds = changelogMode.getContainedKinds.toSet\n+        val theFinalInputTransformation = if(inputParallelism == parallelism) inputTransformation //if the parallelism is not changed, do nothing\n+        else (containedRowKinds, primaryKeys.toList) match {\n+        // fixme : if rowKinds only contains  delete, is there somethinng to do with? Currently do nothing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDY0NDI0", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-516464424", "createdAt": "2020-10-26T04:38:56Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDozODo1NlrOHoArYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDozODo1NlrOHoArYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxNjE5Mg==", "bodyText": "I enumerated all the changelog mode conditions by using Scala match pattern.\nSo that we can esaily modify every condition in its own scope.", "url": "https://github.com/apache/flink/pull/13789#discussion_r511716192", "createdAt": "2020-10-26T04:38:56Z", "author": {"login": "shouweikun"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism\n+        val parallelism = if (runtimeProvider.isInstanceOf[ParallelismProvider]) runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism.orElse(inputParallelism).intValue()\n+        else inputParallelism\n+\n+        if (implicitly[Ordering[Int]].lteq(parallelism, 0)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism should not be less than zero or equal to zero\")\n+        if (implicitly[Ordering[Int]].gt(parallelism, taskParallelism)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism is larger than the task max parallelism: $taskParallelism\")\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val containedRowKinds = changelogMode.getContainedKinds.toSet\n+        val theFinalInputTransformation = if(inputParallelism == parallelism) inputTransformation //if the parallelism is not changed, do nothing\n+        else (containedRowKinds, primaryKeys.toList) match {\n+        // fixme : if rowKinds only contains  delete, is there somethinng to do with? Currently do nothing.\n+        case (_, _) if(containedRowKinds == Set(RowKind.DELETE)) => inputTransformation\n+        case (_, _) if(containedRowKinds == Set(RowKind.INSERT)) => inputTransformation\n+        // fixme: for retract mode (insert and delete contains only), is there somethinng to do with? Currently do nothing.\n+        case (_, _) if(containedRowKinds == Set(RowKind.INSERT,RowKind.DELETE)) => inputTransformation\n+        case (_, Nil) if(containedRowKinds.contains(RowKind.UPDATE_AFTER)) => throw new RuntimeException(s\"ChangelogMode contains ${RowKind.UPDATE_AFTER}, but no primaryKeys were found\")\n+        case (_, _) if(containedRowKinds.contains(RowKind.UPDATE_AFTER)) => new DataStream[RowData](env,inputTransformation).keyBy(primaryKeys:_*).getTransformation\n+        case _ => throw new RuntimeException(s\"the changelogMode is: ${containedRowKinds.mkString(\",\")}, which is not supported\")\n+      }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkxODgx", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518291881", "createdAt": "2020-10-28T03:03:40Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowMzo0MFrOHpYS3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowMzo0MFrOHpYS3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTcxMQ==", "bodyText": "I think we don't need provide method.\nhttps://flink.apache.org/contributing/code-style-and-quality-java.html#java-optional\nIn Flink code style, it is recommended to use the Optional only in method return values.", "url": "https://github.com/apache/flink/pull/13789#discussion_r513151711", "createdAt": "2020-10-28T03:03:40Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/connector/sink/SinkFunctionProvider.java", "diffHunk": "@@ -20,19 +20,39 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of a {@link SinkFunction} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface SinkFunctionProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface SinkFunctionProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider {\n \n \t/**\n \t * Helper method for creating a static provider.\n \t */\n \tstatic SinkFunctionProvider of(SinkFunction<RowData> sinkFunction) {\n-\t\treturn () -> sinkFunction;\n+\t\treturn of(sinkFunction, Optional.empty());\n+\t}\n+\n+\t/**\n+\t * Helper method for creating a static provider, sink parallelism will be configured if non-empty parallelism is passed in.\n+\t */\n+\tstatic SinkFunctionProvider of(SinkFunction<RowData> sinkFunction, Optional<Integer> parallelism) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkxOTM2", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518291936", "createdAt": "2020-10-28T03:03:48Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowMzo0OFrOHpYS_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowMzo0OFrOHpYS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MTc0MQ==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/13789#discussion_r513151741", "createdAt": "2020-10-28T03:03:48Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -20,19 +20,39 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.api.common.io.OutputFormat;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider{\n \n \t/**\n \t * Helper method for creating a static provider.\n \t */\n \tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n-\t\treturn () -> outputFormat;\n+\t\treturn of(outputFormat, Optional.empty());\n+\t}\n+\n+\t/**\n+\t * Helper method for creating a static provider, sink parallelism will be configured if non-empty parallelism is passed in.\n+\t */\n+\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat, Optional<Integer> parallelism) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkyMzQz", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518292343", "createdAt": "2020-10-28T03:05:15Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNToxNVrOHpYUiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNToxNVrOHpYUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MjEzNw==", "bodyText": "TableException", "url": "https://github.com/apache/flink/pull/13789#discussion_r513152137", "createdAt": "2020-10-28T03:05:15Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -79,6 +84,7 @@ class CommonPhysicalSink (\n     val enforcer = new SinkNotNullEnforcer(notNullEnforcer, notNullFieldIndices, fieldNames)\n \n     runtimeProvider match {\n+      case _: DataStreamSinkProvider with ParallelismProvider => throw new RuntimeException(\"`DataStreamSinkProvider` is not allowed to work with `ParallelismProvider`, please see document of `ParallelismProvider`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkyNTE5", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518292519", "createdAt": "2020-10-28T03:05:45Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNTo0NlrOHpYVLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNTo0NlrOHpYVLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MjMwMA==", "bodyText": "not to have too long lines", "url": "https://github.com/apache/flink/pull/13789#discussion_r513152300", "createdAt": "2020-10-28T03:05:46Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -79,6 +84,7 @@ class CommonPhysicalSink (\n     val enforcer = new SinkNotNullEnforcer(notNullEnforcer, notNullFieldIndices, fieldNames)\n \n     runtimeProvider match {\n+      case _: DataStreamSinkProvider with ParallelismProvider => throw new RuntimeException(\"`DataStreamSinkProvider` is not allowed to work with `ParallelismProvider`, please see document of `ParallelismProvider`\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkzMDM0", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518293034", "createdAt": "2020-10-28T03:07:35Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNzozNVrOHpYXHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNzozNVrOHpYXHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1Mjc5OQ==", "bodyText": "env.getMaxParallelism?", "url": "https://github.com/apache/flink/pull/13789#discussion_r513152799", "createdAt": "2020-10-28T03:07:35Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkzMTE0", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518293114", "createdAt": "2020-10-28T03:07:49Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNzo0OVrOHpYXXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowNzo0OVrOHpYXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1Mjg2MQ==", "bodyText": "We don't need verify env.getMaxParallelism, DataStream layer will verify it.", "url": "https://github.com/apache/flink/pull/13789#discussion_r513152861", "createdAt": "2020-10-28T03:07:49Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism\n+        val parallelism = if (runtimeProvider.isInstanceOf[ParallelismProvider]) runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism.orElse(inputParallelism).intValue()\n+        else inputParallelism\n+\n+        if (implicitly[Ordering[Int]].lteq(parallelism, 0)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism should not be less than zero or equal to zero\")\n+        if (implicitly[Ordering[Int]].gt(parallelism, taskParallelism)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism is larger than the task max parallelism: $taskParallelism\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkzMjg4", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518293288", "createdAt": "2020-10-28T03:08:23Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowODoyM1rOHpYX0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowODoyM1rOHpYX0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1Mjk3Nw==", "bodyText": "Remove isInstanceOf, it must be", "url": "https://github.com/apache/flink/pull/13789#discussion_r513152977", "createdAt": "2020-10-28T03:08:23Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism\n+        val parallelism = if (runtimeProvider.isInstanceOf[ParallelismProvider]) runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism.orElse(inputParallelism).intValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjkzNTU3", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518293557", "createdAt": "2020-10-28T03:09:20Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowOToyMFrOHpYYtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMzowOToyMFrOHpYYtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE1MzIwNw==", "bodyText": "Just parallelism <= 0?", "url": "https://github.com/apache/flink/pull/13789#discussion_r513153207", "createdAt": "2020-10-28T03:09:20Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism\n+        val parallelism = if (runtimeProvider.isInstanceOf[ParallelismProvider]) runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism.orElse(inputParallelism).intValue()\n+        else inputParallelism\n+\n+        if (implicitly[Ordering[Int]].lteq(parallelism, 0)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism should not be less than zero or equal to zero\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4Mjk0NDE1", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518294415", "createdAt": "2020-10-28T03:12:15Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzE0NTIx", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-518314521", "createdAt": "2020-10-28T04:24:06Z", "commit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyNDowNlrOHpZjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyNDowNlrOHpZjuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MjQxMQ==", "bodyText": "About how to HASH_DISTRIBUTED, you should take a look to StreamExecExchange", "url": "https://github.com/apache/flink/pull/13789#discussion_r513172411", "createdAt": "2020-10-28T04:24:06Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +105,33 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        val inputParallelism = inputTransformation.getParallelism\n+        val taskParallelism = env.getParallelism\n+        val parallelism = if (runtimeProvider.isInstanceOf[ParallelismProvider]) runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism.orElse(inputParallelism).intValue()\n+        else inputParallelism\n+\n+        if (implicitly[Ordering[Int]].lteq(parallelism, 0)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism should not be less than zero or equal to zero\")\n+        if (implicitly[Ordering[Int]].gt(parallelism, taskParallelism)) throw new RuntimeException(s\"the configured sink parallelism: $parallelism is larger than the task max parallelism: $taskParallelism\")\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val containedRowKinds = changelogMode.getContainedKinds.toSet\n+        val theFinalInputTransformation = if(inputParallelism == parallelism) inputTransformation //if the parallelism is not changed, do nothing\n+        else (containedRowKinds, primaryKeys.toList) match {\n+        // fixme : if rowKinds only contains  delete, is there somethinng to do with? Currently do nothing.\n+        case (_, _) if(containedRowKinds == Set(RowKind.DELETE)) => inputTransformation\n+        case (_, _) if(containedRowKinds == Set(RowKind.INSERT)) => inputTransformation\n+        // fixme: for retract mode (insert and delete contains only), is there somethinng to do with? Currently do nothing.\n+        case (_, _) if(containedRowKinds == Set(RowKind.INSERT,RowKind.DELETE)) => inputTransformation\n+        case (_, Nil) if(containedRowKinds.contains(RowKind.UPDATE_AFTER)) => throw new RuntimeException(s\"ChangelogMode contains ${RowKind.UPDATE_AFTER}, but no primaryKeys were found\")\n+        case (_, _) if(containedRowKinds.contains(RowKind.UPDATE_AFTER)) => new DataStream[RowData](env,inputTransformation).keyBy(primaryKeys:_*).getTransformation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6329930d7acc5d2d4d84e777561e79bd25ac9367"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MzIzMzY5", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-519323369", "createdAt": "2020-10-29T04:23:11Z", "commit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDoyMzoxMVrOHqJRWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNDozMjo1OFrOHqJlyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NDEzOQ==", "bodyText": "Code format: It is ok to include in one line", "url": "https://github.com/apache/flink/pull/13789#discussion_r513954139", "createdAt": "2020-10-29T04:23:11Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -20,13 +20,15 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.api.common.io.OutputFormat;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface OutputFormatProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NDI0Ng==", "bodyText": "Code format: It is ok to include in one line", "url": "https://github.com/apache/flink/pull/13789#discussion_r513954246", "createdAt": "2020-10-29T04:23:20Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/connector/sink/SinkFunctionProvider.java", "diffHunk": "@@ -20,13 +20,15 @@\n \n import org.apache.flink.annotation.PublicEvolving;\n import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n /**\n  * Provider of a {@link SinkFunction} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n-public interface SinkFunctionProvider extends DynamicTableSink.SinkRuntimeProvider {\n+public interface SinkFunctionProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NDY2NQ==", "bodyText": "Code format: Better to break line when throw new Table...", "url": "https://github.com/apache/flink/pull/13789#discussion_r513954665", "createdAt": "2020-10-29T04:24:01Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -79,6 +87,10 @@ class CommonPhysicalSink (\n     val enforcer = new SinkNotNullEnforcer(notNullEnforcer, notNullFieldIndices, fieldNames)\n \n     runtimeProvider match {\n+      case _: DataStreamSinkProvider with ParallelismProvider => throw new TableException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NDkzMg==", "bodyText": "Code format: Better to fill one line (max 100 chars)", "url": "https://github.com/apache/flink/pull/13789#discussion_r513954932", "createdAt": "2020-10-29T04:24:30Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -79,6 +87,10 @@ class CommonPhysicalSink (\n     val enforcer = new SinkNotNullEnforcer(notNullEnforcer, notNullFieldIndices, fieldNames)\n \n     runtimeProvider match {\n+      case _: DataStreamSinkProvider with ParallelismProvider => throw new TableException(\n+        \"`DataStreamSinkProvider` is not allowed to \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NTU0Nw==", "bodyText": "Code format:\nelse {\n  inputParallelism\n}", "url": "https://github.com/apache/flink/pull/13789#discussion_r513955547", "createdAt": "2020-10-29T04:25:39Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(\n+                s\"Table: $tableIdentifier configured sink parallelism: $parallelismPassedIn \" +\n+                  \"should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else inputParallelism", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NTY4NA==", "bodyText": "Code format:Not break line", "url": "https://github.com/apache/flink/pull/13789#discussion_r513955684", "createdAt": "2020-10-29T04:25:53Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NjI4MQ==", "bodyText": "I think it is better to use if else here.", "url": "https://github.com/apache/flink/pull/13789#discussion_r513956281", "createdAt": "2020-10-29T04:27:00Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(\n+                s\"Table: $tableIdentifier configured sink parallelism: $parallelismPassedIn \" +\n+                  \"should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else inputParallelism\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation =\n+          (inputParallelism == parallelism,changelogMode, primaryKeys.toList) match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1NzI1Mg==", "bodyText": "Code format: Better to fill one line (max 100 chars)", "url": "https://github.com/apache/flink/pull/13789#discussion_r513957252", "createdAt": "2020-10-29T04:28:47Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(\n+                s\"Table: $tableIdentifier configured sink parallelism: $parallelismPassedIn \" +\n+                  \"should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else inputParallelism\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation =\n+          (inputParallelism == parallelism,changelogMode, primaryKeys.toList) match {\n+           // if the inputParallelism equals parallelism, do nothing.\n+          case (true, _, _) => inputTransformation\n+          case (_, _, _) if (changelogMode.containsOnly(RowKind.INSERT)) => inputTransformation\n+          case (_, _, Nil) =>\n+            throw new TableException(\n+            s\"Table: $tableIdentifier configured sink parallelism is: $parallelism, \" +\n+            s\"while the input parallelism is: $inputParallelism. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1ODEwOA==", "bodyText": "Not break line", "url": "https://github.com/apache/flink/pull/13789#discussion_r513958108", "createdAt": "2020-10-29T04:30:30Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(\n+                s\"Table: $tableIdentifier configured sink parallelism: $parallelismPassedIn \" +\n+                  \"should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else inputParallelism\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation =\n+          (inputParallelism == parallelism,changelogMode, primaryKeys.toList) match {\n+           // if the inputParallelism equals parallelism, do nothing.\n+          case (true, _, _) => inputTransformation\n+          case (_, _, _) if (changelogMode.containsOnly(RowKind.INSERT)) => inputTransformation\n+          case (_, _, Nil) =>\n+            throw new TableException(\n+            s\"Table: $tableIdentifier configured sink parallelism is: $parallelism, \" +\n+            s\"while the input parallelism is: $inputParallelism. \" +\n+            s\"Since the changelog mode \" +\n+            s\"contains [${changelogMode.getContainedKinds.toList.mkString(\",\")}], \" +\n+            s\"which is not INSERT_ONLY mode, \" +\n+            s\"primary key is required but no primary key is found\"\n+          )\n+          case (_, _, pks) =>\n+            //key by before sink\n+            //according to [[StreamExecExchange]]\n+            val selector = KeySelectorUtil.getRowDataSelector(\n+              pks.toArray, inputTypeInfo)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1ODk1MQ==", "bodyText": "Why need to check env.getMaxParallelism?", "url": "https://github.com/apache/flink/pull/13789#discussion_r513958951", "createdAt": "2020-10-29T04:32:09Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(\n+                s\"Table: $tableIdentifier configured sink parallelism: $parallelismPassedIn \" +\n+                  \"should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else inputParallelism\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation =\n+          (inputParallelism == parallelism,changelogMode, primaryKeys.toList) match {\n+           // if the inputParallelism equals parallelism, do nothing.\n+          case (true, _, _) => inputTransformation\n+          case (_, _, _) if (changelogMode.containsOnly(RowKind.INSERT)) => inputTransformation\n+          case (_, _, Nil) =>\n+            throw new TableException(\n+            s\"Table: $tableIdentifier configured sink parallelism is: $parallelism, \" +\n+            s\"while the input parallelism is: $inputParallelism. \" +\n+            s\"Since the changelog mode \" +\n+            s\"contains [${changelogMode.getContainedKinds.toList.mkString(\",\")}], \" +\n+            s\"which is not INSERT_ONLY mode, \" +\n+            s\"primary key is required but no primary key is found\"\n+          )\n+          case (_, _, pks) =>\n+            //key by before sink\n+            //according to [[StreamExecExchange]]\n+            val selector = KeySelectorUtil.getRowDataSelector(\n+              pks.toArray, inputTypeInfo)\n+            // in case of maxParallelism is negative\n+            val keyGroupNum = env.getMaxParallelism match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzk1OTM3MQ==", "bodyText": "selector,keyGroupNum => selector, keyGroupNum", "url": "https://github.com/apache/flink/pull/13789#discussion_r513959371", "createdAt": "2020-10-29T04:32:58Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +111,63 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+              \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider\n+            .asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(\n+                s\"Table: $tableIdentifier configured sink parallelism: $parallelismPassedIn \" +\n+                  \"should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else inputParallelism\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation =\n+          (inputParallelism == parallelism,changelogMode, primaryKeys.toList) match {\n+           // if the inputParallelism equals parallelism, do nothing.\n+          case (true, _, _) => inputTransformation\n+          case (_, _, _) if (changelogMode.containsOnly(RowKind.INSERT)) => inputTransformation\n+          case (_, _, Nil) =>\n+            throw new TableException(\n+            s\"Table: $tableIdentifier configured sink parallelism is: $parallelism, \" +\n+            s\"while the input parallelism is: $inputParallelism. \" +\n+            s\"Since the changelog mode \" +\n+            s\"contains [${changelogMode.getContainedKinds.toList.mkString(\",\")}], \" +\n+            s\"which is not INSERT_ONLY mode, \" +\n+            s\"primary key is required but no primary key is found\"\n+          )\n+          case (_, _, pks) =>\n+            //key by before sink\n+            //according to [[StreamExecExchange]]\n+            val selector = KeySelectorUtil.getRowDataSelector(\n+              pks.toArray, inputTypeInfo)\n+            // in case of maxParallelism is negative\n+            val keyGroupNum = env.getMaxParallelism match {\n+              case -1 => env.getParallelism\n+              case x if(x > 0) => env.getMaxParallelism\n+              case _ => DEFAULT_LOWER_BOUND_MAX_PARALLELISM\n+            }\n+            val partitioner = new KeyGroupStreamPartitioner(selector,keyGroupNum)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a42eba2756d3ebfe1a6a73b58b31c12ff98435fb"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mzk0MTEx", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-519394111", "createdAt": "2020-10-29T07:31:58Z", "commit": {"oid": "5caa50b63ed2b7a172ee9c47aff4ea36e40cbb6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozMTo1OFrOHqPTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozMTo1OFrOHqPTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MzA2Ng==", "bodyText": "NOTE, code style should be if (.", "url": "https://github.com/apache/flink/pull/13789#discussion_r514053066", "createdAt": "2020-10-29T07:31:58Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +110,57 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+          \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5caa50b63ed2b7a172ee9c47aff4ea36e40cbb6b"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mzk1ODEx", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-519395811", "createdAt": "2020-10-29T07:35:05Z", "commit": {"oid": "5caa50b63ed2b7a172ee9c47aff4ea36e40cbb6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNTowNVrOHqPZag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNTowNVrOHqPZag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NDUwNg==", "bodyText": "if (inputParallelism == parallelism || changelogMode.containsOnly(RowKind.INSERT)) {\n}", "url": "https://github.com/apache/flink/pull/13789#discussion_r514054506", "createdAt": "2020-10-29T07:35:05Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +110,57 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+          \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(s\"Table: $tableIdentifier configured sink parallelism: \" +\n+                s\"$parallelismPassedIn should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else {\n+            inputParallelism\n+          }\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation = if (inputParallelism == parallelism) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5caa50b63ed2b7a172ee9c47aff4ea36e40cbb6b"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5Mzk3MDY1", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-519397065", "createdAt": "2020-10-29T07:37:29Z", "commit": {"oid": "5caa50b63ed2b7a172ee9c47aff4ea36e40cbb6b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNzoyOVrOHqPdYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNzoyOVrOHqPdYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTUyMQ==", "bodyText": "if (primaryKeys.isEmpty)?", "url": "https://github.com/apache/flink/pull/13789#discussion_r514055521", "createdAt": "2020-10-29T07:37:29Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/common/CommonPhysicalSink.scala", "diffHunk": "@@ -99,11 +110,57 @@ class CommonPhysicalSink (\n \n         val operator = new SinkOperator(env.clean(sinkFunction), rowtimeFieldIndex, enforcer)\n \n+        assert(runtimeProvider.isInstanceOf[ParallelismProvider],\n+          \"runtimeProvider with `ParallelismProvider` implementation is required\")\n+\n+        val inputParallelism = inputTransformation.getParallelism\n+        val parallelism =  {\n+          val parallelismOptional = runtimeProvider.asInstanceOf[ParallelismProvider].getParallelism\n+          if(parallelismOptional.isPresent) {\n+            val parallelismPassedIn = parallelismOptional.get().intValue()\n+            if(parallelismPassedIn <= 0) {\n+              throw new TableException(s\"Table: $tableIdentifier configured sink parallelism: \" +\n+                s\"$parallelismPassedIn should not be less than zero or equal to zero\")\n+            }\n+            parallelismPassedIn\n+          } else {\n+            inputParallelism\n+          }\n+        }\n+\n+        val primaryKeys = TableSchemaUtils.getPrimaryKeyIndices(catalogTable.getSchema)\n+        val theFinalInputTransformation = if (inputParallelism == parallelism) {\n+          // if the inputParallelism is equals to the parallelism, do nothing.\n+          inputTransformation\n+        } else {\n+          (changelogMode, primaryKeys.toList) match {\n+            case (_, _) if (changelogMode.containsOnly(RowKind.INSERT)) => inputTransformation\n+            case (_, Nil) =>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5caa50b63ed2b7a172ee9c47aff4ea36e40cbb6b"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NDI0Nzc4", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-519424778", "createdAt": "2020-10-29T08:22:57Z", "commit": {"oid": "8cca8ea8baa8f718138404c4a605f85f9c323723"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoyMjo1OFrOHqQ0pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwODoyMzowOFrOHqQ1Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3Nzg2Mw==", "bodyText": "This line is too long, you can break it.", "url": "https://github.com/apache/flink/pull/13789#discussion_r514077863", "createdAt": "2020-10-29T08:22:58Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/factories/TestValuesTableFactory.java", "diffHunk": "@@ -386,9 +394,11 @@ public DynamicTableSink createDynamicTableSink(Context context) {\n \t\tboolean isInsertOnly = helper.getOptions().get(SINK_INSERT_ONLY);\n \t\tString runtimeSink = helper.getOptions().get(RUNTIME_SINK);\n \t\tint expectedNum = helper.getOptions().get(SINK_EXPECTED_MESSAGES_NUM);\n+\t\tInteger parallelism = helper.getOptions().get(SINK_PARALLELISM);\n \t\tfinal Map<String, DataType> writableMetadata = convertToMetadataMap(\n \t\t\thelper.getOptions().get(WRITABLE_METADATA),\n \t\t\tcontext.getClassLoader());\n+\t\tChangelogMode changelogMode = Optional.ofNullable(helper.getOptions().get(SINK_CHANGELOG_MODE_ENFORCED)).map(m -> parseChangelogMode(m)).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cca8ea8baa8f718138404c4a605f85f9c323723"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA3Nzk3OA==", "bodyText": "Don't break line", "url": "https://github.com/apache/flink/pull/13789#discussion_r514077978", "createdAt": "2020-10-29T08:23:08Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/factories/TestValuesTableFactory.java", "diffHunk": "@@ -929,10 +943,13 @@ public String asSummaryString() {\n \t\tprivate DataType consumedDataType;\n \t\tprivate int[] primaryKeyIndices;\n \t\tprivate final String tableName;\n-\t\tprivate final boolean isInsertOnly;\n+\t\tprivate final boolean\n+\t\t\tisInsertOnly;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cca8ea8baa8f718138404c4a605f85f9c323723"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bfd51270d53b57c1449f560854b2c1d4951a411", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/0bfd51270d53b57c1449f560854b2c1d4951a411", "committedDate": "2020-11-02T06:45:26Z", "message": "[FLINK-19727][table-runtime] Implement ParallelismProvider for sink in blink planner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a97796b4cf8d0228ef6b0552c5be81ad75121a6d", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/a97796b4cf8d0228ef6b0552c5be81ad75121a6d", "committedDate": "2020-11-02T06:45:26Z", "message": "addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7724b91de5d51cbd70b41c4edde0a1f0021bd7e0", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/7724b91de5d51cbd70b41c4edde0a1f0021bd7e0", "committedDate": "2020-11-02T06:45:26Z", "message": " remove of factory method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b90e46b9982fff464370afb3adf1dad411c37c", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/c8b90e46b9982fff464370afb3adf1dad411c37c", "committedDate": "2020-11-02T06:45:26Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64560c4b5b90cb16b26177b3c71e9064febe9250", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/64560c4b5b90cb16b26177b3c71e9064febe9250", "committedDate": "2020-11-02T06:45:26Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7cb3eb4668985672c5b41ca734e2029b741f949", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/e7cb3eb4668985672c5b41ca734e2029b741f949", "committedDate": "2020-11-02T06:45:27Z", "message": "address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c11c88ecaea058b37fcbaf13007306c4c4860d5", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/4c11c88ecaea058b37fcbaf13007306c4c4860d5", "committedDate": "2020-11-02T06:45:27Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e5737980ff49e901d90416b7c162a5ee5d2c048", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/3e5737980ff49e901d90416b7c162a5ee5d2c048", "committedDate": "2020-11-02T06:45:27Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5bdf9f9a370250e02e7c21492c15e5547777165", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/c5bdf9f9a370250e02e7c21492c15e5547777165", "committedDate": "2020-11-02T06:47:35Z", "message": "Minor code style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb7196c290cec28c792cb1d95089bf0f92b8f30f", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/eb7196c290cec28c792cb1d95089bf0f92b8f30f", "committedDate": "2020-10-29T08:31:39Z", "message": "address comments"}, "afterCommit": {"oid": "c5bdf9f9a370250e02e7c21492c15e5547777165", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/c5bdf9f9a370250e02e7c21492c15e5547777165", "committedDate": "2020-11-02T06:47:35Z", "message": "Minor code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzY0NTY5", "url": "https://github.com/apache/flink/pull/13789#pullrequestreview-521364569", "createdAt": "2020-11-02T06:48:46Z", "commit": {"oid": "c5bdf9f9a370250e02e7c21492c15e5547777165"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4826, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}