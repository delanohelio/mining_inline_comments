{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTY0OTcx", "number": 13199, "title": "[FLINK-18953][python][docs] Add documentation for DataTypes in Python DataStream API", "bodyText": "What is the purpose of the change\nThis pull request adds documentation for DataTypes in Python DataStream API\nBrief change log\n\nAdd index page for the Python DataStream Doc.\nAdd documentation for DataTypes under the index page of Python DataStream Doc.\n\nVerifying this change\nThis change is a trivial rework / code cleanup without any test coverage.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)", "createdAt": "2020-08-19T13:28:00Z", "url": "https://github.com/apache/flink/pull/13199", "merged": true, "mergeCommit": {"oid": "8f7e40c9f77f822ff23265d15dc90f126c8bccd6"}, "closed": true, "closedAt": "2020-08-20T01:45:13Z", "author": {"login": "hequn8128"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAbkfoAH2gAyNDcwMTY0OTcxOjlhNTMyOWI5OTRlZGUzZGUzYmM5Nzg1NWEyZGM2YjMwMmQ5MmJkN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAmIWggH2gAyNDcwMTY0OTcxOjg2NjZiZjhiNDFlNDNjNjIxODMyZDg5MWE5OWFmODU1ZGY0M2JkNWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/9a5329b994ede3de3bc97855a2dc6b302d92bd7b", "committedDate": "2020-08-19T13:24:32Z", "message": "[FLINK-18953][python][docs] Add documentation for DataTypes in Python DataStream API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTA2NDI5", "url": "https://github.com/apache/flink/pull/13199#pullrequestreview-470506429", "createdAt": "2020-08-19T14:19:27Z", "commit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoxOToyOFrOHDJpSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyMTo1M1rOHDJxDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NTgwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * This will be replaced by the TOC\n          \n          \n            \n            {:toc}\n          \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            ## Why need Data Types\n          \n          \n            \n            \n          \n          \n            \n            In Python DataStream, a data type describes the type of a value in the DataStream ecosystem. \n          \n          \n            \n            It can be used to declare input and/or output types of operations. \n          \n          \n            \n            Similar to Python, you don't require to specify types for the parameters of a Function in Python DataStream. \n          \n          \n            \n            If the type has not been declared, data would be serialized or deserialized using Pickle. \n          \n          \n            \n            For example, the program below specifies no data types.\n          \n          \n            \n            In Apache Flink's Python DataStream API, a data type describes the type of a value in the DataStream ecosystem. \n          \n          \n            \n            It can be used to declare input and output types of operations and informs the system how to serailize elements. \n          \n          \n            \n            \n          \n          \n            \n            * This will be replaced by the TOC\n          \n          \n            \n            {:toc}\n          \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            ## Pickle Serialization\n          \n          \n            \n            \n          \n          \n            \n            If the type has not been declared, data would be serialized or deserialized using Pickle. \n          \n          \n            \n            For example, the program below specifies no data types.", "url": "https://github.com/apache/flink/pull/13199#discussion_r473065802", "createdAt": "2020-08-19T14:19:28Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/data_types.zh.md", "diffHunk": "@@ -0,0 +1,116 @@\n+---\n+title: \"Data Types\"\n+nav-parent_id: python_datastream_api\n+nav-pos: 10\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+\n+## Why need Data Types\n+\n+In Python DataStream, a data type describes the type of a value in the DataStream ecosystem. \n+It can be used to declare input and/or output types of operations. \n+Similar to Python, you don't require to specify types for the parameters of a Function in Python DataStream. \n+If the type has not been declared, data would be serialized or deserialized using Pickle. \n+For example, the program below specifies no data types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NjQ2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Since Java operators or functions can not identify Python data, types need to be provided to help to convert Python data to Java data for processing.\n          \n          \n            \n            For example, types need to be provided if you want to output data from the map into the StreamingFileSink. \n          \n          \n            \n            The StreamingFileSink is actually implemented by Java for the runtime part. \n          \n          \n            \n            Since Java operators or functions can not identify Python data, types need to be provided to help to convert Python types to Java types for processing.\n          \n          \n            \n            For example, types need to be provided if you want to output data using the StreamingFileSink which is implemented in Java.", "url": "https://github.com/apache/flink/pull/13199#discussion_r473066461", "createdAt": "2020-08-19T14:20:12Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/data_types.zh.md", "diffHunk": "@@ -0,0 +1,116 @@\n+---\n+title: \"Data Types\"\n+nav-parent_id: python_datastream_api\n+nav-pos: 10\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+\n+## Why need Data Types\n+\n+In Python DataStream, a data type describes the type of a value in the DataStream ecosystem. \n+It can be used to declare input and/or output types of operations. \n+Similar to Python, you don't require to specify types for the parameters of a Function in Python DataStream. \n+If the type has not been declared, data would be serialized or deserialized using Pickle. \n+For example, the program below specifies no data types.\n+\n+{% highlight python %}\n+from pyflink.datastream import StreamExecutionEnvironment\n+\n+\n+def processing():\n+    env = StreamExecutionEnvironment.get_execution_environment()\n+    env.set_parallelism(1)\n+    env.from_collection(collection=[(1, 'aaa'), (2, 'bbb')]) \\\n+        .map(lambda record: (record[0]+1, record[1].upper())) \\\n+        .print()  # note: print to stdout on the worker machine\n+\n+    env.execute()\n+\n+\n+if __name__ == '__main__':\n+    processing()\n+{% endhighlight %}\n+\n+However, types need to be specified when:\n+\n+- Passing Python records to Java operations.\n+- Improve serialization and deserialization performance.\n+\n+### Passing Python records to Java operations\n+\n+Since Java operators or functions can not identify Python data, types need to be provided to help to convert Python data to Java data for processing.\n+For example, types need to be provided if you want to output data from the map into the StreamingFileSink. \n+The StreamingFileSink is actually implemented by Java for the runtime part. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Njc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Even though data can be serialized and deserialized through Pickle, the performance should be better if types are provided. \n          \n          \n            \n            This is because PyFlink can use more efficient serializers and deserializers to serialize and deserialize data.\n          \n          \n            \n            Even though data can be serialized and deserialized through Pickle, performance will be better if types are provided.\n          \n          \n            \n            Explicit types allow PyFlink to use efficient serializers when moving records through the pipeline.", "url": "https://github.com/apache/flink/pull/13199#discussion_r473066795", "createdAt": "2020-08-19T14:20:39Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/data_types.zh.md", "diffHunk": "@@ -0,0 +1,116 @@\n+---\n+title: \"Data Types\"\n+nav-parent_id: python_datastream_api\n+nav-pos: 10\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+\n+## Why need Data Types\n+\n+In Python DataStream, a data type describes the type of a value in the DataStream ecosystem. \n+It can be used to declare input and/or output types of operations. \n+Similar to Python, you don't require to specify types for the parameters of a Function in Python DataStream. \n+If the type has not been declared, data would be serialized or deserialized using Pickle. \n+For example, the program below specifies no data types.\n+\n+{% highlight python %}\n+from pyflink.datastream import StreamExecutionEnvironment\n+\n+\n+def processing():\n+    env = StreamExecutionEnvironment.get_execution_environment()\n+    env.set_parallelism(1)\n+    env.from_collection(collection=[(1, 'aaa'), (2, 'bbb')]) \\\n+        .map(lambda record: (record[0]+1, record[1].upper())) \\\n+        .print()  # note: print to stdout on the worker machine\n+\n+    env.execute()\n+\n+\n+if __name__ == '__main__':\n+    processing()\n+{% endhighlight %}\n+\n+However, types need to be specified when:\n+\n+- Passing Python records to Java operations.\n+- Improve serialization and deserialization performance.\n+\n+### Passing Python records to Java operations\n+\n+Since Java operators or functions can not identify Python data, types need to be provided to help to convert Python data to Java data for processing.\n+For example, types need to be provided if you want to output data from the map into the StreamingFileSink. \n+The StreamingFileSink is actually implemented by Java for the runtime part. \n+\n+{% highlight python %}\n+from pyflink.common.serialization import SimpleStringEncoder\n+from pyflink.common.typeinfo import Types\n+from pyflink.datastream import StreamExecutionEnvironment\n+from pyflink.datastream.connectors import StreamingFileSink\n+\n+\n+def streaming_file_sink():\n+    env = StreamExecutionEnvironment.get_execution_environment()\n+    env.set_parallelism(1)\n+    env.from_collection(collection=[(1, 'aaa'), (2, 'bbb')]) \\\n+        .map(lambda record: (record[0]+1, record[1].upper()),\n+             result_type=Types.ROW([Types.INT(), Types.STRING()])) \\\n+        .add_sink(StreamingFileSink\n+                  .for_row_format('/tmp/output', SimpleStringEncoder())\n+                  .build())\n+\n+    env.execute()\n+\n+\n+if __name__ == '__main__':\n+    streaming_file_sink()\n+\n+{% endhighlight %}\n+\n+### Improve serialization and deserialization performance\n+\n+Even though data can be serialized and deserialized through Pickle, the performance should be better if types are provided. \n+This is because PyFlink can use more efficient serializers and deserializers to serialize and deserialize data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NzExOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            nav-show_overview: true", "url": "https://github.com/apache/flink/pull/13199#discussion_r473067118", "createdAt": "2020-08-19T14:21:05Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/index.md", "diffHunk": "@@ -0,0 +1,32 @@\n+---\n+title: \"DataStream API\"\n+nav-id: python_datastream_api\n+nav-parent_id: python_user_guide\n+nav-pos: 30\n+nav-show_overview: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NzI4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Python DataStream API allows users to develop [DataStream API]({{ site.baseurl }}/dev/datastream_api.html) programs using the Python language.\n          \n          \n            \n            Apache Flink has provided Python DataStream API support since 1.12.0.\n          \n          \n            \n            \n          \n          \n            \n            ## Where to go next?\n          \n          \n            \n            \n          \n          \n            \n            - [Data Types]({{ site.baseurl }}/dev/python/user-guide/datastream/data_types.html): Lists the supported data types in Python DataStream API.", "url": "https://github.com/apache/flink/pull/13199#discussion_r473067288", "createdAt": "2020-08-19T14:21:17Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/index.md", "diffHunk": "@@ -0,0 +1,32 @@\n+---\n+title: \"DataStream API\"\n+nav-id: python_datastream_api\n+nav-parent_id: python_user_guide\n+nav-pos: 30\n+nav-show_overview: true\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Python DataStream API allows users to develop [DataStream API]({{ site.baseurl }}/dev/datastream_api.html) programs using the Python language.\n+Apache Flink has provided Python DataStream API support since 1.12.0.\n+\n+## Where to go next?\n+\n+- [Data Types]({{ site.baseurl }}/dev/python/user-guide/datastream/data_types.html): Lists the supported data types in Python DataStream API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2Nzc4OA==", "bodyText": "I don't think we need this page. Let's revisit this after the rest of the content is merged in.", "url": "https://github.com/apache/flink/pull/13199#discussion_r473067788", "createdAt": "2020-08-19T14:21:53Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/index.md", "diffHunk": "@@ -0,0 +1,32 @@\n+---\n+title: \"DataStream API\"\n+nav-id: python_datastream_api\n+nav-parent_id: python_user_guide\n+nav-pos: 30\n+nav-show_overview: true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NzExOA=="}, "originalCommit": {"oid": "9a5329b994ede3de3bc97855a2dc6b302d92bd7b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2d450efbdda3b25cafa41cc5b1323ab43630a38", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/c2d450efbdda3b25cafa41cc5b1323ab43630a38", "committedDate": "2020-08-19T15:54:46Z", "message": "Address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwODQ3Mjc1", "url": "https://github.com/apache/flink/pull/13199#pullrequestreview-470847275", "createdAt": "2020-08-19T20:10:15Z", "commit": {"oid": "c2d450efbdda3b25cafa41cc5b1323ab43630a38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxMDoxNVrOHDXVdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDoxMDoxNVrOHDXVdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI5MDEwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ## Pickle Serialization\n          \n          \n            \n            If the type has not been declared, data would be serialized or deserialized using Pickle. \n          \n          \n            \n            ## Pickle Serialization\n          \n          \n            \n            \n          \n          \n            \n            If the type has not been declared, data would be serialized or deserialized using Pickle.", "url": "https://github.com/apache/flink/pull/13199#discussion_r473290103", "createdAt": "2020-08-19T20:10:15Z", "author": {"login": "sjwiesman"}, "path": "docs/dev/python/user-guide/datastream/data_types.md", "diffHunk": "@@ -0,0 +1,114 @@\n+---\n+title: \"Data Types\"\n+nav-parent_id: python_datastream_api\n+nav-pos: 10\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+In Apache Flink's Python DataStream API, a data type describes the type of a value in the DataStream ecosystem. \n+It can be used to declare input and output types of operations and informs the system how to serailize elements. \n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+\n+## Pickle Serialization\n+If the type has not been declared, data would be serialized or deserialized using Pickle. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2d450efbdda3b25cafa41cc5b1323ab43630a38"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwODQ3NTU3", "url": "https://github.com/apache/flink/pull/13199#pullrequestreview-470847557", "createdAt": "2020-08-19T20:10:23Z", "commit": {"oid": "c2d450efbdda3b25cafa41cc5b1323ab43630a38"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDY5MzMz", "url": "https://github.com/apache/flink/pull/13199#pullrequestreview-471069333", "createdAt": "2020-08-20T01:35:10Z", "commit": {"oid": "c2d450efbdda3b25cafa41cc5b1323ab43630a38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8666bf8b41e43c621832d891a99af855df43bd5c", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/8666bf8b41e43c621832d891a99af855df43bd5c", "committedDate": "2020-08-20T01:42:45Z", "message": "Update"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4643, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}