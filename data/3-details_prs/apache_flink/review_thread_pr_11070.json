{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Mjg5Njgw", "number": 11070, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MDo1OFrODfkhyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDo0NjoxM1rODiSBow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDMwOTIwOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MDo1OFrOFpWUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzozODoyNFrOFp2x2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));\n          \n          \n            \n            \t\t\treturn String.join(\";\", ((List<?>) o).stream().map(this::convertToString).toArray(String[]::new));", "url": "https://github.com/apache/flink/pull/11070#discussion_r378901526", "createdAt": "2020-02-13T14:40:58Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMjAxMg==", "bodyText": "Could you also escape the entries in the list? Parsing lists supports escaping with ' character.\nSo that e.g. A;'A;B';C is parsed as [\"A\", \"A;B\", \"C\"]. The same applies for Maps. I think when writing values out it's safe to always escape them.\nYou can check some examples of escaping in StructuredOptionsSplitterTest or in ReadableWritableConfigurationTest see test for list<string>.", "url": "https://github.com/apache/flink/pull/11070#discussion_r378922012", "createdAt": "2020-02-13T15:12:35Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMxNDkzNA==", "bodyText": "Why isn't this using Collectors.joining(\";\")?\ni.e.,\nreturn ((List<?>) o).stream().map(this::convertToString).collect(Collectors.joining(\";\"));", "url": "https://github.com/apache/flink/pull/11070#discussion_r379314934", "createdAt": "2020-02-14T08:59:54Z", "author": {"login": "zentol"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzMzQzMg==", "bodyText": "I will escape the value string when converting List and Map to structured string. Also Collectors.joining(\";\") will make the codes more concise.", "url": "https://github.com/apache/flink/pull/11070#discussion_r379433432", "createdAt": "2020-02-14T13:38:24Z", "author": {"login": "wangyang0918"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDQ3NDY2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyMjowNlrOFpX85A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMzozNToxMlrOFp2r-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng==", "bodyText": "How about we combine those tests into a single one. Tests that do IO operations might be expensive.", "url": "https://github.com/apache/flink/pull/11070#discussion_r378928356", "createdAt": "2020-02-13T15:22:06Z", "author": {"login": "dawidwys"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,61 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteListConfigOptionAndReload() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyOTA4OQ==", "bodyText": "But on the other hand I do appreciate testing a single thing at a time. I think the classes are not very testable, especially the GlobalConfiguration.", "url": "https://github.com/apache/flink/pull/11070#discussion_r378929089", "createdAt": "2020-02-13T15:23:12Z", "author": {"login": "dawidwys"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,61 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteListConfigOptionAndReload() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzMTkzMA==", "bodyText": "I will merge this tests to a single one.", "url": "https://github.com/apache/flink/pull/11070#discussion_r379431930", "createdAt": "2020-02-14T13:35:12Z", "author": {"login": "wangyang0918"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,61 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteListConfigOptionAndReload() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjMwMDE3OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODoyODozOFrOFtYWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDozMzozMVrOFtb44g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ==", "bodyText": "I don't necessarily understand why do we need that complex logic.\nCan't we just do \"'\" + value.replaceAll(\"'\", \"''\") + \"'\" ?\nMoreover we should try not to use any external dependencies. Especially guava.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383129131", "createdAt": "2020-02-24T08:28:38Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNzc0Ng==", "bodyText": "How about:\n\t/**\n\t * Escapes the given string with single quotes, if the input string contains a double quote or any of the\n\t * given {@code charsToEscape}. Any single quotes in the input string will be escaped by doubling.\n\t *\n\t * <p>Given that the escapeChar is (;)\n\t *\n\t * <p>Examples:\n\t * <ul>\n\t *     <li>A,B,C,D => A,B,C,D</li>\n\t *     <li>A;BCD => 'A;BCD'</li>\n\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n\t * </ul>\n\t *\n\t * @param string a string which needs to be escaped\n\t * @param charsToEscape escape chars for the escape conditions\n\t * @return escaped string by single quote\n\t */\n\tstatic String escapeWithSingleQuote(String string, String... charsToEscape) {\n\t\tboolean escape = Arrays.stream(charsToEscape).anyMatch(string::contains) || string.contains(\"\\\"\");\n\n\t\tif (escape) {\n\t\t\treturn \"'\" + string.replaceAll(\"'\", \"''\") + \"'\";\n\t\t}\n\n\t\treturn string;\n\t}", "url": "https://github.com/apache/flink/pull/11070#discussion_r383137746", "createdAt": "2020-02-24T08:52:11Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MDMxNA==", "bodyText": "Usually the guava implementation has better performance than java regex replacement. However, i am not against with removing the guava dependencies. I will use \"'\" + value.replaceAll(\"'\", \"''\") + \"'\" instead.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383150314", "createdAt": "2020-02-24T09:21:17Z", "author": {"login": "wangyang0918"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4NzE3MA==", "bodyText": "The escape condition also needs to add string.contains(\"'\").", "url": "https://github.com/apache/flink/pull/11070#discussion_r383187170", "createdAt": "2020-02-24T10:33:31Z", "author": {"login": "wangyang0918"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjM3Nzg0OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODo1ODo0OFrOFtZDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToyMTozNFrOFtZpdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDY2Nw==", "bodyText": "How about we make it a bit more readable?\n\t\t\t\t.map(e -> {\n\t\t\t\t\tString escapedKey = escapeWithSingleQuote(e.getKey().toString(), \":\");\n\t\t\t\t\tString escapedValue = escapeWithSingleQuote(e.getValue().toString(), \":\");\n\n\t\t\t\t\treturn escapeWithSingleQuote(escapedKey + \":\" + escapedValued, \",\");\n\t\t\t\t})", "url": "https://github.com/apache/flink/pull/11070#discussion_r383140667", "createdAt": "2020-02-24T08:58:48Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +959,15 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn ((List<?>) o).stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(convertToString(e), \";\"))\n+\t\t\t\t.collect(Collectors.joining(\";\"));\n+\t\t} else if (o instanceof Map) {\n+\t\t\treturn ((Map<?, ?>) o).entrySet().stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(escapeWithSingleQuote(e.getKey().toString(), \":\") + \":\"\n+\t\t\t\t\t\t+ escapeWithSingleQuote(e.getValue().toString(), \":\"), \",\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MDQ1NQ==", "bodyText": "Make sense. I will update it.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383150455", "createdAt": "2020-02-24T09:21:34Z", "author": {"login": "wangyang0918"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +959,15 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn ((List<?>) o).stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(convertToString(e), \";\"))\n+\t\t\t\t.collect(Collectors.joining(\";\"));\n+\t\t} else if (o instanceof Map) {\n+\t\t\treturn ((Map<?, ?>) o).entrySet().stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(escapeWithSingleQuote(e.getKey().toString(), \":\") + \":\"\n+\t\t\t\t\t\t+ escapeWithSingleQuote(e.getValue().toString(), \":\"), \",\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDY2Nw=="}, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjczNTA3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDo0NjoxM1rOFtcR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDo1NTo0MVrOFtclNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5MzU3NQ==", "bodyText": "nit: the contract of assertThat is that the first argument is the actual result. Therefore the arguments should swapped.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383193575", "createdAt": "2020-02-24T10:46:13Z", "author": {"login": "dawidwys"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,56 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteConfigurationAndReload() throws IOException {\n+\t\tfinal File flinkConfDir = temporaryFolder.newFolder().getAbsoluteFile();\n+\t\tfinal Configuration flinkConfig = new Configuration();\n+\n+\t\tfinal ConfigOption<List<String>> listStringConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-string-key\")\n+\t\t\t.stringType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<String> list = Arrays.asList(\"A,B,C,D\", \"A'B'C'D\", \"A;BCD\", \"AB\\\"C\\\"D\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(listStringConfigOption, list);\n+\t\tassertThat(list, containsInAnyOrder(flinkConfig.get(listStringConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<List<Duration>> listDurationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<Duration> durationList = Arrays.asList(Duration.ofSeconds(3), Duration.ofMinutes(1));\n+\t\tflinkConfig.set(listDurationConfigOption, durationList);\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<Map<String, String>> mapConfigOption = ConfigOptions\n+\t\t\t.key(\"test-map-key\")\n+\t\t\t.mapType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Map<String, String> map = new HashMap<>();\n+\t\tmap.put(\"key1\", \"A,B,C,D\");\n+\t\tmap.put(\"key2\", \"A;BCD\");\n+\t\tmap.put(\"key3\", \"A'B'C'D\");\n+\t\tmap.put(\"key4\", \"AB\\\"C\\\"D\");\n+\t\tmap.put(\"key5\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(mapConfigOption, map);\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(flinkConfig.get(mapConfigOption).entrySet().toArray()));\n+\n+\t\tfinal ConfigOption<Duration> durationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Duration duration = Duration.ofMillis(3000);\n+\t\tflinkConfig.set(durationConfigOption, duration);\n+\t\tassertEquals(duration, flinkConfig.get(durationConfigOption));\n+\n+\t\tBootstrapTools.writeConfiguration(flinkConfig, new File(flinkConfDir, FLINK_CONF_FILENAME));\n+\t\tfinal Configuration loadedFlinkConfig = GlobalConfiguration.loadConfiguration(flinkConfDir.getAbsolutePath());\n+\t\tassertThat(list, containsInAnyOrder(loadedFlinkConfig.get(listStringConfigOption).toArray()));\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(loadedFlinkConfig.get(mapConfigOption).entrySet().toArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5ODUxNg==", "bodyText": "I will have quick fix and push again.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383198516", "createdAt": "2020-02-24T10:55:41Z", "author": {"login": "wangyang0918"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,56 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteConfigurationAndReload() throws IOException {\n+\t\tfinal File flinkConfDir = temporaryFolder.newFolder().getAbsoluteFile();\n+\t\tfinal Configuration flinkConfig = new Configuration();\n+\n+\t\tfinal ConfigOption<List<String>> listStringConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-string-key\")\n+\t\t\t.stringType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<String> list = Arrays.asList(\"A,B,C,D\", \"A'B'C'D\", \"A;BCD\", \"AB\\\"C\\\"D\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(listStringConfigOption, list);\n+\t\tassertThat(list, containsInAnyOrder(flinkConfig.get(listStringConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<List<Duration>> listDurationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<Duration> durationList = Arrays.asList(Duration.ofSeconds(3), Duration.ofMinutes(1));\n+\t\tflinkConfig.set(listDurationConfigOption, durationList);\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<Map<String, String>> mapConfigOption = ConfigOptions\n+\t\t\t.key(\"test-map-key\")\n+\t\t\t.mapType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Map<String, String> map = new HashMap<>();\n+\t\tmap.put(\"key1\", \"A,B,C,D\");\n+\t\tmap.put(\"key2\", \"A;BCD\");\n+\t\tmap.put(\"key3\", \"A'B'C'D\");\n+\t\tmap.put(\"key4\", \"AB\\\"C\\\"D\");\n+\t\tmap.put(\"key5\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(mapConfigOption, map);\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(flinkConfig.get(mapConfigOption).entrySet().toArray()));\n+\n+\t\tfinal ConfigOption<Duration> durationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Duration duration = Duration.ofMillis(3000);\n+\t\tflinkConfig.set(durationConfigOption, duration);\n+\t\tassertEquals(duration, flinkConfig.get(durationConfigOption));\n+\n+\t\tBootstrapTools.writeConfiguration(flinkConfig, new File(flinkConfDir, FLINK_CONF_FILENAME));\n+\t\tfinal Configuration loadedFlinkConfig = GlobalConfiguration.loadConfiguration(flinkConfDir.getAbsolutePath());\n+\t\tassertThat(list, containsInAnyOrder(loadedFlinkConfig.get(listStringConfigOption).toArray()));\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(loadedFlinkConfig.get(mapConfigOption).entrySet().toArray()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5MzU3NQ=="}, "originalCommit": {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1060, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}