{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4OTYyMzA2", "number": 13027, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyNTowM1rOEWG9jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0NzoyM1rOEXiETQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjE4MTkwOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSink.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyNTowM1rOG9PYrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjowNDo1NVrOG9XR5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2ODM5Ng==", "bodyText": "If we were to use a normal configuration, what would happen? Subsequent jobs would not be able to run?", "url": "https://github.com/apache/flink/pull/13027#discussion_r466868396", "createdAt": "2020-08-07T07:25:03Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSink.java", "diffHunk": "@@ -241,12 +242,14 @@ public final DataStreamSink consumeDataStream(DataStream dataStream) {\n \t\t\tformatTypes[i] = tableSchema.getFieldDataType(i).get().getLogicalType();\n \t\t}\n \t\tRowType formatType = RowType.of(formatTypes, formatNames);\n-\t\tConfiguration formatConf = new Configuration(jobConf);\n-\t\tsd.getSerdeInfo().getParameters().forEach(formatConf::set);\n \t\tif (serLib.contains(\"parquet\")) {\n+\t\t\tConfiguration formatConf = new Configuration(jobConf);\n+\t\t\tsd.getSerdeInfo().getParameters().forEach(formatConf::set);\n \t\t\treturn Optional.of(ParquetRowDataBuilder.createWriterFactory(\n \t\t\t\t\tformatType, formatConf, hiveVersion.startsWith(\"3.\")));\n \t\t} else if (serLib.contains(\"orc\")) {\n+\t\t\tConfiguration formatConf = new ThreadLocalClassLoaderConfiguration(jobConf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cccf1bd4390323e70e998f819975fa9c29e0e4e5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5MTY1NA==", "bodyText": "Yes. That makes me believe that we should probably make the safety net configurable (on by default). Or would you think we can catch up and fix leaks much quicker?", "url": "https://github.com/apache/flink/pull/13027#discussion_r466991654", "createdAt": "2020-08-07T11:51:35Z", "author": {"login": "AHeise"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSink.java", "diffHunk": "@@ -241,12 +242,14 @@ public final DataStreamSink consumeDataStream(DataStream dataStream) {\n \t\t\tformatTypes[i] = tableSchema.getFieldDataType(i).get().getLogicalType();\n \t\t}\n \t\tRowType formatType = RowType.of(formatTypes, formatNames);\n-\t\tConfiguration formatConf = new Configuration(jobConf);\n-\t\tsd.getSerdeInfo().getParameters().forEach(formatConf::set);\n \t\tif (serLib.contains(\"parquet\")) {\n+\t\t\tConfiguration formatConf = new Configuration(jobConf);\n+\t\t\tsd.getSerdeInfo().getParameters().forEach(formatConf::set);\n \t\t\treturn Optional.of(ParquetRowDataBuilder.createWriterFactory(\n \t\t\t\t\tformatType, formatConf, hiveVersion.startsWith(\"3.\")));\n \t\t} else if (serLib.contains(\"orc\")) {\n+\t\t\tConfiguration formatConf = new ThreadLocalClassLoaderConfiguration(jobConf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2ODM5Ng=="}, "originalCommit": {"oid": "cccf1bd4390323e70e998f819975fa9c29e0e4e5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk5NzczNA==", "bodyText": "An opt-out switch is a good idea; also for cases where things don't behave as expected close to the next release, and we don't want to revert commits at that point.", "url": "https://github.com/apache/flink/pull/13027#discussion_r466997734", "createdAt": "2020-08-07T12:04:55Z", "author": {"login": "zentol"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSink.java", "diffHunk": "@@ -241,12 +242,14 @@ public final DataStreamSink consumeDataStream(DataStream dataStream) {\n \t\t\tformatTypes[i] = tableSchema.getFieldDataType(i).get().getLogicalType();\n \t\t}\n \t\tRowType formatType = RowType.of(formatTypes, formatNames);\n-\t\tConfiguration formatConf = new Configuration(jobConf);\n-\t\tsd.getSerdeInfo().getParameters().forEach(formatConf::set);\n \t\tif (serLib.contains(\"parquet\")) {\n+\t\t\tConfiguration formatConf = new Configuration(jobConf);\n+\t\t\tsd.getSerdeInfo().getParameters().forEach(formatConf::set);\n \t\t\treturn Optional.of(ParquetRowDataBuilder.createWriterFactory(\n \t\t\t\t\tformatType, formatConf, hiveVersion.startsWith(\"3.\")));\n \t\t} else if (serLib.contains(\"orc\")) {\n+\t\t\tConfiguration formatConf = new ThreadLocalClassLoaderConfiguration(jobConf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2ODM5Ng=="}, "originalCommit": {"oid": "cccf1bd4390323e70e998f819975fa9c29e0e4e5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDk1NzA0OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/configuration/CoreOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowNjo0NVrOG_WZiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowNjo0NVrOG_WZiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MDQ1Ng==", "bodyText": "we don't use underscores.", "url": "https://github.com/apache/flink/pull/13027#discussion_r469080456", "createdAt": "2020-08-12T08:06:45Z", "author": {"login": "zentol"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/CoreOptions.java", "diffHunk": "@@ -124,6 +124,15 @@\n \t\treturn parseParentFirstLoaderPatterns(base, append);\n \t}\n \n+\t@Documentation.Section(Documentation.Sections.EXPERT_CLASS_LOADING)\n+\tpublic static final ConfigOption<Boolean> CHECK_LEAKED_CLASSLOADER = ConfigOptions\n+\t\t.key(\"classloader.check_leaked_classloader\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98d4b17c52db1cea0fe0308b5330175c30e90da"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDk2NTM1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowOToyNVrOG_We6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODowOToyNVrOG_We6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA4MTgzMw==", "bodyText": "Retrieve the key from the actual configuration object instead.", "url": "https://github.com/apache/flink/pull/13027#discussion_r469081833", "createdAt": "2020-08-12T08:09:25Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/execution/librarycache/FlinkUserCodeClassLoaders.java", "diffHunk": "@@ -136,7 +150,10 @@ public void close() {\n \n \t\tprivate FlinkUserCodeClassLoader ensureInner() {\n \t\t\tif (inner == null) {\n-\t\t\t\tthrow new IllegalStateException(\"Trying to access closed classloader\");\n+\t\t\t\tthrow new IllegalStateException(\"Trying to access closed classloader. Please check if you store \" +\n+\t\t\t\t\t\"classloaders directly or indirectly in static fields. If the stacktrace suggests that the leak \" +\n+\t\t\t\t\t\"occurs in a third party library and cannot be fixed immediately, you can disable this check \" +\n+\t\t\t\t\t\"with the configuration 'classloader.check_leaked_classloader'.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98d4b17c52db1cea0fe0308b5330175c30e90da"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTEwODYxOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/configuration/CoreOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0NzoyM1rOG_X3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwODo0NzoyM1rOG_X3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTEwNDQzMQ==", "bodyText": "Fails attempts at loading classes if the user classloader of a job is used after it has terminated.\nThis is usually caused by the classloader being leaked by lingering threads or misbehaving libraries, which may also result in the classloader being used by other jobs.\nThis check should only be disabled if such a leak prevents further jobs from running.", "url": "https://github.com/apache/flink/pull/13027#discussion_r469104431", "createdAt": "2020-08-12T08:47:23Z", "author": {"login": "zentol"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/CoreOptions.java", "diffHunk": "@@ -124,6 +124,15 @@\n \t\treturn parseParentFirstLoaderPatterns(base, append);\n \t}\n \n+\t@Documentation.Section(Documentation.Sections.EXPERT_CLASS_LOADING)\n+\tpublic static final ConfigOption<Boolean> CHECK_LEAKED_CLASSLOADER = ConfigOptions\n+\t\t.key(\"classloader.check_leaked_classloader\")\n+\t\t.booleanType()\n+\t\t.defaultValue(true)\n+\t\t.withDescription(\"Fails if a user classloader is used in another job after a job has been finished. This \" +\n+\t\t\t\"check should only be disabled if the class leak occurs in an external library cannot be fixed \" +\n+\t\t\t\"immediately.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d98d4b17c52db1cea0fe0308b5330175c30e90da"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4887, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}