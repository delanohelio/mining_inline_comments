{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNzM0OTMw", "number": 12917, "reviewThreads": {"totalCount": 70, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1MjowNFrOERje3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0Mjo1OVrOEVUYTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQyNTkwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1MjowNVrOG2VT2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1MjowNVrOG2VT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNTQzMw==", "bodyText": "can be final", "url": "https://github.com/apache/flink/pull/12917#discussion_r459625433", "createdAt": "2020-07-23T17:52:05Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -123,17 +119,11 @@ public void testAllocateSimpleSlot() throws Exception {\n \t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n \t\t\tSlotRequestId requestId = new SlotRequestId();\n-\t\t\tCompletableFuture<LogicalSlot> future = scheduler.allocateSlot(\n-\t\t\t\trequestId,\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(slotPool, requestId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQyNjQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1MjoxNFrOG2VUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1MjoxNFrOG2VUNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNTUyNw==", "bodyText": "can be final", "url": "https://github.com/apache/flink/pull/12917#discussion_r459625527", "createdAt": "2020-07-23T17:52:14Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -145,10 +135,10 @@ public void testAllocateSimpleSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot = future.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot physicalSlot = future.get(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQ3NzI2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowNjo0NlrOG2V0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowNjo0NlrOG2V0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMzg1OA==", "bodyText": "name it as physicalSlot/allocatedSlot would be better", "url": "https://github.com/apache/flink/pull/12917#discussion_r459633858", "createdAt": "2020-07-23T18:06:46Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -245,27 +226,25 @@ public void testAllocateWithFreeSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \n \t\t\t// return this slot to pool\n-\t\t\tslot1.releaseSlot();\n+\t\t\tslotPool.releaseSlot(requestId1, null);\n \n-\t\t\tCompletableFuture<LogicalSlot> future2 = scheduler.allocateSlot(\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(0, slotPool.getAllocatedSlots().size());\n+\n+\t\t\tOptional<PhysicalSlot> optional = slotPool.allocateAvailableSlot(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQ5MDUxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMDoyNFrOG2V80w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoxMDoyNFrOG2V80w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTkyMw==", "bodyText": "Looks to me there is not need to have the process to allocate slot1, offer slot and release it.\nThe slot offering only would be enough to add a free slot.\nI think we can simplify it, maybe in a separate commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459635923", "createdAt": "2020-07-23T18:10:24Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -245,27 +226,25 @@ public void testAllocateWithFreeSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \n \t\t\t// return this slot to pool\n-\t\t\tslot1.releaseSlot();\n+\t\t\tslotPool.releaseSlot(requestId1, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODUzNzkxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMzo0NFrOG2WZ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyMzo0NFrOG2WZ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0MzM3Mg==", "bodyText": "these lines, except for \"assertEquals(1, slotPool.getAvailableSlots().size());\",  should be in the section of \"// we'll also accept non requested slots\".", "url": "https://github.com/apache/flink/pull/12917#discussion_r459643372", "createdAt": "2020-07-23T18:23:44Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -309,12 +286,16 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// accepted slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tLogicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tPhysicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 219}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU0Njk3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNjoyMFrOG2WfsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNjoyMFrOG2WfsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NDg0OA==", "bodyText": "This line is not needed because the allocation id of an AllocatedSlot is immutable.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459644848", "createdAt": "2020-07-23T18:26:20Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -309,12 +286,16 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// accepted slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tLogicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tPhysicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());\n \n \t\t\t// duplicated offer with using slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU0ODk0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNjo1NVrOG2Wg4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODoyNjo1NVrOG2Wg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NTE1NQ==", "bodyText": "Better to verify the availableSlots as well.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459645155", "createdAt": "2020-07-23T18:26:55Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -309,12 +286,16 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// accepted slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tLogicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tPhysicalSlot slot = future.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(1, slotPool.getAvailableSlots().size());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());\n \n \t\t\t// duplicated offer with using slot\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n-\t\t\tassertTrue(slot.isAlive());\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODU2MDg0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODozMDoyNVrOG2Wouw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo1OTowNFrOG2ma4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NzE2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tSlotRequestId requestId = new SlotRequestId();\n          \n          \n            \n            \t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n          \n          \n            \n            \t\t\t\tslotPool,\n          \n          \n            \n            \t\t\t\trequestId\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n          \n          \n            \n            \t\t\t\tslotPool,\n          \n          \n            \n            \t\t\t\tSlotRequestId()\n          \n          \n            \n            \t\t\t);\n          \n      \n    \n    \n  \n\nrequestId is not reused", "url": "https://github.com/apache/flink/pull/12917#discussion_r459647163", "createdAt": "2020-07-23T18:30:25Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,16 +254,14 @@ public void testOfferSlot() throws Exception {\n \n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\trequestId\n+\t\t\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgxOTk2NA==", "bodyText": "It would be reused in slotPool.releaseSlot(requestId, null) in the line below.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459819964", "createdAt": "2020-07-24T02:04:28Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,16 +254,14 @@ public void testOfferSlot() throws Exception {\n \n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\trequestId\n+\t\t\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NzE2Mw=="}, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTc2MQ==", "bodyText": "I see", "url": "https://github.com/apache/flink/pull/12917#discussion_r459905761", "createdAt": "2020-07-24T07:59:04Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,16 +254,14 @@ public void testOfferSlot() throws Exception {\n \n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\trequestId\n+\t\t\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY0NzE2Mw=="}, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODYxNDc4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo0NjowOVrOG2XLIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMzoxMzo1NFrOG2h_bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk3MA==", "bodyText": "does releaseFuture.get(); not work?", "url": "https://github.com/apache/flink/pull/12917#discussion_r459655970", "createdAt": "2020-07-23T18:46:09Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -365,19 +343,26 @@ public void testReleaseResource() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \t\t\tassertFalse(future2.isDone());\n \n \t\t\tfinal CompletableFuture<?> releaseFuture = new CompletableFuture<>();\n-\t\t\tfinal DummyPayload dummyPayload = new DummyPayload(releaseFuture);\n \n-\t\t\tslot1.tryAssignPayload(dummyPayload);\n+\t\t\tSingleLogicalSlot logicalSlot = SingleLogicalSlot.allocateFromPhysicalSlot(\n+\t\t\t\trequestId1,\n+\t\t\t\tslot1,\n+\t\t\t\tLocality.UNKNOWN,\n+\t\t\t\tnew DummySlotOwner(),\n+\t\t\t\ttrue\n+\t\t\t);\n+\n+\t\t\tlogicalSlot.tryAssignPayload(new DummyPayload(releaseFuture));\n \n \t\t\tslotPool.releaseTaskManager(taskManagerLocation.getResourceID(), null);\n \n-\t\t\treleaseFuture.get();\n-\t\t\tassertFalse(slot1.isAlive());\n+\t\t\treleaseFuture.get(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMTEyMA==", "bodyText": "I'm considering that adding a timeout in relaseFuture.get() will make sure this line won't block the test running indefinitely.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459821120", "createdAt": "2020-07-24T02:10:14Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -365,19 +343,26 @@ public void testReleaseResource() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \t\t\tassertFalse(future2.isDone());\n \n \t\t\tfinal CompletableFuture<?> releaseFuture = new CompletableFuture<>();\n-\t\t\tfinal DummyPayload dummyPayload = new DummyPayload(releaseFuture);\n \n-\t\t\tslot1.tryAssignPayload(dummyPayload);\n+\t\t\tSingleLogicalSlot logicalSlot = SingleLogicalSlot.allocateFromPhysicalSlot(\n+\t\t\t\trequestId1,\n+\t\t\t\tslot1,\n+\t\t\t\tLocality.UNKNOWN,\n+\t\t\t\tnew DummySlotOwner(),\n+\t\t\t\ttrue\n+\t\t\t);\n+\n+\t\t\tlogicalSlot.tryAssignPayload(new DummyPayload(releaseFuture));\n \n \t\t\tslotPool.releaseTaskManager(taskManagerLocation.getResourceID(), null);\n \n-\t\t\treleaseFuture.get();\n-\t\t\tassertFalse(slot1.isAlive());\n+\t\t\treleaseFuture.get(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk3MA=="}, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzMzE5Ng==", "bodyText": "I'll remove them.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459833196", "createdAt": "2020-07-24T03:13:54Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -365,19 +343,26 @@ public void testReleaseResource() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n+\t\t\tPhysicalSlot slot1 = future1.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future1.isDone());\n \t\t\tassertFalse(future2.isDone());\n \n \t\t\tfinal CompletableFuture<?> releaseFuture = new CompletableFuture<>();\n-\t\t\tfinal DummyPayload dummyPayload = new DummyPayload(releaseFuture);\n \n-\t\t\tslot1.tryAssignPayload(dummyPayload);\n+\t\t\tSingleLogicalSlot logicalSlot = SingleLogicalSlot.allocateFromPhysicalSlot(\n+\t\t\t\trequestId1,\n+\t\t\t\tslot1,\n+\t\t\t\tLocality.UNKNOWN,\n+\t\t\t\tnew DummySlotOwner(),\n+\t\t\t\ttrue\n+\t\t\t);\n+\n+\t\t\tlogicalSlot.tryAssignPayload(new DummyPayload(releaseFuture));\n \n \t\t\tslotPool.releaseTaskManager(taskManagerLocation.getResourceID(), null);\n \n-\t\t\treleaseFuture.get();\n-\t\t\tassertFalse(slot1.isAlive());\n+\t\t\treleaseFuture.get(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY1NTk3MA=="}, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY0Njg3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NTozNVrOG2XfTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODo1NTozNVrOG2XfTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2MTEzNA==", "bodyText": "According to Flink code style, the right bracket should be placed in the line of the last parameter.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459661134", "createdAt": "2020-07-23T18:55:35Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -224,16 +207,14 @@ public void testAllocateWithFreeSlot() throws Exception {\n \t\tfinal CompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future1 = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n+\t\t\tSlotRequestId requestId1 = new SlotRequestId();\n+\t\t\tCompletableFuture<PhysicalSlot> future1 = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\trequestId1\n+\t\t\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY2NDM4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowMDo0NlrOG2XqUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODowMjoyMFrOG2mgkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk1NQ==", "bodyText": "Why not replace it with createAndSetUpSlotPool ?\nAlso for the test case testCheckIdleSlot.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459663955", "createdAt": "2020-07-23T19:00:46Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -576,7 +550,6 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n \n \t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgyMTcxMg==", "bodyText": "Because in this commit there is no createAndSetUpSlotPool(Clock clock) method in SlotPoolImpl related test cases. In future commits, I replace all the createAndSetUpSlotPool with SlotPoolBuilder.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459821712", "createdAt": "2020-07-24T02:13:16Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -576,7 +550,6 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n \n \t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk1NQ=="}, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNzIxOQ==", "bodyText": "I see.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459907219", "createdAt": "2020-07-24T08:02:20Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -576,7 +550,6 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n \n \t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2Mzk1NQ=="}, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 365}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY4MjgzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNjowN1rOG2X1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNjowN1rOG2X1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NjgzNA==", "bodyText": "this change is unrelated and not necessary.\nLet's exclude it from this commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459666834", "createdAt": "2020-07-23T19:06:07Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -666,6 +639,8 @@ public void testFreeFailedSlots() throws Exception {\n \t\t\tfinal Optional<ResourceID> emptyTaskExecutorFuture = slotPool.failAllocation(\n \t\t\t\tslotOffer.getAllocationId(),\n \t\t\t\tfailException);\n+\n+\t\t\tassertTrue(emptyTaskExecutorFuture.isPresent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 416}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY4NjE3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNjo1NlrOG2X3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOTowNjo1NlrOG2X3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2NzMzMQ==", "bodyText": "why making this change?", "url": "https://github.com/apache/flink/pull/12917#discussion_r459667331", "createdAt": "2020-07-23T19:06:56Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -704,7 +679,7 @@ public void testCreateAllocatedSlotReport() throws Exception {\n \t\t\tslotPool.offerSlots(taskManagerLocation, taskManagerGateway, slotOffers);\n \n \t\t\t// wait for the completion of slot future\n-\t\t\tslotRequestFuture.get();\n+\t\t\tslotRequestFuture.get(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 449}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcwMDU0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTozOFrOG2YAfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTozOFrOG2YAfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTYyOA==", "bodyText": "Let's move createSlotPoolImpl() to be below this method because it is first (and only) used here.\nAlso let's remove the @Nonnull tag of it because it is against current code style.", "url": "https://github.com/apache/flink/pull/12917#discussion_r459669628", "createdAt": "2020-07-23T19:11:38Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -893,14 +866,6 @@ protected boolean matchesSafely(AllocatedSlotInfo item, Description mismatchDesc\n \t\t};\n \t}\n \n-\tprivate CompletableFuture<LogicalSlot> allocateSlot(Scheduler scheduler, SlotRequestId slotRequestId) {\n-\t\treturn scheduler.allocateSlot(\n-\t\t\tslotRequestId,\n-\t\t\tnew DummyScheduledUnit(),\n-\t\t\tSlotProfile.noRequirements(),\n-\t\t\ttimeout);\n-\t}\n-\n \tprivate SlotPoolImpl createAndSetUpSlotPool() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcc6cc227872e65886c46c8958e20db854d083a0"}, "originalPosition": 476}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODEzMzc2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxMjowNlrOG3ryoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzozMDo1OFrOG4nRdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjMzNw==", "bodyText": "I'd prefer to move this method to be below createAndSetUpSlotPool() because it is first and only invoked there.", "url": "https://github.com/apache/flink/pull/12917#discussion_r461042337", "createdAt": "2020-07-27T17:12:06Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -145,14 +133,13 @@ public void testAllocateSimpleSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot = future.get(1, TimeUnit.SECONDS);\n+\t\t\tfinal PhysicalSlot physicalSlot = future.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future.isDone());\n-\t\t\tassertTrue(slot.isAlive());\n-\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(taskManagerLocation, physicalSlot.getTaskManagerLocation());\n+\t\t\tassertEquals(slotRequest.getAllocationId(), physicalSlot.getAllocationId());\n \t\t}\n \t}\n \n-\t@Nonnull\n \tprivate SlotPoolImpl createSlotPoolImpl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b95accecb1606d14867c2804a1cd54ffd11beb3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MTkyMw==", "bodyText": "It's fine to not do this because in a later commit you will remove it.\nBut then I think you also do not need to remove @Nonnull in this commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r461061923", "createdAt": "2020-07-27T17:45:43Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -145,14 +133,13 @@ public void testAllocateSimpleSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot = future.get(1, TimeUnit.SECONDS);\n+\t\t\tfinal PhysicalSlot physicalSlot = future.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future.isDone());\n-\t\t\tassertTrue(slot.isAlive());\n-\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(taskManagerLocation, physicalSlot.getTaskManagerLocation());\n+\t\t\tassertEquals(slotRequest.getAllocationId(), physicalSlot.getAllocationId());\n \t\t}\n \t}\n \n-\t@Nonnull\n \tprivate SlotPoolImpl createSlotPoolImpl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjMzNw=="}, "originalCommit": {"oid": "3b95accecb1606d14867c2804a1cd54ffd11beb3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNjg4Nw==", "bodyText": "Okay, when I rearrange the commits I'll take care of this.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462016887", "createdAt": "2020-07-29T03:30:58Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -145,14 +133,13 @@ public void testAllocateSimpleSlot() throws Exception {\n \n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotOffer));\n \n-\t\t\tLogicalSlot slot = future.get(1, TimeUnit.SECONDS);\n+\t\t\tfinal PhysicalSlot physicalSlot = future.get(1, TimeUnit.SECONDS);\n \t\t\tassertTrue(future.isDone());\n-\t\t\tassertTrue(slot.isAlive());\n-\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(taskManagerLocation, physicalSlot.getTaskManagerLocation());\n+\t\t\tassertEquals(slotRequest.getAllocationId(), physicalSlot.getAllocationId());\n \t\t}\n \t}\n \n-\t@Nonnull\n \tprivate SlotPoolImpl createSlotPoolImpl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0MjMzNw=="}, "originalCommit": {"oid": "3b95accecb1606d14867c2804a1cd54ffd11beb3"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODEzNjQxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxMjo1MVrOG3r0Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzo0NzowMVrOG4ngog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Mjc1NA==", "bodyText": "Boolean -> boolean", "url": "https://github.com/apache/flink/pull/12917#discussion_r461042754", "createdAt": "2020-07-27T17:12:51Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2MTA1OA==", "bodyText": "Can we add setters for jobID and connectToResourceManager, and not make them params of build()?\nUsually build() params are necessary ones without default values.", "url": "https://github.com/apache/flink/pull/12917#discussion_r461061058", "createdAt": "2020-07-27T17:44:12Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Mjc1NA=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMDc3MA==", "bodyText": "The param connectToResourceManager has been removed in the fix-up commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462020770", "createdAt": "2020-07-29T03:47:01Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0Mjc1NA=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE0OTY3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxNjoxMFrOG3r8BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo0MjoyNFrOG5R9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc0MQ==", "bodyText": "why changing the default value of batchSlotTimeout?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461044741", "createdAt": "2020-07-27T17:16:10Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\tprivate Time batchSlotTimeout = Time.milliseconds(2L);\n+\tprivate final ComponentMainThreadExecutor componentMainThreadExecutor;\n+\tprivate ResourceManagerGateway resourceManagerGateway;\n+\tprivate Time batchSlotTimeout = Time.milliseconds(JobManagerOptions.SLOT_IDLE_TIMEOUT.defaultValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNzkzMg==", "bodyText": "Because in most slot pool related test cases the batchSlotTimeout is set to be this value, and only in some test cases, the batchSlotTimeout is set to be 2 milliseconds. I set the default value to be this value, and explicitly set other timeout values in their own cases.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462017932", "createdAt": "2020-07-29T03:35:18Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\tprivate Time batchSlotTimeout = Time.milliseconds(2L);\n+\tprivate final ComponentMainThreadExecutor componentMainThreadExecutor;\n+\tprivate ResourceManagerGateway resourceManagerGateway;\n+\tprivate Time batchSlotTimeout = Time.milliseconds(JobManagerOptions.SLOT_IDLE_TIMEOUT.defaultValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc0MQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNjI2NQ==", "bodyText": "I see. Thanks for the explanation.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462716265", "createdAt": "2020-07-30T03:42:24Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\tprivate Time batchSlotTimeout = Time.milliseconds(2L);\n+\tprivate final ComponentMainThreadExecutor componentMainThreadExecutor;\n+\tprivate ResourceManagerGateway resourceManagerGateway;\n+\tprivate Time batchSlotTimeout = Time.milliseconds(JobManagerOptions.SLOT_IDLE_TIMEOUT.defaultValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDc0MQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE1NzI5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxODoyN1rOG3sBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzo1NTowOVrOG4nowg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjA0NA==", "bodyText": "A same TIMEOUT is already defined in the test base", "url": "https://github.com/apache/flink/pull/12917#discussion_r461046044", "createdAt": "2020-07-27T17:18:27Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -88,28 +84,21 @@\n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+\tprivate static final Time TIMEOUT = Time.seconds(10L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMjg1MA==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462022850", "createdAt": "2020-07-29T03:55:09Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -88,28 +84,21 @@\n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+\tprivate static final Time TIMEOUT = Time.seconds(10L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NjA0NA=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE2OTAxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMTozM1rOG3sIZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozNDozNVrOG4sN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NzkwOA==", "bodyText": "It's better have one more indentation for the params to differentiate them from the method body.\nAnother option is to add an empty line between the params and the method body.", "url": "https://github.com/apache/flink/pull/12917#discussion_r461047908", "createdAt": "2020-07-27T17:21:33Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n+\t\tfinal SlotPool slotPool,\n+\t\tfinal SlotRequestId slotRequestId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5Nzg3Mg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462097872", "createdAt": "2020-07-29T07:34:35Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n+\t\tfinal SlotPool slotPool,\n+\t\tfinal SlotRequestId slotRequestId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NzkwOA=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE3NDg4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMzowOVrOG3sMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozNDo0NVrOG4sONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODg1MQ==", "bodyText": "can be static and package private", "url": "https://github.com/apache/flink/pull/12917#discussion_r461048851", "createdAt": "2020-07-27T17:23:09Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n+\t\tfinal SlotPool slotPool,\n+\t\tfinal SlotRequestId slotRequestId) {\n+\t\treturn requestNewAllocatedSlot(slotPool, slotRequestId, TIMEOUT);\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5Nzk3Mg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462097972", "createdAt": "2020-07-29T07:34:45Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n+\t\tfinal SlotPool slotPool,\n+\t\tfinal SlotRequestId slotRequestId) {\n+\t\treturn requestNewAllocatedSlot(slotPool, slotRequestId, TIMEOUT);\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODg1MQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE3NTY2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyMzoyMVrOG3sMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzozNDo0MFrOG4sOAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODk2Ng==", "bodyText": "can be static and package private", "url": "https://github.com/apache/flink/pull/12917#discussion_r461048966", "createdAt": "2020-07-27T17:23:21Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5NzkyMw==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462097923", "createdAt": "2020-07-29T07:34:40Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn slotPoolBuilder.build();\n+\t}\n+\n+\tprotected void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n+\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n+\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n+\t\t}\n+\t}\n+\n+\tprotected CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0ODk2Ng=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE4NjQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyNjowNlrOG3sTCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzo1NToxN1rOG4no5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MDYzNQ==", "bodyText": "a same mainThreadExecutor is already defined in the test base", "url": "https://github.com/apache/flink/pull/12917#discussion_r461050635", "createdAt": "2020-07-27T17:26:06Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -88,28 +84,21 @@\n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+\tprivate static final Time TIMEOUT = Time.seconds(10L);\n+\tprivate static final ComponentMainThreadExecutor mainThreadExecutor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMjg4Nw==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462022887", "createdAt": "2020-07-29T03:55:17Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -88,28 +84,21 @@\n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+\tprivate static final Time TIMEOUT = Time.seconds(10L);\n+\tprivate static final ComponentMainThreadExecutor mainThreadExecutor =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MDYzNQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE5ODcyOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoyOTowOVrOG3saYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo1NzoyOVrOG4ppPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MjUxMw==", "bodyText": "why removing registerTaskManager()?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461052513", "createdAt": "2020-07-27T17:29:09Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -777,26 +764,15 @@ public void testSlotsOfferedWithoutResourceManagerConnected() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n-\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n-\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n-\t\t}\n-\t}\n-\n-\tprivate CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n-\t\t\tfinal SlotPool slotPool,\n-\t\t\tfinal SlotRequestId slotRequestId) {\n-\t\treturn slotPool.requestNewAllocatedSlot(slotRequestId, ResourceProfile.UNKNOWN, timeout);\n-\t}\n-\n \tprivate void offerSlot(final SlotPoolImpl slotPool, final AllocationID allocationId) {\n \t\tfinal SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.ANY);\n-\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 300}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1NTc0MQ==", "bodyText": "I've already brought it back in the fix-up commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462055741", "createdAt": "2020-07-29T05:57:29Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -777,26 +764,15 @@ public void testSlotsOfferedWithoutResourceManagerConnected() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n-\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n-\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n-\t\t}\n-\t}\n-\n-\tprivate CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n-\t\t\tfinal SlotPool slotPool,\n-\t\t\tfinal SlotRequestId slotRequestId) {\n-\t\treturn slotPool.requestNewAllocatedSlot(slotRequestId, ResourceProfile.UNKNOWN, timeout);\n-\t}\n-\n \tprivate void offerSlot(final SlotPoolImpl slotPool, final AllocationID allocationId) {\n \t\tfinal SlotOffer slotOffer = new SlotOffer(allocationId, 0, ResourceProfile.ANY);\n-\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1MjUxMw=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 300}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIwNzI5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozMToyMlrOG3sfxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyMjoxOFrOG4wGHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1Mzg5Mw==", "bodyText": "why changing registerAndOfferSlots to offerSlots? IIRC, a location must be registered before offering slots from it?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461053893", "createdAt": "2020-07-27T17:31:22Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -665,19 +643,21 @@ public void testCreateAllocatedSlotReport() throws Exception {\n \t\t\tslotRequestFuture.get();\n \n \t\t\tfinal AllocatedSlotReport slotReport = slotPool.createAllocatedSlotReport(taskManagerLocation.getResourceID());\n-\t\t\tassertThat(jobId, is(slotReport.getJobId()));\n+\t\t\tassertThat(jobID, is(slotReport.getJobId()));\n \t\t\tassertThat(slotReport.getAllocatedSlotInfos(), containsInAnyOrder(isEachEqual(allocatedSlotInfos)));\n \t\t}\n \t}\n \n \t@Test\n \tpublic void testCalculationOfTaskExecutorUtilization() throws Exception {\n \t\ttry (final SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n+\n \t\t\tfinal TaskManagerLocation firstTaskManagerLocation = new LocalTaskManagerLocation();\n \t\t\tfinal TaskManagerLocation secondTaskManagerLocation = new LocalTaskManagerLocation();\n \n-\t\t\tfinal List<AllocationID> firstTaskManagersSlots = registerAndOfferSlots(firstTaskManagerLocation, slotPool, 4);\n-\t\t\tfinal List<AllocationID> secondTaskManagersSlots = registerAndOfferSlots(secondTaskManagerLocation, slotPool, 4);\n+\t\t\tfinal List<AllocationID> firstTaskManagersSlots = offerSlots(firstTaskManagerLocation, slotPool, 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2MTQzOQ==", "bodyText": "I've undone this modification.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462161439", "createdAt": "2020-07-29T09:22:18Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -665,19 +643,21 @@ public void testCreateAllocatedSlotReport() throws Exception {\n \t\t\tslotRequestFuture.get();\n \n \t\t\tfinal AllocatedSlotReport slotReport = slotPool.createAllocatedSlotReport(taskManagerLocation.getResourceID());\n-\t\t\tassertThat(jobId, is(slotReport.getJobId()));\n+\t\t\tassertThat(jobID, is(slotReport.getJobId()));\n \t\t\tassertThat(slotReport.getAllocatedSlotInfos(), containsInAnyOrder(isEachEqual(allocatedSlotInfos)));\n \t\t}\n \t}\n \n \t@Test\n \tpublic void testCalculationOfTaskExecutorUtilization() throws Exception {\n \t\ttry (final SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n+\n \t\t\tfinal TaskManagerLocation firstTaskManagerLocation = new LocalTaskManagerLocation();\n \t\t\tfinal TaskManagerLocation secondTaskManagerLocation = new LocalTaskManagerLocation();\n \n-\t\t\tfinal List<AllocationID> firstTaskManagersSlots = registerAndOfferSlots(firstTaskManagerLocation, slotPool, 4);\n-\t\t\tfinal List<AllocationID> secondTaskManagersSlots = registerAndOfferSlots(secondTaskManagerLocation, slotPool, 4);\n+\t\t\tfinal List<AllocationID> firstTaskManagersSlots = offerSlots(firstTaskManagerLocation, slotPool, 4);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1Mzg5Mw=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIxNDcyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozMzoyNVrOG3skcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzo1NjowNlrOG4np1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTA4OQ==", "bodyText": "This change should not be part of this commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r461055089", "createdAt": "2020-07-27T17:33:25Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,14 +260,14 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// we'll also accept non requested slots\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, nonRequestedSlotOffer));\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tfinal PhysicalSlot slot = future.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMzEyNQ==", "bodyText": "I'll put it into the first commit when I rearrange the commits.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462023125", "createdAt": "2020-07-29T03:56:06Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -275,14 +260,14 @@ public void testOfferSlot() throws Exception {\n \n \t\t\t// we'll also accept non requested slots\n \t\t\tassertTrue(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, nonRequestedSlotOffer));\n+\t\t\tassertEquals(1, slotPool.getAllocatedSlots().size());\n+\t\t\tfinal PhysicalSlot slot = future.get(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tassertEquals(taskManagerLocation, slot.getTaskManagerLocation());\n+\t\t\tassertEquals(nonRequestedSlotOffer.getAllocationId(), slot.getAllocationId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NTA4OQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIyMTE5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNToxMVrOG3sogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0OTo0MlrOG4pfZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjEzMQ==", "bodyText": "can we have a createAndSetUpSlotPool(JobID)?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461056131", "createdAt": "2020-07-27T17:35:11Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -635,8 +612,9 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobID = new JobID();\n \n-\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\ttry (SlotPoolImpl slotPool = slotPoolBuilder.build(jobID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1MzIyMg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462053222", "createdAt": "2020-07-29T05:49:42Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -635,8 +612,9 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobID = new JobID();\n \n-\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\ttry (SlotPoolImpl slotPool = slotPoolBuilder.build(jobID)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NjEzMQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIyNzAxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozNjo1NFrOG3ssGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNTo0ODozMVrOG4peAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzA1MA==", "bodyText": "Let's name it as jobId which is more common in Flink code.", "url": "https://github.com/apache/flink/pull/12917#discussion_r461057050", "createdAt": "2020-07-27T17:36:54Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -635,8 +612,9 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobID = new JobID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA1Mjg2Nw==", "bodyText": "Done. I'll pay attention to this in the future.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462052867", "createdAt": "2020-07-29T05:48:31Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -635,8 +612,9 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobID = new JobID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1NzA1MA=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIzNjQ4OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozOTo0MlrOG3sx9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzozMjozOVrOG4nS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODU1MQ==", "bodyText": "why removing the default value?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461058551", "createdAt": "2020-07-27T17:39:42Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNzI3NQ==", "bodyText": "I've already added the default value back in the fix-up commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462017275", "createdAt": "2020-07-29T03:32:39Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -35,9 +36,10 @@\n  */\n public class SlotPoolBuilder {\n \n-\tprivate ComponentMainThreadExecutor componentMainThreadExecutor;\n-\tprivate ResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODU1MQ=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIzOTk1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0MDo0MFrOG3s0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzo0NzoxN1rOG4nhDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTA4MA==", "bodyText": "can we invoke connectToResourceManager only when connectToResourceManager==true and resourceManagerGateway != null?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461059080", "createdAt": "2020-07-27T17:40:40Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {\n \t\tfinal TestingSlotPoolImpl slotPool = new TestingSlotPoolImpl(\n-\t\t\tnew JobID(),\n+\t\t\tjobID,\n \t\t\tclock,\n \t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime(),\n+\t\t\tidleSlotTimeout,\n \t\t\tbatchSlotTimeout);\n \n \t\tslotPool.start(JobMasterId.generate(), \"foobar\", componentMainThreadExecutor);\n \n-\t\tCompletableFuture.runAsync(() -> slotPool.connectToResourceManager(resourceManagerGateway), componentMainThreadExecutor).join();\n+\t\tif (connectToResourceManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMDg3OA==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462020878", "createdAt": "2020-07-29T03:47:17Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBuilder.java", "diffHunk": "@@ -54,23 +56,47 @@ public SlotPoolBuilder setBatchSlotTimeout(Time batchSlotTimeout) {\n \t\treturn this;\n \t}\n \n+\tpublic SlotPoolBuilder setIdleSlotTimeout(Time idleSlotTimeout) {\n+\t\tthis.idleSlotTimeout = idleSlotTimeout;\n+\t\treturn this;\n+\t}\n+\n \tpublic SlotPoolBuilder setClock(Clock clock) {\n \t\tthis.clock = clock;\n \t\treturn this;\n \t}\n \n-\tpublic TestingSlotPoolImpl build() throws Exception {\n+\tpublic TestingSlotPoolImpl build(JobID jobID, Boolean connectToResourceManager) throws Exception {\n \t\tfinal TestingSlotPoolImpl slotPool = new TestingSlotPoolImpl(\n-\t\t\tnew JobID(),\n+\t\t\tjobID,\n \t\t\tclock,\n \t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime(),\n+\t\t\tidleSlotTimeout,\n \t\t\tbatchSlotTimeout);\n \n \t\tslotPool.start(JobMasterId.generate(), \"foobar\", componentMainThreadExecutor);\n \n-\t\tCompletableFuture.runAsync(() -> slotPool.connectToResourceManager(resourceManagerGateway), componentMainThreadExecutor).join();\n+\t\tif (connectToResourceManager) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTA4MA=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTUzMzM3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMToxMzozN1rOG35CRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMzo1NjoxOVrOG4nqAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1OTMzMw==", "bodyText": "Can we have a createAndSetupSlotPool(clock, idleSlotTimeout)?", "url": "https://github.com/apache/flink/pull/12917#discussion_r461259333", "createdAt": "2020-07-28T01:13:37Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -510,33 +496,24 @@ public void testCheckIdleSlot() throws Exception {\n \n \t\t\tslotPool.triggerCheckIdleSlot();\n \n-\t\t\tfinal AllocationID freedSlot = freedSlots.poll(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tfinal AllocationID freedSlot = freedSlots.poll(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS);\n \n \t\t\tassertThat(freedSlot, Matchers.is(expiredSlotID));\n \t\t\tassertThat(freedSlots.isEmpty(), Matchers.is(true));\n \t\t}\n \t}\n \n-\tprivate TestingSlotPoolImpl createSlotPoolImpl(ManualClock clock) {\n-\t\treturn new TestingSlotPoolImpl(\n-\t\t\tjobId,\n-\t\t\tclock,\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\ttimeout,\n-\t\t\tTestingUtils.infiniteTime());\n-\t}\n-\n \t/**\n \t * Tests that idle slots which cannot be released will be discarded. See FLINK-11059.\n \t */\n \t@Test\n \tpublic void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\tfinal ManualClock clock = new ManualClock();\n \n-\t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n-\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\n+\t\ttry (TestingSlotPoolImpl slotPool = slotPoolBuilder", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAyMzE2OQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462023169", "createdAt": "2020-07-29T03:56:19Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -510,33 +496,24 @@ public void testCheckIdleSlot() throws Exception {\n \n \t\t\tslotPool.triggerCheckIdleSlot();\n \n-\t\t\tfinal AllocationID freedSlot = freedSlots.poll(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\t\t\tfinal AllocationID freedSlot = freedSlots.poll(TIMEOUT.toMilliseconds(), TimeUnit.MILLISECONDS);\n \n \t\t\tassertThat(freedSlot, Matchers.is(expiredSlotID));\n \t\t\tassertThat(freedSlots.isEmpty(), Matchers.is(true));\n \t\t}\n \t}\n \n-\tprivate TestingSlotPoolImpl createSlotPoolImpl(ManualClock clock) {\n-\t\treturn new TestingSlotPoolImpl(\n-\t\t\tjobId,\n-\t\t\tclock,\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\ttimeout,\n-\t\t\tTestingUtils.infiniteTime());\n-\t}\n-\n \t/**\n \t * Tests that idle slots which cannot be released will be discarded. See FLINK-11059.\n \t */\n \t@Test\n \tpublic void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \t\tfinal ManualClock clock = new ManualClock();\n \n-\t\ttry (TestingSlotPoolImpl slotPool = createSlotPoolImpl(clock)) {\n-\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\n+\t\ttry (TestingSlotPoolImpl slotPool = slotPoolBuilder", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1OTMzMw=="}, "originalCommit": {"oid": "bca2f209556adea1d4cc8f8f7c8e377ca2b78755"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg4MjIwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzoyODozMVrOG5Rv6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzowNjoyN1rOG5WX4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMjgwOA==", "bodyText": "looks to me all the createAndSetUpSlotPool(..) methods can be package private?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462712808", "createdAt": "2020-07-30T03:28:31Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc4ODU3Nw==", "bodyText": "Got it. Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462788577", "createdAt": "2020-07-30T07:06:27Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {\n+\tprotected static final Time TIMEOUT = Time.seconds(10L);\n+\n+\tprotected final ComponentMainThreadExecutor mainThreadExecutor =\n+\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n+\n+\tprotected TestingResourceManagerGateway resourceManagerGateway;\n+\tprotected SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tprotected TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMjgwOA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg5MDEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozMzoxMFrOG5R0cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNTowNzozMFrOG5TTOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMzk2OA==", "bodyText": "It's better to invoke super.setup(); first in case it overrides any actions in the sub-class.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462713968", "createdAt": "2020-07-30T03:33:10Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -87,56 +77,38 @@\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n-\n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n \tprivate TaskManagerLocation taskManagerLocation;\n-\n \tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n \n-\tprivate TestingResourceManagerGateway resourceManagerGateway;\n-\n-\tprivate ComponentMainThreadExecutor mainThreadExecutor =\n-\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n-\n \t@Before\n-\tpublic void setUp() throws Exception {\n-\t\tthis.jobId = new JobID();\n-\n+\t@Override\n+\tpublic void setup() throws Exception {\n \t\ttaskManagerLocation = new LocalTaskManagerLocation();\n \t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n-\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tsuper.setup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjczODIzMg==", "bodyText": "Agreed. Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462738232", "createdAt": "2020-07-30T05:07:30Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -87,56 +77,38 @@\n import static org.hamcrest.Matchers.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n /**\n  * Tests for the {@link SlotPoolImpl}.\n  */\n-public class SlotPoolImplTest extends TestLogger {\n-\n-\tprivate final Time timeout = Time.seconds(10L);\n-\n-\tprivate JobID jobId;\n+public class SlotPoolImplTest extends SlotPoolTestBase {\n \n \tprivate TaskManagerLocation taskManagerLocation;\n-\n \tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n \n-\tprivate TestingResourceManagerGateway resourceManagerGateway;\n-\n-\tprivate ComponentMainThreadExecutor mainThreadExecutor =\n-\t\tComponentMainThreadExecutorServiceAdapter.forMainThread();\n-\n \t@Before\n-\tpublic void setUp() throws Exception {\n-\t\tthis.jobId = new JobID();\n-\n+\t@Override\n+\tpublic void setup() throws Exception {\n \t\ttaskManagerLocation = new LocalTaskManagerLocation();\n \t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n-\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tsuper.setup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxMzk2OA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg5MzMyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozNTowNFrOG5R2QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxMzo1M1rOG5Ww3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDQzMw==", "bodyText": "nit: allocationId", "url": "https://github.com/apache/flink/pull/12917#discussion_r462714433", "createdAt": "2020-07-30T03:35:04Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -224,48 +182,27 @@ public void testAllocateWithFreeSlot() throws Exception {\n \t\tfinal CompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future1 = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n-\t\t\tassertFalse(future1.isDone());\n-\n-\t\t\tfinal SlotRequest slotRequest = slotRequestFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\n+\t\t\tAllocationID allocationID = new AllocationID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NDk3NA==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462794974", "createdAt": "2020-07-30T07:13:53Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -224,48 +182,27 @@ public void testAllocateWithFreeSlot() throws Exception {\n \t\tfinal CompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n \t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n \t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());\n \n-\t\t\tCompletableFuture<LogicalSlot> future1 = scheduler.allocateSlot(\n-\t\t\t\tnew SlotRequestId(),\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noLocality(DEFAULT_TESTING_PROFILE),\n-\t\t\t\ttimeout);\n-\t\t\tassertFalse(future1.isDone());\n-\n-\t\t\tfinal SlotRequest slotRequest = slotRequestFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n-\n+\t\t\tAllocationID allocationID = new AllocationID();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDQzMw=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg5NjQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozNzowM1rOG5R4Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNDo1NVrOG5W0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDkxMA==", "bodyText": "nit: allocatedSlotFuture", "url": "https://github.com/apache/flink/pull/12917#discussion_r462714910", "createdAt": "2020-07-30T03:37:03Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -591,17 +501,19 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \n \t\t\tassertThat(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire), Matchers.is(true));\n \n-\t\t\tclock.advanceTime(timeout.toMilliseconds() + 1, TimeUnit.MILLISECONDS);\n+\t\t\tclock.advanceTime(TIMEOUT.toMilliseconds() + 1, TimeUnit.MILLISECONDS);\n \n \t\t\tslotPool.triggerCheckIdleSlot();\n \n \t\t\tfreeSlotLatch.await();\n \n-\t\t\tCompletableFuture<LogicalSlot> allocatedSlotFuture = allocateSlot(scheduler, new SlotRequestId());\n+\t\t\tfinal CompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 530}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NTg1MQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462795851", "createdAt": "2020-07-30T07:14:55Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -591,17 +501,19 @@ public void testDiscardIdleSlotIfReleasingFailed() throws Exception {\n \n \t\t\tassertThat(slotPool.offerSlot(taskManagerLocation, taskManagerGateway, slotToExpire), Matchers.is(true));\n \n-\t\t\tclock.advanceTime(timeout.toMilliseconds() + 1, TimeUnit.MILLISECONDS);\n+\t\t\tclock.advanceTime(TIMEOUT.toMilliseconds() + 1, TimeUnit.MILLISECONDS);\n \n \t\t\tslotPool.triggerCheckIdleSlot();\n \n \t\t\tfreeSlotLatch.await();\n \n-\t\t\tCompletableFuture<LogicalSlot> allocatedSlotFuture = allocateSlot(scheduler, new SlotRequestId());\n+\t\t\tfinal CompletableFuture<PhysicalSlot> future = requestNewAllocatedSlot(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNDkxMA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 530}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODg5Nzk1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozODowN1rOG5R4_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzoxNTozOFrOG5W1sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTEzMg==", "bodyText": "this right bracket should be at the end of the previous line.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462715132", "createdAt": "2020-07-30T03:38:07Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -676,18 +586,18 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobId = new JobID();\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool(jobId)) {\n \n \t\t\tfinal ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(1);\n \t\t\tresourceManagerGateway.setRequestSlotConsumer(\n-\t\t\t\t\tslotRequest -> allocationIds.offer(slotRequest.getAllocationId()));\n-\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\t\t\tslotRequest -> allocationIds.offer(slotRequest.getAllocationId()));\n \n-\t\t\tfinal SlotRequestId slotRequestId = new SlotRequestId();\n-\t\t\tfinal CompletableFuture<LogicalSlot> slotRequestFuture = allocateSlot(scheduler, slotRequestId);\n+\t\t\tfinal CompletableFuture<PhysicalSlot> slotRequestFuture = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\tnew SlotRequestId()\n+\t\t\t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 595}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc5NjIwOQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462796209", "createdAt": "2020-07-30T07:15:38Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -676,18 +586,18 @@ public void testFreeFailedSlots() throws Exception {\n \t */\n \t@Test\n \tpublic void testCreateAllocatedSlotReport() throws Exception {\n+\t\tfinal JobID jobId = new JobID();\n \n-\t\ttry (SlotPoolImpl slotPool = createSlotPoolImpl()) {\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool(jobId)) {\n \n \t\t\tfinal ArrayBlockingQueue<AllocationID> allocationIds = new ArrayBlockingQueue<>(1);\n \t\t\tresourceManagerGateway.setRequestSlotConsumer(\n-\t\t\t\t\tslotRequest -> allocationIds.offer(slotRequest.getAllocationId()));\n-\n-\t\t\tsetupSlotPool(slotPool, resourceManagerGateway, mainThreadExecutor);\n-\t\t\tScheduler scheduler = setupScheduler(slotPool, mainThreadExecutor);\n+\t\t\t\tslotRequest -> allocationIds.offer(slotRequest.getAllocationId()));\n \n-\t\t\tfinal SlotRequestId slotRequestId = new SlotRequestId();\n-\t\t\tfinal CompletableFuture<LogicalSlot> slotRequestFuture = allocateSlot(scheduler, slotRequestId);\n+\t\t\tfinal CompletableFuture<PhysicalSlot> slotRequestFuture = requestNewAllocatedSlot(\n+\t\t\t\tslotPool,\n+\t\t\t\tnew SlotRequestId()\n+\t\t\t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTEzMg=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 595}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkwMDU4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzozOTozOVrOG5R6dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjo1MTozOFrOG5VqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTUxMQ==", "bodyText": "registerTaskManager is not need because the following registerAndOfferSlot will do it.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462715511", "createdAt": "2020-07-30T03:39:39Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -776,7 +686,9 @@ public void testOrphanedAllocationIsCanceledIfNotRemapped() throws Exception {\n \t\tfinal List<AllocationID> canceledAllocations = new ArrayList<>();\n \t\tresourceManagerGateway.setCancelSlotConsumer(canceledAllocations::add);\n \n-\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool(resourceManagerGateway)) {\n+\t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc3Njk0MQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462776941", "createdAt": "2020-07-30T06:51:38Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -776,7 +686,9 @@ public void testOrphanedAllocationIsCanceledIfNotRemapped() throws Exception {\n \t\tfinal List<AllocationID> canceledAllocations = new ArrayList<>();\n \t\tresourceManagerGateway.setCancelSlotConsumer(canceledAllocations::add);\n \n-\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool(resourceManagerGateway)) {\n+\t\t\tslotPool.registerTaskManager(taskManagerLocation.getResourceID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxNTUxMQ=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 632}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkyMjMzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1Mjo0MlrOG5SG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxMDoyMlrOG5YmAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODcwNQ==", "bodyText": "I guess this change is unintentional?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462718705", "createdAt": "2020-07-30T03:52:42Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -71,9 +81,9 @@ boolean isBatchSlotRequestTimeoutCheckEnabled() {\n \n \t@Override\n \tpublic CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n-\t\t\tfinal SlotRequestId slotRequestId,\n-\t\t\tfinal ResourceProfile resourceProfile,\n-\t\t\t@Nullable final Time timeout) {\n+\t\tfinal SlotRequestId slotRequestId,\n+\t\tfinal ResourceProfile resourceProfile,\n+\t\t@Nullable final Time timeout) {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNDk2Mg==", "bodyText": "Yes. Undone this change in a new commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462824962", "createdAt": "2020-07-30T08:10:22Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -71,9 +81,9 @@ boolean isBatchSlotRequestTimeoutCheckEnabled() {\n \n \t@Override\n \tpublic CompletableFuture<PhysicalSlot> requestNewAllocatedSlot(\n-\t\t\tfinal SlotRequestId slotRequestId,\n-\t\t\tfinal ResourceProfile resourceProfile,\n-\t\t\t@Nullable final Time timeout) {\n+\t\tfinal SlotRequestId slotRequestId,\n+\t\tfinal ResourceProfile resourceProfile,\n+\t\t@Nullable final Time timeout) {\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxODcwNQ=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkyODY0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1NjoxM1rOG5SKkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMjoyMDoyN1rOG556_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxOTYzNQ==", "bodyText": "Could we have a separate commit to merge SlotPoolInteractionsTest#TestingSlotPool with TestingSlotPoolImpl?\nIt can be easier to reasoning which methods are ported instead of being newly added.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462719635", "createdAt": "2020-07-30T03:56:13Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -39,6 +43,10 @@\n \n \tprivate ResourceProfile lastRequestedSlotResourceProfile;\n \n+\tprivate volatile Consumer<SlotRequestId> releaseSlotConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccf8d8d2d7e3e7ccddbb921914dad0bd831a70a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3MTAwNA==", "bodyText": "I get it. I'll do it when I rearrange the commits.", "url": "https://github.com/apache/flink/pull/12917#discussion_r463371004", "createdAt": "2020-07-31T02:20:27Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -39,6 +43,10 @@\n \n \tprivate ResourceProfile lastRequestedSlotResourceProfile;\n \n+\tprivate volatile Consumer<SlotRequestId> releaseSlotConsumer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcxOTYzNQ=="}, "originalCommit": {"oid": "2ccf8d8d2d7e3e7ccddbb921914dad0bd831a70a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODkzMjM0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMzo1ODozN1rOG5SMpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo1NjoyNFrOG5cU_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDE2NA==", "bodyText": "Could we add this test in a separate commit and elaborate in the commit message for the purpose of it?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462720164", "createdAt": "2020-07-30T03:58:37Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ccf8d8d2d7e3e7ccddbb921914dad0bd831a70a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4NjE0MQ==", "bodyText": "Agreed. I'll do it when arranging the commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462886141", "createdAt": "2020-07-30T09:56:24Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjcyMDE2NA=="}, "originalCommit": {"oid": "2ccf8d8d2d7e3e7ccddbb921914dad0bd831a70a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTE2OTg1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjowNjoyOVrOG5UVcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo0MTo0OVrOG5Xo-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NTE4Ng==", "bodyText": "the method slotPoolBuilder.build(connectToResourceManager) no longer exists", "url": "https://github.com/apache/flink/pull/12917#discussion_r462755186", "createdAt": "2020-07-30T06:06:29Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "diffHunk": "@@ -253,118 +191,7 @@ public void testExtraSlotsAreKept() throws Exception {\n \t\t}\n \t}\n \n-\t/**\n-\t * This case make sure when allocateSlot in ProviderAndOwner timeout,\n-\t * it will automatically call cancelSlotAllocation as will inject future.whenComplete in ProviderAndOwner.\n-\t */\n-\t@Test\n-\tpublic void testProviderAndOwnerSlotAllocationTimeout() throws Exception {\n-\t\tfinal JobID jid = new JobID();\n-\n-\t\ttry (TestingSlotPool pool = createTestingSlotPool(jid)) {\n-\n-\t\t\tfinal CompletableFuture<SlotRequestId> releaseSlotFuture = new CompletableFuture<>();\n-\n-\t\t\tpool.setReleaseSlotConsumer(releaseSlotFuture::complete);\n-\n-\t\t\tpool.start(JobMasterId.generate(), \"foobar\", testMainThreadExecutor.getMainThreadExecutor());\n-\t\t\tResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\t\t\tpool.connectToResourceManager(resourceManagerGateway);\n-\n-\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), pool);\n-\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n-\n-\t\t\t// test the pending request is clear when timed out\n-\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noRequirements(),\n-\t\t\t\tfastTimeout));\n-\t\t\ttry {\n-\t\t\t\tfuture.get();\n-\t\t\t\tfail(\"We expected a TimeoutException.\");\n-\t\t\t} catch (ExecutionException e) {\n-\t\t\t\tassertTrue(ExceptionUtils.stripExecutionException(e) instanceof TimeoutException);\n-\t\t\t}\n-\n-\t\t\t// wait for the cancel call on the SlotPoolImpl\n-\t\t\treleaseSlotFuture.get();\n-\n-\t\t\tassertEquals(0L, pool.getNumberOfPendingRequests());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Testing SlotPoolImpl which exposes internal state via some testing methods.\n-\t */\n-\tprivate static final class TestingSlotPool extends SlotPoolImpl {\n-\n-\t\tprivate volatile Consumer<SlotRequestId> releaseSlotConsumer;\n-\n-\t\tprivate volatile Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer;\n-\n-\t\tpublic TestingSlotPool(\n-\t\t\t\tJobID jobId,\n-\t\t\t\tClock clock,\n-\t\t\t\tTime rpcTimeout,\n-\t\t\t\tTime idleSlotTimeout,\n-\t\t\t\tTime batchSlotTimeout) {\n-\t\t\tsuper(\n-\t\t\t\tjobId,\n-\t\t\t\tclock,\n-\t\t\t\trpcTimeout,\n-\t\t\t\tidleSlotTimeout,\n-\t\t\t\tbatchSlotTimeout);\n-\n-\t\t\treleaseSlotConsumer = null;\n-\t\t\ttimeoutPendingSlotRequestConsumer = null;\n-\t\t}\n-\n-\t\tpublic void setReleaseSlotConsumer(Consumer<SlotRequestId> releaseSlotConsumer) {\n-\t\t\tthis.releaseSlotConsumer = Preconditions.checkNotNull(releaseSlotConsumer);\n-\t\t}\n-\n-\t\tpublic void setTimeoutPendingSlotRequestConsumer(Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer) {\n-\t\t\tthis.timeoutPendingSlotRequestConsumer = Preconditions.checkNotNull(timeoutPendingSlotRequestConsumer);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void releaseSlot(\n-\t\t\t@Nonnull SlotRequestId slotRequestId,\n-\t\t\t@Nullable Throwable cause) {\n-\t\t\tfinal Consumer<SlotRequestId> currentReleaseSlotConsumer = releaseSlotConsumer;\n-\n-\t\t\tsuper.releaseSlot(slotRequestId, cause);\n-\n-\t\t\tif (currentReleaseSlotConsumer != null) {\n-\t\t\t\tcurrentReleaseSlotConsumer.accept(slotRequestId);\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void timeoutPendingSlotRequest(SlotRequestId slotRequestId) {\n-\t\t\tfinal Consumer<SlotRequestId> currentTimeoutPendingSlotRequestConsumer = timeoutPendingSlotRequestConsumer;\n-\n-\t\t\tif (currentTimeoutPendingSlotRequestConsumer != null) {\n-\t\t\t\tcurrentTimeoutPendingSlotRequestConsumer.accept(slotRequestId);\n-\t\t\t}\n-\n-\t\t\tsuper.timeoutPendingSlotRequest(slotRequestId);\n-\t\t}\n-\n-\t\tboolean containsAllocatedSlot(AllocationID allocationId) {\n-\t\t\treturn getAllocatedSlots().contains(allocationId);\n-\t\t}\n-\n-\t\tboolean containsAvailableSlot(AllocationID allocationId) {\n-\t\t\treturn getAvailableSlots().contains(allocationId);\n-\t\t}\n-\n-\t\tint getNumberOfPendingRequests() {\n-\t\t\treturn getPendingRequests().size();\n-\t\t}\n-\n-\t\tint getNumberOfWaitingForResourceRequests() {\n-\t\t\treturn getWaitingForResourceManager().size();\n-\t\t}\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(Boolean connectToResourceManager) throws Exception {\n+\t\treturn slotPoolBuilder.build(connectToResourceManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwOTMzNg==", "bodyText": "Yes. I fix this up in a new commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462809336", "createdAt": "2020-07-30T07:41:49Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "diffHunk": "@@ -253,118 +191,7 @@ public void testExtraSlotsAreKept() throws Exception {\n \t\t}\n \t}\n \n-\t/**\n-\t * This case make sure when allocateSlot in ProviderAndOwner timeout,\n-\t * it will automatically call cancelSlotAllocation as will inject future.whenComplete in ProviderAndOwner.\n-\t */\n-\t@Test\n-\tpublic void testProviderAndOwnerSlotAllocationTimeout() throws Exception {\n-\t\tfinal JobID jid = new JobID();\n-\n-\t\ttry (TestingSlotPool pool = createTestingSlotPool(jid)) {\n-\n-\t\t\tfinal CompletableFuture<SlotRequestId> releaseSlotFuture = new CompletableFuture<>();\n-\n-\t\t\tpool.setReleaseSlotConsumer(releaseSlotFuture::complete);\n-\n-\t\t\tpool.start(JobMasterId.generate(), \"foobar\", testMainThreadExecutor.getMainThreadExecutor());\n-\t\t\tResourceManagerGateway resourceManagerGateway = new TestingResourceManagerGateway();\n-\t\t\tpool.connectToResourceManager(resourceManagerGateway);\n-\n-\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), pool);\n-\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n-\n-\t\t\t// test the pending request is clear when timed out\n-\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n-\t\t\t\tnew DummyScheduledUnit(),\n-\t\t\t\tSlotProfile.noRequirements(),\n-\t\t\t\tfastTimeout));\n-\t\t\ttry {\n-\t\t\t\tfuture.get();\n-\t\t\t\tfail(\"We expected a TimeoutException.\");\n-\t\t\t} catch (ExecutionException e) {\n-\t\t\t\tassertTrue(ExceptionUtils.stripExecutionException(e) instanceof TimeoutException);\n-\t\t\t}\n-\n-\t\t\t// wait for the cancel call on the SlotPoolImpl\n-\t\t\treleaseSlotFuture.get();\n-\n-\t\t\tassertEquals(0L, pool.getNumberOfPendingRequests());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Testing SlotPoolImpl which exposes internal state via some testing methods.\n-\t */\n-\tprivate static final class TestingSlotPool extends SlotPoolImpl {\n-\n-\t\tprivate volatile Consumer<SlotRequestId> releaseSlotConsumer;\n-\n-\t\tprivate volatile Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer;\n-\n-\t\tpublic TestingSlotPool(\n-\t\t\t\tJobID jobId,\n-\t\t\t\tClock clock,\n-\t\t\t\tTime rpcTimeout,\n-\t\t\t\tTime idleSlotTimeout,\n-\t\t\t\tTime batchSlotTimeout) {\n-\t\t\tsuper(\n-\t\t\t\tjobId,\n-\t\t\t\tclock,\n-\t\t\t\trpcTimeout,\n-\t\t\t\tidleSlotTimeout,\n-\t\t\t\tbatchSlotTimeout);\n-\n-\t\t\treleaseSlotConsumer = null;\n-\t\t\ttimeoutPendingSlotRequestConsumer = null;\n-\t\t}\n-\n-\t\tpublic void setReleaseSlotConsumer(Consumer<SlotRequestId> releaseSlotConsumer) {\n-\t\t\tthis.releaseSlotConsumer = Preconditions.checkNotNull(releaseSlotConsumer);\n-\t\t}\n-\n-\t\tpublic void setTimeoutPendingSlotRequestConsumer(Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer) {\n-\t\t\tthis.timeoutPendingSlotRequestConsumer = Preconditions.checkNotNull(timeoutPendingSlotRequestConsumer);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void releaseSlot(\n-\t\t\t@Nonnull SlotRequestId slotRequestId,\n-\t\t\t@Nullable Throwable cause) {\n-\t\t\tfinal Consumer<SlotRequestId> currentReleaseSlotConsumer = releaseSlotConsumer;\n-\n-\t\t\tsuper.releaseSlot(slotRequestId, cause);\n-\n-\t\t\tif (currentReleaseSlotConsumer != null) {\n-\t\t\t\tcurrentReleaseSlotConsumer.accept(slotRequestId);\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tprotected void timeoutPendingSlotRequest(SlotRequestId slotRequestId) {\n-\t\t\tfinal Consumer<SlotRequestId> currentTimeoutPendingSlotRequestConsumer = timeoutPendingSlotRequestConsumer;\n-\n-\t\t\tif (currentTimeoutPendingSlotRequestConsumer != null) {\n-\t\t\t\tcurrentTimeoutPendingSlotRequestConsumer.accept(slotRequestId);\n-\t\t\t}\n-\n-\t\t\tsuper.timeoutPendingSlotRequest(slotRequestId);\n-\t\t}\n-\n-\t\tboolean containsAllocatedSlot(AllocationID allocationId) {\n-\t\t\treturn getAllocatedSlots().contains(allocationId);\n-\t\t}\n-\n-\t\tboolean containsAvailableSlot(AllocationID allocationId) {\n-\t\t\treturn getAvailableSlots().contains(allocationId);\n-\t\t}\n-\n-\t\tint getNumberOfPendingRequests() {\n-\t\t\treturn getPendingRequests().size();\n-\t\t}\n-\n-\t\tint getNumberOfWaitingForResourceRequests() {\n-\t\t\treturn getWaitingForResourceManager().size();\n-\t\t}\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(Boolean connectToResourceManager) throws Exception {\n+\t\treturn slotPoolBuilder.build(connectToResourceManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NTE4Ng=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 318}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTE4NjI2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoxMzoyOVrOG5Uezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODozMjoyOFrOG5ZX-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NzU4Mw==", "bodyText": "can we use SlotPoolBuilder to do this by setting resourceManagerGateway to null?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462757583", "createdAt": "2020-07-30T06:13:29Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -129,22 +115,13 @@ private void runSlotRequestCompletionTest(\n \t\t}\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPoolAndConnectToResourceManager() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = setUpSlotPool();\n-\t\tconnectToResourceManager(slotPool);\n-\n-\t\treturn slotPool;\n-\t}\n-\n \tprivate void connectToResourceManager(SlotPoolImpl slotPool) {\n \t\tslotPool.connectToResourceManager(resourceManagerGateway);\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPool() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());\n-\n-\t\tslotPool.start(JobMasterId.generate(), \"foobar\", ComponentMainThreadExecutorServiceAdapter.forMainThread());\n-\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPoolWithoutResourceManager() throws Exception {\n+\t\tfinal TestingSlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNzc1NA==", "bodyText": "Agreed and done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462837754", "createdAt": "2020-07-30T08:32:28Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -129,22 +115,13 @@ private void runSlotRequestCompletionTest(\n \t\t}\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPoolAndConnectToResourceManager() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = setUpSlotPool();\n-\t\tconnectToResourceManager(slotPool);\n-\n-\t\treturn slotPool;\n-\t}\n-\n \tprivate void connectToResourceManager(SlotPoolImpl slotPool) {\n \t\tslotPool.connectToResourceManager(resourceManagerGateway);\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPool() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());\n-\n-\t\tslotPool.start(JobMasterId.generate(), \"foobar\", ComponentMainThreadExecutorServiceAdapter.forMainThread());\n-\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPoolWithoutResourceManager() throws Exception {\n+\t\tfinal TestingSlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1NzU4Mw=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTE5NDg0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoxNzowMlrOG5Uj5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo1ODo1MVrOG5caJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1ODg4Ng==", "bodyText": "can be final. also applies some other variables below.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462758886", "createdAt": "2020-07-30T06:17:02Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4NzQ2MA==", "bodyText": "Done. I also add final to other variables.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462887460", "createdAt": "2020-07-30T09:58:51Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1ODg4Ng=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTIwMTQ3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoxOTo1NVrOG5Un2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo1NzoyNVrOG5cXDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1OTg5OA==", "bodyText": "I'd prefer to do it right before offerSlot", "url": "https://github.com/apache/flink/pull/12917#discussion_r462759898", "createdAt": "2020-07-30T06:19:55Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4NjY2OQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462886669", "createdAt": "2020-07-30T09:57:25Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc1OTg5OA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTIwMzIxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyMDozN1rOG5Uo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDowNToxMlrOG5cnTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MDE3MQ==", "bodyText": "could we have a createAndSetupScheduler() to deduplicate code?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462760171", "createdAt": "2020-07-30T06:20:37Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5MDgzMQ==", "bodyText": "Good idea. Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462890831", "createdAt": "2020-07-30T10:05:12Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MDE3MQ=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTIxNDU2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyNDo1M1rOG5UvQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDoxNDoyNVrOG5c6gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MTc5NQ==", "bodyText": "looks to me requestId is not further used.\nThis allocation code is used in both test cases. Could we have an allocateSlot() method?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462761795", "createdAt": "2020-07-30T06:24:53Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n+\t\t\t\trequestId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NTc0Ng==", "bodyText": "Agreed. Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462895746", "createdAt": "2020-07-30T10:14:25Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n+\t\t\t\trequestId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MTc5NQ=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTIyMTQ4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyNzoxMlrOG5UzIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMDoxNToyMVrOG5c8nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2Mjc4NA==", "bodyText": "There is no need to verify this offer. IIRC, it is already covered in SlotPoolImplTest.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462762784", "createdAt": "2020-07-30T06:27:12Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n+\t\t\t\trequestId,\n+\t\t\t\tnew DummyScheduledUnit(),\n+\t\t\t\tSlotProfile.noRequirements(),\n+\t\t\t\ttimeout));\n+\t\t\tassertFalse(future.isDone());\n+\n+\t\t\tfinal SlotRequest slotRequest = slotRequestFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\n+\t\t\tfinal SlotOffer slotOffer = new SlotOffer(\n+\t\t\t\tslotRequest.getAllocationId(),\n+\t\t\t\t0,\n+\t\t\t\tDEFAULT_TESTING_PROFILE);\n+\n+\t\t\tassertTrue(testMainThreadExecutor.execute(() -> slotPool.offerSlot(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NjI4NQ==", "bodyText": "Okay, removed assertTrue.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462896285", "createdAt": "2020-07-30T10:15:21Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);\n+\n+\t@ClassRule\n+\tpublic static final TestingComponentMainThreadExecutor.Resource EXECUTOR_RESOURCE =\n+\t\tnew TestingComponentMainThreadExecutor.Resource(10L);\n+\n+\tprivate final TestingComponentMainThreadExecutor testMainThreadExecutor =\n+\t\tEXECUTOR_RESOURCE.getComponentMainThreadTestExecutor();\n+\n+\tprivate TaskManagerLocation taskManagerLocation;\n+\tprivate SimpleAckingTaskManagerGateway taskManagerGateway;\n+\tprivate TestingResourceManagerGateway resourceManagerGateway;\n+\tprivate SlotPoolBuilder slotPoolBuilder;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\ttaskManagerLocation = new LocalTaskManagerLocation();\n+\t\ttaskManagerGateway = new SimpleAckingTaskManagerGateway();\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();\n+\t\tslotPoolBuilder = new SlotPoolBuilder(testMainThreadExecutor.getMainThreadExecutor())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\t@Test\n+\tpublic void testAllocateSlot() throws Exception {\n+\t\tCompletableFuture<SlotRequest> slotRequestFuture = new CompletableFuture<>();\n+\t\tresourceManagerGateway.setRequestSlotConsumer(slotRequestFuture::complete);\n+\n+\t\ttry (SlotPoolImpl slotPool = createAndSetUpSlotPool()) {\n+\t\t\ttestMainThreadExecutor.execute(() -> slotPool.registerTaskManager(taskManagerLocation.getResourceID()));\n+\n+\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), slotPool);\n+\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\n+\t\t\tSlotRequestId requestId = new SlotRequestId();\n+\t\t\tCompletableFuture<LogicalSlot> future = testMainThreadExecutor.execute(() -> scheduler.allocateSlot(\n+\t\t\t\trequestId,\n+\t\t\t\tnew DummyScheduledUnit(),\n+\t\t\t\tSlotProfile.noRequirements(),\n+\t\t\t\ttimeout));\n+\t\t\tassertFalse(future.isDone());\n+\n+\t\t\tfinal SlotRequest slotRequest = slotRequestFuture.get(timeout.toMilliseconds(), TimeUnit.MILLISECONDS);\n+\n+\t\t\tfinal SlotOffer slotOffer = new SlotOffer(\n+\t\t\t\tslotRequest.getAllocationId(),\n+\t\t\t\t0,\n+\t\t\t\tDEFAULT_TESTING_PROFILE);\n+\n+\t\t\tassertTrue(testMainThreadExecutor.execute(() -> slotPool.offerSlot(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2Mjc4NA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTIyMjI5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjoyNzozM1rOG5Uzog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxNToyMlrOG5Yw7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MjkxNA==", "bodyText": "timeout -> TIMEOUT", "url": "https://github.com/apache/flink/pull/12917#discussion_r462762914", "createdAt": "2020-07-30T06:27:33Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNzc1OQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462827759", "createdAt": "2020-07-30T08:15:22Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SchedulerImplTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.SlotProfile;\n+import org.apache.flink.runtime.executiongraph.TestingComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.utils.SimpleAckingTaskManagerGateway;\n+import org.apache.flink.runtime.jobmanager.scheduler.DummyScheduledUnit;\n+import org.apache.flink.runtime.jobmaster.LogicalSlot;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.SlotRequest;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskexecutor.slot.SlotOffer;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link SchedulerImpl}.\n+ */\n+public class SchedulerImplTest extends TestLogger {\n+\n+\tprivate static final Time timeout = Time.seconds(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2MjkxNA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTIzNTc5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozMzowOVrOG5U7-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoyNzozNFrOG5ZMag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTA0OA==", "bodyText": "indentation or an empty line is needed", "url": "https://github.com/apache/flink/pull/12917#discussion_r462765048", "createdAt": "2020-07-30T06:33:09Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -266,7 +269,10 @@ public void testPendingBatchSlotRequestTimeoutAfterSlotRelease() throws Exceptio\n \t\t}\n \t}\n \n-\tprivate void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slotPool, ManualClock clock, Time batchSlotTimeout) {\n+\tprivate void advanceTimeAndTriggerCheckBatchSlotTimeout(\n+\t\tTestingSlotPoolImpl slotPool,\n+\t\tManualClock clock,\n+\t\tTime batchSlotTimeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 280}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzNDc5NA==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462834794", "createdAt": "2020-07-30T08:27:34Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -266,7 +269,10 @@ public void testPendingBatchSlotRequestTimeoutAfterSlotRelease() throws Exceptio\n \t\t}\n \t}\n \n-\tprivate void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slotPool, ManualClock clock, Time batchSlotTimeout) {\n+\tprivate void advanceTimeAndTriggerCheckBatchSlotTimeout(\n+\t\tTestingSlotPoolImpl slotPool,\n+\t\tManualClock clock,\n+\t\tTime batchSlotTimeout) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTA0OA=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTI0MjM0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNjozNTozNFrOG5U_qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoyMjoyM1rOG5ZAlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTk5Mg==", "bodyText": "indentation or an empty line is needed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462765992", "createdAt": "2020-07-30T06:35:34Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -58,6 +58,16 @@ private SlotPoolUtils() {\n \t\t\t.thenCompose(Function.identity());\n \t}\n \n+\tpublic static List<CompletableFuture<PhysicalSlot>> requestNewAllocatedBatchSlots(\n+\t\tSlotPool slotPool,\n+\t\tComponentMainThreadExecutor mainThreadExecutor,\n+\t\tList<ResourceProfile> resourceProfiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgzMTc2NA==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462831764", "createdAt": "2020-07-30T08:22:23Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -58,6 +58,16 @@ private SlotPoolUtils() {\n \t\t\t.thenCompose(Function.identity());\n \t}\n \n+\tpublic static List<CompletableFuture<PhysicalSlot>> requestNewAllocatedBatchSlots(\n+\t\tSlotPool slotPool,\n+\t\tComponentMainThreadExecutor mainThreadExecutor,\n+\t\tList<ResourceProfile> resourceProfiles) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjc2NTk5Mg=="}, "originalCommit": {"oid": "084c389fe20a234deb417d41a8600fa687b47570"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTUwNTYwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzozNzo0MlrOG5XgaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODoxMTowNFrOG5Yniw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwNzE0NA==", "bodyText": "@Nonnull is not needed since it is the default assumption.\nOnly @Nullable params need to be explicitly tagged.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462807144", "createdAt": "2020-07-30T07:37:42Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -83,4 +93,52 @@ boolean isBatchSlotRequestTimeoutCheckEnabled() {\n \tpublic ResourceProfile getLastRequestedSlotResourceProfile() {\n \t\treturn lastRequestedSlotResourceProfile;\n \t}\n+\n+\tpublic void setReleaseSlotConsumer(Consumer<SlotRequestId> releaseSlotConsumer) {\n+\t\tthis.releaseSlotConsumer = Preconditions.checkNotNull(releaseSlotConsumer);\n+\t}\n+\n+\tpublic void setTimeoutPendingSlotRequestConsumer(Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer) {\n+\t\tthis.timeoutPendingSlotRequestConsumer = Preconditions.checkNotNull(timeoutPendingSlotRequestConsumer);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseSlot(\n+\t\t@Nonnull SlotRequestId slotRequestId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTM1NQ==", "bodyText": "I forget this. I have removed it.", "url": "https://github.com/apache/flink/pull/12917#discussion_r462825355", "createdAt": "2020-07-30T08:11:04Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/TestingSlotPoolImpl.java", "diffHunk": "@@ -83,4 +93,52 @@ boolean isBatchSlotRequestTimeoutCheckEnabled() {\n \tpublic ResourceProfile getLastRequestedSlotResourceProfile() {\n \t\treturn lastRequestedSlotResourceProfile;\n \t}\n+\n+\tpublic void setReleaseSlotConsumer(Consumer<SlotRequestId> releaseSlotConsumer) {\n+\t\tthis.releaseSlotConsumer = Preconditions.checkNotNull(releaseSlotConsumer);\n+\t}\n+\n+\tpublic void setTimeoutPendingSlotRequestConsumer(Consumer<SlotRequestId> timeoutPendingSlotRequestConsumer) {\n+\t\tthis.timeoutPendingSlotRequestConsumer = Preconditions.checkNotNull(timeoutPendingSlotRequestConsumer);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseSlot(\n+\t\t@Nonnull SlotRequestId slotRequestId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgwNzE0NA=="}, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4OTU0Mzk2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwNzo0ODo1NVrOG5X3-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNjowNjoxMlrOG6tJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw==", "bodyText": "I think direct main thread executor cannot work here?\nWould you give it a check?", "url": "https://github.com/apache/flink/pull/12917#discussion_r462813177", "createdAt": "2020-07-30T07:48:55Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -81,8 +67,10 @@ public static void teardownClass() {\n \t */\n \t@Test\n \tpublic void testPendingBatchSlotRequestTimeout() throws Exception {\n-\t\ttry (final SlotPoolImpl slotPool = new SlotPoolBuilder(mainThreadExecutor)\n-\t\t\t\t.build()) {\n+\t\ttry (final SlotPoolImpl slotPool = slotPoolBuilder\n+\t\t\t.setBatchSlotTimeout(Time.milliseconds(2L))\n+\t\t\t.build()) {\n+\n \t\t\tfinal CompletableFuture<PhysicalSlot> slotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(\n \t\t\t\tslotPool,\n \t\t\t\tmainThreadExecutor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM3MDQ3NQ==", "bodyText": "Thanks for your consideration. I'm still working on this.", "url": "https://github.com/apache/flink/pull/12917#discussion_r463370475", "createdAt": "2020-07-31T02:18:19Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -81,8 +67,10 @@ public static void teardownClass() {\n \t */\n \t@Test\n \tpublic void testPendingBatchSlotRequestTimeout() throws Exception {\n-\t\ttry (final SlotPoolImpl slotPool = new SlotPoolBuilder(mainThreadExecutor)\n-\t\t\t\t.build()) {\n+\t\ttry (final SlotPoolImpl slotPool = slotPoolBuilder\n+\t\t\t.setBatchSlotTimeout(Time.milliseconds(2L))\n+\t\t\t.build()) {\n+\n \t\t\tfinal CompletableFuture<PhysicalSlot> slotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(\n \t\t\t\tslotPool,\n \t\t\t\tmainThreadExecutor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1MzU2Mw==", "bodyText": "I've undone this modification in the fix-up commit.", "url": "https://github.com/apache/flink/pull/12917#discussion_r463553563", "createdAt": "2020-07-31T11:20:04Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -81,8 +67,10 @@ public static void teardownClass() {\n \t */\n \t@Test\n \tpublic void testPendingBatchSlotRequestTimeout() throws Exception {\n-\t\ttry (final SlotPoolImpl slotPool = new SlotPoolBuilder(mainThreadExecutor)\n-\t\t\t\t.build()) {\n+\t\ttry (final SlotPoolImpl slotPool = slotPoolBuilder\n+\t\t\t.setBatchSlotTimeout(Time.milliseconds(2L))\n+\t\t\t.build()) {\n+\n \t\t\tfinal CompletableFuture<PhysicalSlot> slotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(\n \t\t\t\tslotPool,\n \t\t\t\tmainThreadExecutor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE4Mzg5Mw==", "bodyText": "To avoid thread leak, it's better to use try-finally. A ref can be SlotPoolPendingRequestFailureTest#testPendingSlotRequestTimeout.", "url": "https://github.com/apache/flink/pull/12917#discussion_r464183893", "createdAt": "2020-08-03T04:06:39Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -81,8 +67,10 @@ public static void teardownClass() {\n \t */\n \t@Test\n \tpublic void testPendingBatchSlotRequestTimeout() throws Exception {\n-\t\ttry (final SlotPoolImpl slotPool = new SlotPoolBuilder(mainThreadExecutor)\n-\t\t\t\t.build()) {\n+\t\ttry (final SlotPoolImpl slotPool = slotPoolBuilder\n+\t\t\t.setBatchSlotTimeout(Time.milliseconds(2L))\n+\t\t\t.build()) {\n+\n \t\t\tfinal CompletableFuture<PhysicalSlot> slotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(\n \t\t\t\tslotPool,\n \t\t\t\tmainThreadExecutor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIxMDMzOQ==", "bodyText": "To avoid thread leak, it's better to use try-finally. A ref can be SlotPoolPendingRequestFailureTest#testPendingSlotRequestTimeout.\n\nDone.", "url": "https://github.com/apache/flink/pull/12917#discussion_r464210339", "createdAt": "2020-08-03T06:06:12Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -81,8 +67,10 @@ public static void teardownClass() {\n \t */\n \t@Test\n \tpublic void testPendingBatchSlotRequestTimeout() throws Exception {\n-\t\ttry (final SlotPoolImpl slotPool = new SlotPoolBuilder(mainThreadExecutor)\n-\t\t\t\t.build()) {\n+\t\ttry (final SlotPoolImpl slotPool = slotPoolBuilder\n+\t\t\t.setBatchSlotTimeout(Time.milliseconds(2L))\n+\t\t\t.build()) {\n+\n \t\t\tfinal CompletableFuture<PhysicalSlot> slotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(\n \t\t\t\tslotPool,\n \t\t\t\tmainThreadExecutor,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgxMzE3Nw=="}, "originalCommit": {"oid": "4c7e79256616e62e216b5c87f0cfff6896b32287"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDA1MjQ4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTozNTo1OFrOG62I9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTozNTo1OFrOG62I9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1NzYyMw==", "bodyText": "why not using resourceManagerGateway in SlotPoolTestBase?", "url": "https://github.com/apache/flink/pull/12917#discussion_r464357623", "createdAt": "2020-08-03T11:35:58Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -54,25 +52,17 @@\n /**\n  * Tests for batch slot requests.\n  */\n-public class SlotPoolBatchSlotRequestTest extends TestLogger {\n+public class SlotPoolBatchSlotRequestTest extends SlotPoolTestBase {\n \n \tprivate static final ResourceProfile resourceProfile = ResourceProfile.fromResources(1.0, 1024);\n \tprivate static final ResourceProfile smallerResourceProfile = ResourceProfile.fromResources(0.5, 512);\n \tpublic static final CompletableFuture[] COMPLETABLE_FUTURES_EMPTY_ARRAY = new CompletableFuture[0];\n-\tprivate static ScheduledExecutorService singleThreadScheduledExecutorService;\n-\tprivate static ComponentMainThreadExecutor mainThreadExecutor;\n-\n-\t@BeforeClass\n-\tpublic static void setupClass() {\n-\t\tsingleThreadScheduledExecutorService = Executors.newSingleThreadScheduledExecutor();\n-\t\tmainThreadExecutor = ComponentMainThreadExecutorServiceAdapter.forSingleThreadExecutor(singleThreadScheduledExecutorService);\n-\t}\n \n-\t@AfterClass\n-\tpublic static void teardownClass() {\n-\t\tif (singleThreadScheduledExecutorService != null) {\n-\t\t\tsingleThreadScheduledExecutorService.shutdownNow();\n-\t\t}\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tresourceManagerGateway = new TestingResourceManagerGateway();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c6182cbbf1441b85df2d82dfd36c3daf7db33"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMDEwMDk4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTo1MjoxN1rOG62lGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMTo1MjoxN1rOG62lGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2NDgyNw==", "bodyText": "The license is missing and flink will not compile. https://dev.azure.com/apache-flink/apache-flink/_build/results?buildId=5111&view=logs&j=52b61abe-a3cc-5bde-cc35-1bbe89bb7df5&t=54421a62-0c80-5aad-3319-094ff69180bb.", "url": "https://github.com/apache/flink/pull/12917#discussion_r464364827", "createdAt": "2020-08-03T11:52:17Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.apache.flink.runtime.jobmaster.slotpool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c6182cbbf1441b85df2d82dfd36c3daf7db33"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjMzNDcxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzoxODoxOVrOG7Lssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwMzowODowNFrOG9K9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMDgzNQ==", "bodyText": "We very much want to avoid introducing inheritance into test classes; there is rarely a need for it.\nThis instance here could be trivially implemented as a junit resource.", "url": "https://github.com/apache/flink/pull/12917#discussion_r464710835", "createdAt": "2020-08-03T23:18:19Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da90885d695cf70c147481bbaa8c8be005a13a4c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2NjA5MA==", "bodyText": "Thanks for your review. I've already removed SlotPoolTestBase and replaced it with SlotPoolUtils.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465666090", "createdAt": "2020-08-05T11:42:06Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMDgzNQ=="}, "originalCommit": {"oid": "da90885d695cf70c147481bbaa8c8be005a13a4c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njc5NTgwMQ==", "bodyText": "@zentol would you take another look?", "url": "https://github.com/apache/flink/pull/12917#discussion_r466795801", "createdAt": "2020-08-07T03:08:04Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolTestBase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutorServiceAdapter;\n+import org.apache.flink.runtime.jobmaster.SlotRequestId;\n+import org.apache.flink.runtime.resourcemanager.ResourceManagerGateway;\n+import org.apache.flink.runtime.resourcemanager.utils.TestingResourceManagerGateway;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Before;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Test base for {@link SlotPool} related test cases.\n+ */\n+public abstract class SlotPoolTestBase extends TestLogger {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxMDgzNQ=="}, "originalCommit": {"oid": "da90885d695cf70c147481bbaa8c8be005a13a4c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQ4Mjg2OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0MDoyMFrOG78Opg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxODo1OVrOG79S2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNTk1OA==", "bodyText": "This change is unrelated to \"Refactor tests of SlotPoolImpl with SlotPoolUtils and SlotPoolBuilder\".", "url": "https://github.com/apache/flink/pull/12917#discussion_r465505958", "createdAt": "2020-08-05T06:40:20Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -233,16 +239,23 @@ public void testPendingBatchSlotRequestTimeoutAfterSlotRelease() throws Exceptio\n \t\tfinal ManualClock clock = new ManualClock();\n \t\tfinal Time batchSlotTimeout = Time.milliseconds(1000L);\n \n-\t\ttry (final TestingSlotPoolImpl slotPool = new SlotPoolBuilder(directMainThreadExecutor)\n-\t\t\t\t.setClock(clock)\n-\t\t\t\t.setBatchSlotTimeout(batchSlotTimeout)\n-\t\t\t\t.build()) {\n+\t\ttry (final TestingSlotPoolImpl slotPool = createAndSetUpSlotPool(\n+\t\t\t\tdirectMainThreadExecutor,\n+\t\t\t\tnull,\n+\t\t\t\tbatchSlotTimeout,\n+\t\t\t\tclock)) {\n+\n \t\t\tfinal ResourceID taskManagerResourceId = SlotPoolUtils.offerSlots(slotPool, directMainThreadExecutor, Collections.singletonList(resourceProfile));\n-\t\t\tfinal CompletableFuture<PhysicalSlot> firstSlotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(slotPool, directMainThreadExecutor, resourceProfile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMzQxNw==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465523417", "createdAt": "2020-08-05T07:18:59Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -233,16 +239,23 @@ public void testPendingBatchSlotRequestTimeoutAfterSlotRelease() throws Exceptio\n \t\tfinal ManualClock clock = new ManualClock();\n \t\tfinal Time batchSlotTimeout = Time.milliseconds(1000L);\n \n-\t\ttry (final TestingSlotPoolImpl slotPool = new SlotPoolBuilder(directMainThreadExecutor)\n-\t\t\t\t.setClock(clock)\n-\t\t\t\t.setBatchSlotTimeout(batchSlotTimeout)\n-\t\t\t\t.build()) {\n+\t\ttry (final TestingSlotPoolImpl slotPool = createAndSetUpSlotPool(\n+\t\t\t\tdirectMainThreadExecutor,\n+\t\t\t\tnull,\n+\t\t\t\tbatchSlotTimeout,\n+\t\t\t\tclock)) {\n+\n \t\t\tfinal ResourceID taskManagerResourceId = SlotPoolUtils.offerSlots(slotPool, directMainThreadExecutor, Collections.singletonList(resourceProfile));\n-\t\t\tfinal CompletableFuture<PhysicalSlot> firstSlotFuture = SlotPoolUtils.requestNewAllocatedBatchSlot(slotPool, directMainThreadExecutor, resourceProfile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNTk1OA=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzQ5NDg4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0NDo1NlrOG78WEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyNTozMVrOG7_fyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzg1OQ==", "bodyText": "can be based on the following createAndSetUpSlotPool \uff08\uff09", "url": "https://github.com/apache/flink/pull/12917#discussion_r465507859", "createdAt": "2020-08-05T06:44:56Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +289,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyNTY0MA==", "bodyText": "I don't agree on this. If we rebase this createAndSetUpSlotPool with the one below, we have to introduce a default value of Clock, which is unnecessary.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465525640", "createdAt": "2020-08-05T07:23:22Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +289,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzg1OQ=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1OTQ5OQ==", "bodyText": "I see. Makes sense.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465559499", "createdAt": "2020-08-05T08:25:31Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +289,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzg1OQ=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUwMTQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0NzoxMlrOG78Z7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxMTozMVrOG79E1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\treturn SlotPoolUtils.createSlotPoolBuilder().setResourceManagerGateway(null).build();\n          \n          \n            \n            \t\treturn SlotPoolUtils.createAndSetUpSlotPool(null).build();", "url": "https://github.com/apache/flink/pull/12917#discussion_r465508846", "createdAt": "2020-08-05T06:47:12Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -129,22 +126,15 @@ private void runSlotRequestCompletionTest(\n \t\t}\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPoolAndConnectToResourceManager() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = setUpSlotPool();\n-\t\tconnectToResourceManager(slotPool);\n-\n-\t\treturn slotPool;\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn SlotPoolUtils.createAndSetUpSlotPool(resourceManagerGateway);\n \t}\n \n \tprivate void connectToResourceManager(SlotPoolImpl slotPool) {\n \t\tslotPool.connectToResourceManager(resourceManagerGateway);\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPool() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());\n-\n-\t\tslotPool.start(JobMasterId.generate(), \"foobar\", ComponentMainThreadExecutorServiceAdapter.forMainThread());\n-\n-\t\treturn slotPool;\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPoolWithoutResourceManager() throws Exception {\n+\t\treturn SlotPoolUtils.createSlotPoolBuilder().setResourceManagerGateway(null).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxOTgzMQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465519831", "createdAt": "2020-08-05T07:11:31Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolRequestCompletionTest.java", "diffHunk": "@@ -129,22 +126,15 @@ private void runSlotRequestCompletionTest(\n \t\t}\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPoolAndConnectToResourceManager() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = setUpSlotPool();\n-\t\tconnectToResourceManager(slotPool);\n-\n-\t\treturn slotPool;\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool() throws Exception {\n+\t\treturn SlotPoolUtils.createAndSetUpSlotPool(resourceManagerGateway);\n \t}\n \n \tprivate void connectToResourceManager(SlotPoolImpl slotPool) {\n \t\tslotPool.connectToResourceManager(resourceManagerGateway);\n \t}\n \n-\tprivate SlotPoolImpl setUpSlotPool() throws Exception {\n-\t\tfinal SlotPoolImpl slotPool = new TestingSlotPoolImpl(new JobID());\n-\n-\t\tslotPool.start(JobMasterId.generate(), \"foobar\", ComponentMainThreadExecutorServiceAdapter.forMainThread());\n-\n-\t\treturn slotPool;\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPoolWithoutResourceManager() throws Exception {\n+\t\treturn SlotPoolUtils.createSlotPoolBuilder().setResourceManagerGateway(null).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwODg0Ng=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUwNjYwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo0OTowNVrOG78dHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoxODoxMFrOG79RZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTY2Mg==", "bodyText": "These createSlotPoolBuilder(...) does not show much benefit to me, given that in those tests there are already reusable methods to create and setup slot pool.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465509662", "createdAt": "2020-08-05T06:49:05Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyMzA0NQ==", "bodyText": "I've removed these createSlotPoolBuilder functions.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465523045", "createdAt": "2020-08-05T07:18:10Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwOTY2Mg=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzUyNTQwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNjo1NToyM1rOG78oLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzowOTo0MFrOG79Bag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjQ5Mw==", "bodyText": "Can these newly added methods be package private?", "url": "https://github.com/apache/flink/pull/12917#discussion_r465512493", "createdAt": "2020-08-05T06:55:23Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxODk1NA==", "bodyText": "Agree. Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465518954", "createdAt": "2020-08-05T07:09:40Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMjQ5Mw=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYyNzgzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyODoyN1rOG79lYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0Mjo1OVrOG7-B9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODE2MQ==", "bodyText": "looks to me this method is never used.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465528161", "createdAt": "2020-08-05T07:28:27Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal JobID jobId) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).setJobId(jobId).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Clock clock,\n+\t\t\tfinal Time idleSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils\n+\t\t\t.createSlotPoolBuilder(resourceManagerGateway)\n+\t\t\t.setClock(clock)\n+\t\t\t.setIdleSlotTimeout(idleSlotTimeout)\n+\t\t\t.build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNTQ3OQ==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465535479", "createdAt": "2020-08-05T07:42:59Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal JobID jobId) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).setJobId(jobId).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Clock clock,\n+\t\t\tfinal Time idleSlotTimeout) throws Exception {\n+\n+\t\treturn SlotPoolUtils\n+\t\t\t.createSlotPoolBuilder(resourceManagerGateway)\n+\t\t\t.setClock(clock)\n+\t\t\t.setIdleSlotTimeout(idleSlotTimeout)\n+\t\t\t.build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODE2MQ=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYzMDk1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyOToyMFrOG79nNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0MzowNlrOG7-CMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODYyOQ==", "bodyText": "This method is used only in SlotPoolImplTest. I'd prefer to put it there at the moment.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465528629", "createdAt": "2020-08-05T07:29:20Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal JobID jobId) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).setJobId(jobId).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNTUzOA==", "bodyText": "Moved.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465535538", "createdAt": "2020-08-05T07:43:06Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal JobID jobId) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).setJobId(jobId).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODYyOQ=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzYzMTI1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzoyOToyNFrOG79nYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0MzoxM1rOG7-CXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODY3NA==", "bodyText": "This method is used only in SlotPoolImplTest. I'd prefer to put it there at the moment.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465528674", "createdAt": "2020-08-05T07:29:24Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNTU4MA==", "bodyText": "Moved.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465535580", "createdAt": "2020-08-05T07:43:13Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,19 +50,108 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tpublic static SlotPoolBuilder createSlotPoolBuilder() {\n+\t\treturn createSlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread());\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ComponentMainThreadExecutor mainThreadExecutor) {\n+\t\treturn new SlotPoolBuilder(mainThreadExecutor);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn createSlotPoolBuilder().setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static SlotPoolBuilder createSlotPoolBuilder(\n+\t\t\tfinal ComponentMainThreadExecutor mainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) {\n+\n+\t\treturn createSlotPoolBuilder(mainThreadExecutor).setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n+\n+\t\treturn createSlotPoolBuilder(resourceManagerGateway).build();\n+\t}\n+\n+\tpublic static TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUyODY3NA=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY0NDM1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozMzoyMFrOG79vKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MjozMFrOG7-Wgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMDY2NQ==", "bodyText": "I'd prefer to have a createAndSetUpSlotPoolWithoutResourceManager() to replace createAndSetUpSlotPool(false).", "url": "https://github.com/apache/flink/pull/12917#discussion_r465530665", "createdAt": "2020-08-05T07:33:20Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "diffHunk": "@@ -80,24 +65,12 @@\n \n \t@Test\n \tpublic void testSlotAllocationNoResourceManager() throws Exception {\n-\t\tfinal JobID jid = new JobID();\n-\n-\t\ttry (SlotPool pool = new SlotPoolImpl(\n-\t\t\tjid,\n-\t\t\tSystemClock.getInstance(),\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime()\n-\t\t)) {\n \n-\t\t\tpool.start(JobMasterId.generate(), \"foobar\", testMainThreadExecutor.getMainThreadExecutor());\n-\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), pool);\n-\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\t\ttry (SlotPool pool = createAndSetUpSlotPool(false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDczOA==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465540738", "createdAt": "2020-08-05T07:52:30Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolInteractionsTest.java", "diffHunk": "@@ -80,24 +65,12 @@\n \n \t@Test\n \tpublic void testSlotAllocationNoResourceManager() throws Exception {\n-\t\tfinal JobID jid = new JobID();\n-\n-\t\ttry (SlotPool pool = new SlotPoolImpl(\n-\t\t\tjid,\n-\t\t\tSystemClock.getInstance(),\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime(),\n-\t\t\tTestingUtils.infiniteTime()\n-\t\t)) {\n \n-\t\t\tpool.start(JobMasterId.generate(), \"foobar\", testMainThreadExecutor.getMainThreadExecutor());\n-\t\t\tScheduler scheduler = new SchedulerImpl(LocationPreferenceSlotSelectionStrategy.createDefault(), pool);\n-\t\t\tscheduler.start(testMainThreadExecutor.getMainThreadExecutor());\n+\t\ttry (SlotPool pool = createAndSetUpSlotPool(false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMDY2NQ=="}, "originalCommit": {"oid": "77640441a03432137e3e431af15927d51ad56c4b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzgxOTU3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyMzowNVrOG7_ZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozMzoyM1rOG7_xhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1Nzk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n          \n          \n            \n            \t\t\t@Nullable final ResourceManagerGateway resourceManagerGateway,", "url": "https://github.com/apache/flink/pull/12917#discussion_r465557944", "createdAt": "2020-08-05T08:23:05Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +280,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NDAzNg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465564036", "createdAt": "2020-08-05T08:33:23Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +280,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1Nzk0NA=="}, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzgyMDA2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyMzoxMlrOG7_aBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozNTo1MFrOG7_3Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1ODAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n          \n          \n            \n            \t\t\t@Nullable final ResourceManagerGateway resourceManagerGateway,", "url": "https://github.com/apache/flink/pull/12917#discussion_r465558021", "createdAt": "2020-08-05T08:23:12Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +280,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn new SlotPoolBuilder(componentMainThreadExecutor)\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway)\n+\t\t\t.setBatchSlotTimeout(batchSlotTimeout)\n+\t\t\t.build();\n+\t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NTQ3OQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465565479", "createdAt": "2020-08-05T08:35:50Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolBatchSlotRequestTest.java", "diffHunk": "@@ -276,4 +280,28 @@ private void advanceTimeAndTriggerCheckBatchSlotTimeout(TestingSlotPoolImpl slot\n \t\t// timeout all as unfulfillable marked slots\n \t\tslotPool.triggerCheckBatchSlotTimeout();\n \t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,\n+\t\t\tfinal Time batchSlotTimeout) throws Exception {\n+\n+\t\treturn new SlotPoolBuilder(componentMainThreadExecutor)\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway)\n+\t\t\t.setBatchSlotTimeout(batchSlotTimeout)\n+\t\t\t.build();\n+\t}\n+\n+\tprivate TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ComponentMainThreadExecutor componentMainThreadExecutor,\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU1ODAyMQ=="}, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg0MzYyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyOTowNFrOG7_n8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozNDo0N1rOG7_0vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n          \n          \n            \n            \tstatic SlotPoolBuilder createSlotPoolBuilder(@Nullable final ResourceManagerGateway resourceManagerGateway) {", "url": "https://github.com/apache/flink/pull/12917#discussion_r465561587", "createdAt": "2020-08-05T08:29:04Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +48,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NDg2MQ==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465564861", "createdAt": "2020-08-05T08:34:47Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +48,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTU4Nw=="}, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg0NDM0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODoyOToxNVrOG7_oXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozNToyNFrOG7_2Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTY5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {\n          \n          \n            \n            \t\t\t@Nullable final ResourceManagerGateway resourceManagerGateway) throws Exception {", "url": "https://github.com/apache/flink/pull/12917#discussion_r465561693", "createdAt": "2020-08-05T08:29:15Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +48,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn new SlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tstatic TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NTI0Ng==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465565246", "createdAt": "2020-08-05T08:35:24Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +48,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(final ResourceManagerGateway resourceManagerGateway) {\n+\t\treturn new SlotPoolBuilder(ComponentMainThreadExecutorServiceAdapter.forMainThread())\n+\t\t\t.setResourceManagerGateway(resourceManagerGateway);\n+\t}\n+\n+\tstatic TestingSlotPoolImpl createAndSetUpSlotPool(\n+\t\t\tfinal ResourceManagerGateway resourceManagerGateway) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MTY5Mw=="}, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg0ODYwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozMDoyMlrOG7_q4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODozNzoxMVrOG7_6RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MjMzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tstatic TestingSlotPoolImpl createAndSetUpSlotPool(\n          \n          \n            \n            \tprivate static TestingSlotPoolImpl createAndSetUpSlotPool(", "url": "https://github.com/apache/flink/pull/12917#discussion_r465562337", "createdAt": "2020-08-05T08:30:22Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -821,22 +714,40 @@ public void testSlotsOfferedWithoutResourceManagerConnected() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n-\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n-\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n-\t\t}\n+\tstatic TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 677}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2NjI3Nw==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465566277", "createdAt": "2020-08-05T08:37:11Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -821,22 +714,40 @@ public void testSlotsOfferedWithoutResourceManagerConnected() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void requestNewAllocatedSlots(final SlotPool slotPool, final SlotRequestId... slotRequestIds) {\n-\t\tfor (SlotRequestId slotRequestId : slotRequestIds) {\n-\t\t\trequestNewAllocatedSlot(slotPool, slotRequestId);\n-\t\t}\n+\tstatic TestingSlotPoolImpl createAndSetUpSlotPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2MjMzNw=="}, "originalCommit": {"oid": "cb4298bf796daf7c9e3ac2842459ea9221f7ac9e"}, "originalPosition": 677}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg5MjI0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0MjoxN1rOG8AFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo1MToyMlrOG8AZ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTE5NA==", "bodyText": "This is not needed I think. It is used only in SlotPoolImplTest but that test class already has a directMainThreadExecutor defined.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465569194", "createdAt": "2020-08-05T08:42:17Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +50,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(@Nullable final ResourceManagerGateway resourceManagerGateway) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d489b53b960def9c1beb30f0b605e0debc528120"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NDM5Mg==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465574392", "createdAt": "2020-08-05T08:51:22Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolUtils.java", "diffHunk": "@@ -45,14 +50,49 @@\n  */\n public class SlotPoolUtils {\n \n+\tpublic static final Time TIMEOUT = Time.seconds(10L);\n+\n \tprivate SlotPoolUtils() {\n \t\tthrow new UnsupportedOperationException(\"Cannot instantiate this class.\");\n \t}\n \n+\tstatic SlotPoolBuilder createSlotPoolBuilder(@Nullable final ResourceManagerGateway resourceManagerGateway) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTE5NA=="}, "originalCommit": {"oid": "d489b53b960def9c1beb30f0b605e0debc528120"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzg5NDUyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo0Mjo1OVrOG8AHDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwODo1MTozMVrOG8AaTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTU0OA==", "bodyText": "Unused import", "url": "https://github.com/apache/flink/pull/12917#discussion_r465569548", "createdAt": "2020-08-05T08:42:59Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -77,7 +72,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n-import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.apache.flink.runtime.jobmaster.slotpool.SlotPoolUtils.createAndSetUpSlotPool;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d489b53b960def9c1beb30f0b605e0debc528120"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU3NDQ3Nw==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/12917#discussion_r465574477", "createdAt": "2020-08-05T08:51:31Z", "author": {"login": "Thesharing"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/SlotPoolImplTest.java", "diffHunk": "@@ -77,7 +72,9 @@\n import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n-import static org.apache.flink.runtime.jobmaster.slotpool.AvailableSlotsTest.DEFAULT_TESTING_PROFILE;\n+import static org.apache.flink.runtime.jobmaster.slotpool.SlotPoolUtils.createAndSetUpSlotPool;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU2OTU0OA=="}, "originalCommit": {"oid": "d489b53b960def9c1beb30f0b605e0debc528120"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4957, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}