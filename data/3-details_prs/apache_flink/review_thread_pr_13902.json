{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTc3MDU3", "number": 13902, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1MjowMlrOE1DbGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzowNDo1OFrOE1Djrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDY2MDc0OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicSink.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1MjowMlrOHtHalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMjo1MjowMlrOHtHalg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA2OTQ2Mg==", "bodyText": "Can simplify to Optional.ofNullable(parallelism).", "url": "https://github.com/apache/flink/pull/13902#discussion_r517069462", "createdAt": "2020-11-04T02:52:02Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicSink.java", "diffHunk": "@@ -282,6 +288,20 @@ public int hashCode() {\n \t\treturn format.createRuntimeEncoder(context, physicalFormatDataType);\n \t}\n \n+\t/**\n+\t * Returns the parallelism for this instance.\n+\t *\n+\t * <p>The parallelism denotes how many parallel instances of a source or sink will be spawned\n+\t * during the execution.\n+\t *\n+\t * @return empty if the connector does not provide a custom parallelism, then the planner will\n+\t * decide the number of parallel instances by itself.\n+\t */\n+\t@Override\n+\tpublic Optional<Integer> getParallelism() {\n+\t\treturn parallelism != null ? Optional.of(parallelism) : Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8469feac8cd4d4ba5032e5306a57aa3e41d6dc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDY3NTQzOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/connectors/kafka.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzowMTowNVrOHtHjfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzowMTowNVrOHtHjfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MTc0Mw==", "bodyText": "I think it's confusing what is \"parallelism are chained.\".\nWhat do you think about:\n\nDefines the parallelism of the Kafka sink operator. By default, the parallelism is determined by the framework using the same parallelism of the upstream chained operator.", "url": "https://github.com/apache/flink/pull/13902#discussion_r517071743", "createdAt": "2020-11-04T03:01:05Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/kafka.md", "diffHunk": "@@ -184,6 +184,18 @@ Connector Options\n       <td>String</td>\n       <td>Defines the delivery semantic for the Kafka sink. Valid enumerationns are <code>'at-lease-once'</code>, <code>'exactly-once'</code> and <code>'none'</code>. See <a href='#consistency-guarantees'>Consistency guarantees</a> for more details. </td>\n     </tr>\n+    <tr>\n+      <td><h5>sink.parallelism</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>Integer</td>\n+      <td>Defines the parallelism for the Kafka sink. If not specified, the parallelism are\n+      <ul>\n+        <li><code>Chained</code>: Use upstream parallelism.</li>\n+        <li><code>Non-Chained</code>: Use global parallelism setting.</li>\n+      </ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc78068f8b87f8a82df7574095d2f5695c690112"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MDY4MjcwOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzowNDo1OFrOHtHnqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMzowOTo1MVrOHtHsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MjgxMQ==", "bodyText": "Could you add a new util method in SinkFunctionProvider? I think most of the connector can use this new method.\n\t/**\n\t * Helper method for creating a SinkFunction provider with a provided sink parallelism.\n\t */\n\tstatic SinkFunctionProvider of(SinkFunction<RowData> sinkFunction, Integer sinkParallelism) {\n\t\treturn new SinkFunctionProvider() {\n\n\t\t\t@Override\n\t\t\tpublic SinkFunction<RowData> createSinkFunction() {\n\t\t\t\treturn sinkFunction;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Optional<Integer> getParallelism() {\n\t\t\t\treturn Optional.ofNullable(sinkParallelism);\n\t\t\t}\n\t\t};\n\t}", "url": "https://github.com/apache/flink/pull/13902#discussion_r517072811", "createdAt": "2020-11-04T03:04:58Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicSink.java", "diffHunk": "@@ -145,7 +150,17 @@ public SinkRuntimeProvider getSinkRuntimeProvider(Context context) {\n \t\tfinal FlinkKafkaProducer<RowData> kafkaProducer =\n \t\t\t\tcreateKafkaProducer(keySerialization, valueSerialization);\n \n-\t\treturn SinkFunctionProvider.of(kafkaProducer);\n+\t\treturn new SinkFunctionProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc78068f8b87f8a82df7574095d2f5695c690112"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3Mzk1NA==", "bodyText": "yes,it's better to have common function", "url": "https://github.com/apache/flink/pull/13902#discussion_r517073954", "createdAt": "2020-11-04T03:09:51Z", "author": {"login": "zhuxiaoshang"}, "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaDynamicSink.java", "diffHunk": "@@ -145,7 +150,17 @@ public SinkRuntimeProvider getSinkRuntimeProvider(Context context) {\n \t\tfinal FlinkKafkaProducer<RowData> kafkaProducer =\n \t\t\t\tcreateKafkaProducer(keySerialization, valueSerialization);\n \n-\t\treturn SinkFunctionProvider.of(kafkaProducer);\n+\t\treturn new SinkFunctionProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3MjgxMQ=="}, "originalCommit": {"oid": "dc78068f8b87f8a82df7574095d2f5695c690112"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4904, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}