{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjQ0MDUw", "number": 12864, "title": "[FLINK-18487][table] Datagen and Blackhole factory omits unrecognized properties silently", "bodyText": "What is the purpose of the change\nFor the following DDL, we just omits the unrecognized property 'records-per-second'.\nCREATE TABLE MyDataGen (\n  int_field int,\n  double_field double,\n  string_field varchar\n) WITH (\n  'connector' = 'datagen',\n  'records-per-second' = '1'  -- should be rows-per-second\n)\n\nWe should throw Exceptions to tell users that they used a wrong property.\nBrief change log\n\nRefactory FactoryUtil: provides validateFactoryOptions and validateUnconsumedKeys.\nDataGenTableSourceFactory: Dynamic generation config options, validate them, and check unconsumed keys.\nBlackHoleTableSinkFactory: Using helper.validate.\n\nVerifying this change\n\nDataGeneratorSourceTest\nBlackHoleSinkFactoryTest\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: (no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no\nThe S3 file system connector: (no\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no", "createdAt": "2020-07-10T06:02:23Z", "url": "https://github.com/apache/flink/pull/12864", "merged": true, "mergeCommit": {"oid": "73210cc0f712158ec939ef3ad7dec52a921aad7c"}, "closed": true, "closedAt": "2020-07-24T02:07:18Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2pfBVgBqjM1NjM3NjU1MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3vcXJAFqTQ1NDEyOTgyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "00dcb531f4342280f1fd56fc89cfb921a11d01f3", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/00dcb531f4342280f1fd56fc89cfb921a11d01f3", "committedDate": "2020-07-10T06:19:59Z", "message": "Minor"}, "afterCommit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/dc885404cf1343b8316b8574208a2ed9f862673e", "committedDate": "2020-07-20T03:57:46Z", "message": "Minor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTA2Mzk3", "url": "https://github.com/apache/flink/pull/12864#pullrequestreview-452106397", "createdAt": "2020-07-21T03:48:19Z", "commit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMzo0ODoxOVrOG0nD0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMDozMVrOG0ps3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzgxOTA4OA==", "bodyText": "make the default value a static member?", "url": "https://github.com/apache/flink/pull/12864#discussion_r457819088", "createdAt": "2020-07-21T03:48:19Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/DataGenTableSourceFactory.java", "diffHunk": "@@ -94,128 +97,176 @@ public String factoryIdentifier() {\n \n \t@Override\n \tpublic DynamicTableSource createDynamicTableSource(Context context) {\n+\t\tcreateTableFactoryHelper(this, context).validateExcept(FIELDS);\n+\n \t\tConfiguration options = new Configuration();\n \t\tcontext.getCatalogTable().getOptions().forEach(options::setString);\n \n-\t\tTableSchema tableSchema = TableSchemaUtils.getPhysicalSchema(context.getCatalogTable().getSchema());\n+\t\tTableSchema schema = TableSchemaUtils.getPhysicalSchema(context.getCatalogTable().getSchema());\n+\t\tDataGenerator[] fieldGenerators = new DataGenerator[schema.getFieldCount()];\n+\t\tSet<ConfigOption<?>> optionalOptions = new HashSet<>();\n \n-\t\tDataGenerator[] fieldGenerators = new DataGenerator[tableSchema.getFieldCount()];\n \t\tfor (int i = 0; i < fieldGenerators.length; i++) {\n-\t\t\tfieldGenerators[i] = createDataGenerator(\n-\t\t\t\t\ttableSchema.getFieldName(i).get(),\n-\t\t\t\t\ttableSchema.getFieldDataType(i).get(),\n-\t\t\t\t\toptions);\n+\t\t\tString name = schema.getFieldNames()[i];\n+\t\t\tDataType type = schema.getFieldDataTypes()[i];\n+\n+\t\t\tConfigOption<String> kind = key(FIELDS + \".\" + name + \".\" + KIND)\n+\t\t\t\t\t.stringType().defaultValue(RANDOM);\n+\t\t\tDataGeneratorContainer container = createContainer(name, type, options.get(kind), options);\n+\t\t\tfieldGenerators[i] = container.generator;\n+\n+\t\t\toptionalOptions.add(kind);\n+\t\t\toptionalOptions.addAll(container.options);\n \t\t}\n \n-\t\treturn new DataGenTableSource(fieldGenerators, tableSchema, options.get(ROWS_PER_SECOND));\n+\t\tFactoryUtil.validateFactoryOptions(new HashSet<>(), optionalOptions, options);\n+\n+\t\tSet<String> consumedOptionKeys = new HashSet<>();\n+\t\tconsumedOptionKeys.add(CONNECTOR.key());\n+\t\tconsumedOptionKeys.add(ROWS_PER_SECOND.key());\n+\t\toptionalOptions.stream().map(ConfigOption::key).forEach(consumedOptionKeys::add);\n+\t\tFactoryUtil.validateUnconsumedKeys(factoryIdentifier(), options.keySet(), consumedOptionKeys);\n+\n+\t\treturn new DataGenTableSource(fieldGenerators, schema, options.get(ROWS_PER_SECOND));\n \t}\n \n-\tprivate DataGenerator createDataGenerator(String name, DataType type, ReadableConfig options) {\n-\t\tString genType = options.get(\n-\t\t\t\tkey(FIELDS + \".\" + name + \".\" + KIND).stringType().defaultValue(RANDOM));\n-\t\tswitch (genType) {\n+\tprivate DataGeneratorContainer createContainer(\n+\t\t\tString name, DataType type, String kind, ReadableConfig options) {\n+\t\tswitch (kind) {\n \t\t\tcase RANDOM:\n-\t\t\t\treturn createRandomGenerator(name, type, options);\n+\t\t\t\treturn createRandomContainer(name, type, options);\n \t\t\tcase SEQUENCE:\n-\t\t\t\treturn createSequenceGenerator(name, type, options);\n+\t\t\t\treturn createSequenceContainer(name, type, options);\n \t\t\tdefault:\n-\t\t\t\tthrow new ValidationException(\"Unsupported generator type: \" + genType);\n+\t\t\t\tthrow new ValidationException(\"Unsupported generator kind: \" + kind);\n \t\t}\n \t}\n \n-\tprivate DataGenerator createRandomGenerator(String name, DataType type, ReadableConfig options) {\n-\t\tConfigOption<Integer> lenKey = key(FIELDS + \".\" + name + \".\" + LENGTH)\n-\t\t\t\t.intType().defaultValue(100);\n+\tprivate DataGeneratorContainer createRandomContainer(String name, DataType type, ReadableConfig config) {\n \t\tOptionBuilder minKey = key(FIELDS + \".\" + name + \".\" + MIN);\n \t\tOptionBuilder maxKey = key(FIELDS + \".\" + name + \".\" + MAX);\n \t\tswitch (type.getLogicalType().getTypeRoot()) {\n-\t\t\tcase BOOLEAN:\n-\t\t\t\treturn RandomGenerator.booleanGenerator();\n+\t\t\tcase BOOLEAN: {\n+\t\t\t\treturn DataGeneratorContainer.of(RandomGenerator.booleanGenerator());\n+\t\t\t}\n \t\t\tcase CHAR:\n-\t\t\tcase VARCHAR:\n-\t\t\t\tint length = options.get(lenKey);\n-\t\t\t\treturn getRandomStringGenerator(length);\n-\t\t\tcase TINYINT:\n-\t\t\t\treturn RandomGenerator.byteGenerator(\n-\t\t\t\t\t\toptions.get(minKey.intType().defaultValue((int) Byte.MIN_VALUE)).byteValue(),\n-\t\t\t\t\t\toptions.get(maxKey.intType().defaultValue((int) Byte.MAX_VALUE)).byteValue());\n-\t\t\tcase SMALLINT:\n-\t\t\t\treturn RandomGenerator.shortGenerator(\n-\t\t\t\t\t\toptions.get(minKey.intType().defaultValue((int) Short.MIN_VALUE)).shortValue(),\n-\t\t\t\t\t\toptions.get(maxKey.intType().defaultValue((int) Short.MAX_VALUE)).shortValue());\n-\t\t\tcase INTEGER:\n-\t\t\t\treturn RandomGenerator.intGenerator(\n-\t\t\t\t\t\toptions.get(minKey.intType().defaultValue(Integer.MIN_VALUE)),\n-\t\t\t\t\t\toptions.get(maxKey.intType().defaultValue(Integer.MAX_VALUE)));\n-\t\t\tcase BIGINT:\n-\t\t\t\treturn RandomGenerator.longGenerator(\n-\t\t\t\t\t\toptions.get(minKey.longType().defaultValue(Long.MIN_VALUE)),\n-\t\t\t\t\t\toptions.get(maxKey.longType().defaultValue(Long.MAX_VALUE)));\n-\t\t\tcase FLOAT:\n-\t\t\t\treturn RandomGenerator.floatGenerator(\n-\t\t\t\t\t\toptions.get(minKey.floatType().defaultValue(Float.MIN_VALUE)),\n-\t\t\t\t\t\toptions.get(maxKey.floatType().defaultValue(Float.MAX_VALUE)));\n-\t\t\tcase DOUBLE:\n-\t\t\t\treturn RandomGenerator.doubleGenerator(\n-\t\t\t\t\t\toptions.get(minKey.doubleType().defaultValue(Double.MIN_VALUE)),\n-\t\t\t\t\t\toptions.get(maxKey.doubleType().defaultValue(Double.MAX_VALUE)));\n+\t\t\tcase VARCHAR: {\n+\t\t\t\tConfigOption<Integer> lenOption = key(FIELDS + \".\" + name + \".\" + LENGTH)\n+\t\t\t\t\t\t.intType()\n+\t\t\t\t\t\t.defaultValue(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1NjY5MA==", "bodyText": "Call requiredOptions() instead of new HashSet<>()?", "url": "https://github.com/apache/flink/pull/12864#discussion_r457856690", "createdAt": "2020-07-21T06:04:18Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/DataGenTableSourceFactory.java", "diffHunk": "@@ -94,128 +97,176 @@ public String factoryIdentifier() {\n \n \t@Override\n \tpublic DynamicTableSource createDynamicTableSource(Context context) {\n+\t\tcreateTableFactoryHelper(this, context).validateExcept(FIELDS);\n+\n \t\tConfiguration options = new Configuration();\n \t\tcontext.getCatalogTable().getOptions().forEach(options::setString);\n \n-\t\tTableSchema tableSchema = TableSchemaUtils.getPhysicalSchema(context.getCatalogTable().getSchema());\n+\t\tTableSchema schema = TableSchemaUtils.getPhysicalSchema(context.getCatalogTable().getSchema());\n+\t\tDataGenerator[] fieldGenerators = new DataGenerator[schema.getFieldCount()];\n+\t\tSet<ConfigOption<?>> optionalOptions = new HashSet<>();\n \n-\t\tDataGenerator[] fieldGenerators = new DataGenerator[tableSchema.getFieldCount()];\n \t\tfor (int i = 0; i < fieldGenerators.length; i++) {\n-\t\t\tfieldGenerators[i] = createDataGenerator(\n-\t\t\t\t\ttableSchema.getFieldName(i).get(),\n-\t\t\t\t\ttableSchema.getFieldDataType(i).get(),\n-\t\t\t\t\toptions);\n+\t\t\tString name = schema.getFieldNames()[i];\n+\t\t\tDataType type = schema.getFieldDataTypes()[i];\n+\n+\t\t\tConfigOption<String> kind = key(FIELDS + \".\" + name + \".\" + KIND)\n+\t\t\t\t\t.stringType().defaultValue(RANDOM);\n+\t\t\tDataGeneratorContainer container = createContainer(name, type, options.get(kind), options);\n+\t\t\tfieldGenerators[i] = container.generator;\n+\n+\t\t\toptionalOptions.add(kind);\n+\t\t\toptionalOptions.addAll(container.options);\n \t\t}\n \n-\t\treturn new DataGenTableSource(fieldGenerators, tableSchema, options.get(ROWS_PER_SECOND));\n+\t\tFactoryUtil.validateFactoryOptions(new HashSet<>(), optionalOptions, options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MTY0Mg==", "bodyText": "Is this necessary, given that we'll call FactoryUtil.validateFactoryOptions and FactoryUtil.validateUnconsumedKeys later on?", "url": "https://github.com/apache/flink/pull/12864#discussion_r457861642", "createdAt": "2020-07-21T06:18:39Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/DataGenTableSourceFactory.java", "diffHunk": "@@ -94,128 +97,176 @@ public String factoryIdentifier() {\n \n \t@Override\n \tpublic DynamicTableSource createDynamicTableSource(Context context) {\n+\t\tcreateTableFactoryHelper(this, context).validateExcept(FIELDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MjM2Nw==", "bodyText": "Do we also need to add PROPERTY_VERSION to consumedOptionKeys?", "url": "https://github.com/apache/flink/pull/12864#discussion_r457862367", "createdAt": "2020-07-21T06:20:31Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/DataGenTableSourceFactory.java", "diffHunk": "@@ -94,128 +97,176 @@ public String factoryIdentifier() {\n \n \t@Override\n \tpublic DynamicTableSource createDynamicTableSource(Context context) {\n+\t\tcreateTableFactoryHelper(this, context).validateExcept(FIELDS);\n+\n \t\tConfiguration options = new Configuration();\n \t\tcontext.getCatalogTable().getOptions().forEach(options::setString);\n \n-\t\tTableSchema tableSchema = TableSchemaUtils.getPhysicalSchema(context.getCatalogTable().getSchema());\n+\t\tTableSchema schema = TableSchemaUtils.getPhysicalSchema(context.getCatalogTable().getSchema());\n+\t\tDataGenerator[] fieldGenerators = new DataGenerator[schema.getFieldCount()];\n+\t\tSet<ConfigOption<?>> optionalOptions = new HashSet<>();\n \n-\t\tDataGenerator[] fieldGenerators = new DataGenerator[tableSchema.getFieldCount()];\n \t\tfor (int i = 0; i < fieldGenerators.length; i++) {\n-\t\t\tfieldGenerators[i] = createDataGenerator(\n-\t\t\t\t\ttableSchema.getFieldName(i).get(),\n-\t\t\t\t\ttableSchema.getFieldDataType(i).get(),\n-\t\t\t\t\toptions);\n+\t\t\tString name = schema.getFieldNames()[i];\n+\t\t\tDataType type = schema.getFieldDataTypes()[i];\n+\n+\t\t\tConfigOption<String> kind = key(FIELDS + \".\" + name + \".\" + KIND)\n+\t\t\t\t\t.stringType().defaultValue(RANDOM);\n+\t\t\tDataGeneratorContainer container = createContainer(name, type, options.get(kind), options);\n+\t\t\tfieldGenerators[i] = container.generator;\n+\n+\t\t\toptionalOptions.add(kind);\n+\t\t\toptionalOptions.addAll(container.options);\n \t\t}\n \n-\t\treturn new DataGenTableSource(fieldGenerators, tableSchema, options.get(ROWS_PER_SECOND));\n+\t\tFactoryUtil.validateFactoryOptions(new HashSet<>(), optionalOptions, options);\n+\n+\t\tSet<String> consumedOptionKeys = new HashSet<>();\n+\t\tconsumedOptionKeys.add(CONNECTOR.key());\n+\t\tconsumedOptionKeys.add(ROWS_PER_SECOND.key());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f18217e8a2134a571e890220bf6e98d82cc82b9", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/8f18217e8a2134a571e890220bf6e98d82cc82b9", "committedDate": "2020-07-23T09:27:52Z", "message": "[FLINK-18487][table] Datagen and Blackhole factory omits unrecognized properties silently"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62a9848c6ccb44cd084a75af78fcd049e6c3950", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/c62a9848c6ccb44cd084a75af78fcd049e6c3950", "committedDate": "2020-07-23T09:27:52Z", "message": "Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35741991260d790492bc338e11ef0d4912b6484d", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/35741991260d790492bc338e11ef0d4912b6484d", "committedDate": "2020-07-23T09:27:52Z", "message": "Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88f7eacc4536eecfd7149cceab463597682945fb", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/88f7eacc4536eecfd7149cceab463597682945fb", "committedDate": "2020-07-23T09:35:18Z", "message": "Fix comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc885404cf1343b8316b8574208a2ed9f862673e", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/dc885404cf1343b8316b8574208a2ed9f862673e", "committedDate": "2020-07-20T03:57:46Z", "message": "Minor"}, "afterCommit": {"oid": "88f7eacc4536eecfd7149cceab463597682945fb", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/88f7eacc4536eecfd7149cceab463597682945fb", "committedDate": "2020-07-23T09:35:18Z", "message": "Fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTI5ODIz", "url": "https://github.com/apache/flink/pull/12864#pullrequestreview-454129823", "createdAt": "2020-07-23T13:28:27Z", "commit": {"oid": "88f7eacc4536eecfd7149cceab463597682945fb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3103, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}