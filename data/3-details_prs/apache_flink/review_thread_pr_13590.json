{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDMyODA4", "number": 13590, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoxODo0M1rOEsm4zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0ODoyOVrOEsniXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjA5OTM1OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/ExecutionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoxODo0M1rOHf8TZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyOTo0NFrOHgbWMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NTkwOA==", "bodyText": "Just to confirm: We can remove these tests because we no longer use LocationPreferenceConstraint.ANY in the new scheduler, right?", "url": "https://github.com/apache/flink/pull/13590#discussion_r503255908", "createdAt": "2020-10-12T12:18:43Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/ExecutionTest.java", "diffHunk": "@@ -282,61 +278,6 @@ public void testSlotAllocationCancellationWhenExecutionCancelled() throws Except\n \t\tassertThat(canceledSlotRequests, equalTo(slotRequests));\n \t}\n \n-\t/**\n-\t * Tests that all preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAllPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>();\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture3.complete(taskManagerLocation3);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture2.complete(taskManagerLocation2);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3));\n-\t}\n-\n-\t/**\n-\t * Tests that any preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAnyPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3);\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3));\n-\t}\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002a6217192f9fdc66735858b228a856a6e80cb8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5NDUwMA==", "bodyText": "yes. The new scheduler uses DefaultPreferredLocationsRetriever. LocationPreferenceConstraint  is not used anymore.", "url": "https://github.com/apache/flink/pull/13590#discussion_r503294500", "createdAt": "2020-10-12T13:25:50Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/ExecutionTest.java", "diffHunk": "@@ -282,61 +278,6 @@ public void testSlotAllocationCancellationWhenExecutionCancelled() throws Except\n \t\tassertThat(canceledSlotRequests, equalTo(slotRequests));\n \t}\n \n-\t/**\n-\t * Tests that all preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAllPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>();\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture3.complete(taskManagerLocation3);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture2.complete(taskManagerLocation2);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3));\n-\t}\n-\n-\t/**\n-\t * Tests that any preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAnyPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3);\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3));\n-\t}\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NTkwOA=="}, "originalCommit": {"oid": "002a6217192f9fdc66735858b228a856a6e80cb8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NDUzMQ==", "bodyText": "Thanks for the clarification @zhuzhurk.", "url": "https://github.com/apache/flink/pull/13590#discussion_r503764531", "createdAt": "2020-10-13T08:29:44Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/ExecutionTest.java", "diffHunk": "@@ -282,61 +278,6 @@ public void testSlotAllocationCancellationWhenExecutionCancelled() throws Except\n \t\tassertThat(canceledSlotRequests, equalTo(slotRequests));\n \t}\n \n-\t/**\n-\t * Tests that all preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAllPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>();\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture3.complete(taskManagerLocation3);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture2.complete(taskManagerLocation2);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3));\n-\t}\n-\n-\t/**\n-\t * Tests that any preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAnyPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3);\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3));\n-\t}\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NTkwOA=="}, "originalCommit": {"oid": "002a6217192f9fdc66735858b228a856a6e80cb8"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjIwNTcyOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/ScheduleWithCoLocationHintTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0ODoyOVrOHf9Tvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODoyOToyN1rOHgbVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MjM4Mw==", "bodyText": "Aren't we changing the semantics of this test by saying that we don't have any preferred location preferences?", "url": "https://github.com/apache/flink/pull/13590#discussion_r503272383", "createdAt": "2020-10-12T12:48:29Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/ScheduleWithCoLocationHintTest.java", "diffHunk": "@@ -306,25 +306,25 @@ public void testGetsNonLocalFromSharingGroupFirst() throws Exception {\n \n \t\t// schedule something into the shared group so that both instances are in the sharing group\n \t\tLogicalSlot s1 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s2 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule one locally to instance 1\n \t\tLogicalSlot s3 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule with co location constraint (yet unassigned) and a preference for\n \t\t// instance 1, but it can only get instance 2\n \t\tLogicalSlot s4 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule something into the assigned co-location constraints and check that they override the\n \t\t// other preferences\n \t\tLogicalSlot s5 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s6 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4OTExMw==", "bodyText": "ScheduledUnit will just use the ExecutionVertexID of the given Execution, so that the location preference in this execution param will not take effect. The location preference takes effect in the following slotProfile param(e.g. slotProfileForLocation(loc1))", "url": "https://github.com/apache/flink/pull/13590#discussion_r503289113", "createdAt": "2020-10-12T13:16:56Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/ScheduleWithCoLocationHintTest.java", "diffHunk": "@@ -306,25 +306,25 @@ public void testGetsNonLocalFromSharingGroupFirst() throws Exception {\n \n \t\t// schedule something into the shared group so that both instances are in the sharing group\n \t\tLogicalSlot s1 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s2 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule one locally to instance 1\n \t\tLogicalSlot s3 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule with co location constraint (yet unassigned) and a preference for\n \t\t// instance 1, but it can only get instance 2\n \t\tLogicalSlot s4 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule something into the assigned co-location constraints and check that they override the\n \t\t// other preferences\n \t\tLogicalSlot s5 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s6 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MjM4Mw=="}, "originalCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwOTUxNw==", "bodyText": "The SlotSharingGroup param of getExecution() also does not take effect .\nI think we can simplify ScheduledUnit constructors to get rid of the Execution to avoid such confusion.\nBut maybe a bit later because it can have lots of conflicts with the ongoing changes of FLINK-17760.", "url": "https://github.com/apache/flink/pull/13590#discussion_r503309517", "createdAt": "2020-10-12T13:49:47Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/ScheduleWithCoLocationHintTest.java", "diffHunk": "@@ -306,25 +306,25 @@ public void testGetsNonLocalFromSharingGroupFirst() throws Exception {\n \n \t\t// schedule something into the shared group so that both instances are in the sharing group\n \t\tLogicalSlot s1 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s2 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule one locally to instance 1\n \t\tLogicalSlot s3 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule with co location constraint (yet unassigned) and a preference for\n \t\t// instance 1, but it can only get instance 2\n \t\tLogicalSlot s4 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule something into the assigned co-location constraints and check that they override the\n \t\t// other preferences\n \t\tLogicalSlot s5 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s6 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MjM4Mw=="}, "originalCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc2NDMyMw==", "bodyText": "Thanks for the clarification @zhuzhurk. Yes, let's try to simplify ScheduledUnit after FLINK-17760.", "url": "https://github.com/apache/flink/pull/13590#discussion_r503764323", "createdAt": "2020-10-13T08:29:27Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/ScheduleWithCoLocationHintTest.java", "diffHunk": "@@ -306,25 +306,25 @@ public void testGetsNonLocalFromSharingGroupFirst() throws Exception {\n \n \t\t// schedule something into the shared group so that both instances are in the sharing group\n \t\tLogicalSlot s1 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s2 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule one locally to instance 1\n \t\tLogicalSlot s3 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule with co location constraint (yet unassigned) and a preference for\n \t\t// instance 1, but it can only get instance 2\n \t\tLogicalSlot s4 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule something into the assigned co-location constraints and check that they override the\n \t\t// other preferences\n \t\tLogicalSlot s5 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s6 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MjM4Mw=="}, "originalCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 109, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}