{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4OTY2MDY2", "number": 14027, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0MTowOVrOE3-nbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0NDozMlrOE3-sZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTMzMDM2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/stream/StreamExecJoin.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0MTowOVrOHxoqNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0MTowOVrOHxoqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgwODQzOA==", "bodyText": "* with the unique key (id). The join key is (id, name), then an insert and update on the id:\n\nI think current logic is unique key contains join key rather than unique key is contained in join key,  may this is an existed bug\ninputUniqueKeys.exists { uniqueKey => joinKeys.forall(uniqueKey.toArray.contains(_)) }\nignore this comment..", "url": "https://github.com/apache/flink/pull/14027#discussion_r521808438", "createdAt": "2020-11-12T03:41:09Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/stream/StreamExecJoin.scala", "diffHunk": "@@ -57,6 +57,22 @@ class StreamExecJoin(\n   with StreamPhysicalRel\n   with StreamExecNode[RowData] {\n \n+  /**\n+   * This is mainly used in `FlinkChangelogModeInferenceProgram.SatisfyUpdateKindTraitVisitor`.\n+   * If the unique key of input contains join key, then it can support ignoring UPDATE_BEFORE.\n+   * Otherwise, it can't ignore UPDATE_BEFORE. For example, if the input schema is [id, name, cnt]\n+   * with the unique key (id). The join key is (id, name), then an insert and update on the id:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1993cd962b77f95802a5130360204339bbe8d8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTMzMjA1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/program/FlinkChangelogModeInferenceProgram.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0MTozNVrOHxorUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0MTozNVrOHxorUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgwODcyMA==", "bodyText": "delete this line", "url": "https://github.com/apache/flink/pull/14027#discussion_r521808720", "createdAt": "2020-11-12T03:41:35Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/program/FlinkChangelogModeInferenceProgram.scala", "diffHunk": "@@ -57,15 +57,19 @@ class FlinkChangelogModeInferenceProgram extends FlinkOptimizeProgram[StreamOpti\n     // step2: satisfy UpdateKind trait\n     val rootModifyKindSet = getModifyKindSet(rootWithModifyKindSet)\n     // use the required UpdateKindTrait from parent blocks\n-    val requiredUpdateKindTraits = if (context.isUpdateBeforeRequired) {\n-      Seq(UpdateKindTrait.BEFORE_AND_AFTER)\n-    } else if (rootModifyKindSet.isInsertOnly) {\n-      Seq(UpdateKindTrait.NONE)\n+    val requiredUpdateKindTraits = if (rootModifyKindSet.contains(ModifyKind.UPDATE)) {\n+      if (context.isUpdateBeforeRequired) {\n+        Seq(UpdateKindTrait.BEFORE_AND_AFTER)\n+      } else {\n+        // update_before is not required, and input contains updates\n+        // try ONLY_UPDATE_AFTER first, and then BEFORE_AND_AFTER\n+        Seq(UpdateKindTrait.ONLY_UPDATE_AFTER, UpdateKindTrait.BEFORE_AND_AFTER)\n+      }\n     } else {\n-      // update_before is not required, and input contains updates\n-      // try ONLY_UPDATE_AFTER first, and then BEFORE_AND_AFTER\n-      Seq(UpdateKindTrait.ONLY_UPDATE_AFTER, UpdateKindTrait.BEFORE_AND_AFTER)\n+      // there is no updates\n+      Seq(UpdateKindTrait.NONE)\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1993cd962b77f95802a5130360204339bbe8d8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MTM0MzA4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/TableScanTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0NDozMlrOHxoyvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMzo0NDozMlrOHxoyvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTgxMDYyMw==", "bodyText": "could you change the join key to (currency, currency_no) to check the join key contains unique key case.", "url": "https://github.com/apache/flink/pull/14027#discussion_r521810623", "createdAt": "2020-11-12T03:44:32Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/TableScanTest.scala", "diffHunk": "@@ -281,25 +281,40 @@ class TableScanTest extends TableTestBase {\n \n   @Test\n   def testJoinOnChangelogSource(): Unit = {\n+    verifyJoinOnSource(\"I,UB,UA\")\n+  }\n+\n+  @Test\n+  def testJoinOnNoUpdateSource(): Unit = {\n+    verifyJoinOnSource(\"I,D\")\n+  }\n+\n+  @Test\n+  def testJoinOnUpsertSource(): Unit = {\n+    verifyJoinOnSource(\"UA,D\")\n+  }\n+\n+  private def verifyJoinOnSource(changelogMode: String): Unit = {\n     util.addTable(\n       \"\"\"\n-         |CREATE TABLE orders (\n-         |  amount BIGINT,\n-         |  currency STRING\n-         |) WITH (\n-         | 'connector' = 'values',\n-         | 'changelog-mode' = 'I'\n-         |)\n-         |\"\"\".stripMargin)\n+        |CREATE TABLE orders (\n+        |  amount BIGINT,\n+        |  currency STRING\n+        |) WITH (\n+        | 'connector' = 'values',\n+        | 'changelog-mode' = 'I'\n+        |)\n+        |\"\"\".stripMargin)\n     util.addTable(\n-      \"\"\"\n-         |CREATE TABLE rates_history (\n-         |  currency STRING,\n-         |  rate BIGINT\n-         |) WITH (\n-         |  'connector' = 'values',\n-         |  'changelog-mode' = 'I,UB,UA'\n-         |)\n+      s\"\"\"\n+        |CREATE TABLE rates_history (\n+        |  currency STRING,\n+        |  rate BIGINT,\n+        |  PRIMARY KEY (currency) NOT ENFORCED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1993cd962b77f95802a5130360204339bbe8d8"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4878, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}