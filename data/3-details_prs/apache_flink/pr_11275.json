{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMTg1NTYw", "number": 11275, "title": "[FLINK-16359][table-runtime] Introduce WritableVectors for abstract writing", "bodyText": "What is the purpose of the change\nIn FLINK-11899 , we need write vectors from parquet input streams.\nWe need abstract vector writing, in future, we can provide OffHeapVectors.\nBrief change log\n\nIntroduce WritableVector interfaces.\nImplement WritableVectors in Heap vectors.\n\nVerifying this change\nColumnVectorTest\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)", "createdAt": "2020-03-02T05:38:01Z", "url": "https://github.com/apache/flink/pull/11275", "merged": true, "mergeCommit": {"oid": "4a509fc02b223b2f81b39f055213b42e7265e4cb"}, "closed": true, "closedAt": "2020-03-03T11:39:33Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJm9WMAH2gAyMzgyMTg1NTYwOjJkZjZmNjRhN2QxYTYyODM2NTIxYmQwMmVjMGNlNzdmZTJiMTRlZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKAnxbAFqTM2NzkwMTUxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/2df6f64a7d1a62836521bd02ec0ce77fe2b14efb", "committedDate": "2020-03-02T05:34:48Z", "message": "[FLINK-16359][table-runtime] Introduce WritableVectors for abstract writing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MDQyMTg1", "url": "https://github.com/apache/flink/pull/11275#pullrequestreview-367042185", "createdAt": "2020-03-02T09:13:48Z", "commit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxMzo0OFrOFwYG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozMDozM1rOFwYnQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ==", "bodyText": "Add a meaningful message, or throw an index-out-of-bound exception?", "url": "https://github.com/apache/flink/pull/11275#discussion_r386270935", "createdAt": "2020-03-02T09:13:48Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapIntVector.java", "diffHunk": "@@ -47,4 +49,45 @@ public int getInt(int i) {\n \t\t\treturn dictionary.decodeToInt(dictionaryIds.vector[i]);\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic void setInt(int i, int value) {\n+\t\tif (i >= vector.length) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\tvector[i] = value;\n+\t}\n+\n+\t@Override\n+\tpublic void setIntsFromBinary(int rowId, int count, byte[] src, int srcIndex) {\n+\t\tif (LITTLE_ENDIAN) {\n+\t\t\tUNSAFE.copyMemory(src, BYTE_ARRAY_OFFSET + srcIndex, vector,\n+\t\t\t\t\tINT_ARRAY_OFFSET + rowId * 4L, count * 4L);\n+\t\t} else {\n+\t\t\tlong srcOffset = srcIndex + BYTE_ARRAY_OFFSET;\n+\t\t\tfor (int i = 0; i < count; ++i, srcOffset += 4) {\n+\t\t\t\tvector[i + rowId] = Integer.reverseBytes(UNSAFE.getInt(src, srcOffset));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setInts(int rowId, int count, int value) {\n+\t\tif (rowId + count - 1 >= vector.length) {\n+\t\t\tthrow new RuntimeException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MjQxNA==", "bodyText": "Why do we need the precision parameter?", "url": "https://github.com/apache/flink/pull/11275#discussion_r386272414", "createdAt": "2020-03-02T09:16:43Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapTimestampVector.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.heap;\n+\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.dataformat.vector.writable.WritableTimestampVector;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.dataformat.SqlTimestamp.fromEpochMillis;\n+\n+/**\n+ * This class represents a nullable byte column vector.\n+ */\n+public class HeapTimestampVector extends AbstractHeapVector implements WritableTimestampVector {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final long[] milliseconds;\n+\tprivate final int[] nanoOfMilliseconds;\n+\n+\tpublic HeapTimestampVector(int len) {\n+\t\tsuper(len);\n+\t\tthis.milliseconds = new long[len];\n+\t\tthis.nanoOfMilliseconds = new int[len];\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int i, int precision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTIzMw==", "bodyText": "Rename to setBytes?", "url": "https://github.com/apache/flink/pull/11275#discussion_r386279233", "createdAt": "2020-03-02T09:30:33Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/writable/WritableBytesVector.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.writable;\n+\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+\n+/**\n+ * Writable {@link BytesColumnVector}.\n+ */\n+public interface WritableBytesVector extends WritableColumnVector, BytesColumnVector {\n+\n+\t/**\n+\t * Set byte[] at rowId with the provided value.\n+\t */\n+\tvoid appendBytes(int rowId, byte[] value, int offset, int length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c319a7002f2d0e8b5fde97aef0e20bcf7ca2b2c", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/9c319a7002f2d0e8b5fde97aef0e20bcf7ca2b2c", "committedDate": "2020-03-02T11:52:51Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb523979ae8f59e3e5985d57cf1661bc8a42260c", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/bb523979ae8f59e3e5985d57cf1661bc8a42260c", "committedDate": "2020-03-02T12:00:57Z", "message": "Fix python compile"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTAxNTE3", "url": "https://github.com/apache/flink/pull/11275#pullrequestreview-367901517", "createdAt": "2020-03-03T11:28:47Z", "commit": {"oid": "bb523979ae8f59e3e5985d57cf1661bc8a42260c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2945, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}