{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTEzMTEy", "number": 10945, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjoxNlrODaluFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToyNjowOFrODazy1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA3NTcyOnYy", "diffSide": "RIGHT", "path": "docs/ops/plugins.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjoxNlrOFhoMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjoxNlrOFhoMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNTc3OQ==", "bodyText": "The documentation is versioned so the reader can assume what they are looking at is relevant to that version. For that reason we generally avoid listing Flink versions and reserve those comments for the release notes.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n          \n          \n            \n            Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.", "url": "https://github.com/apache/flink/pull/10945#discussion_r370805779", "createdAt": "2020-01-24T19:32:16Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA3NzQ4OnYy", "diffSide": "RIGHT", "path": "docs/ops/plugins.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjo1MlrOFhoNOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjo1MlrOFhoNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n          \n          \n            \n            Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).", "url": "https://github.com/apache/flink/pull/10945#discussion_r370806073", "createdAt": "2020-01-24T19:32:52Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n++-- conf\n++-- lib\n++-- ...\n+\\-- plugins\n+    +-- s3\n+    |   +-- aws-credential-provider.jar\n+    |   \\-- flink-s3-fs-hadoop.jar\n+    \\-- azure\n+        \\-- flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA4MjQwOnYy", "diffSide": "RIGHT", "path": "docs/ops/plugins.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozNDozOVrOFhoQUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozNDozOVrOFhoQUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Plugins may access certain whitelisted packages from lib/. Most importantly, all needed service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary, so that core Flink has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n          \n          \n            \n            Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.", "url": "https://github.com/apache/flink/pull/10945#discussion_r370806866", "createdAt": "2020-01-24T19:34:39Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n++-- conf\n++-- lib\n++-- ...\n+\\-- plugins\n+    +-- s3\n+    |   +-- aws-credential-provider.jar\n+    |   \\-- flink-s3-fs-hadoop.jar\n+    \\-- azure\n+        \\-- flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from lib/. Most importantly, all needed service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary, so that core Flink has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjA4NDMzOnYy", "diffSide": "RIGHT", "path": "docs/ops/plugins.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozNToyMFrOFhoRjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozNToyMFrOFhoRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNzE4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file systems, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory\n          \n          \n            \n            All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "url": "https://github.com/apache/flink/pull/10945#discussion_r370807180", "createdAt": "2020-01-24T19:35:20Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n++-- conf\n++-- lib\n++-- ...\n+\\-- plugins\n+    +-- s3\n+    |   +-- aws-credential-provider.jar\n+    |   \\-- flink-s3-fs-hadoop.jar\n+    \\-- azure\n+        \\-- flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from lib/. Most importantly, all needed service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary, so that core Flink has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file systems, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDM3MzYxOnYy", "diffSide": "RIGHT", "path": "docs/ops/plugins.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToyMzoyOFrOFh8DqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToyMzoyOFrOFh8DqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMTMwNQ==", "bodyText": "I would split longer lines (like this) into multiple lines. Makes reading diffs, reviewing and resolving conflicts significantly easier.", "url": "https://github.com/apache/flink/pull/10945#discussion_r371131305", "createdAt": "2020-01-27T09:23:28Z", "author": {"login": "pnowojski"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDM4MTY1OnYy", "diffSide": "RIGHT", "path": "docs/ops/plugins.md", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToyNjowOFrOFh8Iag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo1NTowNVrOFie7Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg==", "bodyText": "Could we document what's the problem with MapR? (I have already forgotten)", "url": "https://github.com/apache/flink/pull/10945#discussion_r371132522", "createdAt": "2020-01-27T09:26:08Z", "author": {"login": "pnowojski"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0MTE4MQ==", "bodyText": "Didn\u2019t we drop MapR?", "url": "https://github.com/apache/flink/pull/10945#discussion_r371241181", "createdAt": "2020-01-27T13:33:46Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg=="}, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4OTY4Mw==", "bodyText": "I think we just dropped MapR repositories but not the connector support itself. At least it's still on master https://github.com/apache/flink/blob/master/flink-filesystems/flink-mapr-fs/src/main/java/org/apache/flink/runtime/fs/maprfs/MapRFsFactory.java .", "url": "https://github.com/apache/flink/pull/10945#discussion_r371289683", "createdAt": "2020-01-27T15:00:41Z", "author": {"login": "AHeise"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg=="}, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI5MDE2MA==", "bodyText": "@pnowojski there is no jar. it's bundled in flink-dist for some reason.", "url": "https://github.com/apache/flink/pull/10945#discussion_r371290160", "createdAt": "2020-01-27T15:01:23Z", "author": {"login": "AHeise"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg=="}, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMyNDk2NQ==", "bodyText": "If we do not support it, we should drop the mentions from the docs. If we are still supporting it, it would be nice to figure out yet one more time WHY we don't support it via plugins, and write it down. I swear this is the 3rd or 4th time already that I'm wondering why is it like that.", "url": "https://github.com/apache/flink/pull/10945#discussion_r371324965", "createdAt": "2020-01-27T15:57:13Z", "author": {"login": "pnowojski"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg=="}, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwMjYxNQ==", "bodyText": "I just wrote the reason before; we support MapR but it's already in flink-dist.jar, so you cannot use it in plugins.", "url": "https://github.com/apache/flink/pull/10945#discussion_r371702615", "createdAt": "2020-01-28T09:55:05Z", "author": {"login": "AHeise"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg=="}, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1119, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}