{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1Mzc0ODUw", "number": 11347, "title": "[FLINK-14971][checkpointing] Make all the non-IO operations in CheckpointCoordinator single-threaded", "bodyText": "What is the purpose of the change\n\nThis is the last part of refactoring threading model of CheckpointCoordinator\nThe threading model of CheckpointCoordinator would be simplified a lot\n\nAll the non-IO operations are executed in a single-threaded way\nA lot of competitions inside or outside CheckpointCoordinator could be avoided. So it's easier for CheckpointCoordinator to cooperate with other components\n\n\n\nBrief change log\n\nSplit the ACK and declined message handling into two ways\n\nHandle non-IO operations in timer thread\nHandle IO operations in IO thread\nThis is a preparation of introducing main thread executor in CheckpointCoordinator. After this, there would be non-IO operations executed in IO thread\n\n\nIntroduce main thread executor in CheckpointCoordinator\n\nIt's used to execute all non-IO operations instead of the timer thread now\nThe timer thread would be kept for now. It's only used to schedule the periodic triggering, because currently main thread executor does not support periodic scheduling yet.\n\n\nThe coordinator-wide lock of CheckpointCoordinator and lock of PendingCheckpoint could be avoided because there is no thread competition after introducing main thread executor\n\nVerifying this change\n\nThis change is already covered by existing tests, and some test cases are added at the same time\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-03-09T04:05:10Z", "url": "https://github.com/apache/flink/pull/11347", "merged": true, "mergeCommit": {"oid": "6936713b3b9b0caea8ce080d9b9d3de16a4db46f"}, "closed": true, "closedAt": "2020-03-23T12:05:57Z", "author": {"login": "ifndef-SleePy"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL4WSygBqjMxMDkzNjk3NTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQdI1ZAFqTM3OTM2NjY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5078d3b1229c6391cdfe2394538ef810e9e01d4", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/d5078d3b1229c6391cdfe2394538ef810e9e01d4", "committedDate": "2020-03-09T03:26:59Z", "message": "[FLINK-14971][checkpointing] Remove lock of PendingCheckpoint\n\nSince all non-IO operations are executed in main thread, the lock of\nPendingCheckpoint could be avoided now."}, "afterCommit": {"oid": "3bac3485e8fa916db3c1ec7dffcf5b80dbaef4de", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/3bac3485e8fa916db3c1ec7dffcf5b80dbaef4de", "committedDate": "2020-03-09T06:58:03Z", "message": "[FLINK-14971][checkpointing] Remove lock of PendingCheckpoint\n\nSince all non-IO operations are executed in main thread, the lock of\nPendingCheckpoint could be avoided now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTE1MTMw", "url": "https://github.com/apache/flink/pull/11347#pullrequestreview-371915130", "createdAt": "2020-03-10T12:42:55Z", "commit": {"oid": "74af716850ea4cf7d34cde033e90ab05e6210eba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo0Mjo1NVrOF0NHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo0Mjo1NVrOF0NHrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4NTIyOA==", "bodyText": "Shouldn't this commit:\n\n[hotfix] Fix broken DefaultSchedulerTest by satisfying the main thread requirement of CheckpointCoordinator\n\nbe squashed with the preceding one?", "url": "https://github.com/apache/flink/pull/11347#discussion_r390285228", "createdAt": "2020-03-10T12:42:55Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -588,8 +588,8 @@ private void startTriggeringCheckpoint(\n \t\t\tfinal CompletableFuture<?> coordinatorCheckpointsComplete = pendingCheckpointCompletableFuture\n \t\t\t\t\t.thenComposeAsync((pendingCheckpoint) ->\n \t\t\t\t\t\t\tOperatorCoordinatorCheckpoints.triggerAndAcknowledgeAllCoordinatorCheckpointsWithCompletion(\n-\t\t\t\t\t\t\t\t\tcoordinatorsToCheckpoint, pendingCheckpoint, timer),\n-\t\t\t\t\t\t\ttimer);\n+\t\t\t\t\t\t\t\t\tcoordinatorsToCheckpoint, pendingCheckpoint, mainThreadExecutor),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74af716850ea4cf7d34cde033e90ab05e6210eba"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjU5NjI5", "url": "https://github.com/apache/flink/pull/11347#pullrequestreview-372659629", "createdAt": "2020-03-11T11:03:30Z", "commit": {"oid": "cb87f61668e27f69dc3057691b1cfe997ce2e8d6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTowMzozMVrOF0yTVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMTowMzozMVrOF0yTVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5NDQyMg==", "bodyText": "I think we are missing some comments why is something being executed on the main thread or io thread executor. For example this chain in CheckpointCoordinator#completePendingCheckpoint:\n\nfinalizeCheckpoint goes first on io executor\nthen finalizeCheckpoint asynchronously goes back to the main thread\nthen completePendingCheckpoint goes again to io executor\nand finally completePendingCheckpoint goes back to main thread executor asynchronously\n\nFirst thing is those missing comments, why something is executed in one executor not the other one. Secondly, does it have to be this back and forth? Could we somehow simplify the code with simpler control flow main thread -> io thread -> main thread?", "url": "https://github.com/apache/flink/pull/11347#discussion_r390894422", "createdAt": "2020-03-11T11:03:31Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -1018,61 +1019,64 @@ else if (checkpoint != null) {\n \t * <p>Important: This method should only be called in the checkpoint lock scope.\n \t *\n \t * @param pendingCheckpoint to complete\n-\t * @throws CheckpointException if the completion failed\n \t */\n-\tprivate void completePendingCheckpoint(PendingCheckpoint pendingCheckpoint) throws CheckpointException {\n-\t\tfinal long checkpointId = pendingCheckpoint.getCheckpointId();\n-\t\tfinal CompletedCheckpoint completedCheckpoint;\n-\n+\tprivate void completePendingCheckpoint(PendingCheckpoint pendingCheckpoint) {\n \t\t// As a first step to complete the checkpoint, we register its state with the registry\n \t\tMap<OperatorID, OperatorState> operatorStates = pendingCheckpoint.getOperatorStates();\n \t\tsharedStateRegistry.registerAll(operatorStates.values());\n \n-\t\ttry {\n-\t\t\ttry {\n-\t\t\t\tcompletedCheckpoint = pendingCheckpoint.finalizeCheckpoint();\n-\t\t\t\tfailureManager.handleCheckpointSuccess(pendingCheckpoint.getCheckpointId());\n-\t\t\t}\n-\t\t\tcatch (Exception e1) {\n-\t\t\t\t// abort the current pending checkpoint if we fails to finalize the pending checkpoint.\n-\t\t\t\tif (!pendingCheckpoint.isDiscarded()) {\n-\t\t\t\t\tabortPendingCheckpoint(\n-\t\t\t\t\t\tpendingCheckpoint,\n-\t\t\t\t\t\tnew CheckpointException(\n-\t\t\t\t\t\t\tCheckpointFailureReason.FINALIZE_CHECKPOINT_FAILURE, e1));\n+\t\tfinal CompletableFuture<CompletedCheckpoint> completedCheckpointFuture = pendingCheckpoint.finalizeCheckpoint();\n+\t\tcompletedCheckpointFuture.thenApplyAsync((completedCheckpoint) -> {\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tif (shutdown) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\t// the pending checkpoint must be discarded after the finalization\n+\t\t\t\tPreconditions.checkState(pendingCheckpoint.isDiscarded() && completedCheckpoint != null);\n+\t\t\t\ttry {\n+\t\t\t\t\tcompletedCheckpointStore.addCheckpoint(completedCheckpoint);\n+\t\t\t\t\treturn completedCheckpoint;\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tcompletedCheckpoint.discardOnFailedStoring();\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tLOG.warn(\"Could not properly discard completed checkpoint {}.\", completedCheckpoint.getCheckpointID(), e);\n+\t\t\t\t\t}\n+\t\t\t\t\tthrow new CompletionException(t);\n \t\t\t\t}\n-\n-\t\t\t\tthrow new CheckpointException(\"Could not finalize the pending checkpoint \" + checkpointId + '.',\n-\t\t\t\t\tCheckpointFailureReason.FINALIZE_CHECKPOINT_FAILURE, e1);\n \t\t\t}\n-\n-\t\t\t// the pending checkpoint must be discarded after the finalization\n-\t\t\tPreconditions.checkState(pendingCheckpoint.isDiscarded() && completedCheckpoint != null);\n-\n-\t\t\ttry {\n-\t\t\t\tcompletedCheckpointStore.addCheckpoint(completedCheckpoint);\n-\t\t\t} catch (Exception exception) {\n-\t\t\t\t// we failed to store the completed checkpoint. Let's clean up\n-\t\t\t\texecutor.execute(new Runnable() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tcompletedCheckpoint.discardOnFailedStoring();\n-\t\t\t\t\t\t} catch (Throwable t) {\n-\t\t\t\t\t\t\tLOG.warn(\"Could not properly discard completed checkpoint {}.\", completedCheckpoint.getCheckpointID(), t);\n-\t\t\t\t\t\t}\n+\t\t}, executor)\n+\t\t.whenCompleteAsync((completedCheckpoint, throwable) -> {\n+\t\t\tsynchronized (lock) {\n+\t\t\t\tif (shutdown) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (throwable != null) {\n+\t\t\t\t\tif (!pendingCheckpoint.isDiscarded()) {\n+\t\t\t\t\t\tabortPendingCheckpoint(\n+\t\t\t\t\t\t\tpendingCheckpoint,\n+\t\t\t\t\t\t\tnew CheckpointException(\n+\t\t\t\t\t\t\t\tCheckpointFailureReason.FINALIZE_CHECKPOINT_FAILURE, throwable));\n \t\t\t\t\t}\n-\t\t\t\t});\n-\n-\t\t\t\tthrow new CheckpointException(\"Could not complete the pending checkpoint \" + checkpointId + '.',\n-\t\t\t\t\tCheckpointFailureReason.FINALIZE_CHECKPOINT_FAILURE, exception);\n+\t\t\t\t} else {\n+\t\t\t\t\tonCheckpointSuccess(completedCheckpoint);\n+\t\t\t\t}\n \t\t\t}\n-\t\t} finally {\n-\t\t\tpendingCheckpoints.remove(checkpointId);\n+\t\t}, timer);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb87f61668e27f69dc3057691b1cfe997ce2e8d6"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMzkxMzkx", "url": "https://github.com/apache/flink/pull/11347#pullrequestreview-373391391", "createdAt": "2020-03-12T09:25:42Z", "commit": {"oid": "a04e4412520adcc0f51cb9ce2b53c8ea70798bcc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOToyNTo0MlrOF1Wyig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwOToyOTozNlrOF1W62w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5MjIzNA==", "bodyText": "If we are synchronizing all of the access to the completedCheckpointStore externally, wouldn't it be better to make CompletedCheckpointStore @ThreadSafe and synchronise it inside?", "url": "https://github.com/apache/flink/pull/11347#discussion_r391492234", "createdAt": "2020-03-12T09:25:42Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -403,7 +403,10 @@ public void shutdown(JobStatus jobStatus) throws Exception {\n \t\t\t// clear queued requests and in-flight checkpoints\n \t\t\tabortPendingAndQueuedCheckpoints(reason);\n \n-\t\t\tcompletedCheckpointStore.shutdown(jobStatus);\n+\t\t\t// there might be a race condition with IO threads on completedCheckpointStore\n+\t\t\tsynchronized (completedCheckpointStore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04e4412520adcc0f51cb9ce2b53c8ea70798bcc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5MzI0Nw==", "bodyText": "The race condition is between io threads and just the shut down? And previously was it working becase CompletedCheckpointStore access were synchronized on the checkopint coordinator's lock?", "url": "https://github.com/apache/flink/pull/11347#discussion_r391493247", "createdAt": "2020-03-12T09:27:28Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -403,7 +403,10 @@ public void shutdown(JobStatus jobStatus) throws Exception {\n \t\t\t// clear queued requests and in-flight checkpoints\n \t\t\tabortPendingAndQueuedCheckpoints(reason);\n \n-\t\t\tcompletedCheckpointStore.shutdown(jobStatus);\n+\t\t\t// there might be a race condition with IO threads on completedCheckpointStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04e4412520adcc0f51cb9ce2b53c8ea70798bcc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5NDM2Mw==", "bodyText": "could there be some side effects on changing order of the operations? Now those lines are executed before inalizedLocationFuture.thenApplyAsync((completed) ... on L343.\nWhat would happen if there is some exception etc?", "url": "https://github.com/apache/flink/pull/11347#discussion_r391494363", "createdAt": "2020-03-12T09:29:36Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -311,25 +315,32 @@ public CheckpointException getFailureCause() {\n \t\t\t\ttry (CheckpointMetadataOutputStream out = targetLocation.createMetadataOutputStream()) {\n \t\t\t\t\tCheckpoints.storeCheckpointMetadata(savepoint, out);\n \t\t\t\t\tfinalizedLocation = out.closeAndFinalizeCheckpoint();\n+\t\t\t\t}\n \n+\t\t\t\tCompletedCheckpoint completed = new CompletedCheckpoint(\n+\t\t\t\t\tjobId,\n+\t\t\t\t\tcheckpointId,\n+\t\t\t\t\tcheckpointTimestamp,\n+\t\t\t\t\tSystem.currentTimeMillis(),\n+\t\t\t\t\toperatorStates,\n+\t\t\t\t\tmasterStates,\n+\t\t\t\t\tprops,\n+\t\t\t\t\tfinalizedLocation);\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tcompletedCheckpointStore.addCheckpoint(completed);\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\tcompleted.discardOnFailedStoring();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12ad91e65dd889754a29efc459cf6beb49f68fbd"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "213f99ca0dff5c0008d4de87bb9e220490b4ccb6", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/213f99ca0dff5c0008d4de87bb9e220490b4ccb6", "committedDate": "2020-03-16T06:10:10Z", "message": "[hotfix] Address review comments. Make CompletedCheckpointStore thread-safe to avoid synchronization outside"}, "afterCommit": {"oid": "cf8adb3d042bb89172fb45b68b6448713b4045ae", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/cf8adb3d042bb89172fb45b68b6448713b4045ae", "committedDate": "2020-03-16T06:25:10Z", "message": "[hotfix] Address review comments. Make CompletedCheckpointStore thread-safe to avoid synchronization outside"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf8adb3d042bb89172fb45b68b6448713b4045ae", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/cf8adb3d042bb89172fb45b68b6448713b4045ae", "committedDate": "2020-03-16T06:25:10Z", "message": "[hotfix] Address review comments. Make CompletedCheckpointStore thread-safe to avoid synchronization outside"}, "afterCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/655adff5f2d9298b34b167b5a355f4b536613246", "committedDate": "2020-03-16T19:09:56Z", "message": "[hotfix] Handle the concurrent IO operations when finalizing checkpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NjY1MjQ3", "url": "https://github.com/apache/flink/pull/11347#pullrequestreview-377665247", "createdAt": "2020-03-19T12:18:44Z", "commit": {"oid": "5df0ac43a3fe9ee17620ff6ab07b967e2ba7a16f"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjoxODo0NFrOF4r5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzoyMzo1OVrOF4uKgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4MzgzNQ==", "bodyText": "@ThreadSafe\n\non the interface?", "url": "https://github.com/apache/flink/pull/11347#discussion_r394983835", "createdAt": "2020-03-19T12:18:44Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CompletedCheckpointStore.java", "diffHunk": "@@ -28,6 +28,7 @@\n \n /**\n  * A bounded LIFO-queue of {@link CompletedCheckpoint} instances.\n+ * Note that it might be visited by multiple threads. So implementation should keep it thread-safe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5df0ac43a3fe9ee17620ff6ab07b967e2ba7a16f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMDQ2NA==", "bodyText": "nit: checkState()?", "url": "https://github.com/apache/flink/pull/11347#discussion_r395000464", "createdAt": "2020-03-19T12:49:23Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -304,35 +307,44 @@ public CheckpointException getFailureCause() {\n \t\t\t\t\"Pending checkpoint has not been fully acknowledged yet\"));\n \t\t}\n \n+\t\t// now we stop the canceller before finalization\n+\t\t// it simplifies the concurrent conflict issue here\n+\t\tcancelCanceller();\n+\n \t\t// make sure we fulfill the promise with an exception if something fails\n \t\tfinal CompletableFuture<CompletedCheckpoint> finalizedLocationFuture =\n \t\t\tCompletableFuture.supplyAsync(() -> {\n \t\t\ttry {\n-\t\t\t\t// write out the metadata\n-\t\t\t\tfinal CheckpointMetadata savepoint = new CheckpointMetadata(checkpointId, operatorStates.values(), masterStates);\n-\t\t\t\tfinal CompletedCheckpointStorageLocation finalizedLocation;\n+\t\t\t\tsynchronized (operationLock) {\n+\t\t\t\t\tif (isDiscarded()) {\n+\t\t\t\t\t\tthrow new IllegalStateException(\"The checkpoint has been discarded\");\n+\t\t\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwNDU3NA==", "bodyText": "This is reverting a lock here. The issue is that we were able to make CheckpointCoordinator code that's executed in the mainThreadExecutor lock free, as mainThreadExecutor is single threaded. But we still need lock for IO operations executed in the io executor?", "url": "https://github.com/apache/flink/pull/11347#discussion_r395004574", "createdAt": "2020-03-19T12:56:58Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -111,6 +108,14 @@\n \t/** The executor for potentially blocking I/O operations, like state disposal. */\n \tprivate final Executor executor;\n \n+\t/** The executor for non-blocking operations. */\n+\tprivate final Executor mainThreadExecutor;\n+\n+\tprivate final CompletedCheckpointStore completedCheckpointStore;\n+\n+\t/** The lock for avoiding conflict between I/O operations. */\n+\tprivate final Object operationLock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMDcyOA==", "bodyText": "checkState?", "url": "https://github.com/apache/flink/pull/11347#discussion_r395010728", "createdAt": "2020-03-19T13:07:29Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -342,6 +354,12 @@ public CheckpointException getFailureCause() {\n \n \t\treturn finalizedLocationFuture.thenApplyAsync((completed) -> {\n \n+\t\t\tif (isDiscarded()) {\n+\t\t\t\t// since canceller has been already cancelled, the coordinator must be shut down\n+\t\t\t\t// all the resources should be released properly when it's shutting down the coordinator\n+\t\t\t\tthrow new IllegalStateException(\"The checkpoint has been discarded\");\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxMjY0MA==", "bodyText": "nit: some comments like L173 and L176 I think need to be updated, as there is no \"synchronized\" scope anymore but just single threaded?", "url": "https://github.com/apache/flink/pull/11347#discussion_r395012640", "createdAt": "2020-03-19T13:10:45Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -91,9 +92,6 @@\n \n \t// ------------------------------------------------------------------------\n \n-\t/** Coordinator-wide lock to safeguard the checkpoint updates. */\n-\tprivate final Object lock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAxNzE4Mg==", "bodyText": "It's not nice that this is not a final field, but I guess this would need large scope of changes, as there is the same issue in ExecutionGraph.\nHowever, why does it have to be @Nullable? ExecutionGraph#jobMasterMainThreadExecutor uses interesting trick with DummyComponentMainThreadExecutor. I'm not sure if doing instanceof checks is better or not, but maybe for the sake of consistency we should do the same here?", "url": "https://github.com/apache/flink/pull/11347#discussion_r395017182", "createdAt": "2020-03-19T13:18:08Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -151,6 +149,9 @@\n \t * It must be single-threaded. Eventually it will be replaced by main thread executor. */\n \tprivate final ScheduledExecutor timer;\n \n+\t@Nullable\n+\tprivate ComponentMainThreadExecutor mainThreadExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyMDkyOQ==", "bodyText": "I assume that one (or both) of the tests that you have added in the last commit were failing before fixing the issue?", "url": "https://github.com/apache/flink/pull/11347#discussion_r395020929", "createdAt": "2020-03-19T13:23:59Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -311,25 +315,32 @@ public CheckpointException getFailureCause() {\n \t\t\t\ttry (CheckpointMetadataOutputStream out = targetLocation.createMetadataOutputStream()) {\n \t\t\t\t\tCheckpoints.storeCheckpointMetadata(savepoint, out);\n \t\t\t\t\tfinalizedLocation = out.closeAndFinalizeCheckpoint();\n+\t\t\t\t}\n \n+\t\t\t\tCompletedCheckpoint completed = new CompletedCheckpoint(\n+\t\t\t\t\tjobId,\n+\t\t\t\t\tcheckpointId,\n+\t\t\t\t\tcheckpointTimestamp,\n+\t\t\t\t\tSystem.currentTimeMillis(),\n+\t\t\t\t\toperatorStates,\n+\t\t\t\t\tmasterStates,\n+\t\t\t\t\tprops,\n+\t\t\t\t\tfinalizedLocation);\n+\n+\t\t\t\ttry {\n+\t\t\t\t\tcompletedCheckpointStore.addCheckpoint(completed);\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\tcompleted.discardOnFailedStoring();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQ5NDM2Mw=="}, "originalCommit": {"oid": "12ad91e65dd889754a29efc459cf6beb49f68fbd"}, "originalPosition": 55}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "655adff5f2d9298b34b167b5a355f4b536613246", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/655adff5f2d9298b34b167b5a355f4b536613246", "committedDate": "2020-03-16T19:09:56Z", "message": "[hotfix] Handle the concurrent IO operations when finalizing checkpoint"}, "afterCommit": {"oid": "9f59db6be464318410e6ce165cb599233980b534", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/9f59db6be464318410e6ce165cb599233980b534", "committedDate": "2020-03-23T09:11:38Z", "message": "[FLINK-14971][checkpointing] Remove lock of PendingCheckpoint and introduce IO lock for PendingCheckpoint\n\nSince all non-IO operations are executed in main thread, the lock of\nPendingCheckpoint could be avoided now."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9315f13bc6ee115572e95281074b60cb8a173f54", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/9315f13bc6ee115572e95281074b60cb8a173f54", "committedDate": "2020-03-23T09:31:28Z", "message": "[FLINK-14971][checkpointing] Handle ack/declined message of checkpoint\nin timer thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c859427bde1f1a7ec49626411842a61ccd976f79", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/c859427bde1f1a7ec49626411842a61ccd976f79", "committedDate": "2020-03-23T09:31:28Z", "message": "[FLINK-14971][checkpointing] Introduce main thread executor in CheckpointCoordinator to execute all non-IO operations instead of the timer thread"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "497950ca0ce1dffc0195a770d4f8f4af6505ab23", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/497950ca0ce1dffc0195a770d4f8f4af6505ab23", "committedDate": "2020-03-23T09:31:28Z", "message": "[hotfix] Harden ResumeCheckpointManuallyITCase\n\nThe way of detecting external checkpoint is done or not is not strict.\nThe finalization of checkpoint might be interrupted by the cancallation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "613934743add149140375d53509a941dec86d10a", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/613934743add149140375d53509a941dec86d10a", "committedDate": "2020-03-23T09:31:28Z", "message": "[FLINK-14971][checkpointing] Make CompletedCheckpointStore thread-safe to avoid synchronization outside"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6658babf12c6111ce12ac9a174c12b52234af95a", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/6658babf12c6111ce12ac9a174c12b52234af95a", "committedDate": "2020-03-23T09:31:28Z", "message": "[FLINK-14971][checkpointing] Remove coordinator-wide lock of CheckpointCoordinator\n\nSince all non-IO operations are executed in main thread, the\ncoordinator-wide lock could be avoided now."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48d0125ddfda31c4d4c9aede97af4e3c818a3d9", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/c48d0125ddfda31c4d4c9aede97af4e3c818a3d9", "committedDate": "2020-03-23T09:31:28Z", "message": "[FLINK-14971][checkpointing] Remove lock of PendingCheckpoint and introduce IO lock for PendingCheckpoint\n\nSince all non-IO operations are executed in main thread, the lock of\nPendingCheckpoint could be avoided now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f59db6be464318410e6ce165cb599233980b534", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/9f59db6be464318410e6ce165cb599233980b534", "committedDate": "2020-03-23T09:11:38Z", "message": "[FLINK-14971][checkpointing] Remove lock of PendingCheckpoint and introduce IO lock for PendingCheckpoint\n\nSince all non-IO operations are executed in main thread, the lock of\nPendingCheckpoint could be avoided now."}, "afterCommit": {"oid": "c48d0125ddfda31c4d4c9aede97af4e3c818a3d9", "author": {"user": {"login": "ifndef-SleePy", "name": "Biao Liu"}}, "url": "https://github.com/apache/flink/commit/c48d0125ddfda31c4d4c9aede97af4e3c818a3d9", "committedDate": "2020-03-23T09:31:28Z", "message": "[FLINK-14971][checkpointing] Remove lock of PendingCheckpoint and introduce IO lock for PendingCheckpoint\n\nSince all non-IO operations are executed in main thread, the lock of\nPendingCheckpoint could be avoided now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzY2NjY0", "url": "https://github.com/apache/flink/pull/11347#pullrequestreview-379366664", "createdAt": "2020-03-23T12:05:46Z", "commit": {"oid": "c48d0125ddfda31c4d4c9aede97af4e3c818a3d9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3157, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}