{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTgxNzMy", "number": 12037, "title": "[FLINK-14807][runtime][client] Introduce communication through REST API between the clients and the operator coordinators", "bodyText": "What is the purpose of the change\nThis PR is part of the FLINK-14807 which is going to introduce a collecting method for tables. See here for the whole design document.\nTo allow the clients to receive results from the coordinator, which acts as a proxy between the clients and the sinks, a communication protocol should be introduced between the clients and the coordinators. This PR introduce this new communication protocol through the REST API.\nNote that as coordinators are internally used only, we're not going to expose this REST API to the user, thus no user document is provided.\nBrief change log\n\nIntroduce a REST API to allow the communication between clients and coordinators.\n\nVerifying this change\nThe changes can be verified by running the added unit tests.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: yes (JobManager)\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? yes\nIf yes, how is the feature documented? not documented", "createdAt": "2020-05-08T11:12:27Z", "url": "https://github.com/apache/flink/pull/12037", "merged": true, "mergeCommit": {"oid": "9fe920fdc6f7eeaf2d99901099c842cfd0f1380a"}, "closed": true, "closedAt": "2020-05-14T23:46:32Z", "author": {"login": "tsreaper"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgGz57gFqTQwODgyODM2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchOY3kgH2gAyNDE1MTgxNzMyOmQ1MTViMzIxMDBhODkxMmUyYzM1ZThkZTEzMTBmYzYwYWQyYWEyYzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODI4MzY5", "url": "https://github.com/apache/flink/pull/12037#pullrequestreview-408828369", "createdAt": "2020-05-11T02:45:24Z", "commit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0NToyNFrOGTKrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowNjozM1rOGTK8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTAzMQ==", "bodyText": "add a test for scenario: \"operator id not found\"", "url": "https://github.com/apache/flink/pull/12037#discussion_r422751031", "createdAt": "2020-05-11T02:45:24Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +163,36 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationResponser.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationResponser.Request<String> request =\n+\t\t\tnew TestingCoordinationResponser.Request<>(payload);\n+\t\tfinal TestingCoordinationResponser.Response<String> response =\n+\t\t\t(TestingCoordinationResponser.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationResponser.Request<String> request =\n+\t\t\tnew TestingCoordinationResponser.Request<>(payload);\n+\t\tfinal CompletableFuture<CoordinationResponse> future =\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\n+\t\tassertThat(future, futureFailedWith(IllegalArgumentException.class));\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTY4OQ==", "bodyText": "I think we should throw FlinkException, this situation is the same as the operation does not exist", "url": "https://github.com/apache/flink/pull/12037#discussion_r422751689", "createdAt": "2020-05-11T02:48:44Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "diffHunk": "@@ -933,6 +941,22 @@ public void deliverOperatorEventToCoordinator(\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(\n+\t\t\tOperatorID operator,\n+\t\t\tCoordinationRequest request) throws FlinkException {\n+\t\tOperatorCoordinator coordinator = coordinatorMap.get(operator);\n+\t\tif (coordinator instanceof CoordinationResponser) {\n+\t\t\treturn CompletableFuture.completedFuture(\n+\t\t\t\t((CoordinationResponser) coordinator).handleCoordinationRequest(request));\n+\t\t} else if (coordinator != null) {\n+\t\t\treturn FutureUtils.completedExceptionally(\n+\t\t\t\tnew IllegalArgumentException(\"Coordinator of operator \" + operator + \" cannot handle client event\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MjkyOA==", "bodyText": "throw CompletionException like getAccumulators method", "url": "https://github.com/apache/flink/pull/12037#discussion_r422752928", "createdAt": "2020-05-11T02:54:47Z", "author": {"login": "godfreyhe"}, "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "diffHunk": "@@ -411,6 +418,36 @@ public void close() {\n \t\treturn triggerSavepoint(jobId, savepointDirectory, false);\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<CoordinationResponse> sendCoordinationRequest(\n+\t\t\tJobID jobId,\n+\t\t\tOperatorID operatorId,\n+\t\t\tCoordinationRequest request) {\n+\t\tClientCoordinationHeaders headers = ClientCoordinationHeaders.getInstance();\n+\t\tClientCoordinationMessageParameters params = new ClientCoordinationMessageParameters();\n+\t\tparams.jobPathParameter.resolve(jobId);\n+\t\tparams.operatorPathParameter.resolve(operatorId);\n+\n+\t\tSerializedValue<CoordinationRequest> serializedRequest;\n+\t\ttry {\n+\t\t\tserializedRequest = new SerializedValue<>(request);\n+\t\t} catch (IOException e) {\n+\t\t\treturn FutureUtils.completedExceptionally(e);\n+\t\t}\n+\n+\t\tClientCoordinationRequestBody requestBody = new ClientCoordinationRequestBody(serializedRequest);\n+\t\treturn sendRequest(headers, params, requestBody).thenApply(\n+\t\t\tresponseBody -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn responseBody\n+\t\t\t\t\t\t.getSerializedCoordinationResponse()\n+\t\t\t\t\t\t.deserializeValue(getClass().getClassLoader());\n+\t\t\t\t} catch (IOException | ClassNotFoundException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to deserialize coordination response\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDQwMw==", "bodyText": "rename to CoordinationHandler ? similar to OperatorEventHandler", "url": "https://github.com/apache/flink/pull/12037#discussion_r422754403", "createdAt": "2020-05-11T03:01:54Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationResponser.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+/**\n+ * Coordinator interface which can handle {@link CoordinationRequest}s\n+ * and response with {@link CoordinationResponse}s to the client.\n+ */\n+public interface CoordinationResponser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTQxMw==", "bodyText": "rename to CoordinationRequestGateway? similar to OperatorEventGateway", "url": "https://github.com/apache/flink/pull/12037#discussion_r422755413", "createdAt": "2020-05-11T03:06:33Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequester.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NjgzMzI2", "url": "https://github.com/apache/flink/pull/12037#pullrequestreview-409683326", "createdAt": "2020-05-12T04:04:29Z", "commit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowNDoyOVrOGT1Rog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxODozNVrOGT1enQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODk5NA==", "bodyText": "I'm not sure this interface is necessary, it seems we can add the method to JobClient. You can see almost each time when a class implements JobClient, it will also implement this interface", "url": "https://github.com/apache/flink/pull/12037#discussion_r423448994", "createdAt": "2020-05-12T04:04:29Z", "author": {"login": "KurtYoung"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequestGateway.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequestGateway {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw==", "bodyText": "throw RestHandlerException instead? Will the RuntimeException crash the rest server?", "url": "https://github.com/apache/flink/pull/12037#discussion_r423452317", "createdAt": "2020-05-12T04:18:35Z", "author": {"login": "KurtYoung"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to construct response body\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTU3OTI2", "url": "https://github.com/apache/flink/pull/12037#pullrequestreview-410557926", "createdAt": "2020-05-13T03:09:34Z", "commit": {"oid": "77942bf5fcfee886d9dfd16633c41be3ca8d0f7d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowOTozNFrOGUf86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowOTozNFrOGUf86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODIwMw==", "bodyText": "I think this should add to JobMasterOperatorEventGateway", "url": "https://github.com/apache/flink/pull/12037#discussion_r424148203", "createdAt": "2020-05-13T03:09:34Z", "author": {"login": "KurtYoung"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterGateway.java", "diffHunk": "@@ -271,4 +275,19 @@ void heartbeatFromTaskManager(\n \t * @return The updated aggregate\n \t */\n \tCompletableFuture<Object> updateGlobalAggregate(String aggregateName, Object aggregand, byte[] serializedAggregationFunction);\n+\n+\t/**\n+\t * Deliver a coordination request to a specified coordinator and return the response.\n+\t *\n+\t * @param operatorId identifying the coordinator to receive the request\n+\t * @param serializedRequest serialized request to deliver\n+\t * @return A future containing the response.\n+\t *         The response will fail with a {@link org.apache.flink.util.FlinkException}\n+\t *         if the task is not running, or no operator/coordinator exists for the given ID,\n+\t *         or the coordinator cannot handle client events.\n+\t */\n+\tCompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77942bf5fcfee886d9dfd16633c41be3ca8d0f7d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDQ1MzUz", "url": "https://github.com/apache/flink/pull/12037#pullrequestreview-411045353", "createdAt": "2020-05-13T15:30:29Z", "commit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozMDoyOVrOGU3S_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1OTo0OFrOGU_byw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw==", "bodyText": "Why are we wrapping coordinationResponse into a SerializedValue here? If it is in order to support user code classes, then it should not work because ClientCoordinationHandler should not have access to the user code class loader.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424530687", "createdAt": "2020-05-13T15:30:29Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDY1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testDeliveringClientRequestToResponser() throws Exception {\n          \n          \n            \n            \tpublic void testDeliveringClientRequestToResponder() throws Exception {", "url": "https://github.com/apache/flink/pull/12037#discussion_r424534657", "createdAt": "2020-05-13T15:35:55Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDkwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n          \n          \n            \n            \tpublic void testDeliveringClientRequestToNonResponder() throws Exception {", "url": "https://github.com/apache/flink/pull/12037#discussion_r424534900", "createdAt": "2020-05-13T15:36:18Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTYzOA==", "bodyText": "I think we could use CommonTestUtils.assertThrows here.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424661638", "createdAt": "2020-05-13T18:55:33Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"cannot handle client event\"));\n+\t\t\tthrow e;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTkwNw==", "bodyText": "same here with CommonTestUtils.assertThrows", "url": "https://github.com/apache/flink/pull/12037#discussion_r424661907", "createdAt": "2020-05-13T18:56:00Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"cannot handle client event\"));\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonExistingCoordinator() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(new OperatorID(), request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"does not exist\"));\n+\t\t\tthrow e;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDAxMQ==", "bodyText": "The wrapping would have to happen on a component which has access to the user code classes.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424664011", "createdAt": "2020-05-13T18:59:48Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMjMyNDgy", "url": "https://github.com/apache/flink/pull/12037#pullrequestreview-411232482", "createdAt": "2020-05-13T19:26:44Z", "commit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNjczODI2", "url": "https://github.com/apache/flink/pull/12037#pullrequestreview-411673826", "createdAt": "2020-05-14T10:31:11Z", "commit": {"oid": "ba87f55e1d19fbf84eec52d084736694497e9307"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18e3fa4a769f1ee25d0534e9feb498f9807237c4", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/18e3fa4a769f1ee25d0534e9feb498f9807237c4", "committedDate": "2020-05-14T14:29:17Z", "message": "[FLINK-14807][runtime][client] Introduce communication through REST API between the clients and the operator coordinators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e0dcdb8df8f4063a3573caaa5dab4f38e7b5513", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/4e0dcdb8df8f4063a3573caaa5dab4f38e7b5513", "committedDate": "2020-05-14T14:29:17Z", "message": "[fix] Update REST API test resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f8b362521f157e51fb41b7c9ce237855f929fca", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/2f8b362521f157e51fb41b7c9ce237855f929fca", "committedDate": "2020-05-14T14:29:17Z", "message": "[fix] Fix godfrey's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d381e1dc367e48c22d9b0d655a4358d35d6c8c67", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/d381e1dc367e48c22d9b0d655a4358d35d6c8c67", "committedDate": "2020-05-14T14:29:17Z", "message": "[fix] Fix type of exception thrown in REST handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fd031d7d14477b9c125481d01c474454954841c", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/2fd031d7d14477b9c125481d01c474454954841c", "committedDate": "2020-05-14T14:29:17Z", "message": "[fix] Change return type of CoordinationRequestHandler to CompletableFuture in case of costly handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716647013d7b2d3f4a07ed4a56cdce564f477dc8", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/716647013d7b2d3f4a07ed4a56cdce564f477dc8", "committedDate": "2020-05-14T14:29:17Z", "message": "[fix] Fix unit test naming and assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d515b32100a8912e2c35e8de1310fc60ad2aa2c9", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/d515b32100a8912e2c35e8de1310fc60ad2aa2c9", "committedDate": "2020-05-14T14:31:25Z", "message": "[fix] Mark ClientCoordinationHeaders with @ExcludeFromDocumentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4191, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}