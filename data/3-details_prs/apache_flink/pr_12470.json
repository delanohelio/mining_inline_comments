{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MzEzMjc4", "number": 12470, "title": "[FLINK-18074][checkpoint] Ensure task could fail when exception thrown out on notified of checkpoint completed/aborted", "bodyText": "What is the purpose of the change\nEnsure task could fail when exception thrown out on notified of checkpoint completed/aborted and added test to ensure this.\nBrief change log\nCorrect the logic of exception handling of StreamTask#notifyCheckpointCompleteAsync and StreamTask#notifyCheckpointAbortAsync.\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded unit test StreamTaskTest#testFailToConfirmCheckpointCompleted\nAdded unit test StreamTaskTest#testFailToConfirmCheckpointAborted\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-06-03T16:15:42Z", "url": "https://github.com/apache/flink/pull/12470", "merged": true, "mergeCommit": {"oid": "e27c517fb94b6ed9b1b70f0f3874aa317bb089fc"}, "closed": true, "closedAt": "2020-06-05T05:05:59Z", "author": {"login": "Myasuka"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnrfxagH2gAyNDI3MzEzMjc4OjY3Y2JhYTU2OGMwZGYxOWY4Mzk0M2VkNDBhZDk4ODQwZTQ1ODRmOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoA_kMgFqTQyNDY0MzI5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67cbaa568c0df19f83943ed40ad98840e4584f9d", "author": {"user": {"login": "Myasuka", "name": "Yun Tang"}}, "url": "https://github.com/apache/flink/commit/67cbaa568c0df19f83943ed40ad98840e4584f9d", "committedDate": "2020-06-03T15:49:45Z", "message": "[FLINK-18074][checkpoint] Ensure task could fail when exception thrown out on notified of checkpoint completed/aborted"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjQzMjk3", "url": "https://github.com/apache/flink/pull/12470#pullrequestreview-424643297", "createdAt": "2020-06-04T16:50:45Z", "commit": {"oid": "67cbaa568c0df19f83943ed40ad98840e4584f9d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MDo0NlrOGfO-Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNjo1MjowMVrOGfPBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNDMwMw==", "bodyText": "Could you re-use this method in org.apache.flink.streaming.runtime.tasks.StreamTask#triggerCheckpointAsync?\nHowever I see there is a difference in the used mailbox executor (different priority), so if this would cause too much extra complexity I'm fine with leaving it as it is.", "url": "https://github.com/apache/flink/pull/12470#discussion_r435404303", "createdAt": "2020-06-04T16:50:46Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -919,9 +920,33 @@ public final ExecutorService getAsyncOperationsThreadPool() {\n \n \t@Override\n \tpublic Future<Void> notifyCheckpointCompleteAsync(long checkpointId) {\n-\t\treturn mailboxProcessor.getMailboxExecutor(TaskMailbox.MAX_PRIORITY).submit(\n-\t\t\t\t() -> notifyCheckpointComplete(checkpointId),\n-\t\t\t\t\"checkpoint %d complete\", checkpointId);\n+\t\treturn notifyCheckpointOperation(\n+\t\t\t() -> notifyCheckpointComplete(checkpointId),\n+\t\t\tString.format(\"checkpoint %d complete\", checkpointId));\n+\t}\n+\n+\t@Override\n+\tpublic Future<Void> notifyCheckpointAbortAsync(long checkpointId) {\n+\t\treturn notifyCheckpointOperation(\n+\t\t\t() -> subtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, this::isRunning),\n+\t\t\tString.format(\"checkpoint %d aborted\", checkpointId));\n+\t}\n+\n+\tprivate Future<Void> notifyCheckpointOperation(RunnableWithException runnable, String description) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67cbaa568c0df19f83943ed40ad98840e4584f9d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQwNTEwMA==", "bodyText": "I presume that this test was failing on master branch (without your fix)?", "url": "https://github.com/apache/flink/pull/12470#discussion_r435405100", "createdAt": "2020-06-04T16:52:01Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTest.java", "diffHunk": "@@ -969,6 +970,34 @@ public void testNotifyCheckpointOnClosedOperator() throws Throwable {\n \t\tassertEquals(true, operator.closed.get());\n \t}\n \n+\t@Test\n+\tpublic void testFailToConfirmCheckpointCompleted() throws Exception {\n+\t\ttestFailToConfirmCheckpointMessage(streamTask -> streamTask.notifyCheckpointCompleteAsync(1L));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailToConfirmCheckpointAborted() throws Exception {\n+\t\ttestFailToConfirmCheckpointMessage(streamTask -> streamTask.notifyCheckpointAbortAsync(1L));\n+\t}\n+\n+\tprivate void testFailToConfirmCheckpointMessage(Consumer<StreamTask<?, ?>> consumer) throws Exception {\n+\t\tFailOnNotifyCheckpointOperator<Integer> operator = new FailOnNotifyCheckpointOperator<>();\n+\t\tMultipleInputStreamTaskTestHarnessBuilder<Integer> builder =\n+\t\t\tnew MultipleInputStreamTaskTestHarnessBuilder<>(OneInputStreamTask::new, BasicTypeInfo.INT_TYPE_INFO)\n+\t\t\t\t.addInput(BasicTypeInfo.INT_TYPE_INFO);\n+\t\tStreamTaskMailboxTestHarness<Integer> harness = builder\n+\t\t\t.setupOutputForSingletonOperatorChain(operator)\n+\t\t\t.build();\n+\n+\t\ttry {\n+\t\t\tconsumer.accept(harness.streamTask);\n+\t\t\tharness.streamTask.runMailboxStep();\n+\t\t\tfail();\n+\t\t} catch (ExpectedTestException expected) {\n+\t\t\t// expected exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67cbaa568c0df19f83943ed40ad98840e4584f9d"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4266, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}