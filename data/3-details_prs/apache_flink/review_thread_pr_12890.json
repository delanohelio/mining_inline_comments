{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NjA5MzE0", "number": 12890, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo1NzoxMVrOEOFLiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo1NzoxMVrOEOFLiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjAwMzkzOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkITCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo1NzoxMVrOGxCJnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwMjo1NzoxMVrOGxCJnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA2ODYzNw==", "bodyText": "Could you update the corresponding test in Elasticsearch7DynamicSinkITCase?", "url": "https://github.com/apache/flink/pull/12890#discussion_r454068637", "createdAt": "2020-07-14T02:57:11Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkITCase.java", "diffHunk": "@@ -226,25 +235,38 @@ public void testWritingDocumentsNoPrimaryKey() throws Exception {\n \t\t\t\t.execute()\n \t\t\t\t.actionGet()\n \t\t\t\t.getHits();\n-\t\t\tif (hits.getTotalHits() < 1) {\n+\t\t\tif (hits.getTotalHits() < 2) {\n \t\t\t\tThread.sleep(200);\n \t\t\t}\n-\t\t} while (hits.getTotalHits() < 1 && deadline.hasTimeLeft());\n+\t\t} while (hits.getTotalHits() < 2 && deadline.hasTimeLeft());\n \n-\t\tif (hits.getTotalHits() < 1) {\n+\t\tif (hits.getTotalHits() < 2) {\n \t\t\tthrow new AssertionError(\"Could not retrieve results from Elasticsearch.\");\n \t\t}\n \n-\t\tMap<String, Object> result = hits.getAt(0).getSourceAsMap();\n-\t\tMap<Object, Object> expectedMap = new HashMap<>();\n-\t\texpectedMap.put(\"a\", 1);\n-\t\texpectedMap.put(\"b\", \"00:00:12\");\n-\t\texpectedMap.put(\"c\", \"ABCDE\");\n-\t\texpectedMap.put(\"d\", 12.12d);\n-\t\texpectedMap.put(\"e\", 2);\n-\t\texpectedMap.put(\"f\", \"2003-10-20\");\n-\t\texpectedMap.put(\"g\", \"2012-12-12 12:12:12\");\n-\t\tassertThat(result, equalTo(expectedMap));\n+\t\tHashSet<Map<String, Object>> resultSet = new HashSet<>();\n+\t\tresultSet.add(hits.getAt(0).getSourceAsMap());\n+\t\tresultSet.add(hits.getAt(1).getSourceAsMap());\n+\t\tMap<Object, Object> expectedMap1 = new HashMap<>();\n+\t\texpectedMap1.put(\"a\", 1);\n+\t\texpectedMap1.put(\"b\", \"00:00:12\");\n+\t\texpectedMap1.put(\"c\", \"ABCDE\");\n+\t\texpectedMap1.put(\"d\", 12.12d);\n+\t\texpectedMap1.put(\"e\", 2);\n+\t\texpectedMap1.put(\"f\", \"2003-10-20\");\n+\t\texpectedMap1.put(\"g\", \"2012-12-12 12:12:12\");\n+\t\tMap<Object, Object> expectedMap2 = new HashMap<>();\n+\t\texpectedMap2.put(\"a\", 2);\n+\t\texpectedMap2.put(\"b\", \"00:00:12\");\n+\t\texpectedMap2.put(\"c\", \"FGHIJK\");\n+\t\texpectedMap2.put(\"d\", 13.13d);\n+\t\texpectedMap2.put(\"e\", 4);\n+\t\texpectedMap2.put(\"f\", \"2003-10-20\");\n+\t\texpectedMap2.put(\"g\", \"2013-12-12 13:13:13\");\n+\t\tHashSet<Map<Object, Object>> expectedSet = new HashSet<>();\n+\t\texpectedSet.add(expectedMap1);\n+\t\texpectedSet.add(expectedMap2);\n+\t\tassertThat(resultSet, equalTo(expectedSet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c78063017af43d2d8bbc8c6655c391d5a841b5"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4196, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}