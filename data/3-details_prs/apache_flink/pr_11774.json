{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MjYyMjgw", "number": 11774, "title": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation", "bodyText": "What is the purpose of the change\nGlobalDataExchangeMode helps for finer tuning the job edge data exchange mode.\nMore details see FLIP-119#Global Data Exchange Mode\nBrief change log\n\nIntroduce GlobalDataExchangeMode\nReplace StreamGraph#blockingConnectionsBetweenChains with GlobalDataExchangeMode\nUse StreamGraph#globalDataExchangeMode to determine undefined job edge shuffle modes\n\nVerifying this change\n\nAdded unit tests in StreamingJobGraphGeneratorTest\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-04-16T10:22:49Z", "url": "https://github.com/apache/flink/pull/11774", "merged": true, "mergeCommit": {"oid": "ef4daeba7881cecc1548e387ab68d829f998dc67"}, "closed": true, "closedAt": "2020-04-24T07:08:52Z", "author": {"login": "zhuzhurk"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZrY5XABqjMyNTQ0MTExMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcarUV5gFqTM5OTY2NjQ2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fe605210a2a1331d1ecf85c952ad2d5bd5fe8ea", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/1fe605210a2a1331d1ecf85c952ad2d5bd5fe8ea", "committedDate": "2020-04-16T10:18:09Z", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation"}, "afterCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/1f72fb850f69449f4ef886ec0cad8a0644bab93d", "committedDate": "2020-04-21T03:46:26Z", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjUxNjYz", "url": "https://github.com/apache/flink/pull/11774#pullrequestreview-399251663", "createdAt": "2020-04-23T16:05:23Z", "commit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNToyM1rOGKwDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0OTowN1rOGKyD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjE4Ng==", "bodyText": "Maybe it makes sense to move the added tests to a new class.\nAlso, can be declared static.", "url": "https://github.com/apache/flink/pull/11774#discussion_r413926186", "createdAt": "2020-04-23T16:05:23Z", "author": {"login": "GJL"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTE0Mg==", "bodyText": "Is there a benefit compared to calling map1.rescale().map(i -> i).setParallelism(2) ?", "url": "https://github.com/apache/flink/pull/11774#discussion_r413959142", "createdAt": "2020-04-23T16:49:07Z", "author": {"login": "GJL"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map1 = forward.map(i -> i).startNewChain().setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> rescale = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tmap1.getTransformation(), new RescalePartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map2 = rescale.map(i -> i).setParallelism(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "originalPosition": 187}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "committedDate": "2020-04-24T03:40:18Z", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/1f72fb850f69449f4ef886ec0cad8a0644bab93d", "committedDate": "2020-04-21T03:46:26Z", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation"}, "afterCommit": {"oid": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "committedDate": "2020-04-24T03:40:18Z", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NjY2NDY1", "url": "https://github.com/apache/flink/pull/11774#pullrequestreview-399666465", "createdAt": "2020-04-24T06:16:15Z", "commit": {"oid": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1833, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}