{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NTEyMTY1", "number": 11839, "title": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI", "bodyText": "What is the purpose of the change\nCurrently, we when use flink-console.sh to start jobmanager/taskmanager start-foreground, the logs could not be accessed via webui. Just because we do not output the logs to the files.\nIn docker container environment, using docker logs to view the logs is a common way. So still need to output the logs to console.\nWe will add a RollingFileAppender to also output the logs to a local file so that the logs could be accessed via web dashboard.\nBrief change log\n\nUpdate log4j-console.properties and logback-console.xml to output logs to files\nUpdate flink-console.sh\n\nVerifying this change\n\nCurrent all e2e tests should not be affected\nManually test logging/stdout/stderr could output to console and file at same time\n\n./bin/jobmanager.sh start-foreground\n./bin/taskmanager.sh start-foreground\nView localhost:8081 to check the logs could be accessed via webui\n\n\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-04-21T08:11:56Z", "url": "https://github.com/apache/flink/pull/11839", "merged": true, "mergeCommit": {"oid": "a06bb9ee38c18211d8832ff21952c19d59ee9a61"}, "closed": true, "closedAt": "2020-05-18T06:05:15Z", "author": {"login": "wangyang0918"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZxMgkABqjMyNTU2MDg4Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABciWYpCABqjMzNDUyNTYzNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c369785530aac75cb69c6445340f0684590921c1", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/c369785530aac75cb69c6445340f0684590921c1", "committedDate": "2020-04-21T07:58:58Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}, "afterCommit": {"oid": "5a26fbb56d996236c296328a6d673bc01982be5f", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/5a26fbb56d996236c296328a6d673bc01982be5f", "committedDate": "2020-04-21T10:32:07Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a26fbb56d996236c296328a6d673bc01982be5f", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/5a26fbb56d996236c296328a6d673bc01982be5f", "committedDate": "2020-04-21T10:32:07Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}, "afterCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/ab5e8324f0ace63d1e5b3f292dd6d517b056fd21", "committedDate": "2020-04-21T10:59:59Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzY5ODYy", "url": "https://github.com/apache/flink/pull/11839#pullrequestreview-399769862", "createdAt": "2020-04-24T09:05:33Z", "commit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwOTowNTozNFrOGLOASg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDoyMDo0MVrOGLQ7JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxNjk3MA==", "bodyText": "why are we introducing a dedicated .err file? AFAIK no other script has it, why should this one?", "url": "https://github.com/apache/flink/pull/11839#discussion_r414416970", "createdAt": "2020-04-24T09:05:34Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,18 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+RANDOM_ID=$(echo $RANDOM | tr '[0-9]' '[a-z]')\n+\n+FLINK_LOG_PREFIX=\"${FLINK_LOG_DIR}/flink-${FLINK_IDENT_STRING}-${SERVICE}-${RANDOM_ID}-${HOSTNAME}\"\n+log=\"${FLINK_LOG_PREFIX}.log\"\n+out=\"${FLINK_LOG_PREFIX}.out\"\n+err=\"${FLINK_LOG_PREFIX}.err\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxODkxMg==", "bodyText": "this should use the same logic as flink-daemon.sh", "url": "https://github.com/apache/flink/pull/11839#discussion_r414418912", "createdAt": "2020-04-24T09:08:34Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,18 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+RANDOM_ID=$(echo $RANDOM | tr '[0-9]' '[a-z]')\n+\n+FLINK_LOG_PREFIX=\"${FLINK_LOG_DIR}/flink-${FLINK_IDENT_STRING}-${SERVICE}-${RANDOM_ID}-${HOSTNAME}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQyNTY3Ng==", "bodyText": "change the Logger argument to a Consumer<String>, pass STD_(OUT|ERR)_LOGGER::info as method reference, remove TestingLogger.", "url": "https://github.com/apache/flink/pull/11839#discussion_r414425676", "createdAt": "2020-04-24T09:18:40Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/StdOutErrRedirector.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.util;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.PrintStream;\n+\n+/**\n+ * Redirect std out and std err to logger.\n+ */\n+public class StdOutErrRedirector {\n+\n+\tprivate static final String STD_OUT_FILE_PROPERTY_KEY = \"stdout.file\";\n+\tprivate static final String STD_ERR_FILE_PROPERTY_KEY = \"stderr.file\";\n+\n+\tprivate static final String STD_OUT_LOGGER_NAME = \"StdOutErrRedirector.StdOut\";\n+\tprivate static final String STD_ERR_LOGGER_NAME = \"StdOutErrRedirector.StdErr\";\n+\n+\tprivate static final Logger STD_OUT_LOGGER = LoggerFactory.getLogger(STD_OUT_LOGGER_NAME);\n+\tprivate static final Logger STD_ERR_LOGGER = LoggerFactory.getLogger(STD_ERR_LOGGER_NAME);\n+\n+\tprivate static final ThreadLocal<Boolean> isRedirecting = ThreadLocal.withInitial(() -> false);\n+\n+\t/**\n+\t * Try to redirect stdout and stderr.\n+\t */\n+\tpublic static void redirectStdOutErr() {\n+\t\tif (System.getProperty(STD_OUT_FILE_PROPERTY_KEY) != null) {\n+\t\t\tSystem.setOut(createLoggerProxy(STD_OUT_LOGGER, System.out));\n+\t\t}\n+\n+\t\tif (System.getProperty(STD_ERR_FILE_PROPERTY_KEY) != null) {\n+\t\t\tSystem.setErr(createLoggerProxy(STD_ERR_LOGGER, System.err));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Create logger proxy print stream.\n+\t * Do not check null, keep the same behavior with System.out/err.\n+\t *\n+\t * @param originalPrintStream the original print stream\n+\t * @return the proxy print stream\n+\t */\n+\t@VisibleForTesting\n+\tstatic PrintStream createLoggerProxy(final Logger logger, final PrintStream originalPrintStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQzMTg5Nw==", "bodyText": "use assertThat for consistency with the rest of the file", "url": "https://github.com/apache/flink/pull/11839#discussion_r414431897", "createdAt": "2020-04-24T09:28:11Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/util/StdOutErrRedirectorTest.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.util;\n+\n+import org.apache.flink.util.TestLogger;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.apache.flink.core.testutils.CommonTestUtils.assertThrows;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Unit test for StdOutErrRedirector.\n+ */\n+public class StdOutErrRedirectorTest extends TestLogger {\n+\n+\tprivate ByteArrayOutputStream byteArrayOutputStream;\n+\tprivate PrintStream originalStream;\n+\n+\t@Before\n+\tpublic void setUp() throws UnsupportedEncodingException {\n+\t\tbyteArrayOutputStream = new ByteArrayOutputStream();\n+\t\toriginalStream = new PrintStream(byteArrayOutputStream, true, \"UTF-8\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tbyteArrayOutputStream.close();\n+\t\toriginalStream.close();\n+\t}\n+\n+\t@Test\n+\tpublic void testNormalPrint() {\n+\t\tfinal int intMsg = 1234;\n+\t\tfinal String strMsg = \"some message\";\n+\t\tfinal List<String> logContents = new ArrayList<>();\n+\n+\t\tfinal Logger logger = new TestingLogger(\n+\t\t\tmsg -> {\n+\t\t\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(true));\n+\t\t\t\tlogContents.add(msg);\n+\t\t\t}\n+\t\t);\n+\n+\t\tfinal PrintStream proxyStream = StdOutErrRedirector.createLoggerProxy(logger, originalStream);\n+\n+\t\tassertFalse(StdOutErrRedirector.isRedirecting());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2Mjg5MA==", "bodyText": "the order should be important", "url": "https://github.com/apache/flink/pull/11839#discussion_r414462890", "createdAt": "2020-04-24T10:17:22Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/util/StdOutErrRedirectorTest.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.util;\n+\n+import org.apache.flink.util.TestLogger;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.apache.flink.core.testutils.CommonTestUtils.assertThrows;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Unit test for StdOutErrRedirector.\n+ */\n+public class StdOutErrRedirectorTest extends TestLogger {\n+\n+\tprivate ByteArrayOutputStream byteArrayOutputStream;\n+\tprivate PrintStream originalStream;\n+\n+\t@Before\n+\tpublic void setUp() throws UnsupportedEncodingException {\n+\t\tbyteArrayOutputStream = new ByteArrayOutputStream();\n+\t\toriginalStream = new PrintStream(byteArrayOutputStream, true, \"UTF-8\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tbyteArrayOutputStream.close();\n+\t\toriginalStream.close();\n+\t}\n+\n+\t@Test\n+\tpublic void testNormalPrint() {\n+\t\tfinal int intMsg = 1234;\n+\t\tfinal String strMsg = \"some message\";\n+\t\tfinal List<String> logContents = new ArrayList<>();\n+\n+\t\tfinal Logger logger = new TestingLogger(\n+\t\t\tmsg -> {\n+\t\t\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(true));\n+\t\t\t\tlogContents.add(msg);\n+\t\t\t}\n+\t\t);\n+\n+\t\tfinal PrintStream proxyStream = StdOutErrRedirector.createLoggerProxy(logger, originalStream);\n+\n+\t\tassertFalse(StdOutErrRedirector.isRedirecting());\n+\n+\t\tproxyStream.print(intMsg);\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\t\tproxyStream.println(strMsg);\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\n+\t\tassertThat(logContents.size(), is(3));\n+\t\tassertThat(logContents, Matchers.containsInAnyOrder(String.valueOf(intMsg), strMsg, System.lineSeparator()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2NDgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tproxyStream.print(recursive);\n          \n          \n            \n            \t\t\t\tproxyStream.print(msg);", "url": "https://github.com/apache/flink/pull/11839#discussion_r414464804", "createdAt": "2020-04-24T10:20:41Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/util/StdOutErrRedirectorTest.java", "diffHunk": "@@ -0,0 +1,456 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.util;\n+\n+import org.apache.flink.util.TestLogger;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import static org.apache.flink.core.testutils.CommonTestUtils.assertThrows;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Unit test for StdOutErrRedirector.\n+ */\n+public class StdOutErrRedirectorTest extends TestLogger {\n+\n+\tprivate ByteArrayOutputStream byteArrayOutputStream;\n+\tprivate PrintStream originalStream;\n+\n+\t@Before\n+\tpublic void setUp() throws UnsupportedEncodingException {\n+\t\tbyteArrayOutputStream = new ByteArrayOutputStream();\n+\t\toriginalStream = new PrintStream(byteArrayOutputStream, true, \"UTF-8\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tbyteArrayOutputStream.close();\n+\t\toriginalStream.close();\n+\t}\n+\n+\t@Test\n+\tpublic void testNormalPrint() {\n+\t\tfinal int intMsg = 1234;\n+\t\tfinal String strMsg = \"some message\";\n+\t\tfinal List<String> logContents = new ArrayList<>();\n+\n+\t\tfinal Logger logger = new TestingLogger(\n+\t\t\tmsg -> {\n+\t\t\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(true));\n+\t\t\t\tlogContents.add(msg);\n+\t\t\t}\n+\t\t);\n+\n+\t\tfinal PrintStream proxyStream = StdOutErrRedirector.createLoggerProxy(logger, originalStream);\n+\n+\t\tassertFalse(StdOutErrRedirector.isRedirecting());\n+\n+\t\tproxyStream.print(intMsg);\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\t\tproxyStream.println(strMsg);\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\n+\t\tassertThat(logContents.size(), is(3));\n+\t\tassertThat(logContents, Matchers.containsInAnyOrder(String.valueOf(intMsg), strMsg, System.lineSeparator()));\n+\t}\n+\n+\t@Test\n+\tpublic void testRecursivePrint() throws Exception {\n+\t\tfinal String recursive = \"recursive\";\n+\t\tfinal Logger logger = new TestingLogger();\n+\n+\t\tfinal PrintStream proxyStream = StdOutErrRedirector.createLoggerProxy(logger, originalStream);\n+\t\t((TestingLogger) logger).setMsgConsumer(\n+\t\t\tmsg -> {\n+\t\t\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(true));\n+\t\t\t\tproxyStream.print(recursive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/ab5e8324f0ace63d1e5b3f292dd6d517b056fd21", "committedDate": "2020-04-21T10:59:59Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}, "afterCommit": {"oid": "6e097b629bafde50b88d261cd856d624cf6f89c5", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/6e097b629bafde50b88d261cd856d624cf6f89c5", "committedDate": "2020-04-27T02:40:07Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e097b629bafde50b88d261cd856d624cf6f89c5", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/6e097b629bafde50b88d261cd856d624cf6f89c5", "committedDate": "2020-04-27T02:40:07Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}, "afterCommit": {"oid": "2ca466db8ef9f2c9ef74cdd830078610dd13506a", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/2ca466db8ef9f2c9ef74cdd830078610dd13506a", "committedDate": "2020-04-27T03:59:59Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ca466db8ef9f2c9ef74cdd830078610dd13506a", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/2ca466db8ef9f2c9ef74cdd830078610dd13506a", "committedDate": "2020-04-27T03:59:59Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}, "afterCommit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/2c1df7529825b6a0af7e57d29febeade36a758b1", "committedDate": "2020-04-27T05:17:27Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODgyMzQy", "url": "https://github.com/apache/flink/pull/11839#pullrequestreview-400882342", "createdAt": "2020-04-27T11:59:27Z", "commit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1OToyN1rOGMfc-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTo1OToyN1rOGMfc-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1MTQxNw==", "bodyText": "use an AtomicReference instead", "url": "https://github.com/apache/flink/pull/11839#discussion_r415751417", "createdAt": "2020-04-27T11:59:27Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/util/StdOutErrRedirectorTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.util;\n+\n+import org.apache.flink.api.java.tuple.Tuple1;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.core.testutils.CommonTestUtils.assertThrows;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Unit test for StdOutErrRedirector.\n+ */\n+public class StdOutErrRedirectorTest extends TestLogger {\n+\n+\tprivate ByteArrayOutputStream byteArrayOutputStream;\n+\tprivate PrintStream originalStream;\n+\n+\t@Before\n+\tpublic void setUp() throws UnsupportedEncodingException {\n+\t\tbyteArrayOutputStream = new ByteArrayOutputStream();\n+\t\toriginalStream = new PrintStream(byteArrayOutputStream, true, \"UTF-8\");\n+\t}\n+\n+\t@After\n+\tpublic void tearDown() throws IOException {\n+\t\tbyteArrayOutputStream.close();\n+\t\toriginalStream.close();\n+\t}\n+\n+\t@Test\n+\tpublic void testNormalPrint() {\n+\t\tfinal int intMsg = 1234;\n+\t\tfinal String strMsg = \"some message\";\n+\t\tfinal List<String> logContents = new ArrayList<>();\n+\n+\t\tfinal PrintStream proxyStream = StdOutErrRedirector.createLoggerProxy(\n+\t\t\tmsg -> {\n+\t\t\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(true));\n+\t\t\t\tlogContents.add(msg);\n+\t\t\t},\n+\t\t\toriginalStream);\n+\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\n+\t\tproxyStream.print(intMsg);\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\t\tproxyStream.println(strMsg);\n+\t\tassertThat(StdOutErrRedirector.isRedirecting(), is(false));\n+\n+\t\tassertThat(logContents.size(), is(3));\n+\t\tassertThat(logContents, Matchers.contains(String.valueOf(intMsg), strMsg, System.lineSeparator()));\n+\t}\n+\n+\t@Test\n+\tpublic void testRecursivePrint() throws Exception {\n+\t\tfinal String recursive = \"recursive\";\n+\t\tfinal Tuple1<PrintStream> streamTuple1 = new Tuple1<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODg5MDgz", "url": "https://github.com/apache/flink/pull/11839#pullrequestreview-400889083", "createdAt": "2020-04-27T12:09:44Z", "commit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjowOTo0NFrOGMf0zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMjoxMzoxMVrOGMf9KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1NzUxNw==", "bodyText": "I see no reason why we should have this in the name.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            FLINK_LOG_PREFIX=\"${FLINK_LOG_DIR}/flink-foreground-${FLINK_IDENT_STRING}-${SERVICE}-${id}-${HOSTNAME}\"\n          \n          \n            \n            FLINK_LOG_PREFIX=\"${FLINK_LOG_DIR}/flink-${FLINK_IDENT_STRING}-${SERVICE}-${id}-${HOSTNAME}\"", "url": "https://github.com/apache/flink/pull/11839#discussion_r415757517", "createdAt": "2020-04-27T12:09:44Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,19 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+pid=$FLINK_PID_DIR/flink-foreground-$FLINK_IDENT_STRING-$SERVICE.pid\n+id=$(getFlinkDaemonID $pid 0)\n+\n+FLINK_LOG_PREFIX=\"${FLINK_LOG_DIR}/flink-foreground-${FLINK_IDENT_STRING}-${SERVICE}-${id}-${HOSTNAME}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1ODY1MQ==", "bodyText": "this surely is not a side-effect this method should have", "url": "https://github.com/apache/flink/pull/11839#discussion_r415758651", "createdAt": "2020-04-27T12:11:28Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/config.sh", "diffHunk": "@@ -660,3 +660,39 @@ extractExecutionParams() {\n \n     echo ${execution_config} | sed \"s/$EXECUTION_PREFIX//\"\n }\n+\n+getFlinkDaemonID() {\n+    local pid=$1\n+    local clean_up_when_all_processes_dead=${2:-1}\n+\n+    mkdir -p \"$FLINK_PID_DIR\"\n+\n+    # Log files for daemons are indexed from the process ID's position in the PID\n+    # file. The following lock prevents a race condition during daemon startup\n+    # when multiple daemons read, index, and write to the PID file concurrently.\n+    # The lock is created on the PID directory since a lock file cannot be safely\n+    # removed. The daemon is started with the lock closed and the lock remains\n+    # active in this script until the script exits.\n+    command -v flock >/dev/null 2>&1\n+    if [[ $? -eq 0 ]]; then\n+        exec 200<\"$FLINK_PID_DIR\"\n+        flock 200\n+    fi\n+\n+    # Remove the pid file when all the processes are dead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1OTEzOA==", "bodyText": "Can we not simplify this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                local id=$([ -f \"$pid\" ] && echo $(wc -l < \"$pid\") || echo \"0\")\n          \n          \n            \n                echo $id\n          \n          \n            \n                echo $([ -f \"$pid\" ] && echo $(wc -l < \"$pid\") || echo \"0\")", "url": "https://github.com/apache/flink/pull/11839#discussion_r415759138", "createdAt": "2020-04-27T12:12:16Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/config.sh", "diffHunk": "@@ -660,3 +660,39 @@ extractExecutionParams() {\n \n     echo ${execution_config} | sed \"s/$EXECUTION_PREFIX//\"\n }\n+\n+getFlinkDaemonID() {\n+    local pid=$1\n+    local clean_up_when_all_processes_dead=${2:-1}\n+\n+    mkdir -p \"$FLINK_PID_DIR\"\n+\n+    # Log files for daemons are indexed from the process ID's position in the PID\n+    # file. The following lock prevents a race condition during daemon startup\n+    # when multiple daemons read, index, and write to the PID file concurrently.\n+    # The lock is created on the PID directory since a lock file cannot be safely\n+    # removed. The daemon is started with the lock closed and the lock remains\n+    # active in this script until the script exits.\n+    command -v flock >/dev/null 2>&1\n+    if [[ $? -eq 0 ]]; then\n+        exec 200<\"$FLINK_PID_DIR\"\n+        flock 200\n+    fi\n+\n+    # Remove the pid file when all the processes are dead\n+    if [ -f \"$pid\" ];then\n+        local all_dead=0\n+        while read each_pid; do\n+            kill -0 $each_pid > /dev/null 2>&1\n+            if [[ $? -eq 0 ]] ; then\n+                all_dead=1\n+            fi\n+        done < \"$pid\"\n+        [ $clean_up_when_all_processes_dead -eq 0 -a $all_dead -eq 0 ] && rm $pid\n+    fi\n+\n+    # Ascending ID depending on number of lines in pid file.\n+    # This allows us to start multiple daemon of each type.\n+    local id=$([ -f \"$pid\" ] && echo $(wc -l < \"$pid\") || echo \"0\")\n+    echo $id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc1OTY1Ng==", "bodyText": "And i think it is better to separate them if we could.\n\nThat may be so, but the scripts should have a consistent behavior.", "url": "https://github.com/apache/flink/pull/11839#discussion_r415759656", "createdAt": "2020-04-27T12:13:11Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,18 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+RANDOM_ID=$(echo $RANDOM | tr '[0-9]' '[a-z]')\n+\n+FLINK_LOG_PREFIX=\"${FLINK_LOG_DIR}/flink-${FLINK_IDENT_STRING}-${SERVICE}-${RANDOM_ID}-${HOSTNAME}\"\n+log=\"${FLINK_LOG_PREFIX}.log\"\n+out=\"${FLINK_LOG_PREFIX}.out\"\n+err=\"${FLINK_LOG_PREFIX}.err\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxNjk3MA=="}, "originalCommit": {"oid": "ab5e8324f0ace63d1e5b3f292dd6d517b056fd21"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c1df7529825b6a0af7e57d29febeade36a758b1", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/2c1df7529825b6a0af7e57d29febeade36a758b1", "committedDate": "2020-04-27T05:17:27Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI\n\nBy using System.setOut and System.setErr to redirect the PrintStream to log4j logger, we could output the stdout/stderr to console and file at the same time."}, "afterCommit": {"oid": "d1a93165bb5e47b2b6b2dd680c404722af7ca039", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/d1a93165bb5e47b2b6b2dd680c404722af7ca039", "committedDate": "2020-04-28T05:19:00Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1a93165bb5e47b2b6b2dd680c404722af7ca039", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/d1a93165bb5e47b2b6b2dd680c404722af7ca039", "committedDate": "2020-04-28T05:19:00Z", "message": "[FLINK-17166][dist] Modify the log4j-console.properties to also output logs into the files for WebUI"}, "afterCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/bcaf191ee0597926ea740092596b34e82592a850", "committedDate": "2020-05-15T05:52:43Z", "message": "[FLINK-17166][dist] Modify the flink-console.sh and log configuration to also output logs into the files for WebUI"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDEzOTk1", "url": "https://github.com/apache/flink/pull/11839#pullrequestreview-412413995", "createdAt": "2020-05-15T07:36:34Z", "commit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzozNjozNFrOGV5zJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzo1MDo1NFrOGV6OKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyMDI2MQ==", "bodyText": "Why are we re-inventing the wheel and not use the same logic from flink-daemon.sh?\n[ $(wc -l < \"$pid\") -eq 0 ] && rm \"$pid\"\nor\n[ -z $(tail -n 1 \"$pid\") ] && rm \"$pid\"", "url": "https://github.com/apache/flink/pull/11839#discussion_r425620261", "createdAt": "2020-05-15T07:36:34Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,34 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+pid=$FLINK_PID_DIR/flink-$FLINK_IDENT_STRING-$SERVICE.pid\n+mkdir -p \"$FLINK_PID_DIR\"\n+# The lock needs to be released after use because this script is started foreground\n+command -v flock >/dev/null 2>&1\n+flock_exist=$?\n+if [[ ${flock_exist} -eq 0 ]]; then\n+    exec 200<\"$FLINK_PID_DIR\"\n+    flock 200\n+fi\n+# Remove the pid file when all the processes are dead\n+if [ -f \"$pid\" ];then\n+    all_dead=0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyMDc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            flock_exist=$?\n          \n          \n            \n            if [[ ${flock_exist} -eq 0 ]]; then\n          \n          \n            \n            if [[ $? -eq 0 ]]; then\n          \n      \n    \n    \n  \n\nstay consistent with other scripts, so it is more obvious what can be deduplicated later.", "url": "https://github.com/apache/flink/pull/11839#discussion_r425620777", "createdAt": "2020-05-15T07:37:42Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,34 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+pid=$FLINK_PID_DIR/flink-$FLINK_IDENT_STRING-$SERVICE.pid\n+mkdir -p \"$FLINK_PID_DIR\"\n+# The lock needs to be released after use because this script is started foreground\n+command -v flock >/dev/null 2>&1\n+flock_exist=$?\n+if [[ ${flock_exist} -eq 0 ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyNzE3Nw==", "bodyText": "please add a comment for what this does", "url": "https://github.com/apache/flink/pull/11839#discussion_r425627177", "createdAt": "2020-05-15T07:50:54Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -70,4 +97,10 @@ if [[ ${JAVA_VERSION} =~ ${IS_NUMBER} ]]; then\n fi\n \n echo \"Starting $SERVICE as a console application on host $HOSTNAME.\"\n+\n+echo $$ >> \"$pid\" 2>/dev/null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNTQ4MDEw", "url": "https://github.com/apache/flink/pull/11839#pullrequestreview-412548010", "createdAt": "2020-05-15T10:59:00Z", "commit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDo1OTowMFrOGWAOjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMTowMzo1MFrOGWAXMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNTU4Mw==", "bodyText": "add a comment that this checks whether the process is still running", "url": "https://github.com/apache/flink/pull/11839#discussion_r425725583", "createdAt": "2020-05-15T10:59:00Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,34 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+pid=$FLINK_PID_DIR/flink-$FLINK_IDENT_STRING-$SERVICE.pid\n+mkdir -p \"$FLINK_PID_DIR\"\n+# The lock needs to be released after use because this script is started foreground\n+command -v flock >/dev/null 2>&1\n+flock_exist=$?\n+if [[ ${flock_exist} -eq 0 ]]; then\n+    exec 200<\"$FLINK_PID_DIR\"\n+    flock 200\n+fi\n+# Remove the pid file when all the processes are dead\n+if [ -f \"$pid\" ];then\n+    all_dead=0\n+    while read each_pid; do\n+        kill -0 $each_pid > /dev/null 2>&1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNjc2Mg==", "bodyText": "so $$ returns the PID of the current process?\n\nand then replace the current program with specified SERVICE in the same process\n\nWith this you mean the exec call? if so, I'd omit it, because it raises more questions than it answers. (most notably due to describing behavior several lines down)", "url": "https://github.com/apache/flink/pull/11839#discussion_r425726762", "createdAt": "2020-05-15T11:01:31Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -70,4 +97,10 @@ if [[ ${JAVA_VERSION} =~ ${IS_NUMBER} ]]; then\n fi\n \n echo \"Starting $SERVICE as a console application on host $HOSTNAME.\"\n+\n+echo $$ >> \"$pid\" 2>/dev/null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyNzE3Nw=="}, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNzIxOA==", "bodyText": "Shouldn't this cleanup be done in a trap of some sort? Like on-exit remove the PID of this process from the file, and then maybe delete it if empty?", "url": "https://github.com/apache/flink/pull/11839#discussion_r425727218", "createdAt": "2020-05-15T11:02:35Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -58,7 +58,34 @@ esac\n \n FLINK_TM_CLASSPATH=`constructFlinkClassPath`\n \n-log_setting=(\"-Dlog4j.configuration=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlog4j.configurationFile=file:${FLINK_CONF_DIR}/log4j-console.properties\" \"-Dlogback.configurationFile=file:${FLINK_CONF_DIR}/logback-console.xml\")\n+if [ \"$FLINK_IDENT_STRING\" = \"\" ]; then\n+    FLINK_IDENT_STRING=\"$USER\"\n+fi\n+\n+pid=$FLINK_PID_DIR/flink-$FLINK_IDENT_STRING-$SERVICE.pid\n+mkdir -p \"$FLINK_PID_DIR\"\n+# The lock needs to be released after use because this script is started foreground\n+command -v flock >/dev/null 2>&1\n+flock_exist=$?\n+if [[ ${flock_exist} -eq 0 ]]; then\n+    exec 200<\"$FLINK_PID_DIR\"\n+    flock 200\n+fi\n+# Remove the pid file when all the processes are dead\n+if [ -f \"$pid\" ];then\n+    all_dead=0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYyMDI2MQ=="}, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcyNzc5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Release the lock\n          \n          \n            \n            # Release the lock, because the java process runs in the foreground and would block other processes from modifying the pid file", "url": "https://github.com/apache/flink/pull/11839#discussion_r425727794", "createdAt": "2020-05-15T11:03:50Z", "author": {"login": "zentol"}, "path": "flink-dist/src/main/flink-bin/bin/flink-console.sh", "diffHunk": "@@ -70,4 +97,10 @@ if [[ ${JAVA_VERSION} =~ ${IS_NUMBER} ]]; then\n fi\n \n echo \"Starting $SERVICE as a console application on host $HOSTNAME.\"\n+\n+echo $$ >> \"$pid\" 2>/dev/null\n+\n+# Release the lock", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcaf191ee0597926ea740092596b34e82592a850"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5332adab0695f4ea07eb46d527d7c7e903b7d49c", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/5332adab0695f4ea07eb46d527d7c7e903b7d49c", "committedDate": "2020-05-18T02:23:55Z", "message": "[FLINK-17166][dist] Modify the flink-console.sh and log configuration to also output logs into the files for WebUI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78fecb2ae6011cf2f5a0cbe106da98a3a2d8b2b7", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/78fecb2ae6011cf2f5a0cbe106da98a3a2d8b2b7", "committedDate": "2020-05-18T02:23:55Z", "message": "fixup! Add comments for writing pid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d5b62e81cb5bb3d7fc4488b091e1525f1c85eb", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/f8d5b62e81cb5bb3d7fc4488b091e1525f1c85eb", "committedDate": "2020-05-18T02:23:55Z", "message": "fixup! address the comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de71393ce72505e00313c75d5c43060bb86589f7", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/de71393ce72505e00313c75d5c43060bb86589f7", "committedDate": "2020-05-18T02:23:55Z", "message": "Update flink-console.sh"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "216b86cf20cccbc2462b36c8edc5b5a396ebd3c0", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/216b86cf20cccbc2462b36c8edc5b5a396ebd3c0", "committedDate": "2020-05-17T18:21:41Z", "message": "Update flink-console.sh"}, "afterCommit": {"oid": "de71393ce72505e00313c75d5c43060bb86589f7", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/de71393ce72505e00313c75d5c43060bb86589f7", "committedDate": "2020-05-18T02:23:55Z", "message": "Update flink-console.sh"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4701, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}