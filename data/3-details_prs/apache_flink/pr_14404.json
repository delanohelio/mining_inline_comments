{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDkwMzI0", "number": 14404, "title": "[FLINK-20624][table-planner]Refactor StreamExecJoinRule, StreamExecIntervalJoinRule and StreamExecTemporalJoinRule", "bodyText": "What is the purpose of the change\nThis PR tries to refactor StreamExecJoinRule, StreamExecIntervalJoinRule and StreamExecTemporalJoinRule, so that we can elimate the duplicate code.\nBrief change log\n\nAdd  abstract class StreamExecJoinRuleBase as base implementation for stream-stream join rules, and elimate duplicate  code in StreamExecJoinRule, StreamExecIntervalJoinRule and StreamExecTemporalJoinRule\n\nVerifying this change\nThis change is already covered by existing tests.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-12-16T11:18:41Z", "url": "https://github.com/apache/flink/pull/14404", "merged": true, "mergeCommit": {"oid": "d7ea11733f8283ffdc629d7e5fcdc3a5c34c9d37"}, "closed": true, "closedAt": "2020-12-22T03:34:13Z", "author": {"login": "jrthe42"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmqIjpgH2gAyNTQxMDkwMzI0OmI4ZjQzZWIyNWYwMzYwODg2ZDdjZjViZjQ3NDQ5ZDcxMjIzNDdmNzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoh_vtAFqTU1Njc5NjgwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b8f43eb25f0360886d7cf5bf47449d7122347f79", "author": {"user": {"login": "jrthe42", "name": "Jerry Wang"}}, "url": "https://github.com/apache/flink/commit/b8f43eb25f0360886d7cf5bf47449d7122347f79", "committedDate": "2020-12-16T07:51:43Z", "message": "refactor flink stream-stream join rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDQwMTE5", "url": "https://github.com/apache/flink/pull/14404#pullrequestreview-555440119", "createdAt": "2020-12-18T12:19:00Z", "commit": {"oid": "b8f43eb25f0360886d7cf5bf47449d7122347f79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoxOTowMFrOIIguOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoxOTowMFrOIIguOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5NTY0Mg==", "bodyText": "The only concern from my side is that the base rule class has some special transformation logic for temporal join. This may has some side effect in the long future, e.g. we may support regular join with snapshot in the future. Would be better to let the temporal join rule to handle this transformation.\nIn order to this, one idea is that we can provide conversion function instead of the converted rel node:\n  protected def transform(\n      join: FlinkLogicalJoin,\n      leftConversion: RelNode => RelNode,\n      rightConversion: RelNode => RelNode,\n      providedTraitSet: RelTraitSet): FlinkRelNode", "url": "https://github.com/apache/flink/pull/14404#discussion_r545795642", "createdAt": "2020-12-18T12:19:00Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/rules/physical/stream/StreamExecJoinRuleBase.scala", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.rules.physical.stream\n+\n+import org.apache.flink.table.planner.plan.`trait`.FlinkRelDistribution\n+import org.apache.flink.table.planner.plan.nodes.{FlinkConventions, FlinkRelNode}\n+import org.apache.flink.table.planner.plan.nodes.logical.{FlinkLogicalJoin, FlinkLogicalRel, FlinkLogicalSnapshot}\n+import org.apache.flink.table.planner.plan.utils.IntervalJoinUtil.WindowBounds\n+import org.apache.flink.table.planner.plan.utils.{FlinkRelOptUtil, IntervalJoinUtil}\n+import org.apache.calcite.plan.{RelOptRule, RelOptRuleCall, RelTraitSet}\n+import org.apache.calcite.plan.RelOptRule.{any, operand}\n+import org.apache.calcite.rel.RelNode\n+import org.apache.calcite.rex.RexNode\n+\n+import java.util\n+\n+/**\n+ * Base implementation for rules match stream-stream join, including\n+ * regular stream join, interval join and temporal join.\n+ */\n+abstract class StreamExecJoinRuleBase(description: String)\n+  extends RelOptRule(\n+    operand(classOf[FlinkLogicalJoin],\n+      operand(classOf[FlinkLogicalRel], any()),\n+      operand(classOf[FlinkLogicalRel], any())),\n+    description) {\n+\n+  protected def extractWindowBounds(join: FlinkLogicalJoin):\n+    (Option[WindowBounds], Option[RexNode]) = {\n+    val tableConfig = FlinkRelOptUtil.getTableConfigFromContext(join)\n+    IntervalJoinUtil.extractWindowBoundsFromPredicate(\n+      join.getCondition,\n+      join.getLeft.getRowType.getFieldCount,\n+      join.getRowType,\n+      join.getCluster.getRexBuilder,\n+      tableConfig)\n+  }\n+\n+  override def onMatch(call: RelOptRuleCall): Unit = {\n+    val join = call.rel[FlinkLogicalJoin](0)\n+    val left = call.rel[FlinkLogicalRel](1)\n+    val right = call.rel[FlinkLogicalRel](2)\n+\n+    def toHashTraitByColumns(\n+        columns: util.Collection[_ <: Number],\n+        inputTraitSet: RelTraitSet): RelTraitSet = {\n+      val distribution = if (columns.size() == 0) {\n+        FlinkRelDistribution.SINGLETON\n+      } else {\n+        FlinkRelDistribution.hash(columns)\n+      }\n+      inputTraitSet\n+          .replace(FlinkConventions.STREAM_PHYSICAL)\n+          .replace(distribution)\n+    }\n+\n+    val newRight = right match {\n+      case snapshot: FlinkLogicalSnapshot =>\n+        snapshot.getInput\n+      case rel: FlinkLogicalRel => rel\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f43eb25f0360886d7cf5bf47449d7122347f79"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTA3MzU2", "url": "https://github.com/apache/flink/pull/14404#pullrequestreview-556107356", "createdAt": "2020-12-21T03:11:42Z", "commit": {"oid": "dd0716385b6e0c59ae8d9b33cd56d191bd65342a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoxMTo0MlrOIJLARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMzoxMTo0MlrOIJLARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4ODM4OA==", "bodyText": "I think we don't need the leftInput parameter, it can be derived from the join node join.getLeft.", "url": "https://github.com/apache/flink/pull/14404#discussion_r546488388", "createdAt": "2020-12-21T03:11:42Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/rules/physical/stream/StreamExecJoinRuleBase.scala", "diffHunk": "@@ -70,28 +70,30 @@ abstract class StreamExecJoinRuleBase(description: String)\n           .replace(distribution)\n     }\n \n-    val newRight = right match {\n-      case snapshot: FlinkLogicalSnapshot =>\n-        snapshot.getInput\n-      case rel: FlinkLogicalRel => rel\n+    def convertInput(input: RelNode, columns: util.Collection[_ <: Number]): RelNode = {\n+      val requiredTraitSet = toHashTraitByColumns(columns, input.getTraitSet)\n+      RelOptRule.convert(input, requiredTraitSet)\n     }\n \n     val joinInfo = join.analyzeCondition\n-    val (leftRequiredTrait, rightRequiredTrait) = (\n-        toHashTraitByColumns(joinInfo.leftKeys, left.getTraitSet),\n-        toHashTraitByColumns(joinInfo.rightKeys, newRight.getTraitSet))\n-\n-    val convertedLeft: RelNode = RelOptRule.convert(left, leftRequiredTrait)\n-    val convertedRight: RelNode = RelOptRule.convert(newRight, rightRequiredTrait)\n     val providedTraitSet: RelTraitSet = join.getTraitSet.replace(FlinkConventions.STREAM_PHYSICAL)\n \n-    val newJoin = transform(join, convertedLeft, convertedRight, providedTraitSet)\n+    val leftConversion = leftInput => {\n+      convertInput(leftInput, joinInfo.leftKeys)\n+    }\n+    val rightConversion = rightInput => {\n+      convertInput(rightInput, joinInfo.rightKeys)\n+    }\n+\n+    val newJoin = transform(join, left, leftConversion, right, rightConversion, providedTraitSet)\n     call.transformTo(newJoin)\n   }\n \n   protected def transform(\n       join: FlinkLogicalJoin,\n-      convertedLeft: RelNode,\n-      convertedRight: RelNode,\n+      leftInput: FlinkRelNode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd0716385b6e0c59ae8d9b33cd56d191bd65342a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794ff7d81e8a74032fe24dc9fbceb7ec54f14fa0", "author": {"user": {"login": "jrthe42", "name": "Jerry Wang"}}, "url": "https://github.com/apache/flink/commit/794ff7d81e8a74032fe24dc9fbceb7ec54f14fa0", "committedDate": "2020-12-21T08:25:38Z", "message": "address review comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd0716385b6e0c59ae8d9b33cd56d191bd65342a", "author": {"user": {"login": "jrthe42", "name": "Jerry Wang"}}, "url": "https://github.com/apache/flink/commit/dd0716385b6e0c59ae8d9b33cd56d191bd65342a", "committedDate": "2020-12-19T16:23:22Z", "message": "address review comment"}, "afterCommit": {"oid": "794ff7d81e8a74032fe24dc9fbceb7ec54f14fa0", "author": {"user": {"login": "jrthe42", "name": "Jerry Wang"}}, "url": "https://github.com/apache/flink/commit/794ff7d81e8a74032fe24dc9fbceb7ec54f14fa0", "committedDate": "2020-12-21T08:25:38Z", "message": "address review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2Nzk2ODA3", "url": "https://github.com/apache/flink/pull/14404#pullrequestreview-556796807", "createdAt": "2020-12-22T03:30:42Z", "commit": {"oid": "794ff7d81e8a74032fe24dc9fbceb7ec54f14fa0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3651, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}