{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MzAxOTQw", "number": 11536, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1OTo0N1rODsNdWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1OTo0N1rODsNdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3Njg0NDQxOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/util/FactoryUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxOTo1OTo0N1rOF9AEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoyNDoxOFrOF-YYWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwODY0OQ==", "bodyText": "(General comment: I'm not familiar enough with this part of the code yet to feel really qualified for a comment here, so I'm potentially shooting in the dark with this feedback item):\nAre we sure that we can always ignore the Exception e?\nDoes it make sense to add it as a cause to the RuntimeException, or log it on DEBUG level?\nThe CI on Azure for this PR was failing with the following error:\n[INFO] Running org.apache.flink.tests.util.kafka.StreamingKafkaITCase\n[ERROR] Tests run: 3, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 0.006 s <<< FAILURE! - in org.apache.flink.tests.util.kafka.StreamingKafkaITCase\n[ERROR] testKafka[0: kafka-version:0.10.2.0](org.apache.flink.tests.util.kafka.StreamingKafkaITCase)  Time elapsed: 0.004 s  <<< ERROR!\njava.lang.RuntimeException: Could not instantiate instance.\n\tat org.apache.flink.tests.util.kafka.StreamingKafkaITCase.<init>(StreamingKafkaITCase.java:72)\n\n[ERROR] testKafka[1: kafka-version:0.11.0.2](org.apache.flink.tests.util.kafka.StreamingKafkaITCase)  Time elapsed: 0.001 s  <<< ERROR!\njava.lang.RuntimeException: Could not instantiate instance.\n\tat org.apache.flink.tests.util.kafka.StreamingKafkaITCase.<init>(StreamingKafkaITCase.java:72)\n\n[ERROR] testKafka[2: kafka-version:2.2.0](org.apache.flink.tests.util.kafka.StreamingKafkaITCase)  Time elapsed: 0 s  <<< ERROR!\njava.lang.RuntimeException: Could not instantiate instance.\n\tat org.apache.flink.tests.util.kafka.StreamingKafkaITCase.<init>(StreamingKafkaITCase.java:72)\n\nI would have assumed that this PR is improving the exception output for this case specifically.\nI wonder if throwing a RuntimeException here is the right approach? Maybe we should have a checked exception type for this, so that we are forced to handle it at the call site (FlinkResource.get(), where we could rethrow with additonal information (\"Error instantiating FlinkResource\")).", "url": "https://github.com/apache/flink/pull/11536#discussion_r399508649", "createdAt": "2020-03-27T19:59:47Z", "author": {"login": "rmetzger"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/util/FactoryUtils.java", "diffHunk": "@@ -43,24 +45,43 @@\n \t * @throws RuntimeException if no or multiple resources could be instantiated\n \t * @return created instance\n \t */\n-\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final Function<F, Optional<R>> factoryInvoker, final Supplier<F> defaultProvider) {\n+\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final FactoryInvoker<F, R> factoryInvoker, final Supplier<F> defaultProvider) {\n \t\tfinal ServiceLoader<F> factories = ServiceLoader.load(factoryInterface);\n \n-\t\tfinal List<R> resources = StreamSupport.stream(factories.spliterator(), false)\n-\t\t\t.map(factoryInvoker)\n-\t\t\t.filter(Optional::isPresent)\n-\t\t\t.map(Optional::get)\n-\t\t\t.collect(Collectors.toList());\n+\t\tfinal List<R> instantiatedResources = new ArrayList<>();\n+\t\tfinal List<Exception> errorsDuringInitialization = new ArrayList<>();\n+\t\tfor (F factory : factories) {\n+\t\t\ttry {\n+\t\t\t\tR resource = factoryInvoker.invoke(factory);\n+\t\t\t\tinstantiatedResources.add(resource);\n+\t\t\t\tLOG.info(\"Instantiated {}.\", resource.getClass().getSimpleName());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.debug(\"Factory {} could not instantiate instance.\", factory.getClass().getSimpleName(), e);\n+\t\t\t\terrorsDuringInitialization.add(e);\n+\t\t\t}\n+\t\t}\n \n-\t\tif (resources.size() == 1) {\n-\t\t\treturn resources.get(0);\n+\t\tif (instantiatedResources.size() == 1) {\n+\t\t\treturn instantiatedResources.get(0);\n \t\t}\n \n-\t\tif (resources.isEmpty()) {\n-\t\t\treturn factoryInvoker.apply(defaultProvider.get())\n-\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Could not instantiate instance using default factory.\"));\n+\t\tif (instantiatedResources.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn factoryInvoker.invoke(defaultProvider.get());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfinal RuntimeException exception = new RuntimeException(\"Could not instantiate instance.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02744178a91af131c0be0337a18e7cc65303495d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTIyOA==", "bodyText": "So, generally speaking it shouldn't be necessary to include e as a cause, the reason being that the default provider is usually included in the set of factories returned by ServiceLoader.load. This also implies that the error is already being logged.\nThere is only one exception to this which is the LolCache, which generally speaking should never fail (technically it could if it can't create a TemporaryDirectory, but then you likely have bigger problems).\nHandling at the call-site doesn't really give us a lot; we can't handle the error but only slightly enhance the error message which shouldn't be necessary in the first place. For some reason the stack trace is being trimmed to ridiculous degrees; which may also cause the suppressed exception to not be shown.\nI will investigate why this happens; I did try it with the FlinkResoure without distDir being set (the original original cause for this PR), and it displayed the right exception. But IIRC I did that in the IDE, so maybe maven/surefire is getting in the way here.", "url": "https://github.com/apache/flink/pull/11536#discussion_r399539228", "createdAt": "2020-03-27T21:09:40Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/util/FactoryUtils.java", "diffHunk": "@@ -43,24 +45,43 @@\n \t * @throws RuntimeException if no or multiple resources could be instantiated\n \t * @return created instance\n \t */\n-\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final Function<F, Optional<R>> factoryInvoker, final Supplier<F> defaultProvider) {\n+\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final FactoryInvoker<F, R> factoryInvoker, final Supplier<F> defaultProvider) {\n \t\tfinal ServiceLoader<F> factories = ServiceLoader.load(factoryInterface);\n \n-\t\tfinal List<R> resources = StreamSupport.stream(factories.spliterator(), false)\n-\t\t\t.map(factoryInvoker)\n-\t\t\t.filter(Optional::isPresent)\n-\t\t\t.map(Optional::get)\n-\t\t\t.collect(Collectors.toList());\n+\t\tfinal List<R> instantiatedResources = new ArrayList<>();\n+\t\tfinal List<Exception> errorsDuringInitialization = new ArrayList<>();\n+\t\tfor (F factory : factories) {\n+\t\t\ttry {\n+\t\t\t\tR resource = factoryInvoker.invoke(factory);\n+\t\t\t\tinstantiatedResources.add(resource);\n+\t\t\t\tLOG.info(\"Instantiated {}.\", resource.getClass().getSimpleName());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.debug(\"Factory {} could not instantiate instance.\", factory.getClass().getSimpleName(), e);\n+\t\t\t\terrorsDuringInitialization.add(e);\n+\t\t\t}\n+\t\t}\n \n-\t\tif (resources.size() == 1) {\n-\t\t\treturn resources.get(0);\n+\t\tif (instantiatedResources.size() == 1) {\n+\t\t\treturn instantiatedResources.get(0);\n \t\t}\n \n-\t\tif (resources.isEmpty()) {\n-\t\t\treturn factoryInvoker.apply(defaultProvider.get())\n-\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Could not instantiate instance using default factory.\"));\n+\t\tif (instantiatedResources.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn factoryInvoker.invoke(defaultProvider.get());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfinal RuntimeException exception = new RuntimeException(\"Could not instantiate instance.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwODY0OQ=="}, "originalCommit": {"oid": "02744178a91af131c0be0337a18e7cc65303495d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0ODc2Ng==", "bodyText": "[...] the default provider is usually included in the set of factories returned by ServiceLoader.load.\n\nSo this is wrong. Neither the Flink nor Kafka resources have a services resource file, and are always loaded as default resources.\nI have amended the PR to also include the error of the default resource.\nI have found the reason for the trimmed stack trace (FLINK-16837, surefire being stupid and old) and have provided a fix for it in this PR.\nThe exception will now look like this:\njava.lang.RuntimeException: Could not instantiate any instance.\n        at org.apache.flink.tests.util.util.FactoryUtils.loadAndInvokeFactory(FactoryUtils.java:72)\n        at org.apache.flink.tests.util.flink.FlinkResource.get(FlinkResource.java:75)\n        at org.apache.flink.metrics.prometheus.tests.PrometheusReporterEndToEndITCase.<init>(PrometheusReporterEndToEndITCase.java:117)\n        at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n        at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n        at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\n        at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)\n        at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n        at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n        at org.junit.runners.Suite.runChild(Suite.java:128)\n        at org.junit.runners.Suite.runChild(Suite.java:27)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n        at org.apache.maven.surefire.junitcore.JUnitCore.run(JUnitCore.java:55)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createRequestAndRun(JUnitCoreWrapper.java:137)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:107)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:83)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:75)\n        at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:158)\n        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)\n        at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)\n        Suppressed: java.lang.RuntimeException: Could not instantiate default instance.\n                at org.apache.flink.tests.util.util.FactoryUtils.loadAndInvokeFactory(FactoryUtils.java:73)\n                ... 37 more\n        Caused by: java.lang.IllegalArgumentException: The distDir property was not set. You can set it when running maven via -DdistDir=<path> .\n                at org.apache.flink.tests.util.flink.LocalStandaloneFlinkResourceFactory.create(LocalStandaloneFlinkResourceFactory.java:43)\n                at org.apache.flink.tests.util.flink.FlinkResource.lambda$get$0(FlinkResource.java:77)\n                at org.apache.flink.tests.util.util.FactoryUtils.loadAndInvokeFactory(FactoryUtils.java:70)\n                ... 37 more\n\nIt is a tad long, but surefire isn't flexible in this regard, and I rather have an exception that is verbose than one that hides critical information.", "url": "https://github.com/apache/flink/pull/11536#discussion_r399548766", "createdAt": "2020-03-27T21:34:24Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/util/FactoryUtils.java", "diffHunk": "@@ -43,24 +45,43 @@\n \t * @throws RuntimeException if no or multiple resources could be instantiated\n \t * @return created instance\n \t */\n-\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final Function<F, Optional<R>> factoryInvoker, final Supplier<F> defaultProvider) {\n+\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final FactoryInvoker<F, R> factoryInvoker, final Supplier<F> defaultProvider) {\n \t\tfinal ServiceLoader<F> factories = ServiceLoader.load(factoryInterface);\n \n-\t\tfinal List<R> resources = StreamSupport.stream(factories.spliterator(), false)\n-\t\t\t.map(factoryInvoker)\n-\t\t\t.filter(Optional::isPresent)\n-\t\t\t.map(Optional::get)\n-\t\t\t.collect(Collectors.toList());\n+\t\tfinal List<R> instantiatedResources = new ArrayList<>();\n+\t\tfinal List<Exception> errorsDuringInitialization = new ArrayList<>();\n+\t\tfor (F factory : factories) {\n+\t\t\ttry {\n+\t\t\t\tR resource = factoryInvoker.invoke(factory);\n+\t\t\t\tinstantiatedResources.add(resource);\n+\t\t\t\tLOG.info(\"Instantiated {}.\", resource.getClass().getSimpleName());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.debug(\"Factory {} could not instantiate instance.\", factory.getClass().getSimpleName(), e);\n+\t\t\t\terrorsDuringInitialization.add(e);\n+\t\t\t}\n+\t\t}\n \n-\t\tif (resources.size() == 1) {\n-\t\t\treturn resources.get(0);\n+\t\tif (instantiatedResources.size() == 1) {\n+\t\t\treturn instantiatedResources.get(0);\n \t\t}\n \n-\t\tif (resources.isEmpty()) {\n-\t\t\treturn factoryInvoker.apply(defaultProvider.get())\n-\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Could not instantiate instance using default factory.\"));\n+\t\tif (instantiatedResources.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn factoryInvoker.invoke(defaultProvider.get());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfinal RuntimeException exception = new RuntimeException(\"Could not instantiate instance.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwODY0OQ=="}, "originalCommit": {"oid": "02744178a91af131c0be0337a18e7cc65303495d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0OTEyOA==", "bodyText": "This issue didn't show up in my test since I tried it with the Prometheus test which doesn't go through FlinkResource.get but directly works against a specific factory, so we're never within FactoryUtils.", "url": "https://github.com/apache/flink/pull/11536#discussion_r399549128", "createdAt": "2020-03-27T21:35:27Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/util/FactoryUtils.java", "diffHunk": "@@ -43,24 +45,43 @@\n \t * @throws RuntimeException if no or multiple resources could be instantiated\n \t * @return created instance\n \t */\n-\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final Function<F, Optional<R>> factoryInvoker, final Supplier<F> defaultProvider) {\n+\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final FactoryInvoker<F, R> factoryInvoker, final Supplier<F> defaultProvider) {\n \t\tfinal ServiceLoader<F> factories = ServiceLoader.load(factoryInterface);\n \n-\t\tfinal List<R> resources = StreamSupport.stream(factories.spliterator(), false)\n-\t\t\t.map(factoryInvoker)\n-\t\t\t.filter(Optional::isPresent)\n-\t\t\t.map(Optional::get)\n-\t\t\t.collect(Collectors.toList());\n+\t\tfinal List<R> instantiatedResources = new ArrayList<>();\n+\t\tfinal List<Exception> errorsDuringInitialization = new ArrayList<>();\n+\t\tfor (F factory : factories) {\n+\t\t\ttry {\n+\t\t\t\tR resource = factoryInvoker.invoke(factory);\n+\t\t\t\tinstantiatedResources.add(resource);\n+\t\t\t\tLOG.info(\"Instantiated {}.\", resource.getClass().getSimpleName());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.debug(\"Factory {} could not instantiate instance.\", factory.getClass().getSimpleName(), e);\n+\t\t\t\terrorsDuringInitialization.add(e);\n+\t\t\t}\n+\t\t}\n \n-\t\tif (resources.size() == 1) {\n-\t\t\treturn resources.get(0);\n+\t\tif (instantiatedResources.size() == 1) {\n+\t\t\treturn instantiatedResources.get(0);\n \t\t}\n \n-\t\tif (resources.isEmpty()) {\n-\t\t\treturn factoryInvoker.apply(defaultProvider.get())\n-\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Could not instantiate instance using default factory.\"));\n+\t\tif (instantiatedResources.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn factoryInvoker.invoke(defaultProvider.get());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfinal RuntimeException exception = new RuntimeException(\"Could not instantiate instance.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwODY0OQ=="}, "originalCommit": {"oid": "02744178a91af131c0be0337a18e7cc65303495d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk1NTQ4MA==", "bodyText": "Thanks a lot!\nI can confirm that the error reporting is much better now!-", "url": "https://github.com/apache/flink/pull/11536#discussion_r400955480", "createdAt": "2020-03-31T14:24:18Z", "author": {"login": "rmetzger"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/util/FactoryUtils.java", "diffHunk": "@@ -43,24 +45,43 @@\n \t * @throws RuntimeException if no or multiple resources could be instantiated\n \t * @return created instance\n \t */\n-\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final Function<F, Optional<R>> factoryInvoker, final Supplier<F> defaultProvider) {\n+\tpublic static <R, F> R loadAndInvokeFactory(final Class<F> factoryInterface, final FactoryInvoker<F, R> factoryInvoker, final Supplier<F> defaultProvider) {\n \t\tfinal ServiceLoader<F> factories = ServiceLoader.load(factoryInterface);\n \n-\t\tfinal List<R> resources = StreamSupport.stream(factories.spliterator(), false)\n-\t\t\t.map(factoryInvoker)\n-\t\t\t.filter(Optional::isPresent)\n-\t\t\t.map(Optional::get)\n-\t\t\t.collect(Collectors.toList());\n+\t\tfinal List<R> instantiatedResources = new ArrayList<>();\n+\t\tfinal List<Exception> errorsDuringInitialization = new ArrayList<>();\n+\t\tfor (F factory : factories) {\n+\t\t\ttry {\n+\t\t\t\tR resource = factoryInvoker.invoke(factory);\n+\t\t\t\tinstantiatedResources.add(resource);\n+\t\t\t\tLOG.info(\"Instantiated {}.\", resource.getClass().getSimpleName());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tLOG.debug(\"Factory {} could not instantiate instance.\", factory.getClass().getSimpleName(), e);\n+\t\t\t\terrorsDuringInitialization.add(e);\n+\t\t\t}\n+\t\t}\n \n-\t\tif (resources.size() == 1) {\n-\t\t\treturn resources.get(0);\n+\t\tif (instantiatedResources.size() == 1) {\n+\t\t\treturn instantiatedResources.get(0);\n \t\t}\n \n-\t\tif (resources.isEmpty()) {\n-\t\t\treturn factoryInvoker.apply(defaultProvider.get())\n-\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Could not instantiate instance using default factory.\"));\n+\t\tif (instantiatedResources.isEmpty()) {\n+\t\t\ttry {\n+\t\t\t\treturn factoryInvoker.invoke(defaultProvider.get());\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tfinal RuntimeException exception = new RuntimeException(\"Could not instantiate instance.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwODY0OQ=="}, "originalCommit": {"oid": "02744178a91af131c0be0337a18e7cc65303495d"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 740, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}