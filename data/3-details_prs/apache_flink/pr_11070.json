{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0Mjg5Njgw", "number": 11070, "title": "[FLINK-16013][core] Make complex type config options could be parsed correctly", "bodyText": "What is the purpose of the change\nCurrently, if a config option is List type and written to a flink-conf.yaml, it could not be parsed correctly when reloaded from yaml resource. The root cause is we use List#toString to save into the yaml resource. However, when we want to parse a List from a string, we use semicolon to split the value.\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string in Configuration#toMap. And If we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values.\nBrief change log\n\nConvert list to semicolon-separated  string in Configuration#toMap\n\nVerifying this change\n\nThe changes is covered by two new added tests\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-02-12T12:48:29Z", "url": "https://github.com/apache/flink/pull/11070", "merged": true, "mergeCommit": {"oid": "4c43be9a4c61cb89c660660546f3be23132aa13c"}, "closed": true, "closedAt": "2020-02-25T07:56:52Z", "author": {"login": "wangyang0918"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDlzG9ABqjMwMzA2NzA5NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHrbkdgBqjMwNjgwMzkwODU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4830d817cfc5c6d634da6ecd3d81b1c15e986ca", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/c4830d817cfc5c6d634da6ecd3d81b1c15e986ca", "committedDate": "2020-02-12T12:32:52Z", "message": "[FLINK-16013][core] Write and parse list config option correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon separated string in Configuration#toMap. And If we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "8bdc077ea0813363d120eed404a2f4cd93ef0f9a", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/8bdc077ea0813363d120eed404a2f4cd93ef0f9a", "committedDate": "2020-02-12T12:49:34Z", "message": "[FLINK-16013][core] Write and parse list config option correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string in Configuration#toMap. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NTkxMTI3", "url": "https://github.com/apache/flink/pull/11070#pullrequestreview-357591127", "createdAt": "2020-02-12T16:19:03Z", "commit": {"oid": "8bdc077ea0813363d120eed404a2f4cd93ef0f9a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bdc077ea0813363d120eed404a2f4cd93ef0f9a", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/8bdc077ea0813363d120eed404a2f4cd93ef0f9a", "committedDate": "2020-02-12T12:49:34Z", "message": "[FLINK-16013][core] Write and parse list config option correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string in Configuration#toMap. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "991a08ce8916c79874682ae2d088d3e7ab3606a3", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/991a08ce8916c79874682ae2d088d3e7ab3606a3", "committedDate": "2020-02-13T04:18:02Z", "message": "[FLINK-16013][core] Make list and map config options could be parsed correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string. For Map type config option, we need to convert it to comma-separated key:value pairs. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "991a08ce8916c79874682ae2d088d3e7ab3606a3", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/991a08ce8916c79874682ae2d088d3e7ab3606a3", "committedDate": "2020-02-13T04:18:02Z", "message": "[FLINK-16013][core] Make list and map config options could be parsed correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string. For Map type config option, we need to convert it to comma-separated key:value pairs. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "99dad8370f26efe83241865b2f3ec4771fc1b436", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/99dad8370f26efe83241865b2f3ec4771fc1b436", "committedDate": "2020-02-13T04:36:08Z", "message": "[FLINK-16013][core] Make list and map config options could be parsed correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string. For Map type config option, we need to convert it to comma-separated key:value pairs. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99dad8370f26efe83241865b2f3ec4771fc1b436", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/99dad8370f26efe83241865b2f3ec4771fc1b436", "committedDate": "2020-02-13T04:36:08Z", "message": "[FLINK-16013][core] Make list and map config options could be parsed correctly\n\nWhen the configuration value is List type, we need to convert it to a semicolon-separated string. For Map type config option, we need to convert it to comma-separated key:value pairs. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "committedDate": "2020-02-13T05:47:30Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MjY4OTk5", "url": "https://github.com/apache/flink/pull/11070#pullrequestreview-358268999", "createdAt": "2020-02-13T14:40:58Z", "commit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNDo0MDo1OFrOFpWUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyMzoxMlrOFpX_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));\n          \n          \n            \n            \t\t\treturn String.join(\";\", ((List<?>) o).stream().map(this::convertToString).toArray(String[]::new));", "url": "https://github.com/apache/flink/pull/11070#discussion_r378901526", "createdAt": "2020-02-13T14:40:58Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMjAxMg==", "bodyText": "Could you also escape the entries in the list? Parsing lists supports escaping with ' character.\nSo that e.g. A;'A;B';C is parsed as [\"A\", \"A;B\", \"C\"]. The same applies for Maps. I think when writing values out it's safe to always escape them.\nYou can check some examples of escaping in StructuredOptionsSplitterTest or in ReadableWritableConfigurationTest see test for list<string>.", "url": "https://github.com/apache/flink/pull/11070#discussion_r378922012", "createdAt": "2020-02-13T15:12:35Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +958,12 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn String.join(\";\", ((List<?>) o).stream().map(Object::toString).toArray(String[]::new));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkwMTUyNg=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng==", "bodyText": "How about we combine those tests into a single one. Tests that do IO operations might be expensive.", "url": "https://github.com/apache/flink/pull/11070#discussion_r378928356", "createdAt": "2020-02-13T15:22:06Z", "author": {"login": "dawidwys"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,61 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteListConfigOptionAndReload() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyOTA4OQ==", "bodyText": "But on the other hand I do appreciate testing a single thing at a time. I think the classes are not very testable, especially the GlobalConfiguration.", "url": "https://github.com/apache/flink/pull/11070#discussion_r378929089", "createdAt": "2020-02-13T15:23:12Z", "author": {"login": "dawidwys"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,61 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteListConfigOptionAndReload() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyODM1Ng=="}, "originalCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/1fc7132f5b81cc353ce497c2fc6bc1e695abba25", "committedDate": "2020-02-13T05:47:30Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "5b4dce8c06df49fcdb43099e25fae1f24cd13065", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/5b4dce8c06df49fcdb43099e25fae1f24cd13065", "committedDate": "2020-02-14T13:11:41Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b4dce8c06df49fcdb43099e25fae1f24cd13065", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/5b4dce8c06df49fcdb43099e25fae1f24cd13065", "committedDate": "2020-02-14T13:11:41Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "11855f49380d1a81bef1d47e2f7c6e467046c507", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/11855f49380d1a81bef1d47e2f7c6e467046c507", "committedDate": "2020-02-14T13:17:37Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11855f49380d1a81bef1d47e2f7c6e467046c507", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/11855f49380d1a81bef1d47e2f7c6e467046c507", "committedDate": "2020-02-14T13:17:37Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "c7830139600d511b3173a5f36227ccfe0874cd71", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/c7830139600d511b3173a5f36227ccfe0874cd71", "committedDate": "2020-02-14T13:18:20Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7830139600d511b3173a5f36227ccfe0874cd71", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/c7830139600d511b3173a5f36227ccfe0874cd71", "committedDate": "2020-02-14T13:18:20Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "273458ebb91ae5593315fef0862388c08e32f64b", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/273458ebb91ae5593315fef0862388c08e32f64b", "committedDate": "2020-02-14T13:32:00Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "273458ebb91ae5593315fef0862388c08e32f64b", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/273458ebb91ae5593315fef0862388c08e32f64b", "committedDate": "2020-02-14T13:32:00Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "committedDate": "2020-02-17T08:40:37Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjIxMzg1", "url": "https://github.com/apache/flink/pull/11070#pullrequestreview-363221385", "createdAt": "2020-02-24T08:28:38Z", "commit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODoyODozOFrOFtYWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODo1ODo0OFrOFtZDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ==", "bodyText": "I don't necessarily understand why do we need that complex logic.\nCan't we just do \"'\" + value.replaceAll(\"'\", \"''\") + \"'\" ?\nMoreover we should try not to use any external dependencies. Especially guava.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383129131", "createdAt": "2020-02-24T08:28:38Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNzc0Ng==", "bodyText": "How about:\n\t/**\n\t * Escapes the given string with single quotes, if the input string contains a double quote or any of the\n\t * given {@code charsToEscape}. Any single quotes in the input string will be escaped by doubling.\n\t *\n\t * <p>Given that the escapeChar is (;)\n\t *\n\t * <p>Examples:\n\t * <ul>\n\t *     <li>A,B,C,D => A,B,C,D</li>\n\t *     <li>A;BCD => 'A;BCD'</li>\n\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n\t * </ul>\n\t *\n\t * @param string a string which needs to be escaped\n\t * @param charsToEscape escape chars for the escape conditions\n\t * @return escaped string by single quote\n\t */\n\tstatic String escapeWithSingleQuote(String string, String... charsToEscape) {\n\t\tboolean escape = Arrays.stream(charsToEscape).anyMatch(string::contains) || string.contains(\"\\\"\");\n\n\t\tif (escape) {\n\t\t\treturn \"'\" + string.replaceAll(\"'\", \"''\") + \"'\";\n\t\t}\n\n\t\treturn string;\n\t}", "url": "https://github.com/apache/flink/pull/11070#discussion_r383137746", "createdAt": "2020-02-24T08:52:11Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/StructuredOptionsSplitter.java", "diffHunk": "@@ -52,6 +59,37 @@\n \t\treturn processTokens(tokens);\n \t}\n \n+\t/**\n+\t * When write a string out, it is always needs to escaped. If the input string contains double quote or specified\n+\t * escape chars, then it will be escaped by single quote. The single quote will be escaped by doubling.\n+\t *\n+\t * <p>Given that the escapeChar is (;)\n+\t *\n+\t * <p>Examples:\n+\t * <ul>\n+\t *     <li>A,B,C,D => A,B,C,D</li>\n+\t *     <li>A;BCD => 'A;BCD'</li>\n+\t *     <li>AB\"C\"D => 'AB\"C\"D'</li>\n+\t *     <li>AB'\"D:B => 'AB''\"D:B'</li>\n+\t * </ul>\n+\t *\n+\t * @param value a string which needs to be escaped\n+\t * @param escapeChars escape chars for the escape conditions\n+\t * @return escaped string with single quote\n+\t */\n+\tstatic String escapeWithSingleQuote(String value, String... escapeChars) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEyOTEzMQ=="}, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDY2Nw==", "bodyText": "How about we make it a bit more readable?\n\t\t\t\t.map(e -> {\n\t\t\t\t\tString escapedKey = escapeWithSingleQuote(e.getKey().toString(), \":\");\n\t\t\t\t\tString escapedValue = escapeWithSingleQuote(e.getValue().toString(), \":\");\n\n\t\t\t\t\treturn escapeWithSingleQuote(escapedKey + \":\" + escapedValued, \",\");\n\t\t\t\t})", "url": "https://github.com/apache/flink/pull/11070#discussion_r383140667", "createdAt": "2020-02-24T08:58:48Z", "author": {"login": "dawidwys"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/Configuration.java", "diffHunk": "@@ -958,6 +959,15 @@ private String convertToString(Object o) {\n \t\t} else if (o.getClass() == Duration.class) {\n \t\t\tDuration duration = (Duration) o;\n \t\t\treturn String.format(\"%d ns\", duration.toNanos());\n+\t\t} else if (o instanceof List) {\n+\t\t\treturn ((List<?>) o).stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(convertToString(e), \";\"))\n+\t\t\t\t.collect(Collectors.joining(\";\"));\n+\t\t} else if (o instanceof Map) {\n+\t\t\treturn ((Map<?, ?>) o).entrySet().stream()\n+\t\t\t\t.map(e -> escapeWithSingleQuote(escapeWithSingleQuote(e.getKey().toString(), \":\") + \":\"\n+\t\t\t\t\t\t+ escapeWithSingleQuote(e.getValue().toString(), \":\"), \",\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/65c5ac59ffa2453abc8dfb0ca3a3431a504ff407", "committedDate": "2020-02-17T08:40:37Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/b36749feb6378d63620cfe897c0cf9a4a4c84512", "committedDate": "2020-02-24T10:20:36Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMzAwMDA4", "url": "https://github.com/apache/flink/pull/11070#pullrequestreview-363300008", "createdAt": "2020-02-24T10:46:12Z", "commit": {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDo0NjoxM1rOFtcR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDo0NjoxM1rOFtcR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE5MzU3NQ==", "bodyText": "nit: the contract of assertThat is that the first argument is the actual result. Therefore the arguments should swapped.", "url": "https://github.com/apache/flink/pull/11070#discussion_r383193575", "createdAt": "2020-02-24T10:46:13Z", "author": {"login": "dawidwys"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/BootstrapToolsTest.java", "diffHunk": "@@ -533,4 +547,56 @@ public void testGetEnvironmentVariablesErroneous() {\n \n \t\tAssert.assertEquals(0, res.size());\n \t}\n+\n+\t@Test\n+\tpublic void testWriteConfigurationAndReload() throws IOException {\n+\t\tfinal File flinkConfDir = temporaryFolder.newFolder().getAbsoluteFile();\n+\t\tfinal Configuration flinkConfig = new Configuration();\n+\n+\t\tfinal ConfigOption<List<String>> listStringConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-string-key\")\n+\t\t\t.stringType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<String> list = Arrays.asList(\"A,B,C,D\", \"A'B'C'D\", \"A;BCD\", \"AB\\\"C\\\"D\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(listStringConfigOption, list);\n+\t\tassertThat(list, containsInAnyOrder(flinkConfig.get(listStringConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<List<Duration>> listDurationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-list-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.asList()\n+\t\t\t.noDefaultValue();\n+\t\tfinal List<Duration> durationList = Arrays.asList(Duration.ofSeconds(3), Duration.ofMinutes(1));\n+\t\tflinkConfig.set(listDurationConfigOption, durationList);\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\n+\t\tfinal ConfigOption<Map<String, String>> mapConfigOption = ConfigOptions\n+\t\t\t.key(\"test-map-key\")\n+\t\t\t.mapType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Map<String, String> map = new HashMap<>();\n+\t\tmap.put(\"key1\", \"A,B,C,D\");\n+\t\tmap.put(\"key2\", \"A;BCD\");\n+\t\tmap.put(\"key3\", \"A'B'C'D\");\n+\t\tmap.put(\"key4\", \"AB\\\"C\\\"D\");\n+\t\tmap.put(\"key5\", \"AB'\\\"D:B\");\n+\t\tflinkConfig.set(mapConfigOption, map);\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(flinkConfig.get(mapConfigOption).entrySet().toArray()));\n+\n+\t\tfinal ConfigOption<Duration> durationConfigOption = ConfigOptions\n+\t\t\t.key(\"test-duration-key\")\n+\t\t\t.durationType()\n+\t\t\t.noDefaultValue();\n+\t\tfinal Duration duration = Duration.ofMillis(3000);\n+\t\tflinkConfig.set(durationConfigOption, duration);\n+\t\tassertEquals(duration, flinkConfig.get(durationConfigOption));\n+\n+\t\tBootstrapTools.writeConfiguration(flinkConfig, new File(flinkConfDir, FLINK_CONF_FILENAME));\n+\t\tfinal Configuration loadedFlinkConfig = GlobalConfiguration.loadConfiguration(flinkConfDir.getAbsolutePath());\n+\t\tassertThat(list, containsInAnyOrder(loadedFlinkConfig.get(listStringConfigOption).toArray()));\n+\t\tassertThat(durationList, containsInAnyOrder(flinkConfig.get(listDurationConfigOption).toArray()));\n+\t\tassertThat(map.entrySet(), containsInAnyOrder(loadedFlinkConfig.get(mapConfigOption).entrySet().toArray()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512"}, "originalPosition": 104}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b36749feb6378d63620cfe897c0cf9a4a4c84512", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/b36749feb6378d63620cfe897c0cf9a4a4c84512", "committedDate": "2020-02-24T10:20:36Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "e017d47c5004fa2c81d8bc05754865d564bf70a8", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/e017d47c5004fa2c81d8bc05754865d564bf70a8", "committedDate": "2020-02-24T10:59:08Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2109197d2aa39abcf9f91c924462bb6aac3462", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/6a2109197d2aa39abcf9f91c924462bb6aac3462", "committedDate": "2020-02-25T05:39:15Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e017d47c5004fa2c81d8bc05754865d564bf70a8", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/e017d47c5004fa2c81d8bc05754865d564bf70a8", "committedDate": "2020-02-24T10:59:08Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}, "afterCommit": {"oid": "6a2109197d2aa39abcf9f91c924462bb6aac3462", "author": {"user": {"login": "wangyang0918", "name": "Yang Wang"}}, "url": "https://github.com/apache/flink/commit/6a2109197d2aa39abcf9f91c924462bb6aac3462", "committedDate": "2020-02-25T05:39:15Z", "message": "[FLINK-16013][core] Make complex type config options could be parsed correctly\n\nIf the config option value is complex type(e.g. Duration, List, Map), it need to be properly handled when converting to string. For List type, we need to convert it to a semicolon-separated string. For Map type, we need to convert it to comma-separated key:value pairs. For Duration type, we need to convert it to a nano seconds string. And if we want to write the configuration to a yaml file, Configuration#toMap should be used to get all the keys and values."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4327, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}