{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2OTM4MjE2", "number": 14526, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzozMzoxMlrOFK5O8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMjoxNlrOFK7RaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTY3Nzk1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzozMzoxM1rOINx0Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzozMzoxM1rOINx0Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMxODU5MQ==", "bodyText": "move to the metrics package?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551318591", "createdAt": "2021-01-04T13:33:13Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTY5NDUzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/groups/TimeGaugeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzozODowMlrOINx-EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzozODowMlrOINx-EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMTEwNA==", "bodyText": "You could make testing easier by making the time measurements be based on a Clock.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551321104", "createdAt": "2021-01-04T13:38:02Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/groups/TimeGaugeTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.metrics.View;\n+\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/** Tests for {@link TimeGauge}. */\n+public class TimeGaugeTest {\n+    private static final long SLEEP = 10;\n+\n+    @Test\n+    public void testBasicUsage() throws Exception {\n+        TimeGauge gauge = new TimeGauge();\n+\n+        gauge.update();\n+        assertThat(gauge.getValue(), is(0L));\n+\n+        gauge.markStart();\n+        Thread.sleep(SLEEP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTcwNzUwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzo0MjowNFrOINyFwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowMDo1NlrOIN9QRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMzA3Mg==", "bodyText": "It is not obvious from this description why this is important.\nOverall I would wager that it would be difficult to accurately state what this thing does based on the javadocs.\nMaybe something alone the lines of \"...measures how much time is spent in a given state, with entry into that state being signaled by #markStart()\" could help with that.\nThen it also makes it obvious why it is important to account for the case that markEnd has not been called yet.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551323072", "createdAt": "2021-01-04T13:42:04Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1Njc0OQ==", "bodyText": "I've rephrased the comment. Could you take a look? Also I have renamed TimeGauge to TimerGauge.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551356749", "createdAt": "2021-01-04T14:42:30Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMzA3Mg=="}, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwNTk5MA==", "bodyText": "Looks good \ud83d\udc4d", "url": "https://github.com/apache/flink/pull/14526#discussion_r551505990", "createdAt": "2021-01-04T19:00:56Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMzA3Mg=="}, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTcxNjk2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzo0NDo1NFrOINyLZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTowNjowM1rOIN9aHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDUxNg==", "bodyText": "This question may come a bit late, but why are we exposing this as msPerSecond instead of a percentage? I understand they are equivalent (1000 == 100%), but I'd think a percentage would be easier to understand?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551324516", "createdAt": "2021-01-04T13:44:54Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MjcyOA==", "bodyText": "I think this was unconscious decision. It was kind of natural from the perspective that we are measuring idleTime but the MeterView is exposing it a ms/s rate.\nBut yes, maybe percentage would have been better? Do you think it's worth the hassle of changing the API at this point of time?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551352728", "createdAt": "2021-01-04T14:35:37Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDUxNg=="}, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwODUwOA==", "bodyText": "hmm......well we wouldn't necessarily have to change the API in that sense; should be possible to do this in a backwards-compatible way.\nWe could expose these as (idle|backpressure|busy)Ratio with the value being between [0.000, 1.000], and also under the old name(s) with the value multiplied by 1000?\nThe main benefit I see is that this is quite generic and independent of specific units; we can have other metrics doing rates over minutes yet still work the same value range. So it's a bit of future proofing.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551508508", "createdAt": "2021-01-04T19:06:03Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNDUxNg=="}, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTcyNzExOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzo0Nzo0NlrOINyRiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDozMTo1NVrOINzw3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNjA4OA==", "bodyText": "Wrong class? Surely there is no timer-like class in Preconditions.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551326088", "createdAt": "2021-01-04T13:47:46Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MDQ5NA==", "bodyText": "ops, I copied pasted MeterView and missed this comment. Removed.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551350494", "createdAt": "2021-01-04T14:31:55Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyNjA4OA=="}, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTc1NjEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMzo1NjoyNFrOINyi5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo0MzoxN1rOIN0K6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzMDUzNA==", "bodyText": "Couldn't we simplify this be setting currentCount to 0?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551330534", "createdAt": "2021-01-04T13:56:24Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();\n+        }\n+    }\n+\n+    public synchronized void markEnd() {\n+        if (currentMeasurementStart != 0) {\n+            currentCount += System.currentTimeMillis() - currentMeasurementStart;\n+            currentMeasurementStart = 0;\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void update() {\n+        if (currentMeasurementStart != 0) {\n+            long now = System.currentTimeMillis();\n+            currentCount += now - currentMeasurementStart;\n+            currentMeasurementStart = now;\n+        }\n+        lastDifference = (currentCount - previousCount) / UPDATE_INTERVAL_SECONDS;\n+        lastDifference = Math.max(Math.min(lastDifference, 1000), 0);\n+        previousCount = currentCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1NzE2Mw==", "bodyText": "Yes we could :) Thanks for the suggestion.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551357163", "createdAt": "2021-01-04T14:43:17Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();\n+        }\n+    }\n+\n+    public synchronized void markEnd() {\n+        if (currentMeasurementStart != 0) {\n+            currentCount += System.currentTimeMillis() - currentMeasurementStart;\n+            currentMeasurementStart = 0;\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void update() {\n+        if (currentMeasurementStart != 0) {\n+            long now = System.currentTimeMillis();\n+            currentCount += now - currentMeasurementStart;\n+            currentMeasurementStart = now;\n+        }\n+        lastDifference = (currentCount - previousCount) / UPDATE_INTERVAL_SECONDS;\n+        lastDifference = Math.max(Math.min(lastDifference, 1000), 0);\n+        previousCount = currentCount;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMzMDUzNA=="}, "originalCommit": {"oid": "36c6736bfdc8ec1d28bedf3f36c8552415fda611"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTkxMTI5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDozNzoxNFrOINz9dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTo0NTo0MVrOIN2hzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MzcxOQ==", "bodyText": "Do we have to rely on UPDATE_INTERVAL_SECONDS?\nWhy not to record previous update time (currentTimeMillis) instead?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551353719", "createdAt": "2021-01-04T14:37:14Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();\n+        }\n+    }\n+\n+    public synchronized void markEnd() {\n+        if (currentMeasurementStart != 0) {\n+            currentCount += System.currentTimeMillis() - currentMeasurementStart;\n+            currentMeasurementStart = 0;\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void update() {\n+        if (currentMeasurementStart != 0) {\n+            long now = System.currentTimeMillis();\n+            currentCount += now - currentMeasurementStart;\n+            currentMeasurementStart = now;\n+        }\n+        lastDifference = (currentCount - previousCount) / UPDATE_INTERVAL_SECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM5NTc5MQ==", "bodyText": "I've tried to implement it and it looked like not worth the extra complexity. It would make also testing a bit more complicated.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551395791", "createdAt": "2021-01-04T15:45:41Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();\n+        }\n+    }\n+\n+    public synchronized void markEnd() {\n+        if (currentMeasurementStart != 0) {\n+            currentCount += System.currentTimeMillis() - currentMeasurementStart;\n+            currentMeasurementStart = 0;\n+        }\n+    }\n+\n+    @Override\n+    public synchronized void update() {\n+        if (currentMeasurementStart != 0) {\n+            long now = System.currentTimeMillis();\n+            currentCount += now - currentMeasurementStart;\n+            currentMeasurementStart = now;\n+        }\n+        lastDifference = (currentCount - previousCount) / UPDATE_INTERVAL_SECONDS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1MzcxOQ=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTk0NjYwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo0NjoyNlrOIN0SpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo0MzowOVrOIOcO5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA==", "bodyText": "This method (processInput) became quite long now.\nCan we extract getBackPressuredGauge or onOutputUnavailable?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551359140", "createdAt": "2021-01-04T14:46:26Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -400,9 +404,23 @@ protected void processInput(MailboxDefaultAction.Controller controller) throws E\n             controller.allActionsCompleted();\n             return;\n         }\n-        CompletableFuture<?> jointFuture = getInputOutputJointFuture(status);\n-        MailboxDefaultAction.Suspension suspendedDefaultAction = controller.suspendDefaultAction();\n-        assertNoException(jointFuture.thenRun(suspendedDefaultAction::resume));\n+\n+        final Suspension suspension = controller.suspendDefaultAction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4NTQyNQ==", "bodyText": "I have shortened it while you were doing the review, when I was changing the semantic of idleTimeMsPerSecond metric. Can you change the fixup commit if it's good enough?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551385425", "createdAt": "2021-01-04T15:28:34Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -400,9 +404,23 @@ protected void processInput(MailboxDefaultAction.Controller controller) throws E\n             controller.allActionsCompleted();\n             return;\n         }\n-        CompletableFuture<?> jointFuture = getInputOutputJointFuture(status);\n-        MailboxDefaultAction.Suspension suspendedDefaultAction = controller.suspendDefaultAction();\n-        assertNoException(jointFuture.thenRun(suspendedDefaultAction::resume));\n+\n+        final Suspension suspension = controller.suspendDefaultAction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NDI3Mg==", "bodyText": "I think it can be shortened further by inlining gauges and removing if:\nassertNoException(inputProcessor.getAvailableFuture()\n    .thenRun(new ResumeWrapper(\n        suspension,\n        recordWriter.isAvailable()\n                ? ioMetrics.getIdleTimeMsPerSecond()\n                : ioMetrics.getBackPressuredTimePerSecond())));\n\n(the gauge is still computed at the time of creation of callback)\nWDYT?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551444272", "createdAt": "2021-01-04T17:01:55Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -400,9 +404,23 @@ protected void processInput(MailboxDefaultAction.Controller controller) throws E\n             controller.allActionsCompleted();\n             return;\n         }\n-        CompletableFuture<?> jointFuture = getInputOutputJointFuture(status);\n-        MailboxDefaultAction.Suspension suspendedDefaultAction = controller.suspendDefaultAction();\n-        assertNoException(jointFuture.thenRun(suspendedDefaultAction::resume));\n+\n+        final Suspension suspension = controller.suspendDefaultAction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAwNzM3Nw==", "bodyText": "I have simplified it, but in your example you missed that sometimes we need to wait on inputProcessor.getAvailableFuture() and other times on recordWriter.getAvailableFuture()\nSurprisingly this issue was covered by unit tests :)", "url": "https://github.com/apache/flink/pull/14526#discussion_r552007377", "createdAt": "2021-01-05T15:33:44Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -400,9 +404,23 @@ protected void processInput(MailboxDefaultAction.Controller controller) throws E\n             controller.allActionsCompleted();\n             return;\n         }\n-        CompletableFuture<?> jointFuture = getInputOutputJointFuture(status);\n-        MailboxDefaultAction.Suspension suspendedDefaultAction = controller.suspendDefaultAction();\n-        assertNoException(jointFuture.thenRun(suspendedDefaultAction::resume));\n+\n+        final Suspension suspension = controller.suspendDefaultAction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxMzU0MA==", "bodyText": "Thanks for fixing it. I think the current version still under-estimates idle time if both input and output are consistently unavailable. But probably that's fine.", "url": "https://github.com/apache/flink/pull/14526#discussion_r552013540", "createdAt": "2021-01-05T15:43:09Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -400,9 +404,23 @@ protected void processInput(MailboxDefaultAction.Controller controller) throws E\n             controller.allActionsCompleted();\n             return;\n         }\n-        CompletableFuture<?> jointFuture = getInputOutputJointFuture(status);\n-        MailboxDefaultAction.Suspension suspendedDefaultAction = controller.suspendDefaultAction();\n-        assertNoException(jointFuture.thenRun(suspendedDefaultAction::resume));\n+\n+        final Suspension suspension = controller.suspendDefaultAction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM1OTE0MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTk1OTg2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo0OTo0M1rOIN0apg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoyMDo0NlrOIOZAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA==", "bodyText": "IIUC, the same TimeGauge object is now used by SteamTask and BufferWritingResultPartition.\nIf that's true, one of the markStart calls will be ignored, and \"wrong\" markEnd can record currentCount.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551361190", "createdAt": "2021-01-04T14:49:43Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM4MzYxOQ==", "bodyText": "What is the scenario for that to happen?\nBufferWritingResultPartition call happens only when processing input, so it's outside of the [markStart, markEnd] calls from the the StreamTask?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551383619", "createdAt": "2021-01-04T15:25:42Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1NDMyNg==", "bodyText": "I think you are right.\nI was concerned about MailboxProcessor updating idleTime but I see it's removed so it should be fine.\nEdit:\nBut it's still error-prone IMO. If it's not too complicated, I'd replace it with two separate gauges and sum their values during reporting.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551454326", "createdAt": "2021-01-04T17:19:31Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTg5OTA3NQ==", "bodyText": "I agree this is a bit error-prone, but I think adding separate TimerGauge per each place where we are starting a measurement is probably not the way to go. It could quickly multiply the number of declared fields/gauges in TaskIOMetricGroup to facilitate every call place.\nIf this will prove to be a real issue, we could solve this issue for example by bumping a counter in each markStart() call. markEnd would decrease that counter, and we would measure the time between first markStart and last markEnd call. But I think that's over engineering at the moment?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551899075", "createdAt": "2021-01-05T12:22:55Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk2MDYxMg==", "bodyText": "There are only two such places ATM and I don't think adding a (final) object per partition creates a visible overhead.\nBut I agree we can defer this discussion.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551960612", "createdAt": "2021-01-05T14:20:46Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TimeGauge.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+// ----------------------------------------------------------------------------\n+//  This class is largely adapted from \"com.google.common.base.Preconditions\",\n+//  which is part of the \"Guava\" library.\n+//\n+//  Because of frequent issues with dependency conflicts, this class was\n+//  added to the Flink code base to reduce dependency on Guava.\n+// ----------------------------------------------------------------------------\n+\n+package org.apache.flink.runtime.metrics.groups;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.metrics.Gauge;\n+import org.apache.flink.metrics.View;\n+\n+/**\n+ * {@link TimeGauge} encapsulate logic of measuring time rates (like idleTime ms/s). In particularly\n+ * it takes care of the case, when single measurement (as defined by {@link #markStart()} and {@link\n+ * #markEnd()}), crosses the boundary of single {@link #update()} interval. Thanks to the {@link\n+ * #markStart()} {@link TimeGauge} can correctly calculate next value in {@link #update()}, even if\n+ * this measurement hasn't not ended ({@link #markEnd()}).\n+ */\n+public class TimeGauge implements Gauge<Long>, View {\n+    private long previousCount;\n+    private long currentCount;\n+    private long lastDifference;\n+    private long currentMeasurementStart;\n+\n+    public synchronized void markStart() {\n+        if (currentMeasurementStart == 0) {\n+            currentMeasurementStart = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTE5MA=="}, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTk2MjM5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TaskIOMetricGroup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo1MDoyM1rOIN0cNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNDo1MDoyM1rOIN0cNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2MTU4OQ==", "bodyText": "nit: can be inlined", "url": "https://github.com/apache/flink/pull/14526#discussion_r551361589", "createdAt": "2021-01-04T14:50:23Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/TaskIOMetricGroup.java", "diffHunk": "@@ -98,10 +105,26 @@ public Counter getNumBuffersOutCounter() {\n         return numBuffersOut;\n     }\n \n-    public Meter getIdleTimeMsPerSecond() {\n+    public TimeGauge getIdleTimeMsPerSecond() {\n         return idleTimePerSecond;\n     }\n \n+    public TimeGauge getBackPressuredTimePerSecond() {\n+        return backPressuredTimePerSecond;\n+    }\n+\n+    public void setEnableBusyTime(boolean enabled) {\n+        busyTimeEnabled = enabled;\n+    }\n+\n+    private double getBusyTimePerSecond() {\n+        double v =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71569bc3355e08260077a05b0c349bfa74ee4700"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDAwNjI3OnYy", "diffSide": "RIGHT", "path": "flink-runtime-web/web-dashboard/src/app/share/common/dagre/node.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMDo0NlrOIN02kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMDo0NlrOIN02kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2ODMzNw==", "bodyText": "Typo?", "url": "https://github.com/apache/flink/pull/14526#discussion_r551368337", "createdAt": "2021-01-04T15:00:46Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime-web/web-dashboard/src/app/share/common/dagre/node.component.ts", "diffHunk": "@@ -9,7 +9,7 @@\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n+ * Unless requilightRed by applicable law or agreed to in writing, software", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac07adaea38d996036646e20e988fef3e0b35427"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDAxMTkzOnYy", "diffSide": "RIGHT", "path": "flink-runtime-web/web-dashboard/src/app/share/common/dagre/node.component.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMjoxNlrOIN06JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNTowMjoxNlrOIN06JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM2OTI1Mw==", "bodyText": "I think it's better to name these colors semantically, e.g. back-pressuring instead of red, back-pressured instead of black.", "url": "https://github.com/apache/flink/pull/14526#discussion_r551369253", "createdAt": "2021-01-04T15:02:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime-web/web-dashboard/src/app/share/common/dagre/node.component.ts", "diffHunk": "@@ -31,8 +31,18 @@ export class NodeComponent {\n   operatorStrategy: string | null;\n   parallelism: number | null;\n   lowWatermark: number | null | undefined;\n+  backPressuredPercentage: number | undefined = NaN;\n+  busyPercentage: number | undefined = NaN;\n+  backgroundColor: string | undefined;\n+  borderColor: string | undefined;\n   height = 0;\n   id: string;\n+  lightRed = '#ee6464';\n+  lightBlue = '#5db1ff';\n+  lightBlack = '#888888';\n+  red = '#ee2222';\n+  blue = '#1890ff';\n+  black = '#000000';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac07adaea38d996036646e20e988fef3e0b35427"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4603, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}