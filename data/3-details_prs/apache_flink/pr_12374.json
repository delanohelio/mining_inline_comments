{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MjkzNjk3", "number": 12374, "title": "[FLINK-17992][checkpointing] Exception from RemoteInputChannel#onBuffer should not fail the whole NetworkClientHandler", "bodyText": "What is the purpose of the change\nRemoteInputChannel#onBuffer is invoked by CreditBasedPartitionRequestClientHandler while receiving and decoding the network data. #onBuffer can throw exceptions which would tag the error in client handler and fail all the added input channels inside handler. Then it would cause a tricky potential issue as following.\nIf the RemoteInputChannel is canceling by canceler thread, then the task thread might exit early than canceler thread terminate. That means the PartitionRequestClient might not be closed (triggered by canceler thread) while the new task attempt is already deployed into the same TaskManager. Therefore the new task might reuse the previous PartitionRequestClient while requesting partitions, but note that the respective client handler was already tagged an error before during above RemoteInputChannel#onBuffer, to cause the next round unnecessary failover.\nThe solution is to only fail the respective task when its internal RemoteInputChannel#onBuffer throws any exceptions instead of failing the whole channels inside client handler, then the client is still healthy and can also be reused by other input channels as long as it is not released yet.\nBrief change log\n\nNot fail the whole network client handler while exception in `RemoteInputChannel#onBuffer\n\nVerifying this change\nAdded new unit test CreditBasedPartitionRequestClientHandlerTest#testRemoteInputChannelOnBufferException\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-05-28T07:10:52Z", "url": "https://github.com/apache/flink/pull/12374", "merged": true, "mergeCommit": {"oid": "34e6d22bdd179796daf6df46738d85303a839704"}, "closed": true, "closedAt": "2020-05-29T06:35:54Z", "author": {"login": "zhijiangW"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclqi25AFqTQxOTkzOTI3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl5KMOABqjMzODUzOTAwMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTM5Mjc1", "url": "https://github.com/apache/flink/pull/12374#pullrequestreview-419939275", "createdAt": "2020-05-28T09:35:21Z", "commit": {"oid": "eeaa680286b6dd389acebbf1d8695ba94ff5ec59"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozNToyMVrOGbtTxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTozNToyMVrOGbtTxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcwNzA3OQ==", "bodyText": "assertEquals(expectedMessage, ignored.getMessage()) ?", "url": "https://github.com/apache/flink/pull/12374#discussion_r431707079", "createdAt": "2020-05-28T09:35:21Z", "author": {"login": "Jiayi-Liao"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandlerTest.java", "diffHunk": "@@ -486,6 +488,47 @@ public void testReadBufferResponseAfterRemovingChannel() throws Exception {\n \t\ttestReadBufferResponseWithReleasingOrRemovingChannel(true, false);\n \t}\n \n+\t@Test\n+\tpublic void testRemoteInputChannelOnBufferException() throws Exception {\n+\t\t// Setup\n+\t\tfinal int bufferSize = 1024;\n+\t\tfinal String expectedMessage = \"test exception on buffer\";\n+\t\tfinal NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, bufferSize, 2);\n+\t\tfinal SingleInputGate inputGate = createSingleInputGate(1, networkBufferPool);\n+\t\tfinal RemoteInputChannel inputChannel = new TestRemoteInputChannelForError(inputGate, expectedMessage);\n+\t\tfinal CreditBasedPartitionRequestClientHandler handler = new CreditBasedPartitionRequestClientHandler();\n+\n+\t\ttry {\n+\t\t\tinputGate.setInputChannels(inputChannel);\n+\t\t\tinputGate.assignExclusiveSegments();\n+\t\t\tinputGate.requestPartitions();\n+\t\t\thandler.addInputChannel(inputChannel);\n+\n+\t\t\tfinal BufferResponse bufferResponse = createBufferResponse(\n+\t\t\t\tTestBufferFactory.createBuffer(bufferSize),\n+\t\t\t\t0,\n+\t\t\t\tinputChannel.getInputChannelId(),\n+\t\t\t\t1,\n+\t\t\t\tnew NetworkBufferAllocator(handler));\n+\n+\t\t\t// It will trigger an expected exception from TestRemoteInputChannelForError#onBuffer\n+\t\t\thandler.channelRead(null, bufferResponse);\n+\n+\t\t\t// The handler should not be tagged as error for above excepted exception\n+\t\t\thandler.checkError();\n+\n+\t\t\ttry {\n+\t\t\t\t// The input channel should be tagged as error and the respective exception is thrown via #getNext\n+\t\t\t\tinputGate.getNext();\n+\t\t\t} catch (IOException ignored) {\n+\t\t\t\tassertEquals(\"exception for test\", ignored.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeaa680286b6dd389acebbf1d8695ba94ff5ec59"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eeaa680286b6dd389acebbf1d8695ba94ff5ec59", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/eeaa680286b6dd389acebbf1d8695ba94ff5ec59", "committedDate": "2020-05-28T07:00:34Z", "message": "[FLINK-17992][checkpointing] Exception from RemoteInputChannel#onBuffer should not fail the whole NetworkClientHandler\n\nRemoteInputChannel#onBuffer is invoked by CreditBasedPartitionRequestClientHandler while receiving and decoding the network data. #onBuffer can\nthrow exceptions which would tag the error in client handler and fail all the added input channels inside handler. Then it would cause a tricky\npotential issue as following.\n\nIf the RemoteInputChannel is canceling by canceler thread, then the task thread might exit early than canceler thread terminate. That means the\nPartitionRequestClient might not be closed (triggered by canceler thread) while the new task attempt is already deployed into the same TaskManager.\nTherefore the new task might reuse the previous PartitionRequestClient while requesting partitions, but note that the respective client handler was\nalready tagged an error before during above RemoteInputChannel#onBuffer, to cause the next round unnecessary failover.\n\nThe solution is to only fail the respective task when its internal RemoteInputChannel#onBuffer throws any exceptions instead of failing the whole\nchannels inside client handler, then the client is still healthy and can also be reused by other input channels as long as it is not released yet."}, "afterCommit": {"oid": "a4a4f7c5d2e2db50eda956b89b6b38e0f0c2e0b3", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/a4a4f7c5d2e2db50eda956b89b6b38e0f0c2e0b3", "committedDate": "2020-05-28T11:28:11Z", "message": "[FLINK-17992][checkpointing] Exception from RemoteInputChannel#onBuffer should not fail the whole NetworkClientHandler\n\nRemoteInputChannel#onBuffer is invoked by CreditBasedPartitionRequestClientHandler while receiving and decoding the network data. #onBuffer can\nthrow exceptions which would tag the error in client handler and fail all the added input channels inside handler. Then it would cause a tricky\npotential issue as following.\n\nIf the RemoteInputChannel is canceling by canceler thread, then the task thread might exit early than canceler thread terminate. That means the\nPartitionRequestClient might not be closed (triggered by canceler thread) while the new task attempt is already deployed into the same TaskManager.\nTherefore the new task might reuse the previous PartitionRequestClient while requesting partitions, but note that the respective client handler was\nalready tagged an error before during above RemoteInputChannel#onBuffer, to cause the next round unnecessary failover.\n\nThe solution is to only fail the respective task when its internal RemoteInputChannel#onBuffer throws any exceptions instead of failing the whole\nchannels inside client handler, then the client is still healthy and can also be reused by other input channels as long as it is not released yet."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDI2NDE2", "url": "https://github.com/apache/flink/pull/12374#pullrequestreview-420026416", "createdAt": "2020-05-28T11:44:33Z", "commit": {"oid": "a4a4f7c5d2e2db50eda956b89b6b38e0f0c2e0b3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo0NDozM1rOGbxa9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMTo0NDozM1rOGbxa9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc3NDQ1Mw==", "bodyText": "nit rename to:\ntestDoNotFailHandlerOnSingleChannelFailure()\nor\ntestDoNotFailHandlerOnSingleChannelOnBufferFailure()\n? I think that would convey the purpose of the test better, instead of describing what's happening inside.", "url": "https://github.com/apache/flink/pull/12374#discussion_r431774453", "createdAt": "2020-05-28T11:44:33Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandlerTest.java", "diffHunk": "@@ -486,6 +488,47 @@ public void testReadBufferResponseAfterRemovingChannel() throws Exception {\n \t\ttestReadBufferResponseWithReleasingOrRemovingChannel(true, false);\n \t}\n \n+\t@Test\n+\tpublic void testRemoteInputChannelOnBufferException() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a4f7c5d2e2db50eda956b89b6b38e0f0c2e0b3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ce42b5686283f5eb3b0118c66d24dda2c0096a", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/59ce42b5686283f5eb3b0118c66d24dda2c0096a", "committedDate": "2020-05-29T02:36:19Z", "message": "[FLINK-17992][checkpointing] Exception from RemoteInputChannel#onBuffer should not fail the whole NetworkClientHandler\n\nRemoteInputChannel#onBuffer is invoked by CreditBasedPartitionRequestClientHandler while receiving and decoding the network data. #onBuffer can\nthrow exceptions which would tag the error in client handler and fail all the added input channels inside handler. Then it would cause a tricky\npotential issue as following.\n\nIf the RemoteInputChannel is canceling by canceler thread, then the task thread might exit early than canceler thread terminate. That means the\nPartitionRequestClient might not be closed (triggered by canceler thread) while the new task attempt is already deployed into the same TaskManager.\nTherefore the new task might reuse the previous PartitionRequestClient while requesting partitions, but note that the respective client handler was\nalready tagged an error before during above RemoteInputChannel#onBuffer, to cause the next round unnecessary failover.\n\nThe solution is to only fail the respective task when its internal RemoteInputChannel#onBuffer throws any exceptions instead of failing the whole\nchannels inside client handler, then the client is still healthy and can also be reused by other input channels as long as it is not released yet."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4a4f7c5d2e2db50eda956b89b6b38e0f0c2e0b3", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/a4a4f7c5d2e2db50eda956b89b6b38e0f0c2e0b3", "committedDate": "2020-05-28T11:28:11Z", "message": "[FLINK-17992][checkpointing] Exception from RemoteInputChannel#onBuffer should not fail the whole NetworkClientHandler\n\nRemoteInputChannel#onBuffer is invoked by CreditBasedPartitionRequestClientHandler while receiving and decoding the network data. #onBuffer can\nthrow exceptions which would tag the error in client handler and fail all the added input channels inside handler. Then it would cause a tricky\npotential issue as following.\n\nIf the RemoteInputChannel is canceling by canceler thread, then the task thread might exit early than canceler thread terminate. That means the\nPartitionRequestClient might not be closed (triggered by canceler thread) while the new task attempt is already deployed into the same TaskManager.\nTherefore the new task might reuse the previous PartitionRequestClient while requesting partitions, but note that the respective client handler was\nalready tagged an error before during above RemoteInputChannel#onBuffer, to cause the next round unnecessary failover.\n\nThe solution is to only fail the respective task when its internal RemoteInputChannel#onBuffer throws any exceptions instead of failing the whole\nchannels inside client handler, then the client is still healthy and can also be reused by other input channels as long as it is not released yet."}, "afterCommit": {"oid": "59ce42b5686283f5eb3b0118c66d24dda2c0096a", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/59ce42b5686283f5eb3b0118c66d24dda2c0096a", "committedDate": "2020-05-29T02:36:19Z", "message": "[FLINK-17992][checkpointing] Exception from RemoteInputChannel#onBuffer should not fail the whole NetworkClientHandler\n\nRemoteInputChannel#onBuffer is invoked by CreditBasedPartitionRequestClientHandler while receiving and decoding the network data. #onBuffer can\nthrow exceptions which would tag the error in client handler and fail all the added input channels inside handler. Then it would cause a tricky\npotential issue as following.\n\nIf the RemoteInputChannel is canceling by canceler thread, then the task thread might exit early than canceler thread terminate. That means the\nPartitionRequestClient might not be closed (triggered by canceler thread) while the new task attempt is already deployed into the same TaskManager.\nTherefore the new task might reuse the previous PartitionRequestClient while requesting partitions, but note that the respective client handler was\nalready tagged an error before during above RemoteInputChannel#onBuffer, to cause the next round unnecessary failover.\n\nThe solution is to only fail the respective task when its internal RemoteInputChannel#onBuffer throws any exceptions instead of failing the whole\nchannels inside client handler, then the client is still healthy and can also be reused by other input channels as long as it is not released yet."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4520, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}