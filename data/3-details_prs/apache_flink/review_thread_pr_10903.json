{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTMxMzc0", "number": 10903, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwMjowNzowNFrODZFYgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxMjo1OVrODZNJjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjI5MTg0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableMutableObjectIterator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwMjowNzowNVrOFfSFcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxNzoxMFrOFfeAmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjQ4MA==", "bodyText": "We should avoid code duplication. Maybe it's better to add a utility function.", "url": "https://github.com/apache/flink/pull/10903#discussion_r368346480", "createdAt": "2020-01-20T02:07:05Z", "author": {"login": "KarmaGYZ"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableMutableObjectIterator.java", "diffHunk": "@@ -204,8 +204,16 @@ public void consumeAndCacheRemainingData() throws IOException {\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"SpillingIterator: Error writing element to buffer.\", e);\n \t\t\t\t}\n-\t\t\t\tthis.elementCount++;\n+\t\t\t\tincreaseElementCount();\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1MjA1Mg==", "bodyText": "Hi, @KarmaGYZ Thanks for your comment.\nSpillingResettableIterator and SpillingResettableMutableObjectIterator  both implemented ResettableIterator, but they are two separate components. Although the logic of adding elementCount is somewhat similar, it is actually related to their respective implementation logic, so i think there is no need to share it.", "url": "https://github.com/apache/flink/pull/10903#discussion_r368352052", "createdAt": "2020-01-20T02:48:05Z", "author": {"login": "killxdcj"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableMutableObjectIterator.java", "diffHunk": "@@ -204,8 +204,16 @@ public void consumeAndCacheRemainingData() throws IOException {\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"SpillingIterator: Error writing element to buffer.\", e);\n \t\t\t\t}\n-\t\t\t\tthis.elementCount++;\n+\t\t\t\tincreaseElementCount();\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjQ4MA=="}, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM2MDA0NA==", "bodyText": "I don't think so. The logic of increaseElementCount in two classes is both check the numerical overflow and increase it. Am I understand it correctly?", "url": "https://github.com/apache/flink/pull/10903#discussion_r368360044", "createdAt": "2020-01-20T03:42:39Z", "author": {"login": "KarmaGYZ"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableMutableObjectIterator.java", "diffHunk": "@@ -204,8 +204,16 @@ public void consumeAndCacheRemainingData() throws IOException {\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"SpillingIterator: Error writing element to buffer.\", e);\n \t\t\t\t}\n-\t\t\t\tthis.elementCount++;\n+\t\t\t\tincreaseElementCount();\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjQ4MA=="}, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTg1OA==", "bodyText": "Maybe you can think of it this way, there may be many such scenes in reality, and you need to check the overflow, so whether all the places to check the overflow need to use the same code.\nAnd the point is that they are two separate components, and there is no need to reuse them for reuse.", "url": "https://github.com/apache/flink/pull/10903#discussion_r368415858", "createdAt": "2020-01-20T08:23:58Z", "author": {"login": "killxdcj"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableMutableObjectIterator.java", "diffHunk": "@@ -204,8 +204,16 @@ public void consumeAndCacheRemainingData() throws IOException {\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"SpillingIterator: Error writing element to buffer.\", e);\n \t\t\t\t}\n-\t\t\t\tthis.elementCount++;\n+\t\t\t\tincreaseElementCount();\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjQ4MA=="}, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MTg1MA==", "bodyText": "Extracting that logic to some NumericUtil#safeIncrement in flink-core could be a viable option.", "url": "https://github.com/apache/flink/pull/10903#discussion_r368541850", "createdAt": "2020-01-20T13:17:10Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableMutableObjectIterator.java", "diffHunk": "@@ -204,8 +204,16 @@ public void consumeAndCacheRemainingData() throws IOException {\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new RuntimeException(\"SpillingIterator: Error writing element to buffer.\", e);\n \t\t\t\t}\n-\t\t\t\tthis.elementCount++;\n+\t\t\t\tincreaseElementCount();\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM0NjQ4MA=="}, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzU2NDI4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableIterator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzoxMjo1OVrOFfd6Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjoyODozNFrOFfs8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDE5MQ==", "bodyText": "This method is a bit overengineered: even if we are doing nothing than just incrementing the long value, it takes 60 years on a 4 GHz CPU to reach the overflow in java.\nNevertheless, I expect the branch prediction to also figure that out and not cause any performance degradation.", "url": "https://github.com/apache/flink/pull/10903#discussion_r368540191", "createdAt": "2020-01-20T13:12:59Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableIterator.java", "diffHunk": "@@ -189,4 +189,12 @@ public void remove() {\n \t\t\treturn memory;\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4NjU0MA==", "bodyText": "I agree with you, it was realy a bit overengineered, so I removed the logic of checking long overflow.", "url": "https://github.com/apache/flink/pull/10903#discussion_r368786540", "createdAt": "2020-01-21T02:28:34Z", "author": {"login": "killxdcj"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/resettable/SpillingResettableIterator.java", "diffHunk": "@@ -189,4 +189,12 @@ public void remove() {\n \t\t\treturn memory;\n \t\t}\n \t}\n+\n+\tprivate void increaseElementCount() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU0MDE5MQ=="}, "originalCommit": {"oid": "4289c3910b39b13938aafc1337cc9c127e46fedd"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1252, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}