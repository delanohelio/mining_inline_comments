{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNzQ1MzMy", "number": 13333, "title": "[FLINK-18823][format] Support serialization for debezium-json format", "bodyText": "What is the purpose of the change\nCurrently, debezium-json format only support deserialization, but not support serialization, which is not convenient for users to writing changelogs to an message queue. The serialization for debezium-json could follow the json strcuture of debezium, but should consider currently Flink can't combine UPDATE_BEFORE and UPDATE_AFTER into a single UPDATE message. This could encode UPDATE_BEFORE and UDPATE_AFTER as DELETE and INSERT debezium messages. Therefore, this could support serialization for debezium-json format\nBrief change log\n\nAdd DebeziumJsonSerializationSchema which serialization schema from Flink Table/SQL internal data structure RowData to Debezium JSON.\nDebeziumJsonFormatFactory supports createEncodingFormat with creating EncodingFormat for DebeziumJsonSerializationSchema.\n\nVerifying this change\n\nDebeziumJsonSerDeSchemaTest add test cases for DebeziumJsonSerializationSchema to verify the serialization schema to Debezium JSON.\nDebeziumJsonFormatFactoryTest add test cases for creating DebeziumJsonSerializationSchema and DebeziumJsonDeserializationSchema to verify the serialization and deserialization schema for DebeziumJsonFormatFactory.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-09-06T12:08:45Z", "url": "https://github.com/apache/flink/pull/13333", "merged": true, "mergeCommit": {"oid": "db378c11c750b0fd92099d870575b00941857872"}, "closed": true, "closedAt": "2020-09-10T08:23:00Z", "author": {"login": "SteNicholas"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGNLQ5gH2gAyNDgwNzQ1MzMyOmY1MDgwZjI4Nzc2NDEwN2MxOTUyNTVjNDQyMzUxNzBjMmZiNjRkMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHcNL7gFqTQ4NTY4MzA5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f5080f287764107c195255c44235170c2fb64d23", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/f5080f287764107c195255c44235170c2fb64d23", "committedDate": "2020-09-06T12:01:51Z", "message": "[FLINK-18823][format] Support serialization for debezium-json format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDU0NDQw", "url": "https://github.com/apache/flink/pull/13333#pullrequestreview-484054440", "createdAt": "2020-09-08T11:49:18Z", "commit": {"oid": "f5080f287764107c195255c44235170c2fb64d23"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo0OToxOFrOHOZOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTo1MzowMlrOHOZWJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NTQ2NQ==", "bodyText": "Indent.", "url": "https://github.com/apache/flink/pull/13333#discussion_r484855465", "createdAt": "2020-09-08T11:49:18Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactory.java", "diffHunk": "@@ -104,7 +105,31 @@ public ChangelogMode getChangelogMode() {\n \tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n \t\t\tDynamicTableFactory.Context context,\n \t\t\tReadableConfig formatOptions) {\n-\t\tthrow new UnsupportedOperationException(\"Debezium format doesn't support as a sink format yet.\");\n+\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n+\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n+\n+\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic ChangelogMode getChangelogMode() {\n+\t\t\t\treturn ChangelogMode.newBuilder()\n+\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n+\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n+\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n+\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n+\t\t\t\t\t.build();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n+\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5080f287764107c195255c44235170c2fb64d23"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NjczOQ==", "bodyText": "The insert and delete operation string in debezium should be \"c\" and \"d\".", "url": "https://github.com/apache/flink/pull/13333#discussion_r484856739", "createdAt": "2020-09-08T11:51:50Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.debezium;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to Debezium JSON.\n+ *\n+ * @see <a href=\"https://debezium.io/\">Debezium</a>\n+ */\n+public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5080f287764107c195255c44235170c2fb64d23"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NzI5Ng==", "bodyText": "This is wrong. Debezium serialize insert data in \"after\", but delete data in \"before\".", "url": "https://github.com/apache/flink/pull/13333#discussion_r484857296", "createdAt": "2020-09-08T11:52:53Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.debezium;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to Debezium JSON.\n+ *\n+ * @see <a href=\"https://debezium.io/\">Debezium</a>\n+ */\n+public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\n+\t/** The serializer to serialize Debezium JSON data. **/\n+\tprivate final JsonRowDataSerializationSchema jsonSerializer;\n+\n+\tprivate transient GenericRowData genericRowData;\n+\n+\tpublic DebeziumJsonSerializationSchema(RowType rowType, TimestampFormat timestampFormat) {\n+\t\tjsonSerializer = new JsonRowDataSerializationSchema(\n+\t\t\tcreateJsonRowType(fromLogicalToDataType(rowType)),\n+\t\t\ttimestampFormat);\n+\t}\n+\n+\t@Override\n+\tpublic void open(InitializationContext context) {\n+\t\tgenericRowData = new GenericRowData(2);\n+\t}\n+\n+\t@Override\n+\tpublic byte[] serialize(RowData rowData) {\n+\t\ttry {\n+\t\t\tgenericRowData.setField(0, rowData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5080f287764107c195255c44235170c2fb64d23"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NzM4Mg==", "bodyText": "This is wrong. Debezium serialize insert data in \"after\", but delete data in \"before\".", "url": "https://github.com/apache/flink/pull/13333#discussion_r484857382", "createdAt": "2020-09-08T11:53:02Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.debezium;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to Debezium JSON.\n+ *\n+ * @see <a href=\"https://debezium.io/\">Debezium</a>\n+ */\n+public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\n+\t/** The serializer to serialize Debezium JSON data. **/\n+\tprivate final JsonRowDataSerializationSchema jsonSerializer;\n+\n+\tprivate transient GenericRowData genericRowData;\n+\n+\tpublic DebeziumJsonSerializationSchema(RowType rowType, TimestampFormat timestampFormat) {\n+\t\tjsonSerializer = new JsonRowDataSerializationSchema(\n+\t\t\tcreateJsonRowType(fromLogicalToDataType(rowType)),\n+\t\t\ttimestampFormat);\n+\t}\n+\n+\t@Override\n+\tpublic void open(InitializationContext context) {\n+\t\tgenericRowData = new GenericRowData(2);\n+\t}\n+\n+\t@Override\n+\tpublic byte[] serialize(RowData rowData) {\n+\t\ttry {\n+\t\t\tgenericRowData.setField(0, rowData);\n+\t\t\tgenericRowData.setField(1, rowKind2String(rowData.getRowKind()));\n+\t\t\treturn jsonSerializer.serialize(genericRowData);\n+\t\t} catch (Throwable t) {\n+\t\t\tthrow new RuntimeException(format(\"Could not serialize row '%s'.\", rowData), t);\n+\t\t}\n+\t}\n+\n+\tprivate StringData rowKind2String(RowKind rowKind) {\n+\t\tswitch (rowKind) {\n+\t\t\tcase INSERT:\n+\t\t\tcase UPDATE_AFTER:\n+\t\t\t\treturn OP_INSERT;\n+\t\t\tcase UPDATE_BEFORE:\n+\t\t\tcase DELETE:\n+\t\t\t\treturn OP_DELETE;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(format(\"Unsupported operation '%s' for row kind.\", rowKind));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tDebeziumJsonSerializationSchema that = (DebeziumJsonSerializationSchema) o;\n+\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(jsonSerializer);\n+\t}\n+\n+\tprivate static RowType createJsonRowType(DataType databaseSchema) {\n+\t\t// Debezium JSON contains some other information, e.g. \"source\", \"ts_ms\"\n+\t\t// but we don't need them.\n+\t\treturn (RowType) DataTypes.ROW(\n+\t\t\tDataTypes.FIELD(\"after\", databaseSchema),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5080f287764107c195255c44235170c2fb64d23"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "committedDate": "2020-09-09T06:55:43Z", "message": "[FLINK-18823][format] Support serialization for debezium-json format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzcyNDc0", "url": "https://github.com/apache/flink/pull/13333#pullrequestreview-484772474", "createdAt": "2020-09-09T08:23:23Z", "commit": {"oid": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoyMzoyNFrOHO8Nog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODoyMzoyNFrOHO8Nog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyODY0Mg==", "bodyText": "We should also consider UPDATE_AFTER and UPDATE_BEFORE .", "url": "https://github.com/apache/flink/pull/13333#discussion_r485428642", "createdAt": "2020-09-09T08:23:24Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -58,14 +58,20 @@ public DebeziumJsonSerializationSchema(RowType rowType, TimestampFormat timestam\n \n \t@Override\n \tpublic void open(InitializationContext context) {\n-\t\tgenericRowData = new GenericRowData(2);\n+\t\tgenericRowData = new GenericRowData(3);\n \t}\n \n \t@Override\n \tpublic byte[] serialize(RowData rowData) {\n \t\ttry {\n-\t\t\tgenericRowData.setField(0, rowData);\n-\t\t\tgenericRowData.setField(1, rowKind2String(rowData.getRowKind()));\n+\t\t\tif (RowKind.INSERT == rowData.getRowKind()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb34b6bc717ae235ce8a3985601617f5be839de5", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/bb34b6bc717ae235ce8a3985601617f5be839de5", "committedDate": "2020-09-09T09:23:30Z", "message": "[FLINK-18823][format] Support serialization for debezium-json format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NjgzMDk5", "url": "https://github.com/apache/flink/pull/13333#pullrequestreview-485683099", "createdAt": "2020-09-10T08:06:27Z", "commit": {"oid": "bb34b6bc717ae235ce8a3985601617f5be839de5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4466, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}