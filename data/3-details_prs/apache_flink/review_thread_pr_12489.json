{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3OTU2ODUz", "number": 12489, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzo0NVrOEC2SZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzo1MjowOVrOEC2o9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDIyMDU1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzo0NVrOGfjgHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDowNDoxMFrOGgXJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDcwMw==", "bodyText": "nit: can use new TestCheckpointStorageWorkerView(100) for simple.", "url": "https://github.com/apache/flink/pull/12489#discussion_r435740703", "createdAt": "2020-06-05T07:33:45Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -373,4 +405,35 @@ public void processWatermark(Watermark mark) throws Exception {\n \t\tpublic void processLatencyMarker(LatencyMarker latencyMarker) {\n \t\t}\n \t}\n+\n+\tprivate static SubtaskCheckpointCoordinator coordinator(boolean unalignedCheckpointEnabled, ChannelStateWriter channelStateWriter) throws IOException {\n+\t\treturn new SubtaskCheckpointCoordinatorImpl(\n+\t\t\tcheckpointStorageWorkerView(100),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96651fc6d199bad117ee85669e3b04029f64d2e3"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4NjgzMA==", "bodyText": "Good point!", "url": "https://github.com/apache/flink/pull/12489#discussion_r436586830", "createdAt": "2020-06-08T10:04:10Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -373,4 +405,35 @@ public void processWatermark(Watermark mark) throws Exception {\n \t\tpublic void processLatencyMarker(LatencyMarker latencyMarker) {\n \t\t}\n \t}\n+\n+\tprivate static SubtaskCheckpointCoordinator coordinator(boolean unalignedCheckpointEnabled, ChannelStateWriter channelStateWriter) throws IOException {\n+\t\treturn new SubtaskCheckpointCoordinatorImpl(\n+\t\t\tcheckpointStorageWorkerView(100),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDcwMw=="}, "originalCommit": {"oid": "96651fc6d199bad117ee85669e3b04029f64d2e3"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDIyMDg0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzo1M1rOGfjgUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzo1M1rOGfjgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDc1Mw==", "bodyText": "nit: checkNotNull(channelStateWriter)", "url": "https://github.com/apache/flink/pull/12489#discussion_r435740753", "createdAt": "2020-06-05T07:33:53Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -142,7 +166,7 @@\n \t\tthis.env = checkNotNull(env);\n \t\tthis.asyncExceptionHandler = checkNotNull(asyncExceptionHandler);\n \t\tthis.actionExecutor = checkNotNull(actionExecutor);\n-\t\tthis.channelStateWriter = unalignedCheckpointEnabled ? openChannelStateWriter() : ChannelStateWriter.NO_OP;\n+\t\tthis.channelStateWriter = channelStateWriter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96651fc6d199bad117ee85669e3b04029f64d2e3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDIyMDk5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzo1N1rOGfjgbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzozMzo1N1rOGfjgbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0MDc4MQ==", "bodyText": "nit: checkpointStorage argument also in separate line", "url": "https://github.com/apache/flink/pull/12489#discussion_r435740781", "createdAt": "2020-06-05T07:33:57Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -134,6 +132,32 @@\n \t\t\tboolean unalignedCheckpointEnabled,\n \t\t\tBiFunctionWithException<ChannelStateWriter, Long, CompletableFuture<Void>, IOException> prepareInputSnapshot,\n \t\t\tint maxRecordAbortedCheckpoints) throws IOException {\n+\t\tthis(checkpointStorage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96651fc6d199bad117ee85669e3b04029f64d2e3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDI3ODMwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/TestCheckpointStorageWorkerView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzo1MjowOVrOGfkEHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDowMzoxOFrOGgXHug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0OTkxOA==", "bodyText": "return taskOwnedCheckpointStreamFactory directly?", "url": "https://github.com/apache/flink/pull/12489#discussion_r435749918", "createdAt": "2020-06-05T07:52:09Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/TestCheckpointStorageWorkerView.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.state;\n+\n+import org.apache.flink.runtime.state.memory.MemCheckpointStreamFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Non-persistent {@link CheckpointStorageWorkerView} for tests. Uses {@link MemCheckpointStreamFactory}.\n+ */\n+public class TestCheckpointStorageWorkerView implements CheckpointStorageWorkerView {\n+\n+\tprivate final int maxStateSize;\n+\tprivate final MemCheckpointStreamFactory taskOwnedCheckpointStreamFactory;\n+\tprivate final CheckpointedStateScope taskOwnedStateScope;\n+\n+\tpublic TestCheckpointStorageWorkerView(int maxStateSize) {\n+\t\tthis(maxStateSize, CheckpointedStateScope.EXCLUSIVE);\n+\t}\n+\n+\tprivate TestCheckpointStorageWorkerView(int maxStateSize, CheckpointedStateScope taskOwnedStateScope) {\n+\t\tthis.maxStateSize = maxStateSize;\n+\t\tthis.taskOwnedCheckpointStreamFactory = new MemCheckpointStreamFactory(maxStateSize);\n+\t\tthis.taskOwnedStateScope = taskOwnedStateScope;\n+\t}\n+\n+\t@Override\n+\tpublic CheckpointStreamFactory resolveCheckpointStorageLocation(long checkpointId, CheckpointStorageLocationReference reference) {\n+\t\treturn new MemCheckpointStreamFactory(maxStateSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96626c47c1a15025a0c240aac2a45d04a29f0120"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU4NjQyNg==", "bodyText": "I'm not sure if this will be correct behavior.", "url": "https://github.com/apache/flink/pull/12489#discussion_r436586426", "createdAt": "2020-06-08T10:03:18Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/TestCheckpointStorageWorkerView.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.state;\n+\n+import org.apache.flink.runtime.state.memory.MemCheckpointStreamFactory;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Non-persistent {@link CheckpointStorageWorkerView} for tests. Uses {@link MemCheckpointStreamFactory}.\n+ */\n+public class TestCheckpointStorageWorkerView implements CheckpointStorageWorkerView {\n+\n+\tprivate final int maxStateSize;\n+\tprivate final MemCheckpointStreamFactory taskOwnedCheckpointStreamFactory;\n+\tprivate final CheckpointedStateScope taskOwnedStateScope;\n+\n+\tpublic TestCheckpointStorageWorkerView(int maxStateSize) {\n+\t\tthis(maxStateSize, CheckpointedStateScope.EXCLUSIVE);\n+\t}\n+\n+\tprivate TestCheckpointStorageWorkerView(int maxStateSize, CheckpointedStateScope taskOwnedStateScope) {\n+\t\tthis.maxStateSize = maxStateSize;\n+\t\tthis.taskOwnedCheckpointStreamFactory = new MemCheckpointStreamFactory(maxStateSize);\n+\t\tthis.taskOwnedStateScope = taskOwnedStateScope;\n+\t}\n+\n+\t@Override\n+\tpublic CheckpointStreamFactory resolveCheckpointStorageLocation(long checkpointId, CheckpointStorageLocationReference reference) {\n+\t\treturn new MemCheckpointStreamFactory(maxStateSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0OTkxOA=="}, "originalCommit": {"oid": "96626c47c1a15025a0c240aac2a45d04a29f0120"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4433, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}