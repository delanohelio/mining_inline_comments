{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzE4ODMx", "number": 13017, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzowNDoxOFrOEVpjCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1NzoxMlrOEVzAoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTM2MjY3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzowNDoxOFrOG8hkkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzowMDo0MFrOG8ly2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNzc3Ng==", "bodyText": "I think it'll be clearer to move these to a separate test case.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466117776", "createdAt": "2020-08-06T03:04:18Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -450,6 +450,18 @@ public void testAddDropPartitions() throws Exception {\n \t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n \t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n \n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16cd7dffbff67fd8aa060e9dcfde4af700db0839"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4Njk2OA==", "bodyText": "@lirui-apache OK, I would like to separate this case to another test case.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466186968", "createdAt": "2020-08-06T07:00:40Z", "author": {"login": "SteNicholas"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -450,6 +450,18 @@ public void testAddDropPartitions() throws Exception {\n \t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n \t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n \n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjExNzc3Ng=="}, "originalCommit": {"oid": "16cd7dffbff67fd8aa060e9dcfde4af700db0839"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTM5NjMzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/dql/SqlShowPartitions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyNDo0NFrOG8h3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyNDo0NFrOG8h3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMjc0OA==", "bodyText": "If partitionSpec is not null, I think it must not be empty. We can add a check to verify that.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466122748", "createdAt": "2020-08-06T03:24:44Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/dql/SqlShowPartitions.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.sql.parser.dql;\n+\n+import org.apache.flink.sql.parser.SqlPartitionUtils;\n+\n+import org.apache.calcite.sql.SqlCall;\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.SqlNodeList;\n+import org.apache.calcite.sql.SqlOperator;\n+import org.apache.calcite.sql.SqlSpecialOperator;\n+import org.apache.calcite.sql.SqlWriter;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * SHOW PARTITIONS sql call.\n+ */\n+public class SqlShowPartitions extends SqlCall {\n+\n+\tpublic static final SqlSpecialOperator OPERATOR = new SqlSpecialOperator(\"SHOW PARTITIONS\", SqlKind.OTHER);\n+\n+\tprotected final SqlIdentifier tableIdentifier;\n+\tprotected final SqlNodeList partitionSpec;\n+\n+\tpublic SqlShowPartitions(SqlParserPos pos, SqlIdentifier tableName, @Nullable SqlNodeList partitionSpec) {\n+\t\tsuper(pos);\n+\t\tthis.tableIdentifier = requireNonNull(tableName, \"tableName should not be null\");\n+\t\tthis.partitionSpec = partitionSpec;\n+\t}\n+\n+\t@Override\n+\tpublic SqlOperator getOperator() {\n+\t\treturn OPERATOR;\n+\t}\n+\n+\t@Override\n+\tpublic List<SqlNode> getOperandList() {\n+\t\tList<SqlNode> operands = new ArrayList<>();\n+\t\toperands.add(tableIdentifier);\n+\t\toperands.add(partitionSpec);\n+\t\treturn operands;\n+\t}\n+\n+\t@Override\n+\tpublic void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n+\t\twriter.keyword(\"SHOW PARTITIONS\");\n+\t\ttableIdentifier.unparse(writer, leftPrec, rightPrec);\n+\t\tSqlNodeList partitionSpec = getPartitionSpec();\n+\t\tif (partitionSpec != null && partitionSpec.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16cd7dffbff67fd8aa060e9dcfde4af700db0839"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQwMzYxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/cli/CliClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzoyODozOVrOG8h8FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxMjowM1rOG8oI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzc5Nw==", "bodyText": "Don't we need the table identifier and partition spec here?", "url": "https://github.com/apache/flink/pull/13017#discussion_r466123797", "createdAt": "2020-08-06T03:28:39Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/cli/CliClient.java", "diffHunk": "@@ -549,6 +552,22 @@ private void callShowModules() {\n \t\tterminal.flush();\n \t}\n \n+\tprivate void callShowPartitions() {\n+\t\tfinal List<String> partitions;\n+\t\ttry {\n+\t\t\tpartitions = getShowResult(\"PARTITIONS\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNTQwMA==", "bodyText": "@lirui-apache Yes, this need the table identifier and partition spec. I missed it.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466225400", "createdAt": "2020-08-06T08:12:03Z", "author": {"login": "SteNicholas"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/cli/CliClient.java", "diffHunk": "@@ -549,6 +552,22 @@ private void callShowModules() {\n \t\tterminal.flush();\n \t}\n \n+\tprivate void callShowPartitions() {\n+\t\tfinal List<String> partitions;\n+\t\ttry {\n+\t\t\tpartitions = getShowResult(\"PARTITIONS\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyMzc5Nw=="}, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQyNDc2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo0MToyNVrOG8iI1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzowMTo1NVrOG8l08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNzA2Mw==", "bodyText": "Why not just call getDDLOpExecuteErrorMsg?", "url": "https://github.com/apache/flink/pull/13017#discussion_r466127063", "createdAt": "2020-08-06T03:41:25Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -1021,6 +1022,28 @@ private TableResult executeOperation(Operation operation) {\n \t\t\treturn buildShowResult(\"function name\", listFunctions());\n \t\t} else if (operation instanceof ShowViewsOperation) {\n \t\t\treturn buildShowResult(\"view name\", listViews());\n+\t\t} else if (operation instanceof ShowPartitionsOperation) {\n+\t\t\tString exMsg = getDQLOpExecuteErrorMsg(operation.asSummaryString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4NzUwNg==", "bodyText": "@lirui-apache I thought that SHOW PARTITIONS is DQL. I will modify getDQLOpExecuteErrorMsg to getDDLOpExecuteErrorMsg.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466187506", "createdAt": "2020-08-06T07:01:55Z", "author": {"login": "SteNicholas"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -1021,6 +1022,28 @@ private TableResult executeOperation(Operation operation) {\n \t\t\treturn buildShowResult(\"function name\", listFunctions());\n \t\t} else if (operation instanceof ShowViewsOperation) {\n \t\t\treturn buildShowResult(\"view name\", listViews());\n+\t\t} else if (operation instanceof ShowPartitionsOperation) {\n+\t\t\tString exMsg = getDQLOpExecuteErrorMsg(operation.asSummaryString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEyNzA2Mw=="}, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQ0NjIwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1Mzo1M1rOG8iU_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzoyOToxOVrOG8mp_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMDE3Mw==", "bodyText": "We already have a TestItem::validSql method that takes SQL dialect as a parameter. Can you reuse that?", "url": "https://github.com/apache/flink/pull/13017#discussion_r466130173", "createdAt": "2020-08-06T03:53:53Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "diffHunk": "@@ -389,6 +409,15 @@ public static TestItem validSql(\n \t\t\treturn testItem;\n \t\t}\n \n+\t\tpublic static TestItem validSql(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMTA4Ng==", "bodyText": "@lirui-apache Sorry for previously not finding the TestItem::validSql method that takes SQL dialect as a parameter. I would like to call this method.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466201086", "createdAt": "2020-08-06T07:29:19Z", "author": {"login": "SteNicholas"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "diffHunk": "@@ -389,6 +409,15 @@ public static TestItem validSql(\n \t\t\treturn testItem;\n \t\t}\n \n+\t\tpublic static TestItem validSql(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMDE3Mw=="}, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTQ1MTQ4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwMzo1Njo1MFrOG8iX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzoyMjozN1rOG8mcGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMDk0Mg==", "bodyText": "I don't think this makes sense, unless TestItem::invalidSql also supports HIVE dialect.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466130942", "createdAt": "2020-08-06T03:56:50Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "diffHunk": "@@ -299,6 +299,21 @@ public void testCommands() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testHiveCommands() throws Exception {\n+\t\tSqlParserHelper helper = new SqlParserHelper(SqlDialect.HIVE);\n+\t\tparser = helper.getSqlParser();\n+\t\tList<TestItem> testItems = Arrays.asList(\n+\t\t\t// show partitions\n+\t\t\tTestItem.invalidSql(\"SHOW PARTITIONS \", SqlExecutionException.class, \"Encountered \\\"<EOF>\\\"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NzUyOA==", "bodyText": "@lirui-apache I would like to remove this case. Previously I use this test case to verfiy SHOW PARTITIONS without table name.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466197528", "createdAt": "2020-08-06T07:22:37Z", "author": {"login": "SteNicholas"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "diffHunk": "@@ -299,6 +299,21 @@ public void testCommands() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testHiveCommands() throws Exception {\n+\t\tSqlParserHelper helper = new SqlParserHelper(SqlDialect.HIVE);\n+\t\tparser = helper.getSqlParser();\n+\t\tList<TestItem> testItems = Arrays.asList(\n+\t\t\t// show partitions\n+\t\t\tTestItem.invalidSql(\"SHOW PARTITIONS \", SqlExecutionException.class, \"Encountered \\\"<EOF>\\\"\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjEzMDk0Mg=="}, "originalCommit": {"oid": "2f2a2d5d7ef165e0c7ce068535bc79e90aae9cca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjgyNzUwOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMToyOToxMFrOG8virA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowOTozOVrOG9ShAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NjY2OA==", "bodyText": "Also add a test case where the partition spec only contains country", "url": "https://github.com/apache/flink/pull/13017#discussion_r466346668", "createdAt": "2020-08-06T11:29:10Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -465,6 +465,49 @@ public void testAddDropPartitions() throws Exception {\n \t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());\n \t}\n \n+\t@Test\n+\tpublic void testShowPartitions() throws Exception {\n+\t\ttableEnv.executeSql(\"create table tbl (x int,y binary) partitioned by (dt date,country string)\");\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30',country='china') partition (dt='2020-04-30',country='us')\");\n+\n+\t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n+\t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30')\").collect());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxOTY4MQ==", "bodyText": "@lirui-apache Yeah, I would like to add this case to verify.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466919681", "createdAt": "2020-08-07T09:09:39Z", "author": {"login": "SteNicholas"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -465,6 +465,49 @@ public void testAddDropPartitions() throws Exception {\n \t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());\n \t}\n \n+\t@Test\n+\tpublic void testShowPartitions() throws Exception {\n+\t\ttableEnv.executeSql(\"create table tbl (x int,y binary) partitioned by (dt date,country string)\");\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30',country='china') partition (dt='2020-04-30',country='us')\");\n+\n+\t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n+\t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30')\").collect());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NjY2OA=="}, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg1NzIzOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTozODo0MVrOG8v0iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwNzoxMDo0M1rOG9uLIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MTI0MA==", "bodyText": "Does a DATE column accept values like '2020-04-30 01:02:03'?", "url": "https://github.com/apache/flink/pull/13017#discussion_r466351240", "createdAt": "2020-08-06T11:38:41Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -465,6 +465,49 @@ public void testAddDropPartitions() throws Exception {\n \t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());\n \t}\n \n+\t@Test\n+\tpublic void testShowPartitions() throws Exception {\n+\t\ttableEnv.executeSql(\"create table tbl (x int,y binary) partitioned by (dt date,country string)\");\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30',country='china') partition (dt='2020-04-30',country='us')\");\n+\n+\t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n+\t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30')\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30',country='china')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\n+\t\ttableEnv.executeSql(\"alter table tbl drop partition (dt='2020-04-30',country='china'),partition (dt='2020-04-30',country='us')\");\n+\t\tassertEquals(0, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30 01:02:03',country='china') partition (dt='2020-04-30 04:05:06',country='us')\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM3MjgzMw==", "bodyText": "@lirui-apache I will modify the column to Timestamp type.", "url": "https://github.com/apache/flink/pull/13017#discussion_r467372833", "createdAt": "2020-08-08T07:10:43Z", "author": {"login": "SteNicholas"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -465,6 +465,49 @@ public void testAddDropPartitions() throws Exception {\n \t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());\n \t}\n \n+\t@Test\n+\tpublic void testShowPartitions() throws Exception {\n+\t\ttableEnv.executeSql(\"create table tbl (x int,y binary) partitioned by (dt date,country string)\");\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30',country='china') partition (dt='2020-04-30',country='us')\");\n+\n+\t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n+\t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30')\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30',country='china')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\n+\t\ttableEnv.executeSql(\"alter table tbl drop partition (dt='2020-04-30',country='china'),partition (dt='2020-04-30',country='us')\");\n+\t\tassertEquals(0, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30 01:02:03',country='china') partition (dt='2020-04-30 04:05:06',country='us')\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MTI0MA=="}, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg2MzIxOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo0MDozMVrOG8v4Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToxMTo0N1rOG9SlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MjE0Ng==", "bodyText": "I don't think this is necessary. We're not testing add/drop partitions here.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466352146", "createdAt": "2020-08-06T11:40:31Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -465,6 +465,49 @@ public void testAddDropPartitions() throws Exception {\n \t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());\n \t}\n \n+\t@Test\n+\tpublic void testShowPartitions() throws Exception {\n+\t\ttableEnv.executeSql(\"create table tbl (x int,y binary) partitioned by (dt date,country string)\");\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30',country='china') partition (dt='2020-04-30',country='us')\");\n+\n+\t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n+\t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30')\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30',country='china')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\n+\t\ttableEnv.executeSql(\"alter table tbl drop partition (dt='2020-04-30',country='china'),partition (dt='2020-04-30',country='us')\");\n+\t\tassertEquals(0, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30 01:02:03',country='china') partition (dt='2020-04-30 04:05:06',country='us')\");\n+\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 01:02:03/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 04:05:06/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30 01:02:03')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 01:02:03/country=china\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30 04:05:06')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 04:05:06/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30 01:02:03',country='china')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 01:02:03/country=china\"));\n+\n+\t\ttableEnv.executeSql(\"alter table tbl drop partition (dt='2020-04-30 01:02:03',country='china'),partition (dt='2020-04-30 04:05:06',country='us')\");\n+\t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyMDgxNg==", "bodyText": "@lirui-apache Okay, I will remove this unnecessary case.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466920816", "createdAt": "2020-08-07T09:11:47Z", "author": {"login": "SteNicholas"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveDialectITCase.java", "diffHunk": "@@ -465,6 +465,49 @@ public void testAddDropPartitions() throws Exception {\n \t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());\n \t}\n \n+\t@Test\n+\tpublic void testShowPartitions() throws Exception {\n+\t\ttableEnv.executeSql(\"create table tbl (x int,y binary) partitioned by (dt date,country string)\");\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30',country='china') partition (dt='2020-04-30',country='us')\");\n+\n+\t\tObjectPath tablePath = new ObjectPath(\"default\", \"tbl\");\n+\t\tassertEquals(2, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\tList<Row> partitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30')\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30',country='china')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30/country=china\"));\n+\n+\t\ttableEnv.executeSql(\"alter table tbl drop partition (dt='2020-04-30',country='china'),partition (dt='2020-04-30',country='us')\");\n+\t\tassertEquals(0, hiveCatalog.listPartitions(tablePath).size());\n+\n+\t\ttableEnv.executeSql(\"alter table tbl add partition (dt='2020-04-30 01:02:03',country='china') partition (dt='2020-04-30 04:05:06',country='us')\");\n+\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl\").collect());\n+\t\tassertEquals(2, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 01:02:03/country=china\"));\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 04:05:06/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30 01:02:03')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 01:02:03/country=china\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30 04:05:06')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 04:05:06/country=us\"));\n+\t\tpartitions = Lists.newArrayList(tableEnv.executeSql(\"show partitions tbl partition (dt='2020-04-30 01:02:03',country='china')\").collect());\n+\t\tassertEquals(1, partitions.size());\n+\t\tassertTrue(partitions.toString().contains(\"dt=2020-04-30 01:02:03/country=china\"));\n+\n+\t\ttableEnv.executeSql(\"alter table tbl drop partition (dt='2020-04-30 01:02:03',country='china'),partition (dt='2020-04-30 04:05:06',country='us')\");\n+\t\tassertEquals(1, hiveCatalog.listPartitions(tablePath).size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1MjE0Ng=="}, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjg5NjAzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/cli/CliClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1MTo0N1rOG8wMYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzoxNzoxNlrOG-rU3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NzM0Ng==", "bodyText": "I think cmdCall.operands[0] contains the whole SQL statement, no?", "url": "https://github.com/apache/flink/pull/13017#discussion_r466357346", "createdAt": "2020-08-06T11:51:47Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/cli/CliClient.java", "diffHunk": "@@ -532,6 +535,14 @@ private void callShowFunctions() {\n \t\t\t\t.collect(Collectors.toList());\n \t}\n \n+\tprivate List<String> getShowResult(String objectToShow, SqlCommandCall cmdCall) {\n+\t\tTableResult tableResult = executor.executeSql(sessionId, \"SHOW \" + objectToShow + \" \" + cmdCall.operands[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3NDc0OQ==", "bodyText": "Yeah, I check the parseBySqlParser method, and confirm the cmdCall.operands[0] contains the whole SQL statement.", "url": "https://github.com/apache/flink/pull/13017#discussion_r468374749", "createdAt": "2020-08-11T07:17:16Z", "author": {"login": "SteNicholas"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/cli/CliClient.java", "diffHunk": "@@ -532,6 +535,14 @@ private void callShowFunctions() {\n \t\t\t\t.collect(Collectors.toList());\n \t}\n \n+\tprivate List<String> getShowResult(String objectToShow, SqlCommandCall cmdCall) {\n+\t\tTableResult tableResult = executor.executeSql(sessionId, \"SHOW \" + objectToShow + \" \" + cmdCall.operands[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM1NzM0Ng=="}, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjkxMjk2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMTo1NzoxMlrOG8wW3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNTo1M1rOG9TUTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2MDAyOA==", "bodyText": "Do we still need these?", "url": "https://github.com/apache/flink/pull/13017#discussion_r466360028", "createdAt": "2020-08-06T11:57:12Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "diffHunk": "@@ -299,6 +300,20 @@ public void testCommands() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testHiveCommands() throws Exception {\n+\t\tSqlParserHelper helper = new SqlParserHelper(SqlDialect.HIVE);\n+\t\tparser = helper.getSqlParser();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjgxMw==", "bodyText": "@lirui-apache It's indeed unnecessary.", "url": "https://github.com/apache/flink/pull/13017#discussion_r466932813", "createdAt": "2020-08-07T09:35:53Z", "author": {"login": "SteNicholas"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/SqlCommandParserTest.java", "diffHunk": "@@ -299,6 +300,20 @@ public void testCommands() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testHiveCommands() throws Exception {\n+\t\tSqlParserHelper helper = new SqlParserHelper(SqlDialect.HIVE);\n+\t\tparser = helper.getSqlParser();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM2MDAyOA=="}, "originalCommit": {"oid": "898931cb7d94e490f094504c8d8f544d123ad0e5"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4879, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}