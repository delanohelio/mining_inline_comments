{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NTYwMDcz", "number": 12018, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozODoyNFrOD7Ketw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0MDoxOFrOD7KhPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY0Mjc5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kafka-base/src/test/java/org/apache/flink/streaming/connectors/kafka/internals/AbstractFetcherTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozODoyNFrOGTUmDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo1NDozMlrOGTZAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMzU1MA==", "bodyText": "The changes in this file are purely an orthogonal refactoring, right? Could you put these in a separate commit, along with the removal of the emitRecord() method on the fetcher that is only used in tests?", "url": "https://github.com/apache/flink/pull/12018#discussion_r422913550", "createdAt": "2020-05-11T09:38:24Z", "author": {"login": "aljoscha"}, "path": "flink-connectors/flink-connector-kafka-base/src/test/java/org/apache/flink/streaming/connectors/kafka/internals/AbstractFetcherTest.java", "diffHunk": "@@ -108,13 +112,13 @@ public void testSkipCorruptedRecord() throws Exception {\n \n \t\tfinal KafkaTopicPartitionState<Object> partitionStateHolder = fetcher.subscribedPartitionStates().get(0);\n \n-\t\tfetcher.emitRecord(1L, partitionStateHolder, 1L);\n-\t\tfetcher.emitRecord(2L, partitionStateHolder, 2L);\n+\t\temitRecord(fetcher, 1L, partitionStateHolder, 1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf30a56133e39d0e895f99796201d99a8447249"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NTkxOA==", "bodyText": "There are two related changes:\n\nI changed a bit the way no results are emitted (null before/empty queue now)\nI changed one test case slightly to emit multiple results in a single emitRecordsWithTimestamps\n\nI think after extracting the refactoring to a separate commit it is visible more clearly.", "url": "https://github.com/apache/flink/pull/12018#discussion_r422985918", "createdAt": "2020-05-11T11:54:32Z", "author": {"login": "dawidwys"}, "path": "flink-connectors/flink-connector-kafka-base/src/test/java/org/apache/flink/streaming/connectors/kafka/internals/AbstractFetcherTest.java", "diffHunk": "@@ -108,13 +112,13 @@ public void testSkipCorruptedRecord() throws Exception {\n \n \t\tfinal KafkaTopicPartitionState<Object> partitionStateHolder = fetcher.subscribedPartitionStates().get(0);\n \n-\t\tfetcher.emitRecord(1L, partitionStateHolder, 1L);\n-\t\tfetcher.emitRecord(2L, partitionStateHolder, 2L);\n+\t\temitRecord(fetcher, 1L, partitionStateHolder, 1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMzU1MA=="}, "originalCommit": {"oid": "9cf30a56133e39d0e895f99796201d99a8447249"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzY0OTI2OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kafka-0.10/src/main/java/org/apache/flink/streaming/connectors/kafka/internal/Kafka010Fetcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTo0MDoxOFrOGTUqKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMjozOVrOGTcZ7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDYwMQ==", "bodyText": "So we're not emitting all the records of the batch after one of them signals \"end of stream\"? I recall that an initial version still emitted all records.", "url": "https://github.com/apache/flink/pull/12018#discussion_r422914601", "createdAt": "2020-05-11T09:40:18Z", "author": {"login": "aljoscha"}, "path": "flink-connectors/flink-connector-kafka-0.10/src/main/java/org/apache/flink/streaming/connectors/kafka/internal/Kafka010Fetcher.java", "diffHunk": "@@ -228,4 +226,33 @@ protected void doCommitInternalOffsetsToKafka(\n \t\t// record the work to be committed by the main consumer thread and make sure the consumer notices that\n \t\tconsumerThread.setOffsetsToCommit(offsetsToCommit, commitCallback);\n \t}\n+\n+\tprivate class KafkaCollector implements Collector<T> {\n+\t\tprivate final Queue<T> records = new ArrayDeque<>();\n+\n+\t\tprivate boolean endOfStreamSignalled = false;\n+\n+\t\t@Override\n+\t\tpublic void collect(T record) {\n+\t\t\t// do not emit subsequent elements if the end of the stream reached", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cf30a56133e39d0e895f99796201d99a8447249"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3MDc2OQ==", "bodyText": "Actually, that is the behaviour I had from the very beginning. Do you think it makes more sense to emit all but the end of the stream record?\nSide note. I find this method very confusing. I just realized that there is no cross partition alignment on this method. The whole task will be brought down if any of the assigned partitions signals the end of stream, irrespective of the state of the remaining partitions. Honestly I'd be in favour of dropping this method at some point in the future.", "url": "https://github.com/apache/flink/pull/12018#discussion_r422970769", "createdAt": "2020-05-11T11:23:30Z", "author": {"login": "dawidwys"}, "path": "flink-connectors/flink-connector-kafka-0.10/src/main/java/org/apache/flink/streaming/connectors/kafka/internal/Kafka010Fetcher.java", "diffHunk": "@@ -228,4 +226,33 @@ protected void doCommitInternalOffsetsToKafka(\n \t\t// record the work to be committed by the main consumer thread and make sure the consumer notices that\n \t\tconsumerThread.setOffsetsToCommit(offsetsToCommit, commitCallback);\n \t}\n+\n+\tprivate class KafkaCollector implements Collector<T> {\n+\t\tprivate final Queue<T> records = new ArrayDeque<>();\n+\n+\t\tprivate boolean endOfStreamSignalled = false;\n+\n+\t\t@Override\n+\t\tpublic void collect(T record) {\n+\t\t\t// do not emit subsequent elements if the end of the stream reached", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDYwMQ=="}, "originalCommit": {"oid": "9cf30a56133e39d0e895f99796201d99a8447249"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAzMjM1NA==", "bodyText": "Oh boy, I guess the interplay of this end record and multiple partitions was not considered... \ud83d\ude48", "url": "https://github.com/apache/flink/pull/12018#discussion_r423032354", "createdAt": "2020-05-11T13:18:55Z", "author": {"login": "aljoscha"}, "path": "flink-connectors/flink-connector-kafka-0.10/src/main/java/org/apache/flink/streaming/connectors/kafka/internal/Kafka010Fetcher.java", "diffHunk": "@@ -228,4 +226,33 @@ protected void doCommitInternalOffsetsToKafka(\n \t\t// record the work to be committed by the main consumer thread and make sure the consumer notices that\n \t\tconsumerThread.setOffsetsToCommit(offsetsToCommit, commitCallback);\n \t}\n+\n+\tprivate class KafkaCollector implements Collector<T> {\n+\t\tprivate final Queue<T> records = new ArrayDeque<>();\n+\n+\t\tprivate boolean endOfStreamSignalled = false;\n+\n+\t\t@Override\n+\t\tpublic void collect(T record) {\n+\t\t\t// do not emit subsequent elements if the end of the stream reached", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDYwMQ=="}, "originalCommit": {"oid": "9cf30a56133e39d0e895f99796201d99a8447249"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MTUxOA==", "bodyText": "It has no additional implications on this PR as it has those problems already.", "url": "https://github.com/apache/flink/pull/12018#discussion_r423041518", "createdAt": "2020-05-11T13:32:39Z", "author": {"login": "dawidwys"}, "path": "flink-connectors/flink-connector-kafka-0.10/src/main/java/org/apache/flink/streaming/connectors/kafka/internal/Kafka010Fetcher.java", "diffHunk": "@@ -228,4 +226,33 @@ protected void doCommitInternalOffsetsToKafka(\n \t\t// record the work to be committed by the main consumer thread and make sure the consumer notices that\n \t\tconsumerThread.setOffsetsToCommit(offsetsToCommit, commitCallback);\n \t}\n+\n+\tprivate class KafkaCollector implements Collector<T> {\n+\t\tprivate final Queue<T> records = new ArrayDeque<>();\n+\n+\t\tprivate boolean endOfStreamSignalled = false;\n+\n+\t\t@Override\n+\t\tpublic void collect(T record) {\n+\t\t\t// do not emit subsequent elements if the end of the stream reached", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxNDYwMQ=="}, "originalCommit": {"oid": "9cf30a56133e39d0e895f99796201d99a8447249"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1530, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}