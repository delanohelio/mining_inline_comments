{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMTM4NDc3", "number": 11486, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTozMzowN1rODqVrgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowODoyN1rODqeK7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzIxOTg2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTozMzowN1rOF6BbZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoxOTowM1rOF6C3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTEyNA==", "bodyText": "How long running are those calls? If they are touching some IO files, they might take quite some time and with your change, they would happen before the following lines in Task class:\n\t\t\t// switch to the RUNNING state, if that fails, we have been canceled/failed in the meantime\n\t\t\tif (!transitionState(ExecutionState.DEPLOYING, ExecutionState.RUNNING)) {\n\t\t\t\tthrow new CancelTaskException();\n\t\t\t}\n\n\t\t\t// notify everyone that we switched to running\n\t\t\ttaskManagerActions.updateTaskExecutionState(new TaskExecutionState(jobId, executionId, ExecutionState.RUNNING));\n\n\t\t\t// make sure the user code classloader is accessible thread-locally\n\t\t\texecutingThread.setContextClassLoader(userCodeClassLoader);\n\nas oppose to running after them, as it is now. I'm not sure what could be the side effects?", "url": "https://github.com/apache/flink/pull/11486#discussion_r396385124", "createdAt": "2020-03-23T11:33:07Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();\n+\t\tthis.checkpointStorage = stateBackend.createCheckpointStorage(getEnvironment().getJobID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c7dde85991c2181362648abbce207778f84ac07"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQwODcxNg==", "bodyText": "TBH I did not think of this issue before making the changes. And you really pointed out a critical and reasonable concern here.\nAfter double checking the related codes of creating backend and storage, I do not find any IO operators or any time-consuming operations, only deserialization from config and some paths generation. So IMO it should not bring obvious side effects.", "url": "https://github.com/apache/flink/pull/11486#discussion_r396408716", "createdAt": "2020-03-23T12:19:03Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();\n+\t\tthis.checkpointStorage = stateBackend.createCheckpointStorage(getEnvironment().getJobID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NTEyNA=="}, "originalCommit": {"oid": "4c7dde85991c2181362648abbce207778f84ac07"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODQ4NTc1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozOToxNlrOF6OENQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo1Njo0OFrOF6q4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MjE4MQ==", "bodyText": "I'm a bit concerned about concurrency here: we publish a reference to this object before it's being fully constructed.\nSo the other thread can read null as asyncExceptionHandler value.\nBut now this field is final, so the preceding write to it should be already visible.\nIf this is correct, I think we need to put a warning here and near final modifier that changing them can cause concurrency problems.", "url": "https://github.com/apache/flink/pull/11486#discussion_r396592181", "createdAt": "2020-03-23T16:39:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();\n+\t\tthis.checkpointStorage = stateBackend.createCheckpointStorage(getEnvironment().getJobID());\n+\n+\t\t// if the clock is not already set, then assign a default TimeServiceProvider\n+\t\tif (timerService == null) {\n+\t\t\tThreadFactory timerThreadFactory = new DispatcherThreadFactory(TRIGGER_THREAD_GROUP, \"Time Trigger for \" + getName());\n+\t\t\tthis.timerService = new SystemProcessingTimeService(this::handleTimerException, timerThreadFactory);\n+\t\t} else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg3MzQxNg==", "bodyText": "I did not get your point here. You referred to the concurrent issue for timeService or asyncExceptionHandler? And which kind of thread might touch this object before the StreamTask is fully constructed?", "url": "https://github.com/apache/flink/pull/11486#discussion_r396873416", "createdAt": "2020-03-24T02:47:21Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();\n+\t\tthis.checkpointStorage = stateBackend.createCheckpointStorage(getEnvironment().getJobID());\n+\n+\t\t// if the clock is not already set, then assign a default TimeServiceProvider\n+\t\tif (timerService == null) {\n+\t\t\tThreadFactory timerThreadFactory = new DispatcherThreadFactory(TRIGGER_THREAD_GROUP, \"Time Trigger for \" + getName());\n+\t\t\tthis.timerService = new SystemProcessingTimeService(this::handleTimerException, timerThreadFactory);\n+\t\t} else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MjE4MQ=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyMzg5Ng==", "bodyText": "I meant that the timer thread could access asyncExceptionHandler variable.\nSo, if someone later reorders it like this:\nStreamTask(){\n  this.timerService = new SystemProcessingTimeService(this::handleTimerException, timerThreadFactory);\n  this.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n}\n...\n/// schedule task\n\nand removes final from asyncExceptionHandler then timerService thread can see null even after it's assigned.", "url": "https://github.com/apache/flink/pull/11486#discussion_r397023896", "createdAt": "2020-03-24T09:49:28Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();\n+\t\tthis.checkpointStorage = stateBackend.createCheckpointStorage(getEnvironment().getJobID());\n+\n+\t\t// if the clock is not already set, then assign a default TimeServiceProvider\n+\t\tif (timerService == null) {\n+\t\t\tThreadFactory timerThreadFactory = new DispatcherThreadFactory(TRIGGER_THREAD_GROUP, \"Time Trigger for \" + getName());\n+\t\t\tthis.timerService = new SystemProcessingTimeService(this::handleTimerException, timerThreadFactory);\n+\t\t} else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MjE4MQ=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NDM3MA==", "bodyText": "Hmm, thanks for the explanations and I got your point now.\nI also found that there exists another variable to prevent this case happen.  StreamTask#isRunning is set true after beforeInvoke done, and the asyncExceptionHandler would be only used by timeService after isRunning true. So it can eliminate our concern. :)", "url": "https://github.com/apache/flink/pull/11486#discussion_r397064370", "createdAt": "2020-03-24T10:56:48Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();\n+\t\tthis.checkpointStorage = stateBackend.createCheckpointStorage(getEnvironment().getJobID());\n+\n+\t\t// if the clock is not already set, then assign a default TimeServiceProvider\n+\t\tif (timerService == null) {\n+\t\t\tThreadFactory timerThreadFactory = new DispatcherThreadFactory(TRIGGER_THREAD_GROUP, \"Time Trigger for \" + getName());\n+\t\t\tthis.timerService = new SystemProcessingTimeService(this::handleTimerException, timerThreadFactory);\n+\t\t} else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU5MjE4MQ=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODU0Mzk5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1MjoyOFrOF6OpxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTowMDoxM1rOF6miMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTc5Ng==", "bodyText": "If I'm not mistaken, these exceptions were previously thrown from StreamTask.invoke(); and then they weren't wrapped into anything neither by StreamTask nor by Task.\nNow they are thrown from Task.loadAndInstantiateInvokable which can wrap them into FlinkException.\nThis wrapping can break exception-matching logic in Task (e.g. if (t instanceof CancelTaskException) ...).", "url": "https://github.com/apache/flink/pull/11486#discussion_r396601796", "createdAt": "2020-03-23T16:52:28Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5MDk4NQ==", "bodyText": "Good catch. I double checked the codes and it seems not break any existing behaviors, because we would not explicitly match the FlinkException in Task or JobMaster ATM.\nThis wrapped exception for statelessCtor.newInstance(environment) is redundant before this PR, because any instance of AbstractInvokable would not throw exceptions during construction.\nI am a bit torn whether it should be wrapped into FlinkException now because it would hide the essential exception to confuse users sometimes. But this is a common issue also existing in other wrapped exceptions.  E.g. some users were always confused when seeing the message \"Could not forward element to next operator\" from wrapped ExceptionInChainedOperatorException which causes task failure, but the real exception might come from specific UDF. And I also plan to improve this issue a bit by appending the real exception message with the custom message, but it should be a separate ticket.\nDo you have some further concerns for this case?", "url": "https://github.com/apache/flink/pull/11486#discussion_r396890985", "createdAt": "2020-03-24T04:02:42Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTc5Ng=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MzA3Mw==", "bodyText": "Hmm..I meant that we could match something other than FlinkException, but it is wrapped into FlinkException.\nI checked it again and found only one such case: c on line 776 (Task).\nSo if it is thrown somewhere in constructor of StreamTask or its descendants then Task will be failed, not cancelled. Currently, it is not thrown in any of constructors though.\nI think we can ignore this issue for now. And if CancelTaskException will be added to constructor, IMO we should rather revisit this cancelation mechanism.", "url": "https://github.com/apache/flink/pull/11486#discussion_r396993073", "createdAt": "2020-03-24T09:00:13Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwMTc5Ng=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODYxMTAwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowODoyN1rOF6PViQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1MTo1NlrOF6ogjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMzAwMQ==", "bodyText": "Should we move the appropriate line in Task higher:\nexecutingThread.setContextClassLoader(userCodeClassLoader);\n?\nNow (in master) it's before invoke(); and it looks like it should be moved before\ninvokable = loadAndInstantiateInvokable(userCodeClassLoader, nameOfInvokableClass, env);", "url": "https://github.com/apache/flink/pull/11486#discussion_r396613001", "createdAt": "2020-03-23T17:08:27Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njg5MzAwNw==", "bodyText": "executingThread.setContextClassLoader(userCodeClassLoader) was actually done twice both before loadAndInstantiateInvokable and invoke(). I am not quite sure why we need to set twice before.\nAnyway it is not related to my PR change, so I do not try to figure it out ATM. WDYT?", "url": "https://github.com/apache/flink/pull/11486#discussion_r396893007", "createdAt": "2020-03-24T04:12:18Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMzAwMQ=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNTQyMg==", "bodyText": "Yes, you are right, it's set twice :)", "url": "https://github.com/apache/flink/pull/11486#discussion_r397025422", "createdAt": "2020-03-24T09:51:56Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -260,17 +258,28 @@ protected StreamTask(\n \t\t\t@Nullable TimerService timerService,\n \t\t\tThread.UncaughtExceptionHandler uncaughtExceptionHandler,\n \t\t\tStreamTaskActionExecutor actionExecutor,\n-\t\t\tTaskMailbox mailbox) {\n+\t\t\tTaskMailbox mailbox) throws Exception {\n \n \t\tsuper(environment);\n \n-\t\tthis.timerService = timerService;\n-\t\tthis.uncaughtExceptionHandler = Preconditions.checkNotNull(uncaughtExceptionHandler);\n \t\tthis.configuration = new StreamConfig(getTaskConfiguration());\n \t\tthis.recordWriter = createRecordWriterDelegate(configuration, environment);\n \t\tthis.actionExecutor = Preconditions.checkNotNull(actionExecutor);\n \t\tthis.mailboxProcessor = new MailboxProcessor(this::processInput, mailbox, actionExecutor);\n \t\tthis.asyncExceptionHandler = new StreamTaskAsyncExceptionHandler(environment);\n+\t\tthis.asyncOperationsThreadPool = Executors.newCachedThreadPool(\n+\t\t\tnew ExecutorThreadFactory(\"AsyncOperations\", uncaughtExceptionHandler));\n+\n+\t\tthis.stateBackend = createStateBackend();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYxMzAwMQ=="}, "originalCommit": {"oid": "0a1a1264434909e99062ffe146c0222d4ed9d558"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 684, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}