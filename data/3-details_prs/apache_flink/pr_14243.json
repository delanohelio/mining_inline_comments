{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mzg2MjM3", "number": 14243, "title": "[FLINK-20366][table-planner-blink] ColumnIntervalUtil#getColumnIntervalWithFilter should consider constant predicate", "bodyText": "What is the purpose of the change\nColumnIntervalUtil#getColumnIntervalWithFilter should consider constant predicate, see the description of FLINK-20366\nBrief change log\n\nAdd logic to handler constant predicate in ColumnIntervalUtil#getColumnIntervalWithFilter\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nExtended ColumnIntervalUtilTest to verify the change\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-11-27T04:27:04Z", "url": "https://github.com/apache/flink/pull/14243", "merged": true, "mergeCommit": {"oid": "7bf76c0b41a68ace751d4af48efc1edc2ed2d6c7"}, "closed": true, "closedAt": "2020-11-27T09:30:52Z", "author": {"login": "godfreyhe"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgfwvBAH2gAyNTI4Mzg2MjM3Ojk5MzY1YmQ1ZWQ5OTlhOWYxOWUxNjc4YTg5Y2ExMjg5YTUwN2Q0Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgjiqagFqTUzOTc5NzM5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "99365bd5ed999a9f19e1678a89ca1289a507d467", "author": {"user": {"login": "godfreyhe", "name": "godfrey he"}}, "url": "https://github.com/apache/flink/commit/99365bd5ed999a9f19e1678a89ca1289a507d467", "committedDate": "2020-11-27T04:23:06Z", "message": "[FLINK-20366][table-planner-blink] ColumnIntervalUtil#getColumnIntervalWithFilter should consider constant predicate"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5Nzk3Mzk4", "url": "https://github.com/apache/flink/pull/14243#pullrequestreview-539797398", "createdAt": "2020-11-27T08:46:43Z", "commit": {"oid": "99365bd5ed999a9f19e1678a89ca1289a507d467"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Njo0M1rOH61lWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Njo0M1rOH61lWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzM3MQ==", "bodyText": "Add a test for intersecting but not containing interval?\nassertEquals(\n    toBigDecimalInterval(ValueInterval.apply(3L, 12L, includeLower = false, includeUpper = false)),\n    ColumnIntervalUtil.getColumnIntervalWithFilter(\n    Some(toBigDecimalInterval(\n        ValueInterval.apply(3L, 10L, includeLower = false, includeUpper = false))),\n    predicate,\n    1,\n    rexBuilder))", "url": "https://github.com/apache/flink/pull/14243#discussion_r531457371", "createdAt": "2020-11-27T08:46:43Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/utils/ColumnIntervalUtilTest.scala", "diffHunk": "@@ -189,4 +193,85 @@ class ColumnIntervalUtilTest {\n     )\n   }\n \n+  @Test\n+  def testGetColumnIntervalWithFilter(): Unit = {\n+    val typeFactory: FlinkTypeFactory = new FlinkTypeFactory(new FlinkTypeSystem)\n+    val rexBuilder: RexBuilder = new FlinkRexBuilder(typeFactory)\n+\n+    // ($1 >= 1 and $1 < 10) or (not($1 > 5)\n+    val predicate = rexBuilder.makeCall(\n+      SqlStdOperatorTable.OR,\n+      rexBuilder.makeCall(\n+        SqlStdOperatorTable.AND,\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(1))),\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.LESS_THAN,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(10)))),\n+      rexBuilder.makeCall(\n+        SqlStdOperatorTable.NOT,\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.GREATER_THAN,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(5))))\n+    )\n+\n+    assertEquals(\n+      toBigDecimalInterval(ValueInterval.apply(null, 10L, includeUpper = false)),\n+      ColumnIntervalUtil.getColumnIntervalWithFilter(\n+        None,\n+        predicate,\n+        1,\n+        rexBuilder))\n+\n+    assertEquals(\n+      toBigDecimalInterval(ValueInterval.apply(3L, 8L, includeLower = false, includeUpper = false)),\n+      ColumnIntervalUtil.getColumnIntervalWithFilter(\n+        Some(toBigDecimalInterval(\n+          ValueInterval.apply(3L, 8L, includeLower = false, includeUpper = false))),\n+        predicate,\n+        1,\n+        rexBuilder))\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99365bd5ed999a9f19e1678a89ca1289a507d467"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4215, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}