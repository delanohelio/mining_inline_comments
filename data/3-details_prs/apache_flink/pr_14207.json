{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MjE0Mzkz", "number": 14207, "title": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method", "bodyText": "What is the purpose of the change\nWhen the Flink job failed before it was initialized, the close() method of AsyncLookupJoinRunner could cause the NullPointerException for allResultFutures. Therefore in AsyncLookupJoinRunner#close, allResultFutures should add check whether is not null before each JoinedRowResultFuture of allResultFutures closes.\nBrief change log\n\nAsyncLookupJoinRunner#close add non-null check for allResultFutures before each JoinedRowResultFuture of allResultFutures calls close().\n\nVerifying this change\n\nAdd testCloseAsyncLookupJoinRunner test case in AsyncLookupJoinTest to verify the close() method whether cause the NullPointerException before AsyncLookupJoinRunner calls open() method.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-11-25T06:44:17Z", "url": "https://github.com/apache/flink/pull/14207", "merged": true, "mergeCommit": {"oid": "5043ca9ef6405bb6980b5d6bad0935749de6d8ce"}, "closed": true, "closedAt": "2020-12-08T03:03:37Z", "author": {"login": "SteNicholas"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdf4i4KAH2gAyNTI3MjE0MzkzOmRhMjViNDRkNTlmNWEwMmY4ZDc4MGMxN2VlNDVmODI4ZmQyZmQ3NDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj3dNWAFqTU0NjI3MTY5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "da25b44d59f5a02f8d780c17ee45f828fd2fd746", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/da25b44d59f5a02f8d780c17ee45f828fd2fd746", "committedDate": "2020-11-25T06:41:40Z", "message": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTA0NTA4", "url": "https://github.com/apache/flink/pull/14207#pullrequestreview-545904508", "createdAt": "2020-12-07T08:04:00Z", "commit": {"oid": "da25b44d59f5a02f8d780c17ee45f828fd2fd746"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowNDowMFrOIAaQ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowNzo0MVrOIAaYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMTIzMQ==", "bodyText": "rf should always not null ?", "url": "https://github.com/apache/flink/pull/14207#discussion_r537301231", "createdAt": "2020-12-07T08:04:00Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/lookup/AsyncLookupJoinRunner.java", "diffHunk": "@@ -153,11 +154,20 @@ public void close() throws Exception {\n \t\tif (fetcher != null) {\n \t\t\tFunctionUtils.closeFunction(fetcher);\n \t\t}\n-\t\tfor (JoinedRowResultFuture rf : allResultFutures) {\n-\t\t\trf.close();\n+\t\tif (allResultFutures != null) {\n+\t\t\tfor (JoinedRowResultFuture rf : allResultFutures) {\n+\t\t\t\tif (rf != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da25b44d59f5a02f8d780c17ee45f828fd2fd746"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMTYzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfail(\"Expected close to fail with null pointer exception.\");\n          \n          \n            \n            \t\t\tfail(\"Unexpected close that failed with \" + e.getMessage());", "url": "https://github.com/apache/flink/pull/14207#discussion_r537301639", "createdAt": "2020-12-07T08:04:47Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinRunnerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join;\n+\n+import org.apache.flink.api.common.functions.AbstractRichFunction;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.async.AsyncFunction;\n+import org.apache.flink.streaming.api.functions.async.ResultFuture;\n+import org.apache.flink.streaming.util.MockStreamingRuntimeContext;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.collector.TableFunctionCollector;\n+import org.apache.flink.table.runtime.collector.TableFunctionResultFuture;\n+import org.apache.flink.table.runtime.generated.GeneratedFunctionWrapper;\n+import org.apache.flink.table.runtime.generated.GeneratedResultFutureWrapper;\n+import org.apache.flink.table.runtime.operators.join.lookup.AsyncLookupJoinRunner;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Supplier;\n+\n+import static org.apache.flink.table.data.StringData.fromString;\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.row;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link AsyncLookupJoinRunner}.\n+ */\n+public class AsyncLookupJoinRunnerTest {\n+\n+\t@Test\n+\tpublic void testCloseAsyncLookupJoinRunner() throws Exception {\n+\t\tfinal InternalTypeInfo<RowData> rightRowTypeInfo = InternalTypeInfo.ofFields(\n+\t\t\t\tDataTypes.INT().getLogicalType(),\n+\t\t\t\tDataTypes.STRING().getLogicalType());\n+\t\tfinal AsyncLookupJoinRunner joinRunner = new AsyncLookupJoinRunner(\n+\t\t\t\tnew GeneratedFunctionWrapper(new TestingFetcherFunction()),\n+\t\t\t\tnew GeneratedResultFutureWrapper<>(new TestingFetcherResultFuture()),\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\ttrue,\n+\t\t\t\t100);\n+\t\tassertNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.setRuntimeContext(new MockStreamingRuntimeContext(false, 1, 0));\n+\t\tjoinRunner.open(new Configuration());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.open(new Configuration());\n+\t\tjoinRunner.asyncInvoke(row(1, \"a\"), new TestingFetcherResultFuture());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\t}\n+\n+\tprivate void closeAsyncLookupJoinRunner(AsyncLookupJoinRunner joinRunner) throws Exception {\n+\t\ttry {\n+\t\t\tjoinRunner.close();\n+\t\t} catch (NullPointerException e) {\n+\t\t\tfail(\"Expected close to fail with null pointer exception.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da25b44d59f5a02f8d780c17ee45f828fd2fd746"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMzE5NQ==", "bodyText": "looks like TestingFetcherFunction and  TestingFetcherResultFuture are redundant,  we defined same inner class in three tests with same versionId, I think it's an existed issue. Could we only define once and reuse them?", "url": "https://github.com/apache/flink/pull/14207#discussion_r537303195", "createdAt": "2020-12-07T08:07:41Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/AsyncLookupJoinRunnerTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join;\n+\n+import org.apache.flink.api.common.functions.AbstractRichFunction;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.functions.async.AsyncFunction;\n+import org.apache.flink.streaming.api.functions.async.ResultFuture;\n+import org.apache.flink.streaming.util.MockStreamingRuntimeContext;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.collector.TableFunctionCollector;\n+import org.apache.flink.table.runtime.collector.TableFunctionResultFuture;\n+import org.apache.flink.table.runtime.generated.GeneratedFunctionWrapper;\n+import org.apache.flink.table.runtime.generated.GeneratedResultFutureWrapper;\n+import org.apache.flink.table.runtime.operators.join.lookup.AsyncLookupJoinRunner;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.function.Supplier;\n+\n+import static org.apache.flink.table.data.StringData.fromString;\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.row;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for {@link AsyncLookupJoinRunner}.\n+ */\n+public class AsyncLookupJoinRunnerTest {\n+\n+\t@Test\n+\tpublic void testCloseAsyncLookupJoinRunner() throws Exception {\n+\t\tfinal InternalTypeInfo<RowData> rightRowTypeInfo = InternalTypeInfo.ofFields(\n+\t\t\t\tDataTypes.INT().getLogicalType(),\n+\t\t\t\tDataTypes.STRING().getLogicalType());\n+\t\tfinal AsyncLookupJoinRunner joinRunner = new AsyncLookupJoinRunner(\n+\t\t\t\tnew GeneratedFunctionWrapper(new TestingFetcherFunction()),\n+\t\t\t\tnew GeneratedResultFutureWrapper<>(new TestingFetcherResultFuture()),\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\trightRowTypeInfo,\n+\t\t\t\ttrue,\n+\t\t\t\t100);\n+\t\tassertNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.setRuntimeContext(new MockStreamingRuntimeContext(false, 1, 0));\n+\t\tjoinRunner.open(new Configuration());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\n+\t\tjoinRunner.open(new Configuration());\n+\t\tjoinRunner.asyncInvoke(row(1, \"a\"), new TestingFetcherResultFuture());\n+\t\tassertNotNull(joinRunner.getAllResultFutures());\n+\t\tcloseAsyncLookupJoinRunner(joinRunner);\n+\t}\n+\n+\tprivate void closeAsyncLookupJoinRunner(AsyncLookupJoinRunner joinRunner) throws Exception {\n+\t\ttry {\n+\t\t\tjoinRunner.close();\n+\t\t} catch (NullPointerException e) {\n+\t\t\tfail(\"Expected close to fail with null pointer exception.\");\n+\t\t}\n+\t}\n+\n+\t// ---------------------------------------------------------------------------------\n+\n+\t/**\n+\t * The {@link TestingFetcherFunction} only accepts a single integer lookup key and\n+\t * returns zero or one or more RowData.\n+\t */\n+\tpublic static final class TestingFetcherFunction\n+\t\t\textends AbstractRichFunction\n+\t\t\timplements AsyncFunction<RowData, RowData> {\n+\n+\t\tprivate static final long serialVersionUID = 4018474964018227081L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da25b44d59f5a02f8d780c17ee45f828fd2fd746"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b38edef1f03a5c1b1bfe6f0a50f575ecbcb1223e", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/b38edef1f03a5c1b1bfe6f0a50f575ecbcb1223e", "committedDate": "2020-12-07T09:07:43Z", "message": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1OTgzMzEy", "url": "https://github.com/apache/flink/pull/14207#pullrequestreview-545983312", "createdAt": "2020-12-07T09:49:48Z", "commit": {"oid": "b38edef1f03a5c1b1bfe6f0a50f575ecbcb1223e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6c34080b30a39e1b594bcb5ba04bf22b89561ef", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/c6c34080b30a39e1b594bcb5ba04bf22b89561ef", "committedDate": "2020-12-07T12:42:03Z", "message": "[FLINK-20250][table-runtime] NPE when invoking AsyncLookupJoinRunner#close method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjcxNjkz", "url": "https://github.com/apache/flink/pull/14207#pullrequestreview-546271693", "createdAt": "2020-12-07T15:41:16Z", "commit": {"oid": "c6c34080b30a39e1b594bcb5ba04bf22b89561ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4129, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}