{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mjg3MjM3", "number": 11892, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo0NzoyMFrOD2dRXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxODozOVrOD7fltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDI5Mjc4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMjo0NzoyMFrOGMOeZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzozNjoxOVrOGMPUBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MzI1Mw==", "bodyText": "I find the print (through TableResult#print) result of describe xx looks a little strange:\n+--------------------------------+\n|                         result |\n+--------------------------------+\n|  root\n |-- a: INT\n |-- b: S... |\n+--------------------------------+\n1 row in set\n\nUsers have to parse the unstructured result if he/she want to use the result to do sth through  TableResult#collect method.\nHow about we return a structured tableau result, e.g.\n+-------------+---------+-------------+\n|     name    |   type  |   comment   |\n+-------------+---------+-------------+\n|      a      |   INT   |             |\n|      b      |  STRING |             |\n+-------------+---------+-------------+\n 2 rows in set\n\nThis is different from the describe result in SQL client.\nAnther thing we should consider is how to print watermarkSpecs and compute column.\nHow about we add a column named expr to represent watermarkSpecs and compute column.\n\t +-------------+-------------+-------------+-------------+\n\t |     name    |     type    |   comment   |   expr      |\n\t +-------------+-------------+-------------+-------------+\n\t |      a      |    INT      |             |  (NULL)     |\n\t |      b      |    INT      |             |   a + 1     |\n\t |      c      |TIMESTAMP(3) |             |  (NULL)     |\n\t | WATERMARK   |  (NULL)     |             | c AS now()  |\n\t +-------------+-------------+-------------+-------------+", "url": "https://github.com/apache/flink/pull/11892#discussion_r415473253", "createdAt": "2020-04-27T02:47:20Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "diffHunk": "@@ -721,6 +721,15 @@ abstract class TableEnvImpl(\n             dropViewOperation.isIfExists)\n         }\n         TableResultImpl.TABLE_RESULT_OK\n+      case descOperation: DescribeTableOperation =>\n+        val result = catalogManager.getTable(descOperation.getSqlIdentifier)\n+        if (result.isPresent) {\n+          buildShowResult(Array(result.get().getTable.getSchema.toString))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84b468105ad7674897ed1df0f126d5f078944225"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTY2OA==", "bodyText": "cc @twalthr", "url": "https://github.com/apache/flink/pull/11892#discussion_r415479668", "createdAt": "2020-04-27T03:09:50Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "diffHunk": "@@ -721,6 +721,15 @@ abstract class TableEnvImpl(\n             dropViewOperation.isIfExists)\n         }\n         TableResultImpl.TABLE_RESULT_OK\n+      case descOperation: DescribeTableOperation =>\n+        val result = catalogManager.getTable(descOperation.getSqlIdentifier)\n+        if (result.isPresent) {\n+          buildShowResult(Array(result.get().getTable.getSchema.toString))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MzI1Mw=="}, "originalCommit": {"oid": "84b468105ad7674897ed1df0f126d5f078944225"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4NDg5OA==", "bodyText": "IMO the comment column is not needed since our SQL parser doesn't support column comments(We only support table comment now).", "url": "https://github.com/apache/flink/pull/11892#discussion_r415484898", "createdAt": "2020-04-27T03:28:38Z", "author": {"login": "docete"}, "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "diffHunk": "@@ -721,6 +721,15 @@ abstract class TableEnvImpl(\n             dropViewOperation.isIfExists)\n         }\n         TableResultImpl.TABLE_RESULT_OK\n+      case descOperation: DescribeTableOperation =>\n+        val result = catalogManager.getTable(descOperation.getSqlIdentifier)\n+        if (result.isPresent) {\n+          buildShowResult(Array(result.get().getTable.getSchema.toString))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MzI1Mw=="}, "originalCommit": {"oid": "84b468105ad7674897ed1df0f126d5f078944225"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ4Njk4Mg==", "bodyText": "I find SQL parser support column comments (see), but we do not store the comments into TableSchema. we ignore comment column.", "url": "https://github.com/apache/flink/pull/11892#discussion_r415486982", "createdAt": "2020-04-27T03:36:19Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "diffHunk": "@@ -721,6 +721,15 @@ abstract class TableEnvImpl(\n             dropViewOperation.isIfExists)\n         }\n         TableResultImpl.TABLE_RESULT_OK\n+      case descOperation: DescribeTableOperation =>\n+        val result = catalogManager.getTable(descOperation.getSqlIdentifier)\n+        if (result.isPresent) {\n+          buildShowResult(Array(result.get().getTable.getSchema.toString))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3MzI1Mw=="}, "originalCommit": {"oid": "84b468105ad7674897ed1df0f126d5f078944225"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzU0NDgyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0MzowNFrOGSf3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0MzowNFrOGSf3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0OTY2Nw==", "bodyText": "move these code to a separated method ?", "url": "https://github.com/apache/flink/pull/11892#discussion_r422049667", "createdAt": "2020-05-08T09:43:04Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -861,23 +865,32 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n \t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tString[][] rows = Stream.concat(\n+\t\t\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\t\t\tList<String> columns = p.getColumns();\n+\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\t\t});\n+\n+\t\t\t\tString[][] rows =\n \t\t\t\t\tschema.getTableColumns()\n \t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> new String[]{\n+\t\t\t\t\t\t\t.map((c) -> {\n+\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\t\t\t\treturn new String[]{\n \t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tc.getType().getLogicalType().toString(),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\")}),\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((w) -> new String[]{\n-\t\t\t\t\t\t\t\t\"WATERMARK\",\n-\t\t\t\t\t\t\t\t\"(NULL)\",\n-\t\t\t\t\t\t\t\tw.getWatermarkExpr()\n-\t\t\t\t\t\t\t})\n-\t\t\t\t).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"expr\"}, rows);\n+\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n+\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),\n+\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\"),\n+\t\t\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), \"(NULL)\")};\n+\t\t\t\t\t\t\t}).toArray(String[][]::new);\n+\n+\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"}, rows);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4787eab1bd146defb46b8aa22aa3f94564b73dad"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzU1MTI2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0NToxM1rOGSf7MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0NToxM1rOGSf7MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1MDYwOA==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11892#discussion_r422050608", "createdAt": "2020-05-08T09:45:13Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner/src/main/scala/org/apache/flink/table/api/internal/TableEnvImpl.scala", "diffHunk": "@@ -766,7 +768,29 @@ abstract class TableEnvImpl(\n       case descOperation: DescribeTableOperation =>\n         val result = catalogManager.getTable(descOperation.getSqlIdentifier)\n         if (result.isPresent) {\n-          buildShowResult(Array(result.get().getTable.getSchema.toString))\n+          val schema = result.get.getTable.getSchema\n+          val fieldToWatermark =\n+            schema\n+              .getWatermarkSpecs\n+              .map(w => (w.getRowtimeAttribute, w.getWatermarkExpr)).toMap\n+          val fieldToPrimaryKey = new JHashMap[String, String]()\n+          if (schema.getPrimaryKey.isPresent) {\n+            val columns = schema.getPrimaryKey.get.getColumns.asScala\n+            columns.foreach(c => fieldToPrimaryKey.put(c, s\"PRI(${columns.mkString(\",\")})\"))\n+          }\n+          val data = Array.ofDim[String](schema.getFieldCount, 6)\n+          schema.getTableColumns.asScala.zipWithIndex.foreach {\n+            case (c, i) => {\n+              val logicalType = c.getType.getLogicalType\n+              data(i)(0) = c.getName\n+              data(i)(1) = StringUtils.removeEnd(logicalType.toString, \" NOT NULL\")\n+              data(i)(2) = if (logicalType.isNullable) \"true\" else \"false\"\n+              data(i)(3) = fieldToPrimaryKey.getOrDefault(c.getName, \"(NULL)\")\n+              data(i)(4) = c.getExpr.orElse(\"(NULL)\")\n+              data(i)(5) = fieldToWatermark.getOrDefault(c.getName, \"(NULL)\")\n+            }\n+          }\n+          buildShowResult(Array(\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"), data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4787eab1bd146defb46b8aa22aa3f94564b73dad"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzU1ODkzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0Nzo1NlrOGSf_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0Nzo1NlrOGSf_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1MTc4Nw==", "bodyText": "we should use null instead of (NULL), (NULL) just a display form defined in PrintUtils.", "url": "https://github.com/apache/flink/pull/11892#discussion_r422051787", "createdAt": "2020-05-08T09:47:56Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -861,23 +865,32 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n \t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tString[][] rows = Stream.concat(\n+\t\t\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\t\t\tList<String> columns = p.getColumns();\n+\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\t\t});\n+\n+\t\t\t\tString[][] rows =\n \t\t\t\t\tschema.getTableColumns()\n \t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> new String[]{\n+\t\t\t\t\t\t\t.map((c) -> {\n+\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\t\t\t\treturn new String[]{\n \t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tc.getType().getLogicalType().toString(),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\")}),\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((w) -> new String[]{\n-\t\t\t\t\t\t\t\t\"WATERMARK\",\n-\t\t\t\t\t\t\t\t\"(NULL)\",\n-\t\t\t\t\t\t\t\tw.getWatermarkExpr()\n-\t\t\t\t\t\t\t})\n-\t\t\t\t).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"expr\"}, rows);\n+\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",\n+\t\t\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), \"(NULL)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4787eab1bd146defb46b8aa22aa3f94564b73dad"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzU2MTQzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0ODo0NFrOGSgBPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0ODo0NFrOGSgBPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1MjE1OA==", "bodyText": "should be boolean type instead of String", "url": "https://github.com/apache/flink/pull/11892#discussion_r422052158", "createdAt": "2020-05-08T09:48:44Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -861,23 +865,32 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n \t\t\tif (result.isPresent()) {\n \t\t\t\tTableSchema schema = result.get().getTable().getSchema();\n-\t\t\t\tString[][] rows = Stream.concat(\n+\t\t\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\t\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\t\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\t\t\tList<String> columns = p.getColumns();\n+\t\t\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t\t\t});\n+\n+\t\t\t\tString[][] rows =\n \t\t\t\t\tschema.getTableColumns()\n \t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((c) -> new String[]{\n+\t\t\t\t\t\t\t.map((c) -> {\n+\t\t\t\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\t\t\t\treturn new String[]{\n \t\t\t\t\t\t\t\tc.getName(),\n-\t\t\t\t\t\t\t\tc.getType().getLogicalType().toString(),\n-\t\t\t\t\t\t\t\tc.getExpr().orElse(\"(NULL)\")}),\n-\t\t\t\t\tschema.getWatermarkSpecs()\n-\t\t\t\t\t\t.stream()\n-\t\t\t\t\t\t\t.map((w) -> new String[]{\n-\t\t\t\t\t\t\t\t\"WATERMARK\",\n-\t\t\t\t\t\t\t\t\"(NULL)\",\n-\t\t\t\t\t\t\t\tw.getWatermarkExpr()\n-\t\t\t\t\t\t\t})\n-\t\t\t\t).toArray(String[][]::new);\n-\n-\t\t\t\treturn buildShowResult(new String[]{\"name\", \"type\", \"expr\"}, rows);\n+\t\t\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\t\t\tlogicalType.isNullable() ? \"true\" : \"false\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4787eab1bd146defb46b8aa22aa3f94564b73dad"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIwODUxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/api/TableEnvironmentTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoxOToxMFrOGS40Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjoxOToxMFrOGS40Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1ODQxMQ==", "bodyText": "please add all supported types here", "url": "https://github.com/apache/flink/pull/11892#discussion_r422458411", "createdAt": "2020-05-09T06:19:10Z", "author": {"login": "KurtYoung"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/api/TableEnvironmentTest.scala", "diffHunk": "@@ -985,6 +987,67 @@ class TableEnvironmentTest {\n     }\n   }\n \n+  @Test\n+  def testDescribeTableOrView(): Unit = {\n+    val sourceDDL =\n+      \"\"\"\n+        |CREATE TABLE T1(\n+        |  a int not null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDIxNTQyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjozMDoyMVrOGS43jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOTozMjowOFrOGS51Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTI3Nw==", "bodyText": "use String[][]? The fields are all strings", "url": "https://github.com/apache/flink/pull/11892#discussion_r422459277", "createdAt": "2020-05-09T06:30:21Z", "author": {"login": "KurtYoung"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -929,16 +935,69 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n \t\t\t\t\t.build();\n \n+\t\t} else if (operation instanceof DescribeTableOperation) {\n+\t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n+\t\t\tOptional<CatalogManager.TableLookupResult> result =\n+\t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n+\t\t\tif (result.isPresent()) {\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t} else {\n+\t\t\t\tthrow new ValidationException(String.format(\n+\t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n+\t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n+\t\t\t}\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t});\n+\n+\t\tObject[][] rows =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTA3MQ==", "bodyText": "Not all strings. the nullable of type is boolean.", "url": "https://github.com/apache/flink/pull/11892#discussion_r422475071", "createdAt": "2020-05-09T09:32:08Z", "author": {"login": "docete"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -929,16 +935,69 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n \t\t\t\t\t.build();\n \n+\t\t} else if (operation instanceof DescribeTableOperation) {\n+\t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n+\t\t\tOptional<CatalogManager.TableLookupResult> result =\n+\t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n+\t\t\tif (result.isPresent()) {\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t} else {\n+\t\t\t\tthrow new ValidationException(String.format(\n+\t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n+\t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n+\t\t\t}\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t});\n+\n+\t\tObject[][] rows =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1OTI3Nw=="}, "originalCommit": {"oid": "4fca4d498b4fe7cab7da0537c8010298b1e0aa22"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDQ1NTg1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMzozNFrOGTcchw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzozMzozNFrOGTcchw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA0MjE4Mw==", "bodyText": "computed column", "url": "https://github.com/apache/flink/pull/11892#discussion_r423042183", "createdAt": "2020-05-11T13:33:34Z", "author": {"login": "KurtYoung"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -929,16 +935,69 @@ private TableResult executeOperation(Operation operation) {\n \t\t\t\t\t.setPrintStyle(TableResultImpl.PrintStyle.RAW_CONTENT)\n \t\t\t\t\t.build();\n \n+\t\t} else if (operation instanceof DescribeTableOperation) {\n+\t\t\tDescribeTableOperation describeTableOperation = (DescribeTableOperation) operation;\n+\t\t\tOptional<CatalogManager.TableLookupResult> result =\n+\t\t\t\t\tcatalogManager.getTable(describeTableOperation.getSqlIdentifier());\n+\t\t\tif (result.isPresent()) {\n+\t\t\t\treturn buildDescribeResult(result.get().getTable().getSchema());\n+\t\t\t} else {\n+\t\t\t\tthrow new ValidationException(String.format(\n+\t\t\t\t\t\t\"Tables or views with the identifier '%s' doesn't exist\",\n+\t\t\t\t\t\tdescribeTableOperation.getSqlIdentifier().asSummaryString()));\n+\t\t\t}\n \t\t} else {\n \t\t\tthrow new TableException(UNSUPPORTED_QUERY_IN_EXECUTE_SQL_MSG);\n \t\t}\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));\n+\t\t});\n+\n+\t\tObject[][] rows =\n+\t\t\tschema.getTableColumns()\n+\t\t\t\t.stream()\n+\t\t\t\t.map((c) -> {\n+\t\t\t\t\tLogicalType logicalType = c.getType().getLogicalType();\n+\t\t\t\t\treturn new Object[]{\n+\t\t\t\t\t\tc.getName(),\n+\t\t\t\t\t\tStringUtils.removeEnd(logicalType.toString(), \" NOT NULL\"),\n+\t\t\t\t\t\tlogicalType.isNullable(),\n+\t\t\t\t\t\tfieldToPrimaryKey.getOrDefault(c.getName(), null),\n+\t\t\t\t\t\tc.getExpr().orElse(null),\n+\t\t\t\t\t\tfieldToWatermark.getOrDefault(c.getName(), null)};\n+\t\t\t\t}).toArray(Object[][]::new);\n+\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"name\", \"type\", \"null\", \"key\", \"compute column\", \"watermark\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b932462436bbab0e9c220203b374a9290ed7e1a4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAzMTcxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDozNjowNFrOGT1v7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDozNjowNFrOGT1v7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1Njc0OQ==", "bodyText": "String.join(\", \", columns) instead of String.join(\",\", columns) (with an extra space after the comma) seems to be more standard in formatting.", "url": "https://github.com/apache/flink/pull/11892#discussion_r423456749", "createdAt": "2020-05-12T04:36:04Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -974,10 +991,53 @@ private TableResult executeOperation(Operation operation) {\n \t}\n \n \tprivate TableResult buildShowResult(String[] objects) {\n+\t\treturn buildResult(\n+\t\t\tnew String[]{\"result\"},\n+\t\t\tnew DataType[]{DataTypes.STRING()},\n+\t\t\tArrays.stream(objects).map((c) -> new String[]{c}).toArray(String[][]::new));\n+\t}\n+\n+\tprivate TableResult buildDescribeResult(TableSchema schema) {\n+\t\tMap<String, String> fieldToWatermark =\n+\t\t\t\tschema.getWatermarkSpecs()\n+\t\t\t\t\t\t.stream()\n+\t\t\t\t\t\t.collect(Collectors.toMap(WatermarkSpec::getRowtimeAttribute, WatermarkSpec::getWatermarkExpr));\n+\n+\t\tMap<String, String> fieldToPrimaryKey = new HashMap<>();\n+\t\tschema.getPrimaryKey().ifPresent((p) -> {\n+\t\t\tList<String> columns = p.getColumns();\n+\t\t\tcolumns.forEach((c) -> fieldToPrimaryKey.put(c, String.format(\"PRI(%s)\", String.join(\",\", columns))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d857d271ec18e649d794bea122366220825caf68"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzA5MjU4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxMzozM1rOGT2U2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxMzozM1rOGT2U2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NjIwMg==", "bodyText": "we only need one constructor,  which is called in PrintStyle", "url": "https://github.com/apache/flink/pull/11892#discussion_r423466202", "createdAt": "2020-05-12T05:13:33Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -217,15 +238,30 @@ static PrintStyle rawContent() {\n \t * print the result schema and content as tableau form.\n \t */\n \tprivate static final class TableauStyle implements PrintStyle {\n+\n \t\tprivate final int maxColumnWidth;\n+\t\tprivate final String nullColumnStyle;\n \n \t\tprivate TableauStyle(int maxColumnWidth) {\n+\t\t\tthis(maxColumnWidth, PrintUtils.NULL_COLUMN);\n+\t\t}\n+\n+\t\tprivate TableauStyle(String nullColumn) {\n+\t\t\tthis(PrintUtils.MAX_COLUMN_WIDTH, nullColumn);\n+\t\t}\n+\n+\t\tprivate TableauStyle(int maxColumnWidth, String nullColumnStyle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzA5NTMwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxNToxMFrOGT2Wkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxNToxMFrOGT2Wkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NjY0Mg==", "bodyText": "only this method is enough ?", "url": "https://github.com/apache/flink/pull/11892#discussion_r423466642", "createdAt": "2020-05-12T05:15:10Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -203,6 +205,25 @@ static PrintStyle tableau(int maxColumnWidth) {\n \t\t\treturn new TableauStyle(maxColumnWidth);\n \t\t}\n \n+\t\t/**\n+\t\t * Create a tableau print style with given null column style,\n+\t\t * which prints the result schema and content as tableau form.\n+\t\t */\n+\t\tstatic PrintStyle tableau(String nullColumnStyle) {\n+\t\t\tPreconditions.checkNotNull(nullColumnStyle, \"nullColumnStyle should not be null\");\n+\t\t\treturn new TableauStyle(nullColumnStyle);\n+\t\t}\n+\n+\t\t/**\n+\t\t * Create a tableau print style with given max column width and null column style,\n+\t\t * which prints the result schema and content as tableau form.\n+\t\t */\n+\t\tstatic PrintStyle tableau(int maxColumnWidth, String nullColumnStyle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzEwMTMyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNToxODozOVrOGT2aUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1NToyM1rOGT4hPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzYwMA==", "bodyText": "rename to nullColumnPlaceholder ?", "url": "https://github.com/apache/flink/pull/11892#discussion_r423467600", "createdAt": "2020-05-12T05:18:39Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -217,15 +238,30 @@ static PrintStyle rawContent() {\n \t * print the result schema and content as tableau form.\n \t */\n \tprivate static final class TableauStyle implements PrintStyle {\n+\n \t\tprivate final int maxColumnWidth;\n+\t\tprivate final String nullColumnStyle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MjUxMQ==", "bodyText": "nullColumnDisplayValue?", "url": "https://github.com/apache/flink/pull/11892#discussion_r423472511", "createdAt": "2020-05-12T05:36:51Z", "author": {"login": "KurtYoung"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -217,15 +238,30 @@ static PrintStyle rawContent() {\n \t * print the result schema and content as tableau form.\n \t */\n \tprivate static final class TableauStyle implements PrintStyle {\n+\n \t\tprivate final int maxColumnWidth;\n+\t\tprivate final String nullColumnStyle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzYwMA=="}, "originalCommit": {"oid": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMjE0MA==", "bodyText": "will use nullColumn to keep consistent with PrintUtils", "url": "https://github.com/apache/flink/pull/11892#discussion_r423502140", "createdAt": "2020-05-12T06:55:23Z", "author": {"login": "docete"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableResultImpl.java", "diffHunk": "@@ -217,15 +238,30 @@ static PrintStyle rawContent() {\n \t * print the result schema and content as tableau form.\n \t */\n \tprivate static final class TableauStyle implements PrintStyle {\n+\n \t\tprivate final int maxColumnWidth;\n+\t\tprivate final String nullColumnStyle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ2NzYwMA=="}, "originalCommit": {"oid": "49c454b699921372eb9a7aef0f8c3a38cfa2bf81"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1594, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}