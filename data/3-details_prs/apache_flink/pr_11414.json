{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDYwMjE4", "number": 11414, "title": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported", "bodyText": "What is the purpose of the change\nCurrently, there are still cases where a data type isn't supported as the Python data type will be firstly converted to TypeInformation which will lose a few information, e.g,\n\nthe precision for TimeType could only be 0\nthe length for VarBinaryType/VarCharType could only be 0x7fffffff\nthe precision/scale for DecimalType could only be 38/18\nthe precision for TimestampType/LocalZonedTimestampType could only be 3\nthe resolution for DayTimeIntervalType could only be SECOND and the fractionalPrecision could only be 3\nthe resolution for YearMonthIntervalType could only be MONTH and the yearPrecision could only be 2\nthe CharType/BinaryType/ZonedTimestampType is not supported\n\nWe should throw exceptions for the cases not supported.\nBrief change log\n\nUpdate the types.py to throw exceptions when a data type is not supported\n\nVerifying this change\nThis change is a trivial rework without any test coverage.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-03-16T08:14:25Z", "url": "https://github.com/apache/flink/pull/11414", "merged": true, "mergeCommit": {"oid": "b83060dff6d403b6994b6646b3f29a374f599530"}, "closed": true, "closedAt": "2020-03-18T11:42:39Z", "author": {"login": "dianfu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOOY-FABqjMxMzMyNjE5ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOzy2FgBqjMxNDA1OTk3OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef1c12148834bd5ee016f4099a4796620d684c6d", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/ef1c12148834bd5ee016f4099a4796620d684c6d", "committedDate": "2020-03-16T08:11:31Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}, "afterCommit": {"oid": "ba28e3bdcaa2866be33d4fca7780b3339b2437a2", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/ba28e3bdcaa2866be33d4fca7780b3339b2437a2", "committedDate": "2020-03-16T13:46:34Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba28e3bdcaa2866be33d4fca7780b3339b2437a2", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/ba28e3bdcaa2866be33d4fca7780b3339b2437a2", "committedDate": "2020-03-16T13:46:34Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}, "afterCommit": {"oid": "6223ae638613048a8f2df11b2fadc9f0165b9121", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/6223ae638613048a8f2df11b2fadc9f0165b9121", "committedDate": "2020-03-17T02:11:05Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzYyNTQ0", "url": "https://github.com/apache/flink/pull/11414#pullrequestreview-375762544", "createdAt": "2020-03-17T06:13:46Z", "commit": {"oid": "6223ae638613048a8f2df11b2fadc9f0165b9121"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjoxMzo0N1rOF3PE3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNjoxMzo0N1rOF3PE3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2MzAwNQ==", "bodyText": "Maybe also add python notice document in the related APIs?", "url": "https://github.com/apache/flink/pull/11414#discussion_r393463005", "createdAt": "2020-03-17T06:13:47Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/table/types.py", "diffHunk": "@@ -1621,33 +1621,77 @@ def _to_java_type(data_type):\n                 BigIntType: Types.LONG(),\n                 FloatType: Types.FLOAT(),\n                 DoubleType: Types.DOUBLE(),\n-                DecimalType: Types.DECIMAL(),\n                 DateType: Types.SQL_DATE(),\n-                TimeType: Types.SQL_TIME(),\n-                TimestampType: Types.SQL_TIMESTAMP(),\n-                LocalZonedTimestampType: Types.SQL_TIMESTAMP(),\n-                CharType: Types.STRING(),\n-                VarCharType: Types.STRING(),\n-                BinaryType: Types.PRIMITIVE_ARRAY(Types.BYTE()),\n-                VarBinaryType: Types.PRIMITIVE_ARRAY(Types.BYTE())\n             }\n \n-    # NullType\n-    if isinstance(data_type, NullType):\n-        # null type is still not supported in Java\n-        raise NotImplementedError\n-\n     # basic types\n-    elif type(data_type) in _python_java_types_mapping:\n+    if type(data_type) in _python_java_types_mapping:\n         return _python_java_types_mapping[type(data_type)]\n \n+    # DecimalType\n+    elif isinstance(data_type, DecimalType):\n+        if data_type.precision == 38 and data_type.scale == 18:\n+            return Types.DECIMAL()\n+        else:\n+            raise TypeError(\"The precision must be 38 and the scale must be 18 for DecimalType, \"\n+                            \"got %s\" % repr(data_type))\n+\n+    # TimeType\n+    elif isinstance(data_type, TimeType):\n+        if data_type.precision == 0:\n+            return Types.SQL_TIME()\n+        else:\n+            raise TypeError(\"The precision must be 0 for TimeType, got %s\" % repr(data_type))\n+\n+    # TimestampType\n+    elif isinstance(data_type, TimestampType):\n+        if data_type.precision == 3:\n+            return Types.SQL_TIMESTAMP()\n+        else:\n+            raise TypeError(\"The precision must be 3 for TimestampType, got %s\" % repr(data_type))\n+\n+    # LocalZonedTimestampType\n+    elif isinstance(data_type, LocalZonedTimestampType):\n+        if data_type.precision == 3:\n+            return gateway.jvm.org.apache.flink.api.common.typeinfo.Types.INSTANT\n+        else:\n+            raise TypeError(\"The precision must be 3 for LocalZonedTimestampType, got %s\"\n+                            % repr(data_type))\n+\n+    # VarCharType\n+    elif isinstance(data_type, VarCharType):\n+        if data_type.length == 0x7fffffff:\n+            return Types.STRING()\n+        else:\n+            raise TypeError(\"The length limit must be 0x7fffffff(2147483647) for VarCharType, \"\n+                            \"got %s\" % repr(data_type))\n+\n+    # VarBinaryType\n+    elif isinstance(data_type, VarBinaryType):\n+        if data_type.length == 0x7fffffff:\n+            return Types.PRIMITIVE_ARRAY(Types.BYTE())\n+        else:\n+            raise TypeError(\"The length limit must be 0x7fffffff(2147483647) for VarBinaryType, \"\n+                            \"got %s\" % repr(data_type))\n+\n     # YearMonthIntervalType\n     elif isinstance(data_type, YearMonthIntervalType):\n-        return Types.INTERVAL_MONTHS()\n+        if data_type.resolution == YearMonthIntervalType.YearMonthResolution.MONTH and \\\n+                data_type.precision == 2:\n+            return Types.INTERVAL_MONTHS()\n+        else:\n+            raise TypeError(\"The resolution must be YearMonthResolution.MONTH and the precision \"\n+                            \"must be 2 for YearMonthIntervalType, got %s\" % repr(data_type))\n \n     # DayTimeIntervalType\n     elif isinstance(data_type, DayTimeIntervalType):\n-        return Types.INTERVAL_MILLIS()\n+        if data_type.resolution == DayTimeIntervalType.DayTimeResolution.SECOND and \\\n+                data_type.day_precision == 2 and data_type.fractional_precision == 3:\n+            return Types.INTERVAL_MILLIS()\n+        else:\n+            raise TypeError(\"The resolution must be DayTimeResolution.SECOND, the day_precision \"\n+                            \"must be 2 and the fractional_precision must be 3 for \"\n+                            \"DayTimeIntervalType, got %s\" % repr(data_type))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6223ae638613048a8f2df11b2fadc9f0165b9121"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6223ae638613048a8f2df11b2fadc9f0165b9121", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/6223ae638613048a8f2df11b2fadc9f0165b9121", "committedDate": "2020-03-17T02:11:05Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}, "afterCommit": {"oid": "9052711c864cb9c8cdfe3d0f9a3d309e14ba9b16", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/9052711c864cb9c8cdfe3d0f9a3d309e14ba9b16", "committedDate": "2020-03-18T09:12:36Z", "message": "[FLINK-16606][python] Support LocalZonedTimestampType for blink planner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21170bf28aa918f2f95331c929dd5d1bd0aee364", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/21170bf28aa918f2f95331c929dd5d1bd0aee364", "committedDate": "2020-03-18T09:21:02Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9052711c864cb9c8cdfe3d0f9a3d309e14ba9b16", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/9052711c864cb9c8cdfe3d0f9a3d309e14ba9b16", "committedDate": "2020-03-18T09:12:36Z", "message": "[FLINK-16606][python] Support LocalZonedTimestampType for blink planner"}, "afterCommit": {"oid": "21170bf28aa918f2f95331c929dd5d1bd0aee364", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/21170bf28aa918f2f95331c929dd5d1bd0aee364", "committedDate": "2020-03-18T09:21:02Z", "message": "[FLINK-16606][python] Throw exceptions for the data types which are not currently supported"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2791, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}