{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTIzMDMx", "number": 13352, "title": "[FLINK-19092][sql-parser] Parse comment on computed column failed", "bodyText": "What is the purpose of the change\nCurrently exception of parser is thrown when adding comment on computed column with DDL. Parser should support comment on computed column for DDL of CREATE TABLE as follows:\n<computed_column_definition>: column_name AS computed_column_expression [COMMENT column_comment]\n\nBrief change log\n\nAdd SqlTableComputedColumn to support commented computed column in Parser.tdd.\nComputedColumn  of parserImpls.ftl which creates computed column returns the SqlTableComputedColumn.\nSqlCreateTable modifies validation and unparse about the computed column by SqlTableComputedColumn.\nMergeTableLikeUtil modifies the check for the computed column whether derivedColumn is instance of SqlTableComputedColumn.\n\nVerifying this change\n\nFlinkSqlParserImplTest adds testCreateTableWithCommentOnComputedColumn to verify the test case that creates table with comment on the computed column.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-09-08T09:51:51Z", "url": "https://github.com/apache/flink/pull/13352", "merged": true, "mergeCommit": {"oid": "b873564357612bbea788332632955fc256105d35"}, "closed": true, "closedAt": "2020-09-15T03:23:22Z", "author": {"login": "SteNicholas"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG0UGeAH2gAyNDgxOTIzMDMxOmQwNmRiY2QwNGE2MTFmM2FkZmEyODEyNjY4YTEzMTk1ZjY1MjM3ZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHdq_1gFqTQ4NTc2NjYyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d06dbcd04a611f3adfa2812668a13195f65237fd", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/d06dbcd04a611f3adfa2812668a13195f65237fd", "committedDate": "2020-09-08T09:37:48Z", "message": "[FLINK-19092][sql-parser] Parse comment on computed column failed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDczMzc0", "url": "https://github.com/apache/flink/pull/13352#pullrequestreview-484073374", "createdAt": "2020-09-08T12:16:54Z", "commit": {"oid": "d06dbcd04a611f3adfa2812668a13195f65237fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxNjo1NFrOHOaIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxNjo1NFrOHOaIQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MDIwOA==", "bodyText": "Can we merge this class into SqlTableColumn ? Just like what we do in schema TableColumn.", "url": "https://github.com/apache/flink/pull/13352#discussion_r484870208", "createdAt": "2020-09-08T12:16:54Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/ddl/SqlTableComputedColumn.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.sql.parser.ddl;\n+\n+import org.apache.calcite.sql.SqlCall;\n+import org.apache.calcite.sql.SqlCharStringLiteral;\n+import org.apache.calcite.sql.SqlKind;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.SqlOperator;\n+import org.apache.calcite.sql.SqlSpecialOperator;\n+import org.apache.calcite.sql.SqlWriter;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.util.ImmutableNullableList;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * Table computed column of a CREATE TABLE DDL.\n+ */\n+public class SqlTableComputedColumn extends SqlCall {\n+\tprivate static final SqlSpecialOperator OPERATOR =\n+\t\tnew SqlSpecialOperator(\"COLUMN_DECL\", SqlKind.COLUMN_DECL);\n+\n+\tprivate SqlNode identifier;\n+\tprivate SqlNode expr;\n+\tprivate SqlCharStringLiteral comment;\n+\n+\tpublic SqlTableComputedColumn(SqlNode identifier, SqlNode expr, @Nullable SqlCharStringLiteral comment, SqlParserPos pos) {\n+\t\tsuper(pos);\n+\t\tthis.identifier = requireNonNull(identifier, \"Column identifier should not be null\");\n+\t\tthis.expr = requireNonNull(expr, \"Column expression should not be null\");\n+\t\tthis.comment = comment;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d06dbcd04a611f3adfa2812668a13195f65237fd"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800d23e1a95bee277aa2dce51c0625901fae92ca", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/800d23e1a95bee277aa2dce51c0625901fae92ca", "committedDate": "2020-09-09T14:12:39Z", "message": "[FLINK-19092][sql-parser] Parse comment on computed column failed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NTQ0Mjc4", "url": "https://github.com/apache/flink/pull/13352#pullrequestreview-485544278", "createdAt": "2020-09-10T03:44:05Z", "commit": {"oid": "800d23e1a95bee277aa2dce51c0625901fae92ca"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzo0NDowNVrOHPh0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMzo0NDowNVrOHPh0jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0NDgxNA==", "bodyText": "Can be isGenerated to be synced with TableColumn\nreturn expr != null; is enough", "url": "https://github.com/apache/flink/pull/13352#discussion_r486044814", "createdAt": "2020-09-10T03:44:05Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/ddl/SqlTableColumn.java", "diffHunk": "@@ -65,34 +67,55 @@ public SqlTableColumn(SqlIdentifier name,\n \t\tthis.comment = comment;\n \t}\n \n+\tpublic SqlTableColumn(SqlIdentifier name,\n+\t\t\tSqlNode expr,\n+\t\t\t@Nullable SqlCharStringLiteral comment,\n+\t\t\tSqlParserPos pos) {\n+\t\tsuper(pos);\n+\t\tthis.name = requireNonNull(name, \"Column name should not be null\");\n+\t\tthis.expr = requireNonNull(expr, \"Column expression should not be null\");\n+\t\tthis.comment = comment;\n+\t}\n+\n \t@Override\n \tpublic SqlOperator getOperator() {\n \t\treturn OPERATOR;\n \t}\n \n \t@Override\n \tpublic List<SqlNode> getOperandList() {\n-\t\treturn ImmutableNullableList.of(name, type, comment);\n+\t\treturn isComputed() ?\n+\t\t\tImmutableNullableList.of(name, expr, comment) :\n+\t\t\tImmutableNullableList.of(name, type, comment);\n \t}\n \n \t@Override\n \tpublic void unparse(SqlWriter writer, int leftPrec, int rightPrec) {\n \t\tthis.name.unparse(writer, leftPrec, rightPrec);\n-\t\twriter.print(\" \");\n-\t\tthis.type.unparse(writer, leftPrec, rightPrec);\n-\t\tif (!this.type.getNullable()) {\n-\t\t\t// Default is nullable.\n-\t\t\twriter.keyword(\"NOT NULL\");\n-\t\t}\n-\t\tif (this.constraint != null) {\n-\t\t\tthis.constraint.unparse(writer, leftPrec, rightPrec);\n+\t\tif (isComputed()) {\n+\t\t\twriter.keyword(\"AS\");\n+\t\t\tthis.expr.unparse(writer, leftPrec, rightPrec);\n+\t\t} else {\n+\t\t\twriter.print(\" \");\n+\t\t\tthis.type.unparse(writer, leftPrec, rightPrec);\n+\t\t\tif (!this.type.getNullable()) {\n+\t\t\t\t// Default is nullable.\n+\t\t\t\twriter.keyword(\"NOT NULL\");\n+\t\t\t}\n+\t\t\tif (this.constraint != null) {\n+\t\t\t\tthis.constraint.unparse(writer, leftPrec, rightPrec);\n+\t\t\t}\n \t\t}\n \t\tif (this.comment != null) {\n \t\t\twriter.print(\" COMMENT \");\n \t\t\tthis.comment.unparse(writer, leftPrec, rightPrec);\n \t\t}\n \t}\n \n+\tpublic boolean isComputed() {\n+\t\treturn type == null && expr != null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "800d23e1a95bee277aa2dce51c0625901fae92ca"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9345a586435c7b1efb8aa8ffe210d659bd01c3b", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/d9345a586435c7b1efb8aa8ffe210d659bd01c3b", "committedDate": "2020-09-10T07:13:35Z", "message": "[FLINK-19092][sql-parser] Parse comment on computed column failed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NjkzODE0", "url": "https://github.com/apache/flink/pull/13352#pullrequestreview-485693814", "createdAt": "2020-09-10T08:19:21Z", "commit": {"oid": "d9345a586435c7b1efb8aa8ffe210d659bd01c3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NzA0MDE1", "url": "https://github.com/apache/flink/pull/13352#pullrequestreview-485704015", "createdAt": "2020-09-10T08:32:25Z", "commit": {"oid": "d9345a586435c7b1efb8aa8ffe210d659bd01c3b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODozMjoyNVrOHPo9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODozMjozNVrOHPo-Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2MTg1MQ==", "bodyText": "Better to return Optional<SqlNode> to keep consistent with other nullable methods.", "url": "https://github.com/apache/flink/pull/13352#discussion_r486161851", "createdAt": "2020-09-10T08:32:25Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/ddl/SqlTableColumn.java", "diffHunk": "@@ -109,6 +137,14 @@ public void setType(SqlDataTypeSpec type) {\n \t\tthis.type = type;\n \t}\n \n+\tpublic SqlNode getExpr() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9345a586435c7b1efb8aa8ffe210d659bd01c3b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE2MTk3MQ==", "bodyText": "This is never used?", "url": "https://github.com/apache/flink/pull/13352#discussion_r486161971", "createdAt": "2020-09-10T08:32:35Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-sql-parser/src/main/java/org/apache/flink/sql/parser/ddl/SqlTableColumn.java", "diffHunk": "@@ -109,6 +137,14 @@ public void setType(SqlDataTypeSpec type) {\n \t\tthis.type = type;\n \t}\n \n+\tpublic SqlNode getExpr() {\n+\t\treturn expr;\n+\t}\n+\n+\tpublic void setExpr(SqlNode expr) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9345a586435c7b1efb8aa8ffe210d659bd01c3b"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7074c013502a3b3d966e102bfdbc164cb3ba6ef1", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/7074c013502a3b3d966e102bfdbc164cb3ba6ef1", "committedDate": "2020-09-10T09:43:38Z", "message": "[FLINK-19092][sql-parser] Parse comment on computed column failed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NzY2NjI2", "url": "https://github.com/apache/flink/pull/13352#pullrequestreview-485766626", "createdAt": "2020-09-10T09:48:55Z", "commit": {"oid": "7074c013502a3b3d966e102bfdbc164cb3ba6ef1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4513, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}