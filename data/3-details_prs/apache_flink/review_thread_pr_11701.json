{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODg3MzM1", "number": 11701, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyMzoxMFrODxq2cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxOToxNVrODxsiew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDA4ODgyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/utils/FunctionLookupMock.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyMzoxMFrOGFRINQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDoyMzoxMFrOGFRINQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE3NjY5Mw==", "bodyText": "nit: remove <", "url": "https://github.com/apache/flink/pull/11701#discussion_r408176693", "createdAt": "2020-04-14T14:23:10Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/utils/FunctionLookupMock.java", "diffHunk": "@@ -59,6 +57,11 @@\n  *      <li>BuiltinFunctionDefinitions.FLATTEN</li>\n  * </ul>\n  *\n+ * <p>Built-in functions that use the Flink's type inference stack:\n+ * <ul>\n+ *     <li>BuiltinFunctionDefinitions.ROW<</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9aef020fbcc810e5a0cea33731a5b5134f8bea"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDI2MDgyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/inference/MapInputTypeStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1ODowMFrOGFS14g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo1ODowMFrOGFS14g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwNDc3MA==", "bodyText": "nit: on one hand it is nice to hide this but on the other hand it spams the current package and org.apache.flink.table.types.inference.strategies should be the right location.", "url": "https://github.com/apache/flink/pull/11701#discussion_r408204770", "createdAt": "2020-04-14T14:58:00Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/inference/MapInputTypeStrategy.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.types.inference;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.table.functions.FunctionDefinition;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.utils.LogicalTypeGeneralization;\n+import org.apache.flink.table.types.utils.TypeConversions;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+/**\n+ * {@link InputTypeStrategy} specific for {@link org.apache.flink.table.functions.BuiltInFunctionDefinitions#MAP}.\n+ *\n+ * <p>It expects at least two arguments. There must be even number of arguments.\n+ * All the keys and values must have a common super type respectively.\n+ */\n+@Internal\n+class MapInputTypeStrategy implements InputTypeStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9aef020fbcc810e5a0cea33731a5b5134f8bea"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDI3OTE5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/test/java/org/apache/flink/table/types/inference/InputTypeStrategiesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowMToxNVrOGFTBIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowMToxNVrOGFTBIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwNzY1MA==", "bodyText": "nit: how about we just use the class name of input strategy by default", "url": "https://github.com/apache/flink/pull/11701#discussion_r408207650", "createdAt": "2020-04-14T15:01:15Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-common/src/test/java/org/apache/flink/table/types/inference/InputTypeStrategiesTest.java", "diffHunk": "@@ -553,5 +609,10 @@ TestSpec expectErrorMessage(String expectedErrorMessage) {\n \t\t\tthis.expectedErrorMessage = expectedErrorMessage;\n \t\t\treturn this;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn description != null ? description : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9aef020fbcc810e5a0cea33731a5b5134f8bea"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDM1NzU3OnYy", "diffSide": "LEFT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/validation/ArrayTypeValidationTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxNzozOFrOGFTypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxNzozOFrOGFTypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMDMyNg==", "bodyText": "Can we add a test to org.apache.flink.table.planner.expressions.ArrayTypeTest for this if it works now.", "url": "https://github.com/apache/flink/pull/11701#discussion_r408220326", "createdAt": "2020-04-14T15:17:38Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/validation/ArrayTypeValidationTest.scala", "diffHunk": "@@ -26,11 +26,6 @@ import org.junit.Test\n \n class ArrayTypeValidationTest extends ArrayTypeTestBase {\n \n-  @Test(expected = classOf[ValidationException])\n-  def testImplicitTypeCastTableApi(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9aef020fbcc810e5a0cea33731a5b5134f8bea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDM2NTM5OnYy", "diffSide": "LEFT", "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/expressions/validation/MapTypeValidationTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxOToxNVrOGFT3jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxOToxNVrOGFT3jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMTU4Mw==", "bodyText": "Add a test to org.apache.flink.table.planner.expressions.MapTypeTest?", "url": "https://github.com/apache/flink/pull/11701#discussion_r408221583", "createdAt": "2020-04-14T15:19:15Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/expressions/validation/MapTypeValidationTest.scala", "diffHunk": "@@ -45,11 +45,6 @@ class MapTypeValidationTest extends MapTypeTestBase {\n     testAllApis(\"FAIL\", \"map()\", \"MAP[]\", \"FAIL\")\n   }\n \n-  @Test(expected = classOf[ValidationException])\n-  def testUnsupportedMapImplicitTypeCastTableApi(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9aef020fbcc810e5a0cea33731a5b5134f8bea"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1713, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}