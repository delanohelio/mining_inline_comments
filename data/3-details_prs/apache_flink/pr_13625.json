{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMDk0NzE5", "number": 13625, "title": "[FLINK-19623][table-planner-blink] Introduce ExecEdge to describe information on input edges for ExecNode", "bodyText": "What is the purpose of the change\nDeadlock breakup algorithm and Multi-input operator creation algorithm need information about the input edges of an exec node, for example what's the priority of this input, and how the input records will trigger the output records.\nAlthough BatchExecNode currently has a getDamBehavior method, it only describes the behavior of the node and is not very useful for the new deadlock breakup algorithm. So we're going to introduce a new class ExecEdge to describe this and a new method getInputEdges for ExecNode.\nBrief change log\n\nIntroduce ExecEdge\n\nVerifying this change\nThis change is covered by existing tests, such as DeadlockBreakupTest.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-10-14T04:19:16Z", "url": "https://github.com/apache/flink/pull/13625", "merged": true, "mergeCommit": {"oid": "37dbcac0c86ff81ac44c812a76754c76b99775c9"}, "closed": true, "closedAt": "2020-10-20T01:58:37Z", "author": {"login": "tsreaper"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSxyJwAFqTUwOTMzNDY1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUAHlIAH2gAyNTAzMDk0NzE5OjU2ZmE2OWYwNmQ1ZDA3NWFmZjBjZWI4Y2I3MjFmZTQxZWIzZjg5ZWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzM0NjUw", "url": "https://github.com/apache/flink/pull/13625#pullrequestreview-509334650", "createdAt": "2020-10-15T12:42:31Z", "commit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjo0MjozMVrOHiF1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzoyNjozM1rOHiHuUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwOTE0OQ==", "bodyText": "It's better we could use Builder to create an ExecEdge, because all single nodes' priority is always 0, many nodes provide unknown RequiredShuffle, and maybe there are more properties will be added in the future, e.g. source/target node", "url": "https://github.com/apache/flink/pull/13625#discussion_r505509149", "createdAt": "2020-10-15T12:42:31Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMDIwNg==", "bodyText": "require keys is not empty here.", "url": "https://github.com/apache/flink/pull/13625#discussion_r505510206", "createdAt": "2020-10-15T12:44:05Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMDQ4Mw==", "bodyText": "add some comments for the public apis", "url": "https://github.com/apache/flink/pull/13625#discussion_r505510483", "createdAt": "2020-10-15T12:44:34Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMTIyNg==", "bodyText": "provide another constructor private RequiredShuffle(ShuffleType type)", "url": "https://github.com/apache/flink/pull/13625#discussion_r505511226", "createdAt": "2020-10-15T12:45:37Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.ANY, keys);\n+\t\t\t} else {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.HASH, keys);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle broadcast() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.BROADCAST, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle singleton() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.SINGLETON, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle unknown() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.UNKNOWN, new int[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMzEzMw==", "bodyText": "use ExecNode instead of partition to describe the target", "url": "https://github.com/apache/flink/pull/13625#discussion_r505513133", "createdAt": "2020-10-15T12:48:32Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.ANY, keys);\n+\t\t\t} else {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.HASH, keys);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle broadcast() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.BROADCAST, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle singleton() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.SINGLETON, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle unknown() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.UNKNOWN, new int[0]);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Enumeration which describes the shuffle type for records when passing this edge.\n+\t */\n+\tpublic enum ShuffleType {\n+\n+\t\t/**\n+\t\t * Any type of shuffle is OK when passing through this edge.\n+\t\t */\n+\t\tANY,\n+\n+\t\t/**\n+\t\t * Records are shuffle by hash when passing through this edge.\n+\t\t */\n+\t\tHASH,\n+\n+\t\t/**\n+\t\t * Each sub-partition contains full records.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNjM3MQ==", "bodyText": "add TODO and explain why the RequiredShuffle is unknown.", "url": "https://github.com/apache/flink/pull/13625#discussion_r505516371", "createdAt": "2020-10-15T12:53:22Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/exec/StreamExecNode.scala", "diffHunk": "@@ -21,7 +21,21 @@ package org.apache.flink.table.planner.plan.nodes.exec\n import org.apache.flink.table.planner.delegation.StreamPlanner\n import org.apache.flink.table.planner.utils.Logging\n \n+import java.util\n+\n /**\n   * Base class for stream ExecNode.\n   */\n-trait StreamExecNode[T] extends ExecNode[StreamPlanner, T] with Logging\n+trait StreamExecNode[T] extends ExecNode[StreamPlanner, T] with Logging {\n+\n+  def getInputEdges: util.List[ExecEdge] = {\n+    val edges = new util.ArrayList[ExecEdge]()\n+    for (_ <- 0 until getInputNodes.size()) {\n+      edges.add(new ExecEdge(\n+        ExecEdge.RequiredShuffle.unknown(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyMzA3OA==", "bodyText": "END_INPUT ?", "url": "https://github.com/apache/flink/pull/13625#discussion_r505523078", "createdAt": "2020-10-15T13:03:03Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/batch/BatchExecExchange.scala", "diffHunk": "@@ -117,6 +116,30 @@ class BatchExecExchange(\n   override def getInputNodes: util.List[ExecNode[BatchPlanner, _]] =\n     getInputs.map(_.asInstanceOf[ExecNode[BatchPlanner, _]])\n \n+  override def getInputEdges: util.List[ExecEdge] = {\n+    val tableConfig = FlinkRelOptUtil.getTableConfigFromContext(this)\n+    val shuffleMode = getShuffleMode(tableConfig.getConfiguration)\n+    if (shuffleMode eq ShuffleMode.BATCH) {\n+      List(new ExecEdge(\n+        ExecEdge.RequiredShuffle.unknown(),\n+        ExecEdge.EdgeBehavior.BLOCKING,\n+        0))\n+    } else {\n+      distribution.getType match {\n+        case RelDistribution.Type.RANGE_DISTRIBUTED =>\n+          List(new ExecEdge(\n+            ExecEdge.RequiredShuffle.unknown(),\n+            ExecEdge.EdgeBehavior.BLOCKING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUzOTY2OA==", "bodyText": "should consider leftSorted and rightSorted", "url": "https://github.com/apache/flink/pull/13625#discussion_r505539668", "createdAt": "2020-10-15T13:25:50Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/batch/BatchExecSortMergeJoin.scala", "diffHunk": "@@ -192,6 +193,11 @@ class BatchExecSortMergeJoin(\n   override def getInputNodes: util.List[ExecNode[BatchPlanner, _]] =\n     getInputs.map(_.asInstanceOf[ExecNode[BatchPlanner, _]])\n \n+  override def getInputEdges: util.List[ExecEdge] =\n+    List(\n+      new ExecEdge(ExecEdge.RequiredShuffle.unknown(), ExecEdge.EdgeBehavior.END_INPUT, 0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MDE3OQ==", "bodyText": "EdgeDamBehavior ?", "url": "https://github.com/apache/flink/pull/13625#discussion_r505540179", "createdAt": "2020-10-15T13:26:33Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.ANY, keys);\n+\t\t\t} else {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.HASH, keys);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle broadcast() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.BROADCAST, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle singleton() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.SINGLETON, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle unknown() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.UNKNOWN, new int[0]);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Enumeration which describes the shuffle type for records when passing this edge.\n+\t */\n+\tpublic enum ShuffleType {\n+\n+\t\t/**\n+\t\t * Any type of shuffle is OK when passing through this edge.\n+\t\t */\n+\t\tANY,\n+\n+\t\t/**\n+\t\t * Records are shuffle by hash when passing through this edge.\n+\t\t */\n+\t\tHASH,\n+\n+\t\t/**\n+\t\t * Each sub-partition contains full records.\n+\t\t */\n+\t\tBROADCAST,\n+\n+\t\t/**\n+\t\t * The parallelism of the target node must be 1.\n+\t\t */\n+\t\tSINGLETON,\n+\n+\t\t/**\n+\t\t * Unknown shuffle type, will be filled out in the future.\n+\t\t */\n+\t\tUNKNOWN\n+\t}\n+\n+\t/**\n+\t * Enumeration which describes how an output record from the source node\n+\t * may trigger the output of the target node.\n+\t */\n+\tpublic enum EdgeBehavior {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTcyOTgz", "url": "https://github.com/apache/flink/pull/13625#pullrequestreview-510572983", "createdAt": "2020-10-16T15:22:55Z", "commit": {"oid": "4c31824917199ca34801d2bde871c5d1f95d0cc2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyMjo1NVrOHjEwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNToyNTowN1rOHjE4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MDIyNQ==", "bodyText": "create a default ExecEdge instance ?", "url": "https://github.com/apache/flink/pull/13625#discussion_r506540225", "createdAt": "2020-10-16T15:22:55Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/batch/BatchExecCalcBase.scala", "diffHunk": "@@ -112,11 +111,11 @@ abstract class BatchExecCalcBase(\n \n   //~ ExecNode methods -----------------------------------------------------------\n \n-  override def getDamBehavior = DamBehavior.PIPELINED\n-\n   override def getInputNodes: util.List[ExecNode[BatchPlanner, _]] =\n     List(getInput.asInstanceOf[ExecNode[BatchPlanner, _]])\n \n+  override def getInputEdges: util.List[ExecEdge] = List(ExecEdge.builder().build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c31824917199ca34801d2bde871c5d1f95d0cc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU0MjIzMA==", "bodyText": "we should avoid match specific class here", "url": "https://github.com/apache/flink/pull/13625#discussion_r506542230", "createdAt": "2020-10-16T15:25:07Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -320,8 +319,9 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n         // should exclude the reused node (at last position in path)\n         while (!hasFullDamNode && idx < inputPath.length - 1) {\n           val node = inputPath(idx)\n-          val nodeDamBehavior = node.asInstanceOf[BatchExecNode[_]].getDamBehavior\n-          hasFullDamNode = if (nodeDamBehavior == DamBehavior.FULL_DAM) {\n+          val atLeastEndInput = node.getInputEdges.forall(\n+            e => e.getDamBehavior.stricterOrEqual(ExecEdge.DamBehavior.END_INPUT))\n+          hasFullDamNode = if (atLeastEndInput) {\n             true\n           } else {\n             node match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c31824917199ca34801d2bde871c5d1f95d0cc2"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTcxNjMy", "url": "https://github.com/apache/flink/pull/13625#pullrequestreview-510971632", "createdAt": "2020-10-17T09:18:57Z", "commit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwOToxODo1N1rOHja7GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwOTozNDoxNVrOHjbUCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwMzMyMA==", "bodyText": "nit: remove unused imports", "url": "https://github.com/apache/flink/pull/13625#discussion_r506903320", "createdAt": "2020-10-17T09:18:57Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/exec/BatchExecNode.scala", "diffHunk": "@@ -25,11 +25,4 @@ import org.apache.flink.table.planner.utils.Logging\n /**\n   * Base class for batch ExecNode.\n   */\n-trait BatchExecNode[T] extends ExecNode[BatchPlanner, T] with Logging {\n-\n-  /**\n-    * Returns [[DamBehavior]] of this node.\n-    */\n-  def getDamBehavior: DamBehavior\n-\n-}\n+trait BatchExecNode[T] extends ExecNode[BatchPlanner, T] with Logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwNTcyMg==", "bodyText": "may have more than two inputs", "url": "https://github.com/apache/flink/pull/13625#discussion_r506905722", "createdAt": "2020-10-17T09:24:42Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/batch/BatchExecUnion.scala", "diffHunk": "@@ -98,11 +98,11 @@ class BatchExecUnion(\n \n   //~ ExecNode methods -----------------------------------------------------------\n \n-  override def getDamBehavior: DamBehavior = DamBehavior.PIPELINED\n-\n   override def getInputNodes: util.List[ExecNode[BatchPlanner, _]] =\n     getInputs.map(_.asInstanceOf[ExecNode[BatchPlanner, _]])\n \n+  override def getInputEdges: util.List[ExecEdge] = List(ExecEdge.DEFAULT, ExecEdge.DEFAULT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwNjMxNQ==", "bodyText": "no build/probe concept here", "url": "https://github.com/apache/flink/pull/13625#discussion_r506906315", "createdAt": "2020-10-17T09:25:52Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -146,22 +146,33 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n \n   class DeadlockBreakupVisitor(finder: ReuseNodeFinder) extends ExecNodeVisitorImpl {\n \n-    private def rewriteJoin(\n-        join: BatchExecJoinBase,\n-        leftIsBuild: Boolean,\n-        distribution: FlinkRelDistribution): Unit = {\n-      val (buildSideIndex, probeSideIndex) = if (leftIsBuild) (0, 1) else (1, 0)\n-      val buildNode = join.getInputNodes.get(buildSideIndex)\n-      val probeNode = join.getInputNodes.get(probeSideIndex)\n+    private def rewriteTwoInputNode(\n+        node: ExecNode[_, _],\n+        leftPriority: Int,\n+        requiredShuffle: ExecEdge.RequiredShuffle): Unit = {\n+      val (buildSideIndex, probeSideIndex) = if (leftPriority == 0) (0, 1) else (1, 0)\n+      val buildNode = node.getInputNodes.get(buildSideIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwNjg4Mw==", "bodyText": "the highest priority is always 0? do we have this guarantee?", "url": "https://github.com/apache/flink/pull/13625#discussion_r506906883", "createdAt": "2020-10-17T09:27:16Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -146,22 +146,33 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n \n   class DeadlockBreakupVisitor(finder: ReuseNodeFinder) extends ExecNodeVisitorImpl {\n \n-    private def rewriteJoin(\n-        join: BatchExecJoinBase,\n-        leftIsBuild: Boolean,\n-        distribution: FlinkRelDistribution): Unit = {\n-      val (buildSideIndex, probeSideIndex) = if (leftIsBuild) (0, 1) else (1, 0)\n-      val buildNode = join.getInputNodes.get(buildSideIndex)\n-      val probeNode = join.getInputNodes.get(probeSideIndex)\n+    private def rewriteTwoInputNode(\n+        node: ExecNode[_, _],\n+        leftPriority: Int,\n+        requiredShuffle: ExecEdge.RequiredShuffle): Unit = {\n+      val (buildSideIndex, probeSideIndex) = if (leftPriority == 0) (0, 1) else (1, 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwNzc2NQ==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/13625#discussion_r506907765", "createdAt": "2020-10-17T09:29:20Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -175,29 +186,32 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n               probeRel,\n               distribution)\n             e.setRequiredShuffleMode(ShuffleMode.BATCH)\n-            // replace join node's input\n-            join.replaceInputNode(probeSideIndex, e)\n+            // replace node's input\n+            node.asInstanceOf[BatchExecNode[_]].replaceInputNode(probeSideIndex, e)\n         }\n       }\n     }\n \n     override def visit(node: ExecNode[_, _]): Unit = {\n       super.visit(node)\n-      node match {\n-        case hashJoin: BatchExecHashJoin =>\n-          val joinInfo = hashJoin.getJoinInfo\n-          val columns = if (hashJoin.leftIsBuild) joinInfo.rightKeys else joinInfo.leftKeys\n-          val distribution = FlinkRelDistribution.hash(columns)\n-          rewriteJoin(hashJoin, hashJoin.leftIsBuild, distribution)\n-        case nestedLoopJoin: BatchExecNestedLoopJoin =>\n-          rewriteJoin(nestedLoopJoin, nestedLoopJoin.leftIsBuild, FlinkRelDistribution.ANY)\n-        case _ => // do nothing\n+      val inputEdges = node.getInputEdges\n+      if (inputEdges.size() == 2) {\n+        val leftPriority = inputEdges.get(0).getPriority\n+        val rightPriority = inputEdges.get(1).getPriority\n+        val requiredShuffle = if (leftPriority == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwODE3Nw==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/13625#discussion_r506908177", "createdAt": "2020-10-17T09:30:19Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -320,20 +334,24 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n         // should exclude the reused node (at last position in path)\n         while (!hasFullDamNode && idx < inputPath.length - 1) {\n           val node = inputPath(idx)\n-          val nodeDamBehavior = node.asInstanceOf[BatchExecNode[_]].getDamBehavior\n-          hasFullDamNode = if (nodeDamBehavior == DamBehavior.FULL_DAM) {\n+          val atLeastEndInput = node.getInputEdges.forall(\n+            e => e.getDamBehavior.stricterOrEqual(ExecEdge.DamBehavior.END_INPUT))\n+          hasFullDamNode = if (atLeastEndInput) {\n             true\n           } else {\n-            node match {\n-              case h: BatchExecHashJoin =>\n-                val buildSideIndex = if (h.leftIsBuild) 0 else 1\n-                val buildNode = h.getInputNodes.get(buildSideIndex)\n-                checkJoinBuildSide(buildNode, idx, inputPath)\n-              case n: BatchExecNestedLoopJoin =>\n-                val buildSideIndex = if (n.leftIsBuild) 0 else 1\n-                val buildNode = n.getInputNodes.get(buildSideIndex)\n-                checkJoinBuildSide(buildNode, idx, inputPath)\n-              case _ => false\n+            val inputEdges = node.getInputEdges\n+            if (inputEdges.size() == 2) {\n+              val leftPriority = inputEdges.get(0).getPriority\n+              val rightPriority = inputEdges.get(1).getPriority\n+              if (leftPriority != rightPriority) {\n+                val buildSideIndex = if (leftPriority == 0) 0 else 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwOTcwNg==", "bodyText": "nit: can be simplified as getInputNodes.map(_ => ExecEdge.DEFAULT)", "url": "https://github.com/apache/flink/pull/13625#discussion_r506909706", "createdAt": "2020-10-17T09:34:15Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/exec/StreamExecNode.scala", "diffHunk": "@@ -21,7 +21,19 @@ package org.apache.flink.table.planner.plan.nodes.exec\n import org.apache.flink.table.planner.delegation.StreamPlanner\n import org.apache.flink.table.planner.utils.Logging\n \n+import java.util\n+\n /**\n   * Base class for stream ExecNode.\n   */\n-trait StreamExecNode[T] extends ExecNode[StreamPlanner, T] with Logging\n+trait StreamExecNode[T] extends ExecNode[StreamPlanner, T] with Logging {\n+\n+  def getInputEdges: util.List[ExecEdge] = {\n+    // TODO fill out the required shuffle for each stream exec node\n+    val edges = new util.ArrayList[ExecEdge]()\n+    for (_ <- 0 until getInputNodes.size()) {\n+      edges.add(ExecEdge.DEFAULT)\n+    }\n+    edges", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27bf96c7efa7327dd35a58aeacfabdd12c33b216", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/27bf96c7efa7327dd35a58aeacfabdd12c33b216", "committedDate": "2020-10-19T03:39:14Z", "message": "[FLINK-19623][table-planner-blink] Introduce ExecEdge to describe information on input edges for ExecNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6012feb56e556606391eb81c2a0bf7c679405f9c", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/6012feb56e556606391eb81c2a0bf7c679405f9c", "committedDate": "2020-10-19T03:39:14Z", "message": "[fix] Fix scalastyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "committedDate": "2020-10-19T03:39:14Z", "message": "[fix] Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "890b235a6e83e5d1a8da263b46ee7806e049aa10", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/890b235a6e83e5d1a8da263b46ee7806e049aa10", "committedDate": "2020-10-19T03:39:14Z", "message": "[fix] Add comments on RequiredShuffle.unknown()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "439f2ce1af9395549218913c1774ce4351160121", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/439f2ce1af9395549218913c1774ce4351160121", "committedDate": "2020-10-19T03:39:14Z", "message": "[fix] Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f190d98cb57794be7ec0ddf92feb1a32a07e783f", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/f190d98cb57794be7ec0ddf92feb1a32a07e783f", "committedDate": "2020-10-19T03:39:14Z", "message": "[fix] Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "741d91fc746bf5a05bf1ddc6f0e88e3fab3fefd2", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/741d91fc746bf5a05bf1ddc6f0e88e3fab3fefd2", "committedDate": "2020-10-19T04:44:41Z", "message": "[fix] Fix comments and rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDU2MDM5", "url": "https://github.com/apache/flink/pull/13625#pullrequestreview-511456039", "createdAt": "2020-10-19T06:53:17Z", "commit": {"oid": "741d91fc746bf5a05bf1ddc6f0e88e3fab3fefd2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjo1MzoxN1rOHkADYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjo1NDoxNVrOHkAFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxMTY0OA==", "bodyText": "not changed here", "url": "https://github.com/apache/flink/pull/13625#discussion_r507511648", "createdAt": "2020-10-19T06:53:17Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -175,29 +186,32 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n               probeRel,\n               distribution)\n             e.setRequiredShuffleMode(ShuffleMode.BATCH)\n-            // replace join node's input\n-            join.replaceInputNode(probeSideIndex, e)\n+            // replace node's input\n+            node.asInstanceOf[BatchExecNode[_]].replaceInputNode(probeSideIndex, e)\n         }\n       }\n     }\n \n     override def visit(node: ExecNode[_, _]): Unit = {\n       super.visit(node)\n-      node match {\n-        case hashJoin: BatchExecHashJoin =>\n-          val joinInfo = hashJoin.getJoinInfo\n-          val columns = if (hashJoin.leftIsBuild) joinInfo.rightKeys else joinInfo.leftKeys\n-          val distribution = FlinkRelDistribution.hash(columns)\n-          rewriteJoin(hashJoin, hashJoin.leftIsBuild, distribution)\n-        case nestedLoopJoin: BatchExecNestedLoopJoin =>\n-          rewriteJoin(nestedLoopJoin, nestedLoopJoin.leftIsBuild, FlinkRelDistribution.ANY)\n-        case _ => // do nothing\n+      val inputEdges = node.getInputEdges\n+      if (inputEdges.size() == 2) {\n+        val leftPriority = inputEdges.get(0).getPriority\n+        val rightPriority = inputEdges.get(1).getPriority\n+        val requiredShuffle = if (leftPriority == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkwNzc2NQ=="}, "originalCommit": {"oid": "f26a40dc87e7f977e84f24c5b509b60f2b083d5c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxMjA2Ng==", "bodyText": "not changed here", "url": "https://github.com/apache/flink/pull/13625#discussion_r507512066", "createdAt": "2020-10-19T06:54:15Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/reuse/DeadlockBreakupProcessor.scala", "diffHunk": "@@ -296,44 +311,48 @@ class DeadlockBreakupProcessor extends DAGProcessor {\n     * Returns true if all input-paths have barrier node (e.g. agg, sort), otherwise false.\n     */\n   private def hasBarrierNodeInInputPaths(\n-      inputPathsOfProbeSide: List[Array[ExecNode[_, _]]]): Boolean = {\n-    require(inputPathsOfProbeSide.nonEmpty)\n+      inputPathsOfLowerInput: List[Array[ExecNode[_, _]]]): Boolean = {\n+    require(inputPathsOfLowerInput.nonEmpty)\n \n-    /** Return true if the successor of join in the input-path is build node, otherwise false */\n-    def checkJoinBuildSide(\n-        buildNode: ExecNode[_, _],\n-        idxOfJoin: Int,\n+    /** Return true if the successor in the input-path is also in higher input, otherwise false */\n+    def checkHigherInput(\n+        higherNode: ExecNode[_, _],\n+        idx: Int,\n         inputPath: Array[ExecNode[_, _]]): Boolean = {\n-      if (idxOfJoin < inputPath.length - 1) {\n-        val nextNode = inputPath(idxOfJoin + 1)\n-        // next node is build node of hash join\n-        buildNode eq nextNode\n+      if (idx < inputPath.length - 1) {\n+        val nextNode = inputPath(idx + 1)\n+        // next node is higher input\n+        higherNode eq nextNode\n       } else {\n         false\n       }\n     }\n \n-    inputPathsOfProbeSide.forall {\n+    inputPathsOfLowerInput.forall {\n       inputPath =>\n         var idx = 0\n         var hasFullDamNode = false\n         // should exclude the reused node (at last position in path)\n         while (!hasFullDamNode && idx < inputPath.length - 1) {\n           val node = inputPath(idx)\n-          val nodeDamBehavior = node.asInstanceOf[BatchExecNode[_]].getDamBehavior\n-          hasFullDamNode = if (nodeDamBehavior == DamBehavior.FULL_DAM) {\n+          val atLeastEndInput = node.getInputEdges.forall(\n+            e => e.getDamBehavior.stricterOrEqual(ExecEdge.DamBehavior.END_INPUT))\n+          hasFullDamNode = if (atLeastEndInput) {\n             true\n           } else {\n-            node match {\n-              case h: BatchExecHashJoin =>\n-                val buildSideIndex = if (h.leftIsBuild) 0 else 1\n-                val buildNode = h.getInputNodes.get(buildSideIndex)\n-                checkJoinBuildSide(buildNode, idx, inputPath)\n-              case n: BatchExecNestedLoopJoin =>\n-                val buildSideIndex = if (n.leftIsBuild) 0 else 1\n-                val buildNode = n.getInputNodes.get(buildSideIndex)\n-                checkJoinBuildSide(buildNode, idx, inputPath)\n-              case _ => false\n+            val inputEdges = node.getInputEdges\n+            if (inputEdges.size() == 2) {\n+              val leftPriority = inputEdges.get(0).getPriority\n+              val rightPriority = inputEdges.get(1).getPriority\n+              if (leftPriority != rightPriority) {\n+                val higherIndex = if (leftPriority == 0) 0 else 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "741d91fc746bf5a05bf1ddc6f0e88e3fab3fefd2"}, "originalPosition": 266}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193e9a611b030c9809eabeb057a31bce9b22b151", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/193e9a611b030c9809eabeb057a31bce9b22b151", "committedDate": "2020-10-19T07:06:46Z", "message": "[fix] Fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNDkzMzQ5", "url": "https://github.com/apache/flink/pull/13625#pullrequestreview-511493349", "createdAt": "2020-10-19T07:50:00Z", "commit": {"oid": "193e9a611b030c9809eabeb057a31bce9b22b151"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56fa69f06d5d075aff0ceb8cb721fe41eb3f89ee", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/56fa69f06d5d075aff0ceb8cb721fe41eb3f89ee", "committedDate": "2020-10-19T08:44:00Z", "message": "[fix] Fix failed tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3229, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}