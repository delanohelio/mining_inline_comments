{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNDk2ODU2", "number": 12261, "title": "[FLINK-17823][network] Resolve the race condition while releasing RemoteInputChannel", "bodyText": "What is the purpose of the change\nRemoteInputChannel#releaseAllResources might be called by canceler thread. Meanwhile, the task thread can also call RemoteInputChannel#getNextBuffer.\nThere probably cause two potential problems:\n\nTask thread might get null buffer after canceler thread already released all the buffers, then it might cause misleading NPE in getNextBuffer.\nTask thread and canceler thread might pull the same buffer concurrently, which causes unexpected exception when the same buffer is recycled twice.\n\nThe solution is to properly synchronize the buffer queue in release method to avoid the same buffer pulled by both canceler thread and task thread.\nAnd in getNextBuffer method, we add some explicit checks to avoid misleading NPE and hint some valid exceptions.\nBrief change log\n\nFix the synchronized receivedBuffers in RemoteInputChannel#releaseAllResources\ncheck the released state and give proper exceptions in RemoteInputChannel#getNextBuffer\n\nVerifying this change\nNew unit test in `RemoteInputChannelTest#testConcurrentGetNextBufferAndRelease\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-05-20T04:22:53Z", "url": "https://github.com/apache/flink/pull/12261", "merged": true, "mergeCommit": {"oid": "3eb1075ded64da20e6f7a5bc268f455eaf6573eb"}, "closed": true, "closedAt": "2020-05-22T03:03:38Z", "author": {"login": "zhijiangW"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjBOUzgH2gAyNDIwNDk2ODU2OjI2YWZlYjAzYWEzMGY4NDk5NGE4YWE4NWNhMmQyMjNkNDQ2NzIwNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjdfBpAFqTQxNjEzMTQ1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/26afeb03aa30f84994a8aa85ca2d223d44672067", "committedDate": "2020-05-20T04:18:59Z", "message": "[FLINK-17823][network] Resolve the race condition while releasing RemoteInputChannel\n\nRemoteInputChannel#releaseAllResources might be called by canceler thread. Meanwhile, the task thread can also call RemoteInputChannel#getNextBuffer.\nThere probably cause two potential problems:\n\n1. Task thread might get null buffer after canceler thread already released all the buffers, then it might cause misleading NPE in getNextBuffer.\n2. Task thread and canceler thread might pull the same buffer concurrently, which causes unexpected exception when the same buffer is recycled twice.\n\nThe solution is to properly synchronize the buffer queue in release method to avoid the same buffer pulled by both canceler thread and task thread.\nAnd in getNextBuffer method, we add some explicit checks to avoid misleading NPE and hint some valid exceptions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MDAyMDM5", "url": "https://github.com/apache/flink/pull/12261#pullrequestreview-415002039", "createdAt": "2020-05-20T05:28:06Z", "commit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNToyODowN1rOGX7xJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNToyODowN1rOGX7xJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc0OTY3MA==", "bodyText": "I guess it's theoretically impossible that we get a null buffer here with your changes in releaseAllResources, which seems to solve two cases you mentioned in description. So.. this check is just for other unknown bad cases?", "url": "https://github.com/apache/flink/pull/12261#discussion_r427749670", "createdAt": "2020-05-20T05:28:07Z", "author": {"login": "Jiayi-Liao"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -181,6 +181,14 @@ void retriggerSubpartitionRequest(int subpartitionIndex) throws IOException {\n \t\t\tmoreAvailable = !receivedBuffers.isEmpty();\n \t\t}\n \n+\t\tif (next == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTUyMzAy", "url": "https://github.com/apache/flink/pull/12261#pullrequestreview-415552302", "createdAt": "2020-05-20T17:18:27Z", "commit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoxODoyOFrOGYV_tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoyMDo1OVrOGYWFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE3OTM4Mw==", "bodyText": "What do you mean @zhijiangW ? At first glance I would agree with @Jiayi-Liao, that it shouldn't happen after your fix in this commit in this class below.", "url": "https://github.com/apache/flink/pull/12261#discussion_r428179383", "createdAt": "2020-05-20T17:18:28Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -181,6 +181,14 @@ void retriggerSubpartitionRequest(int subpartitionIndex) throws IOException {\n \t\t\tmoreAvailable = !receivedBuffers.isEmpty();\n \t\t}\n \n+\t\tif (next == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc0OTY3MA=="}, "originalCommit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4MDg3NQ==", "bodyText": "I think we could have tested this bug without concurrency/multi threading by just calling releaseAllResources before getNextBuffer. Test would be much easier to understand and debug and this would be worth a bit worse testing coverage - especially that we still have ITCases, and in the long run we are planning/hoping to make releasing resources go through mailbox.", "url": "https://github.com/apache/flink/pull/12261#discussion_r428180875", "createdAt": "2020-05-20T17:20:59Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannelTest.java", "diffHunk": "@@ -1010,6 +1011,56 @@ public void testConcurrentRecycleAndRelease2() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testConcurrentGetNextBufferAndRelease() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTMxNDUz", "url": "https://github.com/apache/flink/pull/12261#pullrequestreview-416131453", "createdAt": "2020-05-21T13:11:31Z", "commit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzoxMTozMVrOGYyM7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzoxNDoyOVrOGYyTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MTUxNg==", "bodyText": "Ops, sorry, yes it's obvious, I don't know why I've missed it \ud83d\ude33", "url": "https://github.com/apache/flink/pull/12261#discussion_r428641516", "createdAt": "2020-05-21T13:11:31Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -181,6 +181,14 @@ void retriggerSubpartitionRequest(int subpartitionIndex) throws IOException {\n \t\t\tmoreAvailable = !receivedBuffers.isEmpty();\n \t\t}\n \n+\t\tif (next == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc0OTY3MA=="}, "originalCommit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MzA3NQ==", "bodyText": "I'm not a fan of such concurrency tests, I wouldn't be personally adding them I think, but you are right - single threaded unit test wouldn't reproduce this issue because of checkState(!isReleased.get()).\nLGTM", "url": "https://github.com/apache/flink/pull/12261#discussion_r428643075", "createdAt": "2020-05-21T13:14:29Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannelTest.java", "diffHunk": "@@ -1010,6 +1011,56 @@ public void testConcurrentRecycleAndRelease2() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testConcurrentGetNextBufferAndRelease() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4MDg3NQ=="}, "originalCommit": {"oid": "26afeb03aa30f84994a8aa85ca2d223d44672067"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4653, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}