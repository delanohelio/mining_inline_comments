{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NTM3MzE2", "number": 11374, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjozMjo0NVrODnsboQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDowMTozOFrODntQsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTQ5MDI1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coder_impl.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjozMjo0NVrOF11urQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjozMjo0NVrOF11urQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5OTE0OQ==", "bodyText": "Could you rename _filed_count to _field_count? It's not directly related to this PR, however it would be great if we can correct the typo as it's used in this PR.", "url": "https://github.com/apache/flink/pull/11374#discussion_r391999149", "createdAt": "2020-03-13T02:32:45Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -51,18 +55,27 @@ def generate_null_mask_search_table():\n \n         return tuple(null_mask)\n \n-    def encode_to_stream(self, value, out_stream, nested):\n-        self.write_null_mask(value, out_stream)\n+    def encode_to_stream(self, iter_value, out_stream, nested):\n         field_coders = self._field_coders\n-        for i in range(self._filed_count):\n-            item = value[i]\n-            if item is not None:\n-                field_coders[i].encode_to_stream(item, out_stream, nested)\n+        data_out_stream = self.data_out_stream\n+        for value in iter_value:\n+            self.write_null_mask(value, data_out_stream)\n+            for i in range(self._filed_count):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTUyNTIzOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coder_impl.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjo1NTo1NlrOF12DZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjo1NTo1NlrOF12DZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwNDQ1Mw==", "bodyText": "rename to _decode_one_row_from_stream?", "url": "https://github.com/apache/flink/pull/11374#discussion_r392004453", "createdAt": "2020-03-13T02:55:56Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -51,18 +55,27 @@ def generate_null_mask_search_table():\n \n         return tuple(null_mask)\n \n-    def encode_to_stream(self, value, out_stream, nested):\n-        self.write_null_mask(value, out_stream)\n+    def encode_to_stream(self, iter_value, out_stream, nested):\n         field_coders = self._field_coders\n-        for i in range(self._filed_count):\n-            item = value[i]\n-            if item is not None:\n-                field_coders[i].encode_to_stream(item, out_stream, nested)\n+        data_out_stream = self.data_out_stream\n+        for value in iter_value:\n+            self.write_null_mask(value, data_out_stream)\n+            for i in range(self._filed_count):\n+                item = value[i]\n+                if item is not None:\n+                    field_coders[i].encode_to_stream(item, data_out_stream, nested)\n+            out_stream.write_var_int64(data_out_stream.size())\n+            out_stream.write(data_out_stream.get())\n+            data_out_stream._clear()\n \n     def decode_from_stream(self, in_stream, nested):\n+        while in_stream.size() > 0:\n+            yield self.create_result(in_stream, nested)\n+\n+    def create_result(self, in_stream: create_InputStream, nested: bool) -> List:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTU1ODkwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coder_impl.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzowOTozNVrOF12Yvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzowOTozNVrOF12Yvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwOTkxOQ==", "bodyText": "rename to _decode_one_row_from_stream", "url": "https://github.com/apache/flink/pull/11374#discussion_r392009919", "createdAt": "2020-03-13T03:09:35Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -414,5 +446,28 @@ def create_array(s, t):\n         arrays = [create_array(cols[i], self._schema.types[i]) for i in range(0, len(self._schema))]\n         return pa.RecordBatch.from_arrays(arrays, self._schema)\n \n+    def _create_result(self, in_stream: create_InputStream) -> List:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTU2Mzk0OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coder_impl.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzoxMjo1OVrOF12biw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzoxMjo1OVrOF12biw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxMDYzNQ==", "bodyText": "Could you help to correct the comments here?\nthere is only arrow batch -> there is only one arrow batch", "url": "https://github.com/apache/flink/pull/11374#discussion_r392010635", "createdAt": "2020-03-13T03:12:59Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -414,5 +446,28 @@ def create_array(s, t):\n         arrays = [create_array(cols[i], self._schema.types[i]) for i in range(0, len(self._schema))]\n         return pa.RecordBatch.from_arrays(arrays, self._schema)\n \n+    def _create_result(self, in_stream: create_InputStream) -> List:\n+        self._resettable_io.set_input_bytes(in_stream.read_all(True))\n+        # there is only arrow batch in the underlying input stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTU3NzQ3OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coder_impl.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzoyMzo0MVrOF12juA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzoyMzo0MVrOF12juA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxMjcyOA==", "bodyText": "decode_from_stream(in_stream, False) -> decode_from_stream(in_stream, nested) ?", "url": "https://github.com/apache/flink/pull/11374#discussion_r392012728", "createdAt": "2020-03-13T03:23:41Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -414,5 +446,28 @@ def create_array(s, t):\n         arrays = [create_array(cols[i], self._schema.types[i]) for i in range(0, len(self._schema))]\n         return pa.RecordBatch.from_arrays(arrays, self._schema)\n \n+    def _create_result(self, in_stream: create_InputStream) -> List:\n+        self._resettable_io.set_input_bytes(in_stream.read_all(True))\n+        # there is only arrow batch in the underlying input stream\n+        table = pa.Table.from_batches([next(self._batch_reader)])\n+        return [c.to_pandas(date_as_object=True) for c in table.itercolumns()]\n+\n     def __repr__(self):\n         return 'ArrowCoderImpl[%s]' % self._schema\n+\n+\n+class CustomLengthPrefixCoderImpl(StreamCoderImpl):\n+    def __init__(self, value_coder):\n+        self._value_coder = value_coder\n+\n+    def encode_to_stream(self, value, out: create_OutputStream, nested: bool) -> Any:\n+        self._value_coder.encode_to_stream(value, out, nested)\n+\n+    def decode_from_stream(self, in_stream: create_InputStream, nested: bool) -> Any:\n+        return self._value_coder.decode_from_stream(in_stream, False)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTYyMTY5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coders.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzo1NzozM1rOF129uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMzo1NzozM1rOF129uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxOTM4NQ==", "bodyText": "What about rename it to PassThroughLengthPrefixCoder to reflect that it does nothing for the prefixed length?", "url": "https://github.com/apache/flink/pull/11374#discussion_r392019385", "createdAt": "2020-03-13T03:57:33Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -414,6 +415,25 @@ def __repr__(self):\n         return 'ArrowCoder[%s]' % self._schema\n \n \n+class CustomLengthPrefixCoder(LengthPrefixCoder):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyOTYyNjEwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/fn_execution/coders.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDowMTozOFrOF13AkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDowMTozOFrOF13AkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMDExMw==", "bodyText": "Update the comment as following?\nCoder which doesn't prefix the length of the encoded object as the length prefix will be handled by the wrapped value coder.", "url": "https://github.com/apache/flink/pull/11374#discussion_r392020113", "createdAt": "2020-03-13T04:01:38Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -414,6 +415,25 @@ def __repr__(self):\n         return 'ArrowCoder[%s]' % self._schema\n \n \n+class CustomLengthPrefixCoder(LengthPrefixCoder):\n+    \"\"\"\n+    CustomLengthPrefixCoder will replace LengthPrefixCoder in Beam for performance optimization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 752, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}