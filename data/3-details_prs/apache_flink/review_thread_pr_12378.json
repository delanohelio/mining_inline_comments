{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDIxMjI3", "number": 12378, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowNDo0N1rOEC4G0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowOToyNlrOEC4M-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDUxODU3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowNDo0N1rOGfmcmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzowNDoxNFrOGgRbog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4ODk1Mg==", "bodyText": "I think we only need to unescape the option value.", "url": "https://github.com/apache/flink/pull/12378#discussion_r435788952", "createdAt": "2020-06-05T09:04:47Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "diffHunk": "@@ -317,4 +321,54 @@ public static SqlTableColumn deepCopyTableColumn(SqlTableColumn column) {\n \t\t\t\tcolumn.getParserPosition()\n \t\t);\n \t}\n+\n+\t// the input of sql-client will escape '\\', unescape it so that users can write hive dialect\n+\tpublic static void unescapeProperties(SqlNodeList properties) {\n+\t\tif (properties != null) {\n+\t\t\tfor (int i = 0; i < properties.size(); i++) {\n+\t\t\t\tSqlNode node = properties.get(i);\n+\t\t\t\t// for properties\n+\t\t\t\tif (node instanceof SqlTableOption) {\n+\t\t\t\t\tnode = unescapeTableOption((SqlTableOption) node);\n+\t\t\t\t\tproperties.set(i, node);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static SqlTableOption unescapeTableOption(SqlTableOption option) {\n+\t\tString key = StringEscapeUtils.unescapeJava(option.getKeyString());\n+\t\tString val = StringEscapeUtils.unescapeJava(option.getValueString());\n+\t\tSqlNode keyNode = SqlLiteral.createCharString(key, option.getKey().getParserPosition());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b18fb5b07aad9d2fe4664d9c311cfe3f591ef"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MzIxOA==", "bodyText": "Both key and value can have special characters in Hive.", "url": "https://github.com/apache/flink/pull/12378#discussion_r436493218", "createdAt": "2020-06-08T07:04:14Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "diffHunk": "@@ -317,4 +321,54 @@ public static SqlTableColumn deepCopyTableColumn(SqlTableColumn column) {\n \t\t\t\tcolumn.getParserPosition()\n \t\t);\n \t}\n+\n+\t// the input of sql-client will escape '\\', unescape it so that users can write hive dialect\n+\tpublic static void unescapeProperties(SqlNodeList properties) {\n+\t\tif (properties != null) {\n+\t\t\tfor (int i = 0; i < properties.size(); i++) {\n+\t\t\t\tSqlNode node = properties.get(i);\n+\t\t\t\t// for properties\n+\t\t\t\tif (node instanceof SqlTableOption) {\n+\t\t\t\t\tnode = unescapeTableOption((SqlTableOption) node);\n+\t\t\t\t\tproperties.set(i, node);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static SqlTableOption unescapeTableOption(SqlTableOption option) {\n+\t\tString key = StringEscapeUtils.unescapeJava(option.getKeyString());\n+\t\tString val = StringEscapeUtils.unescapeJava(option.getValueString());\n+\t\tSqlNode keyNode = SqlLiteral.createCharString(key, option.getKey().getParserPosition());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4ODk1Mg=="}, "originalCommit": {"oid": "aa2b18fb5b07aad9d2fe4664d9c311cfe3f591ef"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDUyMTc0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowNTo0MVrOGfmefQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowNTo0MVrOGfmefQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTQzNw==", "bodyText": "unescapeLiteral  -> unescapeStringLiteral", "url": "https://github.com/apache/flink/pull/12378#discussion_r435789437", "createdAt": "2020-06-05T09:05:41Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "diffHunk": "@@ -317,4 +321,54 @@ public static SqlTableColumn deepCopyTableColumn(SqlTableColumn column) {\n \t\t\t\tcolumn.getParserPosition()\n \t\t);\n \t}\n+\n+\t// the input of sql-client will escape '\\', unescape it so that users can write hive dialect\n+\tpublic static void unescapeProperties(SqlNodeList properties) {\n+\t\tif (properties != null) {\n+\t\t\tfor (int i = 0; i < properties.size(); i++) {\n+\t\t\t\tSqlNode node = properties.get(i);\n+\t\t\t\t// for properties\n+\t\t\t\tif (node instanceof SqlTableOption) {\n+\t\t\t\t\tnode = unescapeTableOption((SqlTableOption) node);\n+\t\t\t\t\tproperties.set(i, node);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static SqlTableOption unescapeTableOption(SqlTableOption option) {\n+\t\tString key = StringEscapeUtils.unescapeJava(option.getKeyString());\n+\t\tString val = StringEscapeUtils.unescapeJava(option.getValueString());\n+\t\tSqlNode keyNode = SqlLiteral.createCharString(key, option.getKey().getParserPosition());\n+\t\tSqlNode valNode = SqlLiteral.createCharString(val, option.getValue().getParserPosition());\n+\t\treturn new SqlTableOption(keyNode, valNode, option.getParserPosition());\n+\t}\n+\n+\tpublic static SqlCharStringLiteral unescapeLiteral(SqlCharStringLiteral literal) {\n+\t\tif (literal != null) {\n+\t\t\tString unescaped = StringEscapeUtils.unescapeJava(literal.getNlsString().getValue());\n+\t\t\treturn SqlLiteral.createCharString(unescaped, literal.getParserPosition());\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b18fb5b07aad9d2fe4664d9c311cfe3f591ef"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDUzNDM0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTowOToyNlrOGfmmXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzo1MTowN1rOGgSsNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5MTQ1NQ==", "bodyText": "Did you try SqlShuttle ?", "url": "https://github.com/apache/flink/pull/12378#discussion_r435791455", "createdAt": "2020-06-05T09:09:26Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "diffHunk": "@@ -317,4 +321,54 @@ public static SqlTableColumn deepCopyTableColumn(SqlTableColumn column) {\n \t\t\t\tcolumn.getParserPosition()\n \t\t);\n \t}\n+\n+\t// the input of sql-client will escape '\\', unescape it so that users can write hive dialect\n+\tpublic static void unescapeProperties(SqlNodeList properties) {\n+\t\tif (properties != null) {\n+\t\t\tfor (int i = 0; i < properties.size(); i++) {\n+\t\t\t\tSqlNode node = properties.get(i);\n+\t\t\t\t// for properties\n+\t\t\t\tif (node instanceof SqlTableOption) {\n+\t\t\t\t\tnode = unescapeTableOption((SqlTableOption) node);\n+\t\t\t\t\tproperties.set(i, node);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static SqlTableOption unescapeTableOption(SqlTableOption option) {\n+\t\tString key = StringEscapeUtils.unescapeJava(option.getKeyString());\n+\t\tString val = StringEscapeUtils.unescapeJava(option.getValueString());\n+\t\tSqlNode keyNode = SqlLiteral.createCharString(key, option.getKey().getParserPosition());\n+\t\tSqlNode valNode = SqlLiteral.createCharString(val, option.getValue().getParserPosition());\n+\t\treturn new SqlTableOption(keyNode, valNode, option.getParserPosition());\n+\t}\n+\n+\tpublic static SqlCharStringLiteral unescapeLiteral(SqlCharStringLiteral literal) {\n+\t\tif (literal != null) {\n+\t\t\tString unescaped = StringEscapeUtils.unescapeJava(literal.getNlsString().getValue());\n+\t\t\treturn SqlLiteral.createCharString(unescaped, literal.getParserPosition());\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic static void unescapePartitionSpec(SqlNodeList partSpec) {\n+\t\tif (partSpec != null) {\n+\t\t\tfor (int i = 0; i < partSpec.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa2b18fb5b07aad9d2fe4664d9c311cfe3f591ef"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMzg0NQ==", "bodyText": "I have changed to use SqlShuttle", "url": "https://github.com/apache/flink/pull/12378#discussion_r436513845", "createdAt": "2020-06-08T07:51:07Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-sql-parser-hive/src/main/java/org/apache/flink/sql/parser/hive/ddl/HiveDDLUtils.java", "diffHunk": "@@ -317,4 +321,54 @@ public static SqlTableColumn deepCopyTableColumn(SqlTableColumn column) {\n \t\t\t\tcolumn.getParserPosition()\n \t\t);\n \t}\n+\n+\t// the input of sql-client will escape '\\', unescape it so that users can write hive dialect\n+\tpublic static void unescapeProperties(SqlNodeList properties) {\n+\t\tif (properties != null) {\n+\t\t\tfor (int i = 0; i < properties.size(); i++) {\n+\t\t\t\tSqlNode node = properties.get(i);\n+\t\t\t\t// for properties\n+\t\t\t\tif (node instanceof SqlTableOption) {\n+\t\t\t\t\tnode = unescapeTableOption((SqlTableOption) node);\n+\t\t\t\t\tproperties.set(i, node);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic static SqlTableOption unescapeTableOption(SqlTableOption option) {\n+\t\tString key = StringEscapeUtils.unescapeJava(option.getKeyString());\n+\t\tString val = StringEscapeUtils.unescapeJava(option.getValueString());\n+\t\tSqlNode keyNode = SqlLiteral.createCharString(key, option.getKey().getParserPosition());\n+\t\tSqlNode valNode = SqlLiteral.createCharString(val, option.getValue().getParserPosition());\n+\t\treturn new SqlTableOption(keyNode, valNode, option.getParserPosition());\n+\t}\n+\n+\tpublic static SqlCharStringLiteral unescapeLiteral(SqlCharStringLiteral literal) {\n+\t\tif (literal != null) {\n+\t\t\tString unescaped = StringEscapeUtils.unescapeJava(literal.getNlsString().getValue());\n+\t\t\treturn SqlLiteral.createCharString(unescaped, literal.getParserPosition());\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic static void unescapePartitionSpec(SqlNodeList partSpec) {\n+\t\tif (partSpec != null) {\n+\t\t\tfor (int i = 0; i < partSpec.size(); i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5MTQ1NQ=="}, "originalCommit": {"oid": "aa2b18fb5b07aad9d2fe4664d9c311cfe3f591ef"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4490, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}