{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NDQ5NDQw", "number": 12729, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMjoxNjowNVrOEJcQqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoxNjoyMFrOETP6uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzM1NjU3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMjoxNjowNVrOGp88cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo1NDoyMVrOG1DZvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzMxNA==", "bodyText": "should we set the global flag to true ? to enforce having only that limit throughout the channel ?\ni am worried if someone adds a functionality that say requires having multiple consumers on the same channel that then the preFetchCount would be per consumer and the preFetchCount set by the client would suddenly mean a completely different thing. But if enforced here to be per channel it will have the same effect for the user.\nAccording to the documentation  chan.basicQos(prefectchCount, boolean global) and the boolean global is:\nfalse | applied separately to each new consumer on the channel\ntrue  | shared across all consumers on the channel", "url": "https://github.com/apache/flink/pull/12729#discussion_r446643314", "createdAt": "2020-06-28T12:16:05Z", "author": {"login": "senegalo"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,22 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {\n+\t\tChannel chan = connection.createChannel();\n+\t\tif (rmqConnectionConfig.getPrefetchCount().isPresent()) {\n+\t\t\tchan.basicQos(rmqConnectionConfig.getPrefetchCount().get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99231d5b11dd2adced76b48996dfb252b5cc9fc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk4MDk5MA==", "bodyText": "Thanks for going through this! That's a good point, I'm not sure what a good answer is. I've read in the Nodejs client I used that sending that flag to a RMQ cluster < version 3.3.0 will kill it entirely, but I haven't tested that out at all or seen it elsewhere. I'll put together a playground this week.\nWe're always reading off of one queue per source in our jobs, but our use case is pretty simple so I'm not sure I've got the best understanding of other RMQ users. What kinds of reasons do people have for sharing a channel?", "url": "https://github.com/apache/flink/pull/12729#discussion_r446980990", "createdAt": "2020-06-29T13:42:40Z", "author": {"login": "austince"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,22 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {\n+\t\tChannel chan = connection.createChannel();\n+\t\tif (rmqConnectionConfig.getPrefetchCount().isPresent()) {\n+\t\t\tchan.basicQos(rmqConnectionConfig.getPrefetchCount().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzMxNA=="}, "originalCommit": {"oid": "99231d5b11dd2adced76b48996dfb252b5cc9fc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4OTUyOA==", "bodyText": "Hemm ... you're absolutely right i also have a very basic setup several independent brokers and we duplicate and deduplicate on the clients.\nTo keep life interesting, using the global flag with an RabbitMQ older than v3.3.0 will bring down the whole connection. \ud83e\udd23 okay then experimenting is the way to go !  do you need a helping hand ? i can spare a couple of hours next weekend if you need help.", "url": "https://github.com/apache/flink/pull/12729#discussion_r447089528", "createdAt": "2020-06-29T16:13:16Z", "author": {"login": "senegalo"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,22 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {\n+\t\tChannel chan = connection.createChannel();\n+\t\tif (rmqConnectionConfig.getPrefetchCount().isPresent()) {\n+\t\t\tchan.basicQos(rmqConnectionConfig.getPrefetchCount().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzMxNA=="}, "originalCommit": {"oid": "99231d5b11dd2adced76b48996dfb252b5cc9fc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMDQ4NA==", "bodyText": "I'll let you know how it goes and thank you for the offer - I'll take you up on it if I can't find time this week! Moving this weekend, so it'll be busy over here..", "url": "https://github.com/apache/flink/pull/12729#discussion_r447320484", "createdAt": "2020-06-29T23:42:02Z", "author": {"login": "austince"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,22 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {\n+\t\tChannel chan = connection.createChannel();\n+\t\tif (rmqConnectionConfig.getPrefetchCount().isPresent()) {\n+\t\t\tchan.basicQos(rmqConnectionConfig.getPrefetchCount().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzMxNA=="}, "originalCommit": {"oid": "99231d5b11dd2adced76b48996dfb252b5cc9fc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MzQ1Mw==", "bodyText": "Finally got around to this, sorry about the late reply! When I was putting together the example, I found that RMQ 3.3 is not even available on Docker hub and has been out of service since 2015 and the last patch was released in 2016, so I think we can safely just set the global flag and not care about that version. Here's the playground running this branch's code: https://github.com/austince/flink-rmq-playground", "url": "https://github.com/apache/flink/pull/12729#discussion_r458283453", "createdAt": "2020-07-21T17:54:21Z", "author": {"login": "austince"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,22 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {\n+\t\tChannel chan = connection.createChannel();\n+\t\tif (rmqConnectionConfig.getPrefetchCount().isPresent()) {\n+\t\t\tchan.basicQos(rmqConnectionConfig.getPrefetchCount().get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY0MzMxNA=="}, "originalCommit": {"oid": "99231d5b11dd2adced76b48996dfb252b5cc9fc2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjE3NjM3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-rabbitmq/src/main/resources/META-INF/NOTICE", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoxMjo1MFrOG43v_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyOTo0NlrOG47PGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4Njg0Nw==", "bodyText": "We don't need the file for this dependency for two reasons:\n\nWe do not bundle the dependency. We need to create the NOTICE file if we e.g. shade the dependency into an uber-jar. In this case user has to manually add/bundle the dependency for the consumer to work.\nIt is ASL license.", "url": "https://github.com/apache/flink/pull/12729#discussion_r462286847", "createdAt": "2020-07-29T13:12:50Z", "author": {"login": "dawidwys"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/resources/META-INF/NOTICE", "diffHunk": "@@ -0,0 +1,9 @@\n+flink-connector-rabbitmq\n+Copyright 2014-2020 The Apache Software Foundation\n+\n+This product includes software developed at\n+The Apache Software Foundation (http://www.apache.org/).\n+\n+This project bundles the following dependencies under the Apache Software License 2.0. (http://www.apache.org/licenses/LICENSE-2.0.txt)\n+\n+- com.rabbitmq:amqp-client:4.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790ebc88d93408cba281d3836ea24e6f6bc4a866"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNTI5NA==", "bodyText": "Ok great, thank you! Are the changes I listed in the source files themselves good enough for ASL license-compliance? Never modified source into a project of this scale before...", "url": "https://github.com/apache/flink/pull/12729#discussion_r462315294", "createdAt": "2020-07-29T13:52:29Z", "author": {"login": "austince"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/resources/META-INF/NOTICE", "diffHunk": "@@ -0,0 +1,9 @@\n+flink-connector-rabbitmq\n+Copyright 2014-2020 The Apache Software Foundation\n+\n+This product includes software developed at\n+The Apache Software Foundation (http://www.apache.org/).\n+\n+This project bundles the following dependencies under the Apache Software License 2.0. (http://www.apache.org/licenses/LICENSE-2.0.txt)\n+\n+- com.rabbitmq:amqp-client:4.2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4Njg0Nw=="}, "originalCommit": {"oid": "790ebc88d93408cba281d3836ea24e6f6bc4a866"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0Mzk2MA==", "bodyText": "Yes, the classes itself are good, imo.", "url": "https://github.com/apache/flink/pull/12729#discussion_r462343960", "createdAt": "2020-07-29T14:29:46Z", "author": {"login": "dawidwys"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/resources/META-INF/NOTICE", "diffHunk": "@@ -0,0 +1,9 @@\n+flink-connector-rabbitmq\n+Copyright 2014-2020 The Apache Software Foundation\n+\n+This product includes software developed at\n+The Apache Software Foundation (http://www.apache.org/).\n+\n+This project bundles the following dependencies under the Apache Software License 2.0. (http://www.apache.org/licenses/LICENSE-2.0.txt)\n+\n+- com.rabbitmq:amqp-client:4.2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4Njg0Nw=="}, "originalCommit": {"oid": "790ebc88d93408cba281d3836ea24e6f6bc4a866"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjE5MTkyOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzoxNjoyMFrOG435SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzo1Mjo1OVrOG45geg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4OTIyNQ==", "bodyText": "If I understand the RMQSource well, the reasons why setupConnection or setupConnectionFactory are protected is for assertions in tests. I see you managed to test it without using the setupChannel method. I think we can safely make it private.\nMoreover WDYT of annotating the other methods with VisibleForTesting?", "url": "https://github.com/apache/flink/pull/12729#discussion_r462289225", "createdAt": "2020-07-29T13:16:20Z", "author": {"login": "dawidwys"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,25 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "790ebc88d93408cba281d3836ea24e6f6bc4a866"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxNTY0Mg==", "bodyText": "I think both are great ideas, I'll implement those shortly.", "url": "https://github.com/apache/flink/pull/12729#discussion_r462315642", "createdAt": "2020-07-29T13:52:59Z", "author": {"login": "austince"}, "path": "flink-connectors/flink-connector-rabbitmq/src/main/java/org/apache/flink/streaming/connectors/rabbitmq/RMQSource.java", "diffHunk": "@@ -141,6 +140,25 @@ protected Connection setupConnection() throws Exception {\n \t\treturn setupConnectionFactory().newConnection();\n \t}\n \n+\t/**\n+\t * Initializes the consumer's {@link Channel}. If a prefetch count has been set in {@link RMQConnectionConfig},\n+\t * the new channel will be use it for {@link Channel#basicQos(int)}.\n+\t *\n+\t * @param connection the consumer's {@link Connection}.\n+\t * @return the channel.\n+\t * @throws Exception if there is an issue creating or configuring the channel.\n+\t */\n+\tprotected Channel setupChannel(Connection connection) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4OTIyNQ=="}, "originalCommit": {"oid": "790ebc88d93408cba281d3836ea24e6f6bc4a866"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4219, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}