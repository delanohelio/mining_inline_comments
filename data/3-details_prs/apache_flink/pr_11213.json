{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTU1MzQ0", "number": 11213, "title": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing", "bodyText": "What is the purpose of the change\nCurrently tests create DefaultScheduler via its constructor. Having a builder and a set of factory methods can significantly reduce the complexity to instantiate DefaultScheduler.\nIt can be very helpful especially when we are to rework tests to base on the new scheduler.\nBrief change log\nAdded a builder and factory methods to create DefaultScheduler for testing.\nVerifying this change\nThis change is already covered by existing tests\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-02-25T12:35:22Z", "url": "https://github.com/apache/flink/pull/11213", "merged": true, "mergeCommit": {"oid": "622bd31ab8e48afa120b9bb37e8fdc5fdb04f193"}, "closed": true, "closedAt": "2020-02-29T05:42:20Z", "author": {"login": "zhuzhurk"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHxnYfgBqjMwNjkzMTM2MDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIyC21gFqTM2NjUwMTIxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b31d7fab8da81827ca063075427a3737377bf0ed", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b31d7fab8da81827ca063075427a3737377bf0ed", "committedDate": "2020-02-25T12:30:59Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}, "afterCommit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/dd6d5731a27212ea07f547e5653c07c7295d057d", "committedDate": "2020-02-25T12:50:29Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0Nzc3Mzgy", "url": "https://github.com/apache/flink/pull/11213#pullrequestreview-364777382", "createdAt": "2020-02-26T10:18:55Z", "commit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMDoxODo1NVrOFuly9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMTowMjo0MlrOFunQvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM5ODA2OA==", "bodyText": "It is not obvious to me why the visibility increase from protected to public is needed. If this is needed for a later change, then it should not be in this PR.", "url": "https://github.com/apache/flink/pull/11213#discussion_r384398068", "createdAt": "2020-02-26T10:18:55Z", "author": {"login": "GJL"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "diffHunk": "@@ -280,23 +281,8 @@ private ExecutionGraph createExecutionGraph(\n \t\t\tfailoverStrategy);\n \t}\n \n-\t/**\n-\t * @deprecated Direct access to the execution graph by scheduler implementations is discouraged\n-\t * because currently the execution graph has various features and responsibilities that a\n-\t * scheduler should not be concerned about. The following specialized abstractions to the\n-\t * execution graph and accessors should be preferred over direct access:\n-\t * <ul>\n-\t *     <li>{@link #getSchedulingTopology()}\n-\t *     <li>{@link #getFailoverTopology()}\n-\t *     <li>{@link #getInputsLocationsRetriever()}\n-\t *     <li>{@link #getExecutionVertex(ExecutionVertexID)}\n-\t *     <li>{@link #getExecutionVertexId(ExecutionAttemptID)}\n-\t *     <li>{@link #getExecutionVertexIdOrThrow(ExecutionAttemptID)}\n-\t * </ul>\n-\t * Currently, only {@link LegacyScheduler} requires direct access to the execution graph.\n-\t */\n-\t@Deprecated\n-\tprotected ExecutionGraph getExecutionGraph() {\n+\t@VisibleForTesting\n+\tpublic ExecutionGraph getExecutionGraph() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwNzA5Ng==", "bodyText": "I don't think the comment // this is not used any more in the new scheduler is needed. It would not be consistent to comment here because there is another invocation of this constructor where we do not comment. I would remove the parameters slotProvider and slotRequestTimeout from the DefaultScheduler, and if possible pass a \"throwing\" implementation/invalid value to SchedulerBase.", "url": "https://github.com/apache/flink/pull/11213#discussion_r384407096", "createdAt": "2020-02-26T10:35:07Z", "author": {"login": "GJL"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,161 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+\n+\n+\t/**\n+\t * Builder for {@link DefaultScheduler}.\n+\t */\n+\tpublic static class DefaultSchedulerBuilder {\n+\t\tprivate final JobGraph jobGraph;\n+\n+\t\tprivate SchedulingStrategyFactory schedulingStrategyFactory;\n+\n+\t\tprivate Logger log = LOG;\n+\t\tprivate BackPressureStatsTracker backPressureStatsTracker = VoidBackPressureStatsTracker.INSTANCE;\n+\t\tprivate Executor ioExecutor = java.util.concurrent.Executors.newSingleThreadExecutor();\n+\t\tprivate Configuration jobMasterConfiguration = new Configuration();\n+\t\tprivate ScheduledExecutorService futureExecutor = new DirectScheduledExecutorService();\n+\t\tprivate ScheduledExecutor delayExecutor = new ScheduledExecutorServiceAdapter(futureExecutor);\n+\t\tprivate ClassLoader userCodeLoader = getClass().getClassLoader();\n+\t\tprivate CheckpointRecoveryFactory checkpointRecoveryFactory = new StandaloneCheckpointRecoveryFactory();\n+\t\tprivate Time rpcTimeout = DEFAULT_TIMEOUT;\n+\t\tprivate BlobWriter blobWriter = VoidBlobWriter.getInstance();\n+\t\tprivate JobManagerJobMetricGroup jobManagerJobMetricGroup = UnregisteredMetricGroups.createUnregisteredJobManagerJobMetricGroup();\n+\t\tprivate ShuffleMaster<?> shuffleMaster = NettyShuffleMaster.INSTANCE;\n+\t\tprivate JobMasterPartitionTracker partitionTracker = NoOpJobMasterPartitionTracker.INSTANCE;\n+\t\tprivate FailoverStrategy.Factory failoverStrategyFactory = new RestartPipelinedRegionFailoverStrategy.Factory();\n+\t\tprivate RestartBackoffTimeStrategy restartBackoffTimeStrategy = NoRestartBackoffTimeStrategy.INSTANCE;\n+\t\tprivate ExecutionVertexOperations executionVertexOperations = new DefaultExecutionVertexOperations();\n+\t\tprivate ExecutionVertexVersioner executionVertexVersioner = new ExecutionVertexVersioner();\n+\t\tprivate ExecutionSlotAllocatorFactory executionSlotAllocatorFactory = new TestExecutionSlotAllocatorFactory();\n+\n+\t\tprivate DefaultSchedulerBuilder(final JobGraph jobGraph) {\n+\t\t\tthis.jobGraph = jobGraph;\n+\n+\t\t\t// scheduling strategy is by default set according to the scheduleMode. It can be re-assigned later.\n+\t\t\tthis.schedulingStrategyFactory = DefaultSchedulerFactory.createSchedulingStrategyFactory(jobGraph.getScheduleMode());\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setLogger(final Logger log) {\n+\t\t\tthis.log = log;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setBackPressureStatsTracker(final BackPressureStatsTracker backPressureStatsTracker) {\n+\t\t\tthis.backPressureStatsTracker = backPressureStatsTracker;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setIoExecutor(final Executor ioExecutor) {\n+\t\t\tthis.ioExecutor = ioExecutor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setJobMasterConfiguration(final Configuration jobMasterConfiguration) {\n+\t\t\tthis.jobMasterConfiguration = jobMasterConfiguration;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setFutureExecutor(final ScheduledExecutorService futureExecutor) {\n+\t\t\tthis.futureExecutor = futureExecutor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setDelayExecutor(final ScheduledExecutor delayExecutor) {\n+\t\t\tthis.delayExecutor = delayExecutor;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setUserCodeLoader(final ClassLoader userCodeLoader) {\n+\t\t\tthis.userCodeLoader = userCodeLoader;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setCheckpointRecoveryFactory(final CheckpointRecoveryFactory checkpointRecoveryFactory) {\n+\t\t\tthis.checkpointRecoveryFactory = checkpointRecoveryFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setRpcTimeout(final Time rpcTimeout) {\n+\t\t\tthis.rpcTimeout = rpcTimeout;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setBlobWriter(final BlobWriter blobWriter) {\n+\t\t\tthis.blobWriter = blobWriter;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setJobManagerJobMetricGroup(final JobManagerJobMetricGroup jobManagerJobMetricGroup) {\n+\t\t\tthis.jobManagerJobMetricGroup = jobManagerJobMetricGroup;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setShuffleMaster(final ShuffleMaster<?> shuffleMaster) {\n+\t\t\tthis.shuffleMaster = shuffleMaster;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setPartitionTracker(final JobMasterPartitionTracker partitionTracker) {\n+\t\t\tthis.partitionTracker = partitionTracker;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setSchedulingStrategyFactory(final SchedulingStrategyFactory schedulingStrategyFactory) {\n+\t\t\tthis.schedulingStrategyFactory = schedulingStrategyFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setFailoverStrategyFactory(final FailoverStrategy.Factory failoverStrategyFactory) {\n+\t\t\tthis.failoverStrategyFactory = failoverStrategyFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setRestartBackoffTimeStrategy(final RestartBackoffTimeStrategy restartBackoffTimeStrategy) {\n+\t\t\tthis.restartBackoffTimeStrategy = restartBackoffTimeStrategy;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setExecutionVertexOperations(final ExecutionVertexOperations executionVertexOperations) {\n+\t\t\tthis.executionVertexOperations = executionVertexOperations;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setExecutionVertexVersioner(final ExecutionVertexVersioner executionVertexVersioner) {\n+\t\t\tthis.executionVertexVersioner = executionVertexVersioner;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultSchedulerBuilder setExecutionSlotAllocatorFactory(final ExecutionSlotAllocatorFactory executionSlotAllocatorFactory) {\n+\t\t\tthis.executionSlotAllocatorFactory = executionSlotAllocatorFactory;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\tpublic DefaultScheduler build() throws Exception {\n+\t\t\treturn new DefaultScheduler(\n+\t\t\t\tlog,\n+\t\t\t\tjobGraph,\n+\t\t\t\tbackPressureStatsTracker,\n+\t\t\t\tioExecutor,\n+\t\t\t\tjobMasterConfiguration,\n+\t\t\t\tnew SimpleSlotProvider(jobGraph.getJobID(), 0), // this is not used any more in the new scheduler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d"}, "originalPosition": 312}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMTU1Mw==", "bodyText": "There are more than two empty lines. Since this is forbidden by checkstyle in production code, I also wouldn't do it in test code.", "url": "https://github.com/apache/flink/pull/11213#discussion_r384421553", "createdAt": "2020-02-26T11:01:33Z", "author": {"login": "GJL"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,161 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQyMjA3OQ==", "bodyText": "I cannot find real usages of these newSchedulerBuilderWithDefaultSlotAllocator() and createScheduler(). Can you explain why they are needed?", "url": "https://github.com/apache/flink/pull/11213#discussion_r384422079", "createdAt": "2020-02-26T11:02:42Z", "author": {"login": "GJL"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -77,6 +94,47 @@\n \n \tprivate static final long DEFAULT_CHECKPOINT_TIMEOUT_MS = 10 * 60 * 1000;\n \n+\tprivate static final Time DEFAULT_TIMEOUT = Time.seconds(300);\n+\n+\tprivate SchedulerTestingUtils() {}\n+\n+\tpublic static DefaultSchedulerBuilder newSchedulerBuilder(final JobGraph jobGraph) {\n+\t\treturn new DefaultSchedulerBuilder(jobGraph);\n+\t}\n+\n+\tpublic static DefaultSchedulerBuilder newSchedulerBuilderWithDefaultSlotAllocator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd6d5731a27212ea07f547e5653c07c7295d057d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/dd6d5731a27212ea07f547e5653c07c7295d057d", "committedDate": "2020-02-25T12:50:29Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}, "afterCommit": {"oid": "cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "committedDate": "2020-02-27T06:32:21Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDQxOTQy", "url": "https://github.com/apache/flink/pull/11213#pullrequestreview-365441942", "createdAt": "2020-02-27T06:36:12Z", "commit": {"oid": "cade94bacbaa7fa76c0a0d013eb069406d01b6ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozNjoxM1rOFvGqQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNjozNjoxM1rOFvGqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDkzNjUxMg==", "bodyText": "We can also remove these 2 params from the constructor of SchedulerBase once we have removed the legacy scheduler.", "url": "https://github.com/apache/flink/pull/11213#discussion_r384936512", "createdAt": "2020-02-27T06:36:13Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultScheduler.java", "diffHunk": "@@ -123,15 +121,15 @@ public DefaultScheduler(\n \t\t\tbackPressureStatsTracker,\n \t\t\tioExecutor,\n \t\t\tjobMasterConfiguration,\n-\t\t\tslotProvider,\n+\t\t\tnew ThrowingSlotProvider(), // this is not used any more in the new scheduler\n \t\t\tfutureExecutor,\n \t\t\tuserCodeLoader,\n \t\t\tcheckpointRecoveryFactory,\n \t\t\trpcTimeout,\n \t\t\tnew ThrowingRestartStrategy.ThrowingRestartStrategyFactory(),\n \t\t\tblobWriter,\n \t\t\tjobManagerJobMetricGroup,\n-\t\t\tslotRequestTimeout,\n+\t\t\tTime.seconds(0), // this is not used any more in the new scheduler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cade94bacbaa7fa76c0a0d013eb069406d01b6ad"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/cade94bacbaa7fa76c0a0d013eb069406d01b6ad", "committedDate": "2020-02-27T06:32:21Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}, "afterCommit": {"oid": "d557df5126a0a4f2404ac08ccea25000e8495e25", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/d557df5126a0a4f2404ac08ccea25000e8495e25", "committedDate": "2020-02-28T07:02:03Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzUzMzU2", "url": "https://github.com/apache/flink/pull/11213#pullrequestreview-366353356", "createdAt": "2020-02-28T12:10:28Z", "commit": {"oid": "d557df5126a0a4f2404ac08ccea25000e8495e25"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjoxMDoyOVrOFvy75Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMjoyNDo1M1rOFvzRTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2MTkyNQ==", "bodyText": ".getClassLoader() can return null. I don't think this will happen in this code path but I would feel better if we used ClassLoader.getSystemClassLoader()", "url": "https://github.com/apache/flink/pull/11213#discussion_r385661925", "createdAt": "2020-02-28T12:10:29Z", "author": {"login": "GJL"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,158 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Builder for {@link DefaultScheduler}.\n+\t */\n+\tpublic static class DefaultSchedulerBuilder {\n+\t\tprivate final JobGraph jobGraph;\n+\n+\t\tprivate SchedulingStrategyFactory schedulingStrategyFactory;\n+\n+\t\tprivate Logger log = LOG;\n+\t\tprivate BackPressureStatsTracker backPressureStatsTracker = VoidBackPressureStatsTracker.INSTANCE;\n+\t\tprivate Executor ioExecutor = java.util.concurrent.Executors.newSingleThreadExecutor();\n+\t\tprivate Configuration jobMasterConfiguration = new Configuration();\n+\t\tprivate ScheduledExecutorService futureExecutor = new DirectScheduledExecutorService();\n+\t\tprivate ScheduledExecutor delayExecutor = new ScheduledExecutorServiceAdapter(futureExecutor);\n+\t\tprivate ClassLoader userCodeLoader = getClass().getClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d557df5126a0a4f2404ac08ccea25000e8495e25"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY2NzQwNQ==", "bodyText": "By merely creating a builder, we are instantiating several thread pools (ioExecutor, futureExecutor, delayExecutor) but from a user perspective there is no way to shut them down. I don't see a good solution to this.", "url": "https://github.com/apache/flink/pull/11213#discussion_r385667405", "createdAt": "2020-02-28T12:24:53Z", "author": {"login": "GJL"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/SchedulerTestingUtils.java", "diffHunk": "@@ -213,4 +267,158 @@ public static CheckpointCoordinator getCheckpointCoordinator(SchedulerBase sched\n \t\t\treturn operatorGateway.sendOperatorEventToTask(task, operator, evt);\n \t\t}\n \t}\n+\n+\t/**\n+\t * Builder for {@link DefaultScheduler}.\n+\t */\n+\tpublic static class DefaultSchedulerBuilder {\n+\t\tprivate final JobGraph jobGraph;\n+\n+\t\tprivate SchedulingStrategyFactory schedulingStrategyFactory;\n+\n+\t\tprivate Logger log = LOG;\n+\t\tprivate BackPressureStatsTracker backPressureStatsTracker = VoidBackPressureStatsTracker.INSTANCE;\n+\t\tprivate Executor ioExecutor = java.util.concurrent.Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d557df5126a0a4f2404ac08ccea25000e8495e25"}, "originalPosition": 177}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f13449126632a72f4aec4c0ae4f0f0537a58cc9", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/1f13449126632a72f4aec4c0ae4f0f0537a58cc9", "committedDate": "2020-02-28T15:14:13Z", "message": "[hotfix][tests] Make SchedulerTestingUtils constructor private"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1d4af3ecafd90b4290982709bd7c7e1fdc528a", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/1c1d4af3ecafd90b4290982709bd7c7e1fdc528a", "committedDate": "2020-02-28T15:14:13Z", "message": "[hotfix][runtime] Remove slotProvider and slotRequestTimeout param from DefaultScheduler constructor\n\nThis makes it easier to understand that the slot allocation is conducted via ExecutionSlotAllocatorFactory but not those two legacy params."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a7a5756f90a5bcdc8295ce7f4a24201af4230fb", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/8a7a5756f90a5bcdc8295ce7f4a24201af4230fb", "committedDate": "2020-02-28T15:14:13Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f9c1cdbb606073177669d281562ae2bdcd484e0", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/3f9c1cdbb606073177669d281562ae2bdcd484e0", "committedDate": "2020-02-28T15:17:15Z", "message": "Fixup! [FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d557df5126a0a4f2404ac08ccea25000e8495e25", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/d557df5126a0a4f2404ac08ccea25000e8495e25", "committedDate": "2020-02-28T07:02:03Z", "message": "[FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}, "afterCommit": {"oid": "3f9c1cdbb606073177669d281562ae2bdcd484e0", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/3f9c1cdbb606073177669d281562ae2bdcd484e0", "committedDate": "2020-02-28T15:17:15Z", "message": "Fixup! [FLINK-16276][tests] Introduce a builder and factory methods to create DefaultScheduler for testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NTAxMjEx", "url": "https://github.com/apache/flink/pull/11213#pullrequestreview-366501211", "createdAt": "2020-02-28T15:55:51Z", "commit": {"oid": "3f9c1cdbb606073177669d281562ae2bdcd484e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4195, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}