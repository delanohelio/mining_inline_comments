{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzgxOTAw", "number": 12101, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzozMzozOFrOD9EdEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzozOTowNlrOD9EeEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzYyNzA1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzozMzozOFrOGWY1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzozMzozOFrOGWY1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyODY5OA==", "bodyText": "nit: same line?", "url": "https://github.com/apache/flink/pull/12101#discussion_r426128698", "createdAt": "2020-05-16T07:33:38Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java", "diffHunk": "@@ -141,13 +141,18 @@ public void testBlockingNonInterruptibleCheckpoint() throws Exception {\n \t\tassertNull(task.getFailureCause());\n \t}\n \n-\tprivate void runTestDeclineOnCheckpointError(AbstractStateBackend backend) throws Exception{\n-\n+\tprivate void runTestDeclineOnCheckpointError(AbstractStateBackend backend, boolean expectFailure) throws Exception {\n \t\tTestDeclinedCheckpointResponder checkpointResponder = new TestDeclinedCheckpointResponder();\n+\t\tTask task = createTask(new FilterOperator(), backend, checkpointResponder);\n+\t\tif (expectFailure) {\n+\t\t\trunTaskExpectFailure(task);\n+\t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d50525387d232af7cf0d79fe51dbc39757aa6b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzYyOTYwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzozOTowNlrOGWY2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzo1Mzo1M1rOGWY6gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyOTAyOA==", "bodyText": "It feels as if the test logic is hidden in this method from the actual test case perspective.\nCan we instead of expectFailure pass this::runTaskExpectFailure and this::runTaskExpectCheckpointDeclined? (probably BiConsumer?)\nOr maybe inline this method altogether. I see the value rather limited.\nLast option is to use Roman's pattern in ChannelStateWriterImplTest\n    @Test\n\tpublic void testDeclineOnCheckpointErrorInAsyncPart() throws Exception {\n       runWithResponder((task, checkpointResponder) -> runTaskExpectCheckpointDeclined(task, checkpointResponder));\n\t}", "url": "https://github.com/apache/flink/pull/12101#discussion_r426129028", "createdAt": "2020-05-16T07:39:06Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java", "diffHunk": "@@ -141,13 +141,18 @@ public void testBlockingNonInterruptibleCheckpoint() throws Exception {\n \t\tassertNull(task.getFailureCause());\n \t}\n \n-\tprivate void runTestDeclineOnCheckpointError(AbstractStateBackend backend) throws Exception{\n-\n+\tprivate void runTestDeclineOnCheckpointError(AbstractStateBackend backend, boolean expectFailure) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d50525387d232af7cf0d79fe51dbc39757aa6b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzMDA0OQ==", "bodyText": "I don't like the reliance on passing consumers everywhere, it makes code a spaghetti, when you have to traverse sometimes long call stacks to actually find out what your method is actually doing.\nBut indeed, inlining is better option to passing the parameter.", "url": "https://github.com/apache/flink/pull/12101#discussion_r426130049", "createdAt": "2020-05-16T07:53:53Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TaskCheckpointingBehaviourTest.java", "diffHunk": "@@ -141,13 +141,18 @@ public void testBlockingNonInterruptibleCheckpoint() throws Exception {\n \t\tassertNull(task.getFailureCause());\n \t}\n \n-\tprivate void runTestDeclineOnCheckpointError(AbstractStateBackend backend) throws Exception{\n-\n+\tprivate void runTestDeclineOnCheckpointError(AbstractStateBackend backend, boolean expectFailure) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyOTAyOA=="}, "originalCommit": {"oid": "e0d50525387d232af7cf0d79fe51dbc39757aa6b"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1416, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}