{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDU5NTQ2", "number": 11986, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyMTo1MFrOD6Ki1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjozOToyMlrOD-E9yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzE2NzU4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCTableSourceITCase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyMTo1MFrOGR1-XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzowNzo0N1rOGR9pQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MzI5Mw==", "bodyText": "I think using the static StreamITCase functionality here is an anti-pattern that we should avoid. (I know that it's widely used in the code base, but we should rid of it at some point.)\nIdeally, with the FLIP-84 work it should be as easy as\nTableResult tableResult = tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\ntableResult.collect();\n\nbut that is not yet in master. I'm inclined to wait for a but but basically have this PR ready in a mergable state.", "url": "https://github.com/apache/flink/pull/11986#discussion_r421363293", "createdAt": "2020-05-07T09:21:50Z", "author": {"login": "aljoscha"}, "path": "flink-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCTableSourceITCase.java", "diffHunk": "@@ -153,4 +153,34 @@ public void testProjectableJDBCSource() throws Exception {\n \t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n \t\tStreamITCase.compareWithList(expected);\n \t}\n+\n+\t@Test\n+\tpublic void testScanQueryJDBCSource() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n+\t\t\t.useBlinkPlanner()\n+\t\t\t.inStreamingMode()\n+\t\t\t.build();\n+\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n+\n+\t\tfinal String testQuery = \"SELECT id FROM \" + INPUT_TABLE;\n+\t\ttEnv.sqlUpdate(\n+\t\t\t\"CREATE TABLE test(\" +\n+\t\t\t\t\"id BIGINT\" +\n+\t\t\t\t\") WITH (\" +\n+\t\t\t\t\"  'connector.type'='jdbc',\" +\n+\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n+\t\t\t\t\"  'connector.table'='whatever',\" +\n+\t\t\t\t\"  'connector.read.query'='\" + testQuery + \"'\" +\n+\t\t\t\t\")\"\n+\t\t);\n+\n+\t\tStreamITCase.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1597769183be673722456fb55e296d38d0fad837"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ1MDU2Nw==", "bodyText": "I just copied the code from another test and I modifier it. I didn't ask myself too much why there's the need to call StreamITCase.clear()", "url": "https://github.com/apache/flink/pull/11986#discussion_r421450567", "createdAt": "2020-05-07T12:02:58Z", "author": {"login": "fpompermaier"}, "path": "flink-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCTableSourceITCase.java", "diffHunk": "@@ -153,4 +153,34 @@ public void testProjectableJDBCSource() throws Exception {\n \t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n \t\tStreamITCase.compareWithList(expected);\n \t}\n+\n+\t@Test\n+\tpublic void testScanQueryJDBCSource() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n+\t\t\t.useBlinkPlanner()\n+\t\t\t.inStreamingMode()\n+\t\t\t.build();\n+\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n+\n+\t\tfinal String testQuery = \"SELECT id FROM \" + INPUT_TABLE;\n+\t\ttEnv.sqlUpdate(\n+\t\t\t\"CREATE TABLE test(\" +\n+\t\t\t\t\"id BIGINT\" +\n+\t\t\t\t\") WITH (\" +\n+\t\t\t\t\"  'connector.type'='jdbc',\" +\n+\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n+\t\t\t\t\"  'connector.table'='whatever',\" +\n+\t\t\t\t\"  'connector.read.query'='\" + testQuery + \"'\" +\n+\t\t\t\t\")\"\n+\t\t);\n+\n+\t\tStreamITCase.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MzI5Mw=="}, "originalCommit": {"oid": "1597769183be673722456fb55e296d38d0fad837"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2NDEzOA==", "bodyText": "I understand, the code code that is there is already not good. \ud83d\ude1e", "url": "https://github.com/apache/flink/pull/11986#discussion_r421464138", "createdAt": "2020-05-07T12:27:58Z", "author": {"login": "aljoscha"}, "path": "flink-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCTableSourceITCase.java", "diffHunk": "@@ -153,4 +153,34 @@ public void testProjectableJDBCSource() throws Exception {\n \t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n \t\tStreamITCase.compareWithList(expected);\n \t}\n+\n+\t@Test\n+\tpublic void testScanQueryJDBCSource() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n+\t\t\t.useBlinkPlanner()\n+\t\t\t.inStreamingMode()\n+\t\t\t.build();\n+\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n+\n+\t\tfinal String testQuery = \"SELECT id FROM \" + INPUT_TABLE;\n+\t\ttEnv.sqlUpdate(\n+\t\t\t\"CREATE TABLE test(\" +\n+\t\t\t\t\"id BIGINT\" +\n+\t\t\t\t\") WITH (\" +\n+\t\t\t\t\"  'connector.type'='jdbc',\" +\n+\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n+\t\t\t\t\"  'connector.table'='whatever',\" +\n+\t\t\t\t\"  'connector.read.query'='\" + testQuery + \"'\" +\n+\t\t\t\t\")\"\n+\t\t);\n+\n+\t\tStreamITCase.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MzI5Mw=="}, "originalCommit": {"oid": "1597769183be673722456fb55e296d38d0fad837"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4ODk2Mw==", "bodyText": "Maybe we can merge this and open an issue to fix the tests in this class to the right way when FLIP-84 will be ready", "url": "https://github.com/apache/flink/pull/11986#discussion_r421488963", "createdAt": "2020-05-07T13:07:47Z", "author": {"login": "fpompermaier"}, "path": "flink-connectors/flink-jdbc/src/test/java/org/apache/flink/api/java/io/jdbc/JDBCTableSourceITCase.java", "diffHunk": "@@ -153,4 +153,34 @@ public void testProjectableJDBCSource() throws Exception {\n \t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n \t\tStreamITCase.compareWithList(expected);\n \t}\n+\n+\t@Test\n+\tpublic void testScanQueryJDBCSource() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n+\t\t\t.useBlinkPlanner()\n+\t\t\t.inStreamingMode()\n+\t\t\t.build();\n+\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n+\n+\t\tfinal String testQuery = \"SELECT id FROM \" + INPUT_TABLE;\n+\t\ttEnv.sqlUpdate(\n+\t\t\t\"CREATE TABLE test(\" +\n+\t\t\t\t\"id BIGINT\" +\n+\t\t\t\t\") WITH (\" +\n+\t\t\t\t\"  'connector.type'='jdbc',\" +\n+\t\t\t\t\"  'connector.url'='\" + DB_URL + \"',\" +\n+\t\t\t\t\"  'connector.table'='whatever',\" +\n+\t\t\t\t\"  'connector.read.query'='\" + testQuery + \"'\" +\n+\t\t\t\t\")\"\n+\t\t);\n+\n+\t\tStreamITCase.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MzI5Mw=="}, "originalCommit": {"oid": "1597769183be673722456fb55e296d38d0fad837"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzE4MTA4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/connect.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyNToxN1rOGR2G6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyNToxN1rOGR2G6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2NTQ4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              -- optional: SQL query / prepared statement.\n          \n          \n            \n              -- If set, it will takes over the 'connector.table' setting\n          \n          \n            \n              'connector.read.query' = 'SELECT * FROM sometable',\n          \n          \n            \n              -- optional: SQL query / prepared statement.\n          \n          \n            \n              -- If set, this will take precedence over the 'connector.table' setting\n          \n          \n            \n              'connector.read.query' = 'SELECT * FROM sometable',", "url": "https://github.com/apache/flink/pull/11986#discussion_r421365481", "createdAt": "2020-05-07T09:25:17Z", "author": {"login": "aljoscha"}, "path": "docs/dev/table/connect.md", "diffHunk": "@@ -1284,7 +1284,11 @@ CREATE TABLE MyUserTable (\n   'connector.username' = 'name',\n   'connector.password' = 'password',\n   \n-  -- **followings are scan options, optional, used when reading from table**\n+  -- **followings are scan options, optional, used when reading from a table**\n+\n+  -- optional: SQL query / prepared statement.\n+  -- If set, it will takes over the 'connector.table' setting\n+  'connector.read.query' = 'SELECT * FROM sometable',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1597769183be673722456fb55e296d38d0fad837"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDE5NjU5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNjozOToyMlrOGX9OhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMDo0MzowNlrOGZSwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3MzU3Mw==", "bodyText": "@aljoscha for the future: please use instances instead of strings", "url": "https://github.com/apache/flink/pull/11986#discussion_r427773573", "createdAt": "2020-05-20T06:39:22Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java", "diffHunk": "@@ -143,20 +149,19 @@ public void testProjectableJdbcSource() throws Exception {\n \t\t\t\t\")\"\n \t\t);\n \n-\t\tStreamITCase.clear();\n-\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE), Row.class)\n-\t\t\t\t.addSink(new StreamITCase.StringSink<>());\n-\t\tenv.execute();\n+\t\tTableResult tableResult = tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n+\n+\t\tList<String> results = manifestResults(tableResult);\n \n-\t\tList<String> expected =\n-\t\t\tArrays.asList(\n-\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",\n-\t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n-\t\tStreamITCase.compareWithList(expected);\n+\t\tassertThat(\n+\t\t\t\tresults,\n+\t\t\t\tcontainsInAnyOrder(\n+\t\t\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c15ff1d0641386ad0151880c9e84a8853ba5cd9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE3NDgzMg==", "bodyText": "Noted, that's a very good point.", "url": "https://github.com/apache/flink/pull/11986#discussion_r429174832", "createdAt": "2020-05-22T10:43:06Z", "author": {"login": "aljoscha"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcTableSourceITCase.java", "diffHunk": "@@ -143,20 +149,19 @@ public void testProjectableJdbcSource() throws Exception {\n \t\t\t\t\")\"\n \t\t);\n \n-\t\tStreamITCase.clear();\n-\t\ttEnv.toAppendStream(tEnv.sqlQuery(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE), Row.class)\n-\t\t\t\t.addSink(new StreamITCase.StringSink<>());\n-\t\tenv.execute();\n+\t\tTableResult tableResult = tEnv.executeSql(\"SELECT timestamp6_col, decimal_col FROM \" + INPUT_TABLE);\n+\n+\t\tList<String> results = manifestResults(tableResult);\n \n-\t\tList<String> expected =\n-\t\t\tArrays.asList(\n-\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",\n-\t\t\t\t\"2020-01-01T15:36:01.123456,101.1234\");\n-\t\tStreamITCase.compareWithList(expected);\n+\t\tassertThat(\n+\t\t\t\tresults,\n+\t\t\t\tcontainsInAnyOrder(\n+\t\t\t\t\t\t\"2020-01-01T15:35:00.123456,100.1234\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc3MzU3Mw=="}, "originalCommit": {"oid": "8c15ff1d0641386ad0151880c9e84a8853ba5cd9"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1501, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}