{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMTU2MDAx", "number": 12340, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo0OTo0MFrOD_tYAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyNzo1MVrOEAQ21g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTMwMzA3OnYy", "diffSide": "RIGHT", "path": "tools/releasing/create_release_branch.sh", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDo0OTo0MFrOGah7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMToyNTo0M1rOGbE7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MTk5Ng==", "bodyText": "Isn't \"major.minor.patch\" the \"official\" terminology for versions?", "url": "https://github.com/apache/flink/pull/12340#discussion_r430471996", "createdAt": "2020-05-26T14:49:40Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMDgwMQ==", "bodyText": "no;  we use ?.major.minor unfortunately.", "url": "https://github.com/apache/flink/pull/12340#discussion_r430530801", "createdAt": "2020-05-26T16:05:50Z", "author": {"login": "zentol"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MTk5Ng=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxODYyNA==", "bodyText": "I know that we are not using the right terminologies in Flink, but maybe this is our chance of slowly introducing new terms.", "url": "https://github.com/apache/flink/pull/12340#discussion_r430618624", "createdAt": "2020-05-26T18:25:30Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MTk5Ng=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMjMzOQ==", "bodyText": "Doing that will just introduce confusion; recent discussions on the ML showed that several devs were not aware of our version scheme, so it could easily happen that another one sees this and thinks that's what we are using.", "url": "https://github.com/apache/flink/pull/12340#discussion_r431012339", "createdAt": "2020-05-27T10:20:42Z", "author": {"login": "zentol"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MTk5Ng=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NTUyMQ==", "bodyText": "+1", "url": "https://github.com/apache/flink/pull/12340#discussion_r431045521", "createdAt": "2020-05-27T11:25:43Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MTk5Ng=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTM2NTQzOnYy", "diffSide": "RIGHT", "path": "tools/releasing/create_release_branch.sh", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTowMzowOVrOGaijJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNjozOFrOGbDG0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MjIxMg==", "bodyText": "Shouldn't these changes go into releasing/update_branch_version.sh? This file here seems to be used for preparing release candidate branches. (According to https://cwiki.apache.org/confluence/display/FLINK/Creating+a+Flink+Release#CreatingaFlinkRelease-Createareleasebranch)", "url": "https://github.com/apache/flink/pull/12340#discussion_r430482212", "createdAt": "2020-05-26T15:03:09Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+\n+# update japicmp configuration\n+if [[ ${minor} == \"0\" ]]; then\n+  # set japicmp reference version to previous major version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.$((${major}-1)).0'${2}#' pom.xml\n+else\n+  # set japicmp reference version to previous minor version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.${major}.$(($minor - 1))'${2}#' pom.xml\n+  # harden compatibility constraints for minor versions\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' pom.xml\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' pom.xml\n+fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNDk2MA==", "bodyText": "hmm, you're right, but I think we should have both.\nFor the release-X.Y branches we have to update the configuration manually, so this PR is more of a final safeguard for actual releases in case the the manual update is forgotten, which is basically guaranteed to happen at some point.", "url": "https://github.com/apache/flink/pull/12340#discussion_r430534960", "createdAt": "2020-05-26T16:11:50Z", "author": {"login": "zentol"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+\n+# update japicmp configuration\n+if [[ ${minor} == \"0\" ]]; then\n+  # set japicmp reference version to previous major version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.$((${major}-1)).0'${2}#' pom.xml\n+else\n+  # set japicmp reference version to previous minor version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.${major}.$(($minor - 1))'${2}#' pom.xml\n+  # harden compatibility constraints for minor versions\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' pom.xml\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' pom.xml\n+fi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MjIxMg=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMjMzNg==", "bodyText": "Ah, so the idea is that the build of a release-x.y.z-rci branch would fail (as a last resort) because the japicmp plugin gets reconfigured as part of the release process.\nBut ideally the release managers manually uncomment this one line in the pom in the release-X.Y branch.", "url": "https://github.com/apache/flink/pull/12340#discussion_r430622336", "createdAt": "2020-05-26T18:31:42Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+\n+# update japicmp configuration\n+if [[ ${minor} == \"0\" ]]; then\n+  # set japicmp reference version to previous major version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.$((${major}-1)).0'${2}#' pom.xml\n+else\n+  # set japicmp reference version to previous minor version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.${major}.$(($minor - 1))'${2}#' pom.xml\n+  # harden compatibility constraints for minor versions\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' pom.xml\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' pom.xml\n+fi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MjIxMg=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTYzMg==", "bodyText": "It wasn't the original idea, I just remembered wrong how the release process works.\nAs for the manual work, the RM has to un-comment the line, remove the exclusion and update the reference version to the last release minor version.\nUltimately the logic is identical, so I'll see if I can refactor this update into a separate script that the RM can call.", "url": "https://github.com/apache/flink/pull/12340#discussion_r431015632", "createdAt": "2020-05-27T10:26:38Z", "author": {"login": "zentol"}, "path": "tools/releasing/create_release_branch.sh", "diffHunk": "@@ -59,6 +59,22 @@ git checkout -b $target_branch\n #change version in all pom files\n find . -name 'pom.xml' -type f -exec perl -pi -e 's#<version>(.*)'$OLD_VERSION'(.*)</version>#<version>${1}'$NEW_VERSION'${2}</version>#' {} \\;\n \n+ultra=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+)\\.\\d+\\.\\d+#$1#')\n+major=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.(\\d+)\\.\\d+#$1#')\n+minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+\n+# update japicmp configuration\n+if [[ ${minor} == \"0\" ]]; then\n+  # set japicmp reference version to previous major version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.$((${major}-1)).0'${2}#' pom.xml\n+else\n+  # set japicmp reference version to previous minor version\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${ultra}.${major}.$(($minor - 1))'${2}#' pom.xml\n+  # harden compatibility constraints for minor versions\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' pom.xml\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' pom.xml\n+fi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MjIxMg=="}, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTM3Mjg4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTowNDo0OFrOGain1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNTowNDo0OFrOGain1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MzQxNA==", "bodyText": "Maybe update the comment that this will be done automatically by a script?", "url": "https://github.com/apache/flink/pull/12340#discussion_r430483414", "createdAt": "2020-05-26T15:04:48Z", "author": {"login": "rmetzger"}, "path": "pom.xml", "diffHunk": "@@ -1961,6 +1961,8 @@ under the License.\n \t\t\t\t\t\t\t<onlyModified>true</onlyModified>\n \t\t\t\t\t\t\t<includes>\n \t\t\t\t\t\t\t\t<include>@org.apache.flink.annotation.Public</include>\n+\t\t\t\t\t\t\t\t<!-- The following line must be un-commented for minor releases-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c67c51b003823e1abd4373963f7d1ea53e829b6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzA2Mzc3OnYy", "diffSide": "RIGHT", "path": "tools/releasing/update_japicmp_configuration.sh", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoxMDoxOFrOGbbY9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoyMTozNlrOGbu4LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMzQ5NQ==", "bodyText": "when do we have a branch name containing \"-SNAPSHOT\"? Shouldn't this be a check on the version set in the ./pom.xml ?", "url": "https://github.com/apache/flink/pull/12340#discussion_r431413495", "createdAt": "2020-05-27T20:10:18Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MzM2Nw==", "bodyText": "When for example we just released 1.11.0 and want to updated 1.11-SNAPSHOT to check against 1.11.0 and enable compatibility guarantees .", "url": "https://github.com/apache/flink/pull/12340#discussion_r431463367", "createdAt": "2020-05-27T21:50:58Z", "author": {"login": "zentol"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMzQ5NQ=="}, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzNTAwNg==", "bodyText": "Will also be a manual invocation of the script described in the release guide?\nThe RM will have to rename release-1.11 to release-1.11-SNAPSHOT and then run this script after 1.11.0 has been released?\nI still wonder why this check is on the branch name, and not the version.", "url": "https://github.com/apache/flink/pull/12340#discussion_r431635006", "createdAt": "2020-05-28T07:28:48Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMzQ5NQ=="}, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMDUxNQ==", "bodyText": "ah right, the branch name does not contain snapshot doesn't it. hmm :/\nWe do need to take the branch name into consideration since we never want to enable stronger guarantees on the master branch.", "url": "https://github.com/apache/flink/pull/12340#discussion_r431730515", "createdAt": "2020-05-28T10:17:11Z", "author": {"login": "zentol"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMzQ5NQ=="}, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTczMjc4MQ==", "bodyText": "Now checks for a release- prefix, after the rc/master checks.", "url": "https://github.com/apache/flink/pull/12340#discussion_r431732781", "createdAt": "2020-05-28T10:21:36Z", "author": {"login": "zentol"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQxMzQ5NQ=="}, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzExMzI4OnYy", "diffSide": "RIGHT", "path": "tools/releasing/update_japicmp_configuration.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyNjo1NVrOGbb4Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0OToxMVrOGbeYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMTUzOA==", "bodyText": "This case (and the previous one) require a manual invocation of update_japicmp_configuration.sh by the RM, right? (I assume you'll update the wiki?)", "url": "https://github.com/apache/flink/pull/12340#discussion_r431421538", "createdAt": "2020-05-27T20:26:55Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then\n+  # snapshot branch\n+  set_japicmp_reference_version ${NEW_VERSION}\n+  enable_public_evolving_compatibility_checks\n+elif [[ ${current_branch} =~ ^master$ ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MjUyMA==", "bodyText": "correct", "url": "https://github.com/apache/flink/pull/12340#discussion_r431462520", "createdAt": "2020-05-27T21:49:11Z", "author": {"login": "zentol"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then\n+  # release branch\n+  version_prefix=$(echo \"${NEW_VERSION}\" | perl -p -e 's#(\\d+\\.\\d+)\\.\\d+#$1#')\n+  minor=$(echo \"${NEW_VERSION}\" | perl -p -e 's#\\d+\\.\\d+\\.(\\d+)#$1#')\n+  if ! [[ ${minor} == \"0\" ]]; then\n+    set_japicmp_reference_version ${version_prefix}.$((minor - 1))\n+    # this is a safeguard in case the manual step of enabling checks after the X.Y.0 release was forgotten\n+    enable_public_evolving_compatibility_checks\n+  fi\n+elif [[ ${current_branch} =~ -SNAPSHOT ]]; then\n+  # snapshot branch\n+  set_japicmp_reference_version ${NEW_VERSION}\n+  enable_public_evolving_compatibility_checks\n+elif [[ ${current_branch} =~ ^master$ ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMTUzOA=="}, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzExNjM4OnYy", "diffSide": "RIGHT", "path": "tools/releasing/update_japicmp_configuration.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDoyNzo1MVrOGbb6VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0OTowN1rOGbeYVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMjAzNg==", "bodyText": "for this case, the RM doesn't need to invoke this script, because it is called from the create_release_branch.sh script, right?", "url": "https://github.com/apache/flink/pull/12340#discussion_r431422036", "createdAt": "2020-05-27T20:27:51Z", "author": {"login": "rmetzger"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MjQ4Nw==", "bodyText": "correct", "url": "https://github.com/apache/flink/pull/12340#discussion_r431462487", "createdAt": "2020-05-27T21:49:07Z", "author": {"login": "zentol"}, "path": "tools/releasing/update_japicmp_configuration.sh", "diffHunk": "@@ -0,0 +1,83 @@\n+#!/usr/bin/env bash\n+\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+\n+if [ -z \"${NEW_VERSION}\" ]; then\n+    echo \"NEW_VERSION was not set.\"\n+    exit 1\n+fi\n+\n+CURR_DIR=`pwd`\n+if [[ `basename $CURR_DIR` != \"tools\" ]] ; then\n+  echo \"You have to call the script from the tools/ dir\"\n+  exit 1\n+fi\n+\n+# Idealized use-cases:\n+# Scenario A) New major release X.Y.0\n+#   Premise:\n+#     There is a master branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.(Y-1).0 .\n+#   Release flow:\n+#     - update the master to X.(Y+1)-SNAPSHOT, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - create X.Y-SNAPSHOT branch, but keep the reference version intact since X.Y.0 is not released (yet)\n+#     - release X.Y.0\n+#     - update the japicmp reference version of both master and X.Y-SNAPSHOT to X.Y.0\n+#     - enable stronger compatibility constraints for X.Y-SNAPSHOT to ensure compatibility for PublicEvolving\n+# Scenario B) New minor release X.Y.Z\n+#   Premise:\n+#     There is a snapshot branch with a version X.Y-SNAPSHOT, with a japicmp reference version of X.Y.(Z-1)\n+#   Release flow:\n+#     - create X.Y.Z-rc branch\n+#     - update the japicmp reference version of X.Y.Z to X.Y.(Z-1)\n+#     - release X.Y.Z\n+#     - update the japicmp reference version of X.Y-SNAPSHOT to X.Y.Z\n+\n+POM=../pom.xml\n+function enable_public_evolving_compatibility_checks() {\n+  perl -pi -e 's#<!--(<include>\\@org.apache.flink.annotation.PublicEvolving</include>)-->#${1}#' ${POM}\n+  perl -pi -e 's#\\t+<exclude>\\@org.apache.flink.annotation.PublicEvolving.*\\n##' ${POM}\n+}\n+\n+function set_japicmp_reference_version() {\n+  local version=$1\n+\n+  perl -pi -e 's#(<japicmp.referenceVersion>).*(</japicmp.referenceVersion>)#${1}'${version}'${2}#' ${POM}\n+}\n+\n+current_branch=$(git rev-parse --abbrev-ref HEAD)\n+\n+if [[ ${current_branch} =~ -rc ]]; then", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyMjAzNg=="}, "originalCommit": {"oid": "122bae66113d7f2430c2568d594d39e38fe22585"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4465, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}