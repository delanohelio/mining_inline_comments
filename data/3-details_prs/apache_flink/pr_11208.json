{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDI5OTcy", "number": 11208, "title": "[FLINK-16271][python] Introduce ArrowPythonScalarFunctionOperator for vectorized Python UDF execution", "bodyText": "What is the purpose of the change\nThis pull request introduces  ArrowPythonScalarFunctionOperator for vectorized Python UDF execution.\nBrief change log\n\nIntroduces ArrowPythonScalarFunctionRunner which is responsible for serializing the input elements into Arrow format and sending them out\nIntroduces ArrowPythonScalarFunctionOperator is the operator for vectorized Python UDF execution which calling ArrowPythonScalarFunctionRunner to writing the input elements out. It also deserializes the execution results and sending them to the downstream operator\nIntroduces configuration python.fn-execution.arrow.batch.size which controls the maximum number of elements included in an Arrow batch\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded test cases in PythonConfigTest and PythonOptionsTest which verify that the config python.fn-execution.arrow.batch.size\nAdded tests ArrowPythonScalarFunctionRunnerTest, ArrowPythonScalarFunctionOperatorTest and BaseRowArrowPythonScalarFunctionOperatorTest\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? (Will add doc when end-to-end functionality works)", "createdAt": "2020-02-25T08:17:46Z", "url": "https://github.com/apache/flink/pull/11208", "merged": true, "mergeCommit": {"oid": "a6a5195d0d57752abe344714eb7c8ff6d7ca6d8e"}, "closed": true, "closedAt": "2020-02-28T12:44:10Z", "author": {"login": "dianfu"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHthhtAH2gAyMzc5NDI5OTcyOjQyZTE2MWUzMmRhYjlmZjNjMWNhNTY3ZWFiMjIzNmM0NzYyM2UwNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIu-M5gH2gAyMzc5NDI5OTcyOjhkZGM2MWI2ODhkYmFiODY5MmU0MTAwNzdhYjZhNzQxYWM0ZjY2NGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/42e161e32dab9ff3c1ca567eab2236c47623e06c", "committedDate": "2020-02-25T08:05:54Z", "message": "[FLINK-16271][python] Introduce ArrowPythonScalarFunctionOperator for vectorized Python UDF execution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NjE1Nzk3", "url": "https://github.com/apache/flink/pull/11208#pullrequestreview-365615797", "createdAt": "2020-02-27T11:44:49Z", "commit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NDo0OVrOFvPLOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo0NDoyOFrOFvSr_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NjAyNQ==", "bodyText": "Maybe add some descriptions about the difference between bundle size and arrow batch size? For example, arrow batch size should be smaller than bundle size.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385076025", "createdAt": "2020-02-27T11:44:49Z", "author": {"login": "hequn8128"}, "path": "docs/_includes/generated/python_configuration.html", "diffHunk": "@@ -8,6 +8,12 @@\n         </tr>\n     </thead>\n     <tbody>\n+        <tr>\n+            <td><h5>python.fn-execution.arrow.batch.size</h5></td>\n+            <td style=\"word-wrap: break-word;\">1000</td>\n+            <td>Integer</td>\n+            <td>The maximum number of elements to include in an arrow batch for Python user-defined function execution.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NjMzNg==", "bodyText": "Can be in one line. Same for other places.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385076336", "createdAt": "2020-02-27T11:45:33Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<Row> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\tpublic ArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjY5MQ==", "bodyText": "Can we move this line into the open method?", "url": "https://github.com/apache/flink/pull/11208#discussion_r385102691", "createdAt": "2020-02-27T12:44:09Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.dataformat.JoinedRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\t/**\n+\t * The JoinedRow reused holding the execution result.\n+\t */\n+\tprivate transient JoinedRow reuseJoinedRow;\n+\n+\tpublic BaseRowArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);\n+\t\treader = new ArrowStreamReader(bais, allocator);\n+\t\treuseJoinedRow = new JoinedRow();\n+\t}\n+\n+\t@Override\n+\tpublic void close() throws Exception {\n+\t\ttry {\n+\t\t\tsuper.close();\n+\t\t} finally {\n+\t\t\treader.close();\n+\t\t\tallocator.close();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic PythonFunctionRunner<BaseRow> createPythonFunctionRunner(\n+\t\tFnDataReceiver<byte[]> resultReceiver,\n+\t\tPythonEnvironmentManager pythonEnvironmentManager) {\n+\t\treturn new BaseRowArrowPythonScalarFunctionRunner(\n+\t\t\tgetRuntimeContext().getTaskName(),\n+\t\t\tresultReceiver,\n+\t\t\tscalarFunctions,\n+\t\t\tpythonEnvironmentManager,\n+\t\t\tuserDefinedFunctionInputType,\n+\t\t\tuserDefinedFunctionOutputType,\n+\t\t\tgetPythonConfig().getMaxArrowBatchSize());\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"ConstantConditions\")\n+\tpublic void emitResults() throws IOException {\n+\t\tbyte[] udfResult;\n+\t\twhile ((udfResult = userDefinedFunctionResultQueue.poll()) != null) {\n+\t\t\tbais.setBuffer(udfResult, 0, udfResult.length);\n+\t\t\treader.loadNextBatch();\n+\t\t\tVectorSchemaRoot root = reader.getVectorSchemaRoot();\n+\t\t\tif (arrowReader == null) {\n+\t\t\t\tarrowReader = ArrowUtils.createBaseRowArrowReader(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzExNw==", "bodyText": "This member can be put into the parent class.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385107117", "createdAt": "2020-02-27T12:53:27Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.dataformat.JoinedRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\t/**\n+\t * The JoinedRow reused holding the execution result.\n+\t */\n+\tprivate transient JoinedRow reuseJoinedRow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODEwNA==", "bodyText": "It seems it's better to add a base class for the arrow operator, similar to the runner class structure. More code could be reused. For example, most code in ArrowPythonScalarFunctionOperator and BaseRowArrowPythonScalarFunctionOperator could be reused.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385118104", "createdAt": "2020-02-27T13:15:53Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzMzU2NA==", "bodyText": "I'm wondering if we can create a CommonPassThroughScalarFunctionRunner<IN> that can be used for both arrow and non-arrow, both row and baserow, so that we don't need so many duplicated classes.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385133564", "createdAt": "2020-02-27T13:44:28Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/test/java/org/apache/flink/table/runtime/utils/PassThroughArrowPythonScalarFunctionRunner.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.utils;\n+\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.beam.runners.fnexecution.control.JobBundleFactory;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+import org.apache.beam.vendor.grpc.v1p21p0.com.google.protobuf.Struct;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.utils.PythonTestUtils.createMockJobBundleFactory;\n+\n+/**\n+ * An {@link ArrowPythonScalarFunctionRunner} that just return the input elements as the execution results.\n+ */\n+public class PassThroughArrowPythonScalarFunctionRunner extends ArrowPythonScalarFunctionRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2457edcc5d060582b0033741320daa63dff68b0e", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/2457edcc5d060582b0033741320daa63dff68b0e", "committedDate": "2020-02-28T02:16:44Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/31226c452d50eb216796a3c1b963f047bb2c5698", "committedDate": "2020-02-28T04:11:33Z", "message": "minor update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MjEzMjE2", "url": "https://github.com/apache/flink/pull/11208#pullrequestreview-366213216", "createdAt": "2020-02-28T07:57:14Z", "commit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1NzoxNFrOFvsRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNTo0OVrOFvscsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MjY5Mw==", "bodyText": "one line", "url": "https://github.com/apache/flink/pull/11208#discussion_r385552693", "createdAt": "2020-02-28T07:57:14Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\tpublic BaseRowArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MjkzNg==", "bodyText": "In one line?", "url": "https://github.com/apache/flink/pull/11208#discussion_r385552936", "createdAt": "2020-02-28T07:57:53Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<Row> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\tpublic ArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTYzMg==", "bodyText": "Rebuild the doc.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385555632", "createdAt": "2020-02-28T08:05:49Z", "author": {"login": "hequn8128"}, "path": "docs/_includes/generated/python_configuration.html", "diffHunk": "@@ -8,6 +8,12 @@\n         </tr>\n     </thead>\n     <tbody>\n+        <tr>\n+            <td><h5>python.fn-execution.arrow.batch.size</h5></td>\n+            <td style=\"word-wrap: break-word;\">1000</td>\n+            <td>Integer</td>\n+            <td>The maximum number of elements to include in an arrow batch for Python user-defined function execution.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ddc61b688dbab8692e410077ab6a741ac4f664f", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/8ddc61b688dbab8692e410077ab6a741ac4f664f", "committedDate": "2020-02-28T12:21:03Z", "message": "fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4192, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}