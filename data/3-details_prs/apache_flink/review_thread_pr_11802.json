{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjkzMzU3", "number": 11802, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTowNTo0NVrODzA4zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1Mzo1MlrODzxN1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODE4NTA4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTowNTo0NVrOGHZ1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxOTowNTo0NVrOGHZ1bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQxNjQ5NA==", "bodyText": "allows avoiding initializeState() which requires a lot of setup", "url": "https://github.com/apache/flink/pull/11802#discussion_r410416494", "createdAt": "2020-04-17T19:05:45Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "diffHunk": "@@ -202,15 +212,15 @@ public void onNoMoreData(ContinuousFileReaderOperator<?> op) {\n \t * MUST only be changed via {@link #switchState(ReaderState) switchState}.\n \t */\n \tprivate transient ReaderState state = ReaderState.IDLE;\n-\tprivate transient PriorityQueue<TimestampedFileInputSplit> splits;\n+\tprivate transient PriorityQueue<TimestampedFileInputSplit> splits = new PriorityQueue<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f63e9f1b9f77c0b16ce16a743de535333ba7fff"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA1OTg4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0NTo0NVrOGIYKVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTo1NDoxMVrOGIbgWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzY1NQ==", "bodyText": "Why have you created a separate class to add this unit test? There is already a similar test org.apache.flink.hdfstests.ContinuousFileProcessingTest#testExceptionHandling so definitely those two should be together.\nA good questions is why is the test for a class ContinuousFileReaderOperator named ContinuousFileProcessingTest but I guess that's a story for another time. (I would be +1 for renaming all ContinuousFileProcessing*** classes to ContinuousFileReaderOperator***)", "url": "https://github.com/apache/flink/pull/11802#discussion_r411437655", "createdAt": "2020-04-20T14:45:45Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.StreamTaskActionExecutor;\n+import org.apache.flink.streaming.runtime.tasks.TestProcessingTimeService;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.Mail;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.MailboxExecutorImpl;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.TaskMailboxImpl;\n+\n+import org.junit.Test;\n+\n+/**\n+ * {@link ContinuousFileReaderOperator} test.\n+ */\n+public class ContinuousFileReaderOperatorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ4MTM1Ng==", "bodyText": "I added a unit test while ContinuousFileProcessingTest is an integration test. And it also resides in a different project (because of Hadoop dependencies).", "url": "https://github.com/apache/flink/pull/11802#discussion_r411481356", "createdAt": "2020-04-20T15:40:07Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.StreamTaskActionExecutor;\n+import org.apache.flink.streaming.runtime.tasks.TestProcessingTimeService;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.Mail;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.MailboxExecutorImpl;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.TaskMailboxImpl;\n+\n+import org.junit.Test;\n+\n+/**\n+ * {@link ContinuousFileReaderOperator} test.\n+ */\n+public class ContinuousFileReaderOperatorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzY1NQ=="}, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MjQ0Mw==", "bodyText": "Hmmm, ok I see. I missed that it's in a different package. I think I would still slightly prefer to keep the tests together in the ContinuousFileProcessingTest class, and in the long run someone should reimplement those tests without relaying on Hadoop.\nBut if you would like to keep the unit tests closer to the actual class without doing/waiting for the refactor, in that case please also move ContinuousFileProcessingTest#testExceptionHandling to the new ContinuousFileReaderOperatorTest class.", "url": "https://github.com/apache/flink/pull/11802#discussion_r411492443", "createdAt": "2020-04-20T15:54:11Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.StreamTaskActionExecutor;\n+import org.apache.flink.streaming.runtime.tasks.TestProcessingTimeService;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.Mail;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.MailboxExecutorImpl;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.TaskMailboxImpl;\n+\n+import org.junit.Test;\n+\n+/**\n+ * {@link ContinuousFileReaderOperator} test.\n+ */\n+public class ContinuousFileReaderOperatorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNzY1NQ=="}, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjA5NjIwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1MjozN1rOGIYgLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoxMDoyMVrOGIcSeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzI0NQ==", "bodyText": "This test is violating the operator's contract here, by not calling open() and initializeState() methods. As it is know, it relays on the private implementation detail that those method are not doing anything important for this particular test case. It could lead to false positive errors if someone would add some valid logic to the ContinuousFileReaderOperator#processElement(), which would (legally) relay on any logic being done in those two methods.\nCouldn't you re-use pattern from org.apache.flink.hdfstests.ContinuousFileProcessingTest#testExceptionHandling?", "url": "https://github.com/apache/flink/pull/11802#discussion_r411443245", "createdAt": "2020-04-20T14:52:37Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.StreamTaskActionExecutor;\n+import org.apache.flink.streaming.runtime.tasks.TestProcessingTimeService;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.Mail;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.MailboxExecutorImpl;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.TaskMailboxImpl;\n+\n+import org.junit.Test;\n+\n+/**\n+ * {@link ContinuousFileReaderOperator} test.\n+ */\n+public class ContinuousFileReaderOperatorTest {\n+\n+\t@Test(expected = TestException.class)\n+\tpublic void testExceptionRethrown() throws Exception {\n+\t\tfinal TaskMailboxImpl mailbox = new TaskMailboxImpl();\n+\t\tfinal ContinuousFileReaderOperator<String> op = new ContinuousFileReaderOperator<>(\n+\t\t\t\tfailingFormat(),\n+\t\t\t\tnew TestProcessingTimeService(),\n+\t\t\t\tnew MailboxExecutorImpl(mailbox, 0, StreamTaskActionExecutor.IMMEDIATE)\n+\t\t);\n+\t\top.processElement(new StreamRecord<>(new TimestampedFileInputSplit(0L, 1, new Path(), 0L, 0L, new String[]{})));\n+\t\tfor (Mail m : mailbox.drain()) {\n+\t\t\tm.run();\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTI3Mw==", "bodyText": "I agree about open() and initially I did provide no-op implementations of contexts and states.\nBut it piled up to just too much boilerplate so I opted for the risk of false-positives.\nHowever, I don't have a strong preference so I'll use the harness (which I also consider as a boilerplate).", "url": "https://github.com/apache/flink/pull/11802#discussion_r411505273", "createdAt": "2020-04-20T16:10:21Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperatorTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.StreamTaskActionExecutor;\n+import org.apache.flink.streaming.runtime.tasks.TestProcessingTimeService;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.Mail;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.MailboxExecutorImpl;\n+import org.apache.flink.streaming.runtime.tasks.mailbox.TaskMailboxImpl;\n+\n+import org.junit.Test;\n+\n+/**\n+ * {@link ContinuousFileReaderOperator} test.\n+ */\n+public class ContinuousFileReaderOperatorTest {\n+\n+\t@Test(expected = TestException.class)\n+\tpublic void testExceptionRethrown() throws Exception {\n+\t\tfinal TaskMailboxImpl mailbox = new TaskMailboxImpl();\n+\t\tfinal ContinuousFileReaderOperator<String> op = new ContinuousFileReaderOperator<>(\n+\t\t\t\tfailingFormat(),\n+\t\t\t\tnew TestProcessingTimeService(),\n+\t\t\t\tnew MailboxExecutorImpl(mailbox, 0, StreamTaskActionExecutor.IMMEDIATE)\n+\t\t);\n+\t\top.processElement(new StreamRecord<>(new TimestampedFileInputSplit(0L, 1, new Path(), 0L, 0L, new String[]{})));\n+\t\tfor (Mail m : mailbox.drain()) {\n+\t\t\tm.run();\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0MzI0NQ=="}, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjEwMzI0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1Mzo1MlrOGIYkYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjoyNzoyNlrOGIdDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NDMyMg==", "bodyText": "nit: POSSIBLE_TRANSITIONS ?", "url": "https://github.com/apache/flink/pull/11802#discussion_r411444322", "createdAt": "2020-04-20T14:53:52Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "diffHunk": "@@ -160,10 +169,11 @@ public boolean prepareToProcessRecord(ContinuousFileReaderOperator<?> op) {\n \t\tprivate static final Map<ReaderState, Set<ReaderState>> TRANSITIONS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjIyNg==", "bodyText": "How about VALID_TRANSITIONS ?", "url": "https://github.com/apache/flink/pull/11802#discussion_r411506226", "createdAt": "2020-04-20T16:11:36Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "diffHunk": "@@ -160,10 +169,11 @@ public boolean prepareToProcessRecord(ContinuousFileReaderOperator<?> op) {\n \t\tprivate static final Map<ReaderState, Set<ReaderState>> TRANSITIONS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NDMyMg=="}, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNzg3OA==", "bodyText": "Even better :) (this rename should be a separate commit for this PR, so it's not mixing with the bug fix)", "url": "https://github.com/apache/flink/pull/11802#discussion_r411517878", "createdAt": "2020-04-20T16:27:26Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/ContinuousFileReaderOperator.java", "diffHunk": "@@ -160,10 +169,11 @@ public boolean prepareToProcessRecord(ContinuousFileReaderOperator<?> op) {\n \t\tprivate static final Map<ReaderState, Set<ReaderState>> TRANSITIONS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NDMyMg=="}, "originalCommit": {"oid": "b3a5ba58720be5eee04eb2b13cd265ed24144a90"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1670, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}