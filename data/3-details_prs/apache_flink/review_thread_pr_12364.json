{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTg2MTM3", "number": 12364, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNzozOVrOEAXxOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNzozOVrOEAXxOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODI0ODkwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNzozOVrOGbm15g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzozNjo1N1rOGbpKDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMTEyNg==", "bodyText": "add an additional\nstream.write(new byte[10]);\n\ncall to also check the other write method for the flushing problem?", "url": "https://github.com/apache/flink/pull/12364#discussion_r431601126", "createdAt": "2020-05-28T06:07:39Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java", "diffHunk": "@@ -57,6 +57,23 @@ public void createStateDirectories() throws IOException {\n \t//  tests\n \t// ------------------------------------------------------------------------\n \n+\t@Test\n+\t@SuppressWarnings(\"ConstantConditions\")\n+\tpublic void testWriteFlushesIfAboveThreshold() throws IOException {\n+\t\tint fileSizeThreshold = 100;\n+\t\tfinal FsCheckpointStreamFactory factory = createFactory(FileSystem.getLocalFileSystem(), fileSizeThreshold, fileSizeThreshold);\n+\t\tfinal FsCheckpointStreamFactory.FsCheckpointStateOutputStream stream = factory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE);\n+\t\tstream.write(new byte[fileSizeThreshold]);\n+\t\tFile[] files = new File(exclusiveStateDir.toUri()).listFiles();\n+\t\tassertEquals(1, files.length);\n+\t\tFile file = files[0];\n+\t\tassertEquals(fileSizeThreshold, file.length());\n+\t\tfor (int i = 0; i < fileSizeThreshold; i++) {\n+\t\t\tstream.write(127); // should buffer without flushing\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6eef6ad43c519d62837d4e22246a4090a1aa1bd8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzOTA1Mg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/12364#discussion_r431639052", "createdAt": "2020-05-28T07:36:57Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java", "diffHunk": "@@ -57,6 +57,23 @@ public void createStateDirectories() throws IOException {\n \t//  tests\n \t// ------------------------------------------------------------------------\n \n+\t@Test\n+\t@SuppressWarnings(\"ConstantConditions\")\n+\tpublic void testWriteFlushesIfAboveThreshold() throws IOException {\n+\t\tint fileSizeThreshold = 100;\n+\t\tfinal FsCheckpointStreamFactory factory = createFactory(FileSystem.getLocalFileSystem(), fileSizeThreshold, fileSizeThreshold);\n+\t\tfinal FsCheckpointStreamFactory.FsCheckpointStateOutputStream stream = factory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE);\n+\t\tstream.write(new byte[fileSizeThreshold]);\n+\t\tFile[] files = new File(exclusiveStateDir.toUri()).listFiles();\n+\t\tassertEquals(1, files.length);\n+\t\tFile file = files[0];\n+\t\tassertEquals(fileSizeThreshold, file.length());\n+\t\tfor (int i = 0; i < fileSizeThreshold; i++) {\n+\t\t\tstream.write(127); // should buffer without flushing\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMTEyNg=="}, "originalCommit": {"oid": "6eef6ad43c519d62837d4e22246a4090a1aa1bd8"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4477, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}