{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNDQxMzQz", "number": 11961, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0NDo1OVrOD5Tvng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyNTowNVrOD5V3Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDE4OTEwOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0NDo1OVrOGQf56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0NDo1OVrOGQf56A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1MzEyOA==", "bodyText": "\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d \u8fd9\u53e5\u8bdd\u8bfb\u8d77\u6765\u4e0d\u592a\u901a\u987a\n\u63d0\u4ea4\u7ed9\u96c6\u7fa4 \u662f\u4e0d\u662f\u6539\u6210 \u63d0\u4ea4\u5230\u96c6\u7fa4 \u4f1a\u597d\u4e00\u70b9", "url": "https://github.com/apache/flink/pull/11961#discussion_r419953128", "createdAt": "2020-05-05T08:44:59Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDE5NjM2OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0NzowM1rOGQf-bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo0NzowM1rOGQf-bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1NDI4Ng==", "bodyText": "\u65e0\u9700\u7528\u4e00\u884c \u6539\u6210 \u65e0\u9700\u5199\u4e00\u884c \u6216\u8005\u5176\u4ed6\u7684\u662f\u4e0d\u662f\u4f1a\u597d\u4e00\u4e9b\u5462", "url": "https://github.com/apache/flink/pull/11961#discussion_r419954286", "createdAt": "2020-05-05T08:47:03Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDIyMjI5OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1NDoyNFrOGQgOfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1NDoyNFrOGQgOfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk1ODM5Ng==", "bodyText": "\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7 \u8fd9\u4e2a\u662f\u4e0d\u662f\u6539\u6210 \u4e0d\u662f\u751f\u4ea7\u53ef\u7528\u7684 \u4e4b\u7c7b\u7684\u66f4\u597d\u4e00\u70b9\uff1f\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n          \n          \n            \n            <span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684 [SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r419958396", "createdAt": "2020-05-05T08:54:24Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDIzNTM4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1Nzo0OVrOGQgWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1Nzo0OVrOGQgWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MDQ0MA==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9 setup \u7ffb\u8bd1\u6210 \u542f\u52a8 \u4f60\u89c9\u5f97\u600e\u4e48\u6837", "url": "https://github.com/apache/flink/pull/11961#discussion_r419960440", "createdAt": "2020-05-05T08:57:49Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI0Mjg4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1OTo0MlrOGQgbDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwODo1OTo0MlrOGQgbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MTYxMw==", "bodyText": "\u8fd9\u91cc\u7684 binary directory \u7ffb\u8bd1\u6210 '\u4e8c\u8fdb\u5236\u76ee\u5f55\u2018 \u611f\u89c9\u602a\u602a\u7684\uff0c\u8fd9\u91cc\u5e94\u8be5\u662f\u6307\u6700\u7ec8\u7684 bin \u76ee\u5f55", "url": "https://github.com/apache/flink/pull/11961#discussion_r419961613", "createdAt": "2020-05-05T08:59:42Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI1MDgzOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowMTo1OVrOGQggJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowMTo1OVrOGQggJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MjkxOQ==", "bodyText": "\"\u76ee\u524d\u4ec5 embedded \u652f\u6301\u8be5\u6a21\u5f0f\" -> \"\u76ee\u524d\u4ec5\u652f\u6301 embedded \u7684\u6a21\u5f0f\"?", "url": "https://github.com/apache/flink/pull/11961#discussion_r419962919", "createdAt": "2020-05-05T09:01:59Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI1MzU5OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowMjo1MlrOGQgh_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowMjo1MlrOGQgh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2MzM4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u5176\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002\n          \n          \n            \n            \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r419963389", "createdAt": "2020-05-05T09:02:52Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a\n \n {% highlight bash %}\n ./bin/sql-client.sh embedded\n {% endhighlight %}\n \n-By default, the SQL Client will read its configuration from the environment file located in `./conf/sql-client-defaults.yaml`. See the [configuration part](sqlClient.html#environment-files) for more information about the structure of environment files.\n+\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u5176\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI2NjUyOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTowNjo0N1rOGQgqRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzowNzoxOVrOGQzNBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NTUwOQ==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u6539\u6210 \u201dCLI \u63d0\u4f9b\u4e24\u79cd XXX \u6a21\u5f0f\u201c \u4f1a\u66f4\u597d\u4e00\u4e9b\u5417\uff1f", "url": "https://github.com/apache/flink/pull/11961#discussion_r419965509", "createdAt": "2020-05-05T09:06:47Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a\n \n {% highlight bash %}\n ./bin/sql-client.sh embedded\n {% endhighlight %}\n \n-By default, the SQL Client will read its configuration from the environment file located in `./conf/sql-client-defaults.yaml`. See the [configuration part](sqlClient.html#environment-files) for more information about the structure of environment files.\n+\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u5176\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002\n \n-### Running SQL Queries\n+### \u6267\u884c SQL \u67e5\u8be2\n \n-Once the CLI has been started, you can use the `HELP` command to list all available SQL statements. For validating your setup and cluster connection, you can enter your first SQL query and press the `Enter` key to execute it:\n+\u547d\u4ee4\u884c\u754c\u9762\u542f\u52a8\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `HELP` \u547d\u4ee4\u5217\u51fa\u6240\u6709\u53ef\u7528\u7684 SQL \u8bed\u53e5\u3002\u8f93\u5165\u7b2c\u4e00\u6761 SQL \u67e5\u8be2\u8bed\u53e5\u5e76\u6309 `Enter` \u952e\u6267\u884c\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u4f60\u7684\u8bbe\u7f6e\u53ca\u96c6\u7fa4\u8fde\u63a5\u662f\u5426\u6b63\u786e\uff1a\n \n {% highlight sql %}\n SELECT 'Hello World';\n {% endhighlight %}\n \n-This query requires no table source and produces a single row result. The CLI will retrieve results from the cluster and visualize them. You can close the result view by pressing the `Q` key.\n+\u8be5\u67e5\u8be2\u4e0d\u9700\u8981 table source\uff0c\u5e76\u4e14\u53ea\u4ea7\u751f\u4e00\u884c\u7ed3\u679c\u3002CLI \u5c06\u4ece\u96c6\u7fa4\u4e2d\u68c0\u7d22\u7ed3\u679c\u5e76\u5c06\u5176\u53ef\u89c6\u5316\u3002\u6309 `Q` \u952e\u9000\u51fa\u7ed3\u679c\u89c6\u56fe\u3002\n \n-The CLI supports **two modes** for maintaining and visualizing results.\n+CLI \u4e3a\u7ef4\u62a4\u548c\u53ef\u89c6\u5316\u7ed3\u679c\u63d0\u4f9b**\u4e24\u79cd\u6a21\u5f0f**\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2OTMxNw==", "bodyText": "\u6539\u4e86\u7684\u8bdd\uff0c\u201c\u4e24\u79cd\u6a21\u5f0f\u201d\u5b57\u4f53\u4e0d\u597d\u52a0\u7c97\u554a\uff5e\u3002\u53e6\u5916\u53ef\u80fd\u662f\u4e2a\u4eba\u4e60\u60ef\u4e0d\u540c\uff0c\u6211\u89c9\u5f97\u4e24\u79cd\u8bf4\u6cd5\u90fd\u884c\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r420269317", "createdAt": "2020-05-05T17:07:19Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a\n \n {% highlight bash %}\n ./bin/sql-client.sh embedded\n {% endhighlight %}\n \n-By default, the SQL Client will read its configuration from the environment file located in `./conf/sql-client-defaults.yaml`. See the [configuration part](sqlClient.html#environment-files) for more information about the structure of environment files.\n+\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u5176\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002\n \n-### Running SQL Queries\n+### \u6267\u884c SQL \u67e5\u8be2\n \n-Once the CLI has been started, you can use the `HELP` command to list all available SQL statements. For validating your setup and cluster connection, you can enter your first SQL query and press the `Enter` key to execute it:\n+\u547d\u4ee4\u884c\u754c\u9762\u542f\u52a8\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `HELP` \u547d\u4ee4\u5217\u51fa\u6240\u6709\u53ef\u7528\u7684 SQL \u8bed\u53e5\u3002\u8f93\u5165\u7b2c\u4e00\u6761 SQL \u67e5\u8be2\u8bed\u53e5\u5e76\u6309 `Enter` \u952e\u6267\u884c\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u4f60\u7684\u8bbe\u7f6e\u53ca\u96c6\u7fa4\u8fde\u63a5\u662f\u5426\u6b63\u786e\uff1a\n \n {% highlight sql %}\n SELECT 'Hello World';\n {% endhighlight %}\n \n-This query requires no table source and produces a single row result. The CLI will retrieve results from the cluster and visualize them. You can close the result view by pressing the `Q` key.\n+\u8be5\u67e5\u8be2\u4e0d\u9700\u8981 table source\uff0c\u5e76\u4e14\u53ea\u4ea7\u751f\u4e00\u884c\u7ed3\u679c\u3002CLI \u5c06\u4ece\u96c6\u7fa4\u4e2d\u68c0\u7d22\u7ed3\u679c\u5e76\u5c06\u5176\u53ef\u89c6\u5316\u3002\u6309 `Q` \u952e\u9000\u51fa\u7ed3\u679c\u89c6\u56fe\u3002\n \n-The CLI supports **two modes** for maintaining and visualizing results.\n+CLI \u4e3a\u7ef4\u62a4\u548c\u53ef\u89c6\u5316\u7ed3\u679c\u63d0\u4f9b**\u4e24\u79cd\u6a21\u5f0f**\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2NTUwOQ=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDI5MDA1OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToxMzo0MVrOGQg4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzoxMDo1NVrOGQzV0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2OTI3NQ==", "bodyText": "\u4e0d\u786e\u5b9a\u8fd9\u4e2a\u5730\u65b9\u662f\u4e0d\u662f\u6709\u6bd4 \u201d\u5b9e\u4f53\u5316\u7ed3\u679c\u201c \u66f4\u597d\u7684\u7ffb\u8bd1", "url": "https://github.com/apache/flink/pull/11961#discussion_r419969275", "createdAt": "2020-05-05T09:13:41Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a\n \n {% highlight bash %}\n ./bin/sql-client.sh embedded\n {% endhighlight %}\n \n-By default, the SQL Client will read its configuration from the environment file located in `./conf/sql-client-defaults.yaml`. See the [configuration part](sqlClient.html#environment-files) for more information about the structure of environment files.\n+\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u5176\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002\n \n-### Running SQL Queries\n+### \u6267\u884c SQL \u67e5\u8be2\n \n-Once the CLI has been started, you can use the `HELP` command to list all available SQL statements. For validating your setup and cluster connection, you can enter your first SQL query and press the `Enter` key to execute it:\n+\u547d\u4ee4\u884c\u754c\u9762\u542f\u52a8\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `HELP` \u547d\u4ee4\u5217\u51fa\u6240\u6709\u53ef\u7528\u7684 SQL \u8bed\u53e5\u3002\u8f93\u5165\u7b2c\u4e00\u6761 SQL \u67e5\u8be2\u8bed\u53e5\u5e76\u6309 `Enter` \u952e\u6267\u884c\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u4f60\u7684\u8bbe\u7f6e\u53ca\u96c6\u7fa4\u8fde\u63a5\u662f\u5426\u6b63\u786e\uff1a\n \n {% highlight sql %}\n SELECT 'Hello World';\n {% endhighlight %}\n \n-This query requires no table source and produces a single row result. The CLI will retrieve results from the cluster and visualize them. You can close the result view by pressing the `Q` key.\n+\u8be5\u67e5\u8be2\u4e0d\u9700\u8981 table source\uff0c\u5e76\u4e14\u53ea\u4ea7\u751f\u4e00\u884c\u7ed3\u679c\u3002CLI \u5c06\u4ece\u96c6\u7fa4\u4e2d\u68c0\u7d22\u7ed3\u679c\u5e76\u5c06\u5176\u53ef\u89c6\u5316\u3002\u6309 `Q` \u952e\u9000\u51fa\u7ed3\u679c\u89c6\u56fe\u3002\n \n-The CLI supports **two modes** for maintaining and visualizing results.\n+CLI \u4e3a\u7ef4\u62a4\u548c\u53ef\u89c6\u5316\u7ed3\u679c\u63d0\u4f9b**\u4e24\u79cd\u6a21\u5f0f**\u3002\n \n-The **table mode** materializes results in memory and visualizes them in a regular, paginated table representation. It can be enabled by executing the following command in the CLI:\n+**\u8868\u683c\u6a21\u5f0f**\uff08table mode\uff09\u5728\u5185\u5b58\u4e2d\u5b9e\u4f53\u5316\u7ed3\u679c\uff0c\u5e76\u5c06\u7ed3\u679c\u7528\u89c4\u5219\u7684\u5206\u9875\u8868\u683c\u53ef\u89c6\u5316\u5c55\u793a\u51fa\u6765\u3002\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u542f\u7528\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MTU3MQ==", "bodyText": "\u6709\u60f3\u8fc7\u201c\u5b9e\u4f8b\u5316\u7ed3\u679c\u201d\uff0c\u4f46\u662f\u6211\u4e5f\u4e0d\u662f\u5f88\u786e\u5b9a\u6709\u6ca1\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\uff0c\u53ea\u5f97\u6682\u65f6\u7528\u201c\u5b9e\u4f53\u5316\u7ed3\u679c\u201d\u3002:(", "url": "https://github.com/apache/flink/pull/11961#discussion_r420271571", "createdAt": "2020-05-05T17:10:55Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -23,72 +23,71 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n+Flink \u7684 Table & SQL API \u53ef\u4ee5\u5904\u7406 SQL \u8bed\u8a00\u7f16\u5199\u7684\u67e5\u8be2\u8bed\u53e5\uff0c\u4f46\u662f\u8fd9\u4e9b\u67e5\u8be2\u9700\u8981\u5d4c\u5165\u7528 Java \u6216 Scala \u7f16\u5199\u7684\u8868\u7a0b\u5e8f\u4e2d\u3002\u6b64\u5916\uff0c\u8fd9\u4e9b\u7a0b\u5e8f\u5728\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u524d\u9700\u8981\u7528\u6784\u5efa\u5de5\u5177\u6253\u5305\u3002\u8fd9\u6216\u591a\u6216\u5c11\u9650\u5236\u4e86 Java/Scala \u7a0b\u5e8f\u5458\u5bf9 Flink \u7684\u4f7f\u7528\u3002\n \n-Flink\u2019s Table & SQL API makes it possible to work with queries written in the SQL language, but these queries need to be embedded within a table program that is written in either Java or Scala. Moreover, these programs need to be packaged with a build tool before being submitted to a cluster. This more or less limits the usage of Flink to Java/Scala programmers.\n-\n-The *SQL Client* aims to provide an easy way of writing, debugging, and submitting table programs to a Flink cluster without a single line of Java or Scala code. The *SQL Client CLI* allows for retrieving and visualizing real-time results from the running distributed application on the command line.\n+*SQL \u5ba2\u6237\u7aef* \u7684\u76ee\u7684\u662f\u63d0\u4f9b\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u5f0f\u6765\u7f16\u5199\u3001\u8c03\u8bd5\u548c\u63d0\u4ea4\u8868\u7a0b\u5e8f\u5230 Flink \u96c6\u7fa4\u4e0a\uff0c\u800c\u65e0\u9700\u7528\u4e00\u884c Java \u6216 Scala \u4ee3\u7801\u3002*SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\uff08CLI\uff09* \u80fd\u591f\u5728\u547d\u4ee4\u884c\u4e2d\u68c0\u7d22\u548c\u53ef\u89c6\u5316\u5206\u5e03\u5f0f\u5e94\u7528\u4e2d\u5b9e\u65f6\u4ea7\u751f\u7684\u7ed3\u679c\u3002\n \n <a href=\"{{ site.baseurl }}/fig/sql_client_demo.gif\"><img class=\"offset\" src=\"{{ site.baseurl }}/fig/sql_client_demo.gif\" alt=\"Animated demo of the Flink SQL Client CLI running table programs on a cluster\" width=\"80%\" /></a>\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client is in an early development phase. Even though the application is not production-ready yet, it can be a quite useful tool for prototyping and playing around with Flink SQL. In the future, the community plans to extend its functionality by providing a REST-based [SQL Client Gateway](sqlClient.html#limitations--future).\n+<span class=\"label label-danger\">\u6ce8\u610f</span> SQL \u5ba2\u6237\u7aef\u6b63\u5904\u4e8e\u65e9\u671f\u5f00\u53d1\u9636\u6bb5\u3002\u867d\u7136\u8fd8\u5c1a\u672a\u6295\u5165\u751f\u4ea7\uff0c\u4f46\u662f\u5b83\u5bf9\u4e8e\u539f\u578b\u8bbe\u8ba1\u548c\u73a9\u8f6c Flink SQL \u8fd8\u662f\u5f88\u5b9e\u7528\u7684\u5de5\u5177\u3002\u5c06\u6765\uff0c\u793e\u533a\u8ba1\u5212\u901a\u8fc7\u63d0\u4f9b\u57fa\u4e8e REST \u7684[SQL \u5ba2\u6237\u7aef\u7f51\u5173\uff08Gateway\uff09](sqlClient.html#limitations--future)\u7684\u6765\u6269\u5c55\u5b83\u7684\u529f\u80fd\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-Getting Started\n+\u5165\u95e8\n ---------------\n \n-This section describes how to setup and run your first Flink SQL program from the command-line.\n+\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u5728\u547d\u4ee4\u884c\u91cc\u8bbe\u7f6e\uff08setup\uff09\u548c\u8fd0\u884c\u4f60\u7684\u7b2c\u4e00\u4e2a Flink SQL \u7a0b\u5e8f\u3002\n \n-The SQL Client is bundled in the regular Flink distribution and thus runnable out-of-the-box. It requires only a running Flink cluster where table programs can be executed. For more information about setting up a Flink cluster see the [Cluster & Deployment]({{ site.baseurl }}/ops/deployment/cluster_setup.html) part. If you simply want to try out the SQL Client, you can also start a local cluster with one worker using the following command:\n+SQL \u5ba2\u6237\u7aef\u6346\u7ed1\u5728\u5e38\u89c4 Flink \u53d1\u884c\u7248\u4e2d\uff0c\u56e0\u6b64\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c\u3002\u5b83\u4ec5\u9700\u8981\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u96c6\u7fa4\u5c31\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u8868\u7a0b\u5e8f\u3002\u6709\u5173\u8bbe\u7f6e Flink \u7fa4\u96c6\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u96c6\u7fa4\u548c\u90e8\u7f72]({{ site.baseurl }}/zh/ops/deployment/cluster_setup.html)\u90e8\u5206\u3002\u5982\u679c\u4ec5\u60f3\u8bd5\u7528 SQL \u5ba2\u6237\u7aef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8\u672c\u5730\u96c6\u7fa4\uff1a\n \n {% highlight bash %}\n ./bin/start-cluster.sh\n {% endhighlight %}\n \n-### Starting the SQL Client CLI\n+### \u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\n \n-The SQL Client scripts are also located in the binary directory of Flink. [In the future](sqlClient.html#limitations--future), a user will have two possibilities of starting the SQL Client CLI either by starting an embedded standalone process or by connecting to a remote SQL Client Gateway. At the moment only the `embedded` mode is supported. You can start the CLI by calling:\n+SQL Client \u811a\u672c\u4e5f\u4f4d\u4e8e Flink \u7684\u4e8c\u8fdb\u5236\u76ee\u5f55\u4e2d\u3002[\u5c06\u6765](sqlClient.html#limitations--future)\uff0c\u7528\u6237\u53ef\u4ee5\u901a\u8fc7\u542f\u52a8\u5d4c\u5165\u5f0f standalone \u8fdb\u7a0b\u6216\u901a\u8fc7\u8fde\u63a5\u5230\u8fdc\u7a0b SQL \u5ba2\u6237\u7aef\u7f51\u5173\u6765\u542f\u52a8 SQL \u5ba2\u6237\u7aef\u547d\u4ee4\u884c\u754c\u9762\u3002\u76ee\u524d\u4ec5 `embedded` \u652f\u6301\u8be5\u6a21\u5f0f\u3002\u60a8\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u542f\u52a8CLI\uff1a\n \n {% highlight bash %}\n ./bin/sql-client.sh embedded\n {% endhighlight %}\n \n-By default, the SQL Client will read its configuration from the environment file located in `./conf/sql-client-defaults.yaml`. See the [configuration part](sqlClient.html#environment-files) for more information about the structure of environment files.\n+\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQL \u5ba2\u6237\u7aef\u5c06\u4ece `./conf/sql-client-defaults.yaml` \u4e2d\u8bfb\u53d6\u5176\u914d\u7f6e\u3002\u6709\u5173\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u7ed3\u6784\u7684\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u53c2\u89c1[\u914d\u7f6e\u90e8\u5206](sqlClient.html#environment-files)\u3002\n \n-### Running SQL Queries\n+### \u6267\u884c SQL \u67e5\u8be2\n \n-Once the CLI has been started, you can use the `HELP` command to list all available SQL statements. For validating your setup and cluster connection, you can enter your first SQL query and press the `Enter` key to execute it:\n+\u547d\u4ee4\u884c\u754c\u9762\u542f\u52a8\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 `HELP` \u547d\u4ee4\u5217\u51fa\u6240\u6709\u53ef\u7528\u7684 SQL \u8bed\u53e5\u3002\u8f93\u5165\u7b2c\u4e00\u6761 SQL \u67e5\u8be2\u8bed\u53e5\u5e76\u6309 `Enter` \u952e\u6267\u884c\uff0c\u53ef\u4ee5\u9a8c\u8bc1\u4f60\u7684\u8bbe\u7f6e\u53ca\u96c6\u7fa4\u8fde\u63a5\u662f\u5426\u6b63\u786e\uff1a\n \n {% highlight sql %}\n SELECT 'Hello World';\n {% endhighlight %}\n \n-This query requires no table source and produces a single row result. The CLI will retrieve results from the cluster and visualize them. You can close the result view by pressing the `Q` key.\n+\u8be5\u67e5\u8be2\u4e0d\u9700\u8981 table source\uff0c\u5e76\u4e14\u53ea\u4ea7\u751f\u4e00\u884c\u7ed3\u679c\u3002CLI \u5c06\u4ece\u96c6\u7fa4\u4e2d\u68c0\u7d22\u7ed3\u679c\u5e76\u5c06\u5176\u53ef\u89c6\u5316\u3002\u6309 `Q` \u952e\u9000\u51fa\u7ed3\u679c\u89c6\u56fe\u3002\n \n-The CLI supports **two modes** for maintaining and visualizing results.\n+CLI \u4e3a\u7ef4\u62a4\u548c\u53ef\u89c6\u5316\u7ed3\u679c\u63d0\u4f9b**\u4e24\u79cd\u6a21\u5f0f**\u3002\n \n-The **table mode** materializes results in memory and visualizes them in a regular, paginated table representation. It can be enabled by executing the following command in the CLI:\n+**\u8868\u683c\u6a21\u5f0f**\uff08table mode\uff09\u5728\u5185\u5b58\u4e2d\u5b9e\u4f53\u5316\u7ed3\u679c\uff0c\u5e76\u5c06\u7ed3\u679c\u7528\u89c4\u5219\u7684\u5206\u9875\u8868\u683c\u53ef\u89c6\u5316\u5c55\u793a\u51fa\u6765\u3002\u6267\u884c\u5982\u4e0b\u547d\u4ee4\u542f\u7528\uff1a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk2OTI3NQ=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMwNDM2OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToxNzo0N1rOGQhBpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzoxNDowM1rOGQzdvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MTQ5Mw==", "bodyText": "\u4e0a\u9762\u5df2\u7ecf\u628a table \u6a21\u5f0f\u7ffb\u8bd1\u6210\u4e2d\u6587\uff0c\u8fd9\u91cc\u662f\u4e0d\u662f\u4e5f\u7ffb\u8bd1\u66f4\u597d\u4e00\u4e9b\u5462", "url": "https://github.com/apache/flink/pull/11961#discussion_r419971493", "createdAt": "2020-05-05T09:17:47Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3MzU5OA==", "bodyText": "I got it.", "url": "https://github.com/apache/flink/pull/11961#discussion_r420273598", "createdAt": "2020-05-05T17:14:03Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MTQ5Mw=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMxMDg0OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToxOTozNVrOGQhFcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToxOTozNVrOGQhFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MjQ2Ng==", "bodyText": "\u201d\u5b9a\u4e49\u67e5\u8be2\u4e4b\u540e\u201c \u6709\u66f4\u597d\u7684\u7ffb\u8bd1\u5417\uff1f", "url": "https://github.com/apache/flink/pull/11961#discussion_r419972466", "createdAt": "2020-05-05T09:19:35Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002\n \n-After a query is defined, it can be submitted to the cluster as a long-running, detached Flink job. For this, a target system that stores the results needs to be specified using the [INSERT INTO statement](sqlClient.html#detached-sql-queries). The [configuration section](sqlClient.html#configuration) explains how to declare table sources for reading data, how to declare table sinks for writing data, and how to configure other table program properties.\n+\u5b9a\u4e49\u67e5\u8be2\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u72ec\u7acb Flink \u4f5c\u4e1a\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u3002\u4e3a\u6b64\uff0c\u5176\u76ee\u6807\u7cfb\u7edf\u9700\u8981\u4f7f\u7528 [INSERT INTO \u8bed\u53e5](sqlClient.html#detached-sql-queries)\u6307\u5b9a\u5b58\u50a8\u7ed3\u679c\u3002[\u914d\u7f6e\u90e8\u5206](sqlClient.html#configuration)\u89e3\u91ca\u5982\u4f55\u58f0\u660e\u8bfb\u53d6\u6570\u636e\u7684 table source\uff0c\u5199\u5165\u6570\u636e\u7684 sink \u4ee5\u53ca\u914d\u7f6e\u5176\u4ed6\u8868\u7a0b\u5e8f\u5c5e\u6027\u7684\u65b9\u6cd5\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMxMzUxOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyMDoyMFrOGQhG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozMzowNVrOGS354g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3Mjg2Mg==", "bodyText": "\u6dfb\u52a0\u8fd9\u4e2a\u7684\u539f\u56e0\u662f\u4ec0\u4e48", "url": "https://github.com/apache/flink/pull/11961#discussion_r419972862", "createdAt": "2020-05-05T09:20:20Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002\n \n-After a query is defined, it can be submitted to the cluster as a long-running, detached Flink job. For this, a target system that stores the results needs to be specified using the [INSERT INTO statement](sqlClient.html#detached-sql-queries). The [configuration section](sqlClient.html#configuration) explains how to declare table sources for reading data, how to declare table sinks for writing data, and how to configure other table program properties.\n+\u5b9a\u4e49\u67e5\u8be2\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u72ec\u7acb Flink \u4f5c\u4e1a\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u3002\u4e3a\u6b64\uff0c\u5176\u76ee\u6807\u7cfb\u7edf\u9700\u8981\u4f7f\u7528 [INSERT INTO \u8bed\u53e5](sqlClient.html#detached-sql-queries)\u6307\u5b9a\u5b58\u50a8\u7ed3\u679c\u3002[\u914d\u7f6e\u90e8\u5206](sqlClient.html#configuration)\u89e3\u91ca\u5982\u4f55\u58f0\u660e\u8bfb\u53d6\u6570\u636e\u7684 table source\uff0c\u5199\u5165\u6570\u636e\u7684 sink \u4ee5\u53ca\u914d\u7f6e\u5176\u4ed6\u8868\u7a0b\u5e8f\u5c5e\u6027\u7684\u65b9\u6cd5\u3002\n \n {% top %}\n \n-Configuration\n+<a name=\"configuration\"></a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NzAyMw==", "bodyText": "\u4e3a\u4e86\u5728\u4e0a\u6587 \u201c\u6700\u5927\u884c\u6570\u201d \u80fd\u591f\u94fe\u63a5\u5230\u7ffb\u8bd1\u8fc7\u540e\u7684Configuration\uff0c\u5373\u914d\u7f6e", "url": "https://github.com/apache/flink/pull/11961#discussion_r420277023", "createdAt": "2020-05-05T17:19:29Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002\n \n-After a query is defined, it can be submitted to the cluster as a long-running, detached Flink job. For this, a target system that stores the results needs to be specified using the [INSERT INTO statement](sqlClient.html#detached-sql-queries). The [configuration section](sqlClient.html#configuration) explains how to declare table sources for reading data, how to declare table sinks for writing data, and how to configure other table program properties.\n+\u5b9a\u4e49\u67e5\u8be2\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u72ec\u7acb Flink \u4f5c\u4e1a\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u3002\u4e3a\u6b64\uff0c\u5176\u76ee\u6807\u7cfb\u7edf\u9700\u8981\u4f7f\u7528 [INSERT INTO \u8bed\u53e5](sqlClient.html#detached-sql-queries)\u6307\u5b9a\u5b58\u50a8\u7ed3\u679c\u3002[\u914d\u7f6e\u90e8\u5206](sqlClient.html#configuration)\u89e3\u91ca\u5982\u4f55\u58f0\u660e\u8bfb\u53d6\u6570\u636e\u7684 table source\uff0c\u5199\u5165\u6570\u636e\u7684 sink \u4ee5\u53ca\u914d\u7f6e\u5176\u4ed6\u8868\u7a0b\u5e8f\u5c5e\u6027\u7684\u65b9\u6cd5\u3002\n \n {% top %}\n \n-Configuration\n+<a name=\"configuration\"></a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3Mjg2Mg=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwMzM3NA==", "bodyText": "\u8fd9\u91cc\u6211\u60f3\u8bf4\u7684\u610f\u601d\u662f \u201c\u82f1\u6587\u7248\u4e0d\u9700\u8981\u6dfb\u52a0\uff0c\u4e3a\u4ec0\u4e48\u4e2d\u6587\u7248\u9700\u8981\u6dfb\u52a0\u5462\u201d\n\u5982\u679c\u6211\u6ca1\u770b\u9519\u7684\u8bdd\uff0c\u82f1\u6587\u7248\u662f \"configuration\" \u662f\u4e00\u7ea7\u6807\u9898\uff0c\u6240\u4ee5\u80fd\u591f\u76f4\u63a5\u8df3\u8f6c\u3002\n\u6211\u4eec\u8fd9\u91cc\u628a \u201c\u6700\u5927\u884c\u6570\u7684\u201d \u7684\u8df3\u8f6c\u90a3\u91cc\u6539\u4e3a \u201c\u6700\u5927\u884c\u6570\u201d \u5b9e\u9645\u4e5f\u662f\u53ef\u884c\u7684\u3002\n\u5f53\u7136\uff0c\u8fd9\u4e2a\u5730\u65b9\u4e5f\u53ef\u4ee5\u7b49\u5176\u4ed6\u4eba\u770b\u4e0b\u54ea\u4e2a\u66f4\u5408\u9002", "url": "https://github.com/apache/flink/pull/11961#discussion_r421903374", "createdAt": "2020-05-08T02:37:07Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002\n \n-After a query is defined, it can be submitted to the cluster as a long-running, detached Flink job. For this, a target system that stores the results needs to be specified using the [INSERT INTO statement](sqlClient.html#detached-sql-queries). The [configuration section](sqlClient.html#configuration) explains how to declare table sources for reading data, how to declare table sinks for writing data, and how to configure other table program properties.\n+\u5b9a\u4e49\u67e5\u8be2\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u72ec\u7acb Flink \u4f5c\u4e1a\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u3002\u4e3a\u6b64\uff0c\u5176\u76ee\u6807\u7cfb\u7edf\u9700\u8981\u4f7f\u7528 [INSERT INTO \u8bed\u53e5](sqlClient.html#detached-sql-queries)\u6307\u5b9a\u5b58\u50a8\u7ed3\u679c\u3002[\u914d\u7f6e\u90e8\u5206](sqlClient.html#configuration)\u89e3\u91ca\u5982\u4f55\u58f0\u660e\u8bfb\u53d6\u6570\u636e\u7684 table source\uff0c\u5199\u5165\u6570\u636e\u7684 sink \u4ee5\u53ca\u914d\u7f6e\u5176\u4ed6\u8868\u7a0b\u5e8f\u5c5e\u6027\u7684\u65b9\u6cd5\u3002\n \n {% top %}\n \n-Configuration\n+<a name=\"configuration\"></a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3Mjg2Mg=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzQ5MA==", "bodyText": "\u6211\u89c9\u5f97\u52a0\u8fd9\u4e2a\u6807\u7b7e\u662f\u4e2a\u201c\u6700\u4f73\u5b9e\u8df5\u201d\u3002\u56e0\u4e3a\u6211\u4eec\u5f88\u96be\u56de\u6eaf\u5230\u6240\u6709\u94fe\u5230\u8fd9\u4e2a\u6807\u9898\u7684\u94fe\u63a5\uff08\u53ef\u80fd\u6709\u5176\u4ed6\u9875\u9762\u4f1a\u94fe\u63a5\u8fd9\u4e2a\u6807\u9898\uff09\uff0c\u53bb\u4fee\u6539\u90a3\u4e9b\u94fe\u63a5\u7684\u5730\u5740\u4e3a\u4e2d\u6587\u3002\u56e0\u6b64\u52a0\u8fd9\u4e2a\u6807\u7b7e\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u5bf9\u6807\u9898\u94fe\u63a5\u517c\u5bb9\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r422443490", "createdAt": "2020-05-09T02:33:05Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -98,26 +97,28 @@ In *changelog mode*, the visualized changelog should be similar to:\n + Bob, 2\n {% endhighlight %}\n \n-In *table mode*, the visualized result table is continuously updated until the table program ends with:\n+*\u8868\u683c\u6a21\u5f0f* \u4e0b\uff0c\u53ef\u89c6\u5316\u7ed3\u679c\u8868\u5c06\u4e0d\u65ad\u66f4\u65b0\uff0c\u76f4\u5230\u8868\u7a0b\u5e8f\u4ee5\u5982\u4e0b\u5185\u5bb9\u7ed3\u675f\uff1a\n \n {% highlight text %}\n Bob, 2\n Alice, 1\n Greg, 1\n {% endhighlight %}\n \n-Both result modes can be useful during the prototyping of SQL queries. In both modes, results are stored in the Java heap memory of the SQL Client. In order to keep the CLI interface responsive, the changelog mode only shows the latest 1000 changes. The table mode allows for navigating through bigger results that are only limited by the available main memory and the configured [maximum number of rows](sqlClient.html#configuration) (`max-table-result-rows`).\n+\u8fd9\u4e24\u79cd\u7ed3\u679c\u6a21\u5f0f\u5728 SQL \u67e5\u8be2\u7684\u539f\u578b\u8bbe\u8ba1\u8fc7\u7a0b\u4e2d\u90fd\u975e\u5e38\u6709\u7528\u3002\u8fd9\u4e24\u79cd\u6a21\u5f0f\u7ed3\u679c\u90fd\u5b58\u50a8\u5728 SQL \u5ba2\u6237\u7aef \u7684 Java \u5806\u5185\u5b58\u4e2d\u3002\u4e3a\u4e86\u4fdd\u6301 CLI \u754c\u9762\u53ca\u65f6\u54cd\u5e94\uff0c\u53d8\u66f4\u65e5\u5fd7\u6a21\u5f0f\u4ec5\u663e\u793a\u6700\u8fd1\u7684 1000 \u4e2a\u66f4\u6539\u3002\u8868\u683c\u6a21\u5f0f\u652f\u6301\u6d4f\u89c8\u66f4\u5927\u7684\u7ed3\u679c\uff0c\u8fd9\u4e9b\u7ed3\u679c\u4ec5\u53d7\u53ef\u7528\u4e3b\u5185\u5b58\u548c\u914d\u7f6e\u7684[\u6700\u5927\u884c\u6570](sqlClient.html#configuration)\uff08`max-table-result-rows`\uff09\u7684\u9650\u5236\u3002\n \n-<span class=\"label label-danger\">Attention</span> Queries that are executed in a batch environment, can only be retrieved using the `table` result mode.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728\u6279\u5904\u7406\u73af\u5883\u4e0b\u6267\u884c\u7684\u67e5\u8be2\u53ea\u80fd\u7528 `table` \u7ed3\u679c\u6a21\u5f0f\u8fdb\u884c\u68c0\u7d22\u3002\n \n-After a query is defined, it can be submitted to the cluster as a long-running, detached Flink job. For this, a target system that stores the results needs to be specified using the [INSERT INTO statement](sqlClient.html#detached-sql-queries). The [configuration section](sqlClient.html#configuration) explains how to declare table sources for reading data, how to declare table sinks for writing data, and how to configure other table program properties.\n+\u5b9a\u4e49\u67e5\u8be2\u4e4b\u540e\uff0c\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u957f\u65f6\u95f4\u8fd0\u884c\u7684\u72ec\u7acb Flink \u4f5c\u4e1a\u63d0\u4ea4\u7ed9\u96c6\u7fa4\u3002\u4e3a\u6b64\uff0c\u5176\u76ee\u6807\u7cfb\u7edf\u9700\u8981\u4f7f\u7528 [INSERT INTO \u8bed\u53e5](sqlClient.html#detached-sql-queries)\u6307\u5b9a\u5b58\u50a8\u7ed3\u679c\u3002[\u914d\u7f6e\u90e8\u5206](sqlClient.html#configuration)\u89e3\u91ca\u5982\u4f55\u58f0\u660e\u8bfb\u53d6\u6570\u636e\u7684 table source\uff0c\u5199\u5165\u6570\u636e\u7684 sink \u4ee5\u53ca\u914d\u7f6e\u5176\u4ed6\u8868\u7a0b\u5e8f\u5c5e\u6027\u7684\u65b9\u6cd5\u3002\n \n {% top %}\n \n-Configuration\n+<a name=\"configuration\"></a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3Mjg2Mg=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMxNzc1OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyMTozNFrOGQhJmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyMTozNFrOGQhJmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3MzUzMQ==", "bodyText": "\u6dfb\u52a0\u8fd9\u53e5\u7684\u539f\u56e0\u662f\u4ec0\u4e48\u5462", "url": "https://github.com/apache/flink/pull/11961#discussion_r419973531", "createdAt": "2020-05-05T09:21:34Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -155,14 +156,16 @@ Mode \"embedded\" submits Flink jobs from the local machine.\n \n {% top %}\n \n-### Environment Files\n+<a name=\"environment-files\"></a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMyMzIxOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyMzowM1rOGQhNAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyMzowM1rOGQhNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3NDQwMg==", "bodyText": "\u201dtable sources\"?", "url": "https://github.com/apache/flink/pull/11961#discussion_r419974402", "createdAt": "2020-05-05T09:23:03Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -155,14 +156,16 @@ Mode \"embedded\" submits Flink jobs from the local machine.\n \n {% top %}\n \n-### Environment Files\n+<a name=\"environment-files\"></a>\n \n-A SQL query needs a configuration environment in which it is executed. The so-called *environment files* define available catalogs, table sources and sinks, user-defined functions, and other properties required for execution and deployment.\n+### \u73af\u5883\u914d\u7f6e\u6587\u4ef6\n \n-Every environment file is a regular [YAML file](http://yaml.org/). An example of such a file is presented below.\n+SQL \u67e5\u8be2\u6267\u884c\u524d\u9700\u8981\u914d\u7f6e\u76f8\u5173\u73af\u5883\u53d8\u91cf\u3002*\u73af\u5883\u914d\u7f6e\u6587\u4ef6* \u5b9a\u4e49\u4e86 catalog\u3001table source\u3001table sinks\u3001\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u548c\u5176\u4ed6\u6267\u884c\u6216\u90e8\u7f72\u6240\u9700\u5c5e\u6027\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMyODE0OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyNDoyM1rOGQhQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyNDoyM1rOGQhQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3NTE4Nw==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u662f\u4e0d\u662f\u53ef\u4ee5\u53bb\u6389 table \u76f4\u63a5\u5199\u6210 \"source, sink\"?", "url": "https://github.com/apache/flink/pull/11961#discussion_r419975187", "createdAt": "2020-05-05T09:24:23Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -155,14 +156,16 @@ Mode \"embedded\" submits Flink jobs from the local machine.\n \n {% top %}\n \n-### Environment Files\n+<a name=\"environment-files\"></a>\n \n-A SQL query needs a configuration environment in which it is executed. The so-called *environment files* define available catalogs, table sources and sinks, user-defined functions, and other properties required for execution and deployment.\n+### \u73af\u5883\u914d\u7f6e\u6587\u4ef6\n \n-Every environment file is a regular [YAML file](http://yaml.org/). An example of such a file is presented below.\n+SQL \u67e5\u8be2\u6267\u884c\u524d\u9700\u8981\u914d\u7f6e\u76f8\u5173\u73af\u5883\u53d8\u91cf\u3002*\u73af\u5883\u914d\u7f6e\u6587\u4ef6* \u5b9a\u4e49\u4e86 catalog\u3001table source\u3001table sinks\u3001\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570\u548c\u5176\u4ed6\u6267\u884c\u6216\u90e8\u7f72\u6240\u9700\u5c5e\u6027\u3002\n+\n+\u6bcf\u4e2a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u662f\u5e38\u89c4\u7684 [YAML \u6587\u4ef6](http://yaml.org/)\uff0c\u4f8b\u5b50\u5982\u4e0b\u3002\n \n {% highlight yaml %}\n-# Define tables here such as sources, sinks, views, or temporal tables.\n+# \u5b9a\u4e49\u8868\uff0c\u5982 table source\u3001sink\u3001\u89c6\u56fe\u6216\u4e34\u65f6\u8868\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDMzNDM4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyNjoxMFrOGQhT6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOToyNjoxMFrOGQhT6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3NjE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source ``MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c\n          \n          \n            \n            - \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source `MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c", "url": "https://github.com/apache/flink/pull/11961#discussion_r419976171", "createdAt": "2020-05-05T09:26:10Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -212,98 +215,96 @@ catalogs:\n      default-database: mydb2\n      hive-conf-dir: ...\n \n-# Properties that change the fundamental execution behavior of a table program.\n+# \u6539\u53d8\u8868\u7a0b\u5e8f\u57fa\u672c\u7684\u6267\u884c\u884c\u4e3a\u5c5e\u6027\u3002\n \n execution:\n-  planner: blink                    # optional: either 'blink' (default) or 'old'\n-  type: streaming                   # required: execution mode either 'batch' or 'streaming'\n-  result-mode: table                # required: either 'table' or 'changelog'\n-  max-table-result-rows: 1000000    # optional: maximum number of maintained rows in\n-                                    #   'table' mode (1000000 by default, smaller 1 means unlimited)\n-  time-characteristic: event-time   # optional: 'processing-time' or 'event-time' (default)\n-  parallelism: 1                    # optional: Flink's parallelism (1 by default)\n-  periodic-watermarks-interval: 200 # optional: interval for periodic watermarks (200 ms by default)\n-  max-parallelism: 16               # optional: Flink's maximum parallelism (128 by default)\n-  min-idle-state-retention: 0       # optional: table program's minimum idle state time\n-  max-idle-state-retention: 0       # optional: table program's maximum idle state time\n-  current-catalog: catalog_1        # optional: name of the current catalog of the session ('default_catalog' by default)\n-  current-database: mydb1           # optional: name of the current database of the current catalog\n-                                    #   (default database of the current catalog by default)\n-  restart-strategy:                 # optional: restart strategy\n-    type: fallback                  #   \"fallback\" to global restart strategy by default\n-\n-# Configuration options for adjusting and tuning table programs.\n-\n-# A full list of options and their default values can be found\n-# on the dedicated \"Configuration\" page.\n+  planner: blink                    # \u53ef\u9009\uff1a 'blink' \uff08\u9ed8\u8ba4\uff09\u6216 'old'\n+  type: streaming                   # \u5fc5\u9009\uff1a\u6267\u884c\u6a21\u5f0f\u4e3a 'batch' \u6216 'streaming'\n+  result-mode: table                # \u5fc5\u9009\uff1a'table' \u6216 'changelog'\n+  max-table-result-rows: 1000000    # \u53ef\u9009\uff1a'table' \u6a21\u5f0f\u4e0b\u53ef\u7ef4\u62a4\u7684\u6700\u5927\u884c\u6570\uff08\u9ed8\u8ba4\u4e3a 1000000\uff0c\u5c0f\u4e8e 1 \u5219\u8868\u793a\u65e0\u9650\u5236\uff09\n+  time-characteristic: event-time   # \u53ef\u9009\uff1a 'processing-time' \u6216 'event-time' \uff08\u9ed8\u8ba4\uff09\n+  parallelism: 1                    # \u53ef\u9009\uff1aFlink \u7684\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4\u4e3a 1\uff09\n+  periodic-watermarks-interval: 200 # \u53ef\u9009\uff1a\u5468\u671f\u6027 watermarks \u7684\u95f4\u9694\u65f6\u95f4\uff08\u9ed8\u8ba4 200 ms\uff09\n+  max-parallelism: 16               # \u53ef\u9009\uff1aFlink \u7684\u6700\u5927\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4 128\uff09\n+  min-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5c0f\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  max-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5927\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  current-catalog: catalog_1        # \u53ef\u9009\uff1a\u5f53\u524d\u4f1a\u8bdd catalog \u7684\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a 'default_catalog'\uff09\n+  current-database: mydb1           # \u53ef\u9009\uff1a\u5f53\u524d catalog \u7684\u5f53\u524d\u6570\u636e\u5e93\u540d\u79f0\n+                                    #   \uff08\u9ed8\u8ba4\u4e3a\u5f53\u524d catalog \u7684\u9ed8\u8ba4\u6570\u636e\u5e93\uff09\n+  restart-strategy:                 # \u53ef\u9009\uff1a\u91cd\u542f\u7b56\u7565\uff08restart-strategy\uff09\n+    type: fallback                  #   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u201c\u56de\u9000\u201d\u5230\u5168\u5c40\u91cd\u542f\u7b56\u7565\n+\n+# \u7528\u4e8e\u8c03\u6574\u548c\u8c03\u4f18\u8868\u7a0b\u5e8f\u7684\u914d\u7f6e\u9009\u9879\u3002\n+\n+# \u5728\u4e13\u7528\u7684\u201d\u914d\u7f6e\u201d\u9875\u9762\u4e0a\u53ef\u4ee5\u627e\u5230\u5b8c\u6574\u7684\u9009\u9879\u5217\u8868\u53ca\u5176\u9ed8\u8ba4\u503c\u3002\n configuration:\n   table.optimizer.join-reorder-enabled: true\n   table.exec.spill-compression.enabled: true\n   table.exec.spill-compression.block-size: 128kb\n \n-# Properties that describe the cluster to which table programs are submitted to.\n+# \u63cf\u8ff0\u8868\u7a0b\u5e8f\u63d0\u4ea4\u96c6\u7fa4\u7684\u5c5e\u6027\u3002\n \n deployment:\n   response-timeout: 5000\n {% endhighlight %}\n \n-This configuration:\n+\u4e0a\u8ff0\u914d\u7f6e\uff1a\n \n-- defines an environment with a table source `MyTableSource` that reads from a CSV file,\n-- defines a view `MyCustomView` that declares a virtual table using a SQL query,\n-- defines a user-defined function `myUDF` that can be instantiated using the class name and two constructor parameters,\n-- connects to two Hive catalogs and uses `catalog_1` as the current catalog with `mydb1` as the current database of the catalog,\n-- uses the blink planner in streaming mode for running statements with event-time characteristic and a parallelism of 1,\n-- runs exploratory queries in the `table` result mode,\n-- and makes some planner adjustments around join reordering and spilling via configuration options.\n+- \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source ``MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM1MDAyOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozMDozMVrOGQhdbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozMDozMVrOGQhdbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3ODYwNA==", "bodyText": "\"\u66f4\u7ec6\u7cbe\u5ea6\u7684\u91cd\u542f\u914d\u7f6e\u53ef\u4ee5\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\" \u53bb\u6389 \u201c\u4e00\u4e2a\u201d\u4f1a\u4e0d\u4f1a\u66f4\u597d\u4e00\u70b9", "url": "https://github.com/apache/flink/pull/11961#discussion_r419978604", "createdAt": "2020-05-05T09:30:31Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -212,98 +215,96 @@ catalogs:\n      default-database: mydb2\n      hive-conf-dir: ...\n \n-# Properties that change the fundamental execution behavior of a table program.\n+# \u6539\u53d8\u8868\u7a0b\u5e8f\u57fa\u672c\u7684\u6267\u884c\u884c\u4e3a\u5c5e\u6027\u3002\n \n execution:\n-  planner: blink                    # optional: either 'blink' (default) or 'old'\n-  type: streaming                   # required: execution mode either 'batch' or 'streaming'\n-  result-mode: table                # required: either 'table' or 'changelog'\n-  max-table-result-rows: 1000000    # optional: maximum number of maintained rows in\n-                                    #   'table' mode (1000000 by default, smaller 1 means unlimited)\n-  time-characteristic: event-time   # optional: 'processing-time' or 'event-time' (default)\n-  parallelism: 1                    # optional: Flink's parallelism (1 by default)\n-  periodic-watermarks-interval: 200 # optional: interval for periodic watermarks (200 ms by default)\n-  max-parallelism: 16               # optional: Flink's maximum parallelism (128 by default)\n-  min-idle-state-retention: 0       # optional: table program's minimum idle state time\n-  max-idle-state-retention: 0       # optional: table program's maximum idle state time\n-  current-catalog: catalog_1        # optional: name of the current catalog of the session ('default_catalog' by default)\n-  current-database: mydb1           # optional: name of the current database of the current catalog\n-                                    #   (default database of the current catalog by default)\n-  restart-strategy:                 # optional: restart strategy\n-    type: fallback                  #   \"fallback\" to global restart strategy by default\n-\n-# Configuration options for adjusting and tuning table programs.\n-\n-# A full list of options and their default values can be found\n-# on the dedicated \"Configuration\" page.\n+  planner: blink                    # \u53ef\u9009\uff1a 'blink' \uff08\u9ed8\u8ba4\uff09\u6216 'old'\n+  type: streaming                   # \u5fc5\u9009\uff1a\u6267\u884c\u6a21\u5f0f\u4e3a 'batch' \u6216 'streaming'\n+  result-mode: table                # \u5fc5\u9009\uff1a'table' \u6216 'changelog'\n+  max-table-result-rows: 1000000    # \u53ef\u9009\uff1a'table' \u6a21\u5f0f\u4e0b\u53ef\u7ef4\u62a4\u7684\u6700\u5927\u884c\u6570\uff08\u9ed8\u8ba4\u4e3a 1000000\uff0c\u5c0f\u4e8e 1 \u5219\u8868\u793a\u65e0\u9650\u5236\uff09\n+  time-characteristic: event-time   # \u53ef\u9009\uff1a 'processing-time' \u6216 'event-time' \uff08\u9ed8\u8ba4\uff09\n+  parallelism: 1                    # \u53ef\u9009\uff1aFlink \u7684\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4\u4e3a 1\uff09\n+  periodic-watermarks-interval: 200 # \u53ef\u9009\uff1a\u5468\u671f\u6027 watermarks \u7684\u95f4\u9694\u65f6\u95f4\uff08\u9ed8\u8ba4 200 ms\uff09\n+  max-parallelism: 16               # \u53ef\u9009\uff1aFlink \u7684\u6700\u5927\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4 128\uff09\n+  min-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5c0f\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  max-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5927\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  current-catalog: catalog_1        # \u53ef\u9009\uff1a\u5f53\u524d\u4f1a\u8bdd catalog \u7684\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a 'default_catalog'\uff09\n+  current-database: mydb1           # \u53ef\u9009\uff1a\u5f53\u524d catalog \u7684\u5f53\u524d\u6570\u636e\u5e93\u540d\u79f0\n+                                    #   \uff08\u9ed8\u8ba4\u4e3a\u5f53\u524d catalog \u7684\u9ed8\u8ba4\u6570\u636e\u5e93\uff09\n+  restart-strategy:                 # \u53ef\u9009\uff1a\u91cd\u542f\u7b56\u7565\uff08restart-strategy\uff09\n+    type: fallback                  #   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u201c\u56de\u9000\u201d\u5230\u5168\u5c40\u91cd\u542f\u7b56\u7565\n+\n+# \u7528\u4e8e\u8c03\u6574\u548c\u8c03\u4f18\u8868\u7a0b\u5e8f\u7684\u914d\u7f6e\u9009\u9879\u3002\n+\n+# \u5728\u4e13\u7528\u7684\u201d\u914d\u7f6e\u201d\u9875\u9762\u4e0a\u53ef\u4ee5\u627e\u5230\u5b8c\u6574\u7684\u9009\u9879\u5217\u8868\u53ca\u5176\u9ed8\u8ba4\u503c\u3002\n configuration:\n   table.optimizer.join-reorder-enabled: true\n   table.exec.spill-compression.enabled: true\n   table.exec.spill-compression.block-size: 128kb\n \n-# Properties that describe the cluster to which table programs are submitted to.\n+# \u63cf\u8ff0\u8868\u7a0b\u5e8f\u63d0\u4ea4\u96c6\u7fa4\u7684\u5c5e\u6027\u3002\n \n deployment:\n   response-timeout: 5000\n {% endhighlight %}\n \n-This configuration:\n+\u4e0a\u8ff0\u914d\u7f6e\uff1a\n \n-- defines an environment with a table source `MyTableSource` that reads from a CSV file,\n-- defines a view `MyCustomView` that declares a virtual table using a SQL query,\n-- defines a user-defined function `myUDF` that can be instantiated using the class name and two constructor parameters,\n-- connects to two Hive catalogs and uses `catalog_1` as the current catalog with `mydb1` as the current database of the catalog,\n-- uses the blink planner in streaming mode for running statements with event-time characteristic and a parallelism of 1,\n-- runs exploratory queries in the `table` result mode,\n-- and makes some planner adjustments around join reordering and spilling via configuration options.\n+- \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source ``MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u56fe `MyCustomView` \uff0c\u8be5\u89c6\u56fe\u662f\u7528 SQL \u67e5\u8be2\u58f0\u660e\u7684\u865a\u62df\u8868\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570 `myUDF`\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u540d\u548c\u4e24\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\n+- \u8fde\u63a5\u5230\u4e24\u4e2a Hive catalogs \u5e76\u7528 `catalog_1` \u6765\u4f5c\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u7528 `mydb1` \u6765\u4f5c\u4e3a\u8be5\u76ee\u5f55\u7684\u5f53\u524d\u6570\u636e\u5e93\uff0c\n+- streaming \u6a21\u5f0f\u4e0b\u7528 blink planner \u6765\u8fd0\u884c\u65f6\u95f4\u7279\u5f81\u4e3a event-time \u548c\u5e76\u884c\u5ea6\u4e3a 1 \u7684\u8bed\u53e5\uff0c\n+- \u5728 `table` \u7ed3\u679c\u6a21\u5f0f\u4e0b\u8fd0\u884c\u8bd5\u63a2\u6027\u7684\uff08exploratory\uff09\u7684\u67e5\u8be2\uff0c\n+- \u5e76\u901a\u8fc7\u914d\u7f6e\u9009\u9879\u5bf9\u8054\u7ed3\uff08join\uff09\u91cd\u6392\u5e8f\u548c\u6ea2\u51fa\u8fdb\u884c\u4e00\u4e9b\u8ba1\u5212\u8c03\u6574\u3002\n \n-Depending on the use case, a configuration can be split into multiple files. Therefore, environment files can be created for general purposes (*defaults environment file* using `--defaults`) as well as on a per-session basis (*session environment file* using `--environment`). Every CLI session is initialized with the default properties followed by the session properties. For example, the defaults environment file could specify all table sources that should be available for querying in every session whereas the session environment file only declares a specific state retention time and parallelism. Both default and session environment files can be passed when starting the CLI application. If no default environment file has been specified, the SQL Client searches for `./conf/sql-client-defaults.yaml` in Flink's configuration directory.\n+\u6839\u636e\u4f7f\u7528\u60c5\u51b5\uff0c\u914d\u7f6e\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3a\u591a\u4e2a\u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff08\u7528 `--defaults` \u6307\u5b9a*\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u4ee5\u53ca\u57fa\u4e8e\u6bcf\u4e2a\u4f1a\u8bdd\uff08\u7528 `--environment` \u6307\u5b9a*\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u6765\u521b\u5efa\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u3002\u6bcf\u4e2a CLI \u4f1a\u8bdd\u5747\u4f1a\u88ab\u5c5e\u4e8e session \u5c5e\u6027\u7684\u9ed8\u8ba4\u5c5e\u6027\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u6307\u5b9a\u5728\u6bcf\u4e2a\u4f1a\u8bdd\u4e2d\u90fd\u53ef\u7528\u4e8e\u67e5\u8be2\u7684\u6240\u6709 table source\uff0c\u800c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4ec5\u58f0\u660e\u7279\u5b9a\u7684\u72b6\u6001\u4fdd\u7559\u65f6\u95f4\u548c\u5e76\u884c\u6027\u3002\u542f\u52a8 CLI \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u548c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u90fd\u53ef\u4ee5\u88ab\u6307\u5b9a\u3002\u5982\u679c\u672a\u6307\u5b9a\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff0c\u5219 SQL \u5ba2\u6237\u7aef\u5c06\u5728 Flink \u7684\u914d\u7f6e\u76ee\u5f55\u4e2d\u641c\u7d22 `./conf/sql-client-defaults.yaml`\u3002\n \n-<span class=\"label label-danger\">Attention</span> Properties that have been set within a CLI session (e.g. using the `SET` command) have highest precedence:\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728 CLI \u4f1a\u8bdd\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\uff08\u5982 `SET` \u547d\u4ee4\uff09\u4f18\u5148\u7ea7\u6700\u9ad8\uff1a\n \n {% highlight text %}\n CLI commands > session environment file > defaults environment file\n {% endhighlight %}\n \n-#### Restart Strategies\n+#### \u91cd\u542f\u7b56\u7565\uff08Restart Strategies\uff09\n \n-Restart strategies control how Flink jobs are restarted in case of a failure. Similar to [global restart strategies]({{ site.baseurl }}/dev/restart_strategies.html) for a Flink cluster, a more fine-grained restart configuration can be declared in an environment file.\n+\u91cd\u542f\u7b56\u7565\u63a7\u5236 Flink \u4f5c\u4e1a\u5931\u8d25\u65f6\u7684\u91cd\u542f\u65b9\u5f0f\u3002\u4e0e Flink \u96c6\u7fa4\u7684[\u5168\u5c40\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u76f8\u4f3c\uff0c\u66f4\u7ec6\u7cbe\u5ea6\u7684\u91cd\u542f\u914d\u7f6e\u53ef\u4ee5\u5728\u4e00\u4e2a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDM1NjU4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozMjoyMFrOGQhhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTozMjoyMFrOGQhhfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk3OTY0NQ==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u6539\u6210 \u201d\u6700\u591a\u5c1d\u8bd5\u91cd\u542f\u7ed9\u5b9a\u6b21\u6570\u201c \u4f1a\u4e0d\u4f1a\u66f4\u597d\u4e00\u70b9\uff1f", "url": "https://github.com/apache/flink/pull/11961#discussion_r419979645", "createdAt": "2020-05-05T09:32:20Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -212,98 +215,96 @@ catalogs:\n      default-database: mydb2\n      hive-conf-dir: ...\n \n-# Properties that change the fundamental execution behavior of a table program.\n+# \u6539\u53d8\u8868\u7a0b\u5e8f\u57fa\u672c\u7684\u6267\u884c\u884c\u4e3a\u5c5e\u6027\u3002\n \n execution:\n-  planner: blink                    # optional: either 'blink' (default) or 'old'\n-  type: streaming                   # required: execution mode either 'batch' or 'streaming'\n-  result-mode: table                # required: either 'table' or 'changelog'\n-  max-table-result-rows: 1000000    # optional: maximum number of maintained rows in\n-                                    #   'table' mode (1000000 by default, smaller 1 means unlimited)\n-  time-characteristic: event-time   # optional: 'processing-time' or 'event-time' (default)\n-  parallelism: 1                    # optional: Flink's parallelism (1 by default)\n-  periodic-watermarks-interval: 200 # optional: interval for periodic watermarks (200 ms by default)\n-  max-parallelism: 16               # optional: Flink's maximum parallelism (128 by default)\n-  min-idle-state-retention: 0       # optional: table program's minimum idle state time\n-  max-idle-state-retention: 0       # optional: table program's maximum idle state time\n-  current-catalog: catalog_1        # optional: name of the current catalog of the session ('default_catalog' by default)\n-  current-database: mydb1           # optional: name of the current database of the current catalog\n-                                    #   (default database of the current catalog by default)\n-  restart-strategy:                 # optional: restart strategy\n-    type: fallback                  #   \"fallback\" to global restart strategy by default\n-\n-# Configuration options for adjusting and tuning table programs.\n-\n-# A full list of options and their default values can be found\n-# on the dedicated \"Configuration\" page.\n+  planner: blink                    # \u53ef\u9009\uff1a 'blink' \uff08\u9ed8\u8ba4\uff09\u6216 'old'\n+  type: streaming                   # \u5fc5\u9009\uff1a\u6267\u884c\u6a21\u5f0f\u4e3a 'batch' \u6216 'streaming'\n+  result-mode: table                # \u5fc5\u9009\uff1a'table' \u6216 'changelog'\n+  max-table-result-rows: 1000000    # \u53ef\u9009\uff1a'table' \u6a21\u5f0f\u4e0b\u53ef\u7ef4\u62a4\u7684\u6700\u5927\u884c\u6570\uff08\u9ed8\u8ba4\u4e3a 1000000\uff0c\u5c0f\u4e8e 1 \u5219\u8868\u793a\u65e0\u9650\u5236\uff09\n+  time-characteristic: event-time   # \u53ef\u9009\uff1a 'processing-time' \u6216 'event-time' \uff08\u9ed8\u8ba4\uff09\n+  parallelism: 1                    # \u53ef\u9009\uff1aFlink \u7684\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4\u4e3a 1\uff09\n+  periodic-watermarks-interval: 200 # \u53ef\u9009\uff1a\u5468\u671f\u6027 watermarks \u7684\u95f4\u9694\u65f6\u95f4\uff08\u9ed8\u8ba4 200 ms\uff09\n+  max-parallelism: 16               # \u53ef\u9009\uff1aFlink \u7684\u6700\u5927\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4 128\uff09\n+  min-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5c0f\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  max-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5927\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  current-catalog: catalog_1        # \u53ef\u9009\uff1a\u5f53\u524d\u4f1a\u8bdd catalog \u7684\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a 'default_catalog'\uff09\n+  current-database: mydb1           # \u53ef\u9009\uff1a\u5f53\u524d catalog \u7684\u5f53\u524d\u6570\u636e\u5e93\u540d\u79f0\n+                                    #   \uff08\u9ed8\u8ba4\u4e3a\u5f53\u524d catalog \u7684\u9ed8\u8ba4\u6570\u636e\u5e93\uff09\n+  restart-strategy:                 # \u53ef\u9009\uff1a\u91cd\u542f\u7b56\u7565\uff08restart-strategy\uff09\n+    type: fallback                  #   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u201c\u56de\u9000\u201d\u5230\u5168\u5c40\u91cd\u542f\u7b56\u7565\n+\n+# \u7528\u4e8e\u8c03\u6574\u548c\u8c03\u4f18\u8868\u7a0b\u5e8f\u7684\u914d\u7f6e\u9009\u9879\u3002\n+\n+# \u5728\u4e13\u7528\u7684\u201d\u914d\u7f6e\u201d\u9875\u9762\u4e0a\u53ef\u4ee5\u627e\u5230\u5b8c\u6574\u7684\u9009\u9879\u5217\u8868\u53ca\u5176\u9ed8\u8ba4\u503c\u3002\n configuration:\n   table.optimizer.join-reorder-enabled: true\n   table.exec.spill-compression.enabled: true\n   table.exec.spill-compression.block-size: 128kb\n \n-# Properties that describe the cluster to which table programs are submitted to.\n+# \u63cf\u8ff0\u8868\u7a0b\u5e8f\u63d0\u4ea4\u96c6\u7fa4\u7684\u5c5e\u6027\u3002\n \n deployment:\n   response-timeout: 5000\n {% endhighlight %}\n \n-This configuration:\n+\u4e0a\u8ff0\u914d\u7f6e\uff1a\n \n-- defines an environment with a table source `MyTableSource` that reads from a CSV file,\n-- defines a view `MyCustomView` that declares a virtual table using a SQL query,\n-- defines a user-defined function `myUDF` that can be instantiated using the class name and two constructor parameters,\n-- connects to two Hive catalogs and uses `catalog_1` as the current catalog with `mydb1` as the current database of the catalog,\n-- uses the blink planner in streaming mode for running statements with event-time characteristic and a parallelism of 1,\n-- runs exploratory queries in the `table` result mode,\n-- and makes some planner adjustments around join reordering and spilling via configuration options.\n+- \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source ``MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u56fe `MyCustomView` \uff0c\u8be5\u89c6\u56fe\u662f\u7528 SQL \u67e5\u8be2\u58f0\u660e\u7684\u865a\u62df\u8868\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570 `myUDF`\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u540d\u548c\u4e24\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\n+- \u8fde\u63a5\u5230\u4e24\u4e2a Hive catalogs \u5e76\u7528 `catalog_1` \u6765\u4f5c\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u7528 `mydb1` \u6765\u4f5c\u4e3a\u8be5\u76ee\u5f55\u7684\u5f53\u524d\u6570\u636e\u5e93\uff0c\n+- streaming \u6a21\u5f0f\u4e0b\u7528 blink planner \u6765\u8fd0\u884c\u65f6\u95f4\u7279\u5f81\u4e3a event-time \u548c\u5e76\u884c\u5ea6\u4e3a 1 \u7684\u8bed\u53e5\uff0c\n+- \u5728 `table` \u7ed3\u679c\u6a21\u5f0f\u4e0b\u8fd0\u884c\u8bd5\u63a2\u6027\u7684\uff08exploratory\uff09\u7684\u67e5\u8be2\uff0c\n+- \u5e76\u901a\u8fc7\u914d\u7f6e\u9009\u9879\u5bf9\u8054\u7ed3\uff08join\uff09\u91cd\u6392\u5e8f\u548c\u6ea2\u51fa\u8fdb\u884c\u4e00\u4e9b\u8ba1\u5212\u8c03\u6574\u3002\n \n-Depending on the use case, a configuration can be split into multiple files. Therefore, environment files can be created for general purposes (*defaults environment file* using `--defaults`) as well as on a per-session basis (*session environment file* using `--environment`). Every CLI session is initialized with the default properties followed by the session properties. For example, the defaults environment file could specify all table sources that should be available for querying in every session whereas the session environment file only declares a specific state retention time and parallelism. Both default and session environment files can be passed when starting the CLI application. If no default environment file has been specified, the SQL Client searches for `./conf/sql-client-defaults.yaml` in Flink's configuration directory.\n+\u6839\u636e\u4f7f\u7528\u60c5\u51b5\uff0c\u914d\u7f6e\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3a\u591a\u4e2a\u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff08\u7528 `--defaults` \u6307\u5b9a*\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u4ee5\u53ca\u57fa\u4e8e\u6bcf\u4e2a\u4f1a\u8bdd\uff08\u7528 `--environment` \u6307\u5b9a*\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u6765\u521b\u5efa\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u3002\u6bcf\u4e2a CLI \u4f1a\u8bdd\u5747\u4f1a\u88ab\u5c5e\u4e8e session \u5c5e\u6027\u7684\u9ed8\u8ba4\u5c5e\u6027\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u6307\u5b9a\u5728\u6bcf\u4e2a\u4f1a\u8bdd\u4e2d\u90fd\u53ef\u7528\u4e8e\u67e5\u8be2\u7684\u6240\u6709 table source\uff0c\u800c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4ec5\u58f0\u660e\u7279\u5b9a\u7684\u72b6\u6001\u4fdd\u7559\u65f6\u95f4\u548c\u5e76\u884c\u6027\u3002\u542f\u52a8 CLI \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u548c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u90fd\u53ef\u4ee5\u88ab\u6307\u5b9a\u3002\u5982\u679c\u672a\u6307\u5b9a\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff0c\u5219 SQL \u5ba2\u6237\u7aef\u5c06\u5728 Flink \u7684\u914d\u7f6e\u76ee\u5f55\u4e2d\u641c\u7d22 `./conf/sql-client-defaults.yaml`\u3002\n \n-<span class=\"label label-danger\">Attention</span> Properties that have been set within a CLI session (e.g. using the `SET` command) have highest precedence:\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728 CLI \u4f1a\u8bdd\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\uff08\u5982 `SET` \u547d\u4ee4\uff09\u4f18\u5148\u7ea7\u6700\u9ad8\uff1a\n \n {% highlight text %}\n CLI commands > session environment file > defaults environment file\n {% endhighlight %}\n \n-#### Restart Strategies\n+#### \u91cd\u542f\u7b56\u7565\uff08Restart Strategies\uff09\n \n-Restart strategies control how Flink jobs are restarted in case of a failure. Similar to [global restart strategies]({{ site.baseurl }}/dev/restart_strategies.html) for a Flink cluster, a more fine-grained restart configuration can be declared in an environment file.\n+\u91cd\u542f\u7b56\u7565\u63a7\u5236 Flink \u4f5c\u4e1a\u5931\u8d25\u65f6\u7684\u91cd\u542f\u65b9\u5f0f\u3002\u4e0e Flink \u96c6\u7fa4\u7684[\u5168\u5c40\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u76f8\u4f3c\uff0c\u66f4\u7ec6\u7cbe\u5ea6\u7684\u91cd\u542f\u914d\u7f6e\u53ef\u4ee5\u5728\u4e00\u4e2a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u3002\n \n-The following strategies are supported:\n+Flink \u652f\u6301\u4ee5\u4e0b\u7b56\u7565\uff1a\n \n {% highlight yaml %}\n execution:\n-  # falls back to the global strategy defined in flink-conf.yaml\n+  # \u9000\u56de\u5230 flink-conf.yaml \u4e2d\u5b9a\u4e49\u7684\u5168\u5c40\u7b56\u7565\n   restart-strategy:\n     type: fallback\n \n-  # job fails directly and no restart is attempted\n+  # \u4f5c\u4e1a\u76f4\u63a5\u5931\u8d25\u5e76\u4e14\u4e0d\u5c1d\u8bd5\u91cd\u542f\n   restart-strategy:\n     type: none\n \n-  # attempts a given number of times to restart the job\n+  # \u7ed9\u5b9a\u5c1d\u8bd5\u91cd\u65b0\u542f\u52a8\u4f5c\u4e1a\u7684\u6b21\u6570", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 275}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ0NDE3OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo1NzoxMlrOGQiXaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo1NzoxMlrOGQiXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5MzQ1MQ==", "bodyText": "\u201d\u5373\u7528\u578b JAR \u6346\u7ed1\u5305\u201c -> \u201d\u5f00\u7bb1\u5373\u7528\u578b JAR \u6346\u7ed1\u5305\u201c \u4f1a\u4e0d\u4f1a\u66f4\u597d\u4e00\u4e9b\n\u201c\u8fd9\u4e9b JAR \u5305\u5404\u4e2a\u53d1\u884c\u7248\u90fd\u53ef\u4ee5\u4ece Maven \u4e2d\u592e\u5e93\u4e2d\u4e0b\u8f7d\u5230\u3002\u201d \u8fd9\u53e5\u8bdd\u5e94\u8be5\u662f\u8bf4\u6bcf\u4e2a\u7248\u672c\u8fd9\u4e9b\u5f00\u7bb1\u5373\u7528\u7684 jar \u80fd\u591f\u4ece\u4e2d\u592e\u4ed3\u5e93\u4e0b\u8f7d\u5427\uff0c\u8fd9\u4e2a\u5730\u65b9\u80fd\u5426\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u7ffb\u8bd1\u5462", "url": "https://github.com/apache/flink/pull/11961#discussion_r419993451", "createdAt": "2020-05-05T09:57:12Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -212,98 +215,96 @@ catalogs:\n      default-database: mydb2\n      hive-conf-dir: ...\n \n-# Properties that change the fundamental execution behavior of a table program.\n+# \u6539\u53d8\u8868\u7a0b\u5e8f\u57fa\u672c\u7684\u6267\u884c\u884c\u4e3a\u5c5e\u6027\u3002\n \n execution:\n-  planner: blink                    # optional: either 'blink' (default) or 'old'\n-  type: streaming                   # required: execution mode either 'batch' or 'streaming'\n-  result-mode: table                # required: either 'table' or 'changelog'\n-  max-table-result-rows: 1000000    # optional: maximum number of maintained rows in\n-                                    #   'table' mode (1000000 by default, smaller 1 means unlimited)\n-  time-characteristic: event-time   # optional: 'processing-time' or 'event-time' (default)\n-  parallelism: 1                    # optional: Flink's parallelism (1 by default)\n-  periodic-watermarks-interval: 200 # optional: interval for periodic watermarks (200 ms by default)\n-  max-parallelism: 16               # optional: Flink's maximum parallelism (128 by default)\n-  min-idle-state-retention: 0       # optional: table program's minimum idle state time\n-  max-idle-state-retention: 0       # optional: table program's maximum idle state time\n-  current-catalog: catalog_1        # optional: name of the current catalog of the session ('default_catalog' by default)\n-  current-database: mydb1           # optional: name of the current database of the current catalog\n-                                    #   (default database of the current catalog by default)\n-  restart-strategy:                 # optional: restart strategy\n-    type: fallback                  #   \"fallback\" to global restart strategy by default\n-\n-# Configuration options for adjusting and tuning table programs.\n-\n-# A full list of options and their default values can be found\n-# on the dedicated \"Configuration\" page.\n+  planner: blink                    # \u53ef\u9009\uff1a 'blink' \uff08\u9ed8\u8ba4\uff09\u6216 'old'\n+  type: streaming                   # \u5fc5\u9009\uff1a\u6267\u884c\u6a21\u5f0f\u4e3a 'batch' \u6216 'streaming'\n+  result-mode: table                # \u5fc5\u9009\uff1a'table' \u6216 'changelog'\n+  max-table-result-rows: 1000000    # \u53ef\u9009\uff1a'table' \u6a21\u5f0f\u4e0b\u53ef\u7ef4\u62a4\u7684\u6700\u5927\u884c\u6570\uff08\u9ed8\u8ba4\u4e3a 1000000\uff0c\u5c0f\u4e8e 1 \u5219\u8868\u793a\u65e0\u9650\u5236\uff09\n+  time-characteristic: event-time   # \u53ef\u9009\uff1a 'processing-time' \u6216 'event-time' \uff08\u9ed8\u8ba4\uff09\n+  parallelism: 1                    # \u53ef\u9009\uff1aFlink \u7684\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4\u4e3a 1\uff09\n+  periodic-watermarks-interval: 200 # \u53ef\u9009\uff1a\u5468\u671f\u6027 watermarks \u7684\u95f4\u9694\u65f6\u95f4\uff08\u9ed8\u8ba4 200 ms\uff09\n+  max-parallelism: 16               # \u53ef\u9009\uff1aFlink \u7684\u6700\u5927\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4 128\uff09\n+  min-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5c0f\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  max-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5927\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  current-catalog: catalog_1        # \u53ef\u9009\uff1a\u5f53\u524d\u4f1a\u8bdd catalog \u7684\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a 'default_catalog'\uff09\n+  current-database: mydb1           # \u53ef\u9009\uff1a\u5f53\u524d catalog \u7684\u5f53\u524d\u6570\u636e\u5e93\u540d\u79f0\n+                                    #   \uff08\u9ed8\u8ba4\u4e3a\u5f53\u524d catalog \u7684\u9ed8\u8ba4\u6570\u636e\u5e93\uff09\n+  restart-strategy:                 # \u53ef\u9009\uff1a\u91cd\u542f\u7b56\u7565\uff08restart-strategy\uff09\n+    type: fallback                  #   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u201c\u56de\u9000\u201d\u5230\u5168\u5c40\u91cd\u542f\u7b56\u7565\n+\n+# \u7528\u4e8e\u8c03\u6574\u548c\u8c03\u4f18\u8868\u7a0b\u5e8f\u7684\u914d\u7f6e\u9009\u9879\u3002\n+\n+# \u5728\u4e13\u7528\u7684\u201d\u914d\u7f6e\u201d\u9875\u9762\u4e0a\u53ef\u4ee5\u627e\u5230\u5b8c\u6574\u7684\u9009\u9879\u5217\u8868\u53ca\u5176\u9ed8\u8ba4\u503c\u3002\n configuration:\n   table.optimizer.join-reorder-enabled: true\n   table.exec.spill-compression.enabled: true\n   table.exec.spill-compression.block-size: 128kb\n \n-# Properties that describe the cluster to which table programs are submitted to.\n+# \u63cf\u8ff0\u8868\u7a0b\u5e8f\u63d0\u4ea4\u96c6\u7fa4\u7684\u5c5e\u6027\u3002\n \n deployment:\n   response-timeout: 5000\n {% endhighlight %}\n \n-This configuration:\n+\u4e0a\u8ff0\u914d\u7f6e\uff1a\n \n-- defines an environment with a table source `MyTableSource` that reads from a CSV file,\n-- defines a view `MyCustomView` that declares a virtual table using a SQL query,\n-- defines a user-defined function `myUDF` that can be instantiated using the class name and two constructor parameters,\n-- connects to two Hive catalogs and uses `catalog_1` as the current catalog with `mydb1` as the current database of the catalog,\n-- uses the blink planner in streaming mode for running statements with event-time characteristic and a parallelism of 1,\n-- runs exploratory queries in the `table` result mode,\n-- and makes some planner adjustments around join reordering and spilling via configuration options.\n+- \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source ``MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u56fe `MyCustomView` \uff0c\u8be5\u89c6\u56fe\u662f\u7528 SQL \u67e5\u8be2\u58f0\u660e\u7684\u865a\u62df\u8868\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570 `myUDF`\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u540d\u548c\u4e24\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\n+- \u8fde\u63a5\u5230\u4e24\u4e2a Hive catalogs \u5e76\u7528 `catalog_1` \u6765\u4f5c\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u7528 `mydb1` \u6765\u4f5c\u4e3a\u8be5\u76ee\u5f55\u7684\u5f53\u524d\u6570\u636e\u5e93\uff0c\n+- streaming \u6a21\u5f0f\u4e0b\u7528 blink planner \u6765\u8fd0\u884c\u65f6\u95f4\u7279\u5f81\u4e3a event-time \u548c\u5e76\u884c\u5ea6\u4e3a 1 \u7684\u8bed\u53e5\uff0c\n+- \u5728 `table` \u7ed3\u679c\u6a21\u5f0f\u4e0b\u8fd0\u884c\u8bd5\u63a2\u6027\u7684\uff08exploratory\uff09\u7684\u67e5\u8be2\uff0c\n+- \u5e76\u901a\u8fc7\u914d\u7f6e\u9009\u9879\u5bf9\u8054\u7ed3\uff08join\uff09\u91cd\u6392\u5e8f\u548c\u6ea2\u51fa\u8fdb\u884c\u4e00\u4e9b\u8ba1\u5212\u8c03\u6574\u3002\n \n-Depending on the use case, a configuration can be split into multiple files. Therefore, environment files can be created for general purposes (*defaults environment file* using `--defaults`) as well as on a per-session basis (*session environment file* using `--environment`). Every CLI session is initialized with the default properties followed by the session properties. For example, the defaults environment file could specify all table sources that should be available for querying in every session whereas the session environment file only declares a specific state retention time and parallelism. Both default and session environment files can be passed when starting the CLI application. If no default environment file has been specified, the SQL Client searches for `./conf/sql-client-defaults.yaml` in Flink's configuration directory.\n+\u6839\u636e\u4f7f\u7528\u60c5\u51b5\uff0c\u914d\u7f6e\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3a\u591a\u4e2a\u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff08\u7528 `--defaults` \u6307\u5b9a*\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u4ee5\u53ca\u57fa\u4e8e\u6bcf\u4e2a\u4f1a\u8bdd\uff08\u7528 `--environment` \u6307\u5b9a*\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u6765\u521b\u5efa\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u3002\u6bcf\u4e2a CLI \u4f1a\u8bdd\u5747\u4f1a\u88ab\u5c5e\u4e8e session \u5c5e\u6027\u7684\u9ed8\u8ba4\u5c5e\u6027\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u6307\u5b9a\u5728\u6bcf\u4e2a\u4f1a\u8bdd\u4e2d\u90fd\u53ef\u7528\u4e8e\u67e5\u8be2\u7684\u6240\u6709 table source\uff0c\u800c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4ec5\u58f0\u660e\u7279\u5b9a\u7684\u72b6\u6001\u4fdd\u7559\u65f6\u95f4\u548c\u5e76\u884c\u6027\u3002\u542f\u52a8 CLI \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u548c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u90fd\u53ef\u4ee5\u88ab\u6307\u5b9a\u3002\u5982\u679c\u672a\u6307\u5b9a\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff0c\u5219 SQL \u5ba2\u6237\u7aef\u5c06\u5728 Flink \u7684\u914d\u7f6e\u76ee\u5f55\u4e2d\u641c\u7d22 `./conf/sql-client-defaults.yaml`\u3002\n \n-<span class=\"label label-danger\">Attention</span> Properties that have been set within a CLI session (e.g. using the `SET` command) have highest precedence:\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728 CLI \u4f1a\u8bdd\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\uff08\u5982 `SET` \u547d\u4ee4\uff09\u4f18\u5148\u7ea7\u6700\u9ad8\uff1a\n \n {% highlight text %}\n CLI commands > session environment file > defaults environment file\n {% endhighlight %}\n \n-#### Restart Strategies\n+#### \u91cd\u542f\u7b56\u7565\uff08Restart Strategies\uff09\n \n-Restart strategies control how Flink jobs are restarted in case of a failure. Similar to [global restart strategies]({{ site.baseurl }}/dev/restart_strategies.html) for a Flink cluster, a more fine-grained restart configuration can be declared in an environment file.\n+\u91cd\u542f\u7b56\u7565\u63a7\u5236 Flink \u4f5c\u4e1a\u5931\u8d25\u65f6\u7684\u91cd\u542f\u65b9\u5f0f\u3002\u4e0e Flink \u96c6\u7fa4\u7684[\u5168\u5c40\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u76f8\u4f3c\uff0c\u66f4\u7ec6\u7cbe\u5ea6\u7684\u91cd\u542f\u914d\u7f6e\u53ef\u4ee5\u5728\u4e00\u4e2a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u3002\n \n-The following strategies are supported:\n+Flink \u652f\u6301\u4ee5\u4e0b\u7b56\u7565\uff1a\n \n {% highlight yaml %}\n execution:\n-  # falls back to the global strategy defined in flink-conf.yaml\n+  # \u9000\u56de\u5230 flink-conf.yaml \u4e2d\u5b9a\u4e49\u7684\u5168\u5c40\u7b56\u7565\n   restart-strategy:\n     type: fallback\n \n-  # job fails directly and no restart is attempted\n+  # \u4f5c\u4e1a\u76f4\u63a5\u5931\u8d25\u5e76\u4e14\u4e0d\u5c1d\u8bd5\u91cd\u542f\n   restart-strategy:\n     type: none\n \n-  # attempts a given number of times to restart the job\n+  # \u7ed9\u5b9a\u5c1d\u8bd5\u91cd\u65b0\u542f\u52a8\u4f5c\u4e1a\u7684\u6b21\u6570\n   restart-strategy:\n     type: fixed-delay\n-    attempts: 3      # retries before job is declared as failed (default: Integer.MAX_VALUE)\n-    delay: 10000     # delay in ms between retries (default: 10 s)\n+    attempts: 3      # \u4f5c\u4e1a\u88ab\u5ba3\u544a\u5931\u8d25\u524d\u7684\u91cd\u8bd5\u6b21\u6570\uff08\u9ed8\u8ba4\uff1aInteger.MAX_VALUE\uff09\n+    delay: 10000     # \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff08\u9ed8\u8ba4\uff1a10 \u79d2\uff09\n \n-  # attempts as long as the maximum number of failures per time interval is not exceeded\n+  # \u53ea\u8981\u4e0d\u8d85\u8fc7\u6bcf\u4e2a\u65f6\u95f4\u95f4\u9694\u7684\u6700\u5927\u6545\u969c\u6570\u5c31\u7ee7\u7eed\u5c1d\u8bd5\n   restart-strategy:\n     type: failure-rate\n-    max-failures-per-interval: 1   # retries in interval until failing (default: 1)\n-    failure-rate-interval: 60000   # measuring interval in ms for failure rate\n-    delay: 10000                   # delay in ms between retries (default: 10 s)\n+    max-failures-per-interval: 1   # \u6bcf\u4e2a\u95f4\u9694\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\uff08\u9ed8\u8ba4\uff1a1\uff09\n+    failure-rate-interval: 60000   # \u76d1\u6d4b\u5931\u8d25\u7387\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\n+    delay: 10000                   # \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff08\u9ed8\u8ba4\uff1a10 \u79d2\uff09\n {% endhighlight %}\n \n {% top %}\n \n-### Dependencies\n+### \u4f9d\u8d56\n \n-The SQL Client does not require to setup a Java project using Maven or SBT. Instead, you can pass the dependencies as regular JAR files that get submitted to the cluster. You can either specify each JAR file separately (using `--jar`) or define entire library directories (using `--library`). For connectors to external systems (such as Apache Kafka) and corresponding data formats (such as JSON), Flink provides **ready-to-use JAR bundles**. These JAR files can be downloaded for each release from the Maven central repository.\n+SQL \u5ba2\u6237\u7aef\u4e0d\u8981\u6c42\u7528 Maven \u6216\u8005 SBT \u8bbe\u7f6e Java \u9879\u76ee\u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4ee5\u5e38\u89c4\u7684 JAR \u5305\u7ed9\u96c6\u7fa4\u63d0\u4ea4\u4f9d\u8d56\u9879\u3002\u4f60\u4e5f\u53ef\u4ee5\u5206\u522b\uff08\u7528 `--jar`\uff09\u6307\u5b9a\u6bcf\u4e00\u4e2a JAR \u5305\u6216\u8005\uff08\u7528 `--library`\uff09\u5b9a\u4e49\u6574\u4e2a library \u4f9d\u8d56\u5e93\u3002\u4e3a\u8fde\u63a5\u6269\u5c55\u7cfb\u7edf\uff08\u5982 Apache Kafka\uff09\u548c\u76f8\u5e94\u7684\u6570\u636e\u683c\u5f0f\uff08\u5982 JSON\uff09\uff0cFlink\u63d0\u4f9b\u4e86**\u5373\u7528\u578b JAR \u6346\u7ed1\u5305\uff08ready-to-use JAR bundles\uff09**\u3002\u8fd9\u4e9b JAR \u5305\u5404\u4e2a\u53d1\u884c\u7248\u90fd\u53ef\u4ee5\u4ece Maven \u4e2d\u592e\u5e93\u4e2d\u4e0b\u8f7d\u5230\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ1MDAxOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo1ODo0OFrOGQia2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwOTo1ODo0OFrOGQia2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NDMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u63d0\u4f9b\u7684 SQL JARs \u548c\u4f7f\u7528\u6587\u6863\u7684\u5b8c\u6574\u6e05\u5355\u53ef\u4ee5\u5728 [\u8fde\u63a5\u6269\u5c55\u7cfb\u7edf\u9875\u9762](connect.html)\u4e2d\u627e\u5230\u3002\n          \n          \n            \n            \u63d0\u4f9b\u7684 SQL JARs \u548c\u4f7f\u7528\u6587\u6863\u7684\u5b8c\u6574\u6e05\u5355\u53ef\u4ee5\u5728[\u8fde\u63a5\u6269\u5c55\u7cfb\u7edf\u9875\u9762](connect.html)\u4e2d\u627e\u5230\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r419994329", "createdAt": "2020-05-05T09:58:48Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -212,98 +215,96 @@ catalogs:\n      default-database: mydb2\n      hive-conf-dir: ...\n \n-# Properties that change the fundamental execution behavior of a table program.\n+# \u6539\u53d8\u8868\u7a0b\u5e8f\u57fa\u672c\u7684\u6267\u884c\u884c\u4e3a\u5c5e\u6027\u3002\n \n execution:\n-  planner: blink                    # optional: either 'blink' (default) or 'old'\n-  type: streaming                   # required: execution mode either 'batch' or 'streaming'\n-  result-mode: table                # required: either 'table' or 'changelog'\n-  max-table-result-rows: 1000000    # optional: maximum number of maintained rows in\n-                                    #   'table' mode (1000000 by default, smaller 1 means unlimited)\n-  time-characteristic: event-time   # optional: 'processing-time' or 'event-time' (default)\n-  parallelism: 1                    # optional: Flink's parallelism (1 by default)\n-  periodic-watermarks-interval: 200 # optional: interval for periodic watermarks (200 ms by default)\n-  max-parallelism: 16               # optional: Flink's maximum parallelism (128 by default)\n-  min-idle-state-retention: 0       # optional: table program's minimum idle state time\n-  max-idle-state-retention: 0       # optional: table program's maximum idle state time\n-  current-catalog: catalog_1        # optional: name of the current catalog of the session ('default_catalog' by default)\n-  current-database: mydb1           # optional: name of the current database of the current catalog\n-                                    #   (default database of the current catalog by default)\n-  restart-strategy:                 # optional: restart strategy\n-    type: fallback                  #   \"fallback\" to global restart strategy by default\n-\n-# Configuration options for adjusting and tuning table programs.\n-\n-# A full list of options and their default values can be found\n-# on the dedicated \"Configuration\" page.\n+  planner: blink                    # \u53ef\u9009\uff1a 'blink' \uff08\u9ed8\u8ba4\uff09\u6216 'old'\n+  type: streaming                   # \u5fc5\u9009\uff1a\u6267\u884c\u6a21\u5f0f\u4e3a 'batch' \u6216 'streaming'\n+  result-mode: table                # \u5fc5\u9009\uff1a'table' \u6216 'changelog'\n+  max-table-result-rows: 1000000    # \u53ef\u9009\uff1a'table' \u6a21\u5f0f\u4e0b\u53ef\u7ef4\u62a4\u7684\u6700\u5927\u884c\u6570\uff08\u9ed8\u8ba4\u4e3a 1000000\uff0c\u5c0f\u4e8e 1 \u5219\u8868\u793a\u65e0\u9650\u5236\uff09\n+  time-characteristic: event-time   # \u53ef\u9009\uff1a 'processing-time' \u6216 'event-time' \uff08\u9ed8\u8ba4\uff09\n+  parallelism: 1                    # \u53ef\u9009\uff1aFlink \u7684\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4\u4e3a 1\uff09\n+  periodic-watermarks-interval: 200 # \u53ef\u9009\uff1a\u5468\u671f\u6027 watermarks \u7684\u95f4\u9694\u65f6\u95f4\uff08\u9ed8\u8ba4 200 ms\uff09\n+  max-parallelism: 16               # \u53ef\u9009\uff1aFlink \u7684\u6700\u5927\u5e76\u884c\u6570\u91cf\uff08\u9ed8\u8ba4 128\uff09\n+  min-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5c0f\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  max-idle-state-retention: 0       # \u53ef\u9009\uff1a\u8868\u7a0b\u5e8f\u7684\u6700\u5927\u7a7a\u95f2\u72b6\u6001\u65f6\u95f4\n+  current-catalog: catalog_1        # \u53ef\u9009\uff1a\u5f53\u524d\u4f1a\u8bdd catalog \u7684\u540d\u79f0\uff08\u9ed8\u8ba4\u4e3a 'default_catalog'\uff09\n+  current-database: mydb1           # \u53ef\u9009\uff1a\u5f53\u524d catalog \u7684\u5f53\u524d\u6570\u636e\u5e93\u540d\u79f0\n+                                    #   \uff08\u9ed8\u8ba4\u4e3a\u5f53\u524d catalog \u7684\u9ed8\u8ba4\u6570\u636e\u5e93\uff09\n+  restart-strategy:                 # \u53ef\u9009\uff1a\u91cd\u542f\u7b56\u7565\uff08restart-strategy\uff09\n+    type: fallback                  #   \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u201c\u56de\u9000\u201d\u5230\u5168\u5c40\u91cd\u542f\u7b56\u7565\n+\n+# \u7528\u4e8e\u8c03\u6574\u548c\u8c03\u4f18\u8868\u7a0b\u5e8f\u7684\u914d\u7f6e\u9009\u9879\u3002\n+\n+# \u5728\u4e13\u7528\u7684\u201d\u914d\u7f6e\u201d\u9875\u9762\u4e0a\u53ef\u4ee5\u627e\u5230\u5b8c\u6574\u7684\u9009\u9879\u5217\u8868\u53ca\u5176\u9ed8\u8ba4\u503c\u3002\n configuration:\n   table.optimizer.join-reorder-enabled: true\n   table.exec.spill-compression.enabled: true\n   table.exec.spill-compression.block-size: 128kb\n \n-# Properties that describe the cluster to which table programs are submitted to.\n+# \u63cf\u8ff0\u8868\u7a0b\u5e8f\u63d0\u4ea4\u96c6\u7fa4\u7684\u5c5e\u6027\u3002\n \n deployment:\n   response-timeout: 5000\n {% endhighlight %}\n \n-This configuration:\n+\u4e0a\u8ff0\u914d\u7f6e\uff1a\n \n-- defines an environment with a table source `MyTableSource` that reads from a CSV file,\n-- defines a view `MyCustomView` that declares a virtual table using a SQL query,\n-- defines a user-defined function `myUDF` that can be instantiated using the class name and two constructor parameters,\n-- connects to two Hive catalogs and uses `catalog_1` as the current catalog with `mydb1` as the current database of the catalog,\n-- uses the blink planner in streaming mode for running statements with event-time characteristic and a parallelism of 1,\n-- runs exploratory queries in the `table` result mode,\n-- and makes some planner adjustments around join reordering and spilling via configuration options.\n+- \u5b9a\u4e49\u4e00\u4e2a\u4ece CSV \u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684 table source ``MyTableSource` \u6240\u9700\u7684\u73af\u5883\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u89c6\u56fe `MyCustomView` \uff0c\u8be5\u89c6\u56fe\u662f\u7528 SQL \u67e5\u8be2\u58f0\u660e\u7684\u865a\u62df\u8868\uff0c\n+- \u5b9a\u4e49\u4e86\u4e00\u4e2a\u7528\u6237\u81ea\u5b9a\u4e49\u51fd\u6570 `myUDF`\uff0c\u8be5\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u7c7b\u540d\u548c\u4e24\u4e2a\u6784\u9020\u51fd\u6570\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\n+- \u8fde\u63a5\u5230\u4e24\u4e2a Hive catalogs \u5e76\u7528 `catalog_1` \u6765\u4f5c\u4e3a\u5f53\u524d\u76ee\u5f55\uff0c\u7528 `mydb1` \u6765\u4f5c\u4e3a\u8be5\u76ee\u5f55\u7684\u5f53\u524d\u6570\u636e\u5e93\uff0c\n+- streaming \u6a21\u5f0f\u4e0b\u7528 blink planner \u6765\u8fd0\u884c\u65f6\u95f4\u7279\u5f81\u4e3a event-time \u548c\u5e76\u884c\u5ea6\u4e3a 1 \u7684\u8bed\u53e5\uff0c\n+- \u5728 `table` \u7ed3\u679c\u6a21\u5f0f\u4e0b\u8fd0\u884c\u8bd5\u63a2\u6027\u7684\uff08exploratory\uff09\u7684\u67e5\u8be2\uff0c\n+- \u5e76\u901a\u8fc7\u914d\u7f6e\u9009\u9879\u5bf9\u8054\u7ed3\uff08join\uff09\u91cd\u6392\u5e8f\u548c\u6ea2\u51fa\u8fdb\u884c\u4e00\u4e9b\u8ba1\u5212\u8c03\u6574\u3002\n \n-Depending on the use case, a configuration can be split into multiple files. Therefore, environment files can be created for general purposes (*defaults environment file* using `--defaults`) as well as on a per-session basis (*session environment file* using `--environment`). Every CLI session is initialized with the default properties followed by the session properties. For example, the defaults environment file could specify all table sources that should be available for querying in every session whereas the session environment file only declares a specific state retention time and parallelism. Both default and session environment files can be passed when starting the CLI application. If no default environment file has been specified, the SQL Client searches for `./conf/sql-client-defaults.yaml` in Flink's configuration directory.\n+\u6839\u636e\u4f7f\u7528\u60c5\u51b5\uff0c\u914d\u7f6e\u53ef\u4ee5\u88ab\u62c6\u5206\u4e3a\u591a\u4e2a\u6587\u4ef6\u3002\u56e0\u6b64\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff08\u7528 `--defaults` \u6307\u5b9a*\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u4ee5\u53ca\u57fa\u4e8e\u6bcf\u4e2a\u4f1a\u8bdd\uff08\u7528 `--environment` \u6307\u5b9a*\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6*\uff09\u6765\u521b\u5efa\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u3002\u6bcf\u4e2a CLI \u4f1a\u8bdd\u5747\u4f1a\u88ab\u5c5e\u4e8e session \u5c5e\u6027\u7684\u9ed8\u8ba4\u5c5e\u6027\u521d\u59cb\u5316\u3002\u4f8b\u5982\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u53ef\u4ee5\u6307\u5b9a\u5728\u6bcf\u4e2a\u4f1a\u8bdd\u4e2d\u90fd\u53ef\u7528\u4e8e\u67e5\u8be2\u7684\u6240\u6709 table source\uff0c\u800c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4ec5\u58f0\u660e\u7279\u5b9a\u7684\u72b6\u6001\u4fdd\u7559\u65f6\u95f4\u548c\u5e76\u884c\u6027\u3002\u542f\u52a8 CLI \u5e94\u7528\u7a0b\u5e8f\u65f6\uff0c\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u548c\u4f1a\u8bdd\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u90fd\u53ef\u4ee5\u88ab\u6307\u5b9a\u3002\u5982\u679c\u672a\u6307\u5b9a\u9ed8\u8ba4\u73af\u5883\u914d\u7f6e\u6587\u4ef6\uff0c\u5219 SQL \u5ba2\u6237\u7aef\u5c06\u5728 Flink \u7684\u914d\u7f6e\u76ee\u5f55\u4e2d\u641c\u7d22 `./conf/sql-client-defaults.yaml`\u3002\n \n-<span class=\"label label-danger\">Attention</span> Properties that have been set within a CLI session (e.g. using the `SET` command) have highest precedence:\n+<span class=\"label label-danger\">\u6ce8\u610f</span> \u5728 CLI \u4f1a\u8bdd\u4e2d\u8bbe\u7f6e\u7684\u5c5e\u6027\uff08\u5982 `SET` \u547d\u4ee4\uff09\u4f18\u5148\u7ea7\u6700\u9ad8\uff1a\n \n {% highlight text %}\n CLI commands > session environment file > defaults environment file\n {% endhighlight %}\n \n-#### Restart Strategies\n+#### \u91cd\u542f\u7b56\u7565\uff08Restart Strategies\uff09\n \n-Restart strategies control how Flink jobs are restarted in case of a failure. Similar to [global restart strategies]({{ site.baseurl }}/dev/restart_strategies.html) for a Flink cluster, a more fine-grained restart configuration can be declared in an environment file.\n+\u91cd\u542f\u7b56\u7565\u63a7\u5236 Flink \u4f5c\u4e1a\u5931\u8d25\u65f6\u7684\u91cd\u542f\u65b9\u5f0f\u3002\u4e0e Flink \u96c6\u7fa4\u7684[\u5168\u5c40\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u76f8\u4f3c\uff0c\u66f4\u7ec6\u7cbe\u5ea6\u7684\u91cd\u542f\u914d\u7f6e\u53ef\u4ee5\u5728\u4e00\u4e2a\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u58f0\u660e\u3002\n \n-The following strategies are supported:\n+Flink \u652f\u6301\u4ee5\u4e0b\u7b56\u7565\uff1a\n \n {% highlight yaml %}\n execution:\n-  # falls back to the global strategy defined in flink-conf.yaml\n+  # \u9000\u56de\u5230 flink-conf.yaml \u4e2d\u5b9a\u4e49\u7684\u5168\u5c40\u7b56\u7565\n   restart-strategy:\n     type: fallback\n \n-  # job fails directly and no restart is attempted\n+  # \u4f5c\u4e1a\u76f4\u63a5\u5931\u8d25\u5e76\u4e14\u4e0d\u5c1d\u8bd5\u91cd\u542f\n   restart-strategy:\n     type: none\n \n-  # attempts a given number of times to restart the job\n+  # \u7ed9\u5b9a\u5c1d\u8bd5\u91cd\u65b0\u542f\u52a8\u4f5c\u4e1a\u7684\u6b21\u6570\n   restart-strategy:\n     type: fixed-delay\n-    attempts: 3      # retries before job is declared as failed (default: Integer.MAX_VALUE)\n-    delay: 10000     # delay in ms between retries (default: 10 s)\n+    attempts: 3      # \u4f5c\u4e1a\u88ab\u5ba3\u544a\u5931\u8d25\u524d\u7684\u91cd\u8bd5\u6b21\u6570\uff08\u9ed8\u8ba4\uff1aInteger.MAX_VALUE\uff09\n+    delay: 10000     # \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff08\u9ed8\u8ba4\uff1a10 \u79d2\uff09\n \n-  # attempts as long as the maximum number of failures per time interval is not exceeded\n+  # \u53ea\u8981\u4e0d\u8d85\u8fc7\u6bcf\u4e2a\u65f6\u95f4\u95f4\u9694\u7684\u6700\u5927\u6545\u969c\u6570\u5c31\u7ee7\u7eed\u5c1d\u8bd5\n   restart-strategy:\n     type: failure-rate\n-    max-failures-per-interval: 1   # retries in interval until failing (default: 1)\n-    failure-rate-interval: 60000   # measuring interval in ms for failure rate\n-    delay: 10000                   # delay in ms between retries (default: 10 s)\n+    max-failures-per-interval: 1   # \u6bcf\u4e2a\u95f4\u9694\u91cd\u8bd5\u7684\u6700\u5927\u6b21\u6570\uff08\u9ed8\u8ba4\uff1a1\uff09\n+    failure-rate-interval: 60000   # \u76d1\u6d4b\u5931\u8d25\u7387\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\n+    delay: 10000                   # \u91cd\u8bd5\u4e4b\u95f4\u7684\u95f4\u9694\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff08\u9ed8\u8ba4\uff1a10 \u79d2\uff09\n {% endhighlight %}\n \n {% top %}\n \n-### Dependencies\n+### \u4f9d\u8d56\n \n-The SQL Client does not require to setup a Java project using Maven or SBT. Instead, you can pass the dependencies as regular JAR files that get submitted to the cluster. You can either specify each JAR file separately (using `--jar`) or define entire library directories (using `--library`). For connectors to external systems (such as Apache Kafka) and corresponding data formats (such as JSON), Flink provides **ready-to-use JAR bundles**. These JAR files can be downloaded for each release from the Maven central repository.\n+SQL \u5ba2\u6237\u7aef\u4e0d\u8981\u6c42\u7528 Maven \u6216\u8005 SBT \u8bbe\u7f6e Java \u9879\u76ee\u3002\u76f8\u53cd\uff0c\u4f60\u53ef\u4ee5\u4ee5\u5e38\u89c4\u7684 JAR \u5305\u7ed9\u96c6\u7fa4\u63d0\u4ea4\u4f9d\u8d56\u9879\u3002\u4f60\u4e5f\u53ef\u4ee5\u5206\u522b\uff08\u7528 `--jar`\uff09\u6307\u5b9a\u6bcf\u4e00\u4e2a JAR \u5305\u6216\u8005\uff08\u7528 `--library`\uff09\u5b9a\u4e49\u6574\u4e2a library \u4f9d\u8d56\u5e93\u3002\u4e3a\u8fde\u63a5\u6269\u5c55\u7cfb\u7edf\uff08\u5982 Apache Kafka\uff09\u548c\u76f8\u5e94\u7684\u6570\u636e\u683c\u5f0f\uff08\u5982 JSON\uff09\uff0cFlink\u63d0\u4f9b\u4e86**\u5373\u7528\u578b JAR \u6346\u7ed1\u5305\uff08ready-to-use JAR bundles\uff09**\u3002\u8fd9\u4e9b JAR \u5305\u5404\u4e2a\u53d1\u884c\u7248\u90fd\u53ef\u4ee5\u4ece Maven \u4e2d\u592e\u5e93\u4e2d\u4e0b\u8f7d\u5230\u3002\n \n-The full list of offered SQL JARs and documentation about how to use them can be found on the [connection to external systems page](connect.html).\n+\u63d0\u4f9b\u7684 SQL JARs \u548c\u4f7f\u7528\u6587\u6863\u7684\u5b8c\u6574\u6e05\u5355\u53ef\u4ee5\u5728 [\u8fde\u63a5\u6269\u5c55\u7cfb\u7edf\u9875\u9762](connect.html)\u4e2d\u627e\u5230\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ1Nzk3OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowMTowOVrOGQifxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowMTowOVrOGQifxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NTU4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `connector ` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002\n          \n          \n            \n            `connector` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r419995588", "createdAt": "2020-05-05T10:01:09Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -344,31 +345,30 @@ tables:\n         proctime: true\n {% endhighlight %}\n \n-The resulting schema of the `TaxiRide` table contains most of the fields of the JSON schema. Furthermore, it adds a rowtime attribute `rowTime` and processing-time attribute `procTime`.\n+`TaxiRide` \u8868\u7684\u7ed3\u679c\u683c\u5f0f\u4e0e\u7edd\u5927\u591a\u6570\u7684 JSON \u683c\u5f0f\u76f8\u4f3c\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6dfb\u52a0\u4e86 rowtime \u5c5e\u6027 `rowTime` \u548c processing-time \u5c5e\u6027 `procTime`\u3002\n \n-Both `connector` and `format` allow to define a property version (which is currently version `1`) for future backwards compatibility.\n+`connector ` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ2Mzg0OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowMjo1MVrOGQijWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowMjo1MVrOGQijWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5NjUwNg==", "bodyText": "\u201dSQL \u5ba2\u6237\u7aef\u5141\u8bb8\u7528\u6237\u521b\u5efa\u7528\u6237\u7684\u3001\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u6765\u8fdb\u884c SQL \u67e5\u8be2\u3002\u201c \u6539\u6210 \u201dSQL \u5ba2\u6237\u7aef\u5141\u8bb8\u7528\u6237\u521b\u5efa\u7528\u6237\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u6765\u8fdb\u884c SQL \u67e5\u8be2\u3002\u201c\u4f1a\u4e0d\u4f1a\u66f4\u597d\u4e00\u4e9b\uff1f\n\u201d\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\u4ec5\u9650\u4e8e\u53ea\u80fd\u7528 Java/Scala \u7f16\u5199\u7684\u7c7b\u4ee5\u53ca Python \u6587\u4ef6\u3002\u201c -> \"\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\u4ec5\u9650\u4e8e Java/Scala \u7f16\u5199\u7684\u7c7b\u4ee5\u53ca Python \u6587\u4ef6\u3002\"", "url": "https://github.com/apache/flink/pull/11961#discussion_r419996506", "createdAt": "2020-05-05T10:02:51Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -344,31 +345,30 @@ tables:\n         proctime: true\n {% endhighlight %}\n \n-The resulting schema of the `TaxiRide` table contains most of the fields of the JSON schema. Furthermore, it adds a rowtime attribute `rowTime` and processing-time attribute `procTime`.\n+`TaxiRide` \u8868\u7684\u7ed3\u679c\u683c\u5f0f\u4e0e\u7edd\u5927\u591a\u6570\u7684 JSON \u683c\u5f0f\u76f8\u4f3c\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6dfb\u52a0\u4e86 rowtime \u5c5e\u6027 `rowTime` \u548c processing-time \u5c5e\u6027 `procTime`\u3002\n \n-Both `connector` and `format` allow to define a property version (which is currently version `1`) for future backwards compatibility.\n+`connector ` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002\n \n {% top %}\n \n-### User-defined Functions\n-The SQL Client allows users to create custom, user-defined functions to be used in SQL queries. Currently, these functions are restricted to be defined programmatically in Java/Scala classes or Python files.\n-\n-In order to provide a Java/Scala user-defined function, you need to first implement and compile a function class that extends `ScalarFunction`, `AggregateFunction` or `TableFunction` (see [User-defined Functions]({{ site.baseurl }}/dev/table/functions/udfs.html)). One or more functions can then be packaged into a dependency JAR for the SQL Client.\n+### \u81ea\u5b9a\u4e49\u51fd\u6570\uff08User-defined Functions\uff09\n+SQL \u5ba2\u6237\u7aef\u5141\u8bb8\u7528\u6237\u521b\u5efa\u7528\u6237\u7684\u3001\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u6765\u8fdb\u884c SQL \u67e5\u8be2\u3002\u5f53\u524d\uff0c\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\u4ec5\u9650\u4e8e\u53ea\u80fd\u7528 Java/Scala \u7f16\u5199\u7684\u7c7b\u4ee5\u53ca Python \u6587\u4ef6\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ3NTk5OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNjoyM1rOGQiq4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNjoyM1rOGQiq4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5ODQzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u4e3a\u63d0\u4f9b Java/Scala \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9996\u5148\u9700\u8981\u5b9e\u73b0\u548c\u7f16\u8bd1\u51fd\u6570\u7c7b\uff0c\u8be5\u51fd\u6570\u7ee7\u627f\u81ea `ScalarFunction` \u3001 `AggregateFunction` \u6216 `TableFunction`\uff08\u89c1[\u81ea\u5b9a\u4e49\u51fd\u6570]({{ site.baseurl }}/zh/dev/table/functions/udfs.html)\uff09\u3002\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u53ef\u4ee5\u6253\u5305\u5230 SQL \u5ba2\u6237\u7aef\u7684 JAR \u4f9d\u8d56\u4e2d\u3002\n          \n          \n            \n            \u4e3a\u63d0\u4f9b Java/Scala \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9996\u5148\u9700\u8981\u5b9e\u73b0\u548c\u7f16\u8bd1\u51fd\u6570\u7c7b\uff0c\u8be5\u51fd\u6570\u7ee7\u627f\u81ea `ScalarFunction`\u3001 `AggregateFunction` \u6216 `TableFunction`\uff08\u89c1[\u81ea\u5b9a\u4e49\u51fd\u6570]({{ site.baseurl }}/zh/dev/table/functions/udfs.html)\uff09\u3002\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u53ef\u4ee5\u6253\u5305\u5230 SQL \u5ba2\u6237\u7aef\u7684 JAR \u4f9d\u8d56\u4e2d\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r419998435", "createdAt": "2020-05-05T10:06:23Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -344,31 +345,30 @@ tables:\n         proctime: true\n {% endhighlight %}\n \n-The resulting schema of the `TaxiRide` table contains most of the fields of the JSON schema. Furthermore, it adds a rowtime attribute `rowTime` and processing-time attribute `procTime`.\n+`TaxiRide` \u8868\u7684\u7ed3\u679c\u683c\u5f0f\u4e0e\u7edd\u5927\u591a\u6570\u7684 JSON \u683c\u5f0f\u76f8\u4f3c\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6dfb\u52a0\u4e86 rowtime \u5c5e\u6027 `rowTime` \u548c processing-time \u5c5e\u6027 `procTime`\u3002\n \n-Both `connector` and `format` allow to define a property version (which is currently version `1`) for future backwards compatibility.\n+`connector ` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002\n \n {% top %}\n \n-### User-defined Functions\n-The SQL Client allows users to create custom, user-defined functions to be used in SQL queries. Currently, these functions are restricted to be defined programmatically in Java/Scala classes or Python files.\n-\n-In order to provide a Java/Scala user-defined function, you need to first implement and compile a function class that extends `ScalarFunction`, `AggregateFunction` or `TableFunction` (see [User-defined Functions]({{ site.baseurl }}/dev/table/functions/udfs.html)). One or more functions can then be packaged into a dependency JAR for the SQL Client.\n+### \u81ea\u5b9a\u4e49\u51fd\u6570\uff08User-defined Functions\uff09\n+SQL \u5ba2\u6237\u7aef\u5141\u8bb8\u7528\u6237\u521b\u5efa\u7528\u6237\u7684\u3001\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u6765\u8fdb\u884c SQL \u67e5\u8be2\u3002\u5f53\u524d\uff0c\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\u4ec5\u9650\u4e8e\u53ea\u80fd\u7528 Java/Scala \u7f16\u5199\u7684\u7c7b\u4ee5\u53ca Python \u6587\u4ef6\u3002\n \n-In order to provide a Python user-defined function, you need to write a Python function and decorate it with the `pyflink.table.udf.udf` or `pyflink.table.udf.udtf` decorator (see [Python UDFs]({{ site.baseurl }}/dev/table/python/python_udfs.html)). One or more functions can then be placed into a Python file. The Python file and related dependencies need to be specified via the configuration (see [Python Configuration]({{ site.baseurl }}/dev/table/python/python_config.html)) in environment file or the command line options (see [Command Line Usage]({{ site.baseurl }}/ops/cli.html#usage)).\n+\u4e3a\u63d0\u4f9b Java/Scala \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9996\u5148\u9700\u8981\u5b9e\u73b0\u548c\u7f16\u8bd1\u51fd\u6570\u7c7b\uff0c\u8be5\u51fd\u6570\u7ee7\u627f\u81ea `ScalarFunction` \u3001 `AggregateFunction` \u6216 `TableFunction`\uff08\u89c1[\u81ea\u5b9a\u4e49\u51fd\u6570]({{ site.baseurl }}/zh/dev/table/functions/udfs.html)\uff09\u3002\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u53ef\u4ee5\u6253\u5305\u5230 SQL \u5ba2\u6237\u7aef\u7684 JAR \u4f9d\u8d56\u4e2d\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 331}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ4MDUzOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNzo0OFrOGQitnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNzo0OFrOGQitnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTEzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u4e3a\u63d0\u4f9b Python \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9700\u8981\u7f16\u5199 Python \u51fd\u6570\u5e76\u4e14\u7528\u88c5\u9970\u5668 `pyflink.table.udf.udf` \u6216 `pyflink.table.udf.udtf` \u6765\u88c5\u9970\uff08\u89c1[Python UDFs]({{ site.baseurl }}/zh/dev/table/python/python_udfs.html))\uff09\u3002Python \u6587\u4ef6\u4e2d\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u3002\u5176Python \u6587\u4ef6\u548c\u76f8\u5173\u4f9d\u8d56\u9700\u8981\u901a\u8fc7\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6216\u547d\u4ee4\u884c\u9009\u9879\uff08\u89c1 [\u547d\u4ee4\u884c\u7528\u6cd5]({{ site.baseurl }}/zh/ops/cli.html#usage)\uff09\u914d\u7f6e\u4e2d\u7279\u522b\u6307\u5b9a\uff08\u89c1 [Python \u914d\u7f6e]({{ site.baseurl }}/zh/dev/table/python/python_config.html)\uff09\u3002\n          \n          \n            \n            \u4e3a\u63d0\u4f9b Python \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9700\u8981\u7f16\u5199 Python \u51fd\u6570\u5e76\u4e14\u7528\u88c5\u9970\u5668 `pyflink.table.udf.udf` \u6216 `pyflink.table.udf.udtf` \u6765\u88c5\u9970\uff08\u89c1 [Python UDFs]({{ site.baseurl }}/zh/dev/table/python/python_udfs.html))\uff09\u3002Python \u6587\u4ef6\u4e2d\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u3002\u5176Python \u6587\u4ef6\u548c\u76f8\u5173\u4f9d\u8d56\u9700\u8981\u901a\u8fc7\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6216\u547d\u4ee4\u884c\u9009\u9879\uff08\u89c1 [\u547d\u4ee4\u884c\u7528\u6cd5]({{ site.baseurl }}/zh/ops/cli.html#usage)\uff09\u914d\u7f6e\u4e2d\u7279\u522b\u6307\u5b9a\uff08\u89c1 [Python \u914d\u7f6e]({{ site.baseurl }}/zh/dev/table/python/python_config.html)\uff09\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r419999135", "createdAt": "2020-05-05T10:07:48Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -344,31 +345,30 @@ tables:\n         proctime: true\n {% endhighlight %}\n \n-The resulting schema of the `TaxiRide` table contains most of the fields of the JSON schema. Furthermore, it adds a rowtime attribute `rowTime` and processing-time attribute `procTime`.\n+`TaxiRide` \u8868\u7684\u7ed3\u679c\u683c\u5f0f\u4e0e\u7edd\u5927\u591a\u6570\u7684 JSON \u683c\u5f0f\u76f8\u4f3c\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6dfb\u52a0\u4e86 rowtime \u5c5e\u6027 `rowTime` \u548c processing-time \u5c5e\u6027 `procTime`\u3002\n \n-Both `connector` and `format` allow to define a property version (which is currently version `1`) for future backwards compatibility.\n+`connector ` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002\n \n {% top %}\n \n-### User-defined Functions\n-The SQL Client allows users to create custom, user-defined functions to be used in SQL queries. Currently, these functions are restricted to be defined programmatically in Java/Scala classes or Python files.\n-\n-In order to provide a Java/Scala user-defined function, you need to first implement and compile a function class that extends `ScalarFunction`, `AggregateFunction` or `TableFunction` (see [User-defined Functions]({{ site.baseurl }}/dev/table/functions/udfs.html)). One or more functions can then be packaged into a dependency JAR for the SQL Client.\n+### \u81ea\u5b9a\u4e49\u51fd\u6570\uff08User-defined Functions\uff09\n+SQL \u5ba2\u6237\u7aef\u5141\u8bb8\u7528\u6237\u521b\u5efa\u7528\u6237\u7684\u3001\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u6765\u8fdb\u884c SQL \u67e5\u8be2\u3002\u5f53\u524d\uff0c\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\u4ec5\u9650\u4e8e\u53ea\u80fd\u7528 Java/Scala \u7f16\u5199\u7684\u7c7b\u4ee5\u53ca Python \u6587\u4ef6\u3002\n \n-In order to provide a Python user-defined function, you need to write a Python function and decorate it with the `pyflink.table.udf.udf` or `pyflink.table.udf.udtf` decorator (see [Python UDFs]({{ site.baseurl }}/dev/table/python/python_udfs.html)). One or more functions can then be placed into a Python file. The Python file and related dependencies need to be specified via the configuration (see [Python Configuration]({{ site.baseurl }}/dev/table/python/python_config.html)) in environment file or the command line options (see [Command Line Usage]({{ site.baseurl }}/ops/cli.html#usage)).\n+\u4e3a\u63d0\u4f9b Java/Scala \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9996\u5148\u9700\u8981\u5b9e\u73b0\u548c\u7f16\u8bd1\u51fd\u6570\u7c7b\uff0c\u8be5\u51fd\u6570\u7ee7\u627f\u81ea `ScalarFunction` \u3001 `AggregateFunction` \u6216 `TableFunction`\uff08\u89c1[\u81ea\u5b9a\u4e49\u51fd\u6570]({{ site.baseurl }}/zh/dev/table/functions/udfs.html)\uff09\u3002\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u53ef\u4ee5\u6253\u5305\u5230 SQL \u5ba2\u6237\u7aef\u7684 JAR \u4f9d\u8d56\u4e2d\u3002\n \n-All functions must be declared in an environment file before being called. For each item in the list of `functions`, one must specify\n+\u4e3a\u63d0\u4f9b Python \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9700\u8981\u7f16\u5199 Python \u51fd\u6570\u5e76\u4e14\u7528\u88c5\u9970\u5668 `pyflink.table.udf.udf` \u6216 `pyflink.table.udf.udtf` \u6765\u88c5\u9970\uff08\u89c1[Python UDFs]({{ site.baseurl }}/zh/dev/table/python/python_udfs.html))\uff09\u3002Python \u6587\u4ef6\u4e2d\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u3002\u5176Python \u6587\u4ef6\u548c\u76f8\u5173\u4f9d\u8d56\u9700\u8981\u901a\u8fc7\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6216\u547d\u4ee4\u884c\u9009\u9879\uff08\u89c1 [\u547d\u4ee4\u884c\u7528\u6cd5]({{ site.baseurl }}/zh/ops/cli.html#usage)\uff09\u914d\u7f6e\u4e2d\u7279\u522b\u6307\u5b9a\uff08\u89c1 [Python \u914d\u7f6e]({{ site.baseurl }}/zh/dev/table/python/python_config.html)\uff09\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 334}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDQ4ODE4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxMDowNFrOGQiyWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxMDowNFrOGQiyWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMDM0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - \u58f0\u660e\u5168\u7a0b\u540d\u79f0\u7684 `fully-qualified-name`\uff0c\u5373\u51fd\u6570\u7684\u201c[module name].[object name]\u201d \n          \n          \n            \n            - \u58f0\u660e\u5168\u7a0b\u540d\u79f0\u7684 `fully-qualified-name`\uff0c\u5373\u51fd\u6570\u7684 \u201d[module name].[object name]\u201c", "url": "https://github.com/apache/flink/pull/11961#discussion_r420000347", "createdAt": "2020-05-05T10:10:04Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -344,31 +345,30 @@ tables:\n         proctime: true\n {% endhighlight %}\n \n-The resulting schema of the `TaxiRide` table contains most of the fields of the JSON schema. Furthermore, it adds a rowtime attribute `rowTime` and processing-time attribute `procTime`.\n+`TaxiRide` \u8868\u7684\u7ed3\u679c\u683c\u5f0f\u4e0e\u7edd\u5927\u591a\u6570\u7684 JSON \u683c\u5f0f\u76f8\u4f3c\u3002\u6b64\u5916\uff0c\u5b83\u8fd8\u6dfb\u52a0\u4e86 rowtime \u5c5e\u6027 `rowTime` \u548c processing-time \u5c5e\u6027 `procTime`\u3002\n \n-Both `connector` and `format` allow to define a property version (which is currently version `1`) for future backwards compatibility.\n+`connector ` \u548c `format` \u90fd\u5141\u8bb8\u5b9a\u4e49\u5c5e\u6027\u7248\u672c\uff08\u5f53\u524d\u7248\u672c\u4e3a `1` \uff09\u4ee5\u4fbf\u5c06\u6765\u5411\u540e\u517c\u5bb9\u3002\n \n {% top %}\n \n-### User-defined Functions\n-The SQL Client allows users to create custom, user-defined functions to be used in SQL queries. Currently, these functions are restricted to be defined programmatically in Java/Scala classes or Python files.\n-\n-In order to provide a Java/Scala user-defined function, you need to first implement and compile a function class that extends `ScalarFunction`, `AggregateFunction` or `TableFunction` (see [User-defined Functions]({{ site.baseurl }}/dev/table/functions/udfs.html)). One or more functions can then be packaged into a dependency JAR for the SQL Client.\n+### \u81ea\u5b9a\u4e49\u51fd\u6570\uff08User-defined Functions\uff09\n+SQL \u5ba2\u6237\u7aef\u5141\u8bb8\u7528\u6237\u521b\u5efa\u7528\u6237\u7684\u3001\u81ea\u5b9a\u4e49\u7684\u51fd\u6570\u6765\u8fdb\u884c SQL \u67e5\u8be2\u3002\u5f53\u524d\uff0c\u8fd9\u4e9b\u81ea\u5b9a\u4e49\u51fd\u6570\u4ec5\u9650\u4e8e\u53ea\u80fd\u7528 Java/Scala \u7f16\u5199\u7684\u7c7b\u4ee5\u53ca Python \u6587\u4ef6\u3002\n \n-In order to provide a Python user-defined function, you need to write a Python function and decorate it with the `pyflink.table.udf.udf` or `pyflink.table.udf.udtf` decorator (see [Python UDFs]({{ site.baseurl }}/dev/table/python/python_udfs.html)). One or more functions can then be placed into a Python file. The Python file and related dependencies need to be specified via the configuration (see [Python Configuration]({{ site.baseurl }}/dev/table/python/python_config.html)) in environment file or the command line options (see [Command Line Usage]({{ site.baseurl }}/ops/cli.html#usage)).\n+\u4e3a\u63d0\u4f9b Java/Scala \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9996\u5148\u9700\u8981\u5b9e\u73b0\u548c\u7f16\u8bd1\u51fd\u6570\u7c7b\uff0c\u8be5\u51fd\u6570\u7ee7\u627f\u81ea `ScalarFunction` \u3001 `AggregateFunction` \u6216 `TableFunction`\uff08\u89c1[\u81ea\u5b9a\u4e49\u51fd\u6570]({{ site.baseurl }}/zh/dev/table/functions/udfs.html)\uff09\u3002\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u53ef\u4ee5\u6253\u5305\u5230 SQL \u5ba2\u6237\u7aef\u7684 JAR \u4f9d\u8d56\u4e2d\u3002\n \n-All functions must be declared in an environment file before being called. For each item in the list of `functions`, one must specify\n+\u4e3a\u63d0\u4f9b Python \u7684\u81ea\u5b9a\u4e49\u51fd\u6570\uff0c\u4f60\u9700\u8981\u7f16\u5199 Python \u51fd\u6570\u5e76\u4e14\u7528\u88c5\u9970\u5668 `pyflink.table.udf.udf` \u6216 `pyflink.table.udf.udtf` \u6765\u88c5\u9970\uff08\u89c1[Python UDFs]({{ site.baseurl }}/zh/dev/table/python/python_udfs.html))\uff09\u3002Python \u6587\u4ef6\u4e2d\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u3002\u5176Python \u6587\u4ef6\u548c\u76f8\u5173\u4f9d\u8d56\u9700\u8981\u901a\u8fc7\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u6216\u547d\u4ee4\u884c\u9009\u9879\uff08\u89c1 [\u547d\u4ee4\u884c\u7528\u6cd5]({{ site.baseurl }}/zh/ops/cli.html#usage)\uff09\u914d\u7f6e\u4e2d\u7279\u522b\u6307\u5b9a\uff08\u89c1 [Python \u914d\u7f6e]({{ site.baseurl }}/zh/dev/table/python/python_config.html)\uff09\u3002\n \n-- a `name` under which the function is registered,\n-- the source of the function using `from` (restricted to be `class` (Java/Scala UDF) or `python` (Python UDF) for now),\n+\u6240\u6709\u51fd\u6570\u5728\u88ab\u8c03\u7528\u4e4b\u524d\uff0c\u5fc5\u987b\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u63d0\u524d\u58f0\u660e\u3002`functions` \u5217\u8868\u4e2d\u6bcf\u4e2a\u51fd\u6570\u7c7b\u90fd\u5fc5\u987b\u6307\u5b9a\n \n-The Java/Scala UDF must specify:\n+- \u7528\u6765\u6ce8\u518c\u51fd\u6570\u7684 `name`\uff0c\n+- \u51fd\u6570\u7684\u6765\u6e90 `from`\uff08\u76ee\u524d\u4ec5\u9650\u4e8e `class`\uff08Java/Scala UDF\uff09\u6216 `python`\uff08Python UDF\uff09\uff09\uff0c\n \n-- the `class` which indicates the fully qualified class name of the function and an optional list of `constructor` parameters for instantiation.\n+Java/Scala UDF \u5fc5\u987b\u6307\u5b9a\uff1a\n+- \u58f0\u660e\u4e86\u5168\u9650\u5b9a\u540d\u7684\u51fd\u6570\u7c7b `class` \u4ee5\u53ca\u7528\u4e8e\u5b9e\u4f8b\u5316\u7684 `constructor` \u53c2\u6570\u7684\u53ef\u9009\u5217\u8868\u3002\n \n-The Python UDF must specify:\n+Python UDF \u5fc5\u987b\u6307\u5b9a\uff1a\n \n-- the `fully-qualified-name` which indicates the fully qualified name, i.e the \"[module name].[object name]\" of the function.\n+- \u58f0\u660e\u5168\u7a0b\u540d\u79f0\u7684 `fully-qualified-name`\uff0c\u5373\u51fd\u6570\u7684\u201c[module name].[object name]\u201d ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 352}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUwNjM4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxNTo0NFrOGQi9lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxNTo0NFrOGQi9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMzIyMw==", "bodyText": "\u201d\u89c1 XXX\u201c \u6539\u6210 \u201d\u53c2\u8003\u201c \u662f\u4e0d\u662f\u4f1a\u66f4\u597d\u4e00\u4e9b\u5462", "url": "https://github.com/apache/flink/pull/11961#discussion_r420003223", "createdAt": "2020-05-05T10:15:44Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -469,18 +469,20 @@ execution:\n    current-database: mydb1\n {% endhighlight %}\n \n-For more information about catalogs, see [Catalogs]({{ site.baseurl }}/dev/table/catalogs.html).\n+\u66f4\u591a\u5173\u4e8e catalog \u7684\u5185\u5bb9\uff0c\u89c1 [Catalogs]({{ site.baseurl }}/zh/dev/table/catalogs.html)\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 444}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUxMDE5OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxNzowMFrOGQi_-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozNDo0OFrOGQ0RVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMzgzNQ==", "bodyText": "\u5206\u79bb\u7684 SQL \u67e5\u8be2\u8bfb\u8d77\u6765\u611f\u89c9\u6709\u70b9\u602a\u602a\u7684\uff0c\u8fd9\u4e2a\u5730\u65b9\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\u5417", "url": "https://github.com/apache/flink/pull/11961#discussion_r420003835", "createdAt": "2020-05-05T10:17:00Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -469,18 +469,20 @@ execution:\n    current-database: mydb1\n {% endhighlight %}\n \n-For more information about catalogs, see [Catalogs]({{ site.baseurl }}/dev/table/catalogs.html).\n+\u66f4\u591a\u5173\u4e8e catalog \u7684\u5185\u5bb9\uff0c\u89c1 [Catalogs]({{ site.baseurl }}/zh/dev/table/catalogs.html)\u3002\n+\n+<a name=\"detached-sql-queries\"></a>\n \n-Detached SQL Queries\n+\u5206\u79bb\u7684 SQL \u67e5\u8be2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 449}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NjgwNg==", "bodyText": "\u53ef\u80fd\u7528\u201cSQL \u5206\u79bb\u67e5\u8be2\u201d\u597d\u70b9\uff1f\u8fd9\u4e2a\u662f\u53c2\u7167\u5df2Merge\u7684\u7ffb\u8bd1", "url": "https://github.com/apache/flink/pull/11961#discussion_r420286806", "createdAt": "2020-05-05T17:34:48Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -469,18 +469,20 @@ execution:\n    current-database: mydb1\n {% endhighlight %}\n \n-For more information about catalogs, see [Catalogs]({{ site.baseurl }}/dev/table/catalogs.html).\n+\u66f4\u591a\u5173\u4e8e catalog \u7684\u5185\u5bb9\uff0c\u89c1 [Catalogs]({{ site.baseurl }}/zh/dev/table/catalogs.html)\u3002\n+\n+<a name=\"detached-sql-queries\"></a>\n \n-Detached SQL Queries\n+\u5206\u79bb\u7684 SQL \u67e5\u8be2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwMzgzNQ=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 449}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUxMzAyOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxODowMlrOGQjByQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozNTozNlrOGQ0TNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNDI5Nw==", "bodyText": "\u8fd9\u91cc\u662f\u4fdd\u7559\u4e86\u539f\u6587\u5417", "url": "https://github.com/apache/flink/pull/11961#discussion_r420004297", "createdAt": "2020-05-05T10:18:02Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -519,18 +521,18 @@ Job ID: 6f922fe5cba87406ff23ae4a7bb79044\n Web interface: http://localhost:8081\n {% endhighlight %}\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/zh/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\u63d0\u4ea4\u540e\uff0cSQL \u5ba2\u6237\u7aef\u4e0d\u8ffd\u8e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u4f5c\u4e1a\u72b6\u6001\u3002\u63d0\u4ea4\u540e\u53ef\u4ee5\u5173\u95ed CLI \u8fdb\u7a0b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u5206\u79bb\u7684\u67e5\u8be2\u3002Flink \u7684[\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u8d1f\u8d23\u5bb9\u9519\u3002\u53d6\u6d88\u67e5\u8be2\u53ef\u4ee5\u7528 Flink \u7684 web \u63a5\u53e3\u3001\u547d\u4ee4\u884c\u6216 REST API \u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 478}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4NzI4NA==", "bodyText": "\u662f\u7684\uff0c\u975e\u5e38\u4e0d\u597d\u610f\u601d\uff0c\u5df2\u5220\u9664\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r420287284", "createdAt": "2020-05-05T17:35:36Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -519,18 +521,18 @@ Job ID: 6f922fe5cba87406ff23ae4a7bb79044\n Web interface: http://localhost:8081\n {% endhighlight %}\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/zh/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\u63d0\u4ea4\u540e\uff0cSQL \u5ba2\u6237\u7aef\u4e0d\u8ffd\u8e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u4f5c\u4e1a\u72b6\u6001\u3002\u63d0\u4ea4\u540e\u53ef\u4ee5\u5173\u95ed CLI \u8fdb\u7a0b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u5206\u79bb\u7684\u67e5\u8be2\u3002Flink \u7684[\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u8d1f\u8d23\u5bb9\u9519\u3002\u53d6\u6d88\u67e5\u8be2\u53ef\u4ee5\u7528 Flink \u7684 web \u63a5\u53e3\u3001\u547d\u4ee4\u884c\u6216 REST API \u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNDI5Nw=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 478}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUxNTc3OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxODo1NVrOGQjDfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxODo1NVrOGQjDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNDczMg==", "bodyText": "\u201d\u89c6\u56fe\u5141\u8bb8\u901a\u8fc7 SQL \u67e5\u8be2\u6765\u5b9a\u4e49\uff0c\u662f\u4e00\u5f20\u865a\u62df\u8868\u201c \u6539\u6210 \u201d\u89c6\u56fe\u662f\u4e00\u5f20\u865a\u62df\u8868\uff0c\u5141\u8bb8\u901a\u8fc7 SQL \u67e5\u8be2\u6765\u5b9a\u4e49\u201c\u4f1a\u66f4\u597d\u4e00\u4e9b\u5417", "url": "https://github.com/apache/flink/pull/11961#discussion_r420004732", "createdAt": "2020-05-05T10:18:55Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -519,18 +521,18 @@ Job ID: 6f922fe5cba87406ff23ae4a7bb79044\n Web interface: http://localhost:8081\n {% endhighlight %}\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/zh/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\u63d0\u4ea4\u540e\uff0cSQL \u5ba2\u6237\u7aef\u4e0d\u8ffd\u8e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u4f5c\u4e1a\u72b6\u6001\u3002\u63d0\u4ea4\u540e\u53ef\u4ee5\u5173\u95ed CLI \u8fdb\u7a0b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u5206\u79bb\u7684\u67e5\u8be2\u3002Flink \u7684[\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u8d1f\u8d23\u5bb9\u9519\u3002\u53d6\u6d88\u67e5\u8be2\u53ef\u4ee5\u7528 Flink \u7684 web \u63a5\u53e3\u3001\u547d\u4ee4\u884c\u6216 REST API \u3002\n \n {% top %}\n \n-SQL Views\n+SQL \u89c6\u56fe\n ---------\n \n-Views allow to define virtual tables from SQL queries. The view definition is parsed and validated immediately. However, the actual execution happens when the view is accessed during the submission of a general `INSERT INTO` or `SELECT` statement.\n+\u89c6\u56fe\u5141\u8bb8\u901a\u8fc7 SQL \u67e5\u8be2\u6765\u5b9a\u4e49\uff0c\u662f\u4e00\u5f20\u865a\u62df\u8868\u3002\u89c6\u56fe\u7684\u5b9a\u4e49\u4f1a\u88ab\u7acb\u5373\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u63d0\u4ea4\u5e38\u89c4 `INSERT INTO` \u6216 `SELECT` \u8bed\u53e5\u540e\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\uff0c\u5728\u8bbf\u95ee\u89c6\u56fe\u65f6\u624d\u4f1a\u771f\u6b63\u6267\u884c\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 487}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUxODEwOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoxOTozMVrOGQjE2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozOTo1N1rOGQ0dAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTA4Mg==", "bodyText": "\u201d\u591a\u5f20\u89c6\u56fe\u201c \u8fd9\u91cc\u9700\u8981\u6539\u6210 \u201d\u591a\u5f20\u89c6\u56fe\u8868\u201c\u4e4b\u7c7b\u7684\u5417\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u4e0b\u4f8b\u5c55\u793a\u5982\u4f55\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u5b9a\u4e49\u591a\u5f20\u89c6\u56fe\u3002\u89c6\u56fe\u6ce8\u518c\u7684\u987a\u5e8f\u548c\u5b9a\u4e49\u5b83\u4eec\u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e00\u81f4\u3002\u652f\u6301\u8bf8\u5982_\u89c6\u56fe A \u4f9d\u8d56\u89c6\u56fe B \uff0c\u89c6\u56fe B \u4f9d\u8d56\u89c6\u56fe C_ \u7684\u5f15\u7528\u94fe\u3002\n          \n          \n            \n            \u4e0b\u4f8b\u5c55\u793a\u5982\u4f55\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u5b9a\u4e49\u591a\u5f20\u89c6\u56fe\u3002\u89c6\u56fe\u6ce8\u518c\u7684\u987a\u5e8f\u548c\u5b9a\u4e49\u5b83\u4eec\u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e00\u81f4\u3002\u652f\u6301\u8bf8\u5982 _\u89c6\u56fe A \u4f9d\u8d56\u89c6\u56fe B \uff0c\u89c6\u56fe B \u4f9d\u8d56\u89c6\u56fe C_ \u7684\u5f15\u7528\u94fe\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r420005082", "createdAt": "2020-05-05T10:19:31Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -519,18 +521,18 @@ Job ID: 6f922fe5cba87406ff23ae4a7bb79044\n Web interface: http://localhost:8081\n {% endhighlight %}\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/zh/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\u63d0\u4ea4\u540e\uff0cSQL \u5ba2\u6237\u7aef\u4e0d\u8ffd\u8e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u4f5c\u4e1a\u72b6\u6001\u3002\u63d0\u4ea4\u540e\u53ef\u4ee5\u5173\u95ed CLI \u8fdb\u7a0b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u5206\u79bb\u7684\u67e5\u8be2\u3002Flink \u7684[\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u8d1f\u8d23\u5bb9\u9519\u3002\u53d6\u6d88\u67e5\u8be2\u53ef\u4ee5\u7528 Flink \u7684 web \u63a5\u53e3\u3001\u547d\u4ee4\u884c\u6216 REST API \u3002\n \n {% top %}\n \n-SQL Views\n+SQL \u89c6\u56fe\n ---------\n \n-Views allow to define virtual tables from SQL queries. The view definition is parsed and validated immediately. However, the actual execution happens when the view is accessed during the submission of a general `INSERT INTO` or `SELECT` statement.\n+\u89c6\u56fe\u5141\u8bb8\u901a\u8fc7 SQL \u67e5\u8be2\u6765\u5b9a\u4e49\uff0c\u662f\u4e00\u5f20\u865a\u62df\u8868\u3002\u89c6\u56fe\u7684\u5b9a\u4e49\u4f1a\u88ab\u7acb\u5373\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u63d0\u4ea4\u5e38\u89c4 `INSERT INTO` \u6216 `SELECT` \u8bed\u53e5\u540e\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\uff0c\u5728\u8bbf\u95ee\u89c6\u56fe\u65f6\u624d\u4f1a\u771f\u6b63\u6267\u884c\u3002\n \n-Views can either be defined in [environment files](sqlClient.html#environment-files) or within the CLI session.\n+\u89c6\u56fe\u53ef\u4ee5\u7528[\u73af\u5883\u914d\u7f6e\u6587\u4ef6](sqlClient.html#environment-files)\u6216\u8005 CLI \u4f1a\u8bdd\u6765\u5b9a\u4e49\u3002\n \n-The following example shows how to define multiple views in a file. The views are registered in the order in which they are defined in the environment file. Reference chains such as _view A depends on view B depends on view C_ are supported.\n+\u4e0b\u4f8b\u5c55\u793a\u5982\u4f55\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u5b9a\u4e49\u591a\u5f20\u89c6\u56fe\u3002\u89c6\u56fe\u6ce8\u518c\u7684\u987a\u5e8f\u548c\u5b9a\u4e49\u5b83\u4eec\u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e00\u81f4\u3002\u652f\u6301\u8bf8\u5982_\u89c6\u56fe A \u4f9d\u8d56\u89c6\u56fe B \uff0c\u89c6\u56fe B \u4f9d\u8d56\u89c6\u56fe C_ \u7684\u5f15\u7528\u94fe\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 493}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4OTc5Mg==", "bodyText": "\u4e00\u822c\u4e60\u60ef\u7528\u89c6\u56fe\u800c\u975e\u89c6\u56fe\u8868\uff1f\u4e2a\u4eba\u89c9\u5f97\u7528\u89c6\u56fe\u80fd\u8ddf\u8868\u5206\u7684\u66f4\u6e05\u695a\u3002", "url": "https://github.com/apache/flink/pull/11961#discussion_r420289792", "createdAt": "2020-05-05T17:39:57Z", "author": {"login": "XBaith"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -519,18 +521,18 @@ Job ID: 6f922fe5cba87406ff23ae4a7bb79044\n Web interface: http://localhost:8081\n {% endhighlight %}\n \n-<span class=\"label label-danger\">Attention</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\n+<span class=\"label label-danger\">\u6ce8\u610f</span> The SQL Client does not track the status of the running Flink job after submission. The CLI process can be shutdown after the submission without affecting the detached query. Flink's [restart strategy]({{ site.baseurl }}/zh/dev/restart_strategies.html) takes care of the fault-tolerance. A query can be cancelled using Flink's web interface, command-line, or REST API.\u63d0\u4ea4\u540e\uff0cSQL \u5ba2\u6237\u7aef\u4e0d\u8ffd\u8e2a\u6b63\u5728\u8fd0\u884c\u7684 Flink \u4f5c\u4e1a\u72b6\u6001\u3002\u63d0\u4ea4\u540e\u53ef\u4ee5\u5173\u95ed CLI \u8fdb\u7a0b\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5f71\u54cd\u5206\u79bb\u7684\u67e5\u8be2\u3002Flink \u7684[\u91cd\u542f\u7b56\u7565]({{ site.baseurl }}/zh/dev/restart_strategies.html)\u8d1f\u8d23\u5bb9\u9519\u3002\u53d6\u6d88\u67e5\u8be2\u53ef\u4ee5\u7528 Flink \u7684 web \u63a5\u53e3\u3001\u547d\u4ee4\u884c\u6216 REST API \u3002\n \n {% top %}\n \n-SQL Views\n+SQL \u89c6\u56fe\n ---------\n \n-Views allow to define virtual tables from SQL queries. The view definition is parsed and validated immediately. However, the actual execution happens when the view is accessed during the submission of a general `INSERT INTO` or `SELECT` statement.\n+\u89c6\u56fe\u5141\u8bb8\u901a\u8fc7 SQL \u67e5\u8be2\u6765\u5b9a\u4e49\uff0c\u662f\u4e00\u5f20\u865a\u62df\u8868\u3002\u89c6\u56fe\u7684\u5b9a\u4e49\u4f1a\u88ab\u7acb\u5373\u89e3\u6790\u4e0e\u9a8c\u8bc1\u3002\u7136\u800c\uff0c\u63d0\u4ea4\u5e38\u89c4 `INSERT INTO` \u6216 `SELECT` \u8bed\u53e5\u540e\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\uff0c\u5728\u8bbf\u95ee\u89c6\u56fe\u65f6\u624d\u4f1a\u771f\u6b63\u6267\u884c\u3002\n \n-Views can either be defined in [environment files](sqlClient.html#environment-files) or within the CLI session.\n+\u89c6\u56fe\u53ef\u4ee5\u7528[\u73af\u5883\u914d\u7f6e\u6587\u4ef6](sqlClient.html#environment-files)\u6216\u8005 CLI \u4f1a\u8bdd\u6765\u5b9a\u4e49\u3002\n \n-The following example shows how to define multiple views in a file. The views are registered in the order in which they are defined in the environment file. Reference chains such as _view A depends on view B depends on view C_ are supported.\n+\u4e0b\u4f8b\u5c55\u793a\u5982\u4f55\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u5b9a\u4e49\u591a\u5f20\u89c6\u56fe\u3002\u89c6\u56fe\u6ce8\u518c\u7684\u987a\u5e8f\u548c\u5b9a\u4e49\u5b83\u4eec\u7684\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e00\u81f4\u3002\u652f\u6301\u8bf8\u5982_\u89c6\u56fe A \u4f9d\u8d56\u89c6\u56fe B \uff0c\u89c6\u56fe B \u4f9d\u8d56\u89c6\u56fe C_ \u7684\u5f15\u7528\u94fe\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTA4Mg=="}, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 493}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDUzNjMwOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/sqlClient.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyNTowNVrOGQjPnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyNTowNVrOGQjPnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNzgzNw==", "bodyText": "\u201d\u5982\u679c\u4f60\u53d1\u73b0\u4e86 bug \u6216\u6709\u5b9e\u7528\u529f\u80fd\u7684\u60f3\u6cd5\uff0c\u6b22\u8fce\u968f\u65f6\u521b\u5efa discussion \u6216\u5f00\u653e issue\u3002\u201c \u8fd9\u4e2a\u5730\u65b9\u5e94\u8be5\u662f\u8bf4 \u201d\u5982\u679c\u4f60\u53d1\u73b0\u4e86 bug \u53ef\u4ee5\u521b\u5efa issue\uff0c\u5982\u679c\u4f60\u53d1\u73b0\u90ae\u4ef6\u5217\u8868\u6216\u8005\u5176\u4ed6\u5730\u65b9\u6709\u4f60\u89c9\u5f97\u6709\u7528\u7684\u7279\u6027\uff0c\u6b22\u8fce\u53c2\u4e0e\u8ba8\u8bba\u201c\uff0c\u5177\u4f53\u7684\u8bed\u8a00\u8fd8\u9700\u8981\u7ec4\u7ec7\u4e0b", "url": "https://github.com/apache/flink/pull/11961#discussion_r420007837", "createdAt": "2020-05-05T10:25:05Z", "author": {"login": "klion26"}, "path": "docs/dev/table/sqlClient.zh.md", "diffHunk": "@@ -595,21 +598,23 @@ tables:\n           watermarks:\n             type: from-source\n \n-  # Define a temporal table over the changing history table with time attribute and primary key\n+  # \u5728\u5177\u6709\u65f6\u95f4\u5c5e\u6027\u548c\u4e3b\u952e\u7684\u53d8\u5316\u5386\u53f2\u8bb0\u5f55\u8868\u4e0a\u5b9a\u4e49\u4e34\u65f6\u8868\n   - name: SourceTemporalTable\n     type: temporal-table\n     history-table: HistorySource\n     primary-key: integerField\n     time-attribute: rowtimeField  # could also be a proctime field\n {% endhighlight %}\n \n-As shown in the example, definitions of table sources, views, and temporal tables can be mixed with each other. They are registered in the order in which they are defined in the environment file. For example, a temporal table can reference a view which can depend on another view or table source.\n+\u5982\u4f8b\u5b50\u4e2d\u6240\u793a\uff0ctable source\uff0c\u89c6\u56fe\u548c\u4e34\u65f6\u8868\u7684\u5b9a\u4e49\u53ef\u4ee5\u76f8\u4e92\u6df7\u5408\u3002\u5b83\u4eec\u6309\u7167\u5728\u73af\u5883\u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u987a\u5e8f\u8fdb\u884c\u6ce8\u518c\u3002\u4f8b\u5982\uff0c\u4e34\u65f6\u8868\u53ef\u4ee5\u5f15\u7528\u4e00\u4e2a\u89c6\u56fe\uff0c\u8be5\u89c6\u56fe\u4f9d\u8d56\u4e8e\u53e6\u4e00\u4e2a\u89c6\u56fe\u6216 table source\u3002\n \n {% top %}\n \n-Limitations & Future\n+<a name=\"limitations--future\"></a>\n+\n+\u5c40\u9650\u4e0e\u672a\u6765\n --------------------\n \n-The current SQL Client implementation is in a very early development stage and might change in the future as part of the bigger Flink Improvement Proposal 24 ([FLIP-24](https://cwiki.apache.org/confluence/display/FLINK/FLIP-24+-+SQL+Client)). Feel free to join the discussion and open issue about bugs and features that you find useful.\n+\u5f53\u524d\u7684 SQL \u5ba2\u6237\u7aef\u4ecd\u5904\u4e8e\u975e\u5e38\u65e9\u671f\u7684\u5f00\u53d1\u9636\u6bb5\uff0c\u4f5c\u4e3a\u66f4\u5927\u7684 Flink \u6539\u8fdb\u63d0\u6848 24\uff08[FLIP-24](https://cwiki.apache.org/confluence/display/FLINK/FLIP-24+-+SQL+Client)\uff09\u7684\u4e00\u90e8\u5206\uff0c\u5c06\u6765\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002 \u5982\u679c\u4f60\u53d1\u73b0\u4e86 bug \u6216\u6709\u5b9e\u7528\u529f\u80fd\u7684\u60f3\u6cd5\uff0c\u6b22\u8fce\u968f\u65f6\u521b\u5efa discussion \u6216\u5f00\u653e issue\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66891d0ae03ab556f67aa65f5beebb2814c10e41"}, "originalPosition": 567}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1475, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}