{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjY2MDk0", "number": 12574, "title": "[FLINK-18131][doc] Add documentation for the new JSON format", "bodyText": "#12360  What is the purpose of the change\nAdd JSON document for new JSON row data format.\nBrief change log\n\nAdd json.md and json.zh.md\n\nVerifying this change\nBuild locally and works fine.", "createdAt": "2020-06-10T07:42:43Z", "url": "https://github.com/apache/flink/pull/12574", "merged": true, "mergeCommit": {"oid": "aaf6da0fe9b1af922c104aab3773f62a950c16fe"}, "closed": true, "closedAt": "2020-06-11T06:59:06Z", "author": {"login": "danny0405"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp0r3MgH2gAyNDMyMjY2MDk0OjliZDFmODY2OTc0NDE5OWU5Y2JmMWNmMWU3YTUzZDYwNWI5Mzg5NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqGcMyAFqTQyODU4MjI3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9bd1f8669744199e9cbf1cf1e7a53d605b938947", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/9bd1f8669744199e9cbf1cf1e7a53d605b938947", "committedDate": "2020-06-10T07:39:57Z", "message": "[FLINK-18131][doc] Add documentation for the new JSON format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de842c49eaa812d5ab8c4efc48024cfae786e0c1", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/de842c49eaa812d5ab8c4efc48024cfae786e0c1", "committedDate": "2020-06-10T09:38:59Z", "message": "Fix the index link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/f06a2ee6ee3afc5a343166161c024f50f25de8c5", "committedDate": "2020-06-10T09:44:34Z", "message": "Fix the example SQL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTY5MTI2", "url": "https://github.com/apache/flink/pull/12574#pullrequestreview-428569126", "createdAt": "2020-06-11T03:31:59Z", "commit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzozMTo1OVrOGiNVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzo1Njo0MlrOGiNrJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzMwNQ==", "bodyText": "Both is supported?", "url": "https://github.com/apache/flink/pull/12574#discussion_r438523305", "createdAt": "2020-06-11T03:31:59Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>\n+    </tr>\n+    <tr>\n+      <td>CHAR / VARCHAR / STRING</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>BOOLEAN</td>\n+      <td>boolean</td>\n+    </tr>\n+    <tr>\n+      <td>BINARY / VARBINARY</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>DECIMAL</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>TINYINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>SMALLINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>INT/INTERVAL_YEAR_MONTH</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>BIGINT/INTERVAL_DAY_TIME</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>FLOAT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DOUBLE</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DATE</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>TIME</td>\n+      <td>string\n+      </td>\n+    </tr>\n+    <tr>\n+      <td>TIMESTAMP</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>ARRAY</td>\n+      <td>array</td>\n+    </tr>\n+    <tr>\n+      <td>MAP/MULTISET</td>\n+      <td>object\n+      <span class=\"label label-danger\">Note</span> Only serialization is supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzM2NA==", "bodyText": "string with format: date-time", "url": "https://github.com/apache/flink/pull/12574#discussion_r438523364", "createdAt": "2020-06-11T03:32:18Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>\n+    </tr>\n+    <tr>\n+      <td>CHAR / VARCHAR / STRING</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>BOOLEAN</td>\n+      <td>boolean</td>\n+    </tr>\n+    <tr>\n+      <td>BINARY / VARBINARY</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>DECIMAL</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>TINYINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>SMALLINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>INT/INTERVAL_YEAR_MONTH</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>BIGINT/INTERVAL_DAY_TIME</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>FLOAT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DOUBLE</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DATE</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>TIME</td>\n+      <td>string\n+      </td>\n+    </tr>\n+    <tr>\n+      <td>TIMESTAMP</td>\n+      <td>string</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzUxNw==", "bodyText": "string\u00a0with\u00a0format: time", "url": "https://github.com/apache/flink/pull/12574#discussion_r438523517", "createdAt": "2020-06-11T03:33:01Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>\n+    </tr>\n+    <tr>\n+      <td>CHAR / VARCHAR / STRING</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>BOOLEAN</td>\n+      <td>boolean</td>\n+    </tr>\n+    <tr>\n+      <td>BINARY / VARBINARY</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>DECIMAL</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>TINYINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>SMALLINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>INT/INTERVAL_YEAR_MONTH</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>BIGINT/INTERVAL_DAY_TIME</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>FLOAT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DOUBLE</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DATE</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>TIME</td>\n+      <td>string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzU3Mw==", "bodyText": "string with format: date", "url": "https://github.com/apache/flink/pull/12574#discussion_r438523573", "createdAt": "2020-06-11T03:33:16Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>\n+    </tr>\n+    <tr>\n+      <td>CHAR / VARCHAR / STRING</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>BOOLEAN</td>\n+      <td>boolean</td>\n+    </tr>\n+    <tr>\n+      <td>BINARY / VARBINARY</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>DECIMAL</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>TINYINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>SMALLINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>INT/INTERVAL_YEAR_MONTH</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>BIGINT/INTERVAL_DAY_TIME</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>FLOAT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DOUBLE</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>DATE</td>\n+      <td>string</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyMzkzMw==", "bodyText": "NULL is not supported in Flink SQL, remove this to avoid confuses.", "url": "https://github.com/apache/flink/pull/12574#discussion_r438523933", "createdAt": "2020-06-11T03:34:59Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNDAzNQ==", "bodyText": "string\u00a0with\u00a0encoding: base64", "url": "https://github.com/apache/flink/pull/12574#discussion_r438524035", "createdAt": "2020-06-11T03:35:29Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>\n+    </tr>\n+    <tr>\n+      <td>CHAR / VARCHAR / STRING</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>BOOLEAN</td>\n+      <td>boolean</td>\n+    </tr>\n+    <tr>\n+      <td>BINARY / VARBINARY</td>\n+      <td>string</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzE0NQ==", "bodyText": "Add a new row for interval? INTERVAL_YEAR_MONTH and INTERVAL_DAY_TIME are root name, not type name. We can call them INTERVAL as they all converted to number.", "url": "https://github.com/apache/flink/pull/12574#discussion_r438527145", "createdAt": "2020-06-11T03:49:23Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.\n+\n+The following table lists the type mapping from Flink type to JSON type.\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\">Flink Data Type</th>\n+        <th class=\"text-center\">JSON Data Type</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td>NULL</td>\n+      <td>null/empty</td>\n+    </tr>\n+    <tr>\n+      <td>CHAR / VARCHAR / STRING</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>BOOLEAN</td>\n+      <td>boolean</td>\n+    </tr>\n+    <tr>\n+      <td>BINARY / VARBINARY</td>\n+      <td>string</td>\n+    </tr>\n+    <tr>\n+      <td>DECIMAL</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>TINYINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>SMALLINT</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>INT/INTERVAL_YEAR_MONTH</td>\n+      <td>number</td>\n+    </tr>\n+    <tr>\n+      <td>BIGINT/INTERVAL_DAY_TIME</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzc3NA==", "bodyText": "Flink JSON format uses [jackson databind API](https://github.com/FasterXML/jackson-databind) to parse and generate JSON string.", "url": "https://github.com/apache/flink/pull/12574#discussion_r438527774", "createdAt": "2020-06-11T03:52:17Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to specify whether to fail if a field is missing or not, false by default.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors, false by default.</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the JSON schema is always derived from table schema. Explicitly defining an JSON schema is not supported yet.\n+\n+Flink JSON format uses utility class `com.fasterxml.jackson.databind.node.JsonNodeFactory` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from JSON data types.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODIzNw==", "bodyText": "I suggest to use json.fail-on-missing-field as the option key, because this is all the current connector how to use it.", "url": "https://github.com/apache/flink/pull/12574#discussion_r438528237", "createdAt": "2020-06-11T03:54:17Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'json'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>fail-on-missing-field</h5></td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODcxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             'format' = 'json'\n          \n          \n            \n             'format' = 'json',\n          \n          \n            \n             'json.fail-on-missing-field' = 'false',\n          \n          \n            \n             'json.ignore-parse-errors' = 'true'\n          \n      \n    \n    \n  \n\nI suggest to list some of the options, otherwise, users may still don't know how to use it.", "url": "https://github.com/apache/flink/pull/12574#discussion_r438528714", "createdAt": "2020-06-11T03:56:15Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with JSON format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and JSON format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'json'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODgwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n          \n          \n            \n            | `flink-json`        | Built-in |", "url": "https://github.com/apache/flink/pull/12574#discussion_r438528805", "createdAt": "2020-06-11T03:56:42Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/json.md", "diffHunk": "@@ -0,0 +1,201 @@\n+---\n+title: \"JSON Format\"\n+nav-title: JSON\n+nav-parent_id: sql-formats\n+nav-pos: 2\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [JSON](https://www.json.org/json-en.html) format allows to read and write JSON data based on an JSON schema. Currently, the JSON schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the JSON format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-json`        | The `flink-json-{{site.version}}.jar` is a built-in jar of SQL-CLI. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f06a2ee6ee3afc5a343166161c024f50f25de8c5"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10e2dcaf5f9d6281313510d65f890ddc3110a29f", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/10e2dcaf5f9d6281313510d65f890ddc3110a29f", "committedDate": "2020-06-11T04:12:57Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTgyMjcz", "url": "https://github.com/apache/flink/pull/12574#pullrequestreview-428582273", "createdAt": "2020-06-11T04:21:08Z", "commit": {"oid": "10e2dcaf5f9d6281313510d65f890ddc3110a29f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3987, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}