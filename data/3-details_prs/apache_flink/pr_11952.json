{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMDk3NDM3", "number": 11952, "title": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs", "bodyText": "What is the purpose of the change\n*Fix a bug where an exception was being thrown when a savepoint couldn't be mapped to an ExecutionJobVertex due to the user having specified the operator hash manually\nBrief change log\n\nRefactored code to make it more explicit that a JobVertex has an operator id and possibly an user defined operator id, this should prevent future similar bugs where this wasn't obvious\nFixed the bug\nSome code that was only being used in tests got deleted\n\nVerifying this change\n\nA new unit test was added\nIdeally the creator of the JIRA ticket would verify if the PR fixes their issue\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: yes\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-04-30T03:13:16Z", "url": "https://github.com/apache/flink/pull/11952", "merged": true, "mergeCommit": {"oid": "0114338da5ce52677d1dfa1ab4350b1567dc3522"}, "closed": true, "closedAt": "2020-05-07T15:52:13Z", "author": {"login": "edu05"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccnxtGgBqjMyODc4OTM4OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce_V_dgFqTQwNzYwODcxNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2f1b05a35fa8d43aa04cafbecc0333680b09a37", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/e2f1b05a35fa8d43aa04cafbecc0333680b09a37", "committedDate": "2020-04-30T02:42:25Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*Cleaning up dead code"}, "afterCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/846b989b173e24ab549e8aba342f0609afe2c25a", "committedDate": "2020-04-30T07:14:46Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*Cleaning up dead code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNzU2MjMz", "url": "https://github.com/apache/flink/pull/11952#pullrequestreview-403756233", "createdAt": "2020-04-30T18:04:00Z", "commit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODowNDowMVrOGO0gRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODozOToyNFrOGO1rzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5MzQ3OA==", "bodyText": "vertex.getOperatorIdPairList().getOperatorIds sounds a bit repetitive to me.\nHow about vertex.getOperatorIDs().getGeneratedIDs()?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418193478", "createdAt": "2020-04-30T18:04:01Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/PendingCheckpoint.java", "diffHunk": "@@ -371,7 +371,7 @@ public TaskAcknowledgeResult acknowledgeTask(\n \t\t\t\tacknowledgedTasks.add(executionAttemptId);\n \t\t\t}\n \n-\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIDs();\n+\t\t\tList<OperatorID> operatorIDs = vertex.getJobVertex().getOperatorIdPairList().getOperatorIds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE5NzEzOQ==", "bodyText": "Isn't name getOperatorIdPairs enough (instead of getOperatorIdPairList)?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418197139", "createdAt": "2020-04-30T18:10:34Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/ExecutionJobVertex.java", "diffHunk": "@@ -289,21 +270,12 @@ public ExecutionJobVertex(\n \t}\n \n \t/**\n-\t * Returns a list containing the IDs of all operators contained in this execution job vertex.\n+\t * Returns a list containing the ID pairs of all operators contained in this execution job vertex.\n \t *\n-\t * @return list containing the IDs of all contained operators\n+\t * @return list containing the ID pairs of all contained operators\n \t */\n-\tpublic List<OperatorID> getOperatorIDs() {\n-\t\treturn operatorIDs;\n-\t}\n-\n-\t/**\n-\t * Returns a list containing the alternative IDs of all operators contained in this execution job vertex.\n-\t *\n-\t * @return list containing alternative the IDs of all contained operators\n-\t */\n-\tpublic List<OperatorID> getUserDefinedOperatorIDs() {\n-\t\treturn userDefinedOperatorIds;\n+\tpublic OperatorIdPairList getOperatorIdPairList() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIwMDY5Nw==", "bodyText": "Ideally, this should be done by the caller (i.e. StreamingJobGraphGenerator.createJobVertex) so the constructor receives a list of pairs.\nAlso, lists here don't guarantee constant time get(int) and it's good to check that both lists have the same size.", "url": "https://github.com/apache/flink/pull/11952#discussion_r418200697", "createdAt": "2020-04-30T18:16:53Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobVertex.java", "diffHunk": "@@ -143,27 +145,27 @@ public JobVertex(String name) {\n \tpublic JobVertex(String name, JobVertexID id) {\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = id == null ? new JobVertexID() : id;\n-\t\t// the id lists must have the same size\n-\t\tthis.operatorIDs.add(OperatorID.fromJobVertexID(this.id));\n-\t\tthis.operatorIdsAlternatives.add(null);\n+\t\tOperatorIdPair operatorIdPair = new OperatorIdPair(OperatorID.fromJobVertexID(this.id), null);\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(Collections.singletonList(operatorIdPair));\n \t}\n \n \t/**\n \t * Constructs a new job vertex and assigns it with the given name.\n \t *\n \t * @param name The name of the new job vertex.\n \t * @param primaryId The id of the job vertex.\n-\t * @param alternativeIds The alternative ids of the job vertex.\n \t * @param operatorIds The ids of all operators contained in this job vertex.\n \t * @param alternativeOperatorIds The alternative ids of all operators contained in this job vertex-\n \t */\n-\tpublic JobVertex(String name, JobVertexID primaryId, List<JobVertexID> alternativeIds, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n+\tpublic JobVertex(String name, JobVertexID primaryId, List<OperatorID> operatorIds, List<OperatorID> alternativeOperatorIds) {\n \t\tPreconditions.checkArgument(operatorIds.size() == alternativeOperatorIds.size());\n \t\tthis.name = name == null ? DEFAULT_NAME : name;\n \t\tthis.id = primaryId == null ? new JobVertexID() : primaryId;\n-\t\tthis.idAlternatives.addAll(alternativeIds);\n-\t\tthis.operatorIDs.addAll(operatorIds);\n-\t\tthis.operatorIdsAlternatives.addAll(alternativeOperatorIds);\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (int i = 0; i < operatorIds.size(); i++) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorIds.get(i), alternativeOperatorIds.get(i)));\n+\t\t}\n+\t\tthis.operatorIdPairList = new OperatorIdPairList(operatorIdPairs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMTkzMw==", "bodyText": "I'm not sure if we need this class:\n\ngetUserDefinedOperatorIds is never used\nconstructor can be inlined\ninstead of getOperatorIds() clients could iterate over pairs with minimal changes, e.g. in StateAssignmentOperation:\n\nList<OperatorIdPair> pairs = executionJobVertex.getOperatorIdPairList().getOperatorIds();\n\nint expectedNumberOfSubTasks = newParallelism * pairs.size();\n\nfor (OperatorIdPair pair : operatorIDs) {\n  OperatorInstanceID instanceID = OperatorInstanceID.of(subTaskIndex, pair.getOperatorId());", "url": "https://github.com/apache/flink/pull/11952#discussion_r418211933", "createdAt": "2020-04-30T18:37:36Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/OperatorIdPairList.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobgraph;\n+\n+import org.apache.flink.runtime.OperatorIdPair;\n+\n+import java.io.Serializable;\n+import java.util.AbstractList;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Convenience class to encapsulate the operator ID pairs of a job vertex. It is convenient because it hides\n+ * away the creation of a new list for only operator IDs or user defined operator IDs.\n+ * It also hides the iteration over operator ID pairs.\n+ */\n+public class OperatorIdPairList extends AbstractList<OperatorIdPair> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjgxMg==", "bodyText": "What do you think about a factory method to create OperatorIdPair from only generated ID?", "url": "https://github.com/apache/flink/pull/11952#discussion_r418212812", "createdAt": "2020-04-30T18:39:24Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinatorTestingUtils.java", "diffHunk": "@@ -357,8 +359,11 @@ static ExecutionJobVertex mockExecutionJobVertex(\n \t\twhen(executionJobVertex.getParallelism()).thenReturn(parallelism);\n \t\twhen(executionJobVertex.getMaxParallelism()).thenReturn(maxParallelism);\n \t\twhen(executionJobVertex.isMaxParallelismConfigured()).thenReturn(true);\n-\t\twhen(executionJobVertex.getOperatorIDs()).thenReturn(jobVertexIDs);\n-\t\twhen(executionJobVertex.getUserDefinedOperatorIDs()).thenReturn(Arrays.asList(new OperatorID[jobVertexIDs.size()]));\n+\t\tList<OperatorIdPair> operatorIdPairs = new ArrayList<>();\n+\t\tfor (OperatorID operatorID : jobVertexIDs) {\n+\t\t\toperatorIdPairs.add(new OperatorIdPair(operatorID, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "846b989b173e24ab549e8aba342f0609afe2c25a"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3533a49c3d105fe2aca954bdb48223fe4b31f634", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/3533a49c3d105fe2aca954bdb48223fe4b31f634", "committedDate": "2020-04-30T21:51:13Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*PR comment - Removing unnecessary OperatorIDPairList class"}, "afterCommit": {"oid": "32c31c798a471aa1f5035f39b7aef2a107bbc27b", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/32c31c798a471aa1f5035f39b7aef2a107bbc27b", "committedDate": "2020-05-01T00:41:56Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*PR comment - Removing unnecessary OperatorIDPairList class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32c31c798a471aa1f5035f39b7aef2a107bbc27b", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/32c31c798a471aa1f5035f39b7aef2a107bbc27b", "committedDate": "2020-05-01T00:41:56Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs\n*PR comment - Removing unnecessary OperatorIDPairList class"}, "afterCommit": {"oid": "cb00ba58dee155aceb27bd4b8bab837a77265699", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/cb00ba58dee155aceb27bd4b8bab837a77265699", "committedDate": "2020-05-01T10:03:00Z", "message": "[FLINK-16638][runtime][checkpointing] Prevent operator IDs in a JobVertex from being mutated"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb00ba58dee155aceb27bd4b8bab837a77265699", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/cb00ba58dee155aceb27bd4b8bab837a77265699", "committedDate": "2020-05-01T10:03:00Z", "message": "[FLINK-16638][runtime][checkpointing] Prevent operator IDs in a JobVertex from being mutated"}, "afterCommit": {"oid": "2113227fdc0076eb9e2f72ae7883c2d5d245cbab", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/2113227fdc0076eb9e2f72ae7883c2d5d245cbab", "committedDate": "2020-05-01T17:43:09Z", "message": "[FLINK-16638][runtime][checkpointing] Prevent operator IDs in a JobVertex from being mutated"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2113227fdc0076eb9e2f72ae7883c2d5d245cbab", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/2113227fdc0076eb9e2f72ae7883c2d5d245cbab", "committedDate": "2020-05-01T17:43:09Z", "message": "[FLINK-16638][runtime][checkpointing] Prevent operator IDs in a JobVertex from being mutated"}, "afterCommit": {"oid": "a69c291aecf25c48bc10cb0fdda400ff481c6eb8", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/a69c291aecf25c48bc10cb0fdda400ff481c6eb8", "committedDate": "2020-05-04T21:49:55Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a2f6e8bd534d439b30e10b41a17821a3ea93590", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/5a2f6e8bd534d439b30e10b41a17821a3ea93590", "committedDate": "2020-05-04T21:53:48Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a69c291aecf25c48bc10cb0fdda400ff481c6eb8", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/a69c291aecf25c48bc10cb0fdda400ff481c6eb8", "committedDate": "2020-05-04T21:49:55Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs"}, "afterCommit": {"oid": "5a2f6e8bd534d439b30e10b41a17821a3ea93590", "author": {"user": {"login": "edu05", "name": null}}, "url": "https://github.com/apache/flink/commit/5a2f6e8bd534d439b30e10b41a17821a3ea93590", "committedDate": "2020-05-04T21:53:48Z", "message": "[FLINK-16638][runtime][checkpointing] Flink checkStateMappingCompleteness doesn't include UserDefinedOperatorIDs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDE3ODI3", "url": "https://github.com/apache/flink/pull/11952#pullrequestreview-406017827", "createdAt": "2020-05-05T17:46:42Z", "commit": {"oid": "5a2f6e8bd534d439b30e10b41a17821a3ea93590"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjA4NzE2", "url": "https://github.com/apache/flink/pull/11952#pullrequestreview-407608716", "createdAt": "2020-05-07T15:51:51Z", "commit": {"oid": "5a2f6e8bd534d439b30e10b41a17821a3ea93590"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4444, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}