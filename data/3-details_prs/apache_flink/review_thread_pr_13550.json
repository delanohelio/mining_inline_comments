{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjY5MTg2", "number": 13550, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDoxMDowOFrOEr_JOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0Mjo0N1rOEr_vPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTU4Nzc5OnYy", "diffSide": "RIGHT", "path": "flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/benchmark/StateBackendBenchmarkUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDoxMDowOFrOHfDmgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTozODozNlrOHfGH4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNjkxNA==", "bodyText": "Should also be in a method like for the other backends.", "url": "https://github.com/apache/flink/pull/13550#discussion_r502326914", "createdAt": "2020-10-09T10:10:08Z", "author": {"login": "aljoscha"}, "path": "flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/benchmark/StateBackendBenchmarkUtils.java", "diffHunk": "@@ -74,6 +75,24 @@\n \t\t\tcase ROCKSDB:\n \t\t\t\trootDir = prepareDirectory(rootDirName, null);\n \t\t\t\treturn createRocksDBKeyedStateBackend(rootDir);\n+\t\t\tcase SINGLE_KEY:\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new SingleKeyStateBackend().createKeyedStateBackend(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODIyNQ==", "bodyText": "Actually I did it and forgot to force push \ud83e\udd26", "url": "https://github.com/apache/flink/pull/13550#discussion_r502368225", "createdAt": "2020-10-09T11:38:36Z", "author": {"login": "dawidwys"}, "path": "flink-state-backends/flink-statebackend-rocksdb/src/test/java/org/apache/flink/contrib/streaming/state/benchmark/StateBackendBenchmarkUtils.java", "diffHunk": "@@ -74,6 +75,24 @@\n \t\t\tcase ROCKSDB:\n \t\t\t\trootDir = prepareDirectory(rootDirName, null);\n \t\t\t\treturn createRocksDBKeyedStateBackend(rootDir);\n+\t\t\tcase SINGLE_KEY:\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new SingleKeyStateBackend().createKeyedStateBackend(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNjkxNA=="}, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTYxMzM0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyGroupedInternalPriorityQueue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDoxODoyNFrOHfD2Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjo0MDo0NVrOHfH_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDk1OA==", "bodyText": "Why do we need to additionally deduplicate?", "url": "https://github.com/apache/flink/pull/13550#discussion_r502330958", "createdAt": "2020-10-09T10:18:24Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyGroupedInternalPriorityQueue.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueue;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Very similar implementation to {@link org.apache.flink.runtime.state.heap.HeapPriorityQueueSet}. The only difference\n+ * is it keeps track of elements for a single key at a time.\n+ */\n+class SingleKeyKeyGroupedInternalPriorityQueue<T extends HeapPriorityQueueElement>\n+\t\textends HeapPriorityQueue<T>\n+\t\timplements KeyGroupedInternalPriorityQueue<T> {\n+\n+\tprivate final Map<T, T> dedupMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzYzNA==", "bodyText": "Good question.\nThe reason is that we actually always use the *PriorityQueue as a Set. We use the PriorityQueue for storing timers and that's why we need Set semantics. We want to fire only a single timer for a timestamp. BTW, the logic is copied over from the HeapPriorityQueueSet.\nHowever to better address it I will rename the class to BatchExecutionInternalPriorityQueueSet.", "url": "https://github.com/apache/flink/pull/13550#discussion_r502383634", "createdAt": "2020-10-09T12:11:23Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyGroupedInternalPriorityQueue.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueue;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Very similar implementation to {@link org.apache.flink.runtime.state.heap.HeapPriorityQueueSet}. The only difference\n+ * is it keeps track of elements for a single key at a time.\n+ */\n+class SingleKeyKeyGroupedInternalPriorityQueue<T extends HeapPriorityQueueElement>\n+\t\textends HeapPriorityQueue<T>\n+\t\timplements KeyGroupedInternalPriorityQueue<T> {\n+\n+\tprivate final Map<T, T> dedupMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDk1OA=="}, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5ODg5MA==", "bodyText": "Ok, thanks for the explanation!", "url": "https://github.com/apache/flink/pull/13550#discussion_r502398890", "createdAt": "2020-10-09T12:40:45Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyGroupedInternalPriorityQueue.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueue;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Very similar implementation to {@link org.apache.flink.runtime.state.heap.HeapPriorityQueueSet}. The only difference\n+ * is it keeps track of elements for a single key at a time.\n+ */\n+class SingleKeyKeyGroupedInternalPriorityQueue<T extends HeapPriorityQueueElement>\n+\t\textends HeapPriorityQueue<T>\n+\t\timplements KeyGroupedInternalPriorityQueue<T> {\n+\n+\tprivate final Map<T, T> dedupMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzMDk1OA=="}, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTY3OTM5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyedStateBackend.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0MDo0MlrOHfEfiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0MDo0MlrOHfEfiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MTUxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A simple {@link CheckpointableKeyedStateBackend} which keeps values for a single key at a time.\n          \n          \n            \n             * A {@link CheckpointableKeyedStateBackend} which keeps values for a single key at a time.\n          \n      \n    \n    \n  \n\nI think simple rarely adds much information.", "url": "https://github.com/apache/flink/pull/13550#discussion_r502341515", "createdAt": "2020-10-09T10:40:42Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyedStateBackend.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.api.common.ExecutionConfig;\n+import org.apache.flink.api.common.state.AggregatingStateDescriptor;\n+import org.apache.flink.api.common.state.ListStateDescriptor;\n+import org.apache.flink.api.common.state.MapStateDescriptor;\n+import org.apache.flink.api.common.state.ReducingStateDescriptor;\n+import org.apache.flink.api.common.state.State;\n+import org.apache.flink.api.common.state.StateDescriptor;\n+import org.apache.flink.api.common.state.ValueStateDescriptor;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.state.CheckpointStreamFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.Keyed;\n+import org.apache.flink.runtime.state.KeyedStateFunction;\n+import org.apache.flink.runtime.state.KeyedStateHandle;\n+import org.apache.flink.runtime.state.PriorityComparable;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.SnapshotResult;\n+import org.apache.flink.runtime.state.StateSnapshotTransformer;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+import org.apache.flink.runtime.state.internal.InternalKvState;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.RunnableFuture;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A simple {@link CheckpointableKeyedStateBackend} which keeps values for a single key at a time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTY4NTA5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyedStateBackend.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0Mjo0N1rOHfEjSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjoxMTo0OFrOHfHE0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MjQ3Mg==", "bodyText": "I'm wondering about the name here. If we always refer to BATCH execution mode in the exceptions, maybe the state backend should be called BatchExecutionStateBackend. Or do we think it could be used for any other purpose.", "url": "https://github.com/apache/flink/pull/13550#discussion_r502342472", "createdAt": "2020-10-09T10:42:47Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyedStateBackend.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.api.common.ExecutionConfig;\n+import org.apache.flink.api.common.state.AggregatingStateDescriptor;\n+import org.apache.flink.api.common.state.ListStateDescriptor;\n+import org.apache.flink.api.common.state.MapStateDescriptor;\n+import org.apache.flink.api.common.state.ReducingStateDescriptor;\n+import org.apache.flink.api.common.state.State;\n+import org.apache.flink.api.common.state.StateDescriptor;\n+import org.apache.flink.api.common.state.ValueStateDescriptor;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.state.CheckpointStreamFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.Keyed;\n+import org.apache.flink.runtime.state.KeyedStateFunction;\n+import org.apache.flink.runtime.state.KeyedStateHandle;\n+import org.apache.flink.runtime.state.PriorityComparable;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.SnapshotResult;\n+import org.apache.flink.runtime.state.StateSnapshotTransformer;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+import org.apache.flink.runtime.state.internal.InternalKvState;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.RunnableFuture;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A simple {@link CheckpointableKeyedStateBackend} which keeps values for a single key at a time.\n+ *\n+ * <p><b>IMPORTANT:</b> Requires the incoming records to be sorted/grouped by the key. Used in a BATCH style execution.\n+ */\n+class SingleKeyKeyedStateBackend<K> implements CheckpointableKeyedStateBackend<K> {\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static final Map<Class<? extends StateDescriptor>, StateFactory> STATE_FACTORIES =\n+\t\tStream.of(\n+\t\t\tTuple2.of(ValueStateDescriptor.class, (StateFactory) SingleKeyValueState::create),\n+\t\t\tTuple2.of(ListStateDescriptor.class, (StateFactory) SingleKeyListState::create),\n+\t\t\tTuple2.of(MapStateDescriptor.class, (StateFactory) SingleKeyMapState::create),\n+\t\t\tTuple2.of(AggregatingStateDescriptor.class, (StateFactory) SingleKeyAggregatingState::create),\n+\t\t\tTuple2.of(ReducingStateDescriptor.class, (StateFactory) SingleKeyReducingState::create)\n+\t\t).collect(Collectors.toMap(t -> t.f0, t -> t.f1));\n+\n+\tprivate K currentKey = null;\n+\tprivate final TypeSerializer<K> keySerializer;\n+\tprivate final List<KeySelectionListener<K>> keySelectionListeners = new ArrayList<>();\n+\tprivate final Map<String, State> states = new HashMap<>();\n+\tprivate final Map<String, KeyGroupedInternalPriorityQueue<?>> priorityQueues = new HashMap<>();\n+\tprivate final KeyGroupRange keyGroupRange;\n+\n+\tpublic SingleKeyKeyedStateBackend(\n+\t\t\tTypeSerializer<K> keySerializer,\n+\t\t\tKeyGroupRange keyGroupRange) {\n+\t\tthis.keySerializer = keySerializer;\n+\t\tthis.keyGroupRange = keyGroupRange;\n+\t}\n+\n+\t@Override\n+\tpublic void setCurrentKey(K newKey) {\n+\t\tif (!Objects.equals(newKey, currentKey)) {\n+\t\t\tnotifyKeySelected(newKey);\n+\t\t\tfor (State value : states.values()) {\n+\t\t\t\t((AbstractSingleKeyState<?, ?, ?>) value).clearAllNamespaces();\n+\t\t\t}\n+\t\t\tfor (KeyGroupedInternalPriorityQueue<?> value : priorityQueues.values()) {\n+\t\t\t\twhile (value.poll() != null) {\n+\t\t\t\t\t// remove everything for the key\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthis.currentKey = newKey;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic K getCurrentKey() {\n+\t\treturn currentKey;\n+\t}\n+\n+\t@Override\n+\tpublic TypeSerializer<K> getKeySerializer() {\n+\t\treturn keySerializer;\n+\t}\n+\n+\t@Override\n+\tpublic <N, S extends State, T> void applyToAllKeys(\n+\t\t\tN namespace,\n+\t\t\tTypeSerializer<N> namespaceSerializer,\n+\t\t\tStateDescriptor<S, T> stateDescriptor,\n+\t\t\tKeyedStateFunction<K, S> function) {\n+\t\tthrow new UnsupportedOperationException(\"applyToAllKeys() is not supported in BATCH execution mode.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2ODQ5MQ==", "bodyText": "Personally I can't think of other scenarios...", "url": "https://github.com/apache/flink/pull/13550#discussion_r502368491", "createdAt": "2020-10-09T11:39:16Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyedStateBackend.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.api.common.ExecutionConfig;\n+import org.apache.flink.api.common.state.AggregatingStateDescriptor;\n+import org.apache.flink.api.common.state.ListStateDescriptor;\n+import org.apache.flink.api.common.state.MapStateDescriptor;\n+import org.apache.flink.api.common.state.ReducingStateDescriptor;\n+import org.apache.flink.api.common.state.State;\n+import org.apache.flink.api.common.state.StateDescriptor;\n+import org.apache.flink.api.common.state.ValueStateDescriptor;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.state.CheckpointStreamFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.Keyed;\n+import org.apache.flink.runtime.state.KeyedStateFunction;\n+import org.apache.flink.runtime.state.KeyedStateHandle;\n+import org.apache.flink.runtime.state.PriorityComparable;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.SnapshotResult;\n+import org.apache.flink.runtime.state.StateSnapshotTransformer;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+import org.apache.flink.runtime.state.internal.InternalKvState;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.RunnableFuture;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A simple {@link CheckpointableKeyedStateBackend} which keeps values for a single key at a time.\n+ *\n+ * <p><b>IMPORTANT:</b> Requires the incoming records to be sorted/grouped by the key. Used in a BATCH style execution.\n+ */\n+class SingleKeyKeyedStateBackend<K> implements CheckpointableKeyedStateBackend<K> {\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static final Map<Class<? extends StateDescriptor>, StateFactory> STATE_FACTORIES =\n+\t\tStream.of(\n+\t\t\tTuple2.of(ValueStateDescriptor.class, (StateFactory) SingleKeyValueState::create),\n+\t\t\tTuple2.of(ListStateDescriptor.class, (StateFactory) SingleKeyListState::create),\n+\t\t\tTuple2.of(MapStateDescriptor.class, (StateFactory) SingleKeyMapState::create),\n+\t\t\tTuple2.of(AggregatingStateDescriptor.class, (StateFactory) SingleKeyAggregatingState::create),\n+\t\t\tTuple2.of(ReducingStateDescriptor.class, (StateFactory) SingleKeyReducingState::create)\n+\t\t).collect(Collectors.toMap(t -> t.f0, t -> t.f1));\n+\n+\tprivate K currentKey = null;\n+\tprivate final TypeSerializer<K> keySerializer;\n+\tprivate final List<KeySelectionListener<K>> keySelectionListeners = new ArrayList<>();\n+\tprivate final Map<String, State> states = new HashMap<>();\n+\tprivate final Map<String, KeyGroupedInternalPriorityQueue<?>> priorityQueues = new HashMap<>();\n+\tprivate final KeyGroupRange keyGroupRange;\n+\n+\tpublic SingleKeyKeyedStateBackend(\n+\t\t\tTypeSerializer<K> keySerializer,\n+\t\t\tKeyGroupRange keyGroupRange) {\n+\t\tthis.keySerializer = keySerializer;\n+\t\tthis.keyGroupRange = keyGroupRange;\n+\t}\n+\n+\t@Override\n+\tpublic void setCurrentKey(K newKey) {\n+\t\tif (!Objects.equals(newKey, currentKey)) {\n+\t\t\tnotifyKeySelected(newKey);\n+\t\t\tfor (State value : states.values()) {\n+\t\t\t\t((AbstractSingleKeyState<?, ?, ?>) value).clearAllNamespaces();\n+\t\t\t}\n+\t\t\tfor (KeyGroupedInternalPriorityQueue<?> value : priorityQueues.values()) {\n+\t\t\t\twhile (value.poll() != null) {\n+\t\t\t\t\t// remove everything for the key\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthis.currentKey = newKey;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic K getCurrentKey() {\n+\t\treturn currentKey;\n+\t}\n+\n+\t@Override\n+\tpublic TypeSerializer<K> getKeySerializer() {\n+\t\treturn keySerializer;\n+\t}\n+\n+\t@Override\n+\tpublic <N, S extends State, T> void applyToAllKeys(\n+\t\t\tN namespace,\n+\t\t\tTypeSerializer<N> namespaceSerializer,\n+\t\t\tStateDescriptor<S, T> stateDescriptor,\n+\t\t\tKeyedStateFunction<K, S> function) {\n+\t\tthrow new UnsupportedOperationException(\"applyToAllKeys() is not supported in BATCH execution mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MjQ3Mg=="}, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzgyNA==", "bodyText": "Will rename the classes.", "url": "https://github.com/apache/flink/pull/13550#discussion_r502383824", "createdAt": "2020-10-09T12:11:48Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/sorted/state/SingleKeyKeyedStateBackend.java", "diffHunk": "@@ -0,0 +1,260 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.sorted.state;\n+\n+import org.apache.flink.api.common.ExecutionConfig;\n+import org.apache.flink.api.common.state.AggregatingStateDescriptor;\n+import org.apache.flink.api.common.state.ListStateDescriptor;\n+import org.apache.flink.api.common.state.MapStateDescriptor;\n+import org.apache.flink.api.common.state.ReducingStateDescriptor;\n+import org.apache.flink.api.common.state.State;\n+import org.apache.flink.api.common.state.StateDescriptor;\n+import org.apache.flink.api.common.state.ValueStateDescriptor;\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.state.CheckpointStreamFactory;\n+import org.apache.flink.runtime.state.CheckpointableKeyedStateBackend;\n+import org.apache.flink.runtime.state.KeyGroupRange;\n+import org.apache.flink.runtime.state.KeyGroupedInternalPriorityQueue;\n+import org.apache.flink.runtime.state.Keyed;\n+import org.apache.flink.runtime.state.KeyedStateFunction;\n+import org.apache.flink.runtime.state.KeyedStateHandle;\n+import org.apache.flink.runtime.state.PriorityComparable;\n+import org.apache.flink.runtime.state.PriorityComparator;\n+import org.apache.flink.runtime.state.SnapshotResult;\n+import org.apache.flink.runtime.state.StateSnapshotTransformer;\n+import org.apache.flink.runtime.state.heap.HeapPriorityQueueElement;\n+import org.apache.flink.runtime.state.internal.InternalKvState;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.RunnableFuture;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A simple {@link CheckpointableKeyedStateBackend} which keeps values for a single key at a time.\n+ *\n+ * <p><b>IMPORTANT:</b> Requires the incoming records to be sorted/grouped by the key. Used in a BATCH style execution.\n+ */\n+class SingleKeyKeyedStateBackend<K> implements CheckpointableKeyedStateBackend<K> {\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static final Map<Class<? extends StateDescriptor>, StateFactory> STATE_FACTORIES =\n+\t\tStream.of(\n+\t\t\tTuple2.of(ValueStateDescriptor.class, (StateFactory) SingleKeyValueState::create),\n+\t\t\tTuple2.of(ListStateDescriptor.class, (StateFactory) SingleKeyListState::create),\n+\t\t\tTuple2.of(MapStateDescriptor.class, (StateFactory) SingleKeyMapState::create),\n+\t\t\tTuple2.of(AggregatingStateDescriptor.class, (StateFactory) SingleKeyAggregatingState::create),\n+\t\t\tTuple2.of(ReducingStateDescriptor.class, (StateFactory) SingleKeyReducingState::create)\n+\t\t).collect(Collectors.toMap(t -> t.f0, t -> t.f1));\n+\n+\tprivate K currentKey = null;\n+\tprivate final TypeSerializer<K> keySerializer;\n+\tprivate final List<KeySelectionListener<K>> keySelectionListeners = new ArrayList<>();\n+\tprivate final Map<String, State> states = new HashMap<>();\n+\tprivate final Map<String, KeyGroupedInternalPriorityQueue<?>> priorityQueues = new HashMap<>();\n+\tprivate final KeyGroupRange keyGroupRange;\n+\n+\tpublic SingleKeyKeyedStateBackend(\n+\t\t\tTypeSerializer<K> keySerializer,\n+\t\t\tKeyGroupRange keyGroupRange) {\n+\t\tthis.keySerializer = keySerializer;\n+\t\tthis.keyGroupRange = keyGroupRange;\n+\t}\n+\n+\t@Override\n+\tpublic void setCurrentKey(K newKey) {\n+\t\tif (!Objects.equals(newKey, currentKey)) {\n+\t\t\tnotifyKeySelected(newKey);\n+\t\t\tfor (State value : states.values()) {\n+\t\t\t\t((AbstractSingleKeyState<?, ?, ?>) value).clearAllNamespaces();\n+\t\t\t}\n+\t\t\tfor (KeyGroupedInternalPriorityQueue<?> value : priorityQueues.values()) {\n+\t\t\t\twhile (value.poll() != null) {\n+\t\t\t\t\t// remove everything for the key\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthis.currentKey = newKey;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic K getCurrentKey() {\n+\t\treturn currentKey;\n+\t}\n+\n+\t@Override\n+\tpublic TypeSerializer<K> getKeySerializer() {\n+\t\treturn keySerializer;\n+\t}\n+\n+\t@Override\n+\tpublic <N, S extends State, T> void applyToAllKeys(\n+\t\t\tN namespace,\n+\t\t\tTypeSerializer<N> namespaceSerializer,\n+\t\t\tStateDescriptor<S, T> stateDescriptor,\n+\t\t\tKeyedStateFunction<K, S> function) {\n+\t\tthrow new UnsupportedOperationException(\"applyToAllKeys() is not supported in BATCH execution mode.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MjQ3Mg=="}, "originalCommit": {"oid": "5e658efd970cd23de2637876e59becdbf00a8921"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 235, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}