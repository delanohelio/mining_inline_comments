{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDY4NTI1", "number": 13535, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxODo1MFrOErQcZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNDowNlrOErQ1gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzkzNjM2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxODo1MVrOHd7TqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxODo1MVrOHd7TqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MjQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tdouble largest = largestValue(precision, scale);\n          \n          \n            \n            \t\tdouble largest = Math.pow(10,precision-scale) - Math.pow(10,-scale);", "url": "https://github.com/apache/flink/pull/13535#discussion_r501142441", "createdAt": "2020-10-07T16:18:51Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzkzODE5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxOToxOFrOHd7Uyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxOToxOFrOHd7Uyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MjczMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t * Finds the largest valid number of the given precision and range.\n          \n          \n            \n            \t */\n          \n          \n            \n            \tprivate static double largestValue(int precision, int scale) {\n          \n          \n            \n            \t\tStringBuilder builder = new StringBuilder();\n          \n          \n            \n            \t\tif (precision == scale) {\n          \n          \n            \n            \t\t\tbuilder.append(\"0.\");\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tfor (int i = 0; i < precision; i++) {\n          \n          \n            \n            \t\t\tif (scale != 0 && precision != scale && i + scale == precision) {\n          \n          \n            \n            \t\t\t\tbuilder.append(\".\");\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tbuilder.append(9);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\treturn Double.parseDouble(builder.toString());\n          \n          \n            \n            \t}", "url": "https://github.com/apache/flink/pull/13535#discussion_r501142731", "createdAt": "2020-10-07T16:19:18Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";\n+\t}\n+\n+\t@Override\n+\tpublic void open(String name, FunctionInitializationContext context, RuntimeContext runtimeContext) throws Exception {\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic DecimalData next() {\n+\t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n+\n+\t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));\n+\t\treturn DecimalData.fromBigDecimal(decimal, precision, scale);\n+\t}\n+\n+\t/**\n+\t * Finds the largest valid number of the given precision and range.\n+\t */\n+\tprivate static double largestValue(int precision, int scale) {\n+\t\tStringBuilder builder = new StringBuilder();\n+\t\tif (precision == scale) {\n+\t\t\tbuilder.append(\"0.\");\n+\t\t}\n+\n+\t\tfor (int i = 0; i < precision; i++) {\n+\t\t\tif (scale != 0 && precision != scale && i + scale == precision) {\n+\t\t\t\tbuilder.append(\".\");\n+\t\t\t}\n+\n+\t\t\tbuilder.append(9);\n+\t\t}\n+\n+\t\treturn Double.parseDouble(builder.toString());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzk2Mzg2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyNToxMFrOHd7kwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo0Mjo1N1rOHd8SEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjgxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n          \n          \n            \n            \n          \n          \n            \n            \t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));\n          \n          \n            \n            \t\tBigDecimal decimal = new BigDecimal(ThreadLocalRandom.current().nextDouble(min, max), new MathContext(precision, RoundingMode.DOWN));", "url": "https://github.com/apache/flink/pull/13535#discussion_r501146816", "createdAt": "2020-10-07T16:25:10Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";\n+\t}\n+\n+\t@Override\n+\tpublic void open(String name, FunctionInitializationContext context, RuntimeContext runtimeContext) throws Exception {\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic DecimalData next() {\n+\t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n+\n+\t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NzA0Ng==", "bodyText": "Doesn't this also work like that?", "url": "https://github.com/apache/flink/pull/13535#discussion_r501147046", "createdAt": "2020-10-07T16:25:30Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";\n+\t}\n+\n+\t@Override\n+\tpublic void open(String name, FunctionInitializationContext context, RuntimeContext runtimeContext) throws Exception {\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic DecimalData next() {\n+\t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n+\n+\t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjgxNg=="}, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1ODQxNg==", "bodyText": "yes", "url": "https://github.com/apache/flink/pull/13535#discussion_r501158416", "createdAt": "2020-10-07T16:42:57Z", "author": {"login": "sjwiesman"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";\n+\t}\n+\n+\t@Override\n+\tpublic void open(String name, FunctionInitializationContext context, RuntimeContext runtimeContext) throws Exception {\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasNext() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic DecimalData next() {\n+\t\tString value = String.format(fmt, ThreadLocalRandom.current().nextDouble(min, max));\n+\n+\t\tBigDecimal decimal = new BigDecimal(value.trim(), new MathContext(precision, RoundingMode.DOWN));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NjgxNg=="}, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzk2NjYzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyNTo0OVrOHd7mhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyNTo0OVrOHd7mhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NzI3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfor (int scale = 1; scale <= precision; scale++) {\n          \n          \n            \n            \t\t\tfor (int scale = 0; scale <= precision; scale++) {", "url": "https://github.com/apache/flink/pull/13535#discussion_r501147270", "createdAt": "2020-10-07T16:25:49Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGeneratorTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.table.data.DecimalData;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+\n+/**\n+ * Tests that the data generator is valid for every combination of precision and scale.\n+ */\n+public class DecimalDataRandomGeneratorTest {\n+\n+\t@Test\n+\tpublic void testGeneratesNonNullValues() {\n+\t\tfor (int precision = 1; precision <= 38; precision++) {\n+\t\t\tfor (int scale = 1; scale <= precision; scale++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzk2NzY0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyNjowM1rOHd7nHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoyNjowM1rOHd7nHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NzQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";", "url": "https://github.com/apache/flink/pull/13535#discussion_r501147420", "createdAt": "2020-10-07T16:26:03Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;\n+\n+\tpublic DecimalDataRandomGenerator(int precision, int scale, double min, double max) {\n+\t\tdouble largest = largestValue(precision, scale);\n+\t\tthis.precision = precision;\n+\t\tthis.scale = scale;\n+\t\tthis.min = Math.min(-1 * largest, min);\n+\t\tthis.max = Math.min(largest, max);\n+\t\tthis.fmt = \"%\" + precision + \".\" + scale + \"f\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODAwMDY3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNDowNlrOHd78Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNDowNlrOHd78Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1Mjc4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate final String fmt;", "url": "https://github.com/apache/flink/pull/13535#discussion_r501152787", "createdAt": "2020-10-07T16:34:06Z", "author": {"login": "knaufk"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/factories/datagen/types/DecimalDataRandomGenerator.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.factories.datagen.types;\n+\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.table.data.DecimalData;\n+\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Generates random {@link DecimalData} values.\n+ */\n+public class DecimalDataRandomGenerator implements DataGenerator<DecimalData> {\n+\n+\tprivate final int precision;\n+\n+\tprivate final int scale;\n+\n+\tprivate final double min;\n+\n+\tprivate final double max;\n+\n+\tprivate final String fmt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "505ec8554bfb64d4f53a9f619ffc0729e3e645f3"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 215, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}