{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MTg5NDc2", "number": 11405, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMTo0ODo1N1rODoKp_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjowMDowNlrODoKxSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDQ0MjIwOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMTo0ODo1N1rOF2je3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMDo1MDo1M1rOF3KegA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc0ODc2NQ==", "bodyText": "Should also affect when not open parallelism infer, modify to:\nint parallelism = flinkConf.get(ExecutionConfigOptions.TABLE_EXEC_RESOURCE_DEFAULT_PARALLELISM);\nif (flinkConf.get(HiveOptions.TABLE_EXEC_HIVE_INFER_SOURCE_PARALLELISM)) {\n    ......\n    parallelism = Math.min(splitNum, max);\n}\nparallelism = limit > 0 ? Math.min(parallelism, (int) limit / 1000) : parallelism;\nparallelism = Math.max(1, parallelism);\nsource.setParallelism(parallelism);", "url": "https://github.com/apache/flink/pull/11405#discussion_r392748765", "createdAt": "2020-03-16T01:48:57Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSource.java", "diffHunk": "@@ -168,7 +168,9 @@ public boolean isBounded() {\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new FlinkHiveException(e);\n \t\t\t}\n-\t\t\tsource.setParallelism(Math.min(Math.max(1, splitNum), max));\n+\t\t\tint parallelism = Math.min(Math.max(1, splitNum), max);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b196447b93a3c1bdb64fce172c2aea305e16093b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4NzY0OA==", "bodyText": "@JingsongLi  Thank you very much for your reply. There are some places that I did not consider carefully. I have modified them according to your suggestions.", "url": "https://github.com/apache/flink/pull/11405#discussion_r393387648", "createdAt": "2020-03-17T00:50:53Z", "author": {"login": "zhangjun0x01"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/connectors/hive/HiveTableSource.java", "diffHunk": "@@ -168,7 +168,9 @@ public boolean isBounded() {\n \t\t\t} catch (IOException e) {\n \t\t\t\tthrow new FlinkHiveException(e);\n \t\t\t}\n-\t\t\tsource.setParallelism(Math.min(Math.max(1, splitNum), max));\n+\t\t\tint parallelism = Math.min(Math.max(1, splitNum), max);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc0ODc2NQ=="}, "originalCommit": {"oid": "b196447b93a3c1bdb64fce172c2aea305e16093b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDQ1ODg5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveTableSourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMTo1ODowMlrOF2jpUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMTo1ODowMlrOF2jpUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc1MTQ0Mg==", "bodyText": "Add this for real test parallelism:\ntEnv.getConfig().getConfiguration().setBoolean(\n\t\t\t\tHiveOptions.TABLE_EXEC_HIVE_FALLBACK_MAPRED_READER, false);\ntEnv.getConfig().getConfiguration().setInteger(\n\t\t\t\tExecutionConfigOptions.TABLE_EXEC_RESOURCE_DEFAULT_PARALLELISM, 2);", "url": "https://github.com/apache/flink/pull/11405#discussion_r392751442", "createdAt": "2020-03-16T01:58:02Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveTableSourceTest.java", "diffHunk": "@@ -410,6 +410,32 @@ public void testParallelismSetting() {\n \t\tAssert.assertEquals(2, transformation.getParallelism());\n \t}\n \n+\t@Test\n+\tpublic void testParallelismOnLimitPushDown() {\n+\t\tfinal String catalogName = \"hive\";\n+\t\tfinal String dbName = \"source_db\";\n+\t\tfinal String tblName = \"test_parallelism_limit_pushdown\";\n+\t\thiveShell.execute(\"CREATE TABLE source_db.test_parallelism_limit_pushdown \" +\n+\t\t                  \"(year STRING, value INT) partitioned by (pt int);\");\n+\t\tHiveTestUtils.createTextTableInserter(hiveShell, dbName, tblName)\n+\t\t             .addRow(new Object[]{\"2014\", 3})\n+\t\t             .addRow(new Object[]{\"2014\", 4})\n+\t\t             .commit(\"pt=0\");\n+\t\tHiveTestUtils.createTextTableInserter(hiveShell, dbName, tblName)\n+\t\t             .addRow(new Object[]{\"2015\", 2})\n+\t\t             .addRow(new Object[]{\"2015\", 5})\n+\t\t             .commit(\"pt=1\");\n+\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b196447b93a3c1bdb64fce172c2aea305e16093b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDQ2MDg5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveTableSourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjowMDowNlrOF2jqmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwMjowMDowNlrOF2jqmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjc1MTc2OQ==", "bodyText": "This is limit transformation, should always be 1.\nAssert.assertEquals(1, ((PartitionTransformation) ((OneInputTransformation) transformation).getInput())\n\t\t\t\t.getInput().getParallelism());", "url": "https://github.com/apache/flink/pull/11405#discussion_r392751769", "createdAt": "2020-03-16T02:00:06Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/connectors/hive/HiveTableSourceTest.java", "diffHunk": "@@ -410,6 +410,32 @@ public void testParallelismSetting() {\n \t\tAssert.assertEquals(2, transformation.getParallelism());\n \t}\n \n+\t@Test\n+\tpublic void testParallelismOnLimitPushDown() {\n+\t\tfinal String catalogName = \"hive\";\n+\t\tfinal String dbName = \"source_db\";\n+\t\tfinal String tblName = \"test_parallelism_limit_pushdown\";\n+\t\thiveShell.execute(\"CREATE TABLE source_db.test_parallelism_limit_pushdown \" +\n+\t\t                  \"(year STRING, value INT) partitioned by (pt int);\");\n+\t\tHiveTestUtils.createTextTableInserter(hiveShell, dbName, tblName)\n+\t\t             .addRow(new Object[]{\"2014\", 3})\n+\t\t             .addRow(new Object[]{\"2014\", 4})\n+\t\t             .commit(\"pt=0\");\n+\t\tHiveTestUtils.createTextTableInserter(hiveShell, dbName, tblName)\n+\t\t             .addRow(new Object[]{\"2015\", 2})\n+\t\t             .addRow(new Object[]{\"2015\", 5})\n+\t\t             .commit(\"pt=1\");\n+\t\tTableEnvironment tEnv = HiveTestUtils.createTableEnvWithBlinkPlannerBatchMode();\n+\t\ttEnv.registerCatalog(catalogName, hiveCatalog);\n+\t\tTable table = tEnv.sqlQuery(\"select * from hive.source_db.test_parallelism_limit_pushdown limit 1\");\n+\t\tPlannerBase planner = (PlannerBase) ((TableEnvironmentImpl) tEnv).getPlanner();\n+\t\tRelNode relNode = planner.optimize(TableTestUtil.toRelNode(table));\n+\t\tExecNode execNode = planner.translateToExecNodePlan(toScala(Collections.singletonList(relNode))).get(0);\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tTransformation transformation = execNode.translateToPlan(planner);\n+\t\tAssert.assertEquals(1, transformation.getParallelism());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b196447b93a3c1bdb64fce172c2aea305e16093b"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 785, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}