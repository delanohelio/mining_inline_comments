{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzQyNzM0", "number": 11177, "title": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.", "bodyText": "What is the purpose of the change\nMade AsyncWaitOperator chainable to non-sources.\nBrief change log\n\nYielding operators can be chained only if the head operator of the chain is not a legacy source.\n\nVerifying this change\n\nAdded AsyncWaitOperatorTest#testAsyncOperatorIsNotChainedToSources\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-02-21T15:37:59Z", "url": "https://github.com/apache/flink/pull/11177", "merged": true, "mergeCommit": {"oid": "3a04e179e09224b09c4ee656d31558844da83a26"}, "closed": true, "closedAt": "2020-03-02T12:47:51Z", "author": {"login": "AHeise"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGhnYzgBqjMwNjA5MzQ4NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJtJtYAFqTM2NzE3MTYyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5488120b81609446d9452b6ac67a2354498108e6", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/5488120b81609446d9452b6ac67a2354498108e6", "committedDate": "2020-02-21T15:36:49Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}, "afterCommit": {"oid": "61b28a39aa682892a746495931949ab20dd1979c", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/61b28a39aa682892a746495931949ab20dd1979c", "committedDate": "2020-02-21T15:39:21Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61b28a39aa682892a746495931949ab20dd1979c", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/61b28a39aa682892a746495931949ab20dd1979c", "committedDate": "2020-02-21T15:39:21Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}, "afterCommit": {"oid": "3d36bd3136fd8b56ee367ee29dc9c92beaf4542a", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/3d36bd3136fd8b56ee367ee29dc9c92beaf4542a", "committedDate": "2020-02-21T19:58:20Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjI5NDkx", "url": "https://github.com/apache/flink/pull/11177#pullrequestreview-363229491", "createdAt": "2020-02-24T08:46:11Z", "commit": {"oid": "7582e3e57ae14236024663a57a82cad7929be085"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwODo0NjoxMVrOFtYuuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowMjoyM1rOFtZI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNTQxNg==", "bodyText": "Why can not we move headOperator.getChainingStrategy() != ChainingStrategy.NEVER into the canBeChainedTo(headOperator) call/check?", "url": "https://github.com/apache/flink/pull/11177#discussion_r383135416", "createdAt": "2020-02-24T08:46:11Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -602,9 +602,8 @@ public static boolean isChainable(StreamEdge edge, StreamGraph streamGraph) {\n \t\t\t\t&& outOperator != null\n \t\t\t\t&& headOperator != null\n \t\t\t\t&& upStreamVertex.isSameSlotSharingGroup(downStreamVertex)\n-\t\t\t\t&& outOperator.getChainingStrategy() == ChainingStrategy.ALWAYS\n-\t\t\t\t&& (headOperator.getChainingStrategy() == ChainingStrategy.HEAD ||\n-\t\t\t\t\theadOperator.getChainingStrategy() == ChainingStrategy.ALWAYS)\n+\t\t\t\t&& outOperator.getChainingStrategy().canBeChainedTo(headOperator)\n+\t\t\t\t&& headOperator.getChainingStrategy() != ChainingStrategy.NEVER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7582e3e57ae14236024663a57a82cad7929be085"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNzA1Mg==", "bodyText": "headOperator is a misnomer, as it's not always \"head\". It's just previous/up stream operator.  So at least headOperator -> upStreamOperator ?\nHowever, also maybe optional/subjective, I would expect the call be here head chained with next instead of next chained to head:\nheadOperator.getChainingStrategy().canBeChainedWith/canBeChainedTo(outOperator)\n\nas that's usually how lists/chains are being constructed/traversed - head to tail, so maybe:\ncanBeChainedWith(StreamOperatorFactory<?> downStreamOperator)\n\nafter all?", "url": "https://github.com/apache/flink/pull/11177#discussion_r383137052", "createdAt": "2020-02-24T08:50:33Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/ChainingStrategy.java", "diffHunk": "@@ -38,16 +38,46 @@\n \t * <p>To optimize performance, it is generally a good practice to allow maximal\n \t * chaining and increase operator parallelism.\n \t */\n-\tALWAYS,\n+\tALWAYS {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7582e3e57ae14236024663a57a82cad7929be085"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzEzNzk3OA==", "bodyText": "Can we add a test coverage in StreamingJobGraphGeneratorTest?", "url": "https://github.com/apache/flink/pull/11177#discussion_r383137978", "createdAt": "2020-02-24T08:52:44Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -602,9 +602,8 @@ public static boolean isChainable(StreamEdge edge, StreamGraph streamGraph) {\n \t\t\t\t&& outOperator != null\n \t\t\t\t&& headOperator != null\n \t\t\t\t&& upStreamVertex.isSameSlotSharingGroup(downStreamVertex)\n-\t\t\t\t&& outOperator.getChainingStrategy() == ChainingStrategy.ALWAYS\n-\t\t\t\t&& (headOperator.getChainingStrategy() == ChainingStrategy.HEAD ||\n-\t\t\t\t\theadOperator.getChainingStrategy() == ChainingStrategy.ALWAYS)\n+\t\t\t\t&& outOperator.getChainingStrategy().canBeChainedTo(headOperator)\n+\t\t\t\t&& headOperator.getChainingStrategy() != ChainingStrategy.NEVER", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7582e3e57ae14236024663a57a82cad7929be085"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MDcyMA==", "bodyText": "Do we need this enum? Can not we replace HEAD_AFTER_LEGACY_SOURCE with a check if that we are in a legacy source task and the downStreamOpeartor instanceof YieldingOperatorFactory?", "url": "https://github.com/apache/flink/pull/11177#discussion_r383140720", "createdAt": "2020-02-24T08:58:57Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/ChainingStrategy.java", "diffHunk": "@@ -38,16 +38,46 @@\n \t * <p>To optimize performance, it is generally a good practice to allow maximal\n \t * chaining and increase operator parallelism.\n \t */\n-\tALWAYS,\n+\tALWAYS {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn true;\n+\t\t}\n+\t},\n \n \t/**\n \t * The operator will not be chained to the preceding or succeeding operators.\n \t */\n-\tNEVER,\n+\tNEVER {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn false;\n+\t\t}\n+\t},\n \n \t/**\n \t * The operator will not be chained to the predecessor, but successors may chain to this\n \t * operator.\n \t */\n-\tHEAD\n+\tHEAD {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn false;\n+\t\t}\n+\t},\n+\n+\t/**\n+\t * Operators will be eagerly chained whenever possible, except after legacy sources.\n+\t *\n+\t * <p>Operators that will not properly when processInput is called from another thread, must use this strategy\n+\t * instead of {@link #ALWAYS}.\n+\t */\n+\tHEAD_AFTER_LEGACY_SOURCE {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn !headOperator.isStreamSource();\n+\t\t}\n+\t};\n+\n+\tpublic abstract boolean canBeChainedTo(StreamOperatorFactory<?> headOperator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7582e3e57ae14236024663a57a82cad7929be085"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MTE1Mg==", "bodyText": "Is it working properly? What if we have StreamSource -> OP2 -> OP3 -> AsyncWaitOperator?", "url": "https://github.com/apache/flink/pull/11177#discussion_r383141152", "createdAt": "2020-02-24T09:00:03Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/ChainingStrategy.java", "diffHunk": "@@ -38,16 +38,46 @@\n \t * <p>To optimize performance, it is generally a good practice to allow maximal\n \t * chaining and increase operator parallelism.\n \t */\n-\tALWAYS,\n+\tALWAYS {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn true;\n+\t\t}\n+\t},\n \n \t/**\n \t * The operator will not be chained to the preceding or succeeding operators.\n \t */\n-\tNEVER,\n+\tNEVER {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn false;\n+\t\t}\n+\t},\n \n \t/**\n \t * The operator will not be chained to the predecessor, but successors may chain to this\n \t * operator.\n \t */\n-\tHEAD\n+\tHEAD {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn false;\n+\t\t}\n+\t},\n+\n+\t/**\n+\t * Operators will be eagerly chained whenever possible, except after legacy sources.\n+\t *\n+\t * <p>Operators that will not properly when processInput is called from another thread, must use this strategy\n+\t * instead of {@link #ALWAYS}.\n+\t */\n+\tHEAD_AFTER_LEGACY_SOURCE {\n+\t\t@Override\n+\t\tpublic boolean canBeChainedTo(StreamOperatorFactory<?> headOperator) {\n+\t\t\treturn !headOperator.isStreamSource();\n+\t\t}\n+\t};\n+\n+\tpublic abstract boolean canBeChainedTo(StreamOperatorFactory<?> headOperator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7582e3e57ae14236024663a57a82cad7929be085"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MjEyMA==", "bodyText": "add a simple mapping function?\ninput = chainEnv.fromElements(1).map(....);", "url": "https://github.com/apache/flink/pull/11177#discussion_r383142120", "createdAt": "2020-02-24T09:02:23Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/operators/async/AsyncWaitOperatorTest.java", "diffHunk": "@@ -365,10 +365,10 @@ private void testProcessingTime(AsyncDataStream.OutputMode mode) throws Exceptio\n \t}\n \n \t/**\n-\t * Test for the temporary fix to FLINK-13063.\n+\t * Tests FLINK-16219.\n \t */\n \t@Test\n-\tpublic void testAsyncOperatorIsNeverChained() {\n+\tpublic void testAsyncOperatorIsNotChainedToSources() {\n \t\tStreamExecutionEnvironment chainEnv = StreamExecutionEnvironment.getExecutionEnvironment();\n \n \t\tDataStream<Integer> input = chainEnv.fromElements(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d36bd3136fd8b56ee367ee29dc9c92beaf4542a"}, "originalPosition": 12}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d36bd3136fd8b56ee367ee29dc9c92beaf4542a", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/3d36bd3136fd8b56ee367ee29dc9c92beaf4542a", "committedDate": "2020-02-21T19:58:20Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}, "afterCommit": {"oid": "42f920ac137b14f43923fcee4677dc57c849fac2", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/42f920ac137b14f43923fcee4677dc57c849fac2", "committedDate": "2020-02-26T07:44:47Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NzE0ODgw", "url": "https://github.com/apache/flink/pull/11177#pullrequestreview-364714880", "createdAt": "2020-02-26T08:56:09Z", "commit": {"oid": "1cab8f3199f86009056903418dc31e20313cae21"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo1NjoxMFrOFuiyvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwODo1NjoxMFrOFuiyvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM0ODg2MQ==", "bodyText": "nit: downstream -> downStream & upstream -> upStream. I quickly git grepped the code, and downstream is only used in text/docs. downStream is used in the code.", "url": "https://github.com/apache/flink/pull/11177#discussion_r384348861", "createdAt": "2020-02-26T08:56:10Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -542,14 +542,14 @@ private void connect(Integer headOfChain, StreamEdge edge) {\n \n \t\tphysicalEdgesInOrder.add(edge);\n \n-\t\tInteger downStreamvertexID = edge.getTargetId();\n+\t\tInteger downstreamVertexID = edge.getTargetId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cab8f3199f86009056903418dc31e20313cae21"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42f920ac137b14f43923fcee4677dc57c849fac2", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/42f920ac137b14f43923fcee4677dc57c849fac2", "committedDate": "2020-02-26T07:44:47Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases."}, "afterCommit": {"oid": "37d4a094fe466a22c2f3cc07a73d361a43928404", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/37d4a094fe466a22c2f3cc07a73d361a43928404", "committedDate": "2020-02-26T09:16:56Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases.\nMoved test case to StreamingJobGraphGenerator."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37d4a094fe466a22c2f3cc07a73d361a43928404", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/37d4a094fe466a22c2f3cc07a73d361a43928404", "committedDate": "2020-02-26T09:16:56Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases.\nMoved test case to StreamingJobGraphGenerator."}, "afterCommit": {"oid": "810b12ab01637f7d70d091922ba9cbf9bc45680e", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/810b12ab01637f7d70d091922ba9cbf9bc45680e", "committedDate": "2020-02-26T09:21:55Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases.\nMoved test case to StreamingJobGraphGenerator."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MjM4NjUx", "url": "https://github.com/apache/flink/pull/11177#pullrequestreview-366238651", "createdAt": "2020-02-28T08:50:36Z", "commit": {"oid": "810b12ab01637f7d70d091922ba9cbf9bc45680e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2Mjc5MzIw", "url": "https://github.com/apache/flink/pull/11177#pullrequestreview-366279320", "createdAt": "2020-02-28T09:59:02Z", "commit": {"oid": "810b12ab01637f7d70d091922ba9cbf9bc45680e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1OTowMlrOFvvbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwOTo1OTowMlrOFvvbyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwNDU1NA==", "bodyText": "Can we unit test this method assuming that StreamNode and StreamGraph are easy to construct/mock?", "url": "https://github.com/apache/flink/pull/11177#discussion_r385604554", "createdAt": "2020-02-28T09:59:02Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -587,30 +588,54 @@ private void connect(Integer headOfChain, StreamEdge edge) {\n \n \t\tif (LOG.isDebugEnabled()) {\n \t\t\tLOG.debug(\"CONNECTED: {} - {} -> {}\", partitioner.getClass().getSimpleName(),\n-\t\t\t\t\theadOfChain, downStreamvertexID);\n+\t\t\t\t\theadOfChain, downStreamVertexID);\n \t\t}\n \t}\n \n \tpublic static boolean isChainable(StreamEdge edge, StreamGraph streamGraph) {\n \t\tStreamNode upStreamVertex = streamGraph.getSourceVertex(edge);\n \t\tStreamNode downStreamVertex = streamGraph.getTargetVertex(edge);\n \n-\t\tStreamOperatorFactory<?> headOperator = upStreamVertex.getOperatorFactory();\n-\t\tStreamOperatorFactory<?> outOperator = downStreamVertex.getOperatorFactory();\n-\n \t\treturn downStreamVertex.getInEdges().size() == 1\n-\t\t\t\t&& outOperator != null\n-\t\t\t\t&& headOperator != null\n \t\t\t\t&& upStreamVertex.isSameSlotSharingGroup(downStreamVertex)\n-\t\t\t\t&& outOperator.getChainingStrategy() == ChainingStrategy.ALWAYS\n-\t\t\t\t&& (headOperator.getChainingStrategy() == ChainingStrategy.HEAD ||\n-\t\t\t\t\theadOperator.getChainingStrategy() == ChainingStrategy.ALWAYS)\n+\t\t\t\t&& areOperatorsChainable(upStreamVertex, downStreamVertex, streamGraph)\n \t\t\t\t&& (edge.getPartitioner() instanceof ForwardPartitioner)\n \t\t\t\t&& edge.getShuffleMode() != ShuffleMode.BATCH\n \t\t\t\t&& upStreamVertex.getParallelism() == downStreamVertex.getParallelism()\n \t\t\t\t&& streamGraph.isChainingEnabled();\n \t}\n \n+\tprivate static boolean areOperatorsChainable(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "810b12ab01637f7d70d091922ba9cbf9bc45680e"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9918bd9191889dbc5a65c2f2982b4140b320bf99", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/9918bd9191889dbc5a65c2f2982b4140b320bf99", "committedDate": "2020-02-28T14:39:47Z", "message": "[hotfix][runtime] Removed duplicate isChainable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9323852743d7fc32c6abd787f63fa5705eea530", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/e9323852743d7fc32c6abd787f63fa5705eea530", "committedDate": "2020-02-28T14:39:47Z", "message": "[hotfix][runtime] Unified variable names in StreamingJobGraphGenerator.\n\nRemoved confusing headOperators in isChainable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "613acf26bdd79ea6c10fb3b3ae8fe27376b5b259", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/613acf26bdd79ea6c10fb3b3ae8fe27376b5b259", "committedDate": "2020-02-28T14:41:00Z", "message": "[FLINK-16219][runtime] Disallow chaining of legacy source and yielding operator.\n\nThis change allows yielding operators to be eagerly chained whenever possible, except after legacy sources.\nYielding operators do not properly work when processInput is called from another thread, but are usually fine in any other chain."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8e0d15b1c909c2aa6a936f504d97ff0bd10303b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/c8e0d15b1c909c2aa6a936f504d97ff0bd10303b", "committedDate": "2020-02-28T14:41:00Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases.\nMoved test case to StreamingJobGraphGenerator."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "810b12ab01637f7d70d091922ba9cbf9bc45680e", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/810b12ab01637f7d70d091922ba9cbf9bc45680e", "committedDate": "2020-02-26T09:21:55Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases.\nMoved test case to StreamingJobGraphGenerator."}, "afterCommit": {"oid": "c8e0d15b1c909c2aa6a936f504d97ff0bd10303b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/c8e0d15b1c909c2aa6a936f504d97ff0bd10303b", "committedDate": "2020-02-28T14:41:00Z", "message": "[FLINK-16219][runtime] Made AsyncWaitOperator chainable to non-sources.\n\nAsyncWaitOperator is not thread-safe when chained to legacy sources, but works well in a chained fashion in all other cases.\nMoved test case to StreamingJobGraphGenerator."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTcxNjIz", "url": "https://github.com/apache/flink/pull/11177#pullrequestreview-367171623", "createdAt": "2020-03-02T12:47:44Z", "commit": {"oid": "c8e0d15b1c909c2aa6a936f504d97ff0bd10303b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4918, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}