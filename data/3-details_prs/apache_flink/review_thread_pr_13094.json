{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTY5MDY0", "number": 13094, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjowMDoyN1rOEWoqZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyNDo0MVrOEWromg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTcwMzQwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/connectors.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjowMDoyN1rOG9_rMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjowMDoyN1rOG9_rMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1OTU2OQ==", "bodyText": "It makes no sense to let Python users init SinkFunction with a Java object. I think we can make the SinkFunction extends JavaFunctionWrapper and add a get_java_function() method in JavaFunctionWrapper.\nMeanwhile, the JavaFunctionWrapper should support initialization both with a java string or a java object.", "url": "https://github.com/apache/flink/pull/13094#discussion_r467659569", "createdAt": "2020-08-10T02:00:27Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/connectors.py", "diffHunk": "@@ -0,0 +1,37 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+\n+class SinkFunction(object):\n+    \"\"\"\n+    The base class for SinkFunctions.\n+    \"\"\"\n+\n+    def __init__(self, j_sink_func):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8517591f8e26a91f25c00e2532af495b8fd3c7b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTcwNDQyOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/connectors.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjowMDo0NVrOG9_rmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjowMDo0NVrOG9_rmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY1OTY3NQ==", "bodyText": "Could we also add tests for SinkFunction. For example, you can add a CustomSinkFunction which extends SinkFunction. The code looks like:\nclass TestSinkFunction(SinkFunction):\n   def __init__(self, func):\n      ...\n   def get_results():\n     ...", "url": "https://github.com/apache/flink/pull/13094#discussion_r467659675", "createdAt": "2020-08-10T02:00:45Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/connectors.py", "diffHunk": "@@ -0,0 +1,37 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+\n+class SinkFunction(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8517591f8e26a91f25c00e2532af495b8fd3c7b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTc4ODAzOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/connectors.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMzoxMjoxMFrOG-AWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMzoxMjoxMFrOG-AWqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MDY5Nw==", "bodyText": "It's better to add the SinkFunction in the functions.py", "url": "https://github.com/apache/flink/pull/13094#discussion_r467670697", "createdAt": "2020-08-10T03:12:10Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/connectors.py", "diffHunk": "@@ -0,0 +1,37 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+\n+class SinkFunction(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8517591f8e26a91f25c00e2532af495b8fd3c7b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTk0NTcyOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyMjoxOFrOG-BrmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyMjoxOFrOG-BrmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MjQ0MQ==", "bodyText": "Add comments for this class.", "url": "https://github.com/apache/flink/pull/13094#discussion_r467692441", "createdAt": "2020-08-10T05:22:18Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -147,3 +150,34 @@ def _get_python_env():\n     gateway = get_gateway()\n     exec_type = gateway.jvm.org.apache.flink.table.functions.python.PythonEnv.ExecType.PROCESS\n     return gateway.jvm.org.apache.flink.table.functions.python.PythonEnv(exec_type)\n+\n+\n+class JavaFunctionWrapper(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2d512352be69a3661708014f21f0dad16050c10"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTk0NzkzOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyNDowN1rOG-Bs1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyNDowN1rOG-Bs1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5Mjc1Nw==", "bodyText": "Move this logic into JavaFunctionWrapper so that can be shared by other classes, e.g., SourceFunction.", "url": "https://github.com/apache/flink/pull/13094#discussion_r467692757", "createdAt": "2020-08-10T05:24:07Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -147,3 +150,34 @@ def _get_python_env():\n     gateway = get_gateway()\n     exec_type = gateway.jvm.org.apache.flink.table.functions.python.PythonEnv.ExecType.PROCESS\n     return gateway.jvm.org.apache.flink.table.functions.python.PythonEnv(exec_type)\n+\n+\n+class JavaFunctionWrapper(object):\n+\n+    def __init__(self, j_function):\n+        self._j_function = j_function\n+\n+    def get_java_function(self):\n+        return self._j_function\n+\n+\n+class SinkFunction(JavaFunctionWrapper):\n+    \"\"\"\n+    The base class for SinkFunctions.\n+    \"\"\"\n+\n+    def __init__(self, sink_func: Union[str, JavaObject], *args):\n+        \"\"\"\n+        Constructor of SinkFunction.\n+\n+        :param sink_func: The java SinkFunction object.\n+        \"\"\"\n+        if isinstance(sink_func, str):\n+            j_source_func_class = get_gateway().jvm.__getattr__(sink_func)\n+            if len(args) > 0:\n+                j_sink_func = j_source_func_class(*args)\n+            else:\n+                j_sink_func = j_source_func_class()\n+        else:\n+            j_sink_func = sink_func\n+        super(SinkFunction, self).__init__(j_sink_func)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2d512352be69a3661708014f21f0dad16050c10"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTk1NDk1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyODo1OVrOG-BwgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNToyODo1OVrOG-BwgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5MzY5Ng==", "bodyText": "The test is useless here, as it uses the DataStreamCollectUtil to collect and verify. The add_sink has not been tested. You can add a CustomSinkFunction which extends SinkFunction. The code looks like:\nclass TestSinkFunction(SinkFunction):\n   def __init__(self, func):\n      ...\n   def get_results():\n     ...", "url": "https://github.com/apache/flink/pull/13094#discussion_r467693696", "createdAt": "2020-08-10T05:28:59Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "diffHunk": "@@ -149,6 +149,22 @@ def flat_map(value):\n         expected.sort()\n         self.assertEqual(expected, results)\n \n+    def test_add_sink_with_sink_func_class(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2d512352be69a3661708014f21f0dad16050c10"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTk3MDA4OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTozODoxMlrOG-B4fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTozODoxMlrOG-B4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5NTc0MA==", "bodyText": "If you want to support *args, you need to take all types into consideration, i.e., convert different python types to java types. I think we don't need to support *args here.", "url": "https://github.com/apache/flink/pull/13094#discussion_r467695740", "createdAt": "2020-08-10T05:38:12Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -147,3 +150,34 @@ def _get_python_env():\n     gateway = get_gateway()\n     exec_type = gateway.jvm.org.apache.flink.table.functions.python.PythonEnv.ExecType.PROCESS\n     return gateway.jvm.org.apache.flink.table.functions.python.PythonEnv(exec_type)\n+\n+\n+class JavaFunctionWrapper(object):\n+\n+    def __init__(self, j_function):\n+        self._j_function = j_function\n+\n+    def get_java_function(self):\n+        return self._j_function\n+\n+\n+class SinkFunction(JavaFunctionWrapper):\n+    \"\"\"\n+    The base class for SinkFunctions.\n+    \"\"\"\n+\n+    def __init__(self, sink_func: Union[str, JavaObject], *args):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2d512352be69a3661708014f21f0dad16050c10"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjE5MDM0OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyNDo0MVrOG-D0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzoyODo1NlrOG-D7Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNzM5NA==", "bodyText": "The test would fail, i.e., there is no collect method on collect_util.", "url": "https://github.com/apache/flink/pull/13094#discussion_r467727394", "createdAt": "2020-08-10T07:24:41Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -216,7 +216,7 @@ def test_execute(self):\n \n     def test_from_collection_without_data_types(self):\n         ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')])\n-        collect_util = DataStreamCollectUtil()\n+        collect_util = DataStreamTestSinkFunction()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec8d9a8dc42c92427dbb9c51b69be9eaae4cd889"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyOTE5MA==", "bodyText": "Sorry, I forget to update this part.", "url": "https://github.com/apache/flink/pull/13094#discussion_r467729190", "createdAt": "2020-08-10T07:28:56Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -216,7 +216,7 @@ def test_execute(self):\n \n     def test_from_collection_without_data_types(self):\n         ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')])\n-        collect_util = DataStreamCollectUtil()\n+        collect_util = DataStreamTestSinkFunction()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcyNzM5NA=="}, "originalCommit": {"oid": "ec8d9a8dc42c92427dbb9c51b69be9eaae4cd889"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4930, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}