{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODk5OTkw", "number": 13562, "title": "[FLINK-18662][metrics][checkpointing] Provide processed/persisted bytes metrics and update alignment time metric.", "bodyText": "This PR provides two new metrics (processed/persisted bytes) and extends the existing alignment time metric to cover also at-least-once checkpoints and unaligned checkpoints. (as discussed in the JIRA ticket).\nBrief change log\nPlease check the individual commits for the change log.\nVerifying this change\nThis PR relies both on the existing tests and also adds a couple of new ones. The final integration with the Web UI is not tested automatically, but it was manually tested (please check the attached screenshots in the JIRA ticket).\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-10-08T12:52:21Z", "url": "https://github.com/apache/flink/pull/13562", "merged": true, "mergeCommit": {"oid": "e079d5a58efcfb67f206d81e707fb852c70d60eb"}, "closed": true, "closedAt": "2020-10-13T15:09:24Z", "author": {"login": "pnowojski"}, "timelineItems": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQhQbVABqjM4NTUzMzA0ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSKA8MgBqjM4NzE5MDczNzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a745916e6c50b5e07d27c208165080f002887a28", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/a745916e6c50b5e07d27c208165080f002887a28", "committedDate": "2020-10-08T12:46:04Z", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state."}, "afterCommit": {"oid": "5e969c447dc974811f30315ad75c450832e48c96", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/5e969c447dc974811f30315ad75c450832e48c96", "committedDate": "2020-10-08T12:59:46Z", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e969c447dc974811f30315ad75c450832e48c96", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/5e969c447dc974811f30315ad75c450832e48c96", "committedDate": "2020-10-08T12:59:46Z", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state."}, "afterCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/e60b28287696df3780e6aff0a61b6e324a344373", "committedDate": "2020-10-08T13:21:45Z", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NzgzNTg5", "url": "https://github.com/apache/flink/pull/13562#pullrequestreview-504783589", "createdAt": "2020-10-08T13:30:12Z", "commit": {"oid": "d755319b4c93305096b2f0854f1e30731729a121"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzozMDoxM1rOHeep8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTo1OTowMVrOHeliMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTU4NA==", "bodyText": "Is that change really necessary? Javadoc of Executor could explicitly states that this is thread-independent:\n\nAn object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads\n\nSo I'd say it's async by nature.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501721584", "createdAt": "2020-10-08T13:30:13Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -76,7 +76,7 @@\n \n \tprivate final CachingCheckpointStorageWorkerView checkpointStorage;\n \tprivate final String taskName;\n-\tprivate final ExecutorService executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d755319b4c93305096b2f0854f1e30731729a121"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjEzNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/flink/pull/13562#discussion_r501722135", "createdAt": "2020-10-08T13:31:01Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -90,6 +90,11 @@ public boolean isRunning() {\n \n \t@Override\n \tpublic void run() {\n+\t\tfinal long asyncStartNanos = System.nanoTime();\n+\t\tfinal long asyncStartDelayMillis = (asyncStartNanos - asyncConstructionNanos) / 1_000_000L;\n+\t\tLOG.debug(\"{} - started executing asynchronous part of checkpoint {}. Asynchronous start delay: {} ms\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df37e53bbf33d54ec22f278e9bbb1ea17f4c747"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNzk4MQ==", "bodyText": "I'd go with debug", "url": "https://github.com/apache/flink/pull/13562#discussion_r501727981", "createdAt": "2020-10-08T13:39:02Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java", "diffHunk": "@@ -97,8 +104,13 @@ private void processPriorityEvents() throws IOException, InterruptedException {\n \n \tprivate void waitForPriorityEvents(InputGate inputGate, MailboxExecutor mailboxExecutor) {\n \t\tfinal CompletableFuture<?> priorityEventAvailableFuture = inputGate.getPriorityEventAvailableFuture();\n-\t\tpriorityEventAvailableFuture.thenRun(() ->\n-\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate));\n+\t\tFutureUtils.assertNoException(priorityEventAvailableFuture.thenRun(() -> {\n+\t\t\ttry {\n+\t\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate);\n+\t\t\t} catch (RejectedExecutionException ex) {\n+\t\t\t\tLOG.info(\"Ignored RejectedExecutionException in CheckpointedInputGate.waitForPriorityEvents\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ea0975016c7a531dd80571c1d63e1e530cdda1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyODIxNA==", "bodyText": "static import for consistency?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501728214", "createdAt": "2020-10-08T13:39:19Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java", "diffHunk": "@@ -97,8 +104,13 @@ private void processPriorityEvents() throws IOException, InterruptedException {\n \n \tprivate void waitForPriorityEvents(InputGate inputGate, MailboxExecutor mailboxExecutor) {\n \t\tfinal CompletableFuture<?> priorityEventAvailableFuture = inputGate.getPriorityEventAvailableFuture();\n-\t\tpriorityEventAvailableFuture.thenRun(() ->\n-\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate));\n+\t\tFutureUtils.assertNoException(priorityEventAvailableFuture.thenRun(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ea0975016c7a531dd80571c1d63e1e530cdda1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyODc1Nw==", "bodyText": "commit message: [task/network]?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501728757", "createdAt": "2020-10-08T13:40:01Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java", "diffHunk": "@@ -33,6 +33,7 @@\n import java.util.concurrent.CompletableFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56ea0975016c7a531dd80571c1d63e1e530cdda1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyOTQxMQ==", "bodyText": "\ud83d\udc4d . Should also make debugging easier as size ~ sequence number.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501729411", "createdAt": "2020-10-08T13:40:54Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java", "diffHunk": "@@ -863,19 +860,11 @@ private static BufferOrEvent createCancellationBarrier(long checkpointId, int ch\n \n \tprivate static BufferOrEvent createBuffer(int channel) {\n \t\tfinal int size = sizeCounter++;\n-\t\tbyte[] bytes = new byte[size];\n-\t\tRND.nextBytes(bytes);\n-\n-\t\tMemorySegment memory = MemorySegmentFactory.allocateUnpooledSegment(PAGE_SIZE);\n-\t\tmemory.put(0, bytes);\n-\n-\t\tBuffer buf = new NetworkBuffer(memory, FreeingBufferRecycler.INSTANCE);\n-\t\tbuf.setSize(size);\n-\n-\t\t// retain an additional time so it does not get disposed after being read by the input gate\n-\t\tbuf.retainBuffer();\n+\t\treturn createBuffer(channel, size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74fac5278c3c78523fb69c82be0123fc542e17e0"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMDQ0OQ==", "bodyText": "Maybe it should be put in top level and used by both tests? (So just one handler instead of 2)", "url": "https://github.com/apache/flink/pull/13562#discussion_r501730449", "createdAt": "2020-10-08T13:42:13Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java", "diffHunk": "@@ -720,54 +720,17 @@ private CheckpointBarrier buildCheckpointBarrier(long id) {\n \t/**\n \t * The invokable handler used for triggering checkpoint and validation.\n \t */\n-\tprivate class ValidatingCheckpointHandler extends AbstractInvokable {\n-\n-\t\tprivate long nextExpectedCheckpointId;\n-\n-\t\tprivate long lastCanceledCheckpointId;\n+\tstatic class ValidatingCheckpointHandler extends CheckpointBarrierAlignerTest.ValidatingCheckpointHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dee8fc74a69e952f9e6979ce93f038b7a02aaab2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTM2Ng==", "bodyText": "\ud83d\udc4d to using builder pattern.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501731366", "createdAt": "2020-10-08T13:43:29Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A builder for {@link CheckpointMetrics}.\n+ *\n+ * <p>This class is not thread safe, but parts of it can actually be used from different threads.\n+ */\n+@NotThreadSafe\n+public class CheckpointMetricsBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTk1NQ==", "bodyText": "@ThreadSafe?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501731955", "createdAt": "2020-10-08T13:44:17Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java", "diffHunk": "@@ -31,68 +31,49 @@\n \tprivate static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMjY4NQ==", "bodyText": "CheckpointMetrics -> CheckpointMetricsBuilder?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501732685", "createdAt": "2020-10-08T13:45:12Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -268,4 +271,22 @@ private void logFailedCleanupAttempt() {\n \t\t\tcheckpointMetaData.getCheckpointId());\n \t}\n \n+\t/**\n+\t * Helper class that allows to calculate metrics in the task and update/report them in\n+\t * {@link AsyncCheckpointRunnable}. For example it allows to update {@link CheckpointMetrics}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDAzOQ==", "bodyText": "Isn't that potentially swallowing exceptions again?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501740039", "createdAt": "2020-10-08T13:54:39Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -69,8 +86,9 @@ public long getCheckpointStartDelayNanos() {\n \t}\n \n \tpublic CheckpointMetrics build() {\n+\t\tcheckState(alignmentDurationNanos.isDone());\n \t\treturn new CheckpointMetrics(\n-\t\t\talignmentDurationNanos,\n+\t\t\tFutureUtils.getWithoutException(alignmentDurationNanos),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDg3Mw==", "bodyText": "Again this swallows exception and if it does you get null instead of the default.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501740873", "createdAt": "2020-10-08T13:55:41Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java", "diffHunk": "@@ -1054,6 +1054,16 @@ public void onComplete(Throwable failure, U success) {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * @return the result of completable future, or the defaultValue if it has not yet completed.\n+\t */\n+\tpublic static <T> T getOrDefault(CompletableFuture<T> future, T defaultValue) {\n+\t\tif (future.isDone()) {\n+\t\t\treturn getWithoutException(future);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MjI1Mg==", "bodyText": "Potential NPE (fixed with proper getOrDefault).", "url": "https://github.com/apache/flink/pull/13562#discussion_r501742252", "createdAt": "2020-10-08T13:57:28Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -75,7 +86,11 @@ public void close() throws IOException {\n \tpublic abstract long getLatestCheckpointId();\n \n \tpublic long getAlignmentDurationNanos() {\n-\t\treturn 0;\n+\t\tif (startOfAlignmentTimestamp <= 0) {\n+\t\t\treturn FutureUtils.getOrDefault(latestAlignmentDurationNanos, 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0NzQyOQ==", "bodyText": "System.nanoTime could potentially return negative values and the difference is still plausible. I'd probably just use a specific tag value (no need to encode unset as null).", "url": "https://github.com/apache/flink/pull/13562#discussion_r501747429", "createdAt": "2020-10-08T14:04:14Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -75,7 +86,11 @@ public void close() throws IOException {\n \tpublic abstract long getLatestCheckpointId();\n \n \tpublic long getAlignmentDurationNanos() {\n-\t\treturn 0;\n+\t\tif (startOfAlignmentTimestamp <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MTc0Mw==", "bodyText": "again could be negative.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501751743", "createdAt": "2020-10-08T14:09:54Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MjE0Mw==", "bodyText": "Extract constant and use it for field initialization and comparisons.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501752143", "createdAt": "2020-10-08T14:10:24Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n+\t\t}\n+\t\telse {\n+\t\t\tmarkAlignmentEnd(0);\n+\t\t}\n+\t}\n+\n+\tprotected void markAlignmentEnd(long alignmentDuration) {\n+\t\tif (!latestAlignmentDurationNanos.isDone()) {\n+\t\t\tlatestAlignmentDurationNanos.complete(alignmentDuration);\n+\t\t}\n+\t\tstartOfAlignmentTimestamp = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjYxMw==", "bodyText": "This method is odd: It doesn't really fit to markCheckpointStart (markAlignmentEnd() does). Maybe it should simply be called setAlignmentDuration?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501756613", "createdAt": "2020-10-08T14:16:12Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n+\t\t}\n+\t\telse {\n+\t\t\tmarkAlignmentEnd(0);\n+\t\t}\n+\t}\n+\n+\tprotected void markAlignmentEnd(long alignmentDuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1ODcyMA==", "bodyText": "This looks suboptimal: markCheckpointStart calls resetAlignment which calls markAlignmentEnd(0). Then we call it again, but this time, it's completely different behavior.\nMaybe we need:\n\nmarkCheckpointStart\nmarkAlignmentStart (not for tracker just for (Un)Aligner))\nmarkAlignmentEnd (just for (Un)Aligner))\nsetAlignmentDuration (for all)", "url": "https://github.com/apache/flink/pull/13562#discussion_r501758720", "createdAt": "2020-10-08T14:19:04Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java", "diffHunk": "@@ -82,7 +82,9 @@ public void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo c\n \n \t\t// fast path for single channel trackers\n \t\tif (totalNumberOfInputChannels == 1) {\n-\t\t\tnotifyCheckpoint(receivedBarrier, 0);\n+\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());\n+\t\t\tmarkAlignmentEnd(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTI4OQ==", "bodyText": "While this is technically the correct way, it might be overengineered. I'm wonder what impact a few ns alignment has? Don't we render ms anyways?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501761289", "createdAt": "2020-10-08T14:22:10Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -104,12 +104,19 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t\tfor (final CheckpointableInput input : inputs) {\n \t\t\t\tinput.checkpointStarted(barrier);\n \t\t\t}\n-\t\t\tnotifyCheckpoint(barrier, 0);\n+\t\t\tnotifyCheckpoint(barrier);\n \t\t}\n \t\tif (currentCheckpointId == barrierId) {\n \t\t\tLOG.debug(\"{}: Received barrier from channel {} @ {}.\", taskName, channelInfo, barrierId);\n \n \t\t\tif (++numBarriersReceived == numOpenChannels) {\n+\t\t\t\tif (getNumOpenChannels() > 1) {\n+\t\t\t\t\tmarkAlignmentEnd();\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t// Make sure to report 0 for single channel case\n+\t\t\t\t\tmarkAlignmentEnd(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MzAyOQ==", "bodyText": "Why is that moved down?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501763029", "createdAt": "2020-10-08T14:24:19Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java", "diffHunk": "@@ -236,25 +235,32 @@ public void testMetrics() throws Exception {\n \n \t\tThread.sleep(sleepTime);\n \n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n \t\taddSequence(inputGate,\n \t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n \t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n \t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n \t\t\tcreateBarrier(checkpointId, 0),\n \t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize));\n \n-\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNjk4Mw==", "bodyText": "is(both(greaterThanOrEqualTo(sleepTime)).and(lessThanOrEqualTo(startDelay))) to show that it's a range?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501806983", "createdAt": "2020-10-08T15:21:01Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java", "diffHunk": "@@ -347,9 +365,119 @@ public void testInterleavedCancellationBarriers() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testMetrics() throws Exception {\n+\t\tList<BufferOrEvent> output = new ArrayList<>();\n+\t\tValidatingCheckpointHandler handler = new ValidatingCheckpointHandler();\n+\t\tint numberOfChannels = 3;\n+\t\tinputGate = createCheckpointedInputGate(numberOfChannels, handler);\n+\t\tint[] sequenceNumbers = new int[numberOfChannels];\n+\n+\t\tint bufferSize = 100;\n+\t\tlong checkpointId = 1;\n+\t\tlong sleepTime = 10;\n+\n+\t\tlong checkpointBarrierCreation = System.currentTimeMillis();\n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(\n+\t\t\tinputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 0),\n+\t\t\tcreateBuffer(2, bufferSize));\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(inputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBarrier(checkpointId, 2),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateEndOfPartition(0), createEndOfPartition(1), createEndOfPartition(2));\n+\n+\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n+\t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n+\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwOTc0OA==", "bodyText": "Are you really sure that you this changed semantics of alignment in tracker is correct? Afaik it used to 0 always.\nIf yes, I'd expect some documentation/changelog to go with that (haven't checked later commits yet). Also please add that to the commit message.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501809748", "createdAt": "2020-10-08T15:24:40Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java", "diffHunk": "@@ -347,9 +365,119 @@ public void testInterleavedCancellationBarriers() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testMetrics() throws Exception {\n+\t\tList<BufferOrEvent> output = new ArrayList<>();\n+\t\tValidatingCheckpointHandler handler = new ValidatingCheckpointHandler();\n+\t\tint numberOfChannels = 3;\n+\t\tinputGate = createCheckpointedInputGate(numberOfChannels, handler);\n+\t\tint[] sequenceNumbers = new int[numberOfChannels];\n+\n+\t\tint bufferSize = 100;\n+\t\tlong checkpointId = 1;\n+\t\tlong sleepTime = 10;\n+\n+\t\tlong checkpointBarrierCreation = System.currentTimeMillis();\n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(\n+\t\t\tinputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 0),\n+\t\t\tcreateBuffer(2, bufferSize));\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(inputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBarrier(checkpointId, 2),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateEndOfPartition(0), createEndOfPartition(1), createEndOfPartition(2));\n+\n+\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n+\t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n+\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));\n+\n+\t\tassertTrue(handler.getLastAlignmentDurationNanos().isDone());\n+\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjI1NA==", "bodyText": "Is the previous commit even \"correct\" without this change? It feels that they should be squashed.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501812254", "createdAt": "2020-10-08T15:28:00Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -122,6 +122,8 @@ public void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo c\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n+\t\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a88a725ad55904cbfcc7e2a03b96f54754b650c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMzQwMg==", "bodyText": "nit: no newline?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501813402", "createdAt": "2020-10-08T15:29:36Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java", "diffHunk": "@@ -68,6 +68,8 @@ private MetricNames() {\n \tpublic static final String CHECKPOINT_ALIGNMENT_TIME = \"checkpointAlignmentTime\";\n \tpublic static final String CHECKPOINT_START_DELAY_TIME = \"checkpointStartDelayNanos\";\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93d22f3c0482bcddec37b2e61c335fcfb604630"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDM0NQ==", "bodyText": "Just to double-check, that should also account mini state that is stored into _metadata right?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501814345", "createdAt": "2020-10-08T15:30:52Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -121,11 +123,15 @@ public void run() {\n \t\t\t\tlocalTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n \t\t\t\t\toperatorID,\n \t\t\t\t\tfinalizedSnapshots.getTaskLocalState());\n+\n+\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getResultSubpartitionState().getStateSize();\n+\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getInputChannelState().getStateSize();\n \t\t\t}\n \n \t\t\tfinal long asyncEndNanos = System.nanoTime();\n \t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncConstructionNanos) / 1_000_000L;\n \n+\t\t\tcheckpointMetrics.setBytesPersistedDuringAlignment(bytesPersistedDuringAlignment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93d22f3c0482bcddec37b2e61c335fcfb604630"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTU2NA==", "bodyText": "I second my suggestion to pull it to top-level.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501815564", "createdAt": "2020-10-08T15:32:29Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java", "diffHunk": "@@ -913,7 +915,8 @@ private static void validateAlignmentTime(long alignmentStartTimestamp, Checkpoi\n \t\tprotected long nextExpectedCheckpointId;\n \t\tprotected long triggeredCheckpointCounter = 0;\n \t\tprotected long abortedCheckpointCounter = 0;\n-\t\tprivate CompletableFuture<Long> lastAlignmentDurationNanos;\n+\t\tprotected CompletableFuture<Long> lastAlignmentDurationNanos;\n+\t\tprotected List<Long> triggeredCheckpoints = new ArrayList<>();\n \n \t\tpublic ValidatingCheckpointHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdb413e0d1f52500f9da7d7e5fa50ca70358d73a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjYzMA==", "bodyText": "nit: already use static import in original commit.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501816630", "createdAt": "2020-10-08T15:34:08Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -92,9 +108,11 @@ public long getCheckpointStartDelayNanos() {\n \n \tpublic CheckpointMetrics build() {\n \t\tcheckState(alignmentDurationNanos.isDone());\n+\t\tcheckState(bytesProcessedDuringAlignment.isDone());\n \t\treturn new CheckpointMetrics(\n+\t\t\tgetWithoutException(bytesProcessedDuringAlignment),\n \t\t\tbytesPersistedDuringAlignment,\n-\t\t\tFutureUtils.getWithoutException(alignmentDurationNanos),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65f18ef4f1a850c561917475a259fdfa779c10f8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg==", "bodyText": "At this point, I was wondering if we really need all futures? At the point where we are calling metrics#build, we are assuming everything is done anyways. Wouldn't it be enough to just sync(builder) when setting the final values?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501823392", "createdAt": "2020-10-08T15:43:48Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -56,6 +56,13 @@\n \t/** The timestamp as in {@link System#nanoTime()} at which the last alignment started. */\n \tprivate long startOfAlignmentTimestamp;\n \n+\t/**\n+\t * Cumulative counter of bytes processed during alignment. Once we complete alignment, we will\n+\t * put this value into the {@link #latestBytesProcessedDuringAlignment}.\n+\t */\n+\tprivate long bytesProcessedDuringAlignment;\n+\tprivate CompletableFuture<Long> latestBytesProcessedDuringAlignment = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65f18ef4f1a850c561917475a259fdfa779c10f8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNDcwMQ==", "bodyText": "We could even pull up Unaligner#allBarriersReceivedFuture to have a future to listen to and at which time we can expect the handler to have updated all metrics.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501824701", "createdAt": "2020-10-08T15:45:29Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -56,6 +56,13 @@\n \t/** The timestamp as in {@link System#nanoTime()} at which the last alignment started. */\n \tprivate long startOfAlignmentTimestamp;\n \n+\t/**\n+\t * Cumulative counter of bytes processed during alignment. Once we complete alignment, we will\n+\t * put this value into the {@link #latestBytesProcessedDuringAlignment}.\n+\t */\n+\tprivate long bytesProcessedDuringAlignment;\n+\tprivate CompletableFuture<Long> latestBytesProcessedDuringAlignment = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, "originalCommit": {"oid": "65f18ef4f1a850c561917475a259fdfa779c10f8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNTI0Ng==", "bodyText": "Revert", "url": "https://github.com/apache/flink/pull/13562#discussion_r501825246", "createdAt": "2020-10-08T15:46:14Z", "author": {"login": "AHeise"}, "path": "flink-runtime-web/web-dashboard/proxy.conf.json", "diffHunk": "@@ -1,7 +1,7 @@\n [\n   {\n     \"context\": [\"/\"],\n-    \"target\": \"http://localhost:8081\",\n+    \"target\": \"http://localhost:12345\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNzk5MA==", "bodyText": "It seems in-flight is not as common as I (we?) thought. It caused issues in the last blog post. I wonder if we can simply drop it.\nI'm also wondering if it should be more explicit: Processed (persisted) data during alignment. Alternatively, have you thought about simply calling it Received data during alignment?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501827990", "createdAt": "2020-10-08T15:50:01Z", "author": {"login": "AHeise"}, "path": "flink-runtime-web/web-dashboard/src/app/pages/job/checkpoints/job-checkpoints.component.html", "diffHunk": "@@ -128,7 +128,7 @@\n           <th><strong>Latest Acknowledgement</strong></th>\n           <th><strong>End to End Duration</strong></th>\n           <th><strong>Checkpointed Data Size</strong></th>\n-          <th><strong>Buffered During Alignment</strong></th>\n+          <th><strong>Processed (persisted) in-flight data</strong></th>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTEwMQ==", "bodyText": "How will that render? Is one empty? Shouldn't it be 0 B? So would the result look like 0 B 123 KB?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501829101", "createdAt": "2020-10-08T15:51:34Z", "author": {"login": "AHeise"}, "path": "flink-runtime-web/web-dashboard/src/app/pages/job/checkpoints/job-checkpoints.component.html", "diffHunk": "@@ -151,7 +151,7 @@\n             <td *ngIf=\"checkpoint['end_to_end_duration'] >= 0\">{{ checkpoint['end_to_end_duration'] | humanizeDuration}}</td>\n             <td *ngIf=\"checkpoint['end_to_end_duration'] <0\">n/a</td>\n             <td>{{ checkpoint['state_size'] | humanizeBytes }}</td>\n-            <td>{{ checkpoint['alignment_buffered'] | humanizeBytes }}</td>\n+            <td>{{ checkpoint['processed_data'] | humanizeBytes }} ({{ checkpoint['persisted_data'] | humanizeBytes }})</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTU2Mw==", "bodyText": "How much space have we wasted already? Could we simply add two columns? One of them would only be 0B but it would make things more explicit.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501829563", "createdAt": "2020-10-08T15:52:14Z", "author": {"login": "AHeise"}, "path": "flink-runtime-web/web-dashboard/src/app/pages/job/checkpoints/job-checkpoints.component.html", "diffHunk": "@@ -151,7 +151,7 @@\n             <td *ngIf=\"checkpoint['end_to_end_duration'] >= 0\">{{ checkpoint['end_to_end_duration'] | humanizeDuration}}</td>\n             <td *ngIf=\"checkpoint['end_to_end_duration'] <0\">n/a</td>\n             <td>{{ checkpoint['state_size'] | humanizeBytes }}</td>\n-            <td>{{ checkpoint['alignment_buffered'] | humanizeBytes }}</td>\n+            <td>{{ checkpoint['processed_data'] | humanizeBytes }} ({{ checkpoint['persisted_data'] | humanizeBytes }})</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTEwMQ=="}, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMDUwNA==", "bodyText": "atypical to see equals be used for longs.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501830504", "createdAt": "2020-10-08T15:53:41Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/CheckpointStatistics.java", "diffHunk": "@@ -200,6 +214,8 @@ public boolean equals(Object o) {\n \t\t\tstateSize == that.stateSize &&\n \t\t\tduration == that.duration &&\n \t\t\talignmentBuffered == that.alignmentBuffered &&\n+\t\t\tObjects.equals(processedData, that.processedData) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTE5NA==", "bodyText": "should probably be a separate commit by your standards, but this PR already has enough commits for me ;)", "url": "https://github.com/apache/flink/pull/13562#discussion_r501831194", "createdAt": "2020-10-08T15:54:38Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java", "diffHunk": "@@ -56,39 +72,4 @@ public void testSimpleAccess() throws Exception {\n \t\tassertEquals(0, stats.getEndToEndDuration(ackTimestamp + 1));\n \t}\n \n-\t/**\n-\t * Tests that the snapshot is actually serializable.\n-\t */\n-\t@Test\n-\tpublic void testIsJavaSerializable() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMjA0NQ==", "bodyText": "This value might be not accurate, as it's currently measured on the network level, ignoring the data buffered in the records deserialiser.\nI'd assume it's way to technical. Just leave out; you said approximate initially.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501832045", "createdAt": "2020-10-08T15:55:49Z", "author": {"login": "AHeise"}, "path": "docs/monitoring/checkpoint_monitoring.md", "diffHunk": "@@ -62,7 +62,19 @@ The checkpoint history keeps statistics about recently triggered checkpoints, in\n - **Latest Acknowledgement**: The time when the latest acknowledgement for any subtask was received at the JobManager (or n/a if no acknowledgement received yet).\n - **End to End Duration**: The duration from the trigger timestamp until the latest acknowledgement (or n/a if no acknowledgement received yet). This end to end duration for a complete checkpoint is determined by the last subtask that acknowledges the checkpoint. This time is usually larger than single subtasks need to actually checkpoint the state.\n - **Checkpointed Data Size**: The checkpointed data size over all acknowledged subtasks. If incremental checkpointing is enabled this value is the checkpointed data size delta.\n-- **Buffered During Alignment**: The number of bytes buffered during alignment over all acknowledged subtasks. This is only > 0 if a stream alignment takes place during checkpointing. If the checkpointing mode is `AT_LEAST_ONCE` this will always be zero as at least once mode does not require stream alignment.\n+- **Processed in-flight data**: The approximate number of bytes processed during the alignment (time between receiving the first and the last checkpoint barrier) over all acknowledged subtasks. This value might be not accurate, as it's currently measured on the network level, ignoring the data buffered in the records deserialiser.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMzgxMQ==", "bodyText": "Aren't all the other new metrics missing?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501833811", "createdAt": "2020-10-08T15:58:19Z", "author": {"login": "AHeise"}, "path": "docs/monitoring/metrics.md", "diffHunk": "@@ -1354,7 +1354,7 @@ Metrics related to data exchange between task executors using netty network comm\n     <tr>\n       <th rowspan=\"2\"><strong>Task</strong></th>\n       <td>checkpointAlignmentTime</td>\n-      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds).</td>\n+      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds). This is the time between receiving first and the last checkpoint barrier. You can find more information in the [Monitoring State and Checkpoints section]({{ site.baseurl }}/ops/state/large_state_tuning.html#monitoring-state-and-checkpoints)</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNDI5MQ==", "bodyText": "You also need to update the REST page :/.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501834291", "createdAt": "2020-10-08T15:59:01Z", "author": {"login": "AHeise"}, "path": "docs/monitoring/metrics.md", "diffHunk": "@@ -1354,7 +1354,7 @@ Metrics related to data exchange between task executors using netty network comm\n     <tr>\n       <th rowspan=\"2\"><strong>Task</strong></th>\n       <td>checkpointAlignmentTime</td>\n-      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds).</td>\n+      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds). This is the time between receiving first and the last checkpoint barrier. You can find more information in the [Monitoring State and Checkpoints section]({{ site.baseurl }}/ops/state/large_state_tuning.html#monitoring-state-and-checkpoints)</td>\n       <td>Gauge</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0OTU3NDc2", "url": "https://github.com/apache/flink/pull/13562#pullrequestreview-504957476", "createdAt": "2020-10-08T16:24:56Z", "commit": {"oid": "dee8fc74a69e952f9e6979ce93f038b7a02aaab2"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoyNDo1NlrOHemlfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNzozOTo0M1rOHepYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MTUxOQ==", "bodyText": "This handler works a little bit differently, so it must stay here. I can pull the CheckpointBarrierAlignerTest.ValidatingCheckpointHandler up.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501851519", "createdAt": "2020-10-08T16:24:56Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java", "diffHunk": "@@ -720,54 +720,17 @@ private CheckpointBarrier buildCheckpointBarrier(long id) {\n \t/**\n \t * The invokable handler used for triggering checkpoint and validation.\n \t */\n-\tprivate class ValidatingCheckpointHandler extends AbstractInvokable {\n-\n-\t\tprivate long nextExpectedCheckpointId;\n-\n-\t\tprivate long lastCanceledCheckpointId;\n+\tstatic class ValidatingCheckpointHandler extends CheckpointBarrierAlignerTest.ValidatingCheckpointHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMDQ0OQ=="}, "originalCommit": {"oid": "dee8fc74a69e952f9e6979ce93f038b7a02aaab2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NDA4Mg==", "bodyText": "It happens to be (as immutable object), but I would rather avoid giving contract for that.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501864082", "createdAt": "2020-10-08T16:45:06Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java", "diffHunk": "@@ -31,68 +31,49 @@\n \tprivate static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTk1NQ=="}, "originalCommit": {"oid": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NjQ1OA==", "bodyText": "Theoretically. In practise it can not happen, but I've changed the checkState to:\n\t\tcheckState(alignmentDurationNanos.isDone() && !alignmentDurationNanos.isCompletedExceptionally());", "url": "https://github.com/apache/flink/pull/13562#discussion_r501866458", "createdAt": "2020-10-08T16:49:08Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -69,8 +86,9 @@ public long getCheckpointStartDelayNanos() {\n \t}\n \n \tpublic CheckpointMetrics build() {\n+\t\tcheckState(alignmentDurationNanos.isDone());\n \t\treturn new CheckpointMetrics(\n-\t\t\talignmentDurationNanos,\n+\t\t\tFutureUtils.getWithoutException(alignmentDurationNanos),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDAzOQ=="}, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTU3Mw==", "bodyText": "but setAlignmentDuration doesn't capture the fact, that it also finishes the alignment . It might be named finishAlignmentWithDuration(duration) but I think it's better to make it consistent with the markAlignmentEnd() version. This after all ends the alignment, but it's just bypassing the System.nanoTime() - startOfAlignmentTimestamp check.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501875573", "createdAt": "2020-10-08T17:03:48Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n+\t\t}\n+\t\telse {\n+\t\t\tmarkAlignmentEnd(0);\n+\t\t}\n+\t}\n+\n+\tprotected void markAlignmentEnd(long alignmentDuration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjYxMw=="}, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MDgxNw==", "bodyText": "I'm not sure if I'm following your suggested change? If you ignore how are those methods implemented under the hood, those calls here make sense.\nWe are firt marking start of the checkpoint, and we are marking that it finished immediately, with the duration of 0. (note that the first call is also setting the checkpointStartDelay).\nThis is the only place, where those two calls are called one beside another, if I would extracted this to a separate method, that would be a slight overkill.\nNow about how are they implemented under the hood, it's done in order to avoid a bit of code duplication.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501880817", "createdAt": "2020-10-08T17:12:42Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java", "diffHunk": "@@ -82,7 +82,9 @@ public void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo c\n \n \t\t// fast path for single channel trackers\n \t\tif (totalNumberOfInputChannels == 1) {\n-\t\t\tnotifyCheckpoint(receivedBarrier, 0);\n+\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());\n+\t\t\tmarkAlignmentEnd(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1ODcyMA=="}, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTYzOA==", "bodyText": "I would be afraid It would be confusing for the users, \"how can there be alignment with single channel?!\", if ever this happened to cause metric value to be 1ms (in case of some machine hiccup).", "url": "https://github.com/apache/flink/pull/13562#discussion_r501881638", "createdAt": "2020-10-08T17:14:08Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -104,12 +104,19 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t\tfor (final CheckpointableInput input : inputs) {\n \t\t\t\tinput.checkpointStarted(barrier);\n \t\t\t}\n-\t\t\tnotifyCheckpoint(barrier, 0);\n+\t\t\tnotifyCheckpoint(barrier);\n \t\t}\n \t\tif (currentCheckpointId == barrierId) {\n \t\t\tLOG.debug(\"{}: Received barrier from channel {} @ {}.\", taskName, channelInfo, barrierId);\n \n \t\t\tif (++numBarriersReceived == numOpenChannels) {\n+\t\t\t\tif (getNumOpenChannels() > 1) {\n+\t\t\t\t\tmarkAlignmentEnd();\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t// Make sure to report 0 for single channel case\n+\t\t\t\t\tmarkAlignmentEnd(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTI4OQ=="}, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NDYwMg==", "bodyText": "Yes, it's modifying the semantic of this metric. Keeping the old behaviour for CheckpointBarrierTracker doesn't make much sense, as CheckpointBarrierUnaligner behaves in this regards almost as CheckpointBarrierTracker.\nI've modified the documentation in the final commit. I think that's a good point, that we should add this to release notes. I will add this info also to the commit message.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501884602", "createdAt": "2020-10-08T17:18:59Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java", "diffHunk": "@@ -347,9 +365,119 @@ public void testInterleavedCancellationBarriers() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testMetrics() throws Exception {\n+\t\tList<BufferOrEvent> output = new ArrayList<>();\n+\t\tValidatingCheckpointHandler handler = new ValidatingCheckpointHandler();\n+\t\tint numberOfChannels = 3;\n+\t\tinputGate = createCheckpointedInputGate(numberOfChannels, handler);\n+\t\tint[] sequenceNumbers = new int[numberOfChannels];\n+\n+\t\tint bufferSize = 100;\n+\t\tlong checkpointId = 1;\n+\t\tlong sleepTime = 10;\n+\n+\t\tlong checkpointBarrierCreation = System.currentTimeMillis();\n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(\n+\t\t\tinputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 0),\n+\t\t\tcreateBuffer(2, bufferSize));\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(inputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBarrier(checkpointId, 2),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateEndOfPartition(0), createEndOfPartition(1), createEndOfPartition(2));\n+\n+\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n+\t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n+\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));\n+\n+\t\tassertTrue(handler.getLastAlignmentDurationNanos().isDone());\n+\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwOTc0OA=="}, "originalCommit": {"oid": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4ODQ3OA==", "bodyText": "Yes. The previous commit is just as correct as the master branch in this regard. This is pre-existing bug on master, that is a completely independent issue compared to the previous commit (providing alignmentDurationNanos metric for unaligned and at-least-once CheckpointBarrierHandlers).", "url": "https://github.com/apache/flink/pull/13562#discussion_r501888478", "createdAt": "2020-10-08T17:25:30Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -122,6 +122,8 @@ public void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo c\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n+\t\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjI1NA=="}, "originalCommit": {"oid": "7a88a725ad55904cbfcc7e2a03b96f54754b650c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4OTM5OQ==", "bodyText": "actually, those values are not used, as I gave up at providing those metrics at the TM level, so... removing those changes.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501889399", "createdAt": "2020-10-08T17:26:59Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java", "diffHunk": "@@ -68,6 +68,8 @@ private MetricNames() {\n \tpublic static final String CHECKPOINT_ALIGNMENT_TIME = \"checkpointAlignmentTime\";\n \tpublic static final String CHECKPOINT_START_DELAY_TIME = \"checkpointStartDelayNanos\";\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMzQwMg=="}, "originalCommit": {"oid": "a93d22f3c0482bcddec37b2e61c335fcfb604630"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDAwOA==", "bodyText": "? What do you mean?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501890008", "createdAt": "2020-10-08T17:27:56Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -121,11 +123,15 @@ public void run() {\n \t\t\t\tlocalTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n \t\t\t\t\toperatorID,\n \t\t\t\t\tfinalizedSnapshots.getTaskLocalState());\n+\n+\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getResultSubpartitionState().getStateSize();\n+\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getInputChannelState().getStateSize();\n \t\t\t}\n \n \t\t\tfinal long asyncEndNanos = System.nanoTime();\n \t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncConstructionNanos) / 1_000_000L;\n \n+\t\t\tcheckpointMetrics.setBytesPersistedDuringAlignment(bytesPersistedDuringAlignment);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDM0NQ=="}, "originalCommit": {"oid": "a93d22f3c0482bcddec37b2e61c335fcfb604630"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MTU5NA==", "bodyText": "Can you elaborate? Do you mean making CheckpointMetricsBuilder a thread safe class as a whole? I think that would be a bit worse. With futures I can get away from this. CheckpointMetricsBuilder is non thread safe, it can be only used from a single thread (it can be handed over to another thread of course). At the same time, the current interface clearly shows that two of the metrics are supplied asynchronously from somewhere else, with just one simple contract: they must be supplied before building the metrics.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501891594", "createdAt": "2020-10-08T17:30:27Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -56,6 +56,13 @@\n \t/** The timestamp as in {@link System#nanoTime()} at which the last alignment started. */\n \tprivate long startOfAlignmentTimestamp;\n \n+\t/**\n+\t * Cumulative counter of bytes processed during alignment. Once we complete alignment, we will\n+\t * put this value into the {@link #latestBytesProcessedDuringAlignment}.\n+\t */\n+\tprivate long bytesProcessedDuringAlignment;\n+\tprivate CompletableFuture<Long> latestBytesProcessedDuringAlignment = new CompletableFuture<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, "originalCommit": {"oid": "65f18ef4f1a850c561917475a259fdfa779c10f8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NDk0NQ==", "bodyText": "Please see the discussion in the ticket about this exact issue.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501894945", "createdAt": "2020-10-08T17:35:39Z", "author": {"login": "pnowojski"}, "path": "flink-runtime-web/web-dashboard/src/app/pages/job/checkpoints/job-checkpoints.component.html", "diffHunk": "@@ -128,7 +128,7 @@\n           <th><strong>Latest Acknowledgement</strong></th>\n           <th><strong>End to End Duration</strong></th>\n           <th><strong>Checkpointed Data Size</strong></th>\n-          <th><strong>Buffered During Alignment</strong></th>\n+          <th><strong>Processed (persisted) in-flight data</strong></th>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNzk5MA=="}, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NTEyNQ==", "bodyText": "Please check the jira ticket.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501895125", "createdAt": "2020-10-08T17:35:57Z", "author": {"login": "pnowojski"}, "path": "flink-runtime-web/web-dashboard/src/app/pages/job/checkpoints/job-checkpoints.component.html", "diffHunk": "@@ -151,7 +151,7 @@\n             <td *ngIf=\"checkpoint['end_to_end_duration'] >= 0\">{{ checkpoint['end_to_end_duration'] | humanizeDuration}}</td>\n             <td *ngIf=\"checkpoint['end_to_end_duration'] <0\">n/a</td>\n             <td>{{ checkpoint['state_size'] | humanizeBytes }}</td>\n-            <td>{{ checkpoint['alignment_buffered'] | humanizeBytes }}</td>\n+            <td>{{ checkpoint['processed_data'] | humanizeBytes }} ({{ checkpoint['persisted_data'] | humanizeBytes }})</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyOTEwMQ=="}, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NjE1NQ==", "bodyText": "True... :(", "url": "https://github.com/apache/flink/pull/13562#discussion_r501896155", "createdAt": "2020-10-08T17:37:35Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java", "diffHunk": "@@ -56,39 +72,4 @@ public void testSimpleAccess() throws Exception {\n \t\tassertEquals(0, stats.getEndToEndDuration(ackTimestamp + 1));\n \t}\n \n-\t/**\n-\t * Tests that the snapshot is actually serializable.\n-\t */\n-\t@Test\n-\tpublic void testIsJavaSerializable() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTE5NA=="}, "originalCommit": {"oid": "6a864dce8d9959c338f09e056e3e970f104c9624"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NzI1Mw==", "bodyText": "No. We are not exposing processed and persisted bytes on the TM level. It's too complicated.", "url": "https://github.com/apache/flink/pull/13562#discussion_r501897253", "createdAt": "2020-10-08T17:39:27Z", "author": {"login": "pnowojski"}, "path": "docs/monitoring/metrics.md", "diffHunk": "@@ -1354,7 +1354,7 @@ Metrics related to data exchange between task executors using netty network comm\n     <tr>\n       <th rowspan=\"2\"><strong>Task</strong></th>\n       <td>checkpointAlignmentTime</td>\n-      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds).</td>\n+      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds). This is the time between receiving first and the last checkpoint barrier. You can find more information in the [Monitoring State and Checkpoints section]({{ site.baseurl }}/ops/state/large_state_tuning.html#monitoring-state-and-checkpoints)</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMzgxMQ=="}, "originalCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NzQwOA==", "bodyText": "?", "url": "https://github.com/apache/flink/pull/13562#discussion_r501897408", "createdAt": "2020-10-08T17:39:43Z", "author": {"login": "pnowojski"}, "path": "docs/monitoring/metrics.md", "diffHunk": "@@ -1354,7 +1354,7 @@ Metrics related to data exchange between task executors using netty network comm\n     <tr>\n       <th rowspan=\"2\"><strong>Task</strong></th>\n       <td>checkpointAlignmentTime</td>\n-      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds).</td>\n+      <td>The time in nanoseconds that the last barrier alignment took to complete, or how long the current alignment has taken so far (in nanoseconds). This is the time between receiving first and the last checkpoint barrier. You can find more information in the [Monitoring State and Checkpoints section]({{ site.baseurl }}/ops/state/large_state_tuning.html#monitoring-state-and-checkpoints)</td>\n       <td>Gauge</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzNDI5MQ=="}, "originalCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e60b28287696df3780e6aff0a61b6e324a344373", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/e60b28287696df3780e6aff0a61b6e324a344373", "committedDate": "2020-10-08T13:21:45Z", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state."}, "afterCommit": {"oid": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/bb689c444aea5e6480635ce6a5e976ff6b8169d5", "committedDate": "2020-10-08T17:40:24Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/bb689c444aea5e6480635ce6a5e976ff6b8169d5", "committedDate": "2020-10-08T17:40:24Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "bc7f0db4d137fdd415ca36942165dd9ad992baca", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/bc7f0db4d137fdd415ca36942165dd9ad992baca", "committedDate": "2020-10-08T19:23:51Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc7f0db4d137fdd415ca36942165dd9ad992baca", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/bc7f0db4d137fdd415ca36942165dd9ad992baca", "committedDate": "2020-10-08T19:23:51Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "ae76f49a6a5829342757376b6cdbfb03936fae2e", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/ae76f49a6a5829342757376b6cdbfb03936fae2e", "committedDate": "2020-10-08T20:22:50Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae76f49a6a5829342757376b6cdbfb03936fae2e", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/ae76f49a6a5829342757376b6cdbfb03936fae2e", "committedDate": "2020-10-08T20:22:50Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "1264444a0a100bc1775296c92563baced8b340c8", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/1264444a0a100bc1775296c92563baced8b340c8", "committedDate": "2020-10-09T09:42:24Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1264444a0a100bc1775296c92563baced8b340c8", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/1264444a0a100bc1775296c92563baced8b340c8", "committedDate": "2020-10-09T09:42:24Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "9e1454b755c3220b262268ddb3ced79f4e5b82cc", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/9e1454b755c3220b262268ddb3ced79f4e5b82cc", "committedDate": "2020-10-09T13:27:43Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e1454b755c3220b262268ddb3ced79f4e5b82cc", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/9e1454b755c3220b262268ddb3ced79f4e5b82cc", "committedDate": "2020-10-09T13:27:43Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "389cbc085474545ea3db19bb0b5769eebefa2bdc", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/389cbc085474545ea3db19bb0b5769eebefa2bdc", "committedDate": "2020-10-09T15:43:01Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODU1Mzcy", "url": "https://github.com/apache/flink/pull/13562#pullrequestreview-505855372", "createdAt": "2020-10-09T17:14:00Z", "commit": {"oid": "877e30b31c28ca5cbed7bada59cdf41a65fdf024"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxNDowMVrOHfSRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoxNDowMVrOHfSRhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NzMwMw==", "bodyText": "isCompletedNormally(future)?\nI'd even go with\nT value = getWithoutException(future);\nreturn value != null ? value : defaultValue;", "url": "https://github.com/apache/flink/pull/13562#discussion_r502567303", "createdAt": "2020-10-09T17:14:01Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java", "diffHunk": "@@ -1054,6 +1073,16 @@ public void onComplete(Throwable failure, U success) {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * @return the result of completable future, or the defaultValue if it has not yet completed.\n+\t */\n+\tpublic static <T> T getOrDefault(CompletableFuture<T> future, T defaultValue) {\n+\t\tif (future.isDone() && !future.isCompletedExceptionally()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "877e30b31c28ca5cbed7bada59cdf41a65fdf024"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODY5Nzc0", "url": "https://github.com/apache/flink/pull/13562#pullrequestreview-505869774", "createdAt": "2020-10-09T17:35:39Z", "commit": {"oid": "1fd09fc55953cb013c90751efbc457c4acf7be73"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNTozOVrOHfS9GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNTozOVrOHfS9GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3ODQ1Nw==", "bodyText": "I'd rather extend IllegalStateException and then translate that to a RejectedExecutionException in executor#execute. It doesn't make sense to throw an RejectedExecutionException on #quiesce or #yield.", "url": "https://github.com/apache/flink/pull/13562#discussion_r502578457", "createdAt": "2020-10-09T17:35:39Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailbox.java", "diffHunk": "@@ -225,4 +226,13 @@ public boolean isAcceptingMails() {\n \t * @param runnable the runnable to execute\n \t */\n \tvoid runExclusively(Runnable runnable);\n+\n+\t/**\n+\t * Exception thrown when {@link TaskMailbox} is closed.\n+\t */\n+\tclass MailboxClosedException extends RejectedExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd09fc55953cb013c90751efbc457c4acf7be73"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "389cbc085474545ea3db19bb0b5769eebefa2bdc", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/389cbc085474545ea3db19bb0b5769eebefa2bdc", "committedDate": "2020-10-09T15:43:01Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "1afa2ceb2989769c830d585628c4ce870311233c", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/1afa2ceb2989769c830d585628c4ce870311233c", "committedDate": "2020-10-12T12:04:41Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1afa2ceb2989769c830d585628c4ce870311233c", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/1afa2ceb2989769c830d585628c4ce870311233c", "committedDate": "2020-10-12T12:04:41Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "66db0a46b9b05cb54250658b745ae5c99322c829", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/66db0a46b9b05cb54250658b745ae5c99322c829", "committedDate": "2020-10-12T13:00:58Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66db0a46b9b05cb54250658b745ae5c99322c829", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/66db0a46b9b05cb54250658b745ae5c99322c829", "committedDate": "2020-10-12T13:00:58Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "b11530522ab1765981dd302abb9f70e2096ba9b3", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/b11530522ab1765981dd302abb9f70e2096ba9b3", "committedDate": "2020-10-12T13:28:46Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b11530522ab1765981dd302abb9f70e2096ba9b3", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/b11530522ab1765981dd302abb9f70e2096ba9b3", "committedDate": "2020-10-12T13:28:46Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "20eb2f46e0b0c80012126de354f26320a5c663c4", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/20eb2f46e0b0c80012126de354f26320a5c663c4", "committedDate": "2020-10-12T16:57:09Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20eb2f46e0b0c80012126de354f26320a5c663c4", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/20eb2f46e0b0c80012126de354f26320a5c663c4", "committedDate": "2020-10-12T16:57:09Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "7f4fc5df6855d31d929b5549f7dfa1a1509dea40", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/7f4fc5df6855d31d929b5549f7dfa1a1509dea40", "committedDate": "2020-10-12T17:50:59Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MDkxMDky", "url": "https://github.com/apache/flink/pull/13562#pullrequestreview-507091092", "createdAt": "2020-10-13T06:01:15Z", "commit": {"oid": "7f4fc5df6855d31d929b5549f7dfa1a1509dea40"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f4fc5df6855d31d929b5549f7dfa1a1509dea40", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/7f4fc5df6855d31d929b5549f7dfa1a1509dea40", "committedDate": "2020-10-12T17:50:59Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "362bf96cdc6240d8f6a3b800b19ead9f55379636", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/362bf96cdc6240d8f6a3b800b19ead9f55379636", "committedDate": "2020-10-13T08:38:33Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "362bf96cdc6240d8f6a3b800b19ead9f55379636", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/362bf96cdc6240d8f6a3b800b19ead9f55379636", "committedDate": "2020-10-13T08:38:33Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "a825e2e8e363ffc75c884733e38155cd892a7e7c", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/a825e2e8e363ffc75c884733e38155cd892a7e7c", "committedDate": "2020-10-13T09:07:45Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a825e2e8e363ffc75c884733e38155cd892a7e7c", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/a825e2e8e363ffc75c884733e38155cd892a7e7c", "committedDate": "2020-10-13T09:07:45Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "945ab598d03a38f4a5703014efe1f8582124f75e", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/945ab598d03a38f4a5703014efe1f8582124f75e", "committedDate": "2020-10-13T10:21:40Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "945ab598d03a38f4a5703014efe1f8582124f75e", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/945ab598d03a38f4a5703014efe1f8582124f75e", "committedDate": "2020-10-13T10:21:40Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "367fc39d03be5ec414dd8c5e7d399fcc25b6a6c5", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/367fc39d03be5ec414dd8c5e7d399fcc25b6a6c5", "committedDate": "2020-10-13T12:36:30Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b929c43d11121772599648bc6d0b584782a4d73c", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/b929c43d11121772599648bc6d0b584782a4d73c", "committedDate": "2020-10-13T15:07:33Z", "message": "[hotfix][test] Deduplicate TaskStateStatsTest code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33391727152b276aa1b5ac64212bb7c0299429ed", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/33391727152b276aa1b5ac64212bb7c0299429ed", "committedDate": "2020-10-13T15:07:33Z", "message": "[hotfix][task] Rename SubtaskCheckpointCoordinator#executorService to asyncOperationsThreadPool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002d9a974adfc5c6401fb8738004d46ec88be47b", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/002d9a974adfc5c6401fb8738004d46ec88be47b", "committedDate": "2020-10-13T15:07:33Z", "message": "[hotfix][task] Log when AsyncCheckpointRunnalbe starts executing (with the execution delay)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44111977cabf3dcad617dc5d00e969290d095dab", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/44111977cabf3dcad617dc5d00e969290d095dab", "committedDate": "2020-10-13T15:07:34Z", "message": "[hotfix][test] Remove unnecessary abstraction in CheckpointBarrierAlignerTestBase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da0c6b0901ca0572212865436b0fdcc4599378b2", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/da0c6b0901ca0572212865436b0fdcc4599378b2", "committedDate": "2020-10-13T15:07:34Z", "message": "[hotfix][test] Simplify CheckpointBarrierAlignerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "427774c8f46b50a964bfe62da495345adca17c55", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/427774c8f46b50a964bfe62da495345adca17c55", "committedDate": "2020-10-13T15:07:34Z", "message": "[hotfix][test] Deduplicate code of ValidatingCheckpointHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12e06ce4ce3c6b7793b028b74c77f07c96cf97ce", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/12e06ce4ce3c6b7793b028b74c77f07c96cf97ce", "committedDate": "2020-10-13T15:07:34Z", "message": "[hotfix][test] Fix method naming in CheckpointBarrierTrackerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45825f5d4ca69c0cb249ff6789b9a996077d4faf", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/45825f5d4ca69c0cb249ff6789b9a996077d4faf", "committedDate": "2020-10-13T15:07:35Z", "message": "[FLINK-18662][task] Introduce CheckpointMetricsBuilder\n\nThis will later allow to solve in a hopefully elegant way the issue, that\nsome checkpoint metrics are calculated after AsyncCheckpointRunnable's construction.\nCheckpointMetricsBuilder will be able to collect those additional metrics via CompletableFuture's\nwhile CheckpointMetrics class will remain a serializable class used in the RPC."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cea8baab7308cd276969112849fda6d09ed72b0b", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/cea8baab7308cd276969112849fda6d09ed72b0b", "committedDate": "2020-10-13T15:07:35Z", "message": "[FLINK-18662][task] Calculate alignmentDurationNanos for unaligned checkpoints and CheckpointBarrierTracker\n\nThis is modifing the alignmentDurationNanos metric for the CheckpointBarrierTracker. Previously it was\nalways 0, now it's defined as the duration between processing first and the last checkpoint barrier."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9d8211277ab31f27c67561080fe4423bc143b9c", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/a9d8211277ab31f27c67561080fe4423bc143b9c", "committedDate": "2020-10-13T15:07:35Z", "message": "[FLINK-19487][task] Fix calculation of checkpoinStartDelay for single channel CheckpointBarrierAligner\n\nPreviously for one single channel this metric was always zero"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ee37a8892ff6ffebb80931ad6a78aa2f6c0b353", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/2ee37a8892ff6ffebb80931ad6a78aa2f6c0b353", "committedDate": "2020-10-13T15:07:35Z", "message": "[FLINK-18662][task] Add persisted bytes to CheckpointMetrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8c9ef4f6f3701b19ac94a99d2353f0ead2d803e", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/e8c9ef4f6f3701b19ac94a99d2353f0ead2d803e", "committedDate": "2020-10-13T15:07:36Z", "message": "[hotfix][test] Use ValidatingCheckpointHandler in AlternatingCheckpointBarrierHandlerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6e04c18e9c01b721d5fc873dcb092f540bd0999", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/b6e04c18e9c01b721d5fc873dcb092f540bd0999", "committedDate": "2020-10-13T15:07:36Z", "message": "[FLINK-18662][task] Calculate processed bytes during alignment metric"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b4b811a23d4e124114a7aa930fa78212754ffc7", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/4b4b811a23d4e124114a7aa930fa78212754ffc7", "committedDate": "2020-10-13T15:07:36Z", "message": "[FLINK-18662][metrics] Expose persisted and processed bytes metrics to the REST and Web UI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83a241d5ec7fd0fac56cf38456cad269e362c736", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/83a241d5ec7fd0fac56cf38456cad269e362c736", "committedDate": "2020-10-13T15:07:37Z", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "090080be2585aca724429cb96a3088a6f827d9e0", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/090080be2585aca724429cb96a3088a6f827d9e0", "committedDate": "2020-10-13T15:07:37Z", "message": "[hotfix][task] Throw MailboxClosedException if TaskMailbox is closing instead of IllegalStateException\n\nThis will allow to handle this particular exception, instead of catching IllegalStateException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b1d62855fd445b419bf8330bb260b08e9870c4", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/c8b1d62855fd445b419bf8330bb260b08e9870c4", "committedDate": "2020-10-13T15:07:37Z", "message": "[hotfix][test] Do not hide original exception in ShuffleCompressionITCase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d645dc215ed438d3ef2297be9dd5802b0b8196", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/49d645dc215ed438d3ef2297be9dd5802b0b8196", "committedDate": "2020-10-13T15:07:37Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "367fc39d03be5ec414dd8c5e7d399fcc25b6a6c5", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/367fc39d03be5ec414dd8c5e7d399fcc25b6a6c5", "committedDate": "2020-10-13T12:36:30Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}, "afterCommit": {"oid": "49d645dc215ed438d3ef2297be9dd5802b0b8196", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/49d645dc215ed438d3ef2297be9dd5802b0b8196", "committedDate": "2020-10-13T15:07:37Z", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3836, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}