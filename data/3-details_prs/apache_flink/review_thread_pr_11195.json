{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Njk5MTQ5", "number": 11195, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozNDoyM1rODkT9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODoxNFrODr9KrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDAyMjcwOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozNDoyM1rOFwj-mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyMTozOVrOFwt7Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NTQzMg==", "bodyText": "we don't allow star imports", "url": "https://github.com/apache/flink/pull/11195#discussion_r386465432", "createdAt": "2020-03-02T15:34:23Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -38,11 +38,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.BufferedReader;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODM4Nw==", "bodyText": "fixed", "url": "https://github.com/apache/flink/pull/11195#discussion_r386628387", "createdAt": "2020-03-02T20:21:39Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -38,11 +38,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.BufferedReader;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n+import java.io.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NTQzMg=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDAzODk5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunnerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozODoyOVrOFwkIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowNToyOFrOFwtdXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NzkwMQ==", "bodyText": "why is this passing null and not following the same approach as JobManagerHAProcessFailureRecoveryITCase?", "url": "https://github.com/apache/flink/pull/11195#discussion_r386467901", "createdAt": "2020-03-02T15:38:29Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunnerTest.java", "diffHunk": "@@ -92,7 +92,7 @@ private static Configuration createConfiguration() {\n \t}\n \n \tprivate static TaskManagerRunner createTaskManagerRunner(final Configuration configuration) throws Exception {\n-\t\tTaskManagerRunner taskManagerRunner = new TaskManagerRunner(configuration, ResourceID.generate());\n+\t\tTaskManagerRunner taskManagerRunner = new TaskManagerRunner(configuration, ResourceID.generate(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMDc2NA==", "bodyText": "adjusted", "url": "https://github.com/apache/flink/pull/11195#discussion_r386620764", "createdAt": "2020-03-02T20:05:28Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunnerTest.java", "diffHunk": "@@ -92,7 +92,7 @@ private static Configuration createConfiguration() {\n \t}\n \n \tprivate static TaskManagerRunner createTaskManagerRunner(final Configuration configuration) throws Exception {\n-\t\tTaskManagerRunner taskManagerRunner = new TaskManagerRunner(configuration, ResourceID.generate());\n+\t\tTaskManagerRunner taskManagerRunner = new TaskManagerRunner(configuration, ResourceID.generate(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2NzkwMQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA0Mzk1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTozOTozNVrOFwkLUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDowNDoxN1rOFyUtsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2ODY5MQ==", "bodyText": "In the PRs current state pluginManager should be annotated with Nullable", "url": "https://github.com/apache/flink/pull/11195#discussion_r386468691", "createdAt": "2020-03-02T15:39:35Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -119,7 +120,7 @@\n \n \tprivate boolean shutdown;\n \n-\tpublic TaskManagerRunner(Configuration configuration, ResourceID resourceId) throws Exception {\n+\tpublic TaskManagerRunner(Configuration configuration, ResourceID resourceId, PluginManager pluginManager) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NDUwMQ==", "bodyText": "I am  not sure what should be the expected contract here. ReporterSetup will currently only work with the null pluginManager if no reporters are configured (namedReporters.isEmpty()). We could maybe add a checkNonNull in  the ReporterSetup after that first return due to empty namedReporters.\n(TaskManagerRunnerTest is now fixed to initialize the PluginManager properly)", "url": "https://github.com/apache/flink/pull/11195#discussion_r386644501", "createdAt": "2020-03-02T20:55:13Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -119,7 +120,7 @@\n \n \tprivate boolean shutdown;\n \n-\tpublic TaskManagerRunner(Configuration configuration, ResourceID resourceId) throws Exception {\n+\tpublic TaskManagerRunner(Configuration configuration, ResourceID resourceId, PluginManager pluginManager) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2ODY5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMjQ5OQ==", "bodyText": "FileSystem can also take a null for plugin manager. We should probably extract an interface and have a no-op implementation instead. That's out of scope for this PR though.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388312499", "createdAt": "2020-03-05T14:04:17Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -119,7 +120,7 @@\n \n \tprivate boolean shutdown;\n \n-\tpublic TaskManagerRunner(Configuration configuration, ResourceID resourceId) throws Exception {\n+\tpublic TaskManagerRunner(Configuration configuration, ResourceID resourceId, PluginManager pluginManager) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2ODY5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA0NTc4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0MDowNFrOFwkMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozMTozNVrOFwv_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTAwMw==", "bodyText": "revert", "url": "https://github.com/apache/flink/pull/11195#discussion_r386469003", "createdAt": "2020-03-02T15:40:04Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -273,3 +319,4 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn Optional.of((MetricReporter) reporterClass.newInstance());\n \t}\n }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2MjM3Nw==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11195#discussion_r386662377", "createdAt": "2020-03-02T21:31:35Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -273,3 +319,4 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn Optional.of((MetricReporter) reporterClass.newInstance());\n \t}\n }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTAwMw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA1MDIzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0MTowN1rOFwkPQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowNjo0N1rOF5DWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng==", "bodyText": "remove TODOs", "url": "https://github.com/apache/flink/pull/11195#discussion_r386469696", "createdAt": "2020-03-02T15:41:07Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMDkyOQ==", "bodyText": "ping @pnowojski @AHeise  (depends if we want to proceed with the classloading modifications)", "url": "https://github.com/apache/flink/pull/11195#discussion_r386630929", "createdAt": "2020-03-02T20:26:45Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0ODM0OA==", "bodyText": "Takes a while until we get proper SPI, so I'd add the commented code to increase usability.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388348348", "createdAt": "2020-03-05T15:00:08Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MDg0Nw==", "bodyText": "@AHeise the jar path for existing metrics reporters will currently point to the same file due to parent-first loading of org.apache.flink packages (even if one of the jars is in /plugin directory). It might be misleading, so I wanted to keep the note for improvement for later, for when the loading is done differently.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393570847", "createdAt": "2020-03-17T10:13:33Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzI2NQ==", "bodyText": "So this would then only work for two plugins. I don't see a way around that without proper SPI.\nI'd probably remove the commented code completely; it shouldn't be hard to bring back and would avoid some confusion.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394147265", "createdAt": "2020-03-18T07:25:09Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0NjUyOA==", "bodyText": "We usually don't allow commented code, and I agree with arvid that it would be easy to bring back.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394246528", "createdAt": "2020-03-18T10:31:43Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2ODA3Mw==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395368073", "createdAt": "2020-03-19T23:06:47Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTY5Ng=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA1MDUwOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0MToxMVrOFwkPbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTowNDo1M1rOFwvL9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTc0MA==", "bodyText": "revert", "url": "https://github.com/apache/flink/pull/11195#discussion_r386469740", "createdAt": "2020-03-02T15:41:11Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);\n+\t\t\t\t}\n \t\t\t} catch (Exception | ServiceConfigurationError e) {\n \t\t\t\tLOG.warn(\"Error while loading reporter factory.\", e);\n \t\t\t}\n \t\t}\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0OTA3OQ==", "bodyText": "Is this a preferred style in Flink or just according to a principle of touching as few lines as possible?", "url": "https://github.com/apache/flink/pull/11195#discussion_r386649079", "createdAt": "2020-03-02T21:04:53Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);\n+\t\t\t\t}\n \t\t\t} catch (Exception | ServiceConfigurationError e) {\n \t\t\t\tLOG.warn(\"Error while loading reporter factory.\", e);\n \t\t\t}\n \t\t}\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ2OTc0MA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2NDI3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDoyNVrOFwkX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozMDozNlrOF3WPpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTg5MQ==", "bodyText": "Is it guaranteed that they are in opt and lib? What if 2 plugins specified the same factory class?", "url": "https://github.com/apache/flink/pull/11195#discussion_r386471891", "createdAt": "2020-03-02T15:44:25Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NjY5Mg==", "bodyText": "But this would technically be \"multiple implementations of the same reporter\"? The message does not tell explicitly that one of them is in lib and another in plugins - just that while searching those two directories, multiple implementations were found.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386646692", "createdAt": "2020-03-02T20:59:44Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTg5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NzgxMg==", "bodyText": "Should be 'or'", "url": "https://github.com/apache/flink/pull/11195#discussion_r388347812", "createdAt": "2020-03-05T14:59:15Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTg5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MDQ1Mw==", "bodyText": "Strictly speaking it then should be 'and/or', because 'or' could mean that there are two jars, both of which are either in 'lib' or in 'plugins'. I think and was more fitting, but I am also ok with and/or", "url": "https://github.com/apache/flink/pull/11195#discussion_r393580453", "createdAt": "2020-03-17T10:30:36Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+\t\t\t\t\t\t.toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MTg5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2ODA2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NToxNFrOFwkaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozMjo0MVrOFwwCNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjQ5MQ==", "bodyText": "Given that we are iterating over all factories anyway we should be able to move this into the while loop.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386472491", "createdAt": "2020-03-02T15:45:14Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2Mjk2Ng==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11195#discussion_r386662966", "createdAt": "2020-03-02T21:32:41Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjQ5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA2OTM0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NTozM1rOFwka_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTozNDoxMVrOFwwFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjcwMg==", "bodyText": "Should likely be removed or replaced with a meaningful INFO message that a factory was found.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386472702", "createdAt": "2020-03-02T15:45:33Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2Mzc0NA==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11195#discussion_r386663744", "createdAt": "2020-03-02T21:34:11Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n \n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {\n+\t\t\t\t\tString reporterName = matcher.group(1);\n+\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n+\t\t\t\t\t\tif (namedOrderedReporters.contains(reporterName)) {\n+\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tnamedOrderedReporters.add(reporterName);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn namedOrderedReporters;\n+\t}\n+\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.debug(\"All available factories (from both SPIs and Plugins):\");\n+\t\tgetAllReporterFactories(pluginManager).forEachRemaining(i -> LOG.debug(i.toString()));\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.warn(new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjcwMg=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA3OTIxOnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NzozOVrOFwkgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMTo1Nzo1MlrOFwwzSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NDE4OA==", "bodyText": "why is this necessary?", "url": "https://github.com/apache/flink/pull/11195#discussion_r386474188", "createdAt": "2020-03-02T15:47:39Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporter.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * {@link MetricReporter} that exports {@link Metric Metrics} via Prometheus.\n  */\n @PublicEvolving\n-public class PrometheusReporter extends AbstractPrometheusReporter {\n+public class PrometheusReporter extends AbstractPrometheusReporter implements MetricReporter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY3NTUzMA==", "bodyText": "missed that AbstractPrometheusReporter already implements it. Fixed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386675530", "createdAt": "2020-03-02T21:57:52Z", "author": {"login": "afedulov"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporter.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * {@link MetricReporter} that exports {@link Metric Metrics} via Prometheus.\n  */\n @PublicEvolving\n-public class PrometheusReporter extends AbstractPrometheusReporter {\n+public class PrometheusReporter extends AbstractPrometheusReporter implements MetricReporter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NDE4OA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA4MTk1OnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0ODoxMFrOFwkiXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0ODoxMFrOFwkiXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NDU5MQ==", "bodyText": "Add @InstantiateViaFactory annotation so that all instantiations go through the factory.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386474591", "createdAt": "2020-03-02T15:48:10Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporter.java", "diffHunk": "@@ -35,7 +35,7 @@\n  * {@link MetricReporter} that exports {@link Metric Metrics} via Prometheus.\n  */\n @PublicEvolving", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA4MjgwOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0ODoyMVrOFwki4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMjoxMzowNlrOFwxPsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NDcyMg==", "bodyText": "revert", "url": "https://github.com/apache/flink/pull/11195#discussion_r386474722", "createdAt": "2020-03-02T15:48:21Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -185,6 +214,7 @@ public void testReporter() throws Exception {\n \n \t\t\tcheckMetricAvailability(client, \"flink_jobmanager_numRegisteredTaskManagers\");\n \t\t\tcheckMetricAvailability(client, \"flink_taskmanager_Status_Network_TotalMemorySegments\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY4MjgwMA==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/11195#discussion_r386682800", "createdAt": "2020-03-02T22:13:06Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -185,6 +214,7 @@ public void testReporter() throws Exception {\n \n \t\t\tcheckMetricAvailability(client, \"flink_jobmanager_numRegisteredTaskManagers\");\n \t\t\tcheckMetricAvailability(client, \"flink_taskmanager_Status_Network_TotalMemorySegments\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NDcyMg=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDA5Mjg0OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/core/plugin/PluginLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MDozM1rOFwkpAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToxNTo0NVrOF3CfQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NjI5MQ==", "bodyText": "ping @pnowojski / @AHeise", "url": "https://github.com/apache/flink/pull/11195#discussion_r386476291", "createdAt": "2020-03-02T15:50:33Z", "author": {"login": "zentol"}, "path": "flink-core/src/main/java/org/apache/flink/core/plugin/PluginLoader.java", "diffHunk": "@@ -69,7 +68,7 @@ public static PluginLoader create(PluginDescriptor pluginDescriptor, ClassLoader\n \t * @param <P> Type of the requested plugin service.\n \t * @return An iterator of all implementations of the given service interface that could be loaded from the plugin.\n \t */\n-\tpublic <P extends Plugin> Iterator<P> load(Class<P> service) {\n+\tpublic <P> Iterator<P> load(Class<P> service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0MDAyOA==", "bodyText": "That was actually my proposal, since there is no benefit from implementing Plugin and its #configure method does not work well with existing metric factories.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388340028", "createdAt": "2020-03-05T14:47:52Z", "author": {"login": "AHeise"}, "path": "flink-core/src/main/java/org/apache/flink/core/plugin/PluginLoader.java", "diffHunk": "@@ -69,7 +68,7 @@ public static PluginLoader create(PluginDescriptor pluginDescriptor, ClassLoader\n \t * @param <P> Type of the requested plugin service.\n \t * @return An iterator of all implementations of the given service interface that could be loaded from the plugin.\n \t */\n-\tpublic <P extends Plugin> Iterator<P> load(Class<P> service) {\n+\tpublic <P> Iterator<P> load(Class<P> service) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NjI5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1Njc3MQ==", "bodyText": "Marking as resolved.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393256771", "createdAt": "2020-03-16T19:15:45Z", "author": {"login": "afedulov"}, "path": "flink-core/src/main/java/org/apache/flink/core/plugin/PluginLoader.java", "diffHunk": "@@ -69,7 +68,7 @@ public static PluginLoader create(PluginDescriptor pluginDescriptor, ClassLoader\n \t * @param <P> Type of the requested plugin service.\n \t * @return An iterator of all implementations of the given service interface that could be loaded from the plugin.\n \t */\n-\tpublic <P extends Plugin> Iterator<P> load(Class<P> service) {\n+\tpublic <P> Iterator<P> load(Class<P> service) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NjI5MQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwMTg1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MjoyOVrOFwkuZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozMDoxN1rOF3s12w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzY3MA==", "bodyText": "we should actually remove this line (or exclude the metricConfig) as we may be leaking sensitive information.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386477670", "createdAt": "2020-03-02T15:52:29Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwNDA3OA==", "bodyText": "Good point. I am not 100% sure about it - do we have a Flink-wide way to handle such cases? I guess the cleanest approach would be to have a special set of keys that are considered sensitive, which have to be obfuscated prior to logging. Seeing which other config values are used during the initialization could be generally pretty useful for debugging.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386604078", "createdAt": "2020-03-02T19:32:16Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzY3MA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzOTc1NA==", "bodyText": "Ping @AHeise @zentol - could we agree on something here?\nI am always \"pro extensive logging\", but this could be professional deformation. Being able to \"on-demand\" see what is going on is very valuable for production systems. We could declare somewhere for Flink in general that if you choose to run with debug log level, some potentially sensitive information could leak into logs. My arguments are:\n\nIf someone has uncontrolled access to the log files on your machine in production, content of this file is probably not the biggest of your problems.\nRunning with debug level is not a \"normal\" scenario - this is intended for hands on investigation of issues. Log level for potentially compromisable external systems could be explicitly set to trace in such cases.\nWe have been \"leaking\" this data in the current versions with info (!) level without much concern", "url": "https://github.com/apache/flink/pull/11195#discussion_r393839754", "createdAt": "2020-03-17T17:14:00Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzY3MA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwMzUwNQ==", "bodyText": "do we have a Flink-wide way to handle such cases\n\nThe GlobalConfiguration contains a set of keys that are considered sensitive, which we use for the WebUI and various INFO logging.\n\nWe have been \"leaking\" this data in the current versions with info (!) level without much concern\n\nFew reporters actually use credentials (afaik only datadog does), so the sample size is fairly low.\n\nIf someone has uncontrolled access to the log files on your machine in production, content of this file is probably not the biggest of your problems.\n\nDoesn't need access to the machine; access to the UI is sufficient, which was grave enough that we introduced the whole secret-key concept in the first place.\n\nRunning with debug level is not a \"normal\" scenario - this is intended for hands on investigation of issues. Log level for potentially compromisable external systems could be explicitly set to trace in such cases.\n\nThere's precedence with FLINK-10363 that credentials should not be logged even on debug.\nFLINK-16478 also which proposes a REST API for modifying the log level potentially voiding any argument for it being opt-in insecurity.\nI would approach this cautiously and never log anything sensitive.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393903505", "createdAt": "2020-03-17T18:58:58Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzY3MA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1MDY4Mw==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393950683", "createdAt": "2020-03-17T20:30:17Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3NzY3MA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwMjI3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1MjozNlrOFwkusQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozMDozMFrOF3s2Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzc0NQ==", "bodyText": "same as above", "url": "https://github.com/apache/flink/pull/11195#discussion_r386477745", "createdAt": "2020-03-02T15:52:36Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1MDgxMA==", "bodyText": "Removed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393950810", "createdAt": "2020-03-17T20:30:30Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzc0NQ=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwMzc2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1Mjo1NVrOFwkvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMToxMzozOFrOF5AmmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw==", "bodyText": "revert", "url": "https://github.com/apache/flink/pull/11195#discussion_r386477973", "createdAt": "2020-03-02T15:52:55Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxMzk4MQ==", "bodyText": "Is this an accepted style in Flink? I mostly see \"classic\" variant with } catch ... , including the same class in loadReporterFactories() method.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386613981", "createdAt": "2020-03-02T19:52:05Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NDI1Mw==", "bodyText": "In general, the best option is to leave old code as is to not blow up the PR. You could make a separate hotfix to address code style fixes though.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388344253", "createdAt": "2020-03-05T14:54:06Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgzMjUwMA==", "bodyText": "This whole code block was already \"touched\" anyhow, because of refactoring, so I think it should be OK to do such things, unless you have a strong opinion.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393832500", "createdAt": "2020-03-17T17:02:36Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0MTMyMg==", "bodyText": "our code style unfortunately does not cover the placement of such braces; hence we reject any changes such as this to existing code.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394241322", "createdAt": "2020-03-18T10:22:53Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5ODMyNA==", "bodyText": "@zentol Ok, I find it a bit strange, but I am not setting the rules here.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395298324", "createdAt": "2020-03-19T20:23:46Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyMzAzMg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395323032", "createdAt": "2020-03-19T21:13:38Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -178,36 +164,96 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3Nzk3Mw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDEwODIxOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1Mzo1MFrOFwkyPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMDoyNTo1M1rOF4_KRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODY1Mg==", "bodyText": "reviews are a lot easier if we either a) refrain from non-critical refactorings b) move such refactorings into a separate commit.", "url": "https://github.com/apache/flink/pull/11195#discussion_r386478652", "createdAt": "2020-03-02T15:53:50Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NDcyNA==", "bodyText": "\ud83d\udc4d to split up refactoring from actual commit. But in general also \ud83d\udc4d to refactorings.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388344724", "createdAt": "2020-03-05T14:54:50Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODY1Mg=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MDk1Mg==", "bodyText": "Done.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393840952", "createdAt": "2020-03-17T17:16:00Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODY1Mg=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI5OTM5Ng==", "bodyText": "As this did not come up in the second round I consider the new split of commits as appropriate. Resolving.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395299396", "createdAt": "2020-03-19T20:25:53Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3ODY1Mg=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDExMzU2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NTowMVrOFwk1jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDozMDowNVrOF3s1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3OTUwMA==", "bodyText": "same as above about leaking sensitive information", "url": "https://github.com/apache/flink/pull/11195#discussion_r386479500", "createdAt": "2020-03-02T15:55:01Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n-\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n-\t\t\t.collect(Collectors.toSet());\n \n-\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n-\t\tSet<String> namedReporters = new TreeSet<>(String::compareTo);\n-\t\t// scan entire configuration for \"metric.reporter\" keys and parse individual reporter configurations\n-\t\tfor (String key : configuration.keySet()) {\n-\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n-\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n-\t\t\t\tif (matcher.matches()) {\n-\t\t\t\t\tString reporterName = matcher.group(1);\n-\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n-\t\t\t\t\t\tif (namedReporters.contains(reporterName)) {\n-\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tnamedReporters.add(reporterName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\tSet<String> namedReporters = findEnabledReportersInConfiguration(configuration,\n+\t\t\tincludedReportersString);\n \n \t\tif (namedReporters.isEmpty()) {\n \t\t\treturn Collections.emptyList();\n \t\t}\n \n-\t\tList<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\t\tfinal Map<String, MetricReporterFactory> reporterFactories = loadAvailableReporterFactories(pluginManager);\n+\t\tLOG.debug(\"Loaded Reporter Factories: {}\", reporterFactories);\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = loadReporterConfigurations(configuration, namedReporters);\n+\t\tLOG.debug(\"Loaded Reporter Configurations: {}\", reporterConfigurations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1MDU3OQ==", "bodyText": "Addressed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393950579", "createdAt": "2020-03-17T20:30:05Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n-\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n-\t\t\t.collect(Collectors.toSet());\n \n-\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n-\t\tSet<String> namedReporters = new TreeSet<>(String::compareTo);\n-\t\t// scan entire configuration for \"metric.reporter\" keys and parse individual reporter configurations\n-\t\tfor (String key : configuration.keySet()) {\n-\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n-\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n-\t\t\t\tif (matcher.matches()) {\n-\t\t\t\t\tString reporterName = matcher.group(1);\n-\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n-\t\t\t\t\t\tif (namedReporters.contains(reporterName)) {\n-\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tnamedReporters.add(reporterName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\tSet<String> namedReporters = findEnabledReportersInConfiguration(configuration,\n+\t\t\tincludedReportersString);\n \n \t\tif (namedReporters.isEmpty()) {\n \t\t\treturn Collections.emptyList();\n \t\t}\n \n-\t\tList<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\t\tfinal Map<String, MetricReporterFactory> reporterFactories = loadAvailableReporterFactories(pluginManager);\n+\t\tLOG.debug(\"Loaded Reporter Factories: {}\", reporterFactories);\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = loadReporterConfigurations(configuration, namedReporters);\n+\t\tLOG.debug(\"Loaded Reporter Configurations: {}\", reporterConfigurations);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3OTUwMA=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDExMzc5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo1NTowNFrOFwk1sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMDoyOTo1NlrOF3s1LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3OTUzNw==", "bodyText": "same as above about leaking sensitive information", "url": "https://github.com/apache/flink/pull/11195#discussion_r386479537", "createdAt": "2020-03-02T15:55:04Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n-\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n-\t\t\t.collect(Collectors.toSet());\n \n-\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n-\t\tSet<String> namedReporters = new TreeSet<>(String::compareTo);\n-\t\t// scan entire configuration for \"metric.reporter\" keys and parse individual reporter configurations\n-\t\tfor (String key : configuration.keySet()) {\n-\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n-\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n-\t\t\t\tif (matcher.matches()) {\n-\t\t\t\t\tString reporterName = matcher.group(1);\n-\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n-\t\t\t\t\t\tif (namedReporters.contains(reporterName)) {\n-\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tnamedReporters.add(reporterName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\tSet<String> namedReporters = findEnabledReportersInConfiguration(configuration,\n+\t\t\tincludedReportersString);\n \n \t\tif (namedReporters.isEmpty()) {\n \t\t\treturn Collections.emptyList();\n \t\t}\n \n-\t\tList<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\t\tfinal Map<String, MetricReporterFactory> reporterFactories = loadAvailableReporterFactories(pluginManager);\n+\t\tLOG.debug(\"Loaded Reporter Factories: {}\", reporterFactories);\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = loadReporterConfigurations(configuration, namedReporters);\n+\t\tLOG.debug(\"Loaded Reporter Configurations: {}\", reporterConfigurations);\n \n-\t\tfor (String namedReporter: namedReporters) {\n-\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n-\t\t\t\tconfiguration,\n-\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\t\tList<ReporterSetup> reporterSetups = setupReporters(reporterFactories, reporterConfigurations);\n+\t\tLOG.debug(\"All initialized Reporters:\");\n+\t\treporterSetups.forEach(i -> LOG.debug(\"{} - {}\", i.getName(), i.getConfiguration()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk1MDUwOA==", "bodyText": "Addressed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393950508", "createdAt": "2020-03-17T20:29:56Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -120,55 +124,37 @@ public static ReporterSetup forReporter(String reporterName, MetricConfig metric\n \t}\n \n \tprivate static ReporterSetup createReporterSetup(String reporterName, MetricConfig metricConfig, MetricReporter reporter) {\n-\t\tLOG.info(\"Configuring {} with {}.\", reporterName, metricConfig);\n+\t\tLOG.debug(\"Configuring {} with {}.\", reporterName, metricConfig);\n \t\treporter.open(metricConfig);\n \n \t\treturn new ReporterSetup(reporterName, metricConfig, reporter);\n \t}\n \n-\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration) {\n+\tpublic static List<ReporterSetup> fromConfiguration(final Configuration configuration, final PluginManager pluginManager) {\n+\t\tLOG.debug(\"Initializing Reporters from Configuration: {}\", configuration);\n \t\tString includedReportersString = configuration.getString(MetricOptions.REPORTERS_LIST, \"\");\n-\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n-\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n-\t\t\t.collect(Collectors.toSet());\n \n-\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n-\t\tSet<String> namedReporters = new TreeSet<>(String::compareTo);\n-\t\t// scan entire configuration for \"metric.reporter\" keys and parse individual reporter configurations\n-\t\tfor (String key : configuration.keySet()) {\n-\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n-\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n-\t\t\t\tif (matcher.matches()) {\n-\t\t\t\t\tString reporterName = matcher.group(1);\n-\t\t\t\t\tif (includedReporters.isEmpty() || includedReporters.contains(reporterName)) {\n-\t\t\t\t\t\tif (namedReporters.contains(reporterName)) {\n-\t\t\t\t\t\t\tLOG.warn(\"Duplicate class configuration detected for reporter {}.\", reporterName);\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tnamedReporters.add(reporterName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tLOG.info(\"Excluding reporter {}, not configured in reporter list ({}).\", reporterName, includedReportersString);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+\t\tSet<String> namedReporters = findEnabledReportersInConfiguration(configuration,\n+\t\t\tincludedReportersString);\n \n \t\tif (namedReporters.isEmpty()) {\n \t\t\treturn Collections.emptyList();\n \t\t}\n \n-\t\tList<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n+\t\tfinal Map<String, MetricReporterFactory> reporterFactories = loadAvailableReporterFactories(pluginManager);\n+\t\tLOG.debug(\"Loaded Reporter Factories: {}\", reporterFactories);\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = loadReporterConfigurations(configuration, namedReporters);\n+\t\tLOG.debug(\"Loaded Reporter Configurations: {}\", reporterConfigurations);\n \n-\t\tfor (String namedReporter: namedReporters) {\n-\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n-\t\t\t\tconfiguration,\n-\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\t\tList<ReporterSetup> reporterSetups = setupReporters(reporterFactories, reporterConfigurations);\n+\t\tLOG.debug(\"All initialized Reporters:\");\n+\t\treporterSetups.forEach(i -> LOG.debug(\"{} - {}\", i.getName(), i.getConfiguration()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3OTUzNw=="}, "originalCommit": {"oid": "d693668c44effeffafc944835df873e3978f88b9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc3ODA2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDowMDowNVrOFyUkKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzowMToxOVrOF5DP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA1OA==", "bodyText": "Just tagging TODO.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388310058", "createdAt": "2020-03-05T14:00:05Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -160,13 +161,14 @@ public void startCluster() throws ClusterEntrypointException {\n \t\tLOG.info(\"Starting {}.\", getClass().getSimpleName());\n \n \t\ttry {\n-\n-\t\t\tconfigureFileSystems(configuration);\n+\t\t\t//TODO: push down filesystem initialization into runCluster - initializeServices (?)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2MzI1OA==", "bodyText": "@AHeise I wanted to ask if what is written in TODO is a good idea in your opinion. I am not sure about the implications of initializing FileSystems within runSecured. I do not quite like that initialization of services (initializeServices) and  file systems happen in different places.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393563258", "createdAt": "2020-03-17T09:59:58Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -160,13 +161,14 @@ public void startCluster() throws ClusterEntrypointException {\n \t\tLOG.info(\"Starting {}.\", getClass().getSimpleName());\n \n \t\ttry {\n-\n-\t\t\tconfigureFileSystems(configuration);\n+\t\t\t//TODO: push down filesystem initialization into runCluster - initializeServices (?)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA1OA=="}, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NDA0Mg==", "bodyText": "That's something that @zentol knows much better. It sounds plausible to me.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394144042", "createdAt": "2020-03-18T07:17:24Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -160,13 +161,14 @@ public void startCluster() throws ClusterEntrypointException {\n \t\tLOG.info(\"Starting {}.\", getClass().getSimpleName());\n \n \t\ttry {\n-\n-\t\t\tconfigureFileSystems(configuration);\n+\t\t\t//TODO: push down filesystem initialization into runCluster - initializeServices (?)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA1OA=="}, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzNjMyMA==", "bodyText": "I've got no clue. Maybe @tillrohrmann remembers why this was added outside runSecured in bbac4a6#diff-5334e24ac6a0d7e69599ceca71fd2e99.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394236320", "createdAt": "2020-03-18T10:14:21Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -160,13 +161,14 @@ public void startCluster() throws ClusterEntrypointException {\n \t\tLOG.info(\"Starting {}.\", getClass().getSimpleName());\n \n \t\ttry {\n-\n-\t\t\tconfigureFileSystems(configuration);\n+\t\t\t//TODO: push down filesystem initialization into runCluster - initializeServices (?)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA1OA=="}, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NjM1Mw==", "bodyText": "If it is something non-trivial and hard to make a call about, I would propose to skip this refactoring for now.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395366353", "createdAt": "2020-03-19T23:01:19Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -160,13 +161,14 @@ public void startCluster() throws ClusterEntrypointException {\n \t\tLOG.info(\"Starting {}.\", getClass().getSimpleName());\n \n \t\ttry {\n-\n-\t\t\tconfigureFileSystems(configuration);\n+\t\t\t//TODO: push down filesystem initialization into runCluster - initializeServices (?)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDA1OA=="}, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc4MDI3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDowMDozOFrOFyUlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzoyMDoyNVrOF3mUIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDQwNg==", "bodyText": "Just tagging TODO.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388310406", "createdAt": "2020-03-05T14:00:38Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -202,9 +204,11 @@ private SecurityContext installSecurityContext(Configuration configuration) thro\n \t\treturn SecurityUtils.getInstalledContext();\n \t}\n \n-\tprivate void runCluster(Configuration configuration) throws Exception {\n+\tprivate void runCluster(Configuration configuration, PluginManager pluginManager) throws Exception {\n \t\tsynchronized (lock) {\n-\t\t\tinitializeServices(configuration);\n+\n+\t\t\t//TODO: Ask why FileSystem is not initialized here too.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0Mzc0Ng==", "bodyText": "See above.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393843746", "createdAt": "2020-03-17T17:20:25Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/entrypoint/ClusterEntrypoint.java", "diffHunk": "@@ -202,9 +204,11 @@ private SecurityContext installSecurityContext(Configuration configuration) thro\n \t\treturn SecurityUtils.getInstalledContext();\n \t}\n \n-\tprivate void runCluster(Configuration configuration) throws Exception {\n+\tprivate void runCluster(Configuration configuration, PluginManager pluginManager) throws Exception {\n \t\tsynchronized (lock) {\n-\t\t\tinitializeServices(configuration);\n+\n+\t\t\t//TODO: Ask why FileSystem is not initialized here too.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMDQwNg=="}, "originalCommit": {"oid": "bc188f48bff0c164ad2e36ef0eda3a5557e5adba"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTc5NjQ1OnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDowNToyMFrOFyUwDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDoyNzowMFrOF3WHUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMzEwMg==", "bodyText": "Commit message should explain what's actually happening.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388313102", "createdAt": "2020-03-05T14:05:20Z", "author": {"login": "AHeise"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -77,6 +77,7 @@\n \tprivate Path conf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c2b9d6b545c77ed473156d7bbf54c5aecd632b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3ODMyMA==", "bodyText": "Addressed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393578320", "createdAt": "2020-03-17T10:27:00Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -77,6 +77,7 @@\n \tprivate Path conf;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODMxMzEwMg=="}, "originalCommit": {"oid": "c2c2b9d6b545c77ed473156d7bbf54c5aecd632b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjAwNDAxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1Njo1NlrOFyWxhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowOTo0N1rOF6pMTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI0Nw==", "bodyText": "Collectors.toCollection(TreeSet::new) to get rid of the next few lines.", "url": "https://github.com/apache/flink/pull/11195#discussion_r388346247", "createdAt": "2020-03-05T14:56:56Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0ODM4Ng==", "bodyText": "Thanks, changed as proposed.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393848386", "createdAt": "2020-03-17T17:27:46Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI0Nw=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0ODA1NQ==", "bodyText": "@AHeise I have applied this refactoring but then understood that I probably really did not get what you actually propose. Could you please clarify?", "url": "https://github.com/apache/flink/pull/11195#discussion_r395348055", "createdAt": "2020-03-19T22:11:15Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI0Nw=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODI1Nw==", "bodyText": "Set<String> namedOrderedReporters = reporterListPattern.splitAsStream(includedReportersString)\n\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n\t\t\t.collect(Collectors.toCollection(TreeSet::new));", "url": "https://github.com/apache/flink/pull/11195#discussion_r396968257", "createdAt": "2020-03-24T08:15:57Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI0Nw=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMDI2OA==", "bodyText": "You've mentioned \"to get rid of the next few lines\", but this Tree data structure is further used as a container that is filled using some conditional logic and returned from the method, it is not just about having the input entries sorted. Do you propose to rewrite it?", "url": "https://github.com/apache/flink/pull/11195#discussion_r397030268", "createdAt": "2020-03-24T09:59:19Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI0Nw=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNjYyMA==", "bodyText": "Ah you are right. Ignore my comment.", "url": "https://github.com/apache/flink/pull/11195#discussion_r397036620", "createdAt": "2020-03-24T10:09:47Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NjI0Nw=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjAwNzY3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1Nzo1MVrOFyWz4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowMToxNVrOF3qCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Njg1MA==", "bodyText": "warn if it doesn't match?", "url": "https://github.com/apache/flink/pull/11195#discussion_r388346850", "createdAt": "2020-03-05T14:57:51Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0Mjg3Ng==", "bodyText": "Seems like a silent skip . This is old code, maybe @zentol could comment.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393842876", "createdAt": "2020-03-17T17:19:02Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Njg1MA=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNDczMg==", "bodyText": "This would flood the logs with warnings for every single configured parameter, as they all have the metrics.reporter. prefix but don't end with class.", "url": "https://github.com/apache/flink/pull/11195#discussion_r393904732", "createdAt": "2020-03-17T19:01:15Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -179,28 +164,82 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\t\t\tmetricReporterOptional.ifPresent(reporter -> {\n \t\t\t\t\tMetricConfig metricConfig = new MetricConfig();\n \t\t\t\t\treporterConfig.addAllToProperties(metricConfig);\n-\n-\t\t\t\t\treporterArguments.add(createReporterSetup(reporterName, metricConfig, reporter));\n+\t\t\t\t\treporterSetups.add(createReporterSetup(reporterName, metricConfig, reporter));\n \t\t\t\t});\n-\t\t\t}\n-\t\t\tcatch (Throwable t) {\n+\t\t\t} catch (Throwable t) {\n \t\t\t\tLOG.error(\"Could not instantiate metrics reporter {}. Metrics might not be exposed/reported.\", reporterName, t);\n \t\t\t}\n \t\t}\n-\t\treturn reporterArguments;\n+\t\treturn reporterSetups;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n+\tprivate static List<Tuple2<String, Configuration>> loadReporterConfigurations(Configuration configuration, Set<String> namedReporters) {\n+\t\tfinal List<Tuple2<String, Configuration>> reporterConfigurations = new ArrayList<>(namedReporters.size());\n \n+\t\tfor (String namedReporter: namedReporters) {\n+\t\t\tDelegatingConfiguration delegatingConfiguration = new DelegatingConfiguration(\n+\t\t\t\tconfiguration,\n+\t\t\t\tConfigConstants.METRICS_REPORTER_PREFIX + namedReporter + '.');\n+\n+\t\t\treporterConfigurations.add(Tuple2.of(namedReporter, delegatingConfiguration));\n+\t\t}\n+\t\treturn reporterConfigurations;\n+\t}\n+\n+\tprivate static Set<String> findEnabledReportersInConfiguration(Configuration configuration, String includedReportersString) {\n+\t\tSet<String> includedReporters = reporterListPattern.splitAsStream(includedReportersString)\n+\t\t\t.filter(r -> !r.isEmpty()) // splitting an empty string results in an empty string on jdk9+\n+\t\t\t.collect(Collectors.toSet());\n+\n+\t\t// use a TreeSet to make the reporter order deterministic, which is useful for testing\n+\t\tSet<String> namedOrderedReporters = new TreeSet<>(String::compareTo);\n+\n+\t\t// scan entire configuration for keys starting with METRICS_REPORTER_PREFIX and determine the set of enabled reporters\n+\t\tfor (String key : configuration.keySet()) {\n+\t\t\tif (key.startsWith(ConfigConstants.METRICS_REPORTER_PREFIX)) {\n+\t\t\t\tMatcher matcher = reporterClassPattern.matcher(key);\n+\t\t\t\tif (matcher.matches()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0Njg1MA=="}, "originalCommit": {"oid": "5dfb306ba6ff07f700b1afc21847641321705d4d"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzExOTY5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNzoyNjoxMVrOF343XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDoxMDoxNlrOF5VPyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng==", "bodyText": "/ means or. and/or is and or or, which can be simplified to or. (or is not xor in English)", "url": "https://github.com/apache/flink/pull/11195#discussion_r394147676", "createdAt": "2020-03-18T07:26:11Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI0NTc0NQ==", "bodyText": "It's frequently used in our code and documentation; I don't think we gain anything by watching out for things like this.\nPersonally I find it less ambiguous than just or.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394245745", "createdAt": "2020-03-18T10:30:21Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyMTg4MA==", "bodyText": "I wouldn't care if it's just in a comment or internal exception. But if it's user facing, I'd strongly recommend to proof-read everything and fix it.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394321880", "createdAt": "2020-03-18T12:51:31Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyNjAzNw==", "bodyText": "https://en.wikipedia.org/wiki/And/or\nIt is used as an inclusive \"or\" (as in logic and mathematics), while an \"or\" in spoken language might be inclusive or exclusive.\nSeems to me like something that reduces ambiguity, as @zentol said.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395326037", "createdAt": "2020-03-19T21:20:03Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMDEyMg==", "bodyText": "No hard feelings. You can safely ignore that comment. Just wanted to point it out and closing with a cite of your link\n\nIt has been strongly criticized as both ugly in style, and ambiguous in legal documents .\n\nSame in academic writing.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395330122", "createdAt": "2020-03-19T21:28:57Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NTExNA==", "bodyText": "I thing the problem is that we have too many variants to describe with a single coordinating conjunction like \"or\" (plus \"or\" can unfortunately be both inclusive and exclusive). Cases:\n(xx) _ ()\n() _ (xx)\n(x) _ (x)\n(xx) _ (xx)\nAlternatives like \"a or b or both\" also do not work, because in this particular case they can be easily be interpreted as if the \"(x) _ (x)\" case is not an issue (because of \"Multiple\" in the beginning). Seems to me like the best case to indicate this ambiguity is is to use \"and/or\" so that people will be aware of multiple ways this can happen.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395365114", "createdAt": "2020-03-19T22:57:55Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODgyOA==", "bodyText": "I think we should stop discussing this here; this is relevant for the entirety of the documentation, and we could get much more experienced people involved if we target that instead.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395618828", "createdAt": "2020-03-20T12:59:10Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2MTI1OA==", "bodyText": "I leave it as \"and/or\" here, and then we comb through the docs and sources to address it separately.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395661258", "createdAt": "2020-03-20T14:10:16Z", "author": {"login": "afedulov"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/ReporterSetup.java", "diffHunk": "@@ -210,17 +213,31 @@ private static ReporterSetup createReporterSetup(String reporterName, MetricConf\n \t\treturn namedOrderedReporters;\n \t}\n \n-\tprivate static Map<String, MetricReporterFactory> loadReporterFactories() {\n-\t\tfinal ServiceLoader<MetricReporterFactory> serviceLoader = ServiceLoader.load(MetricReporterFactory.class);\n-\n+\tprivate static Map<String, MetricReporterFactory> loadAvailableReporterFactories(PluginManager pluginManager) {\n \t\tfinal Map<String, MetricReporterFactory> reporterFactories = new HashMap<>(2);\n-\t\tfinal Iterator<MetricReporterFactory> factoryIterator = serviceLoader.iterator();\n+\t\tfinal Iterator<MetricReporterFactory> factoryIterator = getAllReporterFactories(pluginManager);\n+\t\tLOG.info(\"Prepare reporter factories (from both SPIs and Plugins):\");\n \t\t// do not use streams or for-each loops here because they do not allow catching individual ServiceConfigurationErrors\n \t\t// such an error might be caused if the META-INF/services contains an entry to a non-existing factory class\n \t\twhile (factoryIterator.hasNext()) {\n \t\t\ttry {\n \t\t\t\tMetricReporterFactory factory = factoryIterator.next();\n-\t\t\t\treporterFactories.put(factory.getClass().getName(), factory);\n+\t\t\t\tString factoryClassName = factory.getClass().getName();\n+\t\t\t\tMetricReporterFactory existingFactory = reporterFactories.get(factoryClassName);\n+\t\t\t\tif (existingFactory == null){\n+\t\t\t\t\treporterFactories.put(factoryClassName, factory);\n+\t\t\t\t\tLOG.info(\"Found reporter factory {} at {} \",\n+\t\t\t\t\t\tfactoryClassName,\n+\t\t\t\t\t\tnew File(factory.getClass().getProtectionDomain().getCodeSource().getLocation().toURI()).getCanonicalPath());\n+\t\t\t\t} else {\n+\t\t\t\t\t//TODO: use path information below, when Plugin Classloader stops always prioritizing factories from /lib\n+//\t\t\t\t\tString jarPath1 = new File(existingFactory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tString jarPath2 = new File(factory.getClass().getProtectionDomain().getCodeSource().getLocation()\n+//\t\t\t\t\t\t.toURI()).getCanonicalPath();\n+//\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found: \\n {} and \\n{}\", jarPath1, jarPath2);\n+\t\t\t\t\tLOG.warn(\"Multiple implementations of the same reporter were found in 'lib' and/or 'plugins' directories for {}. It is recommended to remove redundant reporter JARs to resolve used versions' ambiguity.\", factoryClassName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE0NzY3Ng=="}, "originalCommit": {"oid": "63001ed57dcdebbf5f0642285f6e82565caf7b4e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzMyNDk2OnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODozODoxNlrOF362Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1NzoyNFrOF5SmUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MDE0Mg==", "bodyText": "This will require a rebase; we added a more generic version for copying jars so we don't have to keep adding new ones. You will have to add a JarLocation for the plugins directory, and modify FlinkDistribution#moveJar to handle this location appropriately.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394180142", "createdAt": "2020-03-18T08:38:16Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -260,16 +262,26 @@ public void submitSQLJob(SQLJobSubmission job) throws IOException {\n \t}\n \n \tpublic void copyOptJarsToLib(String jarNamePrefix) throws FileNotFoundException, IOException {\n-\t\tfinal Optional<Path> reporterJarOptional;\n-\t\ttry (Stream<Path> logFiles = Files.walk(opt)) {\n-\t\t\treporterJarOptional = logFiles\n+\t\tcopyOptJars(jarNamePrefix, lib);\n+\t}\n+\n+\tpublic void copyOptJarsToPlugins(String jarNamePrefix) throws FileNotFoundException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NTQyMw==", "bodyText": "But this is not really \"copying jars\", right? It will actually move the file from opt to lib or plugins. The problem is that one of the cases I would like to test required the jar to be actually copied to both.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395375423", "createdAt": "2020-03-19T23:30:57Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -260,16 +262,26 @@ public void submitSQLJob(SQLJobSubmission job) throws IOException {\n \t}\n \n \tpublic void copyOptJarsToLib(String jarNamePrefix) throws FileNotFoundException, IOException {\n-\t\tfinal Optional<Path> reporterJarOptional;\n-\t\ttry (Stream<Path> logFiles = Files.walk(opt)) {\n-\t\t\treporterJarOptional = logFiles\n+\t\tcopyOptJars(jarNamePrefix, lib);\n+\t}\n+\n+\tpublic void copyOptJarsToPlugins(String jarNamePrefix) throws FileNotFoundException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MDE0Mg=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3NjMzNA==", "bodyText": "I assume you mean to modify FlinkDistribution#mapJarLocationToPath ?", "url": "https://github.com/apache/flink/pull/11195#discussion_r395376334", "createdAt": "2020-03-19T23:34:04Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -260,16 +262,26 @@ public void submitSQLJob(SQLJobSubmission job) throws IOException {\n \t}\n \n \tpublic void copyOptJarsToLib(String jarNamePrefix) throws FileNotFoundException, IOException {\n-\t\tfinal Optional<Path> reporterJarOptional;\n-\t\ttry (Stream<Path> logFiles = Files.walk(opt)) {\n-\t\t\treporterJarOptional = logFiles\n+\t\tcopyOptJars(jarNamePrefix, lib);\n+\t}\n+\n+\tpublic void copyOptJarsToPlugins(String jarNamePrefix) throws FileNotFoundException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MDE0Mg=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxNzg3Mw==", "bodyText": "hmmm that's a bit frustrating; now we have to open up the API to allow things that people shouldn't be doing; though admittedly we should be able to test everything a user might do.\nA dumb intermediate workaround would be to have 2 variants; one for copying/moving each.\nYou will also have to modify #moveJar to pass in the file(name at least) to #mapJarLocationPath so that you can introduce the directory for the individual plugin.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395617873", "createdAt": "2020-03-20T12:57:24Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/FlinkDistribution.java", "diffHunk": "@@ -260,16 +262,26 @@ public void submitSQLJob(SQLJobSubmission job) throws IOException {\n \t}\n \n \tpublic void copyOptJarsToLib(String jarNamePrefix) throws FileNotFoundException, IOException {\n-\t\tfinal Optional<Path> reporterJarOptional;\n-\t\ttry (Stream<Path> logFiles = Files.walk(opt)) {\n-\t\t\treporterJarOptional = logFiles\n+\t\tcopyOptJars(jarNamePrefix, lib);\n+\t}\n+\n+\tpublic void copyOptJarsToPlugins(String jarNamePrefix) throws FileNotFoundException, IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MDE0Mg=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzMzMTg5OnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODo0MDozNVrOF366qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODoyNDowOVrOF7QOug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MTI4OA==", "bodyText": "this will also need adjustments after a rebase, as this test now works against the FlinkResource interface, where jar copies and configuration settings are done as part of the FlinkResource setup.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394181288", "createdAt": "2020-03-18T08:40:35Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -120,24 +122,51 @@ public static void checkOS() {\n \tpublic final DownloadCache downloadCache = DownloadCache.get();\n \n \t@Test\n-\tpublic void testReporter() throws Exception {\n-\t\tdist.copyOptJarsToLib(\"flink-metrics-prometheus\");\n+\tpublic void reporterWorksWhenFoundInLibsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwOTg5NA==", "bodyText": "@zentol It seems that this updated approach that got merged into master does not support the kinds of tests that we would need to do for the supported scenarios (see reporterWorksWhenFoundInLibsViaReflection, reporterWorksWhenFoundInPluginsViaReflection, reporterWorksWhenFoundBothInPluginsAndLibsViaFactories in this PR). How should we proceed? I can either bend the FlinkResource implementation back to the state where it supports modifications of the underlying resources after creation and keep the initialization in @Rule (a hack), or reinitialize FlinkResource in every test. What do you think?", "url": "https://github.com/apache/flink/pull/11195#discussion_r396809894", "createdAt": "2020-03-23T23:05:57Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -120,24 +122,51 @@ public static void checkOS() {\n \tpublic final DownloadCache downloadCache = DownloadCache.get();\n \n \t@Test\n-\tpublic void testReporter() throws Exception {\n-\t\tdist.copyOptJarsToLib(\"flink-metrics-prometheus\");\n+\tpublic void reporterWorksWhenFoundInLibsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MTI4OA=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3NjIxOA==", "bodyText": "I'd opt for creating a separate FlinkResource in every test.", "url": "https://github.com/apache/flink/pull/11195#discussion_r397676218", "createdAt": "2020-03-25T08:24:09Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -120,24 +122,51 @@ public static void checkOS() {\n \tpublic final DownloadCache downloadCache = DownloadCache.get();\n \n \t@Test\n-\tpublic void testReporter() throws Exception {\n-\t\tdist.copyOptJarsToLib(\"flink-metrics-prometheus\");\n+\tpublic void reporterWorksWhenFoundInLibsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MTI4OA=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzM0Mzk1OnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODo0Mzo1NVrOF37B7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowMDoxMVrOF5SsNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MzE1MA==", "bodyText": "Ideally we move the logic from PrometheusReporter#open into this method and change the constructor accordingly.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394183150", "createdAt": "2020-03-18T08:43:55Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.prometheus;\n+\n+import org.apache.flink.core.plugin.Plugin;\n+import org.apache.flink.metrics.reporter.MetricReporterFactory;\n+\n+import java.util.Properties;\n+\n+/**\n+ * {@link MetricReporterFactory} for {@link PrometheusReporter}.\n+ */\n+public class PrometheusReporterFactory implements MetricReporterFactory, Plugin {\n+\n+\t@Override\n+\tpublic PrometheusReporter createMetricReporter(Properties properties) {\n+\t\treturn new PrometheusReporter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNTMzMw==", "bodyText": "It seems that this will pull a rather large refactoring with it, because of the call to super.open(config) in the open methods and because of having to reconcile different configuration containers - Properties vs MetricsConfig. I would prefer to address it in a separate refactoring PR, if possible.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395335333", "createdAt": "2020-03-19T21:40:26Z", "author": {"login": "afedulov"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.prometheus;\n+\n+import org.apache.flink.core.plugin.Plugin;\n+import org.apache.flink.metrics.reporter.MetricReporterFactory;\n+\n+import java.util.Properties;\n+\n+/**\n+ * {@link MetricReporterFactory} for {@link PrometheusReporter}.\n+ */\n+public class PrometheusReporterFactory implements MetricReporterFactory, Plugin {\n+\n+\t@Override\n+\tpublic PrometheusReporter createMetricReporter(Properties properties) {\n+\t\treturn new PrometheusReporter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MzE1MA=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxOTM4Mg==", "bodyText": "hmm that is true, I suppose the dual nature of the Prometheus reporters make things a bit funky. Let's leave it like this for now.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395619382", "createdAt": "2020-03-20T13:00:11Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.prometheus;\n+\n+import org.apache.flink.core.plugin.Plugin;\n+import org.apache.flink.metrics.reporter.MetricReporterFactory;\n+\n+import java.util.Properties;\n+\n+/**\n+ * {@link MetricReporterFactory} for {@link PrometheusReporter}.\n+ */\n+public class PrometheusReporterFactory implements MetricReporterFactory, Plugin {\n+\n+\t@Override\n+\tpublic PrometheusReporter createMetricReporter(Properties properties) {\n+\t\treturn new PrometheusReporter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MzE1MA=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzM0NDgxOnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODo0NDoxMFrOF37ChA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTo0NDo1NFrOF5BeGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MzMwMA==", "bodyText": "We need a second factory for the PrometheusPushGatewayReporter", "url": "https://github.com/apache/flink/pull/11195#discussion_r394183300", "createdAt": "2020-03-18T08:44:10Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.prometheus;\n+\n+import org.apache.flink.core.plugin.Plugin;\n+import org.apache.flink.metrics.reporter.MetricReporterFactory;\n+\n+import java.util.Properties;\n+\n+/**\n+ * {@link MetricReporterFactory} for {@link PrometheusReporter}.\n+ */\n+public class PrometheusReporterFactory implements MetricReporterFactory, Plugin {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzNzI0MQ==", "bodyText": "Added.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395337241", "createdAt": "2020-03-19T21:44:54Z", "author": {"login": "afedulov"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/java/org/apache/flink/metrics/prometheus/PrometheusReporterFactory.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.metrics.prometheus;\n+\n+import org.apache.flink.core.plugin.Plugin;\n+import org.apache.flink.metrics.reporter.MetricReporterFactory;\n+\n+import java.util.Properties;\n+\n+/**\n+ * {@link MetricReporterFactory} for {@link PrometheusReporter}.\n+ */\n+public class PrometheusReporterFactory implements MetricReporterFactory, Plugin {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE4MzMwMA=="}, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzY3OTQzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/ReporterSetupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDoxNzoxMlrOF3-YYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDoxNzoxMlrOF3-YYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzODA1MA==", "bodyText": "unused?", "url": "https://github.com/apache/flink/pull/11195#discussion_r394238050", "createdAt": "2020-03-18T10:17:12Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/ReporterSetupTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.apache.flink.configuration.ConfigConstants;\n import org.apache.flink.configuration.Configuration;\n import org.apache.flink.configuration.MetricOptions;\n+import org.apache.flink.core.plugin.PluginManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a244cee274bab74683c25f90bfd515698bc04c95"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzY4NjExOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDoxODo1OVrOF3-cig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMjo0NDozNlrOF5C4qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzOTExNA==", "bodyText": "this belongs into a separate commit since it is fixing a bug in the test that can occur independently from this PR.", "url": "https://github.com/apache/flink/pull/11195#discussion_r394239114", "createdAt": "2020-03-18T10:18:59Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -120,24 +122,51 @@ public static void checkOS() {\n \tpublic final DownloadCache downloadCache = DownloadCache.get();\n \n \t@Test\n-\tpublic void testReporter() throws Exception {\n-\t\tdist.copyOptJarsToLib(\"flink-metrics-prometheus\");\n+\tpublic void reporterWorksWhenFoundInLibsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(false);\n+\t}\n+\n+\t@Test\n+\tpublic void reporterWorksWhenFoundInPluginsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToPlugins(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(false);\n+\t}\n+\n+\t@Test\n+\tpublic void reporterWorksWhenFoundInPluginsViaFactories() throws Exception {\n+\t\tdist.copyOptJarsToPlugins(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(true);\n+\t}\n \n+\t@Test\n+\tpublic void reporterWorksWhenFoundBothInPluginsAndLibsViaFactories() throws Exception {\n+\t\tdist.copyOptJarsToPlugins(PROMETHEUS_JAR_PREFIX);\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(true);\n+\t}\n+\n+\tprivate void testReporter(boolean useFactory) throws Exception {\n \t\tfinal Configuration config = new Configuration();\n-\t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.\" + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, PrometheusReporter.class.getCanonicalName());\n+\n+\t\tif (useFactory) {\n+\t\t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.\" + ConfigConstants.METRICS_REPORTER_FACTORY_CLASS_SUFFIX, PrometheusReporterFactory.class.getName());\n+\t\t} else {\n+\t\t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.\" + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, PrometheusReporter.class.getCanonicalName());\n+\t\t}\n+\n \t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.port\", \"9000-9100\");\n \n \t\tdist.appendConfiguration(config);\n \n \t\tfinal Path tmpPrometheusDir = tmp.newFolder().toPath().resolve(\"prometheus\");\n-\t\tfinal Path prometheusArchive = tmpPrometheusDir.resolve(PROMETHEUS_FILE_NAME + \".tar.gz\");\n \t\tfinal Path prometheusBinDir = tmpPrometheusDir.resolve(PROMETHEUS_FILE_NAME);\n \t\tfinal Path prometheusConfig = prometheusBinDir.resolve(\"prometheus.yml\");\n \t\tfinal Path prometheusBinary = prometheusBinDir.resolve(\"prometheus\");\n \t\tFiles.createDirectory(tmpPrometheusDir);\n \n-\t\tdownloadCache.getOrDownload(\n-\t\t\t\"https://github.com/prometheus/prometheus/releases/download/v\" + PROMETHEUS_VERSION + '/' + prometheusArchive.getFileName(),\n+\t\tfinal Path prometheusArchive = downloadCache.getOrDownload(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37984c5d08a46b06bee75779aed813a5e1f04863"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2MDQyNw==", "bodyText": "Split as requested.", "url": "https://github.com/apache/flink/pull/11195#discussion_r395360427", "createdAt": "2020-03-19T22:44:36Z", "author": {"login": "afedulov"}, "path": "flink-end-to-end-tests/flink-metrics-reporter-prometheus-test/src/test/java/org/apache/flink/metrics/prometheus/tests/PrometheusReporterEndToEndITCase.java", "diffHunk": "@@ -120,24 +122,51 @@ public static void checkOS() {\n \tpublic final DownloadCache downloadCache = DownloadCache.get();\n \n \t@Test\n-\tpublic void testReporter() throws Exception {\n-\t\tdist.copyOptJarsToLib(\"flink-metrics-prometheus\");\n+\tpublic void reporterWorksWhenFoundInLibsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(false);\n+\t}\n+\n+\t@Test\n+\tpublic void reporterWorksWhenFoundInPluginsViaReflection() throws Exception {\n+\t\tdist.copyOptJarsToPlugins(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(false);\n+\t}\n+\n+\t@Test\n+\tpublic void reporterWorksWhenFoundInPluginsViaFactories() throws Exception {\n+\t\tdist.copyOptJarsToPlugins(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(true);\n+\t}\n \n+\t@Test\n+\tpublic void reporterWorksWhenFoundBothInPluginsAndLibsViaFactories() throws Exception {\n+\t\tdist.copyOptJarsToPlugins(PROMETHEUS_JAR_PREFIX);\n+\t\tdist.copyOptJarsToLib(PROMETHEUS_JAR_PREFIX);\n+\t\ttestReporter(true);\n+\t}\n+\n+\tprivate void testReporter(boolean useFactory) throws Exception {\n \t\tfinal Configuration config = new Configuration();\n-\t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.\" + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, PrometheusReporter.class.getCanonicalName());\n+\n+\t\tif (useFactory) {\n+\t\t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.\" + ConfigConstants.METRICS_REPORTER_FACTORY_CLASS_SUFFIX, PrometheusReporterFactory.class.getName());\n+\t\t} else {\n+\t\t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.\" + ConfigConstants.METRICS_REPORTER_CLASS_SUFFIX, PrometheusReporter.class.getCanonicalName());\n+\t\t}\n+\n \t\tconfig.setString(ConfigConstants.METRICS_REPORTER_PREFIX + \"prom.port\", \"9000-9100\");\n \n \t\tdist.appendConfiguration(config);\n \n \t\tfinal Path tmpPrometheusDir = tmp.newFolder().toPath().resolve(\"prometheus\");\n-\t\tfinal Path prometheusArchive = tmpPrometheusDir.resolve(PROMETHEUS_FILE_NAME + \".tar.gz\");\n \t\tfinal Path prometheusBinDir = tmpPrometheusDir.resolve(PROMETHEUS_FILE_NAME);\n \t\tfinal Path prometheusConfig = prometheusBinDir.resolve(\"prometheus.yml\");\n \t\tfinal Path prometheusBinary = prometheusBinDir.resolve(\"prometheus\");\n \t\tFiles.createDirectory(tmpPrometheusDir);\n \n-\t\tdownloadCache.getOrDownload(\n-\t\t\t\"https://github.com/prometheus/prometheus/releases/download/v\" + PROMETHEUS_VERSION + '/' + prometheusArchive.getFileName(),\n+\t\tfinal Path prometheusArchive = downloadCache.getOrDownload(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIzOTExNA=="}, "originalCommit": {"oid": "37984c5d08a46b06bee75779aed813a5e1f04863"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE2OTU4OnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-prometheus/src/main/resources/META-INF/services/org.apache.flink.metrics.reporter.MetricReporterFactory", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0NjowMFrOF8mKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0NjowMFrOF8mKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NDA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            org.apache.flink.metrics.prometheus.PrometheusReporterFactory\n          \n          \n            \n            org.apache.flink.metrics.prometheus.PrometheusReporterFactory\n          \n          \n            \n            org.apache.flink.metrics.prometheus.PrometheusPushGatewayReporterFactory", "url": "https://github.com/apache/flink/pull/11195#discussion_r399084072", "createdAt": "2020-03-27T07:46:00Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-prometheus/src/main/resources/META-INF/services/org.apache.flink.metrics.reporter.MetricReporterFactory", "diffHunk": "@@ -0,0 +1,16 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+org.apache.flink.metrics.prometheus.PrometheusReporterFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b07382fedcab4e7c4866eb260a12cde4780538"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NDE3NTE3OnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/flink/FlinkResourceSetup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODoxNFrOF8mNgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNzo0ODoxNFrOF8mNgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA4NDkyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn new FlinkResourceSetup(config,  Collections.unmodifiableCollection(jarOperations));\n          \n          \n            \n            \t\t\treturn new FlinkResourceSetup(config, Collections.unmodifiableCollection(jarOperations));", "url": "https://github.com/apache/flink/pull/11195#discussion_r399084928", "createdAt": "2020-03-27T07:48:14Z", "author": {"login": "zentol"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/flink/FlinkResourceSetup.java", "diffHunk": "@@ -69,13 +69,13 @@ public FlinkResourceSetupBuilder addConfiguration(Configuration config) {\n \t\t\treturn this;\n \t\t}\n \n-\t\tpublic FlinkResourceSetupBuilder moveJar(String jarNamePrefix, JarLocation source, JarLocation target) {\n-\t\t\tthis.jarMoveOperations.add(new JarMove(jarNamePrefix, source, target));\n+\t\tpublic FlinkResourceSetupBuilder addJarOperation(JarOperation jarOperation) {\n+\t\t\tthis.jarOperations.add(jarOperation);\n \t\t\treturn this;\n \t\t}\n \n \t\tpublic FlinkResourceSetup build() {\n-\t\t\treturn new FlinkResourceSetup(config, Collections.unmodifiableCollection(jarMoveOperations));\n+\t\t\treturn new FlinkResourceSetup(config,  Collections.unmodifiableCollection(jarOperations));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b07382fedcab4e7c4866eb260a12cde4780538"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 998, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}