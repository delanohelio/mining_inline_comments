{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODE0MTA1", "number": 13465, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0NToyNFrOEm9kaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowODoyN1rOEnF1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjkwMDg5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/AvailabilityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0NToyNFrOHXScWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo0NToyNFrOHXScWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4MTQ2Nw==", "bodyText": "I think less if nesting would be more readabile:\nif (first == AVAILABLE && second == AVAILABLE) return AVAILABLE;\nelse if (first == AVAILABLE) return second;\nelse if (second == AVAILABLE) return first;\nelse return allOf(first, second);", "url": "https://github.com/apache/flink/pull/13465#discussion_r494181467", "createdAt": "2020-09-24T09:45:24Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/AvailabilityProvider.java", "diffHunk": "@@ -66,6 +66,32 @@ default boolean isApproximatelyAvailable() {\n \t\treturn getAvailableFuture() == AVAILABLE;\n \t}\n \n+\tstatic CompletableFuture<?> and(CompletableFuture<?> first, CompletableFuture<?> second) {\n+\t\tif (first == AVAILABLE) {\n+\t\t\tif (second == AVAILABLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk1MjU4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1ODozNVrOHXS7tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowNDowNVrOHXXL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4OTQ5NA==", "bodyText": "Why not just return false here?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494189494", "createdAt": "2020-09-24T09:58:35Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "diffHunk": "@@ -249,25 +259,34 @@ private void sendControlMail(RunnableWithException mail, String descriptionForma\n \t}\n \n \t/**\n-\t * This helper method handles all special actions from the mailbox. It returns true if the mailbox loop should\n-\t * continue running, false if it should stop. In the current design, this method also evaluates all control flag\n-\t * changes. This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n+\t * This helper method handles all special actions from the mailbox.\n+\t * In the current design, this method also evaluates all control flag changes.\n+\t * This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n \t * that all flag changes must make sure that the mailbox signals mailbox#hasMail.\n+\t *\n+\t * @return true if a mail has been processed.\n \t */\n-\tprivate boolean processMail(TaskMailbox mailbox) throws Exception {\n-\n+\tprivate boolean processMail(TaskMailbox mailbox, boolean singleStep) throws Exception {\n+\t\tboolean processed = false;\n \t\t// Doing this check is an optimization to only have a volatile read in the expected hot path, locks are only\n \t\t// acquired after this point.\n \t\tif (!mailbox.createBatch()) {\n \t\t\t// We can also directly return true because all changes to #isMailboxLoopRunning must be connected to\n \t\t\t// mailbox.hasMail() == true.\n-\t\t\treturn true;\n+\t\t\treturn processed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1OTE3Nw==", "bodyText": "I wanted to make it consistent, but I don't care much one way or another. Changed to return false", "url": "https://github.com/apache/flink/pull/13465#discussion_r494259177", "createdAt": "2020-09-24T12:04:05Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "diffHunk": "@@ -249,25 +259,34 @@ private void sendControlMail(RunnableWithException mail, String descriptionForma\n \t}\n \n \t/**\n-\t * This helper method handles all special actions from the mailbox. It returns true if the mailbox loop should\n-\t * continue running, false if it should stop. In the current design, this method also evaluates all control flag\n-\t * changes. This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n+\t * This helper method handles all special actions from the mailbox.\n+\t * In the current design, this method also evaluates all control flag changes.\n+\t * This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n \t * that all flag changes must make sure that the mailbox signals mailbox#hasMail.\n+\t *\n+\t * @return true if a mail has been processed.\n \t */\n-\tprivate boolean processMail(TaskMailbox mailbox) throws Exception {\n-\n+\tprivate boolean processMail(TaskMailbox mailbox, boolean singleStep) throws Exception {\n+\t\tboolean processed = false;\n \t\t// Doing this check is an optimization to only have a volatile read in the expected hot path, locks are only\n \t\t// acquired after this point.\n \t\tif (!mailbox.createBatch()) {\n \t\t\t// We can also directly return true because all changes to #isMailboxLoopRunning must be connected to\n \t\t\t// mailbox.hasMail() == true.\n-\t\t\treturn true;\n+\t\t\treturn processed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4OTQ5NA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk1OTA1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowMDoxM1rOHXS_pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowNzoxOFrOHXXTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MDUwMg==", "bodyText": "Why not just return true here?\nAnd then after the loop if singleStep == true we can also return false.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494190502", "createdAt": "2020-09-24T10:00:13Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "diffHunk": "@@ -249,25 +259,34 @@ private void sendControlMail(RunnableWithException mail, String descriptionForma\n \t}\n \n \t/**\n-\t * This helper method handles all special actions from the mailbox. It returns true if the mailbox loop should\n-\t * continue running, false if it should stop. In the current design, this method also evaluates all control flag\n-\t * changes. This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n+\t * This helper method handles all special actions from the mailbox.\n+\t * In the current design, this method also evaluates all control flag changes.\n+\t * This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n \t * that all flag changes must make sure that the mailbox signals mailbox#hasMail.\n+\t *\n+\t * @return true if a mail has been processed.\n \t */\n-\tprivate boolean processMail(TaskMailbox mailbox) throws Exception {\n-\n+\tprivate boolean processMail(TaskMailbox mailbox, boolean singleStep) throws Exception {\n+\t\tboolean processed = false;\n \t\t// Doing this check is an optimization to only have a volatile read in the expected hot path, locks are only\n \t\t// acquired after this point.\n \t\tif (!mailbox.createBatch()) {\n \t\t\t// We can also directly return true because all changes to #isMailboxLoopRunning must be connected to\n \t\t\t// mailbox.hasMail() == true.\n-\t\t\treturn true;\n+\t\t\treturn processed;\n \t\t}\n \n \t\t// Take mails in a non-blockingly and execute them.\n \t\tOptional<Mail> maybeMail;\n \t\twhile (isMailboxLoopRunning() && (maybeMail = mailbox.tryTakeFromBatch()).isPresent()) {\n \t\t\tmaybeMail.get().run();\n+\t\t\tprocessed = true;\n+\t\t\tif (singleStep) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2MTEwMQ==", "bodyText": "Here actually I think single one less exit point would be easier to understand", "url": "https://github.com/apache/flink/pull/13465#discussion_r494261101", "createdAt": "2020-09-24T12:07:18Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "diffHunk": "@@ -249,25 +259,34 @@ private void sendControlMail(RunnableWithException mail, String descriptionForma\n \t}\n \n \t/**\n-\t * This helper method handles all special actions from the mailbox. It returns true if the mailbox loop should\n-\t * continue running, false if it should stop. In the current design, this method also evaluates all control flag\n-\t * changes. This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n+\t * This helper method handles all special actions from the mailbox.\n+\t * In the current design, this method also evaluates all control flag changes.\n+\t * This keeps the hot path in {@link #runMailboxLoop()} free from any other flag checking, at the cost\n \t * that all flag changes must make sure that the mailbox signals mailbox#hasMail.\n+\t *\n+\t * @return true if a mail has been processed.\n \t */\n-\tprivate boolean processMail(TaskMailbox mailbox) throws Exception {\n-\n+\tprivate boolean processMail(TaskMailbox mailbox, boolean singleStep) throws Exception {\n+\t\tboolean processed = false;\n \t\t// Doing this check is an optimization to only have a volatile read in the expected hot path, locks are only\n \t\t// acquired after this point.\n \t\tif (!mailbox.createBatch()) {\n \t\t\t// We can also directly return true because all changes to #isMailboxLoopRunning must be connected to\n \t\t\t// mailbox.hasMail() == true.\n-\t\t\treturn true;\n+\t\t\treturn processed;\n \t\t}\n \n \t\t// Take mails in a non-blockingly and execute them.\n \t\tOptional<Mail> maybeMail;\n \t\twhile (isMailboxLoopRunning() && (maybeMail = mailbox.tryTakeFromBatch()).isPresent()) {\n \t\t\tmaybeMail.get().run();\n+\t\t\tprocessed = true;\n+\t\t\tif (singleStep) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MDUwMg=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mjk3MDIxOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowMzowMlrOHXTGTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowMzowMlrOHXTGTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MjIwNQ==", "bodyText": "This is a change in the production code, so I think it's better to not mark it as [test] in commit message (even though the motivation is to fix tests).", "url": "https://github.com/apache/flink/pull/13465#discussion_r494192205", "createdAt": "2020-09-24T10:03:02Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxProcessor.java", "diffHunk": "@@ -178,17 +178,27 @@ public void runMailboxLoop() throws Exception {\n \n \t\tfinal MailboxController defaultActionContext = new MailboxController(this);\n \n-\t\twhile (runMailboxStep(localMailbox, defaultActionContext)) {\n+\t\twhile (isMailboxLoopRunning()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzAzNDc4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyMDoxMlrOHXTs9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxMjowOVrOHXZ9hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMjEwMw==", "bodyText": "How about using vararg parameter and replacing here with just Arrays.asList(inputGates)?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494202103", "createdAt": "2020-09-24T10:20:12Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -56,12 +59,13 @@ public static CheckpointedInputGate createCheckpointedInputGate(\n \t\t\ttaskIOMetricGroup,\n \t\t\ttaskName,\n \t\t\tmailboxExecutor,\n-\t\t\tArrays.asList(inputGates));\n+\t\t\tnew List[]{ Arrays.asList(inputGates) },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI3NTYzMQ==", "bodyText": "? It used to be like that, but now we are submitting two different lists, so having a vararg for just one of them would be a bit inconsistent.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494275631", "createdAt": "2020-09-24T12:31:48Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -56,12 +59,13 @@ public static CheckpointedInputGate createCheckpointedInputGate(\n \t\t\ttaskIOMetricGroup,\n \t\t\ttaskName,\n \t\t\tmailboxExecutor,\n-\t\t\tArrays.asList(inputGates));\n+\t\t\tnew List[]{ Arrays.asList(inputGates) },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMjEwMw=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5MDk3MA==", "bodyText": "Currently, they are array-of-lists and a list:\nList<IndexedInputGate>[] inputGates,\nList<StreamTaskSourceInput<?>> sourceInputs)\n\nSo changing one array to vararg doesn't change consistency:\nList<StreamTaskSourceInput<?>> sourceInputs,\nList<IndexedInputGate>... inputGates)", "url": "https://github.com/apache/flink/pull/13465#discussion_r494290970", "createdAt": "2020-09-24T12:51:40Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -56,12 +59,13 @@ public static CheckpointedInputGate createCheckpointedInputGate(\n \t\t\ttaskIOMetricGroup,\n \t\t\ttaskName,\n \t\t\tmailboxExecutor,\n-\t\t\tArrays.asList(inputGates));\n+\t\t\tnew List[]{ Arrays.asList(inputGates) },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMjEwMw=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNDY0NA==", "bodyText": "inputGates probably should be migrated to List as well at some point of time. I don't like using varargs if there are others lists/arrays/collection like arguments :(", "url": "https://github.com/apache/flink/pull/13465#discussion_r494304644", "createdAt": "2020-09-24T13:12:09Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -56,12 +59,13 @@ public static CheckpointedInputGate createCheckpointedInputGate(\n \t\t\ttaskIOMetricGroup,\n \t\t\ttaskName,\n \t\t\tmailboxExecutor,\n-\t\t\tArrays.asList(inputGates));\n+\t\t\tnew List[]{ Arrays.asList(inputGates) },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwMjEwMw=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzA2ODI2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskSourceInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyOTozMFrOHXUBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjozNToxOFrOHXYdAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNzM0Mg==", "bodyText": "nit: this comment doesn't say much to me", "url": "https://github.com/apache/flink/pull/13465#discussion_r494207342", "createdAt": "2020-09-24T10:29:30Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskSourceInput.java", "diffHunk": "@@ -34,30 +40,75 @@\n  * unavailable or finished.\n  */\n @Internal\n-public final class StreamTaskSourceInput<T> implements StreamTaskInput<T> {\n+public final class StreamTaskSourceInput<T> implements StreamTaskInput<T>, BlockableInput {\n \n \tprivate final SourceOperator<T, ?> operator;\n+\tprivate final int inputGateIndex;\n+\tprivate final AvailabilityHelper isBlockedAvailability = new AvailabilityHelper();\n+\tprivate final List<InputChannelInfo> inputChannelInfos;\n \n-\tpublic StreamTaskSourceInput(SourceOperator<T, ?> operator) {\n+\tpublic StreamTaskSourceInput(SourceOperator<T, ?> operator, int inputGateIndex) {\n \t\tthis.operator = checkNotNull(operator);\n+\t\tthis.inputGateIndex = inputGateIndex;\n+\t\tinputChannelInfos = Collections.singletonList(new InputChannelInfo(inputGateIndex, 0));\n+\t\tisBlockedAvailability.resetAvailable();\n \t}\n \n \t@Override\n \tpublic InputStatus emitNext(DataOutput<T> output) throws Exception {\n+\t\tif (!isBlockedAvailability.isApproximatelyAvailable()) {\n+\t\t\t// Safe guard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI3OTkzOQ==", "bodyText": "expanded", "url": "https://github.com/apache/flink/pull/13465#discussion_r494279939", "createdAt": "2020-09-24T12:35:18Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskSourceInput.java", "diffHunk": "@@ -34,30 +40,75 @@\n  * unavailable or finished.\n  */\n @Internal\n-public final class StreamTaskSourceInput<T> implements StreamTaskInput<T> {\n+public final class StreamTaskSourceInput<T> implements StreamTaskInput<T>, BlockableInput {\n \n \tprivate final SourceOperator<T, ?> operator;\n+\tprivate final int inputGateIndex;\n+\tprivate final AvailabilityHelper isBlockedAvailability = new AvailabilityHelper();\n+\tprivate final List<InputChannelInfo> inputChannelInfos;\n \n-\tpublic StreamTaskSourceInput(SourceOperator<T, ?> operator) {\n+\tpublic StreamTaskSourceInput(SourceOperator<T, ?> operator, int inputGateIndex) {\n \t\tthis.operator = checkNotNull(operator);\n+\t\tthis.inputGateIndex = inputGateIndex;\n+\t\tinputChannelInfos = Collections.singletonList(new InputChannelInfo(inputGateIndex, 0));\n+\t\tisBlockedAvailability.resetAvailable();\n \t}\n \n \t@Override\n \tpublic InputStatus emitNext(DataOutput<T> output) throws Exception {\n+\t\tif (!isBlockedAvailability.isApproximatelyAvailable()) {\n+\t\t\t// Safe guard", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNzM0Mg=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzA2OTU5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskSourceInput.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyOTo1MlrOHXUCRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyOTo1MlrOHXUCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNzU1OA==", "bodyText": "nit: this is a bit difficult to read (maybe just invert the condition?)", "url": "https://github.com/apache/flink/pull/13465#discussion_r494207558", "createdAt": "2020-09-24T10:29:52Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskSourceInput.java", "diffHunk": "@@ -34,30 +40,75 @@\n  * unavailable or finished.\n  */\n @Internal\n-public final class StreamTaskSourceInput<T> implements StreamTaskInput<T> {\n+public final class StreamTaskSourceInput<T> implements StreamTaskInput<T>, BlockableInput {\n \n \tprivate final SourceOperator<T, ?> operator;\n+\tprivate final int inputGateIndex;\n+\tprivate final AvailabilityHelper isBlockedAvailability = new AvailabilityHelper();\n+\tprivate final List<InputChannelInfo> inputChannelInfos;\n \n-\tpublic StreamTaskSourceInput(SourceOperator<T, ?> operator) {\n+\tpublic StreamTaskSourceInput(SourceOperator<T, ?> operator, int inputGateIndex) {\n \t\tthis.operator = checkNotNull(operator);\n+\t\tthis.inputGateIndex = inputGateIndex;\n+\t\tinputChannelInfos = Collections.singletonList(new InputChannelInfo(inputGateIndex, 0));\n+\t\tisBlockedAvailability.resetAvailable();\n \t}\n \n \t@Override\n \tpublic InputStatus emitNext(DataOutput<T> output) throws Exception {\n+\t\tif (!isBlockedAvailability.isApproximatelyAvailable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzE0MTUyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDo1MTozOFrOHXUumA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjozODowOVrOHXYnFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxODkwNA==", "bodyText": "Shouldn't we also update super.latestAsyncCheckpointStartDelayNanos?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494218904", "createdAt": "2020-09-24T10:51:38Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -114,4 +134,67 @@ protected void createInputProcessor(\n \t\t\toperatorChain,\n \t\t\tsetupNumRecordsInCounter(mainOperator));\n \t}\n+\n+\t@Override\n+\tpublic Future<Boolean> triggerCheckpointAsync(\n+\t\t\tCheckpointMetaData metadata,\n+\t\t\tCheckpointOptions options,\n+\t\t\tboolean advanceToEndOfEventTime) {\n+\n+\t\tCompletableFuture<Boolean> resultFuture = new CompletableFuture<>();\n+\t\tmainMailboxExecutor.execute(\n+\t\t\t() -> {\n+\t\t\t\ttry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MjUxOA==", "bodyText": "No. This field is used only in the SourceStreamTask. MetricNames#CHECKPOINT_START_DELAY_TIME metric is defined in two ways:\n\nin SourceStreamTask via latestAsyncCheckpointStartDelayNanos\neverywhere else via CheckpointBarrierHandler#getCheckpointStartDelayNanos\n\nMultipleInputStreamTask is using the second way.\nI've added a comment about that.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494282518", "createdAt": "2020-09-24T12:38:09Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -114,4 +134,67 @@ protected void createInputProcessor(\n \t\t\toperatorChain,\n \t\t\tsetupNumRecordsInCounter(mainOperator));\n \t}\n+\n+\t@Override\n+\tpublic Future<Boolean> triggerCheckpointAsync(\n+\t\t\tCheckpointMetaData metadata,\n+\t\t\tCheckpointOptions options,\n+\t\t\tboolean advanceToEndOfEventTime) {\n+\n+\t\tCompletableFuture<Boolean> resultFuture = new CompletableFuture<>();\n+\t\tmainMailboxExecutor.execute(\n+\t\t\t() -> {\n+\t\t\t\ttry {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIxODkwNA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzE5MDc2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTowNjo0NlrOHXVNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMzoxOFrOHXdbZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyNjcwMA==", "bodyText": "I'm concerned about the cleanup of this map.\nFrom the code, I see it's assumed at least one triggerOnBarrier or abortOnBarrier after triggerAsync, right?\nBut can abort come after triggerAsync?\nShould we state these ordering assumptions?\nOr maybe we can just remove the map? I see the future result is only used by SourceStreamTask which is irrelevant here.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494226700", "createdAt": "2020-09-24T11:06:46Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -18,32 +18,48 @@\n package org.apache.flink.streaming.runtime.tasks;\n \n import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n import org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\n import org.apache.flink.runtime.metrics.MetricNames;\n import org.apache.flink.streaming.api.graph.StreamConfig;\n import org.apache.flink.streaming.api.graph.StreamConfig.InputConfig;\n import org.apache.flink.streaming.api.graph.StreamEdge;\n import org.apache.flink.streaming.api.operators.InputSelectable;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.runtime.io.CheckpointBarrierHandler;\n import org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\n import org.apache.flink.streaming.runtime.io.InputProcessorUtil;\n import org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\n import org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\n+import org.apache.flink.streaming.runtime.io.StreamTaskSourceInput;\n import org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\n import org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n \n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n \n /**\n  * A {@link StreamTask} for executing a {@link MultipleInputStreamOperator} and supporting\n  * the {@link MultipleInputStreamOperator} to select input for reading.\n  */\n @Internal\n public class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n+\tprivate final HashMap<Long, CompletableFuture<Boolean>> pendingCheckpointCompletedFutures = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMzEwOA==", "bodyText": "It\u2019s even worse. The future is currently used only for tests\u2026\nI\u2019ve tried to refactor it in someway to avoid it for the MultipleInputStreamTask, but it turned out more difficult then implementing this Map.\nAnd yes, currently triggerOnBarrier happens always after triggerCheckpointAsync.\nI also reasoned that if we accumulated some garbage in case of some problem with a cancellation/checkpoint failure that I might have missed, it shouldn't be a big deal, as long it's rare? But maybe we can cap it's size to 100 * CheckpointConfig#getMaxConcurrentCheckpoints?\nHowever it might be better to get rid of the future somehow...\nWhat do you think? Do you have some idea?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494303108", "createdAt": "2020-09-24T13:10:03Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -18,32 +18,48 @@\n package org.apache.flink.streaming.runtime.tasks;\n \n import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n import org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\n import org.apache.flink.runtime.metrics.MetricNames;\n import org.apache.flink.streaming.api.graph.StreamConfig;\n import org.apache.flink.streaming.api.graph.StreamConfig.InputConfig;\n import org.apache.flink.streaming.api.graph.StreamEdge;\n import org.apache.flink.streaming.api.operators.InputSelectable;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.runtime.io.CheckpointBarrierHandler;\n import org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\n import org.apache.flink.streaming.runtime.io.InputProcessorUtil;\n import org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\n import org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\n+import org.apache.flink.streaming.runtime.io.StreamTaskSourceInput;\n import org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\n import org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n \n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n \n /**\n  * A {@link StreamTask} for executing a {@link MultipleInputStreamOperator} and supporting\n  * the {@link MultipleInputStreamOperator} to select input for reading.\n  */\n @Internal\n public class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n+\tprivate final HashMap<Long, CompletableFuture<Boolean>> pendingCheckpointCompletedFutures = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyNjcwMA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNTM3NA==", "bodyText": "Without changing the signature, I think the only way is to rely on mailbox: after triggering, enqueue a mail and wait for its completion.\nWhich is far from ideal, but at least it wouldn't affect production code path and is correct.\nWDYT?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494315374", "createdAt": "2020-09-24T13:27:03Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -18,32 +18,48 @@\n package org.apache.flink.streaming.runtime.tasks;\n \n import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n import org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\n import org.apache.flink.runtime.metrics.MetricNames;\n import org.apache.flink.streaming.api.graph.StreamConfig;\n import org.apache.flink.streaming.api.graph.StreamConfig.InputConfig;\n import org.apache.flink.streaming.api.graph.StreamEdge;\n import org.apache.flink.streaming.api.operators.InputSelectable;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.runtime.io.CheckpointBarrierHandler;\n import org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\n import org.apache.flink.streaming.runtime.io.InputProcessorUtil;\n import org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\n import org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\n+import org.apache.flink.streaming.runtime.io.StreamTaskSourceInput;\n import org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\n import org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n \n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n \n /**\n  * A {@link StreamTask} for executing a {@link MultipleInputStreamOperator} and supporting\n  * the {@link MultipleInputStreamOperator} to select input for reading.\n  */\n @Internal\n public class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n+\tprivate final HashMap<Long, CompletableFuture<Boolean>> pendingCheckpointCompletedFutures = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyNjcwMA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MTQ0Nw==", "bodyText": "As discussed offline, while it's not perfect, it's currently easiest to go on with with the current pending map with a capped size.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494361447", "createdAt": "2020-09-24T14:23:18Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -18,32 +18,48 @@\n package org.apache.flink.streaming.runtime.tasks;\n \n import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n import org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\n import org.apache.flink.runtime.metrics.MetricNames;\n import org.apache.flink.streaming.api.graph.StreamConfig;\n import org.apache.flink.streaming.api.graph.StreamConfig.InputConfig;\n import org.apache.flink.streaming.api.graph.StreamEdge;\n import org.apache.flink.streaming.api.operators.InputSelectable;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.runtime.io.CheckpointBarrierHandler;\n import org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\n import org.apache.flink.streaming.runtime.io.InputProcessorUtil;\n import org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\n import org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\n+import org.apache.flink.streaming.runtime.io.StreamTaskSourceInput;\n import org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\n import org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n \n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n \n /**\n  * A {@link StreamTask} for executing a {@link MultipleInputStreamOperator} and supporting\n  * the {@link MultipleInputStreamOperator} to select input for reading.\n  */\n @Internal\n public class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n+\tprivate final HashMap<Long, CompletableFuture<Boolean>> pendingCheckpointCompletedFutures = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIyNjcwMA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzI0NzAzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMToyMzozNlrOHXVvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MTo1MVrOHXYvyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIzNTUxNQ==", "bodyText": "Shouldn't we differentiate for which sourceInput current barrier is (and call processBarrier only for it)?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494235515", "createdAt": "2020-09-24T11:23:36Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -114,4 +134,67 @@ protected void createInputProcessor(\n \t\t\toperatorChain,\n \t\t\tsetupNumRecordsInCounter(mainOperator));\n \t}\n+\n+\t@Override\n+\tpublic Future<Boolean> triggerCheckpointAsync(\n+\t\t\tCheckpointMetaData metadata,\n+\t\t\tCheckpointOptions options,\n+\t\t\tboolean advanceToEndOfEventTime) {\n+\n+\t\tCompletableFuture<Boolean> resultFuture = new CompletableFuture<>();\n+\t\tmainMailboxExecutor.execute(\n+\t\t\t() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\tpendingCheckpointCompletedFutures.put(metadata.getCheckpointId(), resultFuture);\n+\t\t\t\t\ttriggerSourcesCheckpoint(new CheckpointBarrier(metadata.getCheckpointId(), metadata.getTimestamp(), options));\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t// Report the failure both via the Future result but also to the mailbox\n+\t\t\t\t\tpendingCheckpointCompletedFutures.remove(metadata.getCheckpointId());\n+\t\t\t\t\tresultFuture.completeExceptionally(ex);\n+\t\t\t\t\tthrow ex;\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"checkpoint %s with %s\",\n+\t\t\tmetadata,\n+\t\t\toptions);\n+\t\treturn resultFuture;\n+\t}\n+\n+\tprivate void triggerSourcesCheckpoint(CheckpointBarrier checkpointBarrier) throws IOException {\n+\t\tfor (StreamTaskSourceInput<?> sourceInput : operatorChain.getSourceTaskInputs()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDc0NQ==", "bodyText": "There is no need to do that. Please check the updated java doc in StreamTaskSourceInput#checkpointStarted.\nRuntime has a flexibility to checkpoint the sources at any point of time, as long as it is in sync with network inputs.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494284745", "createdAt": "2020-09-24T12:41:51Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -114,4 +134,67 @@ protected void createInputProcessor(\n \t\t\toperatorChain,\n \t\t\tsetupNumRecordsInCounter(mainOperator));\n \t}\n+\n+\t@Override\n+\tpublic Future<Boolean> triggerCheckpointAsync(\n+\t\t\tCheckpointMetaData metadata,\n+\t\t\tCheckpointOptions options,\n+\t\t\tboolean advanceToEndOfEventTime) {\n+\n+\t\tCompletableFuture<Boolean> resultFuture = new CompletableFuture<>();\n+\t\tmainMailboxExecutor.execute(\n+\t\t\t() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\tpendingCheckpointCompletedFutures.put(metadata.getCheckpointId(), resultFuture);\n+\t\t\t\t\ttriggerSourcesCheckpoint(new CheckpointBarrier(metadata.getCheckpointId(), metadata.getTimestamp(), options));\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t// Report the failure both via the Future result but also to the mailbox\n+\t\t\t\t\tpendingCheckpointCompletedFutures.remove(metadata.getCheckpointId());\n+\t\t\t\t\tresultFuture.completeExceptionally(ex);\n+\t\t\t\t\tthrow ex;\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"checkpoint %s with %s\",\n+\t\t\tmetadata,\n+\t\t\toptions);\n+\t\treturn resultFuture;\n+\t}\n+\n+\tprivate void triggerSourcesCheckpoint(CheckpointBarrier checkpointBarrier) throws IOException {\n+\t\tfor (StreamTaskSourceInput<?> sourceInput : operatorChain.getSourceTaskInputs()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIzNTUxNQ=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzMzNTQ1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMTo0NjowN1rOHXWlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyMToxMFrOHXdVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0OTMyOA==", "bodyText": "Why do we block source inputs when we receive a barrier from a non-source input?\n(maybe a comment is missing here or for StreamTaskSourceInput.checkpointStarted)", "url": "https://github.com/apache/flink/pull/13465#discussion_r494249328", "createdAt": "2020-09-24T11:46:07Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -101,10 +101,8 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t\tallBarriersReceivedFuture = new CompletableFuture<>();\n \t\t\tcheckpointCoordinator.initCheckpoint(barrierId, barrier.getCheckpointOptions());\n \n-\t\t\tfor (final InputGate gate : inputGates) {\n-\t\t\t\tfor (int index = 0, numChannels = gate.getNumberOfInputChannels(); index < numChannels; index++) {\n-\t\t\t\t\tgate.getChannel(index).checkpointStarted(barrier);\n-\t\t\t\t}\n+\t\t\tfor (final BlockableInput input : inputs) {\n+\t\t\t\tinput.checkpointStarted(barrier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI3NDMxNA==", "bodyText": "Good question. I've added a larger explanation why in StreamTaskSourceInput#checkpointStarted", "url": "https://github.com/apache/flink/pull/13465#discussion_r494274314", "createdAt": "2020-09-24T12:29:44Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -101,10 +101,8 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t\tallBarriersReceivedFuture = new CompletableFuture<>();\n \t\t\tcheckpointCoordinator.initCheckpoint(barrierId, barrier.getCheckpointOptions());\n \n-\t\t\tfor (final InputGate gate : inputGates) {\n-\t\t\t\tfor (int index = 0, numChannels = gate.getNumberOfInputChannels(); index < numChannels; index++) {\n-\t\t\t\t\tgate.getChannel(index).checkpointStarted(barrier);\n-\t\t\t\t}\n+\t\t\tfor (final BlockableInput input : inputs) {\n+\t\t\t\tinput.checkpointStarted(barrier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0OTMyOA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1OTg2Nw==", "bodyText": "Thanks!", "url": "https://github.com/apache/flink/pull/13465#discussion_r494359867", "createdAt": "2020-09-24T14:21:10Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -101,10 +101,8 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t\tallBarriersReceivedFuture = new CompletableFuture<>();\n \t\t\tcheckpointCoordinator.initCheckpoint(barrierId, barrier.getCheckpointOptions());\n \n-\t\t\tfor (final InputGate gate : inputGates) {\n-\t\t\t\tfor (int index = 0, numChannels = gate.getNumberOfInputChannels(); index < numChannels; index++) {\n-\t\t\t\t\tgate.getChannel(index).checkpointStarted(barrier);\n-\t\t\t\t}\n+\t\t\tfor (final BlockableInput input : inputs) {\n+\t\t\t\tinput.checkpointStarted(barrier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI0OTMyOA=="}, "originalCommit": {"oid": "ac0d032298233f33ea335341728c254a11db51b3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDA2NTc2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoyOToyMVrOHXduaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozOTo0NFrOHXeODA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjMxNQ==", "bodyText": "Can this be private?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494366315", "createdAt": "2020-09-24T14:29:21Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -18,32 +18,51 @@\n package org.apache.flink.streaming.runtime.tasks;\n \n import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n import org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\n import org.apache.flink.runtime.metrics.MetricNames;\n import org.apache.flink.streaming.api.graph.StreamConfig;\n import org.apache.flink.streaming.api.graph.StreamConfig.InputConfig;\n import org.apache.flink.streaming.api.graph.StreamEdge;\n import org.apache.flink.streaming.api.operators.InputSelectable;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.runtime.io.CheckpointBarrierHandler;\n import org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\n import org.apache.flink.streaming.runtime.io.InputProcessorUtil;\n import org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\n import org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\n+import org.apache.flink.streaming.runtime.io.StreamTaskSourceInput;\n import org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\n import org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n \n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n \n /**\n  * A {@link StreamTask} for executing a {@link MultipleInputStreamOperator} and supporting\n  * the {@link MultipleInputStreamOperator} to select input for reading.\n  */\n @Internal\n public class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n+\tpublic static final int MAX_TRACKED_CHECKPOINTS = 100_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea1357818c4d38824d587d2ac2329fcf68f1c0e1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NDQxMg==", "bodyText": "It can", "url": "https://github.com/apache/flink/pull/13465#discussion_r494374412", "createdAt": "2020-09-24T14:39:44Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -18,32 +18,51 @@\n package org.apache.flink.streaming.runtime.tasks;\n \n import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n import org.apache.flink.runtime.execution.Environment;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n import org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\n import org.apache.flink.runtime.metrics.MetricNames;\n import org.apache.flink.streaming.api.graph.StreamConfig;\n import org.apache.flink.streaming.api.graph.StreamConfig.InputConfig;\n import org.apache.flink.streaming.api.graph.StreamEdge;\n import org.apache.flink.streaming.api.operators.InputSelectable;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.runtime.io.CheckpointBarrierHandler;\n import org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\n import org.apache.flink.streaming.runtime.io.InputProcessorUtil;\n import org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\n import org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\n+import org.apache.flink.streaming.runtime.io.StreamTaskSourceInput;\n import org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\n import org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n \n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n \n /**\n  * A {@link StreamTask} for executing a {@link MultipleInputStreamOperator} and supporting\n  * the {@link MultipleInputStreamOperator} to select input for reading.\n  */\n @Internal\n public class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n+\tpublic static final int MAX_TRACKED_CHECKPOINTS = 100_000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjMxNQ=="}, "originalCommit": {"oid": "ea1357818c4d38824d587d2ac2329fcf68f1c0e1"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDEwMDU4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDozNjoxNFrOHXeDcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo0MjoxOFrOHXeVsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MTY5OA==", "bodyText": "I think we can end up with O(MAX_TRACKED_CHECKPOINTS ^ 2) here, right?\nEven though it shouldn't happen normally (if map is cleared by triggerOnBarrier/abort), I think it's better to cap it by either using LinkedHashMap, TreeMap, or just reducing\nMAX_TRACKED_CHECKPOINTS to something very small.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494371698", "createdAt": "2020-09-24T14:36:14Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -114,4 +137,81 @@ protected void createInputProcessor(\n \t\t\toperatorChain,\n \t\t\tsetupNumRecordsInCounter(mainOperator));\n \t}\n+\n+\t@Override\n+\tpublic Future<Boolean> triggerCheckpointAsync(\n+\t\t\tCheckpointMetaData metadata,\n+\t\t\tCheckpointOptions options,\n+\t\t\tboolean advanceToEndOfEventTime) {\n+\n+\t\tCompletableFuture<Boolean> resultFuture = new CompletableFuture<>();\n+\t\tmainMailboxExecutor.execute(\n+\t\t\t() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\t/**\n+\t\t\t\t\t * Contrary to {@link SourceStreamTask}, we are not using here\n+\t\t\t\t\t * {@link StreamTask#latestAsyncCheckpointStartDelayNanos} to measure the start delay\n+\t\t\t\t\t * metric, but we will be using {@link CheckpointBarrierHandler#getCheckpointStartDelayNanos()}\n+\t\t\t\t\t * instead.\n+\t\t\t\t\t */\n+\t\t\t\t\tpendingCheckpointCompletedFutures.put(metadata.getCheckpointId(), resultFuture);\n+\t\t\t\t\tcheckPendingCheckpointCompletedFuturesSize();\n+\t\t\t\t\ttriggerSourcesCheckpoint(new CheckpointBarrier(metadata.getCheckpointId(), metadata.getTimestamp(), options));\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t// Report the failure both via the Future result but also to the mailbox\n+\t\t\t\t\tpendingCheckpointCompletedFutures.remove(metadata.getCheckpointId());\n+\t\t\t\t\tresultFuture.completeExceptionally(ex);\n+\t\t\t\t\tthrow ex;\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"checkpoint %s with %s\",\n+\t\t\tmetadata,\n+\t\t\toptions);\n+\t\treturn resultFuture;\n+\t}\n+\n+\tprivate void checkPendingCheckpointCompletedFuturesSize() {\n+\t\twhile (pendingCheckpointCompletedFutures.size() > MAX_TRACKED_CHECKPOINTS) {\n+\t\t\tLong minCheckpointID = Collections.min(pendingCheckpointCompletedFutures.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea1357818c4d38824d587d2ac2329fcf68f1c0e1"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3NjM3MQ==", "bodyText": "Ehhhh... ok, but that's overengineering a bit", "url": "https://github.com/apache/flink/pull/13465#discussion_r494376371", "createdAt": "2020-09-24T14:42:18Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTask.java", "diffHunk": "@@ -114,4 +137,81 @@ protected void createInputProcessor(\n \t\t\toperatorChain,\n \t\t\tsetupNumRecordsInCounter(mainOperator));\n \t}\n+\n+\t@Override\n+\tpublic Future<Boolean> triggerCheckpointAsync(\n+\t\t\tCheckpointMetaData metadata,\n+\t\t\tCheckpointOptions options,\n+\t\t\tboolean advanceToEndOfEventTime) {\n+\n+\t\tCompletableFuture<Boolean> resultFuture = new CompletableFuture<>();\n+\t\tmainMailboxExecutor.execute(\n+\t\t\t() -> {\n+\t\t\t\ttry {\n+\t\t\t\t\t/**\n+\t\t\t\t\t * Contrary to {@link SourceStreamTask}, we are not using here\n+\t\t\t\t\t * {@link StreamTask#latestAsyncCheckpointStartDelayNanos} to measure the start delay\n+\t\t\t\t\t * metric, but we will be using {@link CheckpointBarrierHandler#getCheckpointStartDelayNanos()}\n+\t\t\t\t\t * instead.\n+\t\t\t\t\t */\n+\t\t\t\t\tpendingCheckpointCompletedFutures.put(metadata.getCheckpointId(), resultFuture);\n+\t\t\t\t\tcheckPendingCheckpointCompletedFuturesSize();\n+\t\t\t\t\ttriggerSourcesCheckpoint(new CheckpointBarrier(metadata.getCheckpointId(), metadata.getTimestamp(), options));\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t// Report the failure both via the Future result but also to the mailbox\n+\t\t\t\t\tpendingCheckpointCompletedFutures.remove(metadata.getCheckpointId());\n+\t\t\t\t\tresultFuture.completeExceptionally(ex);\n+\t\t\t\t\tthrow ex;\n+\t\t\t\t}\n+\t\t\t},\n+\t\t\t\"checkpoint %s with %s\",\n+\t\t\tmetadata,\n+\t\t\toptions);\n+\t\treturn resultFuture;\n+\t}\n+\n+\tprivate void checkPendingCheckpointCompletedFuturesSize() {\n+\t\twhile (pendingCheckpointCompletedFutures.size() > MAX_TRACKED_CHECKPOINTS) {\n+\t\t\tLong minCheckpointID = Collections.min(pendingCheckpointCompletedFutures.keySet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MTY5OA=="}, "originalCommit": {"oid": "ea1357818c4d38824d587d2ac2329fcf68f1c0e1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDE4NTMyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/BlockableInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1MzoyNlrOHXe4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowMDo1MlrOHXfPEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NTIwMw==", "bodyText": "It's odd to see BlockableInput without any explicit block function. Maybe it's more about CheckpointableInput?", "url": "https://github.com/apache/flink/pull/13465#discussion_r494385203", "createdAt": "2020-09-24T14:53:26Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/BlockableInput.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition.consumer;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Input, with just basic methods for blocking and resuming consumption. It can be for example an {@link InputGate}\n+ */\n+@Internal\n+public interface BlockableInput {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57fd9e04e148e73743f469bb53be84ef523fb8f4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MTA1OQ==", "bodyText": "There is added later on blockConsumption method, but yes, CheckpointableInput is a better name.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494391059", "createdAt": "2020-09-24T15:00:52Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/BlockableInput.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition.consumer;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+/**\n+ * Input, with just basic methods for blocking and resuming consumption. It can be for example an {@link InputGate}\n+ */\n+@Internal\n+public interface BlockableInput {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4NTIwMw=="}, "originalCommit": {"oid": "57fd9e04e148e73743f469bb53be84ef523fb8f4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI1NTAwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/BlockableInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowODoyN1rOHXfkuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNDowN1rOHXgSAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NjYwMw==", "bodyText": "resumeConsumption could be implicitly triggered by checkpointStopped.\nThen, the last unfitting method is blockConsumption, which could be modeled as void barrierReceived(int channelIndex, CheckpointBarrier barrier); (and it wouldn't be odd that it's ignored by InputGate).", "url": "https://github.com/apache/flink/pull/13465#discussion_r494396603", "createdAt": "2020-09-24T15:08:27Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/BlockableInput.java", "diffHunk": "@@ -26,9 +26,12 @@\n \n /**\n  * Input, with just basic methods for blocking and resuming consumption. It can be for example an {@link InputGate}\n+ * or a chained source.\n  */\n @Internal\n public interface BlockableInput {\n+\tvoid blockConsumption(int inputChannelIdx);\n+\n \tvoid resumeConsumption(int channelIndex) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef4d75dea974295ad688c5866dbde706cffe579c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwODE5NA==", "bodyText": "As discussed offline, we decided to keep it as it is for now.", "url": "https://github.com/apache/flink/pull/13465#discussion_r494408194", "createdAt": "2020-09-24T15:24:07Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/BlockableInput.java", "diffHunk": "@@ -26,9 +26,12 @@\n \n /**\n  * Input, with just basic methods for blocking and resuming consumption. It can be for example an {@link InputGate}\n+ * or a chained source.\n  */\n @Internal\n public interface BlockableInput {\n+\tvoid blockConsumption(int inputChannelIdx);\n+\n \tvoid resumeConsumption(int channelIndex) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NjYwMw=="}, "originalCommit": {"oid": "ef4d75dea974295ad688c5866dbde706cffe579c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 351, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}