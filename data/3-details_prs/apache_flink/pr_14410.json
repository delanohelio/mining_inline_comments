{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTc0ODMw", "number": 14410, "title": "[FLINK-20616][python] Support row-based operation to accept user-defined function directly", "bodyText": "What is the purpose of the change\nThis pull request will support row-based operation to accept user-defined function directly\nVerifying this change\nThis change added tests and can be verified as follows:\n\nIT test in test_row_based_operation.py\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-12-17T03:25:09Z", "url": "https://github.com/apache/flink/pull/14410", "merged": true, "mergeCommit": {"oid": "467a0d139a28827132d054b5b45cb1153cfb3be4"}, "closed": true, "closedAt": "2020-12-22T12:33:55Z", "author": {"login": "HuangXingBo"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm63CZAH2gAyNTQxNTc0ODMwOjg3MmFkMDllNmZkYmFjYTBhYmI0MjBkYjJkODYzMjFhODdmOTViMDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdootQ9gFqTU1NzAwNjMxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/872ad09e6fdbaca0abb420db2d86321a87f95b01", "committedDate": "2020-12-17T03:20:58Z", "message": "[FLINK-20616][python] Support row-based operation to accept user-defined function directly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MzYwMzcz", "url": "https://github.com/apache/flink/pull/14410#pullrequestreview-555360373", "createdAt": "2020-12-18T10:13:36Z", "commit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMDoxMzozN1rOIIc6DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTo0NTo0NFrOIIfxRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMzEzMg==", "bodyText": "Could you addd some examples in the PythonDoc?", "url": "https://github.com/apache/flink/pull/14410#discussion_r545733132", "createdAt": "2020-12-18T10:13:37Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -759,7 +761,7 @@ def drop_columns(self, *fields: Union[str, Expression]) -> 'Table':\n             assert isinstance(fields[0], str)\n             return Table(self._j_table.dropColumns(fields[0]), self._t_env)\n \n-    def map(self, func: Union[str, Expression]) -> 'Table':\n+    def map(self, func: Union[str, Expression, UserDefinedScalarFunctionWrapper]) -> 'Table':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczMzIyMg==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/14410#discussion_r545733222", "createdAt": "2020-12-18T10:13:45Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -800,10 +804,13 @@ def flat_map(self, func: Union[str, Expression]) -> 'Table':\n         \"\"\"\n         if isinstance(func, str):\n             return Table(self._j_table.flatMap(func), self._t_env)\n-        else:\n+        elif isinstance(func, Expression):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTczNDAzMA==", "bodyText": "one line?", "url": "https://github.com/apache/flink/pull/14410#discussion_r545734030", "createdAt": "2020-12-18T10:15:11Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -825,10 +832,19 @@ def aggregate(self, func: Union[str, Expression]) -> 'AggregatedTable':\n         \"\"\"\n         if isinstance(func, str):\n             return AggregatedTable(self._j_table.aggregate(func), self._t_env)\n-        else:\n+        elif isinstance(func, Expression):\n             return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n+        else:\n+            if hasattr(func, \"_alias_names\"):\n+                alias_names = getattr(func, \"_alias_names\")\n+                func = func(with_columns(col(\"*\"))).alias(*alias_names)\n+            else:\n+                func = func(with_columns(col(\"*\")))\n+            return AggregatedTable(self._j_table.aggregate(func._j_expr),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc1OTE2NQ==", "bodyText": "could be removed?", "url": "https://github.com/apache/flink/pull/14410#discussion_r545759165", "createdAt": "2020-12-18T11:02:31Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -1059,9 +1087,26 @@ def flat_aggregate(self, func: Union[str, Expression]) -> 'FlatAggregateTable':\n         \"\"\"\n         if isinstance(func, str):\n             return FlatAggregateTable(self._j_table.flatAggregate(func), self._t_env)\n+        elif isinstance(func, Expression):\n+            return FlatAggregateTable(self._j_table.flatAggregate(func._j_expr), self._t_env)\n         else:\n+            func = self._without_columns(func)\n             return FlatAggregateTable(self._j_table.flatAggregate(func._j_expr), self._t_env)\n \n+    def _without_columns(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:\n+        get_gateway()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MDk0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    without_keys = without_columns(\n          \n          \n            \n                    fields_without_keys = without_columns(", "url": "https://github.com/apache/flink/pull/14410#discussion_r545760942", "createdAt": "2020-12-18T11:05:54Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -1059,9 +1087,26 @@ def flat_aggregate(self, func: Union[str, Expression]) -> 'FlatAggregateTable':\n         \"\"\"\n         if isinstance(func, str):\n             return FlatAggregateTable(self._j_table.flatAggregate(func), self._t_env)\n+        elif isinstance(func, Expression):\n+            return FlatAggregateTable(self._j_table.flatAggregate(func._j_expr), self._t_env)\n         else:\n+            func = self._without_columns(func)\n             return FlatAggregateTable(self._j_table.flatAggregate(func._j_expr), self._t_env)\n \n+    def _without_columns(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:\n+        get_gateway()\n+        group_keys_field = self._j_table.getClass().getDeclaredField(\"groupKeys\")\n+        group_keys_field.setAccessible(True)\n+        j_group_keys = group_keys_field.get(self._j_table)\n+        without_keys = without_columns(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MTExMg==", "bodyText": "could be removed?", "url": "https://github.com/apache/flink/pull/14410#discussion_r545761112", "createdAt": "2020-12-18T11:06:15Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -1165,9 +1211,30 @@ def aggregate(self, func: Union[str, Expression]) -> 'AggregatedTable':\n         \"\"\"\n         if isinstance(func, str):\n             return AggregatedTable(self._j_table.aggregate(func), self._t_env)\n+        elif isinstance(func, Expression):\n+            return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n         else:\n+            func = self._without_columns(func)\n             return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n \n+    def _without_columns(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:\n+        get_gateway()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MDQ4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                def _without_columns(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:\n          \n          \n            \n                def _to_expr(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:", "url": "https://github.com/apache/flink/pull/14410#discussion_r545770480", "createdAt": "2020-12-18T11:25:14Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -1165,9 +1211,30 @@ def aggregate(self, func: Union[str, Expression]) -> 'AggregatedTable':\n         \"\"\"\n         if isinstance(func, str):\n             return AggregatedTable(self._j_table.aggregate(func), self._t_env)\n+        elif isinstance(func, Expression):\n+            return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n         else:\n+            func = self._without_columns(func)\n             return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n \n+    def _without_columns(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MDAzNw==", "bodyText": "I guess .select(\"*\")  could be removed?", "url": "https://github.com/apache/flink/pull/14410#discussion_r545780037", "createdAt": "2020-12-18T11:45:44Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/tests/test_row_based_operation.py", "diffHunk": "@@ -125,9 +123,11 @@ def test_aggregate_with_pandas_udaf(self):\n                                [DataTypes.FIELD(\"a\", DataTypes.FLOAT()),\n                                 DataTypes.FIELD(\"b\", DataTypes.INT())]),\n                            func_type=\"pandas\")\n-        t.group_by(t.a) \\\n-            .aggregate(pandas_udaf(t.b).alias(\"c\", \"d\")) \\\n-            .select(\"a, c, d\").execute_insert(\"Results\") \\\n+        t.select(t.a, t.b) \\\n+            .group_by(t.a) \\\n+            .aggregate(pandas_udaf) \\\n+            .select(\"*\") \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872ad09e6fdbaca0abb420db2d86321a87f95b01"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40710b468a239841a062702183352fbace8907a", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/c40710b468a239841a062702183352fbace8907a", "committedDate": "2020-12-20T09:25:22Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MDk3NDU5", "url": "https://github.com/apache/flink/pull/14410#pullrequestreview-556097459", "createdAt": "2020-12-21T02:26:29Z", "commit": {"oid": "c40710b468a239841a062702183352fbace8907a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjoyNjoyOVrOIJKbIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwMjo1MjoxMlrOIJKv6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ3ODg4Mw==", "bodyText": "I think the keys should also be given to the row based function.", "url": "https://github.com/apache/flink/pull/14410#discussion_r546478883", "createdAt": "2020-12-21T02:26:29Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -1059,9 +1098,25 @@ def flat_aggregate(self, func: Union[str, Expression]) -> 'FlatAggregateTable':\n         \"\"\"\n         if isinstance(func, str):\n             return FlatAggregateTable(self._j_table.flatAggregate(func), self._t_env)\n+        elif isinstance(func, Expression):\n+            return FlatAggregateTable(self._j_table.flatAggregate(func._j_expr), self._t_env)\n         else:\n+            func = self._to_expr(func)\n             return FlatAggregateTable(self._j_table.flatAggregate(func._j_expr), self._t_env)\n \n+    def _to_expr(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:\n+        group_keys_field = self._j_table.getClass().getDeclaredField(\"groupKeys\")\n+        group_keys_field.setAccessible(True)\n+        j_group_keys = group_keys_field.get(self._j_table)\n+        fields_without_keys = without_columns(\n+            j_group_keys[0], *([j_group_keys[i] for i in range(1, len(j_group_keys))]))\n+        if hasattr(func, \"alias_names\"):\n+            alias_names = getattr(func, \"alias_names\")\n+            func_expression = func(fields_without_keys).alias(*alias_names)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40710b468a239841a062702183352fbace8907a"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4MTgwNg==", "bodyText": "For Row based operation, the row function should receive Row/DataFrame as input. Otherwise, the fields name information will be missing. This will become a problem when there are hundreds of columns. It may be difficult to use as users have to give each column a meaningful name.", "url": "https://github.com/apache/flink/pull/14410#discussion_r546481806", "createdAt": "2020-12-21T02:41:03Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -817,6 +828,8 @@ def aggregate(self, func: Union[str, Expression]) -> 'AggregatedTable':\n             ...                    DataTypes.FIELD(\"b\", DataTypes.INT())]),\n             ...               func_type=\"pandas\")\n             >>> tab.aggregate(agg(tab.a).alias(\"a\", \"b\")).select(\"a, b\")\n+            >>> # input all columns\n+            >>> tab.aggregate(agg.alias(\"a, b\")).select(\"a, b\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40710b468a239841a062702183352fbace8907a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQ4NDIwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        >>> # input all columns\n          \n          \n            \n                        >>> # take all the columns as inputs", "url": "https://github.com/apache/flink/pull/14410#discussion_r546484203", "createdAt": "2020-12-21T02:52:12Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -792,6 +798,8 @@ def flat_map(self, func: Union[str, Expression]) -> 'Table':\n             ...     for s in string.split(\",\"):\n             ...         yield x, s\n             >>> tab.flat_map(split(tab.a, table.b))\n+            >>> # input all columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c40710b468a239841a062702183352fbace8907a"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/aeb710b99fcabb7f95ad5627f9c7e636430eb30e", "committedDate": "2020-12-21T09:58:08Z", "message": "fix comments-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NzYxMzc2", "url": "https://github.com/apache/flink/pull/14410#pullrequestreview-556761376", "createdAt": "2020-12-22T01:25:51Z", "commit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMToyNTo1MVrOIJrJyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMjoxMzo0MFrOIJr7XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNTExMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              bool used_in_row_based_operation = 4;\n          \n          \n            \n              bool takes_row_as_input = 4;", "url": "https://github.com/apache/flink/pull/14410#discussion_r547015112", "createdAt": "2020-12-22T01:25:51Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/proto/flink-fn-execution.proto", "diffHunk": "@@ -47,6 +47,9 @@ message UserDefinedFunction {\n \n   // The index of the over window used in pandas batch over window aggregation\n   int32 window_index = 3;\n+\n+  // Whether the UDF is used in row-based operation\n+  bool used_in_row_based_operation = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNTM2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Whether the UDF is used in row-based operation\n          \n          \n            \n              // Whether the UDF takes row as input instead of each columns of a row", "url": "https://github.com/apache/flink/pull/14410#discussion_r547015366", "createdAt": "2020-12-22T01:26:37Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/proto/flink-fn-execution.proto", "diffHunk": "@@ -47,6 +47,9 @@ message UserDefinedFunction {\n \n   // The index of the over window used in pandas batch over window aggregation\n   int32 window_index = 3;\n+\n+  // Whether the UDF is used in row-based operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNjEzOQ==", "bodyText": "I guess the example doesn't apply any more as the user-defined function should take Row as input. Should also update the other examples.", "url": "https://github.com/apache/flink/pull/14410#discussion_r547016139", "createdAt": "2020-12-22T01:29:21Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -769,6 +771,8 @@ def map(self, func: Union[str, Expression]) -> 'Table':\n             >>> add = udf(lambda x: Row(x + 1, x * x), result_type=DataTypes.Row(\n             ... [DataTypes.FIELD(\"a\", DataTypes.INT()), DataTypes.FIELD(\"b\", DataTypes.INT())]))\n             >>> tab.map(add(tab.a)).alias(\"a, b\")\n+            >>> # take all the columns as inputs\n+            >>> tab.map(add)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNzMwNw==", "bodyText": "Could you also update the example in FlatAggregateTable.select/AggregatedTable.select to use row-based operations?", "url": "https://github.com/apache/flink/pull/14410#discussion_r547017307", "createdAt": "2020-12-22T01:34:00Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/table.py", "diffHunk": "@@ -1165,9 +1224,26 @@ def aggregate(self, func: Union[str, Expression]) -> 'AggregatedTable':\n         \"\"\"\n         if isinstance(func, str):\n             return AggregatedTable(self._j_table.aggregate(func), self._t_env)\n+        elif isinstance(func, Expression):\n+            return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n         else:\n+            func.set_used_in_row_based_operation()\n+            func = self._to_expr(func)\n             return AggregatedTable(self._j_table.aggregate(func._j_expr), self._t_env)\n \n+    def _to_expr(self, func: UserDefinedAggregateFunctionWrapper) -> Expression:\n+        group_window_field = self._j_table.getClass().getDeclaredField(\"window\")\n+        group_window_field.setAccessible(True)\n+        j_group_window = group_window_field.get(self._j_table)\n+        j_time_field = j_group_window.getTimeField()\n+        fields_without_window = without_columns(j_time_field)\n+        if hasattr(func, \"_alias_names\"):\n+            alias_names = getattr(func, \"_alias_names\")\n+            func_expression = func(fields_without_window).alias(*alias_names)\n+        else:\n+            func_expression = func(fields_without_window)\n+        return func_expression\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 238}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNzc4Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                def set_used_in_row_based_operation(self):\n          \n          \n            \n                def _set_takes_row_as_input(self):", "url": "https://github.com/apache/flink/pull/14410#discussion_r547017786", "createdAt": "2020-12-22T01:35:52Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -348,11 +348,20 @@ def __init__(self, func, input_types, func_type, deterministic=None, name=None):\n             func.is_deterministic() if isinstance(func, UserDefinedFunction) else True)\n         self._func_type = func_type\n         self._judf_placeholder = None\n+        self._used_in_row_based_operation = False\n \n     def __call__(self, *args) -> Expression:\n         from pyflink.table import expressions as expr\n         return expr.call(self, *args)\n \n+    def alias(self, *alias_names: str):\n+        self._alias_names = alias_names\n+        return self\n+\n+    def set_used_in_row_based_operation(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxOTIzMg==", "bodyText": "What about putting self._used_in_row_based_operation after self._deterministic?", "url": "https://github.com/apache/flink/pull/14410#discussion_r547019232", "createdAt": "2020-12-22T01:41:34Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -460,7 +470,8 @@ def _create_judf(self, serialized_func, j_input_types, j_function_kind):\n             j_result_type,\n             j_function_kind,\n             self._deterministic,\n-            _get_python_env())\n+            _get_python_env(),\n+            self._used_in_row_based_operation)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyMDA5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                def alias(self, *alias_names: str):\n          \n          \n            \n                def _alias(self, *alias_names: str):", "url": "https://github.com/apache/flink/pull/14410#discussion_r547020097", "createdAt": "2020-12-22T01:44:54Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -348,11 +348,20 @@ def __init__(self, func, input_types, func_type, deterministic=None, name=None):\n             func.is_deterministic() if isinstance(func, UserDefinedFunction) else True)\n         self._func_type = func_type\n         self._judf_placeholder = None\n+        self._used_in_row_based_operation = False\n \n     def __call__(self, *args) -> Expression:\n         from pyflink.table import expressions as expr\n         return expr.call(self, *args)\n \n+    def alias(self, *alias_names: str):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyMDEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                def java_user_defined_function(self):\n          \n          \n            \n                def _java_user_defined_function(self):", "url": "https://github.com/apache/flink/pull/14410#discussion_r547020127", "createdAt": "2020-12-22T01:45:02Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -348,11 +348,20 @@ def __init__(self, func, input_types, func_type, deterministic=None, name=None):\n             func.is_deterministic() if isinstance(func, UserDefinedFunction) else True)\n         self._func_type = func_type\n         self._judf_placeholder = None\n+        self._used_in_row_based_operation = False\n \n     def __call__(self, *args) -> Expression:\n         from pyflink.table import expressions as expr\n         return expr.call(self, *args)\n \n+    def alias(self, *alias_names: str):\n+        self._alias_names = alias_names\n+        return self\n+\n+    def set_used_in_row_based_operation(self):\n+        self._used_in_row_based_operation = True\n+        return self\n+\n     def java_user_defined_function(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyNDEwNw==", "bodyText": "Why there is no such flag for aggregate function?", "url": "https://github.com/apache/flink/pull/14410#discussion_r547024107", "createdAt": "2020-12-22T01:59:15Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/proto/flink-fn-execution.proto", "diffHunk": "@@ -47,6 +47,9 @@ message UserDefinedFunction {\n \n   // The index of the over window used in pandas batch over window aggregation\n   int32 window_index = 3;\n+\n+  // Whether the UDF is used in row-based operation\n+  bool used_in_row_based_operation = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNTExMg=="}, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyNTc4OA==", "bodyText": "I guess we could also add row-based support in join_lateral/left_outer_join_lateral? I'm fine to do it in a separate PR if it you want.", "url": "https://github.com/apache/flink/pull/14410#discussion_r547025788", "createdAt": "2020-12-22T02:05:38Z", "author": {"login": "dianfu"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/functions/python/PythonTableFunction.java", "diffHunk": "@@ -48,6 +48,7 @@\n \tprivate final PythonFunctionKind pythonFunctionKind;\n \tprivate final boolean deterministic;\n \tprivate final PythonEnv pythonEnv;\n+\tprivate final boolean usedInRowBasedOperation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyNjI0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def wrap_inputs_to_row(*args):\n          \n          \n            \n            def wrap_inputs_as_row(*args):", "url": "https://github.com/apache/flink/pull/14410#discussion_r547026240", "createdAt": "2020-12-22T02:07:18Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/operation_utils.py", "diffHunk": "@@ -43,6 +43,15 @@ def wrap_pandas_result(it):\n     return arrays\n \n \n+def wrap_inputs_to_row(*args):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAyNzgwNQ==", "bodyText": "could you improve pandas_udaf to let it also access the group key?", "url": "https://github.com/apache/flink/pull/14410#discussion_r547027805", "createdAt": "2020-12-22T02:13:40Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/tests/test_row_based_operation.py", "diffHunk": "@@ -120,14 +117,16 @@ def test_aggregate_with_pandas_udaf(self):\n             ['a', 'b', 'c'],\n             [DataTypes.TINYINT(), DataTypes.FLOAT(), DataTypes.INT()])\n         self.t_env.register_table_sink(\"Results\", table_sink)\n-        pandas_udaf = udaf(lambda a: (a.mean(), a.max()),\n+        pandas_udaf = udaf(lambda pd: (pd.b.mean(), pd.b.max()),\n                            result_type=DataTypes.ROW(\n                                [DataTypes.FIELD(\"a\", DataTypes.FLOAT()),\n                                 DataTypes.FIELD(\"b\", DataTypes.INT())]),\n                            func_type=\"pandas\")\n-        t.group_by(t.a) \\\n-            .aggregate(pandas_udaf(t.b).alias(\"c\", \"d\")) \\\n-            .select(\"a, c, d\").execute_insert(\"Results\") \\\n+        t.select(t.a, t.b) \\\n+            .group_by(t.a) \\\n+            .aggregate(pandas_udaf) \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aeb710b99fcabb7f95ad5627f9c7e636430eb30e"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1ced0fdf23670160b01752f98790186f66ca99c", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/e1ced0fdf23670160b01752f98790186f66ca99c", "committedDate": "2020-12-22T07:02:05Z", "message": "fix comments-3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0727e955bba043f05aa6d6f5da5377a9dc086bc", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/e0727e955bba043f05aa6d6f5da5377a9dc086bc", "committedDate": "2020-12-22T09:55:17Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MDA2MzE0", "url": "https://github.com/apache/flink/pull/14410#pullrequestreview-557006314", "createdAt": "2020-12-22T11:19:51Z", "commit": {"oid": "e0727e955bba043f05aa6d6f5da5377a9dc086bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3665, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}