{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODQwNDIw", "number": 11198, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzoxNTowN1rODijWjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTozMjo1OVrODi6lYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTU3MzkwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/ml/tests/__init__.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzoxNTowN1rOFt3X-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo0OToxMVrOFt7j2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNzQ5OA==", "bodyText": "Should this method be in pyflink.testing.test_case_util?", "url": "https://github.com/apache/flink/pull/11198#discussion_r383637498", "createdAt": "2020-02-25T03:15:07Z", "author": {"login": "becketqin"}, "path": "flink-python/pyflink/ml/tests/__init__.py", "diffHunk": "@@ -0,0 +1,58 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+import glob\n+import os\n+import unittest\n+\n+from pyflink.testing.test_case_utils import PyFlinkTestCase\n+from pyflink.find_flink_home import _find_flink_source_root\n+\n+\n+class MLTestCase(PyFlinkTestCase):\n+    \"\"\"\n+    Base class for testing ML.\n+    \"\"\"\n+\n+    _inited = False\n+\n+    @staticmethod\n+    def _ensure_path(pattern):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNjA3Mw==", "bodyText": "It sounds like a good idea. I will move it there.", "url": "https://github.com/apache/flink/pull/11198#discussion_r383706073", "createdAt": "2020-02-25T07:49:11Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/ml/tests/__init__.py", "diffHunk": "@@ -0,0 +1,58 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+import glob\n+import os\n+import unittest\n+\n+from pyflink.testing.test_case_utils import PyFlinkTestCase\n+from pyflink.find_flink_home import _find_flink_source_root\n+\n+\n+class MLTestCase(PyFlinkTestCase):\n+    \"\"\"\n+    Base class for testing ML.\n+    \"\"\"\n+\n+    _inited = False\n+\n+    @staticmethod\n+    def _ensure_path(pattern):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzNzQ5OA=="}, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTU4MTM1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/table/table_environment.py", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMzoyMDowNlrOFt3cZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTozMTowMVrOFubffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzODYyOA==", "bodyText": "Are the changes in this class relevant to the MLEnvironment and MLEnvironmentFactory?", "url": "https://github.com/apache/flink/pull/11198#discussion_r383638628", "createdAt": "2020-02-25T03:20:06Z", "author": {"login": "becketqin"}, "path": "flink-python/pyflink/table/table_environment.py", "diffHunk": "@@ -76,14 +76,24 @@ class TableEnvironment(object):\n \n     __metaclass__ = ABCMeta\n \n-    def __init__(self, j_tenv, is_blink_planner, serializer=PickleSerializer()):\n+    def __init__(self, j_tenv, serializer=PickleSerializer()):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwNzMzNw==", "bodyText": "Yes, it will be more friendly to create the corresponding table environment in MLEnvironmentFactory.get_default(), e.g., we don not need to pass the is_blink_planner variable when creating StreamTableEnvironment.", "url": "https://github.com/apache/flink/pull/11198#discussion_r383707337", "createdAt": "2020-02-25T07:52:31Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/table/table_environment.py", "diffHunk": "@@ -76,14 +76,24 @@ class TableEnvironment(object):\n \n     __metaclass__ = ABCMeta\n \n-    def __init__(self, j_tenv, is_blink_planner, serializer=PickleSerializer()):\n+    def __init__(self, j_tenv, serializer=PickleSerializer()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzODYyOA=="}, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc5Mjg4Ng==", "bodyText": "Do we expect others to construct TableEnvironment? Isn't this a public constructor?", "url": "https://github.com/apache/flink/pull/11198#discussion_r383792886", "createdAt": "2020-02-25T10:32:41Z", "author": {"login": "becketqin"}, "path": "flink-python/pyflink/table/table_environment.py", "diffHunk": "@@ -76,14 +76,24 @@ class TableEnvironment(object):\n \n     __metaclass__ = ABCMeta\n \n-    def __init__(self, j_tenv, is_blink_planner, serializer=PickleSerializer()):\n+    def __init__(self, j_tenv, serializer=PickleSerializer()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzODYyOA=="}, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkxODk0Ng==", "bodyText": "It is an internal constructor which takes a java table environment object as a parameter. For users, the StreamTableEnvironment.create() is called to create the Environment.", "url": "https://github.com/apache/flink/pull/11198#discussion_r383918946", "createdAt": "2020-02-25T14:39:37Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/table/table_environment.py", "diffHunk": "@@ -76,14 +76,24 @@ class TableEnvironment(object):\n \n     __metaclass__ = ABCMeta\n \n-    def __init__(self, j_tenv, is_blink_planner, serializer=PickleSerializer()):\n+    def __init__(self, j_tenv, serializer=PickleSerializer()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzODYyOA=="}, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyOTI0Nw==", "bodyText": "Got it. Thanks for the explanation.", "url": "https://github.com/apache/flink/pull/11198#discussion_r384229247", "createdAt": "2020-02-26T01:31:01Z", "author": {"login": "becketqin"}, "path": "flink-python/pyflink/table/table_environment.py", "diffHunk": "@@ -76,14 +76,24 @@ class TableEnvironment(object):\n \n     __metaclass__ = ABCMeta\n \n-    def __init__(self, j_tenv, is_blink_planner, serializer=PickleSerializer()):\n+    def __init__(self, j_tenv, serializer=PickleSerializer()):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYzODYyOA=="}, "originalCommit": {"oid": "2683ef7e092d4026bad2307c4cbb204aa052be1d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTM4MDE2OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/ml/ml_environment_factory.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTozMjo1OVrOFubhdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo0NToxNlrOFubuHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyOTc1MQ==", "bodyText": "Looks like the ID in Java is Long type?", "url": "https://github.com/apache/flink/pull/11198#discussion_r384229751", "createdAt": "2020-02-26T01:32:59Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/ml_environment_factory.py", "diffHunk": "@@ -0,0 +1,113 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+from typing import Optional\n+from pyflink.ml.ml_environment import MLEnvironment\n+from pyflink.dataset import ExecutionEnvironment\n+from pyflink.datastream import StreamExecutionEnvironment\n+from pyflink.table import BatchTableEnvironment, StreamTableEnvironment\n+from pyflink.java_gateway import get_gateway\n+import threading\n+\n+\n+class MLEnvironmentFactory:\n+    \"\"\"\n+    Factory to get the MLEnvironment using a MLEnvironmentId.\n+    \"\"\"\n+    _lock = threading.RLock()\n+    _default_ml_environment_id = 0\n+    _next_id = 1\n+    _map = {_default_ml_environment_id: None}\n+\n+    @staticmethod\n+    def get(ml_env_id: int) -> Optional[MLEnvironment]:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99cac2eb28fb2907b40012969ff9c7b640c91ad1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzMjk5MA==", "bodyText": "Hi, appreciate your feedback! There is no Long type in Python3 and we drop Python2 support a few months ago. Integers in Python 3 are of unlimited size.", "url": "https://github.com/apache/flink/pull/11198#discussion_r384232990", "createdAt": "2020-02-26T01:45:16Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/ml/ml_environment_factory.py", "diffHunk": "@@ -0,0 +1,113 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+from typing import Optional\n+from pyflink.ml.ml_environment import MLEnvironment\n+from pyflink.dataset import ExecutionEnvironment\n+from pyflink.datastream import StreamExecutionEnvironment\n+from pyflink.table import BatchTableEnvironment, StreamTableEnvironment\n+from pyflink.java_gateway import get_gateway\n+import threading\n+\n+\n+class MLEnvironmentFactory:\n+    \"\"\"\n+    Factory to get the MLEnvironment using a MLEnvironmentId.\n+    \"\"\"\n+    _lock = threading.RLock()\n+    _default_ml_environment_id = 0\n+    _next_id = 1\n+    _map = {_default_ml_environment_id: None}\n+\n+    @staticmethod\n+    def get(ml_env_id: int) -> Optional[MLEnvironment]:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIyOTc1MQ=="}, "originalCommit": {"oid": "99cac2eb28fb2907b40012969ff9c7b640c91ad1"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1002, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}