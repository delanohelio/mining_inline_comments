{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTIxNDYy", "number": 12657, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NToxM1rOEFxXDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNTo0N1rOEF3DnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg3MDU1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NToxM1rOGkKOAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NToxM1rOGkKOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTM0NA==", "bodyText": "most operations in executeQueryInternal  method and executeUpdateInternal method are already wrapped in user classloader, only deployer.deploy() is  needed. Otherwise, it's better we should remove those wrappers.  btw, add some tests in sql client to verify the fix ?", "url": "https://github.com/apache/flink/pull/12657#discussion_r440569344", "createdAt": "2020-06-16T03:45:13Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/LocalExecutor.java", "diffHunk": "@@ -462,7 +462,7 @@ public ResolvedExpression parseSqlExpression(String sqlExpression, TableSchema i\n \t@Override\n \tpublic ResultDescriptor executeQuery(String sessionId, String query) throws SqlExecutionException {\n \t\tfinal ExecutionContext<?> context = getExecutionContext(sessionId);\n-\t\treturn executeQueryInternal(sessionId, context, query);\n+\t\treturn context.wrapClassLoader(() -> executeQueryInternal(sessionId, context, query));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14cdb5d641588f9dfa7f8536fe92e3e57abd8e14"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTIyMjY1OnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjo1NDozNVrOGkNl_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo0NjoxM1rOGkPOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNDYzOQ==", "bodyText": "I don't think we need start a thread.\nThe inputs are something like commands, should print them blocking.", "url": "https://github.com/apache/flink/pull/12657#discussion_r440624639", "createdAt": "2020-06-16T06:54:35Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {\n+\t\tnew Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0Mzc2Mw==", "bodyText": "This keeps align with processInputStream, we shouldn't block here, because the blocking/non-blocking is determined by user AutoClosableProcessBuilder#runNonBlocking or AutoClosableProcessBuilder#runBlocking().", "url": "https://github.com/apache/flink/pull/12657#discussion_r440643763", "createdAt": "2020-06-16T07:32:51Z", "author": {"login": "wuchong"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {\n+\t\tnew Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNDYzOQ=="}, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY0NjU3Mg==", "bodyText": "I don't think it should be same to processInputStream.\nFor a process, maybe this thread not start, but process ended. I'd like to think of Input lines as commands.", "url": "https://github.com/apache/flink/pull/12657#discussion_r440646572", "createdAt": "2020-06-16T07:37:46Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {\n+\t\tnew Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNDYzOQ=="}, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1MTM4Mg==", "bodyText": "Even if we don't start a thread here, it is still possible the process is finished when we want to print lines to the process.", "url": "https://github.com/apache/flink/pull/12657#discussion_r440651382", "createdAt": "2020-06-16T07:46:13Z", "author": {"login": "wuchong"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {\n+\t\tnew Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNDYzOQ=="}, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTIyNzExOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjo1NjowMFrOGkNoug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzo1Mzo0N1rOGkPgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNTMzOA==", "bodyText": "processOutputStream(inputs) looks confuse to me. Can we just name it printLinesToProcess?", "url": "https://github.com/apache/flink/pull/12657#discussion_r440625338", "createdAt": "2020-06-16T06:56:00Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDY1NTkyNA==", "bodyText": "I just want to keep align with the previous processStream(InputStream ..., Consumer...). I think we should have a consistent naming for them. Howabout rename them to consumeOutput(InputStream, Consumer), produceInput(OutputStream, List<String>)?", "url": "https://github.com/apache/flink/pull/12657#discussion_r440655924", "createdAt": "2020-06-16T07:53:47Z", "author": {"login": "wuchong"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNTMzOA=="}, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTIzNDgyOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjo1ODoyM1rOGkNtQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjo1ODoyM1rOGkNtQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNjQ5OQ==", "bodyText": "inputs -> inputLines?", "url": "https://github.com/apache/flink/pull/12657#discussion_r440626499", "createdAt": "2020-06-16T06:58:23Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTIzNTQ4OnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjo1ODozNlrOGkNtqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjo1ODozNlrOGkNtqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYyNjYwMQ==", "bodyText": "inputLines can be String...", "url": "https://github.com/apache/flink/pull/12657#discussion_r440626601", "createdAt": "2020-06-16T06:58:36Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -89,6 +95,11 @@ public AutoClosableProcessBuilder setStderrProcessor(final Consumer<String> stde\n \t\t\treturn this;\n \t\t}\n \n+\t\tpublic AutoClosableProcessBuilder setStdInputs(final List<String> inputLines) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTI1NjUwOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common-kafka/src/test/java/org/apache/flink/tests/util/kafka/SQLClientKafkaITCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzowNjowN1rOGkN7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNzowNjowN1rOGkN7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYzMDA0Mw==", "bodyText": "Add disable-quote-character to remove \"?", "url": "https://github.com/apache/flink/pull/12657#discussion_r440630043", "createdAt": "2020-06-16T07:06:07Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common-kafka/src/test/java/org/apache/flink/tests/util/kafka/SQLClientKafkaITCase.java", "diffHunk": "@@ -179,80 +174,55 @@ public void testKafka() throws Exception {\n \t\t}\n \t}\n \n-\tprivate void insertIntoAvroTable(ClusterController clusterController) throws IOException {\n-\t\tLOG.info(\"Executing SQL: Kafka {} JSON -> Kafka {} Avro\", kafkaSQLVersion, kafkaSQLVersion);\n-\t\tString sqlStatement1 = \"INSERT INTO AvroBothTable\\n\" +\n-\t\t\t\t\"  SELECT\\n\" +\n-\t\t\t\t\"    CAST(TUMBLE_START(rowtime, INTERVAL '1' HOUR) AS VARCHAR) AS event_timestamp,\\n\" +\n-\t\t\t\t\"    user,\\n\" +\n-\t\t\t\t\"    RegReplace(event.message, ' is ', ' was ') AS message,\\n\" +\n-\t\t\t\t\"    COUNT(*) AS duplicate_count\\n\" +\n-\t\t\t\t\"  FROM JsonSourceTable\\n\" +\n-\t\t\t\t\"  WHERE user IS NOT NULL\\n\" +\n-\t\t\t\t\"  GROUP BY\\n\" +\n-\t\t\t\t\"    user,\\n\" +\n-\t\t\t\t\"    event.message,\\n\" +\n-\t\t\t\t\"    TUMBLE(rowtime, INTERVAL '1' HOUR)\";\n-\n-\t\tclusterController.submitSQLJob(new SQLJobSubmission.SQLJobSubmissionBuilder(sqlStatement1)\n-\t\t\t\t.addJar(sqlAvroJar)\n-\t\t\t\t.addJars(apacheAvroJars)\n-\t\t\t\t.addJar(sqlJsonJar)\n-\t\t\t\t.addJar(sqlConnectorKafkaJar)\n-\t\t\t\t.addJar(sqlToolBoxJar)\n-\t\t\t\t.setSessionEnvFile(this.sqlClientSessionConf.toAbsolutePath().toString())\n-\t\t\t\t.build());\n-\t}\n-\n-\tprivate void insertIntoCsvSinkTable(ClusterController clusterController) throws IOException {\n-\t\tLOG.info(\"Executing SQL: Kafka {} Avro -> Csv sink\", kafkaSQLVersion);\n-\t\tString sqlStatement2 = \"INSERT INTO CsvSinkTable\\n\" +\n-\t\t\t\t\"   SELECT AvroBothTable.*, RegReplace('Test constant folding.', 'Test', 'Success') AS constant\\n\" +\n-\t\t\t\t\"   FROM AvroBothTable\";\n-\n-\t\tclusterController.submitSQLJob(new SQLJobSubmission.SQLJobSubmissionBuilder(sqlStatement2)\n-\t\t\t\t.addJar(sqlAvroJar)\n-\t\t\t\t.addJars(apacheAvroJars)\n-\t\t\t\t.addJar(sqlJsonJar)\n-\t\t\t\t.addJar(sqlConnectorKafkaJar)\n-\t\t\t\t.addJar(sqlToolBoxJar)\n-\t\t\t\t.setSessionEnvFile(this.sqlClientSessionConf.toAbsolutePath().toString())\n-\t\t\t\t.build()\n-\t\t);\n+\tprivate void executeSqlStatements(ClusterController clusterController, List<String> sqlLines) throws IOException {\n+\t\tLOG.info(\"Executing Kafka {} end-to-end SQL statements.\", kafkaSQLVersion);\n+\t\tclusterController.submitSQLJob(new SQLJobSubmission.SQLJobSubmissionBuilder(sqlLines)\n+\t\t\t.addJar(sqlAvroJar)\n+\t\t\t.addJars(apacheAvroJars)\n+\t\t\t.addJar(sqlConnectorKafkaJar)\n+\t\t\t.addJar(sqlToolBoxJar)\n+\t\t\t.build());\n \t}\n \n-\tprivate String initializeSessionYaml(Map<String, String> vars) throws IOException {\n-\t\tURL url = SQLClientKafkaITCase.class.getClassLoader().getResource(KAFKA_JSON_SOURCE_SCHEMA_YAML);\n+\tprivate List<String> initializeSqlLines(Map<String, String> vars) throws IOException {\n+\t\tURL url = SQLClientKafkaITCase.class.getClassLoader().getResource(KAFKA_E2E_SQL);\n \t\tif (url == null) {\n-\t\t\tthrow new FileNotFoundException(KAFKA_JSON_SOURCE_SCHEMA_YAML);\n+\t\t\tthrow new FileNotFoundException(KAFKA_E2E_SQL);\n \t\t}\n \n-\t\tString schema = FileUtils.readFileUtf8(new File(url.getFile()));\n-\t\tfor (Map.Entry<String, String> var : vars.entrySet()) {\n-\t\t\tschema = schema.replace(var.getKey(), var.getValue());\n+\t\tList<String> lines = Files.readAllLines(new File(url.getFile()).toPath());\n+\t\tList<String> result = new ArrayList<>();\n+\t\tfor (String line : lines) {\n+\t\t\tfor (Map.Entry<String, String> var : vars.entrySet()) {\n+\t\t\t\tline = line.replace(var.getKey(), var.getValue());\n+\t\t\t}\n+\t\t\tresult.add(line);\n \t\t}\n-\t\treturn schema;\n+\n+\t\treturn result;\n \t}\n \n \tprivate void checkCsvResultFile() throws Exception {\n \t\tboolean success = false;\n \t\tfinal Deadline deadline = Deadline.fromNow(Duration.ofSeconds(120));\n-\t\twhile (!success && deadline.hasTimeLeft()) {\n+\t\twhile (deadline.hasTimeLeft()) {\n \t\t\tif (Files.exists(result)) {\n-\t\t\t\tbyte[] bytes = Files.readAllBytes(result);\n-\t\t\t\tString[] lines = new String(bytes, Charsets.UTF_8).split(\"\\n\");\n-\t\t\t\tif (lines.length == 4) {\n+\t\t\t\tList<String> lines = readCsvResultFiles(result);\n+\t\t\t\tif (lines.size() == 4) {\n \t\t\t\t\tsuccess = true;\n \t\t\t\t\tassertThat(\n-\t\t\t\t\t\tlines,\n+\t\t\t\t\t\tlines.toArray(new String[0]),\n \t\t\t\t\t\tarrayContainingInAnyOrder(\n-\t\t\t\t\t\t\t\"2018-03-12 08:00:00.000,Alice,This was a warning.,2,Success constant folding.\",\n-\t\t\t\t\t\t\t\"2018-03-12 09:00:00.000,Bob,This was another warning.,1,Success constant folding.\",\n-\t\t\t\t\t\t\t\"2018-03-12 09:00:00.000,Steve,This was another info.,2,Success constant folding.\",\n-\t\t\t\t\t\t\t\"2018-03-12 09:00:00.000,Alice,This was a info.,1,Success constant folding.\"\n+\t\t\t\t\t\t\t\"\\\"2018-03-12 08:00:00.000\\\",Alice,\\\"This was a warning.\\\",2,\\\"Success constant folding.\\\"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTgwMzgxOnYy", "diffSide": "RIGHT", "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNTo0N1rOGkTV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTozNTo0N1rOGkTV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcxODgyMA==", "bodyText": "Actually, try with resource will close this output put stream, and in this way, will close process.\nI think you should create a better method name for this, and add comments to explain.", "url": "https://github.com/apache/flink/pull/12657#discussion_r440718820", "createdAt": "2020-06-16T09:35:47Z", "author": {"login": "JingsongLi"}, "path": "flink-end-to-end-tests/flink-end-to-end-tests-common/src/main/java/org/apache/flink/tests/util/AutoClosableProcess.java", "diffHunk": "@@ -167,6 +186,18 @@ private static void processStream(final InputStream stream, final Consumer<Strin\n \t\t).start();\n \t}\n \n+\tprivate static void processOutputStream(final OutputStream stream, final List<String> inputs) {\n+\t\tnew Thread(() -> {\n+\t\t\ttry (PrintStream printStream = new PrintStream(stream, true, StandardCharsets.UTF_8.name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50108ca39ff114f9c85ae5f2b5cc72eb3dd4357a"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4284, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}