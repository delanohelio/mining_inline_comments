{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NDI5OTcy", "number": 11208, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NDo0OVrODjbsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNTo0OVrODjufaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDgwNDQwOnYy", "diffSide": "RIGHT", "path": "docs/_includes/generated/python_configuration.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NDo0OVrOFvPLOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NDo0OVrOFvPLOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NjAyNQ==", "bodyText": "Maybe add some descriptions about the difference between bundle size and arrow batch size? For example, arrow batch size should be smaller than bundle size.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385076025", "createdAt": "2020-02-27T11:44:49Z", "author": {"login": "hequn8128"}, "path": "docs/_includes/generated/python_configuration.html", "diffHunk": "@@ -8,6 +8,12 @@\n         </tr>\n     </thead>\n     <tbody>\n+        <tr>\n+            <td><h5>python.fn-execution.arrow.batch.size</h5></td>\n+            <td style=\"word-wrap: break-word;\">1000</td>\n+            <td>Integer</td>\n+            <td>The maximum number of elements to include in an arrow batch for Python user-defined function execution.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDgwNjI1OnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NTozM1rOFvPMcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo0NTozM1rOFvPMcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3NjMzNg==", "bodyText": "Can be in one line. Same for other places.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385076336", "createdAt": "2020-02-27T11:45:33Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<Row> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\tpublic ArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk3ODAyOnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NDowOVrOFvQzYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTozNDo1NlrOFvm9bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjY5MQ==", "bodyText": "Can we move this line into the open method?", "url": "https://github.com/apache/flink/pull/11208#discussion_r385102691", "createdAt": "2020-02-27T12:44:09Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.dataformat.JoinedRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\t/**\n+\t * The JoinedRow reused holding the execution result.\n+\t */\n+\tprivate transient JoinedRow reuseJoinedRow;\n+\n+\tpublic BaseRowArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);\n+\t\treader = new ArrowStreamReader(bais, allocator);\n+\t\treuseJoinedRow = new JoinedRow();\n+\t}\n+\n+\t@Override\n+\tpublic void close() throws Exception {\n+\t\ttry {\n+\t\t\tsuper.close();\n+\t\t} finally {\n+\t\t\treader.close();\n+\t\t\tallocator.close();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic PythonFunctionRunner<BaseRow> createPythonFunctionRunner(\n+\t\tFnDataReceiver<byte[]> resultReceiver,\n+\t\tPythonEnvironmentManager pythonEnvironmentManager) {\n+\t\treturn new BaseRowArrowPythonScalarFunctionRunner(\n+\t\t\tgetRuntimeContext().getTaskName(),\n+\t\t\tresultReceiver,\n+\t\t\tscalarFunctions,\n+\t\t\tpythonEnvironmentManager,\n+\t\t\tuserDefinedFunctionInputType,\n+\t\t\tuserDefinedFunctionOutputType,\n+\t\t\tgetPythonConfig().getMaxArrowBatchSize());\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"ConstantConditions\")\n+\tpublic void emitResults() throws IOException {\n+\t\tbyte[] udfResult;\n+\t\twhile ((udfResult = userDefinedFunctionResultQueue.poll()) != null) {\n+\t\t\tbais.setBuffer(udfResult, 0, udfResult.length);\n+\t\t\treader.loadNextBatch();\n+\t\t\tVectorSchemaRoot root = reader.getVectorSchemaRoot();\n+\t\t\tif (arrowReader == null) {\n+\t\t\t\tarrowReader = ArrowUtils.createBaseRowArrowReader(root);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NTcwOA==", "bodyText": "It assumes that the execution results are already stored in the VectorSchemaRoot before creating the ArrowReader. So I'm afraid that we cannot move it to open.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385465708", "createdAt": "2020-02-28T01:34:56Z", "author": {"login": "dianfu"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.dataformat.JoinedRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\t/**\n+\t * The JoinedRow reused holding the execution result.\n+\t */\n+\tprivate transient JoinedRow reuseJoinedRow;\n+\n+\tpublic BaseRowArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);\n+\t\treader = new ArrowStreamReader(bais, allocator);\n+\t\treuseJoinedRow = new JoinedRow();\n+\t}\n+\n+\t@Override\n+\tpublic void close() throws Exception {\n+\t\ttry {\n+\t\t\tsuper.close();\n+\t\t} finally {\n+\t\t\treader.close();\n+\t\t\tallocator.close();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic PythonFunctionRunner<BaseRow> createPythonFunctionRunner(\n+\t\tFnDataReceiver<byte[]> resultReceiver,\n+\t\tPythonEnvironmentManager pythonEnvironmentManager) {\n+\t\treturn new BaseRowArrowPythonScalarFunctionRunner(\n+\t\t\tgetRuntimeContext().getTaskName(),\n+\t\t\tresultReceiver,\n+\t\t\tscalarFunctions,\n+\t\t\tpythonEnvironmentManager,\n+\t\t\tuserDefinedFunctionInputType,\n+\t\t\tuserDefinedFunctionOutputType,\n+\t\t\tgetPythonConfig().getMaxArrowBatchSize());\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"ConstantConditions\")\n+\tpublic void emitResults() throws IOException {\n+\t\tbyte[] udfResult;\n+\t\twhile ((udfResult = userDefinedFunctionResultQueue.poll()) != null) {\n+\t\t\tbais.setBuffer(udfResult, 0, udfResult.length);\n+\t\t\treader.loadNextBatch();\n+\t\t\tVectorSchemaRoot root = reader.getVectorSchemaRoot();\n+\t\t\tif (arrowReader == null) {\n+\t\t\t\tarrowReader = ArrowUtils.createBaseRowArrowReader(root);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMjY5MQ=="}, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTAwNzQyOnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MzoyN1rOFvRErQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MzoyN1rOFvRErQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNzExNw==", "bodyText": "This member can be put into the parent class.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385107117", "createdAt": "2020-02-27T12:53:27Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.dataformat.JoinedRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\t/**\n+\t * The JoinedRow reused holding the execution result.\n+\t */\n+\tprivate transient JoinedRow reuseJoinedRow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA3NzA4OnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNTo1M1rOFvRvmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1Njo0MVrOFvsQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODEwNA==", "bodyText": "It seems it's better to add a base class for the arrow operator, similar to the runner class structure. More code could be reused. For example, most code in ArrowPythonScalarFunctionOperator and BaseRowArrowPythonScalarFunctionOperator could be reused.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385118104", "createdAt": "2020-02-27T13:15:53Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ3MTcxNg==", "bodyText": "I'm afraid that we cannot do that. Currently ArrowPythonScalarFunctionOperator and PythonScalarFunctionOperator extends the same abstract base class, while BaseRowArrowPythonScalarFunctionOperator and BaseRowPythonScalarFunctionOperator share the same abstract base class. This is a little different from the runner because the operators from the same planner could share more code.\nBesides, it seems that there is no much code duplication between ArrowPythonScalarFunctionOperator and BaseRowArrowPythonScalarFunctionOperator and only open/close method could be reused between them(about 20 lines of code). Definitely agree with you that we should remove code duplication as much as possible. However, it's not easy to remove all the code duplication as we want to support two kinds of planners, two kinds of udfs. We can only make the code duplication as minimum as possible. What's your thought?", "url": "https://github.com/apache/flink/pull/11208#discussion_r385471716", "createdAt": "2020-02-28T01:58:57Z", "author": {"login": "dianfu"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODEwNA=="}, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MjQ4Ng==", "bodyText": "ok, let's keep it.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385552486", "createdAt": "2020-02-28T07:56:41Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODEwNA=="}, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTE3NzczOnYy", "diffSide": "RIGHT", "path": "flink-python/src/test/java/org/apache/flink/table/runtime/utils/PassThroughArrowPythonScalarFunctionRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo0NDoyOFrOFvSr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNDoxNDo0NFrOFvpDTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzMzU2NA==", "bodyText": "I'm wondering if we can create a CommonPassThroughScalarFunctionRunner<IN> that can be used for both arrow and non-arrow, both row and baserow, so that we don't need so many duplicated classes.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385133564", "createdAt": "2020-02-27T13:44:28Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/test/java/org/apache/flink/table/runtime/utils/PassThroughArrowPythonScalarFunctionRunner.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.utils;\n+\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.beam.runners.fnexecution.control.JobBundleFactory;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+import org.apache.beam.vendor.grpc.v1p21p0.com.google.protobuf.Struct;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.utils.PythonTestUtils.createMockJobBundleFactory;\n+\n+/**\n+ * An {@link ArrowPythonScalarFunctionRunner} that just return the input elements as the execution results.\n+ */\n+public class PassThroughArrowPythonScalarFunctionRunner extends ArrowPythonScalarFunctionRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ5OTk4MA==", "bodyText": "Good suggestion. As discussed offline, have updated the PR and currently there are two PassThrough runners which are used for arrow and non-arrow cases separately.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385499980", "createdAt": "2020-02-28T04:14:44Z", "author": {"login": "dianfu"}, "path": "flink-python/src/test/java/org/apache/flink/table/runtime/utils/PassThroughArrowPythonScalarFunctionRunner.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.utils;\n+\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.beam.runners.fnexecution.control.JobBundleFactory;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+import org.apache.beam.vendor.grpc.v1p21p0.com.google.protobuf.Struct;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.utils.PythonTestUtils.createMockJobBundleFactory;\n+\n+/**\n+ * An {@link ArrowPythonScalarFunctionRunner} that just return the input elements as the execution results.\n+ */\n+public class PassThroughArrowPythonScalarFunctionRunner extends ArrowPythonScalarFunctionRunner {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzMzU2NA=="}, "originalCommit": {"oid": "42e161e32dab9ff3c1ca567eab2236c47623e06c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg2NTMzOnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1NzoxNFrOFvsRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1NzoxNFrOFvsRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MjY5Mw==", "bodyText": "one line", "url": "https://github.com/apache/flink/pull/11208#discussion_r385552693", "createdAt": "2020-02-28T07:57:14Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/BaseRowArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractBaseRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.BaseRowArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the blink planner.\n+ */\n+@Internal\n+public class BaseRowArrowPythonScalarFunctionOperator extends AbstractBaseRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<BaseRow> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\tpublic BaseRowArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg2Njg1OnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1Nzo1M1rOFvsSKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1Nzo1M1rOFvsSKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MjkzNg==", "bodyText": "In one line?", "url": "https://github.com/apache/flink/pull/11208#discussion_r385552936", "createdAt": "2020-02-28T07:57:53Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/scalar/arrow/ArrowPythonScalarFunctionOperator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.python.scalar.arrow;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.PythonFunctionRunner;\n+import org.apache.flink.python.env.PythonEnvironmentManager;\n+import org.apache.flink.table.functions.ScalarFunction;\n+import org.apache.flink.table.functions.python.PythonFunctionInfo;\n+import org.apache.flink.table.runtime.arrow.ArrowReader;\n+import org.apache.flink.table.runtime.arrow.ArrowUtils;\n+import org.apache.flink.table.runtime.operators.python.scalar.AbstractRowPythonScalarFunctionOperator;\n+import org.apache.flink.table.runtime.runners.python.scalar.arrow.ArrowPythonScalarFunctionRunner;\n+import org.apache.flink.table.runtime.types.CRow;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.Row;\n+\n+import org.apache.arrow.memory.BufferAllocator;\n+import org.apache.arrow.vector.VectorSchemaRoot;\n+import org.apache.arrow.vector.ipc.ArrowStreamReader;\n+import org.apache.beam.sdk.fn.data.FnDataReceiver;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Arrow Python {@link ScalarFunction} operator for the old planner.\n+ */\n+@Internal\n+public class ArrowPythonScalarFunctionOperator extends AbstractRowPythonScalarFunctionOperator {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Allocator which is used for byte buffer allocation.\n+\t */\n+\tprivate transient BufferAllocator allocator;\n+\n+\t/**\n+\t * Reader which is responsible for deserialize the Arrow format data to the Flink rows.\n+\t */\n+\tprivate transient ArrowReader<Row> arrowReader;\n+\n+\t/**\n+\t * Reader which is responsible for convert the execution result from\n+\t * byte array to arrow format.\n+\t */\n+\tprivate transient ArrowStreamReader reader;\n+\n+\tpublic ArrowPythonScalarFunctionOperator(\n+\t\tConfiguration config,\n+\t\tPythonFunctionInfo[] scalarFunctions,\n+\t\tRowType inputType,\n+\t\tRowType outputType,\n+\t\tint[] udfInputOffsets,\n+\t\tint[] forwardedFields) {\n+\t\tsuper(config, scalarFunctions, inputType, outputType, udfInputOffsets, forwardedFields);\n+\t}\n+\n+\t@Override\n+\tpublic void open() throws Exception {\n+\t\tsuper.open();\n+\t\tallocator = ArrowUtils.ROOT_ALLOCATOR.newChildAllocator(\n+\t\t\t\"reader\", 0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg4NDU5OnYy", "diffSide": "RIGHT", "path": "docs/_includes/generated/python_configuration.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNTo0OVrOFvscsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODowNTo0OVrOFvscsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NTYzMg==", "bodyText": "Rebuild the doc.", "url": "https://github.com/apache/flink/pull/11208#discussion_r385555632", "createdAt": "2020-02-28T08:05:49Z", "author": {"login": "hequn8128"}, "path": "docs/_includes/generated/python_configuration.html", "diffHunk": "@@ -8,6 +8,12 @@\n         </tr>\n     </thead>\n     <tbody>\n+        <tr>\n+            <td><h5>python.fn-execution.arrow.batch.size</h5></td>\n+            <td style=\"word-wrap: break-word;\">1000</td>\n+            <td>Integer</td>\n+            <td>The maximum number of elements to include in an arrow batch for Python user-defined function execution.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31226c452d50eb216796a3c1b963f047bb2c5698"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1011, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}