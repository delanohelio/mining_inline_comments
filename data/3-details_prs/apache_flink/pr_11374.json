{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NTM3MzE2", "number": 11374, "title": "[FLINK-16524][python] Optimize the execution of Python UDF to use generator to eliminate unnecessary function calls", "bodyText": "What is the purpose of the change\nThis pull request will optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls\nBrief change log\n\nAdd PassThroughLengthPrefixCoderImpl and PassThroughLengthPrefixCoder\nChange the result of FlattenRowCoder and ArrowCoder to generator\nChange the func of Operations to map\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nIt is performance improvement feature, so current test is enough\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)\n\nHow does this patch test\nTest Code\n@udf(input_types=[DataTypes.INT(False)], result_type=DataTypes.INT(False))\ndef inc(x):\n    return x\n\nt_env.register_function(\"inc\", inc)\n\n# num_rows = 100000000\nnum_rows = 100000\nnum_columns = 10\n\nselect_list = [\"inc(c%s)\" % i for i in range(num_columns)]\nt_env.register_table_sink(\n    \"sink\",\n    PrintTableSink(\n        [\"c%s\" % i for i in range(num_columns)],\n        [DataTypes.INT(False)] * num_columns))\n\nt_env.from_table_source(MultiRowColumnTableSource(num_rows, num_columns)) \\\n    .select(','.join(select_list)) \\\n    .insert_into(\"sink\")\n\nbeg_time = time.time()\nt_env.execute(\"perf_test\")\nprint(\"consume time: \" + str(time.time() - beg_time))\n\nTest Results\nnum rows, num colums |  Consume Time(Before) | Consume Time(After)\n10kw,1                         |     711s                               |   441s\n10kw,10                       |     1454s                            |   1221s", "createdAt": "2020-03-11T07:59:06Z", "url": "https://github.com/apache/flink/pull/11374", "merged": true, "mergeCommit": {"oid": "d6038cc62f2d04cf078f0ac38cb8bc6fd7d9bb8e"}, "closed": true, "closedAt": "2020-03-13T09:22:43Z", "author": {"login": "HuangXingBo"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMoREOgBqjMxMTkxNDA2Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNMy7RgFqTM3NDE0OTc0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cb59ec4a36dadef3a019d13ea1c17ccb2a1a708", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/9cb59ec4a36dadef3a019d13ea1c17ccb2a1a708", "committedDate": "2020-03-11T07:24:07Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls"}, "afterCommit": {"oid": "359627ab356c0998b9074f9cb062a9f73e4cf730", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/359627ab356c0998b9074f9cb062a9f73e4cf730", "committedDate": "2020-03-11T14:47:29Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/ef45405e3baca296b9acdfb40308276535713fec", "committedDate": "2020-03-12T01:05:15Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "359627ab356c0998b9074f9cb062a9f73e4cf730", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/359627ab356c0998b9074f9cb062a9f73e4cf730", "committedDate": "2020-03-11T14:47:29Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls"}, "afterCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/ef45405e3baca296b9acdfb40308276535713fec", "committedDate": "2020-03-12T01:05:15Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDExMjA4", "url": "https://github.com/apache/flink/pull/11374#pullrequestreview-374011208", "createdAt": "2020-03-13T02:32:45Z", "commit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwMjozMjo0NVrOF11urQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDowMTozOFrOF13AkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5OTE0OQ==", "bodyText": "Could you rename _filed_count to _field_count? It's not directly related to this PR, however it would be great if we can correct the typo as it's used in this PR.", "url": "https://github.com/apache/flink/pull/11374#discussion_r391999149", "createdAt": "2020-03-13T02:32:45Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -51,18 +55,27 @@ def generate_null_mask_search_table():\n \n         return tuple(null_mask)\n \n-    def encode_to_stream(self, value, out_stream, nested):\n-        self.write_null_mask(value, out_stream)\n+    def encode_to_stream(self, iter_value, out_stream, nested):\n         field_coders = self._field_coders\n-        for i in range(self._filed_count):\n-            item = value[i]\n-            if item is not None:\n-                field_coders[i].encode_to_stream(item, out_stream, nested)\n+        data_out_stream = self.data_out_stream\n+        for value in iter_value:\n+            self.write_null_mask(value, data_out_stream)\n+            for i in range(self._filed_count):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwNDQ1Mw==", "bodyText": "rename to _decode_one_row_from_stream?", "url": "https://github.com/apache/flink/pull/11374#discussion_r392004453", "createdAt": "2020-03-13T02:55:56Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -51,18 +55,27 @@ def generate_null_mask_search_table():\n \n         return tuple(null_mask)\n \n-    def encode_to_stream(self, value, out_stream, nested):\n-        self.write_null_mask(value, out_stream)\n+    def encode_to_stream(self, iter_value, out_stream, nested):\n         field_coders = self._field_coders\n-        for i in range(self._filed_count):\n-            item = value[i]\n-            if item is not None:\n-                field_coders[i].encode_to_stream(item, out_stream, nested)\n+        data_out_stream = self.data_out_stream\n+        for value in iter_value:\n+            self.write_null_mask(value, data_out_stream)\n+            for i in range(self._filed_count):\n+                item = value[i]\n+                if item is not None:\n+                    field_coders[i].encode_to_stream(item, data_out_stream, nested)\n+            out_stream.write_var_int64(data_out_stream.size())\n+            out_stream.write(data_out_stream.get())\n+            data_out_stream._clear()\n \n     def decode_from_stream(self, in_stream, nested):\n+        while in_stream.size() > 0:\n+            yield self.create_result(in_stream, nested)\n+\n+    def create_result(self, in_stream: create_InputStream, nested: bool) -> List:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAwOTkxOQ==", "bodyText": "rename to _decode_one_row_from_stream", "url": "https://github.com/apache/flink/pull/11374#discussion_r392009919", "createdAt": "2020-03-13T03:09:35Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -414,5 +446,28 @@ def create_array(s, t):\n         arrays = [create_array(cols[i], self._schema.types[i]) for i in range(0, len(self._schema))]\n         return pa.RecordBatch.from_arrays(arrays, self._schema)\n \n+    def _create_result(self, in_stream: create_InputStream) -> List:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxMDYzNQ==", "bodyText": "Could you help to correct the comments here?\nthere is only arrow batch -> there is only one arrow batch", "url": "https://github.com/apache/flink/pull/11374#discussion_r392010635", "createdAt": "2020-03-13T03:12:59Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -414,5 +446,28 @@ def create_array(s, t):\n         arrays = [create_array(cols[i], self._schema.types[i]) for i in range(0, len(self._schema))]\n         return pa.RecordBatch.from_arrays(arrays, self._schema)\n \n+    def _create_result(self, in_stream: create_InputStream) -> List:\n+        self._resettable_io.set_input_bytes(in_stream.read_all(True))\n+        # there is only arrow batch in the underlying input stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxMjcyOA==", "bodyText": "decode_from_stream(in_stream, False) -> decode_from_stream(in_stream, nested) ?", "url": "https://github.com/apache/flink/pull/11374#discussion_r392012728", "createdAt": "2020-03-13T03:23:41Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coder_impl.py", "diffHunk": "@@ -414,5 +446,28 @@ def create_array(s, t):\n         arrays = [create_array(cols[i], self._schema.types[i]) for i in range(0, len(self._schema))]\n         return pa.RecordBatch.from_arrays(arrays, self._schema)\n \n+    def _create_result(self, in_stream: create_InputStream) -> List:\n+        self._resettable_io.set_input_bytes(in_stream.read_all(True))\n+        # there is only arrow batch in the underlying input stream\n+        table = pa.Table.from_batches([next(self._batch_reader)])\n+        return [c.to_pandas(date_as_object=True) for c in table.itercolumns()]\n+\n     def __repr__(self):\n         return 'ArrowCoderImpl[%s]' % self._schema\n+\n+\n+class CustomLengthPrefixCoderImpl(StreamCoderImpl):\n+    def __init__(self, value_coder):\n+        self._value_coder = value_coder\n+\n+    def encode_to_stream(self, value, out: create_OutputStream, nested: bool) -> Any:\n+        self._value_coder.encode_to_stream(value, out, nested)\n+\n+    def decode_from_stream(self, in_stream: create_InputStream, nested: bool) -> Any:\n+        return self._value_coder.decode_from_stream(in_stream, False)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAxOTM4NQ==", "bodyText": "What about rename it to PassThroughLengthPrefixCoder to reflect that it does nothing for the prefixed length?", "url": "https://github.com/apache/flink/pull/11374#discussion_r392019385", "createdAt": "2020-03-13T03:57:33Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -414,6 +415,25 @@ def __repr__(self):\n         return 'ArrowCoder[%s]' % self._schema\n \n \n+class CustomLengthPrefixCoder(LengthPrefixCoder):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyMDExMw==", "bodyText": "Update the comment as following?\nCoder which doesn't prefix the length of the encoded object as the length prefix will be handled by the wrapped value coder.", "url": "https://github.com/apache/flink/pull/11374#discussion_r392020113", "createdAt": "2020-03-13T04:01:38Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -414,6 +415,25 @@ def __repr__(self):\n         return 'ArrowCoder[%s]' % self._schema\n \n \n+class CustomLengthPrefixCoder(LengthPrefixCoder):\n+    \"\"\"\n+    CustomLengthPrefixCoder will replace LengthPrefixCoder in Beam for performance optimization.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef45405e3baca296b9acdfb40308276535713fec"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfc11390372b448843424824e51a260b366d99a1", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/cfc11390372b448843424824e51a260b366d99a1", "committedDate": "2020-03-13T04:50:09Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls-fix-1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "944a7b2512fafecc560002d417b85f31c6e030dd", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/944a7b2512fafecc560002d417b85f31c6e030dd", "committedDate": "2020-03-13T06:47:08Z", "message": "[FLINK-16524][python] Optimize the result of FlattenRowCoder and ArrowCoder to generator to eliminate unnecessary function calls-fix-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MTQ5NzQ5", "url": "https://github.com/apache/flink/pull/11374#pullrequestreview-374149749", "createdAt": "2020-03-13T09:21:35Z", "commit": {"oid": "944a7b2512fafecc560002d417b85f31c6e030dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2686, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}