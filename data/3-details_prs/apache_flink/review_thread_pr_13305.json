{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzQ0NzU1", "number": 13305, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MDoyMFrOEfllKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMjoyMlrOEf25hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTU3MDM1OnYy", "diffSide": "RIGHT", "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MDoyMFrOHL82Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NjozMlrOHMjLuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA==", "bodyText": "Overall this looks good to me, but I'm just trying to check that this assertion isn't going to be brittle. Is this simply asserting that the actual number of WMs should be at least 20% of the expected number -- which is based on how long the sink was open?", "url": "https://github.com/apache/flink/pull/13305#discussion_r482293318", "createdAt": "2020-09-02T18:40:20Z", "author": {"login": "alpinegizmo"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMyNTMxNg==", "bodyText": "the actual number of WMs should be at least 20% of the expected number -- which is based on how long the sink was open?\n\nYes, exactly. Do you see any ways to improve this? I came up only with artificially slowing down processing - which is also fragile.", "url": "https://github.com/apache/flink/pull/13305#discussion_r482325316", "createdAt": "2020-09-02T19:15:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA=="}, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NjA0MA==", "bodyText": "I would hope that thanks to mailbox this should be quite easily testable with the test harness.\nWhat about testing that some mailbox action is allowed to be executed when the CFRO is closing up and processing some infinite split?", "url": "https://github.com/apache/flink/pull/13305#discussion_r482766040", "createdAt": "2020-09-03T07:30:33Z", "author": {"login": "pnowojski"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA=="}, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjcyMA==", "bodyText": "For the IT test I think it's good enough to see that some meaningful watermarks (i.e., 0 < WM < MAX_WATERMARK) are emitted.", "url": "https://github.com/apache/flink/pull/13305#discussion_r482772720", "createdAt": "2020-09-03T07:41:52Z", "author": {"login": "alpinegizmo"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA=="}, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMTQwMQ==", "bodyText": "What about testing that some mailbox action is allowed to be executed when the CFRO is closing up and processing some infinite split?\n\nI don't see any easy way to\n\nsend END_OF_INPUT to the mocked task; without it, mailbox default action is not suspended and isIdle always returns false\nenqueue an email after calling processElement (solvable, but I think too complex given that it's already tested)", "url": "https://github.com/apache/flink/pull/13305#discussion_r482921401", "createdAt": "2020-09-03T11:56:32Z", "author": {"login": "rkhachatryan"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA=="}, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODQwNzczOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxExecutorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMjoyMlrOHMZa4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMjoyMlrOHMZa4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MTQ0Mg==", "bodyText": "what about adding a unit test for this method? Unit test wouldn't be very useful, but also would be trivial?", "url": "https://github.com/apache/flink/pull/13305#discussion_r482761442", "createdAt": "2020-09-03T07:22:22Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxExecutorImpl.java", "diffHunk": "@@ -57,8 +57,7 @@ public MailboxExecutorImpl(@Nonnull TaskMailbox mailbox, int priority, StreamTas\n \t}\n \n \tpublic boolean isIdle() {\n-\t\treturn !mailboxProcessor.isMailboxLoopRunning() ||\n-\t\t\t(mailboxProcessor.isDefaultActionUnavailable() && !mailbox.hasMail() && mailbox.getState().isAcceptingMails());\n+\t\treturn mailboxProcessor.isDefaultActionUnavailable() && !mailbox.hasMail() && mailbox.getState().isAcceptingMails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 408, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}