{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MTU3NzY5", "number": 11767, "title": "[FLINK-17119][python] Add Cython support for composite types", "bodyText": "What is the purpose of the change\nThis pull request will support complex DataTypes in Cython\nBrief change log\n\nAdd the cython implementation of complex DataTypes\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded ut test in test_fast_coders.py\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-04-16T07:02:49Z", "url": "https://github.com/apache/flink/pull/11767", "merged": true, "mergeCommit": {"oid": "5eaf2b50a63b71be1606bf48713e72d64dfb84a3"}, "closed": true, "closedAt": "2020-04-17T02:03:28Z", "author": {"login": "HuangXingBo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYKciQgH2gAyNDA0MTU3NzY5OjBmNTkxZDRiNmI0YjM0ZmI0ODc1ZTgxM2FhZmM3ODliMzViMGMxZDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYLD5ygFqTM5NDU0NDI0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "committedDate": "2020-04-16T10:50:29Z", "message": "[FLINK-17119][python] Support Composite DataTypes in Cython"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f59cc087b30926d77f3fc208246bcc288bf4f38c", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/f59cc087b30926d77f3fc208246bcc288bf4f38c", "committedDate": "2020-04-16T06:52:19Z", "message": "[FLINK-17119][python] Support Composite DataTypes in Cython"}, "afterCommit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/0f591d4b6b4b34fb4875e813aafc789b35b0c1d2", "committedDate": "2020-04-16T10:50:29Z", "message": "[FLINK-17119][python] Support Composite DataTypes in Cython"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTIwODAz", "url": "https://github.com/apache/flink/pull/11767#pullrequestreview-394520803", "createdAt": "2020-04-16T10:56:30Z", "commit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo1NjozMFrOGGf3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTowNTo1NVrOGGgKKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2NjY3MQ==", "bodyText": "remove the empty line", "url": "https://github.com/apache/flink/pull/11767#discussion_r409466671", "createdAt": "2020-04-16T10:56:30Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pyx", "diffHunk": "@@ -340,6 +444,86 @@ cdef class FlattenRowCoderImpl(StreamCoderImpl):\n             milliseconds = hour * 3600000 + minute * 60000 + seconds * 1000 + microsecond // 1000\n             self._encode_int(milliseconds)\n \n+    cdef void _encode_field_complex(self, TypeName field_type, BaseCoder field_coder, item):\n+        cdef libc.stdint.int32_t nanoseconds, microseconds_of_second, length, row_field_count\n+        cdef libc.stdint.int32_t leading_complete_bytes_num, remaining_bits_num\n+        cdef libc.stdint.int64_t timestamp_milliseconds, timestamp_seconds\n+        cdef BaseCoder value_coder, key_coder\n+        cdef TypeName value_type, key_type\n+        cdef CoderType value_coder_type, key_coder_type\n+        cdef BaseCoder row_field_coder\n+        cdef list row_field_coders, row_value\n+\n+        if field_type == DECIMAL:\n+            # decimal\n+            user_context = decimal.getcontext()\n+            decimal.setcontext((<DecimalCoderImpl> field_coder).context)\n+            bytes_value = str(item.quantize((<DecimalCoderImpl> field_coder).scale_format)).encode(\n+                \"utf-8\")\n+            self._encode_bytes(bytes_value)\n+            decimal.setcontext(user_context)\n+        elif field_type == TIMESTAMP or field_type == LOCAL_ZONED_TIMESTAMP:\n+            # Timestamp\n+            timestamp_seconds = <libc.stdint.int64_t> (\n+                item.replace(tzinfo=datetime.timezone.utc).timestamp())\n+            microseconds_of_second = item.microsecond\n+            timestamp_milliseconds = timestamp_seconds * 1000 + microseconds_of_second // 1000\n+            nanoseconds = microseconds_of_second % 1000 * 1000\n+            if field_coder.is_compact:\n+                self._encode_bigint(timestamp_milliseconds)\n+            else:\n+                self._encode_bigint(timestamp_milliseconds)\n+                self._encode_int(nanoseconds)\n+        elif field_type == ARRAY:\n+            # Array\n+            length = len(item)\n+            value_coder = (<ArrayCoderImpl> field_coder).elem_coder\n+            value_type = value_coder.type_name()\n+            value_coder_type = value_coder.coder_type()\n+            self._encode_int(length)\n+            for i in range(length):\n+                value = item[i]\n+                if value is None:\n+                    self._encode_byte(False)\n+                else:\n+                    self._encode_byte(True)\n+                    self._encode_field(value_coder_type, value_type, value_coder, value)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MDE0Nw==", "bodyText": "inherits TimestampCoderImpl?", "url": "https://github.com/apache/flink/pull/11767#discussion_r409470147", "createdAt": "2020-04-16T11:03:13Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pxd", "diffHunk": "@@ -190,3 +195,24 @@ cdef class DateCoderImpl(BaseCoder):\n \n cdef class TimeCoderImpl(BaseCoder):\n     pass\n+\n+cdef class DecimalCoderImpl(BaseCoder):\n+    cdef readonly object context\n+    cdef readonly object scale_format\n+\n+cdef class TimestampCoderImpl(BaseCoder):\n+    cdef readonly bint is_compact\n+\n+cdef class LocalZonedTimestampCoderImpl(BaseCoder):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTIwOA==", "bodyText": "use _encode_field?", "url": "https://github.com/apache/flink/pull/11767#discussion_r409471208", "createdAt": "2020-04-16T11:05:18Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pyx", "diffHunk": "@@ -143,6 +145,9 @@ cdef class FlattenRowCoderImpl(StreamCoderImpl):\n             if item is not None:\n                 if self._output_coder_type[i] == SIMPLE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTUzMQ==", "bodyText": "use _decode_field", "url": "https://github.com/apache/flink/pull/11767#discussion_r409471531", "createdAt": "2020-04-16T11:05:55Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_coder_impl.pyx", "diffHunk": "@@ -180,6 +185,15 @@ cdef class FlattenRowCoderImpl(StreamCoderImpl):\n             else:\n                 if self._input_coder_type[i] == SIMPLE:\n                     self.row[i] = self._decode_field_simple(self._input_field_type[i])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f591d4b6b4b34fb4875e813aafc789b35b0c1d2"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64600d36a0518019bb02bf80fd4164ca845aa99f", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/64600d36a0518019bb02bf80fd4164ca845aa99f", "committedDate": "2020-04-16T11:21:22Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NTQ0MjQw", "url": "https://github.com/apache/flink/pull/11767#pullrequestreview-394544240", "createdAt": "2020-04-16T11:33:29Z", "commit": {"oid": "64600d36a0518019bb02bf80fd4164ca845aa99f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1813, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}