{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NTkxODQw", "number": 11354, "title": "[FLINK-16512][task] Unaligned checkpoints: API for persistence", "bodyText": "What is the purpose of the change\n(Add an API to save and restore channel state for the unaligned checkpoints)\nBrief change log\n\nadded info classes for InputChannel and ResultSubpartition\nadded info corresponding state handles (interfeces)\nadded info Reader and Writer interfaces\nadded NO_OP implementation\n\nVerifying this change\nThis change is only an API part without any test coverage.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? no", "createdAt": "2020-03-09T13:35:23Z", "url": "https://github.com/apache/flink/pull/11354", "merged": true, "mergeCommit": {"oid": "1ad361b787ad2929b334a72e7f5be944f4fe27af"}, "closed": true, "closedAt": "2020-03-11T04:21:33Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL-68qgFqTM3MTIxNDUyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMUvLEABqjMxMTUzNzk1MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjE0NTI2", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371214526", "createdAt": "2020-03-09T14:10:45Z", "commit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxMDo0NlrOFzqHyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDozMzoxNFrOFzrI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTgxOA==", "bodyText": "nit: add spaces before and after values", "url": "https://github.com/apache/flink/pull/11354#discussion_r389711818", "createdAt": "2020-03-09T14:10:46Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult {HAS_MORE_DATA, NO_MORE_DATA}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMzM3OQ==", "bodyText": "Do we need an enum (vs. a boolean)? Are you planning to expand the values?", "url": "https://github.com/apache/flink/pull/11354#discussion_r389713379", "createdAt": "2020-03-09T14:12:10Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult {HAS_MORE_DATA, NO_MORE_DATA}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTgxOA=="}, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxNDYyOQ==", "bodyText": "How many implementation with no-op close do you expect? I'd assume it's only one and then I'd avoid having it as default implementation.", "url": "https://github.com/apache/flink/pull/11354#discussion_r389714629", "createdAt": "2020-03-09T14:13:19Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult {HAS_MORE_DATA, NO_MORE_DATA}\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t */\n+\tReadResult readInputData(InputChannelInfo info, Buffer buffer);\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.\n+\t */\n+\tReadResult readOutputData(ResultSubpartitionInfo info, Buffer buffer);\n+\n+\t@Override\n+\tdefault void close() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxODgwOQ==", "bodyText": "I'd don't get the idea of having -1 here. Doesn't it make usage more complicated?\nI thought adding the real sequence number would make incremental checkpointing easier (you just need to remember the highest number of the previous checkpoint).", "url": "https://github.com/apache/flink/pull/11354#discussion_r389718809", "createdAt": "2020-03-09T14:19:15Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxOTg2Ng==", "bodyText": "I'd probably not refer to MVP in the code. Noone from outside will know what it means.\nHow about Can be -2 if unknown, which will fail on incremental checkpoint.", "url": "https://github.com/apache/flink/pull/11354#discussion_r389719866", "createdAt": "2020-03-09T14:20:46Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyMDE4MQ==", "bodyText": "start(long)", "url": "https://github.com/apache/flink/pull/11354#discussion_r389720181", "createdAt": "2020-03-09T14:21:12Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDE2MA==", "bodyText": "See comments about addInputData.", "url": "https://github.com/apache/flink/pull/11354#discussion_r389724160", "createdAt": "2020-03-09T14:26:55Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addInputData(long checkpointId, InputChannelInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNDk4OA==", "bodyText": "Could we merge that with finish?\nDo you really want to use Future instead of CompletableFuture?", "url": "https://github.com/apache/flink/pull/11354#discussion_r389724988", "createdAt": "2020-03-09T14:28:08Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addInputData(long checkpointId, InputChannelInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addOutputData(long checkpointId, ResultSubpartitionInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Finalize write of channel state for the given checkpoint id.\n+\t * <p>Must be called after {@link #start}.</p>\n+\t */\n+\tvoid finish(long checkpointId);\n+\n+\t/**\n+\t * <p>Must be called after {@link #finish}.</p>\n+\t */\n+\tFuture<Collection<StateObject>> getWriteCompletionFuture(long checkpointId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNTM0OQ==", "bodyText": "as before: How many implementation with no-op close do you expect? I'd assume it's only one and then I'd avoid having it as default implementation.", "url": "https://github.com/apache/flink/pull/11354#discussion_r389725349", "createdAt": "2020-03-09T14:28:39Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addInputData(long checkpointId, InputChannelInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.\n+\t * <p>Must be called after {@link #start} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer\n+\t *                    It\u2019s intended use is incremental snapshots\n+\t *                    For the restored buffers it should be -1\n+\t *                    For MVP it can always be -2\n+\t *                    If no data is passed it is ignored\n+\t */\n+\tvoid addOutputData(long checkpointId, ResultSubpartitionInfo info, int startSeqNum, Buffer... data);\n+\n+\t/**\n+\t * Finalize write of channel state for the given checkpoint id.\n+\t * <p>Must be called after {@link #start}.</p>\n+\t */\n+\tvoid finish(long checkpointId);\n+\n+\t/**\n+\t * <p>Must be called after {@link #finish}.</p>\n+\t */\n+\tFuture<Collection<StateObject>> getWriteCompletionFuture(long checkpointId);\n+\n+\t@Override\n+\tdefault void close() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODQ5MA==", "bodyText": "It's confusing that we now have InputChannelID and InputChannelInfo. I don't see a good solution though. Similarly, it's a bit of a pity that we cannot reuse this class for ResultSubpartitionInfo (virtually it's the same thing). Maybe @zhijiangW has an idea.", "url": "https://github.com/apache/flink/pull/11354#discussion_r389728490", "createdAt": "2020-03-09T14:33:14Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/InputChannelInfo.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Identifies {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel} in a given subtask.\n+ */\n+@Internal\n+public class InputChannelInfo implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6de2741bb0be1909327e78e95bcd4f954ff32e23", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/6de2741bb0be1909327e78e95bcd4f954ff32e23", "committedDate": "2020-03-09T13:34:24Z", "message": "[FLINK-14551][task] Unaligned checkpoints: API for persistence"}, "afterCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/d4b2376373e740abd59dfe2d18ef31c62857d432", "committedDate": "2020-03-09T19:23:13Z", "message": "[FLINK-14551][task] Unaligned checkpoints: API for persistence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzY4ODk5", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371768899", "createdAt": "2020-03-10T08:55:24Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NToyNFrOF0F9xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NToyNFrOF0F9xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODAwNw==", "bodyText": "nit: intended to use in", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168007", "createdAt": "2020-03-10T08:55:24Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start(long)} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer.\n+\t *                    It\u2019s intended use is incremental snapshots.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzY4OTcy", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371768972", "createdAt": "2020-03-10T08:55:32Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NTozMlrOF0F9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NTozMlrOF0F9_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODA2MQ==", "bodyText": "nit: remove </p>?", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168061", "createdAt": "2020-03-10T08:55:32Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start(long)} and before {@link #finish(long)}.</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzY5MTUw", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371769150", "createdAt": "2020-03-10T08:55:48Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NTo0OFrOF0F-pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NTo0OFrOF0F-pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODIzMA==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168230", "createdAt": "2020-03-10T08:55:48Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult { HAS_MORE_DATA, NO_MORE_DATA }\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t */\n+\tReadResult readInputData(InputChannelInfo info, Buffer buffer);\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzY5MTg5", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371769189", "createdAt": "2020-03-10T08:55:51Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NTo1MlrOF0F-1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODo1NTo1MlrOF0F-1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2ODI3OA==", "bodyText": "nit: seems too long line. Import the package before class or split the lines.", "url": "https://github.com/apache/flink/pull/11354#discussion_r390168278", "createdAt": "2020-03-10T08:55:52Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.\n+\t */\n+\tenum ReadResult { HAS_MORE_DATA, NO_MORE_DATA }\n+\n+\t/**\n+\t * Put data into the supplied buffer to be injected into {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzcyOTM5", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371772939", "createdAt": "2020-03-10T09:01:46Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTowMTo0NlrOF0GKmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTowMTo0NlrOF0GKmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE3MTI4OQ==", "bodyText": "Clarify: Not only for random issue. IntermediateResultPartitionID is for identifying the whole ResultPartition, but we also need to identify the specific ResultSubpartition inside `ResultPartition.", "url": "https://github.com/apache/flink/pull/11354#discussion_r390171289", "createdAt": "2020-03-10T09:01:46Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ResultSubpartitionInfo.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Identifies {@link org.apache.flink.runtime.io.network.partition.ResultSubpartition ResultSubpartition} in a given subtask.\n+ * Note that {@link org.apache.flink.runtime.jobgraph.IntermediateResultPartitionID IntermediateResultPartitionID}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODkzNDQ3", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371893447", "createdAt": "2020-03-10T12:07:05Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjowNzowNVrOF0MEDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjowNzowNVrOF0MEDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NzkxNg==", "bodyText": "Btw, could we extract -1 and -2 as constants?", "url": "https://github.com/apache/flink/pull/11354#discussion_r390267916", "createdAt": "2020-03-10T12:07:05Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Initiate write of channel state for the given checkpoint id.\n+\t */\n+\tvoid start(long checkpointId);\n+\n+\t/**\n+\t * Add in-flight buffers from the {@link org.apache.flink.runtime.io.network.partition.consumer.InputChannel InputChannel}.\n+\t * <p>Must be called after {@link #start(long)} and before {@link #finish(long)}.</p>\n+\t * @param startSeqNum is the sequence number of the 1st passed buffer.\n+\t *                    It\u2019s intended use is incremental snapshots.\n+\t *                    For the restored buffers it should be -1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTEyNjU5", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-371912659", "createdAt": "2020-03-10T12:38:55Z", "commit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4b2376373e740abd59dfe2d18ef31c62857d432", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/d4b2376373e740abd59dfe2d18ef31c62857d432", "committedDate": "2020-03-09T19:23:13Z", "message": "[FLINK-14551][task] Unaligned checkpoints: API for persistence"}, "afterCommit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "committedDate": "2020-03-10T12:48:43Z", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDUxNzU3", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-372051757", "createdAt": "2020-03-10T15:17:14Z", "commit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoxNVrOF0TrFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoxNVrOF0TrFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjU5Nw==", "bodyText": "I am a bit confused of the description rather than received from the upstream or from the operator. I may guess your meaning, but I wonder it might confuse other guys. E.g. for previously spilled input buffers the sequence number should also be -1 during recovery.", "url": "https://github.com/apache/flink/pull/11354#discussion_r390392597", "createdAt": "2020-03-10T15:17:15Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Sequence number for restored buffers (rather than received from the upstream or from the operator).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDUxODIy", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-372051822", "createdAt": "2020-03-10T15:17:18Z", "commit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoxOFrOF0TrQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoxOFrOF0TrQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjY0Mg==", "bodyText": "TBH I am not very clear of the scenarios of unknown, can you explain a bit if possible in the javadoc?", "url": "https://github.com/apache/flink/pull/11354#discussion_r390392642", "createdAt": "2020-03-10T15:17:18Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriter.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint.channel;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.state.StateObject;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+/**\n+ * Writes channel state during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateWriter extends AutoCloseable {\n+\n+\t/**\n+\t * Sequence number for restored buffers (rather than received from the upstream or from the operator).\n+\t */\n+\tint SEQUENCE_NUMBER_RESTORED = -1;\n+\n+\t/**\n+\t * Signifies that buffer sequence number is unknown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDUxOTc3", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-372051977", "createdAt": "2020-03-10T15:17:27Z", "commit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoyN1rOF0TrxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNToxNzoyN1rOF0TrxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5Mjc3Mw==", "bodyText": "nit: ReadResult seems informal. Status of reading result", "url": "https://github.com/apache/flink/pull/11354#discussion_r390392773", "createdAt": "2020-03-10T15:17:27Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateReader.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.apache.flink.runtime.checkpoint.channel;\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+\n+/**\n+ * Reads channel state saved during checkpoint/savepoint.\n+ */\n+@Internal\n+public interface ChannelStateReader extends AutoCloseable {\n+\n+\t/**\n+\t * ReadResult.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDUyOTA1", "url": "https://github.com/apache/flink/pull/11354#pullrequestreview-372052905", "createdAt": "2020-03-10T15:18:26Z", "commit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eaf3193bff523861f2b386276ea805d243761f3", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/3eaf3193bff523861f2b386276ea805d243761f3", "committedDate": "2020-03-10T16:02:37Z", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/28b3738bd1b66d39ba7899caa98cb3a3dc1cba93", "committedDate": "2020-03-10T12:48:43Z", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence"}, "afterCommit": {"oid": "3eaf3193bff523861f2b386276ea805d243761f3", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/3eaf3193bff523861f2b386276ea805d243761f3", "committedDate": "2020-03-10T16:02:37Z", "message": "[FLINK-16512][task] Unaligned checkpoints: API for persistence"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3190, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}