{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3Njc2OTc3", "number": 11869, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1NjowMlrOD1n3dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMToyMDoyMlrOD1uYdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTU0Mjk0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableEnvironment.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1NjowMlrOGLJR5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjo1NjowMlrOGLJR5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzOTU1Nw==", "bodyText": "add @see #listTemporaryViews()", "url": "https://github.com/apache/flink/pull/11869#discussion_r414339557", "createdAt": "2020-04-24T06:56:02Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableEnvironment.java", "diffHunk": "@@ -756,6 +756,13 @@ default Table fromValues(DataType rowType, Object... values) {\n \t */\n \tString[] listTables();\n \n+\t/**\n+\t * Gets the names of all views available in the current namespace (the current database of the current catalog).\n+\t * It returns both temporary and permanent views.\n+\t * @return A list of the names of all registered views in the current database of the current catalog.\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425e26536e512e5fec88852a462fdf88e6e1a562"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTU2OTQzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/CatalogManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowMzo0NlrOGLJg1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMToyMzo0MFrOGLTFNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0MzM4MQ==", "bodyText": "add a method listTemporaryViews(String catalogName, String databaseName), listTemporaryViews() method and here can use this method", "url": "https://github.com/apache/flink/pull/11869#discussion_r414343381", "createdAt": "2020-04-24T07:03:46Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/CatalogManager.java", "diffHunk": "@@ -415,6 +415,37 @@ public CatalogBaseTable getTable() {\n \t\t\t});\n \t}\n \n+\t/**\n+\t * Returns an array of names of all views(both temporary and permanent) registered in\n+\t * the namespace of the current catalog and database.\n+\t *\n+\t * @return names of all registered views\n+\t */\n+\tpublic Set<String> listViews() {\n+\t\treturn listViews(getCurrentCatalog(), getCurrentDatabase());\n+\t}\n+\n+\t/**\n+\t * Returns an array of names of all views(both temporary and permanent) registered in\n+\t * the namespace of the current catalog and database.\n+\t *\n+\t * @return names of registered views\n+\t */\n+\tpublic Set<String> listViews(String catalogName, String databaseName) {\n+\t\tCatalog currentCatalog = catalogs.get(getCurrentCatalog());\n+\n+\t\ttry {\n+\t\t\treturn Stream.concat(\n+\t\t\t\tcurrentCatalog.listViews(getCurrentDatabase()).stream(),\n+\t\t\t\tlistTemporaryTablesInternal(catalogName, databaseName)\n+\t\t\t\t\t.filter(e -> e.getValue() instanceof CatalogView)\n+\t\t\t\t\t.map(e -> e.getKey().getObjectName())\n+\t\t\t).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425e26536e512e5fec88852a462fdf88e6e1a562"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwODE2Mg==", "bodyText": "IMO the private listTemporaryTablesInternal is enough. or we should add listTemporaryTables(String catalogName, String databaseName) for listTemporaryTables(). That's  probably a bit superfluous.", "url": "https://github.com/apache/flink/pull/11869#discussion_r414408162", "createdAt": "2020-04-24T08:51:55Z", "author": {"login": "docete"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/CatalogManager.java", "diffHunk": "@@ -415,6 +415,37 @@ public CatalogBaseTable getTable() {\n \t\t\t});\n \t}\n \n+\t/**\n+\t * Returns an array of names of all views(both temporary and permanent) registered in\n+\t * the namespace of the current catalog and database.\n+\t *\n+\t * @return names of all registered views\n+\t */\n+\tpublic Set<String> listViews() {\n+\t\treturn listViews(getCurrentCatalog(), getCurrentDatabase());\n+\t}\n+\n+\t/**\n+\t * Returns an array of names of all views(both temporary and permanent) registered in\n+\t * the namespace of the current catalog and database.\n+\t *\n+\t * @return names of registered views\n+\t */\n+\tpublic Set<String> listViews(String catalogName, String databaseName) {\n+\t\tCatalog currentCatalog = catalogs.get(getCurrentCatalog());\n+\n+\t\ttry {\n+\t\t\treturn Stream.concat(\n+\t\t\t\tcurrentCatalog.listViews(getCurrentDatabase()).stream(),\n+\t\t\t\tlistTemporaryTablesInternal(catalogName, databaseName)\n+\t\t\t\t\t.filter(e -> e.getValue() instanceof CatalogView)\n+\t\t\t\t\t.map(e -> e.getKey().getObjectName())\n+\t\t\t).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0MzM4MQ=="}, "originalCommit": {"oid": "425e26536e512e5fec88852a462fdf88e6e1a562"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUwMDE0OA==", "bodyText": "listTemporaryTablesInternal already exists", "url": "https://github.com/apache/flink/pull/11869#discussion_r414500148", "createdAt": "2020-04-24T11:23:40Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/catalog/CatalogManager.java", "diffHunk": "@@ -415,6 +415,37 @@ public CatalogBaseTable getTable() {\n \t\t\t});\n \t}\n \n+\t/**\n+\t * Returns an array of names of all views(both temporary and permanent) registered in\n+\t * the namespace of the current catalog and database.\n+\t *\n+\t * @return names of all registered views\n+\t */\n+\tpublic Set<String> listViews() {\n+\t\treturn listViews(getCurrentCatalog(), getCurrentDatabase());\n+\t}\n+\n+\t/**\n+\t * Returns an array of names of all views(both temporary and permanent) registered in\n+\t * the namespace of the current catalog and database.\n+\t *\n+\t * @return names of registered views\n+\t */\n+\tpublic Set<String> listViews(String catalogName, String databaseName) {\n+\t\tCatalog currentCatalog = catalogs.get(getCurrentCatalog());\n+\n+\t\ttry {\n+\t\t\treturn Stream.concat(\n+\t\t\t\tcurrentCatalog.listViews(getCurrentDatabase()).stream(),\n+\t\t\t\tlistTemporaryTablesInternal(catalogName, databaseName)\n+\t\t\t\t\t.filter(e -> e.getValue() instanceof CatalogView)\n+\t\t\t\t\t.map(e -> e.getKey().getObjectName())\n+\t\t\t).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0MzM4MQ=="}, "originalCommit": {"oid": "425e26536e512e5fec88852a462fdf88e6e1a562"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTU4NDQwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/api/batch/BatchTableEnvironmentTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowNzo1MlrOGLJpPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowNzo1MlrOGLJpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTUzNQ==", "bodyText": "add a test \"CREATE TEMPORARY VIEW ...\"", "url": "https://github.com/apache/flink/pull/11869#discussion_r414345535", "createdAt": "2020-04-24T07:07:52Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/api/batch/BatchTableEnvironmentTest.scala", "diffHunk": "@@ -257,6 +257,64 @@ class BatchTableEnvironmentTest extends TableTestBase {\n     util.tableEnv.executeSql(\"select * from MyTable\")\n   }\n \n+  @Test\n+  def testExecuteSqlWithCreateDropView(): Unit = {\n+    val util = batchTestUtil()\n+\n+    val createTableStmt =\n+      \"\"\"\n+        |CREATE TABLE tbl1 (\n+        |  a bigint,\n+        |  b int,\n+        |  c varchar\n+        |) with (\n+        |  'connector' = 'COLLECTION',\n+        |  'is-bounded' = 'true'\n+        |)\n+      \"\"\".stripMargin\n+    val tableResult1 = util.tableEnv.executeSql(createTableStmt)\n+    assertEquals(ResultKind.SUCCESS, tableResult1.getResultKind)\n+    assertTrue(util.tableEnv.getCatalog(util.tableEnv.getCurrentCatalog).get()\n+      .tableExists(ObjectPath.fromString(s\"${util.tableEnv.getCurrentDatabase}.tbl1\")))\n+\n+    val tableResult2 = util.tableEnv.executeSql(\"CREATE VIEW view1 AS SELECT * FROM tbl1\")\n+    assertEquals(ResultKind.SUCCESS, tableResult2.getResultKind)\n+    assertTrue(util.tableEnv.getCatalog(util.tableEnv.getCurrentCatalog).get()\n+      .tableExists(ObjectPath.fromString(s\"${util.tableEnv.getCurrentDatabase}.view1\")))\n+\n+    val tableResult3 = util.tableEnv.executeSql(\"DROP VIEW view1\")\n+    assertEquals(ResultKind.SUCCESS, tableResult3.getResultKind)\n+    assertFalse(util.tableEnv.getCatalog(util.tableEnv.getCurrentCatalog).get()\n+      .tableExists(ObjectPath.fromString(s\"${util.tableEnv.getCurrentDatabase}.view1\")))\n+  }\n+\n+  @Test\n+  def testExecuteSqlWithShowViews(): Unit = {\n+    val util = batchTestUtil()\n+    val createTableStmt =\n+      \"\"\"\n+        |CREATE TABLE tbl1 (\n+        |  a bigint,\n+        |  b int,\n+        |  c varchar\n+        |) with (\n+        |  'connector' = 'COLLECTION',\n+        |  'is-bounded' = 'false'\n+        |)\n+      \"\"\".stripMargin\n+    val tableResult1 = util.tableEnv.executeSql(createTableStmt)\n+    assertEquals(ResultKind.SUCCESS, tableResult1.getResultKind)\n+\n+    val tableResult2 = util.tableEnv.executeSql(\"CREATE VIEW view1 AS SELECT * FROM tbl1\")\n+    assertEquals(ResultKind.SUCCESS, tableResult2.getResultKind)\n+\n+    val tableResult3 = util.tableEnv.executeSql(\"SHOW VIEWS\")\n+    assertEquals(ResultKind.SUCCESS_WITH_CONTENT, tableResult3.getResultKind)\n+    checkData(\n+      util.tableEnv.listViews().map(Row.of(_)).toList.asJava.iterator(),\n+      tableResult3.collect())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425e26536e512e5fec88852a462fdf88e6e1a562"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTU5MDc1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/table/tests/test_environment_completeness.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowOTo0MFrOGLJs8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowOTo0MFrOGLJs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NjQ4MA==", "bodyText": "remove this, and we should support list_views in table_environment.py", "url": "https://github.com/apache/flink/pull/11869#discussion_r414346480", "createdAt": "2020-04-24T07:09:40Z", "author": {"login": "godfreyhe"}, "path": "flink-python/pyflink/table/tests/test_environment_completeness.py", "diffHunk": "@@ -50,7 +50,8 @@ def excluded_methods(cls):\n             'createFunction',\n             'dropFunction',\n             'createTemporaryFunction',\n-            'dropTemporaryFunction'}\n+            'dropTemporaryFunction',\n+            'listViews'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425e26536e512e5fec88852a462fdf88e6e1a562"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjYxMDQ1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/table/table_environment.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMToyMDoyMlrOGLS-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMToyMDoyMlrOGLS-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ5ODMwNw==", "bodyText": "add \"It returns both temporary and permanent views.\"", "url": "https://github.com/apache/flink/pull/11869#discussion_r414498307", "createdAt": "2020-04-24T11:20:22Z", "author": {"login": "godfreyhe"}, "path": "flink-python/pyflink/table/table_environment.py", "diffHunk": "@@ -345,14 +345,24 @@ def list_databases(self):\n \n     def list_tables(self):\n         \"\"\"\n-        Gets the names of all tables in the current database of the current catalog.\n+        Gets the names of all tables and views in the current database of the current catalog.\n \n-        :return: List of table names in the current database of the current catalog.\n+        :return: List of table and view names in the current database of the current catalog.\n         :rtype: list[str]\n         \"\"\"\n         j_table_name_array = self._j_tenv.listTables()\n         return [item for item in j_table_name_array]\n \n+    def list_views(self):\n+        \"\"\"\n+        Gets the names of all views in the current database of the current catalog.\n+\n+        :return: List of view names in the current database of the current catalog.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a602abb4a2d51262c393a373aa13cb4875b4a7f5"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1571, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}