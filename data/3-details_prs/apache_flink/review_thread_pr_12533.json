{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjcwMDE5", "number": 12533, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozOTo1MVrOED8c7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NjoyMVrOED8n9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTcxNjI5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozOTo1MVrOGhQsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyMjo1MVrOGhUuQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTYzNw==", "bodyText": "We cannot rely on external logging in BashJavaUtils.\nThe logs have to be forced into the stdout independently from logging config to pass them to FLINK_INHERITED_LOGS env var which is used by the main Flink process to log on its startup.", "url": "https://github.com/apache/flink/pull/12533#discussion_r437529637", "createdAt": "2020-06-09T15:39:51Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -39,6 +45,7 @@\n  * Utility class for using java utilities in bash scripts.\n  */\n public class BashJavaUtils {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(BashJavaUtils.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MTk1Mw==", "bodyText": "It works though? All logging output goes to stdout, and the configuration things are split out based on a prefix. Everything else is treated as logging output; see flink-dist/src/main/flink-bin/bin/config.sh:extractLoggingOutputs()", "url": "https://github.com/apache/flink/pull/12533#discussion_r437541953", "createdAt": "2020-06-09T15:56:24Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -39,6 +45,7 @@\n  * Utility class for using java utilities in bash scripts.\n  */\n public class BashJavaUtils {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(BashJavaUtils.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTYzNw=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NTcxMw==", "bodyText": "oh, we actually rely on default log config to output to stdout, sorry for confusion", "url": "https://github.com/apache/flink/pull/12533#discussion_r437595713", "createdAt": "2020-06-09T17:22:51Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -39,6 +45,7 @@\n  * Utility class for using java utilities in bash scripts.\n  */\n public class BashJavaUtils {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(BashJavaUtils.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyOTYzNw=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTczNTA4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDowOFrOGhQ4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzoyNDo1NVrOGhUyzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjc2NQ==", "bodyText": "This might be a bit tedious but I think it would be really cool to output this info in the format we use in JavaDocs for TaskExecutorProcessSpec if it works. Same for JM.", "url": "https://github.com/apache/flink/pull/12533#discussion_r437532765", "createdAt": "2020-06-09T15:44:08Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU0MDE4NA==", "bodyText": "that may be a bit overkill imo; I went more for a concise version.", "url": "https://github.com/apache/flink/pull/12533#discussion_r437540184", "createdAt": "2020-06-09T15:53:46Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjc2NQ=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5Njg3OA==", "bodyText": "it is the same, just a bit more schematic, ok, maybe it can be even less readable under certain fonts or so.", "url": "https://github.com/apache/flink/pull/12533#discussion_r437596878", "createdAt": "2020-06-09T17:24:55Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMjc2NQ=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTczNzEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDo0MFrOGhQ5yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNzozMDo0NFrOGhVAwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n          \n          \n            \n            \t\tLOG.info(\"      JVM Heap:         {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "url": "https://github.com/apache/flink/pull/12533#discussion_r437533130", "createdAt": "2020-06-09T15:44:40Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU5NzkxMw==", "bodyText": "I think we do not use Total for heap in docs, mostly JVM Heap", "url": "https://github.com/apache/flink/pull/12533#discussion_r437597913", "createdAt": "2020-06-09T17:26:37Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzEzMA=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzYwMDQ1MA==", "bodyText": "Although, I am also ok with Total, I would add JVM at least to align terminology more with docs.", "url": "https://github.com/apache/flink/pull/12533#discussion_r437600450", "createdAt": "2020-06-09T17:30:44Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzEzMA=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTczODQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NDo1OVrOGhQ6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMDowMjowMVrOGht7GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzM2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tLOG.info(\"      Total Heap Memory:     {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n          \n          \n            \n            \t\tLOG.info(\"      JVM Heap Memory:     {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "url": "https://github.com/apache/flink/pull/12533#discussion_r437533360", "createdAt": "2020-06-09T15:44:59Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory:      {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory:      {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Total Heap Memory:     {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwMDY5MA==", "bodyText": "I always used Total if there are sub components. Not sure if it is necessary, but I'd probably remove either all or none.", "url": "https://github.com/apache/flink/pull/12533#discussion_r438000690", "createdAt": "2020-06-10T09:48:48Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory:      {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory:      {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Total Heap Memory:     {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzM2MA=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAwODYwMQ==", "bodyText": "Then I would prefer to keep both, at least JVM to make it more like what we use in docs.", "url": "https://github.com/apache/flink/pull/12533#discussion_r438008601", "createdAt": "2020-06-10T10:02:01Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory:      {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory:      {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Total Heap Memory:     {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzMzM2MA=="}, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTc0NDU1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NjoyMVrOGhQ-pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTo0NjoyMVrOGhQ-pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUzNDM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tLOG.info(\"        Total Direct Memory: {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n          \n          \n            \n            \t\tLOG.info(\"        JVM Direct Memory: {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());", "url": "https://github.com/apache/flink/pull/12533#discussion_r437534372", "createdAt": "2020-06-09T15:46:21Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/bash/BashJavaUtils.java", "diffHunk": "@@ -92,9 +102,42 @@ public static void main(String[] args) throws FlinkException {\n \t\tJobManagerProcessSpec jobManagerProcessSpec = JobManagerProcessUtils.processSpecFromConfigWithNewOptionToInterpretLegacyHeap(\n \t\t\tconfiguration,\n \t\t\tJobManagerOptions.JVM_HEAP_MEMORY);\n+\n+\t\tlogMasterConfiguration(jobManagerProcessSpec);\n+\n \t\treturn Collections.singletonList(ProcessMemoryUtils.generateJvmParametersStr(jobManagerProcessSpec));\n \t}\n \n+\tprivate static void logMasterConfiguration(JobManagerProcessSpec spec) {\n+\t\tJobManagerFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tLOG.info(\"Final Master Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory: {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory: {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Heap:             {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Off-heap:         {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Metaspace:      {}\", spec.getJvmMetaspaceSize().toHumanReadableString());\n+\t\tLOG.info(\"    JVM Overhead:       {}\", spec.getJvmOverheadSize().toHumanReadableString());\n+\t}\n+\n+\tprivate static void logTaskExecutorConfiguration(TaskExecutorProcessSpec spec) {\n+\t\tTaskExecutorFlinkMemory flinkMemory = spec.getFlinkMemory();\n+\t\tMemorySize totalOffHeapMemory = flinkMemory.getManaged().add(flinkMemory.getJvmDirectMemorySize());\n+\t\tLOG.info(\"Final TaskExecutor Memory configuration:\");\n+\t\tLOG.info(\"  Total Process Memory:      {}\", spec.getTotalProcessMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"    Total Flink Memory:      {}\", flinkMemory.getTotalFlinkMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"      Total Heap Memory:     {}\", flinkMemory.getJvmHeapMemorySize().toHumanReadableString());\n+\t\tLOG.info(\"        Framework:           {}\", flinkMemory.getFrameworkHeap().toHumanReadableString());\n+\t\tLOG.info(\"        Task:                {}\", flinkMemory.getTaskHeap().toHumanReadableString());\n+\t\tLOG.info(\"      Total Off-heap Memory: {}\", totalOffHeapMemory.toHumanReadableString());\n+\t\tLOG.info(\"        Managed:             {}\", flinkMemory.getManaged().toHumanReadableString());\n+\t\tLOG.info(\"        Total Direct Memory: {}\", flinkMemory.getJvmDirectMemorySize().toHumanReadableString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d12c7773ea58fa0fae03312d903bad263ab86ef"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4344, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}