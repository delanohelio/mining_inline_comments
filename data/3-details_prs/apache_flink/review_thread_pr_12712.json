{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODY2Mjg3", "number": 12712, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODowMDo1NlrOEHB17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMDoyNjowNFrOEHQz4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODA1Njc3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODowMDo1NlrOGmL22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNToyMToyOFrOGmYlgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MzMzNg==", "bodyText": "Please add a comment on this:\n// FLINK-17544: There should be no NPE thrown from this method", "url": "https://github.com/apache/flink/pull/12712#discussion_r442693336", "createdAt": "2020-06-19T08:00:56Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "diffHunk": "@@ -64,6 +64,19 @@ public void setup() {\n \t\tkeyFields = new String[]{\"id\"};\n \t}\n \n+\t@Test\n+\tpublic void testUpsertFormatCloseBeforeOpen() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\t\tJdbcDmlOptions dmlOptions = JdbcDmlOptions.builder()\n+\t\t\t.withTableName(options.getTableName()).withDialect(options.getDialect())\n+\t\t\t.withFieldNames(fieldNames).withKeyFields(keyFields).build();\n+\t\tformat = new TableJdbcUpsertOutputFormat(new SimpleJdbcConnectionProvider(options), dmlOptions, JdbcExecutionOptions.defaults());\n+\t\tformat.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwMTg5MQ==", "bodyText": "Ok. I will fix it.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442901891", "createdAt": "2020-06-19T15:21:28Z", "author": {"login": "fsk119"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "diffHunk": "@@ -64,6 +64,19 @@ public void setup() {\n \t\tkeyFields = new String[]{\"id\"};\n \t}\n \n+\t@Test\n+\tpublic void testUpsertFormatCloseBeforeOpen() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\t\tJdbcDmlOptions dmlOptions = JdbcDmlOptions.builder()\n+\t\t\t.withTableName(options.getTableName()).withDialect(options.getDialect())\n+\t\t\t.withFieldNames(fieldNames).withKeyFields(keyFields).build();\n+\t\tformat = new TableJdbcUpsertOutputFormat(new SimpleJdbcConnectionProvider(options), dmlOptions, JdbcExecutionOptions.defaults());\n+\t\tformat.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY5MzMzNg=="}, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc0Mzk2OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoxMTo1NFrOGmSnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNToyNDo0NlrOGmYsPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDAwOA==", "bodyText": "Mockito is a bad practice which should be avoided as much as possible. You can\nJdbcExecutionOptions jdbcExecutionOptions = JdbcExecutionOptions.builder()\n\t\t\t.withBatchIntervalMs(1000_000L)\n\t\t\t.withBatchSize(1)\n\t\t\t.withMaxRetries(1)\n\t\t\t.build();\nExecutionConfig executionConfig = new ExecutionConfig();\nto create them.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442804008", "createdAt": "2020-06-19T12:11:54Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDI3Mg==", "bodyText": "I suggest to suse 1000s for the interval and 1 for the batch to quickly throw the exception and avoid a async exception.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442804272", "createdAt": "2020-06-19T12:12:37Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDAwOA=="}, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwMzYxMg==", "bodyText": "If we want to use scheduler in batchingOutputFormat, we have to set the batchsize larger than 1.  So I think we setting batsize 2 is better.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442903612", "createdAt": "2020-06-19T15:24:46Z", "author": {"login": "fsk119"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNDAwOA=="}, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc1MTk1OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoxNToxMVrOGmSsQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNToyNToyNFrOGmYtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNTMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t} catch (Exception e) {\n          \n          \n            \n            \t\t\ttry {\n          \n          \n            \n            \t\t\t\tformat.close();\n          \n          \n            \n            \t\t\t} catch (Exception realException){\n          \n          \n            \n            \t\t\t\tConnection connection = format.getConnection();\n          \n          \n            \n            \t\t\t\tif (connection != null && !connection.isClosed()){\n          \n          \n            \n            \t\t\t\t\tthrow new RuntimeException(\"Resource leak!\");\n          \n          \n            \n            \t\t\t\t}\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}\n          \n          \n            \n            } catch (Exception e) {\n          \n          \n            \n            \t\t\t// artifact failure\n          \n          \n            \n            \t\t\tformat.close();\n          \n          \n            \n            \t\t} finally {\n          \n          \n            \n            \t\t\tassertNull(format.getConnection());\n          \n          \n            \n            \t\t}", "url": "https://github.com/apache/flink/pull/12712#discussion_r442805312", "createdAt": "2020-06-19T12:15:11Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();\n+\t\t// always throw Exception to trigger close() method\n+\t\tdoThrow(SQLException.class).when(executor).executeBatch();\n+\n+\t\tJdbcBatchingOutputFormat<Tuple2<Boolean, Row>, Row, JdbcBatchStatementExecutor<Row>> format =\n+\t\t\tnew JdbcBatchingOutputFormat<>(\n+\t\t\t\tnew SimpleJdbcConnectionProvider(options),\n+\t\t\t\tjdbcExecutionOptions,\n+\t\t\t\t(ctx) -> executor,\n+\t\t\t\t(tuple2) -> tuple2.f1);\n+\n+\t\tformat.setRuntimeContext(context);\n+\t\tformat.open(0, 1);\n+\n+\t\ttry {\n+\t\t\tfor (JdbcTestFixture.TestEntry entry : TEST_DATA) {\n+\t\t\t\tformat.writeRecord(Tuple2.of(true, toRow(entry)));\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\ttry {\n+\t\t\t\tformat.close();\n+\t\t\t} catch (Exception realException){\n+\t\t\t\tConnection connection = format.getConnection();\n+\t\t\t\tif (connection != null && !connection.isClosed()){\n+\t\t\t\t\tthrow new RuntimeException(\"Resource leak!\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwMzk3OQ==", "bodyText": "It's much better than my origin code. Thanks.", "url": "https://github.com/apache/flink/pull/12712#discussion_r442903979", "createdAt": "2020-06-19T15:25:24Z", "author": {"login": "fsk119"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcFullTest.java", "diffHunk": "@@ -104,6 +107,52 @@ public void testEnrichedClassCastException() {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testJdbcBatchingOutputFormatCloseDuringRuntime() throws Exception{\n+\t\tJdbcOptions options = JdbcOptions.builder()\n+\t\t\t.setDBUrl(getDbMetadata().getUrl())\n+\t\t\t.setTableName(OUTPUT_TABLE)\n+\t\t\t.build();\n+\n+\t\tRuntimeContext context = Mockito.mock(RuntimeContext.class);\n+\t\tExecutionConfig executionConfig = Mockito.mock(ExecutionConfig.class);\n+\t\tJdbcExecutionOptions jdbcExecutionOptions = Mockito.mock(JdbcExecutionOptions.class);\n+\t\tJdbcBatchStatementExecutor executor = Mockito.mock(JdbcBatchStatementExecutor.class);\n+\n+\t\tdoReturn(executionConfig).when(context).getExecutionConfig();\n+\t\t// use scheduledThreadPool\n+\t\tdoReturn(500L).when(jdbcExecutionOptions).getBatchIntervalMs();\n+\t\tdoReturn(2).when(jdbcExecutionOptions).getBatchSize();\n+\t\tdoReturn(3).when(jdbcExecutionOptions).getMaxRetries();\n+\t\t// always throw Exception to trigger close() method\n+\t\tdoThrow(SQLException.class).when(executor).executeBatch();\n+\n+\t\tJdbcBatchingOutputFormat<Tuple2<Boolean, Row>, Row, JdbcBatchStatementExecutor<Row>> format =\n+\t\t\tnew JdbcBatchingOutputFormat<>(\n+\t\t\t\tnew SimpleJdbcConnectionProvider(options),\n+\t\t\t\tjdbcExecutionOptions,\n+\t\t\t\t(ctx) -> executor,\n+\t\t\t\t(tuple2) -> tuple2.f1);\n+\n+\t\tformat.setRuntimeContext(context);\n+\t\tformat.open(0, 1);\n+\n+\t\ttry {\n+\t\t\tfor (JdbcTestFixture.TestEntry entry : TEST_DATA) {\n+\t\t\t\tformat.writeRecord(Tuple2.of(true, toRow(entry)));\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\ttry {\n+\t\t\t\tformat.close();\n+\t\t\t} catch (Exception realException){\n+\t\t\t\tConnection connection = format.getConnection();\n+\t\t\t\tif (connection != null && !connection.isClosed()){\n+\t\t\t\t\tthrow new RuntimeException(\"Resource leak!\");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNTMxMg=="}, "originalCommit": {"oid": "539beaaef6b373b0b6a4979294a593cb9a0fb939"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDUwOTEyOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMDoyNjowNFrOGmjs0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMTozODo1MFrOGmkGSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Mzk4Ng==", "bodyText": "I think this comment should be belong to format.close().", "url": "https://github.com/apache/flink/pull/12712#discussion_r443083986", "createdAt": "2020-06-20T00:26:04Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "diffHunk": "@@ -66,6 +66,7 @@ public void setup() {\n \n \t@Test\n \tpublic void testUpsertFormatCloseBeforeOpen() throws Exception{\n+\t\t// FLINK-17544: There should be no NPE thrown from this method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c562cbba8de09ac1cd4b8f42dcbcd7319b95558f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MDUwNQ==", "bodyText": "OK. I have modified it.", "url": "https://github.com/apache/flink/pull/12712#discussion_r443090505", "createdAt": "2020-06-20T01:38:50Z", "author": {"login": "fsk119"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/internal/JdbcTableOutputFormatTest.java", "diffHunk": "@@ -66,6 +66,7 @@ public void setup() {\n \n \t@Test\n \tpublic void testUpsertFormatCloseBeforeOpen() throws Exception{\n+\t\t// FLINK-17544: There should be no NPE thrown from this method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4Mzk4Ng=="}, "originalCommit": {"oid": "c562cbba8de09ac1cd4b8f42dcbcd7319b95558f"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4209, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}