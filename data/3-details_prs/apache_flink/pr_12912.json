{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDY2MTE5", "number": 12912, "title": "[FLINK-18595][network] Fix the deadlock issue by task thread and canceler thread in RemoteInputChannel", "bodyText": "What is the purpose of the change\nAssuming two remote channels as listeners in LocalBufferPool, the deadlock happens as follows:\n\n\nWhile the Canceler thread calling ch1#releaseAllResources, it will occupy the bufferQueue lock and try to call ch2#notifyBufferAvailable.\n\n\nWhile task thread exiting to call CachedBufferStorage#close, it might release exclusive buffers for ch2. Then ch2 will occupy the bufferQueue lock and try to call ch1#notifyBufferAvailable.\n\n\nch1 and ch2 will both occupy self bufferQueue lock and wait for other side's bufferQueue lock to cause deadlock.\n\n\nRegarding the solution, we can check the released state outside of bufferQueue lock in RemoteInputChannel#notifyBufferAvailable to return immediately.\nBrief change log\n\nCheck the isReleased state before entering synchronized in RemoteInputChannel#notifyBufferAvailable\n\nVerifying this change\nBy the failure StreamFaultToleranceTestBase\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-07-16T10:02:22Z", "url": "https://github.com/apache/flink/pull/12912", "merged": true, "mergeCommit": {"oid": "e2686808b22563871513582fb82700c63e1c1fd4"}, "closed": true, "closedAt": "2020-07-28T06:19:52Z", "author": {"login": "zhijiangW"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1cNsXAH2gAyNDUwMDY2MTE5OjM1NmU1NjQ2Zjc5Yzg2NGEyODNiMGExZjU4ZmRkODMzOTkzMmZkNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5DOFiAFqTQ1NTg3MTExNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/356e5646f79c864a283b0a1f58fdd8339932fd68", "committedDate": "2020-07-16T09:56:22Z", "message": "[FLINK-18595][network] Fix the deadlock issue by task thread and canceler thread in RemoteInputChannel\n\nAssuming two remote channels as listeners in LocalBufferPool, the deadlock happens as follows\n1. While the Canceler thread calling ch1#releaseAllResources, it will occupy the bufferQueue lock and try to call ch2#notifyBufferAvailable.\n2. While task thread exiting to call CachedBufferStorage#close, it might release exclusive buffers for ch2. Then ch2 will occupy the bufferQueue\nlock and try to call ch1#notifyBufferAvailable.\n3. ch1 and ch2 will both occupy self bufferQueue lock and wait for other side's bufferQueue lock to cause deadlock.\n\nRegarding the solution, we can check the released state outside of bufferQueue lock in RemoteInputChannel#notifyBufferAvailable to return immediately."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzIwMTQz", "url": "https://github.com/apache/flink/pull/12912#pullrequestreview-450720143", "createdAt": "2020-07-17T14:46:38Z", "commit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0NjozOVrOGzV4aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0NjozOVrOGzV4aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTA2Nw==", "bodyText": "Before the change, if channel isReleased then we also set isWaitingForFloatingBuffers to false below.\nI'm not sure that leaving it as true would be correct.\nWDYT?", "url": "https://github.com/apache/flink/pull/12912#discussion_r456489067", "createdAt": "2020-07-17T14:46:39Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -356,6 +356,13 @@ public Buffer getNextReceivedBuffer() {\n \t@Override\n \tpublic NotificationResult notifyBufferAvailable(Buffer buffer) {\n \t\tNotificationResult notificationResult = NotificationResult.BUFFER_NOT_USED;\n+\t\t// Two remote channels might call this method mutually by task thread and canceller thread concurrently.\n+\t\t// To avoid deadlock issue we can check the released state to return immediately before synchronizing.\n+\t\t// See FLINK-18595 for details.\n+\t\tif (isReleased.get()) {\n+\t\t\treturn notificationResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1ODcxMTE0", "url": "https://github.com/apache/flink/pull/12912#pullrequestreview-455871114", "createdAt": "2020-07-27T15:04:52Z", "commit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2877, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}