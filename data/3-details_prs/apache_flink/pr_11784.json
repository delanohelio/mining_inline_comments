{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0ODg2MTE3", "number": 11784, "title": "[FLINK-17120][python] Add Cython support for operations", "bodyText": "What is the purpose of the change\nThis pull request will add cython support for operations\nBrief change log\n\nAdd cython implementation of operations in fast_operations.pyx and corresponding pxd\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nIt will be tested in previous IT case in test_udf.py and test_udtf.py\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-04-17T02:26:39Z", "url": "https://github.com/apache/flink/pull/11784", "merged": true, "mergeCommit": {"oid": "6b80935b28756122cb43053494abd765a1508934"}, "closed": true, "closedAt": "2020-04-21T03:23:04Z", "author": {"login": "HuangXingBo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYaGlHgFqTM5NTE1OTc2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZrCY7gFqTM5Njk2MDQ1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTU5NzY0", "url": "https://github.com/apache/flink/pull/11784#pullrequestreview-395159764", "createdAt": "2020-04-17T04:51:57Z", "commit": {"oid": "1ee639f83adcf607b722609782be88207de5fe49"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDo1MTo1N1rOGG_5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTowNDoxN1rOGHAErQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MTUyMw==", "bodyText": "If get_impl is already defined in the base class, it is not necessary to define it in child class again.", "url": "https://github.com/apache/flink/pull/11784#discussion_r409991523", "createdAt": "2020-04-17T04:51:57Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -177,6 +187,9 @@ def __init__(self, elem_coder):\n     def _create_impl(self):\n         return coder_impl.ArrayCoderImpl(self._elem_coder.get_impl())\n \n+    def get_impl(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee639f83adcf607b722609782be88207de5fe49"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MjgzOA==", "bodyText": "progress_metrics method is missing", "url": "https://github.com/apache/flink/pull/11784#discussion_r409992838", "createdAt": "2020-04-17T04:57:38Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_operations.pyx", "diffHunk": "@@ -0,0 +1,242 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# cython: language_level = 3\n+# cython: infer_types = True\n+# cython: profile=True\n+# cython: boundscheck=False, wraparound=False, initializedcheck=False, cdivision=True\n+\n+import datetime\n+\n+import cloudpickle\n+from apache_beam.runners.worker import bundle_processor\n+from apache_beam.runners.worker import operation_specs\n+\n+from pyflink.fn_execution import flink_fn_execution_pb2\n+from pyflink.metrics.metricbase import GenericMetricGroup\n+from pyflink.serializers import PickleSerializer\n+from pyflink.table import FunctionContext\n+from pyflink.table.udf import DelegatingScalarFunction, DelegationTableFunction\n+\n+SCALAR_FUNCTION_URN = \"flink:transform:scalar_function:v1\"\n+TABLE_FUNCTION_URN = \"flink:transform:table_function:v1\"\n+\n+cdef class StatelessFunctionOperation(Operation):\n+    \"\"\"\n+    Base class of stateless function operation that will execute ScalarFunction or TableFunction for\n+    each input element.\n+    \"\"\"\n+\n+    def __init__(self, name, spec, counter_factory, sampler, consumers):\n+        super(StatelessFunctionOperation, self).__init__(name, spec, counter_factory, sampler)\n+        self.consumer = consumers['output'][0]\n+        self._value_coder_impl = self.consumer.windowed_coder.wrapped_value_coder.get_impl()\n+        value_coder = self._value_coder_impl._value_coder\n+        from pyflink.fn_execution.coder_impl import ArrowCoderImpl\n+        if isinstance(value_coder, ArrowCoderImpl):\n+            self._is_python_coder = True\n+        else:\n+            self._is_python_coder = False\n+\n+        self.variable_dict = {}\n+        self.user_defined_funcs = []\n+        self._func_num = 0\n+        self._constant_num = 0\n+        self.func = self.generate_func(self.spec.serialized_fn.udfs)\n+        self._metric_enabled = self.spec.serialized_fn.metric_enabled\n+        self.base_metric_group = None\n+        if self._metric_enabled:\n+            self.base_metric_group = GenericMetricGroup(None, None)\n+        for user_defined_func in self.user_defined_funcs:\n+            user_defined_func.open(FunctionContext(self.base_metric_group))\n+\n+    cpdef start(self):\n+        with self.scoped_start_state:\n+            super(StatelessFunctionOperation, self).start()\n+\n+    cpdef finish(self):\n+        with self.scoped_finish_state:\n+            super(StatelessFunctionOperation, self).finish()\n+            self._update_gauge(self.base_metric_group)\n+\n+    cpdef teardown(self):\n+        with self.scoped_finish_state:\n+            for user_defined_func in self.user_defined_funcs:\n+                user_defined_func.close()\n+\n+    cpdef process(self, WindowedValue o):\n+        cdef InputStreamAndFunctionWrapper wrapper\n+        with self.scoped_process_state:\n+            output_stream = self.consumer.output_stream\n+            if self._is_python_coder:\n+                self._value_coder_impl.encode_to_stream(self.func(o.value), output_stream, True)\n+            else:\n+                wrapper = InputStreamAndFunctionWrapper(self.func, o.value)\n+                self._value_coder_impl.encode_to_stream(wrapper, output_stream, True)\n+            output_stream.maybe_flush()\n+\n+    cpdef monitoring_infos(self, transform_id):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee639f83adcf607b722609782be88207de5fe49"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NDMwOQ==", "bodyText": "used import", "url": "https://github.com/apache/flink/pull/11784#discussion_r409994309", "createdAt": "2020-04-17T05:03:56Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_operations.pxd", "diffHunk": "@@ -0,0 +1,48 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# cython: language_level=3\n+\n+cimport libc.stdint\n+\n+from apache_beam.utils.windowed_value cimport WindowedValue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee639f83adcf607b722609782be88207de5fe49"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NDQxMw==", "bodyText": "unused import", "url": "https://github.com/apache/flink/pull/11784#discussion_r409994413", "createdAt": "2020-04-17T05:04:17Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/fast_operations.pxd", "diffHunk": "@@ -0,0 +1,48 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#    http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+# cython: language_level=3\n+\n+cimport libc.stdint\n+\n+from apache_beam.utils.windowed_value cimport WindowedValue\n+from apache_beam.runners.worker.operations cimport Operation\n+from apache_beam.coders.coder_impl cimport StreamCoderImpl, CoderImpl, OutputStream, InputStream\n+from pyflink.fn_execution.fast_coder_impl cimport InputStreamAndFunctionWrapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ee639f83adcf607b722609782be88207de5fe49"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ee639f83adcf607b722609782be88207de5fe49", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/1ee639f83adcf607b722609782be88207de5fe49", "committedDate": "2020-04-17T02:21:05Z", "message": "[FLINK-17120][python] Add Cython support for operations"}, "afterCommit": {"oid": "6f1db3ebd65dcbeaebb677460838b22745b9d89a", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/6f1db3ebd65dcbeaebb677460838b22745b9d89a", "committedDate": "2020-04-20T07:53:40Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3191555708dd579d481e3fbdf739e0b0421c9dc", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/a3191555708dd579d481e3fbdf739e0b0421c9dc", "committedDate": "2020-04-20T11:45:15Z", "message": "[FLINK-17120][python] Add Cython support for operations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f1db3ebd65dcbeaebb677460838b22745b9d89a", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/6f1db3ebd65dcbeaebb677460838b22745b9d89a", "committedDate": "2020-04-20T07:53:40Z", "message": "fix"}, "afterCommit": {"oid": "a3191555708dd579d481e3fbdf739e0b0421c9dc", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/a3191555708dd579d481e3fbdf739e0b0421c9dc", "committedDate": "2020-04-20T11:45:15Z", "message": "[FLINK-17120][python] Add Cython support for operations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTYwNDU5", "url": "https://github.com/apache/flink/pull/11784#pullrequestreview-396960459", "createdAt": "2020-04-21T03:22:43Z", "commit": {"oid": "a3191555708dd579d481e3fbdf739e0b0421c9dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1851, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}