{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjk1OTgz", "number": 11754, "title": "[FLINK-17156][checkpointing] support cancellation of unaligned checkpoints", "bodyText": "Note: this PR depends on #11507 and shouldn't be merged before it.\nWhat is the purpose of the change\nAdd support cancellation of unaligned checkpoints so that:\n\nactive checkpoint is cancelled\nany new checkpoint barriers with id <= cancelled are ignored\n\nThe behavior should mimic the one of aligned checkpoints.\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded CheckpointBarrierUnalignerCancellationTest (unit test)\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: yes\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-04-15T11:14:18Z", "url": "https://github.com/apache/flink/pull/11754", "merged": true, "mergeCommit": {"oid": "a7d80fb2e1a3216a4c420c1f78f7612432bc49e6"}, "closed": true, "closedAt": "2020-04-20T11:28:41Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX3POegFqTM5MzcwOTI1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYf3UugBqjMyNDQwNDEyNTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNzA5MjUw", "url": "https://github.com/apache/flink/pull/11754#pullrequestreview-393709250", "createdAt": "2020-04-15T12:05:18Z", "commit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowNToxOFrOGF2lcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyNToxM1rOGF3PtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MDM4Nw==", "bodyText": "rename to expectTriggerCheckpoint? I first thought should is describing test behavior. Same for shouldAbortCheckpoint", "url": "https://github.com/apache/flink/pull/11754#discussion_r408790387", "createdAt": "2020-04-15T12:05:18Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5ODE1Mw==", "bodyText": "I guess we could easily add some more cases, such as\ncheckpoint(20), cancel(10)\ncancel(10), cancel(20)\ncancel(20), cancel(10)\n\nOr even some carefully chosen combination of 3 events.", "url": "https://github.com/apache/flink/pull/11754#discussion_r408798153", "createdAt": "2020-04-15T12:19:55Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5ODk4MA==", "bodyText": "This one is not used anymore (going over #runInTaskThread).", "url": "https://github.com/apache/flink/pull/11754#discussion_r408798980", "createdAt": "2020-04-15T12:21:17Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tTestInvokable invokable = new TestInvokable();\n+\t\tCheckpointBarrierUnaligner unaligner = new CheckpointBarrierUnaligner(new int[]{1}, ChannelStateWriter.NO_OP, \"test\", invokable);\n+\n+\t\tfor (RuntimeEvent e : events) {\n+\t\t\tif (e instanceof CancelCheckpointMarker) {\n+\t\t\t\tunaligner.processCancellationBarrier((CancelCheckpointMarker) e);\n+\t\t\t} else if (e instanceof CheckpointBarrier) {\n+\t\t\t\tunaligner.processBarrier((CheckpointBarrier) e, 0, 0);\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"unexpected event type: \" + e);\n+\t\t\t}\n+\t\t}\n+\n+\t\tassertEquals(shouldAbortCheckpoint, invokable.checkpointAborted);\n+\t\tassertEquals(shouldTriggerCheckpoint, invokable.checkpointTriggered);\n+\t}\n+\n+\tprivate static CheckpointBarrier checkpoint(int checkpointId) {\n+\t\treturn new CheckpointBarrier(checkpointId, 1, CheckpointOptions.forCheckpointWithDefaultLocation());\n+\t}\n+\n+\tprivate static CancelCheckpointMarker cancel(int checkpointId) {\n+\t\treturn new CancelCheckpointMarker(checkpointId);\n+\t}\n+\n+\tprivate static class TestInvokable extends AbstractInvokable {\n+\t\tTestInvokable() {\n+\t\t\tsuper(new DummyEnvironment());\n+\t\t}\n+\n+\t\tprivate boolean checkpointAborted;\n+\t\tprivate boolean checkpointTriggered;\n+\n+\t\t@Override\n+\t\tpublic void invoke() {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Future<Boolean> triggerCheckpointAsync(CheckpointMetaData checkpointMetaData, CheckpointOptions checkpointOptions, boolean advanceToEndOfEventTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMTIwNA==", "bodyText": "Should we also test notifyBarrierReceived?", "url": "https://github.com/apache/flink/pull/11754#discussion_r408801204", "createdAt": "2020-04-15T12:25:13Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tTestInvokable invokable = new TestInvokable();\n+\t\tCheckpointBarrierUnaligner unaligner = new CheckpointBarrierUnaligner(new int[]{1}, ChannelStateWriter.NO_OP, \"test\", invokable);\n+\n+\t\tfor (RuntimeEvent e : events) {\n+\t\t\tif (e instanceof CancelCheckpointMarker) {\n+\t\t\t\tunaligner.processCancellationBarrier((CancelCheckpointMarker) e);\n+\t\t\t} else if (e instanceof CheckpointBarrier) {\n+\t\t\t\tunaligner.processBarrier((CheckpointBarrier) e, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/6950a256fee785d5b95ea7bd8f21a8f85d31843b", "committedDate": "2020-04-15T10:01:37Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}, "afterCommit": {"oid": "0c90426b2fedab82f9fb669478f815db21deec32", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/0c90426b2fedab82f9fb669478f815db21deec32", "committedDate": "2020-04-15T19:04:50Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MDA2NTY3", "url": "https://github.com/apache/flink/pull/11754#pullrequestreview-395006567", "createdAt": "2020-04-16T21:18:41Z", "commit": {"oid": "0c90426b2fedab82f9fb669478f815db21deec32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32df2a7a4319a82ec07e122ab37985a52e6b3fa1", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/32df2a7a4319a82ec07e122ab37985a52e6b3fa1", "committedDate": "2020-04-17T10:37:16Z", "message": "[FLINK-17156][checkpointing][hotfix] simplify cancellation in CheckpointBarrierUnaligner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c90426b2fedab82f9fb669478f815db21deec32", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/0c90426b2fedab82f9fb669478f815db21deec32", "committedDate": "2020-04-15T19:04:50Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}, "afterCommit": {"oid": "48744e0183743b29c2c64395f732f74cc3bb71f7", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/48744e0183743b29c2c64395f732f74cc3bb71f7", "committedDate": "2020-04-17T10:37:48Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aebef0a50172e17d7cd02b4cd44c15f03b4b2d2e", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/aebef0a50172e17d7cd02b4cd44c15f03b4b2d2e", "committedDate": "2020-04-17T10:54:32Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "48744e0183743b29c2c64395f732f74cc3bb71f7", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/48744e0183743b29c2c64395f732f74cc3bb71f7", "committedDate": "2020-04-17T10:37:48Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}, "afterCommit": {"oid": "aebef0a50172e17d7cd02b4cd44c15f03b4b2d2e", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/aebef0a50172e17d7cd02b4cd44c15f03b4b2d2e", "committedDate": "2020-04-17T10:54:32Z", "message": "[FLINK-17156][checkpointing] ignore cancelled checkpoints by CheckpointBarrierUnaligner"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1790, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}