{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4Mzg2MjM3", "number": 14243, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Njo0M1rOE96CEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Njo0M1rOE96CEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ5MzkyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/utils/ColumnIntervalUtilTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo0Njo0M1rOH61lWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODo1MDowMFrOH61sKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzM3MQ==", "bodyText": "Add a test for intersecting but not containing interval?\nassertEquals(\n    toBigDecimalInterval(ValueInterval.apply(3L, 12L, includeLower = false, includeUpper = false)),\n    ColumnIntervalUtil.getColumnIntervalWithFilter(\n    Some(toBigDecimalInterval(\n        ValueInterval.apply(3L, 10L, includeLower = false, includeUpper = false))),\n    predicate,\n    1,\n    rexBuilder))", "url": "https://github.com/apache/flink/pull/14243#discussion_r531457371", "createdAt": "2020-11-27T08:46:43Z", "author": {"login": "tsreaper"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/utils/ColumnIntervalUtilTest.scala", "diffHunk": "@@ -189,4 +193,85 @@ class ColumnIntervalUtilTest {\n     )\n   }\n \n+  @Test\n+  def testGetColumnIntervalWithFilter(): Unit = {\n+    val typeFactory: FlinkTypeFactory = new FlinkTypeFactory(new FlinkTypeSystem)\n+    val rexBuilder: RexBuilder = new FlinkRexBuilder(typeFactory)\n+\n+    // ($1 >= 1 and $1 < 10) or (not($1 > 5)\n+    val predicate = rexBuilder.makeCall(\n+      SqlStdOperatorTable.OR,\n+      rexBuilder.makeCall(\n+        SqlStdOperatorTable.AND,\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(1))),\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.LESS_THAN,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(10)))),\n+      rexBuilder.makeCall(\n+        SqlStdOperatorTable.NOT,\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.GREATER_THAN,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(5))))\n+    )\n+\n+    assertEquals(\n+      toBigDecimalInterval(ValueInterval.apply(null, 10L, includeUpper = false)),\n+      ColumnIntervalUtil.getColumnIntervalWithFilter(\n+        None,\n+        predicate,\n+        1,\n+        rexBuilder))\n+\n+    assertEquals(\n+      toBigDecimalInterval(ValueInterval.apply(3L, 8L, includeLower = false, includeUpper = false)),\n+      ColumnIntervalUtil.getColumnIntervalWithFilter(\n+        Some(toBigDecimalInterval(\n+          ValueInterval.apply(3L, 8L, includeLower = false, includeUpper = false))),\n+        predicate,\n+        1,\n+        rexBuilder))\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99365bd5ed999a9f19e1678a89ca1289a507d467"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1OTExMg==", "bodyText": "intersecting case is covered by ($1 >= 1 and $1 < 10)", "url": "https://github.com/apache/flink/pull/14243#discussion_r531459112", "createdAt": "2020-11-27T08:50:00Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/utils/ColumnIntervalUtilTest.scala", "diffHunk": "@@ -189,4 +193,85 @@ class ColumnIntervalUtilTest {\n     )\n   }\n \n+  @Test\n+  def testGetColumnIntervalWithFilter(): Unit = {\n+    val typeFactory: FlinkTypeFactory = new FlinkTypeFactory(new FlinkTypeSystem)\n+    val rexBuilder: RexBuilder = new FlinkRexBuilder(typeFactory)\n+\n+    // ($1 >= 1 and $1 < 10) or (not($1 > 5)\n+    val predicate = rexBuilder.makeCall(\n+      SqlStdOperatorTable.OR,\n+      rexBuilder.makeCall(\n+        SqlStdOperatorTable.AND,\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.GREATER_THAN_OR_EQUAL,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(1))),\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.LESS_THAN,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(10)))),\n+      rexBuilder.makeCall(\n+        SqlStdOperatorTable.NOT,\n+        rexBuilder.makeCall(\n+          SqlStdOperatorTable.GREATER_THAN,\n+          rexBuilder.makeInputRef(typeFactory.createSqlType(SqlTypeName.BIGINT), 1),\n+          rexBuilder.makeBigintLiteral(java.math.BigDecimal.valueOf(5))))\n+    )\n+\n+    assertEquals(\n+      toBigDecimalInterval(ValueInterval.apply(null, 10L, includeUpper = false)),\n+      ColumnIntervalUtil.getColumnIntervalWithFilter(\n+        None,\n+        predicate,\n+        1,\n+        rexBuilder))\n+\n+    assertEquals(\n+      toBigDecimalInterval(ValueInterval.apply(3L, 8L, includeLower = false, includeUpper = false)),\n+      ColumnIntervalUtil.getColumnIntervalWithFilter(\n+        Some(toBigDecimalInterval(\n+          ValueInterval.apply(3L, 8L, includeLower = false, includeUpper = false))),\n+        predicate,\n+        1,\n+        rexBuilder))\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NzM3MQ=="}, "originalCommit": {"oid": "99365bd5ed999a9f19e1678a89ca1289a507d467"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4781, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}