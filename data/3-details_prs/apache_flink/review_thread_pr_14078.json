{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNTMyMTg2", "number": 14078, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozNTo1MFrOE5Y7zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozNzozNFrOE5ZAXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjEyODE0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTaskTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozNTo1MFrOHz0Thw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0ODoyOFrOH0E6qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NjM5MQ==", "bodyText": "Why is this one needed here and not in the other test?", "url": "https://github.com/apache/flink/pull/14078#discussion_r524096391", "createdAt": "2020-11-16T10:35:50Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTaskTest.java", "diffHunk": "@@ -99,6 +102,29 @@ public void testSnapshotAndAdvanceToEndOfEventTime() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testEmittingMaxWatermarkAfterReadingAllRecords() throws Exception {\n+\t\ttry (StreamTaskMailboxTestHarness<Integer> testHarness = createTestHarness()) {\n+\t\t\ttestHarness.processAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTAzNw==", "bodyText": "Honestly it is not needed here. I just thought this way it better resembles the \"real\" process, where you processAll records and then finish the stream task.\nIn the second case the processAll could be misleading as one could say that after processingAll records it might have been finished already and cancelling makes no sense.\nTo sum up. It does not make a real difference if we have the processAll or not, but I thought it slightly better describes what is happening in reality.", "url": "https://github.com/apache/flink/pull/14078#discussion_r524365037", "createdAt": "2020-11-16T15:44:17Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTaskTest.java", "diffHunk": "@@ -99,6 +102,29 @@ public void testSnapshotAndAdvanceToEndOfEventTime() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testEmittingMaxWatermarkAfterReadingAllRecords() throws Exception {\n+\t\ttry (StreamTaskMailboxTestHarness<Integer> testHarness = createTestHarness()) {\n+\t\t\ttestHarness.processAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NjM5MQ=="}, "originalCommit": {"oid": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2ODU1Mw==", "bodyText": "If you find it misleading I can remove the processAll.", "url": "https://github.com/apache/flink/pull/14078#discussion_r524368553", "createdAt": "2020-11-16T15:48:28Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SourceOperatorStreamTaskTest.java", "diffHunk": "@@ -99,6 +102,29 @@ public void testSnapshotAndAdvanceToEndOfEventTime() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testEmittingMaxWatermarkAfterReadingAllRecords() throws Exception {\n+\t\ttry (StreamTaskMailboxTestHarness<Integer> testHarness = createTestHarness()) {\n+\t\t\ttestHarness.processAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5NjM5MQ=="}, "originalCommit": {"oid": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjEzOTgyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMailboxTestHarness.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDozNzozNFrOHz0bcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo0NzoyMlrOH0E3cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5ODQxOA==", "bodyText": "It's a bit strange that we replicate the shutdown/cancel logic in the TestHarness and don't re-use the production logic. Just noticing it here, it was like this before the PR.", "url": "https://github.com/apache/flink/pull/14078#discussion_r524098418", "createdAt": "2020-11-16T10:37:34Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMailboxTestHarness.java", "diffHunk": "@@ -143,12 +143,17 @@ public void waitForTaskCompletion() throws Exception {\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic void close() throws Exception {\n-\t\tstreamTask.cancel();\n-\n+\tpublic void finishProcessing() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NzcyOA==", "bodyText": "Yes, I also found it problematic.\nFor a time I thought about not using this harness, but the deprecated StreamTaskTestHarness instead which does simply call the invoke method, because of the reason you described. However, because it does not let you process elements step wise, you cannot e.g. issue cancel before it finishes.", "url": "https://github.com/apache/flink/pull/14078#discussion_r524367728", "createdAt": "2020-11-16T15:47:22Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMailboxTestHarness.java", "diffHunk": "@@ -143,12 +143,17 @@ public void waitForTaskCompletion() throws Exception {\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic void close() throws Exception {\n-\t\tstreamTask.cancel();\n-\n+\tpublic void finishProcessing() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5ODQxOA=="}, "originalCommit": {"oid": "2b82b9448e3bb43d3e7da50bce557f50c07ae19b"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4793, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}