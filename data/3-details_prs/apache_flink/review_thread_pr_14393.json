{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDExNTE5", "number": 14393, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1Mzo1OVrOFGQ7Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1Mzo1OVrOFGQ7Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTEzMDc5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/resourcemanager/slotmanager/DeclarativeSlotManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1Mzo1OVrOIHMTBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMjo0NToyOFrOIHcfwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxMjQyMQ==", "bodyText": "Do we still have to distinguish between CancellationException and others in the else branch?", "url": "https://github.com/apache/flink/pull/14393#discussion_r544412421", "createdAt": "2020-12-16T15:53:59Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/resourcemanager/slotmanager/DeclarativeSlotManager.java", "diffHunk": "@@ -505,17 +496,12 @@ private void allocateSlot(TaskManagerSlotInformation taskManagerSlot, JobID jobI\n \t\t\tresourceManagerId,\n \t\t\ttaskManagerRequestTimeout);\n \n-\t\trequestFuture.whenComplete(\n+\t\tCompletableFuture<Void> slotAllocationResponseProcessingFuture = requestFuture.handleAsync(\n \t\t\t(Acknowledge acknowledge, Throwable throwable) -> {\n-\t\t\t\tif (acknowledge != null) {\n-\t\t\t\t\tcompletableFuture.complete(acknowledge);\n-\t\t\t\t} else {\n-\t\t\t\t\tcompletableFuture.completeExceptionally(throwable);\n+\t\t\t\tif (!pendingSlotAllocations.contains(slotId)) {\n+\t\t\t\t\tLOG.debug(\"Ignoring slot allocation update from task executor {} for slot {} and job {}, because the allocation was already completed or cancelled.\", instanceId, slotId, jobId);\n+\t\t\t\t\treturn null;\n \t\t\t\t}\n-\t\t\t});\n-\n-\t\tCompletableFuture<Void> slotAllocationResponseProcessingFuture = completableFuture.handleAsync(\n-\t\t\t(Acknowledge acknowledge, Throwable throwable) -> {\n \t\t\t\tif (acknowledge != null) {\n \t\t\t\t\tLOG.trace(\"Completed allocation of slot {} for job {}.\", slotId, jobId);\n \t\t\t\t\tslotTracker.notifyAllocationComplete(slotId, jobId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e449ce26f5e0b80a6e46810bbbffc19d09f5f59b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY3NzgyNg==", "bodyText": "hmmmm.....no, it should no longer be possible for the future to be canceled.", "url": "https://github.com/apache/flink/pull/14393#discussion_r544677826", "createdAt": "2020-12-16T22:45:28Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/resourcemanager/slotmanager/DeclarativeSlotManager.java", "diffHunk": "@@ -505,17 +496,12 @@ private void allocateSlot(TaskManagerSlotInformation taskManagerSlot, JobID jobI\n \t\t\tresourceManagerId,\n \t\t\ttaskManagerRequestTimeout);\n \n-\t\trequestFuture.whenComplete(\n+\t\tCompletableFuture<Void> slotAllocationResponseProcessingFuture = requestFuture.handleAsync(\n \t\t\t(Acknowledge acknowledge, Throwable throwable) -> {\n-\t\t\t\tif (acknowledge != null) {\n-\t\t\t\t\tcompletableFuture.complete(acknowledge);\n-\t\t\t\t} else {\n-\t\t\t\t\tcompletableFuture.completeExceptionally(throwable);\n+\t\t\t\tif (!pendingSlotAllocations.contains(slotId)) {\n+\t\t\t\t\tLOG.debug(\"Ignoring slot allocation update from task executor {} for slot {} and job {}, because the allocation was already completed or cancelled.\", instanceId, slotId, jobId);\n+\t\t\t\t\treturn null;\n \t\t\t\t}\n-\t\t\t});\n-\n-\t\tCompletableFuture<Void> slotAllocationResponseProcessingFuture = completableFuture.handleAsync(\n-\t\t\t(Acknowledge acknowledge, Throwable throwable) -> {\n \t\t\t\tif (acknowledge != null) {\n \t\t\t\t\tLOG.trace(\"Completed allocation of slot {} for job {}.\", slotId, jobId);\n \t\t\t\t\tslotTracker.notifyAllocationComplete(slotId, jobId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxMjQyMQ=="}, "originalCommit": {"oid": "e449ce26f5e0b80a6e46810bbbffc19d09f5f59b"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4629, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}