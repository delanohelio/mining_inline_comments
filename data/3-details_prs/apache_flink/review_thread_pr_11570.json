{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzM0Njg2", "number": 11570, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTozNTo0MVrODvFhhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyMDoxNVrODvGf1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzAwMTY3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTozNTo0MVrOGBTkxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTozNTo0MVrOGBTkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMjQ3MQ==", "bodyText": "nit: we are still in the same class and don't need to fully qualify the method", "url": "https://github.com/apache/flink/pull/11570#discussion_r404022471", "createdAt": "2020-04-06T11:35:41Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java", "diffHunk": "@@ -52,14 +63,151 @@ private ApiExpressionUtils() {\n \t\t// private\n \t}\n \n+\t/**\n+\t * Converts a given object to an expression.\n+\t *\n+\t * <p>It converts:\n+\t * <ul>\n+\t *     <li>{@link Row} to a call to a row constructor expression</li>\n+\t *     <li>{@link Map} to a call to a map constructor expression</li>\n+\t *     <li>{@link List} to a call to an array constructor expression</li>\n+\t *     <li>arrays to a call to an array constructor expression</li>\n+\t *     <li>Scala's {@code Seq} to an array constructor via reflection</li>\n+\t *     <li>Scala's {@code Map} to a map constructor via reflection</li>\n+\t *     <li>Scala's {@code BigDecimal} to a DECIMAL literal</li>\n+\t *     <li>if none of the above applies, the function tries to convert the object\n+\t *          to a value literal with {@link #valueLiteral(Object)}</li>\n+\t * </ul>\n+\t *\n+\t * @param expression An object to convert to an expression\n+\t */\n \tpublic static Expression objectToExpression(Object expression) {\n \t\tif (expression instanceof ApiExpression) {\n \t\t\treturn ((ApiExpression) expression).toExpr();\n \t\t} else if (expression instanceof Expression) {\n \t\t\treturn (Expression) expression;\n+\t\t} else if (expression instanceof Row) {\n+\t\t\treturn convertRow((Row) expression);\n+\t\t} else if (expression instanceof Map) {\n+\t\t\treturn convertJavaMap((Map<?, ?>) expression);\n+\t\t} else if (expression instanceof List) {\n+\t\t\treturn convertJavaList((List<?>) expression);\n+\t\t} else if (expression.getClass().isArray()) {\n+\t\t\treturn convertArray(expression);\n \t\t} else {\n-\t\t\treturn valueLiteral(expression);\n+\t\t\treturn convertScala(expression).orElseGet(() -> valueLiteral(expression));\n+\t\t}\n+\t}\n+\n+\tprivate static Expression convertRow(Row expression) {\n+\t\tList<Expression> fields = IntStream.range(0, expression.getArity())\n+\t\t\t.mapToObj(expression::getField)\n+\t\t\t.map(ApiExpressionUtils::objectToExpression)\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\treturn ApiExpressionUtils.unresolvedCall(BuiltInFunctionDefinitions.ROW, fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzA0MDA5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-scala/src/main/scala/org/apache/flink/table/api/expressionDsl.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTo0Njo1OFrOGBT8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTo0Njo1OFrOGBT8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyODQ0Mg==", "bodyText": "nit: javaList2ArrayConstructor", "url": "https://github.com/apache/flink/pull/11570#discussion_r404028442", "createdAt": "2020-04-06T11:46:58Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-scala/src/main/scala/org/apache/flink/table/api/expressionDsl.scala", "diffHunk": "@@ -425,54 +388,29 @@ trait ImplicitExpressionConversions {\n   implicit def localDateTime2Literal(localDateTime: LocalDateTime): Expression =\n     valueLiteral(localDateTime)\n \n+  implicit def jList2ArrayConstructor(jList: JList[_]): Expression = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzA0MTMxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-scala/src/main/scala/org/apache/flink/table/api/expressionDsl.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTo0NzoxOVrOGBT81w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTo0NzoxOVrOGBT81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyODYzMQ==", "bodyText": "nit: javaMap2MapConstructor", "url": "https://github.com/apache/flink/pull/11570#discussion_r404028631", "createdAt": "2020-04-06T11:47:19Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-scala/src/main/scala/org/apache/flink/table/api/expressionDsl.scala", "diffHunk": "@@ -425,54 +388,29 @@ trait ImplicitExpressionConversions {\n   implicit def localDateTime2Literal(localDateTime: LocalDateTime): Expression =\n     valueLiteral(localDateTime)\n \n+  implicit def jList2ArrayConstructor(jList: JList[_]): Expression = {\n+    ApiExpressionUtils.objectToExpression(jList)\n+  }\n+\n+  implicit def seq2ArrayConstructor(seq: Seq[_]): Expression = {\n+    ApiExpressionUtils.objectToExpression(seq)\n+  }\n+\n   implicit def array2ArrayConstructor(array: Array[_]): Expression = {\n+    ApiExpressionUtils.objectToExpression(array)\n+  }\n \n-    def createArray(elements: Array[_]): Expression = {\n-      unresolvedCall(BuiltInFunctionDefinitions.ARRAY, elements.map(valueLiteral): _*)\n-    }\n+  implicit def map2MapConstructor(map: JMap[_, _]): Expression = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzE2MTE5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/validation/ScalarOperatorsValidationTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyMDoxNVrOGBVEKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyMDoxNVrOGBVEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0Njg5MQ==", "bodyText": "nit: it would be interesting to understand why this is necessary now? if we do with this regression, I would at least remove the right toExpr call", "url": "https://github.com/apache/flink/pull/11570#discussion_r404046891", "createdAt": "2020-04-06T12:20:15Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/validation/ScalarOperatorsValidationTest.scala", "diffHunk": "@@ -43,7 +43,7 @@ class ScalarOperatorsValidationTest extends ScalarOperatorsTestBase {\n \n   @Test(expected = classOf[ValidationException])\n   def testInvalidStringComparison2(): Unit = {\n-    testTableApi(\"w\" > 4.toExpr, \"FAIL\", \"FAIL\")\n+    testTableApi(\"w\".toExpr > 4.toExpr, \"FAIL\", \"FAIL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 578, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}