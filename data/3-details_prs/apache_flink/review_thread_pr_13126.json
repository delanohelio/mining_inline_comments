{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NTY0Mzg0", "number": 13126, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzozMVrOEXgUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyODozNVrOEXgV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDgyMjc3OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/stream_execution_environment.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyNzozMVrOG_VHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzozNDo1MlrOG_VWVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTM3Mw==", "bodyText": "Put the import in the right order.", "url": "https://github.com/apache/flink/pull/13126#discussion_r469059373", "createdAt": "2020-08-12T07:27:31Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/stream_execution_environment.py", "diffHunk": "@@ -20,6 +20,8 @@\n \n from typing import List, Any\n \n+from pyflink.common.job_client import JobClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c2b844eff223c1eee14a83cf4ed1e295184af7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MzI1Mw==", "bodyText": "Ok, I will make it right.", "url": "https://github.com/apache/flink/pull/13126#discussion_r469063253", "createdAt": "2020-08-12T07:34:52Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/pyflink/datastream/stream_execution_environment.py", "diffHunk": "@@ -20,6 +20,8 @@\n \n from typing import List, Any\n \n+from pyflink.common.job_client import JobClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTM3Mw=="}, "originalCommit": {"oid": "37c2b844eff223c1eee14a83cf4ed1e295184af7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDgyNTk2OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzoyODozNVrOG_VJRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNzo0MToxNVrOG_VjUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTkwOA==", "bodyText": "This line is useless.", "url": "https://github.com/apache/flink/pull/13126#discussion_r469059908", "createdAt": "2020-08-12T07:28:35Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -271,3 +271,16 @@ def test_read_text_file(self):\n         results.sort()\n         texts.sort()\n         self.assertEqual(texts, results)\n+\n+    def test_execute_async(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')],\n+                                      type_info=Types.ROW(\n+                                          [Types.INT(), Types.STRING(), Types.STRING()]))\n+        test_sink = DataStreamTestSinkFunction()\n+        ds.add_sink(test_sink)\n+        job_client = self.env.execute_async(\"test execute async\")\n+        job_id = job_client.get_job_id()\n+        self.assertIsNotNone(job_id)\n+        execution_result = job_client.get_job_execution_result().result()\n+        self.assertEqual(str(job_id), str(execution_result.get_job_id()))\n+        test_sink.get_results()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c2b844eff223c1eee14a83cf4ed1e295184af7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2MzE4MA==", "bodyText": "It's used for clearing the collected results maintained in DataStreamTestSinkFunction, otherwise, the following test cases that will use the DataStreamTestSinkFunction will also collect the remnant results, which will cause the result assertion fail.", "url": "https://github.com/apache/flink/pull/13126#discussion_r469063180", "createdAt": "2020-08-12T07:34:43Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -271,3 +271,16 @@ def test_read_text_file(self):\n         results.sort()\n         texts.sort()\n         self.assertEqual(texts, results)\n+\n+    def test_execute_async(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')],\n+                                      type_info=Types.ROW(\n+                                          [Types.INT(), Types.STRING(), Types.STRING()]))\n+        test_sink = DataStreamTestSinkFunction()\n+        ds.add_sink(test_sink)\n+        job_client = self.env.execute_async(\"test execute async\")\n+        job_id = job_client.get_job_id()\n+        self.assertIsNotNone(job_id)\n+        execution_result = job_client.get_job_execution_result().result()\n+        self.assertEqual(str(job_id), str(execution_result.get_job_id()))\n+        test_sink.get_results()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTkwOA=="}, "originalCommit": {"oid": "37c2b844eff223c1eee14a83cf4ed1e295184af7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA2NjU3OA==", "bodyText": "Maybe we can use the clear() method. It just does what we need.", "url": "https://github.com/apache/flink/pull/13126#discussion_r469066578", "createdAt": "2020-08-12T07:41:15Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -271,3 +271,16 @@ def test_read_text_file(self):\n         results.sort()\n         texts.sort()\n         self.assertEqual(texts, results)\n+\n+    def test_execute_async(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')],\n+                                      type_info=Types.ROW(\n+                                          [Types.INT(), Types.STRING(), Types.STRING()]))\n+        test_sink = DataStreamTestSinkFunction()\n+        ds.add_sink(test_sink)\n+        job_client = self.env.execute_async(\"test execute async\")\n+        job_id = job_client.get_job_id()\n+        self.assertIsNotNone(job_id)\n+        execution_result = job_client.get_job_execution_result().result()\n+        self.assertEqual(str(job_id), str(execution_result.get_job_id()))\n+        test_sink.get_results()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA1OTkwOA=="}, "originalCommit": {"oid": "37c2b844eff223c1eee14a83cf4ed1e295184af7"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 543, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}