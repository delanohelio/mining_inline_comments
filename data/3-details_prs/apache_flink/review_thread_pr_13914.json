{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDkzODc5", "number": 13914, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozNzozOVrOE1Fq9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozNzozOVrOE1Fq9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTAyOTAyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/LimitableBulkFormat.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjozNzozOVrOHtKumA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNzoxMDowNlrOHtLX_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMzczNg==", "bodyText": "Don't we need to synchronize on the initialization here, if numRead can be accessed concurrently?", "url": "https://github.com/apache/flink/pull/13914#discussion_r517123736", "createdAt": "2020-11-04T06:37:39Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/LimitableBulkFormat.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.filesystem;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.connector.file.src.FileSourceSplit;\n+import org.apache.flink.connector.file.src.reader.BulkFormat;\n+import org.apache.flink.connector.file.src.util.RecordAndPosition;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * A {@link BulkFormat} that can limit output record number.\n+ */\n+public class LimitableBulkFormat<T, SplitT extends FileSourceSplit> implements BulkFormat<T, SplitT> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final BulkFormat<T, SplitT> format;\n+\tprivate final long limit;\n+\n+\tprivate transient AtomicLong numRead;\n+\n+\tprivate LimitableBulkFormat(BulkFormat<T, SplitT> format, long limit) {\n+\t\tthis.format = format;\n+\t\tthis.limit = limit;\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> createReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.createReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> restoreReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.restoreReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSplittable() {\n+\t\treturn format.isSplittable();\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<T> getProducedType() {\n+\t\treturn format.getProducedType();\n+\t}\n+\n+\tprivate class LimitableReader implements Reader<T> {\n+\n+\t\tprivate final Reader<T> reader;\n+\n+\t\tprivate LimitableReader(Reader<T> reader) {\n+\t\t\tthis.reader = reader;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordIterator<T> readBatch() throws IOException {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tRecordIterator<T> batch = reader.readBatch();\n+\t\t\treturn batch == null ? null : new LimitableIterator(batch);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\treader.close();\n+\t\t}\n+\t}\n+\n+\tprivate class LimitableIterator implements RecordIterator<T> {\n+\n+\t\tprivate final RecordIterator<T> iterator;\n+\n+\t\tprivate LimitableIterator(RecordIterator<T> iterator) {\n+\t\t\tthis.iterator = iterator;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordAndPosition<T> next() {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tgetNumRead().incrementAndGet();\n+\t\t\treturn iterator.next();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void releaseBatch() {\n+\t\t\titerator.releaseBatch();\n+\t\t}\n+\t}\n+\n+\tprivate AtomicLong getNumRead() {\n+\t\tif (numRead == null) {\n+\t\t\tnumRead = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a254243687687de1b626aeed306f4c622150a6"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNjg3Mw==", "bodyText": "readBatch will init this variable. in a single thread.", "url": "https://github.com/apache/flink/pull/13914#discussion_r517126873", "createdAt": "2020-11-04T06:47:57Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/LimitableBulkFormat.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.filesystem;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.connector.file.src.FileSourceSplit;\n+import org.apache.flink.connector.file.src.reader.BulkFormat;\n+import org.apache.flink.connector.file.src.util.RecordAndPosition;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * A {@link BulkFormat} that can limit output record number.\n+ */\n+public class LimitableBulkFormat<T, SplitT extends FileSourceSplit> implements BulkFormat<T, SplitT> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final BulkFormat<T, SplitT> format;\n+\tprivate final long limit;\n+\n+\tprivate transient AtomicLong numRead;\n+\n+\tprivate LimitableBulkFormat(BulkFormat<T, SplitT> format, long limit) {\n+\t\tthis.format = format;\n+\t\tthis.limit = limit;\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> createReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.createReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> restoreReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.restoreReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSplittable() {\n+\t\treturn format.isSplittable();\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<T> getProducedType() {\n+\t\treturn format.getProducedType();\n+\t}\n+\n+\tprivate class LimitableReader implements Reader<T> {\n+\n+\t\tprivate final Reader<T> reader;\n+\n+\t\tprivate LimitableReader(Reader<T> reader) {\n+\t\t\tthis.reader = reader;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordIterator<T> readBatch() throws IOException {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tRecordIterator<T> batch = reader.readBatch();\n+\t\t\treturn batch == null ? null : new LimitableIterator(batch);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\treader.close();\n+\t\t}\n+\t}\n+\n+\tprivate class LimitableIterator implements RecordIterator<T> {\n+\n+\t\tprivate final RecordIterator<T> iterator;\n+\n+\t\tprivate LimitableIterator(RecordIterator<T> iterator) {\n+\t\t\tthis.iterator = iterator;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordAndPosition<T> next() {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tgetNumRead().incrementAndGet();\n+\t\t\treturn iterator.next();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void releaseBatch() {\n+\t\t\titerator.releaseBatch();\n+\t\t}\n+\t}\n+\n+\tprivate AtomicLong getNumRead() {\n+\t\tif (numRead == null) {\n+\t\t\tnumRead = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMzczNg=="}, "originalCommit": {"oid": "88a254243687687de1b626aeed306f4c622150a6"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzMDc2NQ==", "bodyText": "If the init can only happen in readBatch, I think it's better to move it to readBatch. And other code can directly use numRead.", "url": "https://github.com/apache/flink/pull/13914#discussion_r517130765", "createdAt": "2020-11-04T06:59:48Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/LimitableBulkFormat.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.filesystem;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.connector.file.src.FileSourceSplit;\n+import org.apache.flink.connector.file.src.reader.BulkFormat;\n+import org.apache.flink.connector.file.src.util.RecordAndPosition;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * A {@link BulkFormat} that can limit output record number.\n+ */\n+public class LimitableBulkFormat<T, SplitT extends FileSourceSplit> implements BulkFormat<T, SplitT> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final BulkFormat<T, SplitT> format;\n+\tprivate final long limit;\n+\n+\tprivate transient AtomicLong numRead;\n+\n+\tprivate LimitableBulkFormat(BulkFormat<T, SplitT> format, long limit) {\n+\t\tthis.format = format;\n+\t\tthis.limit = limit;\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> createReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.createReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> restoreReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.restoreReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSplittable() {\n+\t\treturn format.isSplittable();\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<T> getProducedType() {\n+\t\treturn format.getProducedType();\n+\t}\n+\n+\tprivate class LimitableReader implements Reader<T> {\n+\n+\t\tprivate final Reader<T> reader;\n+\n+\t\tprivate LimitableReader(Reader<T> reader) {\n+\t\t\tthis.reader = reader;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordIterator<T> readBatch() throws IOException {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tRecordIterator<T> batch = reader.readBatch();\n+\t\t\treturn batch == null ? null : new LimitableIterator(batch);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\treader.close();\n+\t\t}\n+\t}\n+\n+\tprivate class LimitableIterator implements RecordIterator<T> {\n+\n+\t\tprivate final RecordIterator<T> iterator;\n+\n+\t\tprivate LimitableIterator(RecordIterator<T> iterator) {\n+\t\t\tthis.iterator = iterator;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordAndPosition<T> next() {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tgetNumRead().incrementAndGet();\n+\t\t\treturn iterator.next();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void releaseBatch() {\n+\t\t\titerator.releaseBatch();\n+\t\t}\n+\t}\n+\n+\tprivate AtomicLong getNumRead() {\n+\t\tif (numRead == null) {\n+\t\t\tnumRead = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMzczNg=="}, "originalCommit": {"oid": "88a254243687687de1b626aeed306f4c622150a6"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzNDMzMg==", "bodyText": "I made LimitableReader as a static class, then make the logic more clear.", "url": "https://github.com/apache/flink/pull/13914#discussion_r517134332", "createdAt": "2020-11-04T07:10:06Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/filesystem/LimitableBulkFormat.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.filesystem;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.connector.file.src.FileSourceSplit;\n+import org.apache.flink.connector.file.src.reader.BulkFormat;\n+import org.apache.flink.connector.file.src.util.RecordAndPosition;\n+\n+import javax.annotation.Nullable;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * A {@link BulkFormat} that can limit output record number.\n+ */\n+public class LimitableBulkFormat<T, SplitT extends FileSourceSplit> implements BulkFormat<T, SplitT> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final BulkFormat<T, SplitT> format;\n+\tprivate final long limit;\n+\n+\tprivate transient AtomicLong numRead;\n+\n+\tprivate LimitableBulkFormat(BulkFormat<T, SplitT> format, long limit) {\n+\t\tthis.format = format;\n+\t\tthis.limit = limit;\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> createReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.createReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic Reader<T> restoreReader(Configuration config, SplitT split) throws IOException {\n+\t\treturn new LimitableReader(format.restoreReader(config, split));\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSplittable() {\n+\t\treturn format.isSplittable();\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<T> getProducedType() {\n+\t\treturn format.getProducedType();\n+\t}\n+\n+\tprivate class LimitableReader implements Reader<T> {\n+\n+\t\tprivate final Reader<T> reader;\n+\n+\t\tprivate LimitableReader(Reader<T> reader) {\n+\t\t\tthis.reader = reader;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordIterator<T> readBatch() throws IOException {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\tRecordIterator<T> batch = reader.readBatch();\n+\t\t\treturn batch == null ? null : new LimitableIterator(batch);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void close() throws IOException {\n+\t\t\treader.close();\n+\t\t}\n+\t}\n+\n+\tprivate class LimitableIterator implements RecordIterator<T> {\n+\n+\t\tprivate final RecordIterator<T> iterator;\n+\n+\t\tprivate LimitableIterator(RecordIterator<T> iterator) {\n+\t\t\tthis.iterator = iterator;\n+\t\t}\n+\n+\t\t@Nullable\n+\t\t@Override\n+\t\tpublic RecordAndPosition<T> next() {\n+\t\t\tif (reachLimit()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tgetNumRead().incrementAndGet();\n+\t\t\treturn iterator.next();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void releaseBatch() {\n+\t\t\titerator.releaseBatch();\n+\t\t}\n+\t}\n+\n+\tprivate AtomicLong getNumRead() {\n+\t\tif (numRead == null) {\n+\t\t\tnumRead = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyMzczNg=="}, "originalCommit": {"oid": "88a254243687687de1b626aeed306f4c622150a6"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4916, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}