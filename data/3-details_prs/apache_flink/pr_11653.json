{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDg4MzE3", "number": 11653, "title": "[FLINK-16951][parquet] Integrate parquet to file system connector", "bodyText": "What is the purpose of the change\nUsers can use file system connector with parquet format in table.\nBrief change log\n\nImplement ParquetFileSystemFormatFactory.\nImplement ParquetFileSystemITCase.\n\nVerifying this change\nParquetFileSystemITCase\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes /  no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (JavaDocs)", "createdAt": "2020-04-07T07:25:41Z", "url": "https://github.com/apache/flink/pull/11653", "merged": true, "mergeCommit": {"oid": "8127339ecbbb41eb9b0768ffc54c0a9c8a4fb824"}, "closed": true, "closedAt": "2020-04-14T01:27:26Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVOB9PAH2gAyNDAwMDg4MzE3OmI0NzA1MGVkMGY2YTg0NzRiZTI5N2VhYmYwNzhlZjE4NmUwMGVhNGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXKp3PgH2gAyNDAwMDg4MzE3OjQ2ZjBkOWM5NWQ4MmI4ZjlkY2Q1ZTM0NGYzY2I5OGMyY2I5OTk1YTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b47050ed0f6a8474be297eabf078ef186e00ea4d", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/b47050ed0f6a8474be297eabf078ef186e00ea4d", "committedDate": "2020-04-07T07:19:18Z", "message": "[FLINK-16951][parquet] Integrate parquet to file system connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b9af733c519ceca287e189b2b290d3d6a0baf4", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/24b9af733c519ceca287e189b2b290d3d6a0baf4", "committedDate": "2020-04-08T08:27:43Z", "message": "comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxOTgzMzAz", "url": "https://github.com/apache/flink/pull/11653#pullrequestreview-391983303", "createdAt": "2020-04-13T06:39:55Z", "commit": {"oid": "24b9af733c519ceca287e189b2b290d3d6a0baf4"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjozOTo1NlrOGEeMHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNjo0MDo1NlrOGEeNIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MjExMQ==", "bodyText": "use PARQUET_PROPERTIES_KEY here\uff1f", "url": "https://github.com/apache/flink/pull/11653#discussion_r407342111", "createdAt": "2020-04-13T06:39:56Z", "author": {"login": "leonardBang"}, "path": "flink-formats/flink-parquet/src/main/java/org/apache/flink/formats/parquet/ParquetFileSystemFormatFactory.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.parquet;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.api.common.io.InputFormat;\n+import org.apache.flink.api.common.serialization.BulkWriter;\n+import org.apache.flink.api.common.serialization.Encoder;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.formats.parquet.row.ParquetRowDataBuilder;\n+import org.apache.flink.formats.parquet.utils.SerializableConfiguration;\n+import org.apache.flink.formats.parquet.vector.ParquetColumnarRowSplitReader;\n+import org.apache.flink.formats.parquet.vector.ParquetSplitReaderUtil;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.descriptors.DescriptorProperties;\n+import org.apache.flink.table.filesystem.FileSystemFormatFactory;\n+import org.apache.flink.table.filesystem.PartitionPathUtils;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.parquet.hadoop.ParquetOutputFormat;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+import static org.apache.flink.table.dataformat.vector.VectorizedColumnBatch.DEFAULT_SIZE;\n+import static org.apache.flink.table.descriptors.FormatDescriptorValidator.FORMAT;\n+import static org.apache.flink.table.filesystem.RowPartitionComputer.restorePartValueFromType;\n+\n+/**\n+ * Parquet {@link FileSystemFormatFactory} for file system.\n+ */\n+public class ParquetFileSystemFormatFactory implements FileSystemFormatFactory {\n+\n+\tpublic static final ConfigOption<Boolean> UTC_TIMEZONE = key(\"format.utc-timezone\")\n+\t\t\t.booleanType()\n+\t\t\t.defaultValue(false)\n+\t\t\t.withDescription(\"Use UTC timezone or local timezone to the conversion between epoch\" +\n+\t\t\t\t\t\" time and LocalDateTime. Hive 0.x/1.x/2.x use local timezone. But Hive 3.x\" +\n+\t\t\t\t\t\" use UTC timezone\");\n+\n+\t/**\n+\t * Parquet properties, start with \"parquet\", see more in {@link ParquetOutputFormat}.\n+\t * - parquet.compression\n+\t * - parquet.block.size\n+\t * - parquet.page.size\n+\t * - parquet.dictionary.page.size\n+\t * - parquet.writer.max-padding\n+\t * - parquet.enable.dictionary\n+\t * - parquet.validation\n+\t * - parquet.writer.version\n+\t * ...\n+\t */\n+\tpublic static final String PARQUET_PROPERTIES = \"format.parquet\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24b9af733c519ceca287e189b2b290d3d6a0baf4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM0MjM3MQ==", "bodyText": "Call parent's function first in constructor?", "url": "https://github.com/apache/flink/pull/11653#discussion_r407342371", "createdAt": "2020-04-13T06:40:56Z", "author": {"login": "leonardBang"}, "path": "flink-formats/flink-parquet/src/main/java/org/apache/flink/formats/parquet/ParquetFileSystemFormatFactory.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.parquet;\n+\n+import org.apache.flink.api.common.io.FileInputFormat;\n+import org.apache.flink.api.common.io.InputFormat;\n+import org.apache.flink.api.common.serialization.BulkWriter;\n+import org.apache.flink.api.common.serialization.Encoder;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.core.fs.FileInputSplit;\n+import org.apache.flink.core.fs.Path;\n+import org.apache.flink.formats.parquet.row.ParquetRowDataBuilder;\n+import org.apache.flink.formats.parquet.utils.SerializableConfiguration;\n+import org.apache.flink.formats.parquet.vector.ParquetColumnarRowSplitReader;\n+import org.apache.flink.formats.parquet.vector.ParquetSplitReaderUtil;\n+import org.apache.flink.table.dataformat.BaseRow;\n+import org.apache.flink.table.descriptors.DescriptorProperties;\n+import org.apache.flink.table.filesystem.FileSystemFormatFactory;\n+import org.apache.flink.table.filesystem.PartitionPathUtils;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.RowType;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.parquet.hadoop.ParquetOutputFormat;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+import static org.apache.flink.table.dataformat.vector.VectorizedColumnBatch.DEFAULT_SIZE;\n+import static org.apache.flink.table.descriptors.FormatDescriptorValidator.FORMAT;\n+import static org.apache.flink.table.filesystem.RowPartitionComputer.restorePartValueFromType;\n+\n+/**\n+ * Parquet {@link FileSystemFormatFactory} for file system.\n+ */\n+public class ParquetFileSystemFormatFactory implements FileSystemFormatFactory {\n+\n+\tpublic static final ConfigOption<Boolean> UTC_TIMEZONE = key(\"format.utc-timezone\")\n+\t\t\t.booleanType()\n+\t\t\t.defaultValue(false)\n+\t\t\t.withDescription(\"Use UTC timezone or local timezone to the conversion between epoch\" +\n+\t\t\t\t\t\" time and LocalDateTime. Hive 0.x/1.x/2.x use local timezone. But Hive 3.x\" +\n+\t\t\t\t\t\" use UTC timezone\");\n+\n+\t/**\n+\t * Parquet properties, start with \"parquet\", see more in {@link ParquetOutputFormat}.\n+\t * - parquet.compression\n+\t * - parquet.block.size\n+\t * - parquet.page.size\n+\t * - parquet.dictionary.page.size\n+\t * - parquet.writer.max-padding\n+\t * - parquet.enable.dictionary\n+\t * - parquet.validation\n+\t * - parquet.writer.version\n+\t * ...\n+\t */\n+\tpublic static final String PARQUET_PROPERTIES = \"format.parquet\";\n+\n+\t@Override\n+\tpublic Map<String, String> requiredContext() {\n+\t\tMap<String, String> context = new HashMap<>();\n+\t\tcontext.put(FORMAT, \"parquet\");\n+\t\treturn context;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> supportedProperties() {\n+\t\treturn Arrays.asList(\n+\t\t\t\tUTC_TIMEZONE.key(),\n+\t\t\t\tPARQUET_PROPERTIES + \".*\"\n+\t\t);\n+\t}\n+\n+\tprivate static boolean isUtcTimestamp(DescriptorProperties properties) {\n+\t\treturn properties.getOptionalBoolean(UTC_TIMEZONE.key())\n+\t\t\t\t.orElse(UTC_TIMEZONE.defaultValue());\n+\t}\n+\n+\tprivate static Configuration getParquetConfiguration(DescriptorProperties properties) {\n+\t\tConfiguration conf = new Configuration();\n+\t\tproperties.asMap().keySet()\n+\t\t\t\t.stream()\n+\t\t\t\t.filter(key -> key.startsWith(PARQUET_PROPERTIES))\n+\t\t\t\t.forEach(key -> {\n+\t\t\t\t\tString value = properties.getString(key);\n+\t\t\t\t\tString subKey = key.substring((FORMAT + '.').length());\n+\t\t\t\t\tconf.set(subKey, value);\n+\t\t\t\t});\n+\t\treturn conf;\n+\t}\n+\n+\t@Override\n+\tpublic InputFormat<BaseRow, ?> createReader(ReaderContext context) {\n+\t\tDescriptorProperties properties = new DescriptorProperties();\n+\t\tproperties.putProperties(context.getFormatProperties());\n+\n+\t\treturn new ParquetInputFormat(\n+\t\t\t\tcontext.getPaths(),\n+\t\t\t\tcontext.getSchema().getFieldNames(),\n+\t\t\t\tcontext.getSchema().getFieldDataTypes(),\n+\t\t\t\tcontext.getProjectFields(),\n+\t\t\t\tcontext.getDefaultPartName(),\n+\t\t\t\tcontext.getPushedDownLimit(),\n+\t\t\t\tgetParquetConfiguration(properties),\n+\t\t\t\tisUtcTimestamp(properties));\n+\t}\n+\n+\t@Override\n+\tpublic Optional<BulkWriter.Factory<BaseRow>> createBulkWriterFactory(WriterContext context) {\n+\t\tDescriptorProperties properties = new DescriptorProperties();\n+\t\tproperties.putProperties(context.getFormatProperties());\n+\n+\t\treturn Optional.of(ParquetRowDataBuilder.createWriterFactory(\n+\t\t\t\tRowType.of(Arrays.stream(context.getFieldTypesWithoutPartKeys())\n+\t\t\t\t\t\t\t\t.map(DataType::getLogicalType)\n+\t\t\t\t\t\t\t\t.toArray(LogicalType[]::new),\n+\t\t\t\t\t\tcontext.getFieldNamesWithoutPartKeys()),\n+\t\t\t\tgetParquetConfiguration(properties),\n+\t\t\t\tisUtcTimestamp(properties)\n+\t\t));\n+\t}\n+\n+\t@Override\n+\tpublic Optional<Encoder<BaseRow>> createEncoder(WriterContext context) {\n+\t\treturn Optional.empty();\n+\t}\n+\n+\t@Override\n+\tpublic boolean supportsSchemaDerivation() {\n+\t\treturn true;\n+\t}\n+\n+\t/**\n+\t * An implementation of {@link ParquetInputFormat} to read {@link BaseRow} records\n+\t * from Parquet files.\n+\t */\n+\tpublic static class ParquetInputFormat extends FileInputFormat<BaseRow> {\n+\n+\t\tprivate static final long serialVersionUID = 1L;\n+\n+\t\tprivate final String[] fullFieldNames;\n+\t\tprivate final DataType[] fullFieldTypes;\n+\t\tprivate final int[] selectedFields;\n+\t\tprivate final String partDefaultName;\n+\t\tprivate final boolean utcTimestamp;\n+\t\tprivate final SerializableConfiguration conf;\n+\t\tprivate final long limit;\n+\n+\t\tprivate transient ParquetColumnarRowSplitReader reader;\n+\t\tprivate transient long currentReadCount;\n+\n+\t\tpublic ParquetInputFormat(\n+\t\t\t\tPath[] paths,\n+\t\t\t\tString[] fullFieldNames,\n+\t\t\t\tDataType[] fullFieldTypes,\n+\t\t\t\tint[] selectedFields,\n+\t\t\t\tString partDefaultName,\n+\t\t\t\tlong limit,\n+\t\t\t\tConfiguration conf,\n+\t\t\t\tboolean utcTimestamp) {\n+\t\t\tthis.limit = limit;\n+\t\t\tsuper.setFilePaths(paths);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24b9af733c519ceca287e189b2b290d3d6a0baf4"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46f0d9c95d82b8f9dcd5e344f3cb98c2cb9995a5", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/46f0d9c95d82b8f9dcd5e344f3cb98c2cb9995a5", "committedDate": "2020-04-13T08:31:07Z", "message": "Fix comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2355, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}