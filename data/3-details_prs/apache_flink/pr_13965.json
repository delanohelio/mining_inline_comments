{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzE3OTk4", "number": 13965, "title": "[FLINK-20018] Allow escaping in 'pipeline.cached-files' and 'pipeline.default-kryo-serializers'", "bodyText": "What is the purpose of the change\nThis commit enables escaping in options that expect a map of\nstring-string entries. It lets users pass options such as e.g.\npipeline.cached-files=name:file1,path:'oss://bucket/file1'\nVerifying this change\nThis change added tests:\n\nStreamExecutionEnvironmentComplexConfigurationTest\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-11-06T12:37:42Z", "url": "https://github.com/apache/flink/pull/13965", "merged": true, "mergeCommit": {"oid": "5af1d007e26e0fb437028d5882d79fe09baf937a"}, "closed": true, "closedAt": "2020-11-11T08:29:05Z", "author": {"login": "dawidwys"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbJIjsgFqTUyNzE4MzI3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbLH--ABqjM5Nzk1MjU4MDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MTgzMjcy", "url": "https://github.com/apache/flink/pull/13965#pullrequestreview-527183272", "createdAt": "2020-11-10T13:08:38Z", "commit": {"oid": "02c79cac0047f2400647d7a45b343ed8e18d3103"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowODozOVrOHwbvxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzoxMToxNlrOHwb2Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0ODI5Mw==", "bodyText": "Could be simplified to use getExecutionEnvironment(Configuration)", "url": "https://github.com/apache/flink/pull/13965#discussion_r520548293", "createdAt": "2020-11-10T13:08:39Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironmentComplexConfigurationTest.java", "diffHunk": "@@ -66,20 +71,49 @@ public void testLoadingStateBackendFromConfiguration() {\n \t@Test\n \tpublic void testLoadingCachedFilesFromConfiguration() {\n \t\tStreamExecutionEnvironment envFromConfiguration = StreamExecutionEnvironment.getExecutionEnvironment();\n-\t\tenvFromConfiguration.registerCachedFile(\"/tmp3\", \"file3\", true);\n+\t\tenvFromConfiguration.registerCachedFile(\"/tmp4\", \"file4\", true);\n \n \t\tConfiguration configuration = new Configuration();\n-\t\tconfiguration.setString(\"pipeline.cached-files\", \"name:file1,path:/tmp1,executable:true;name:file2,path:/tmp2\");\n+\t\tconfiguration.setString(\n+\t\t\t\"pipeline.cached-files\",\n+\t\t\t\"name:file1,path:/tmp1,executable:true;\"\n+\t\t\t\t+ \"name:file2,path:/tmp2;\"\n+\t\t\t\t+ \"name:file3,path:'oss://bucket/file1'\");\n \n \t\t// mutate config according to configuration\n \t\tenvFromConfiguration.configure(configuration, Thread.currentThread().getContextClassLoader());\n \n \t\tassertThat(envFromConfiguration.getCachedFiles(), equalTo(Arrays.asList(\n \t\t\tTuple2.of(\"file1\", new DistributedCache.DistributedCacheEntry(\"/tmp1\", true)),\n-\t\t\tTuple2.of(\"file2\", new DistributedCache.DistributedCacheEntry(\"/tmp2\", false))\n+\t\t\tTuple2.of(\"file2\", new DistributedCache.DistributedCacheEntry(\"/tmp2\", false)),\n+\t\t\tTuple2.of(\n+\t\t\t\t\"file3\",\n+\t\t\t\tnew DistributedCache.DistributedCacheEntry(\"oss://bucket/file1\", false))\n \t\t)));\n \t}\n \n+\t@Test\n+\tpublic void testLoadingKryoSerializersFromConfiguration() {\n+\t\tStreamExecutionEnvironment envFromConfiguration = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+\t\tConfiguration configuration = new Configuration();\n+\t\tconfiguration.setString(\n+\t\t\t\"pipeline.default-kryo-serializers\",\n+\t\t\t\"class:'org.apache.flink.streaming.api.environment.StreamExecutionEnvironmentComplexConfigurationTest$CustomPojo'\"\n+\t\t\t\t+ \",serializer:'org.apache.flink.streaming.api.environment.StreamExecutionEnvironmentComplexConfigurationTest$CustomPojoSerializer'\");\n+\n+\t\t// mutate config according to configuration\n+\t\tenvFromConfiguration.configure(\n+\t\t\tconfiguration,\n+\t\t\tThread.currentThread().getContextClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c79cac0047f2400647d7a45b343ed8e18d3103"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0OTk5MA==", "bodyText": "I'm doing this just to nitpick, because I think style doesn't matter unless it's enforced:\nI think out style guide says to use two indentation levels for parameters. The .editorconfig file was recently changed to break this so I suggest to use a good .editorconfig file and ignore the one in git using git update-index --skip-worktree .editorconfig.", "url": "https://github.com/apache/flink/pull/13965#discussion_r520549990", "createdAt": "2020-11-10T13:11:16Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironmentComplexConfigurationTest.java", "diffHunk": "@@ -156,4 +190,30 @@ public void onJobExecuted(@Nullable JobExecutionResult jobExecutionResult, @Null\n \n \t\t}\n \t}\n+\n+\t/**\n+\t * A dummy class to specify a Kryo serializer for.\n+\t */\n+\tpublic static class CustomPojo {\n+\t}\n+\n+\t/**\n+\t * A dummy Kryo serializer which can be registered.\n+\t */\n+\tpublic static class CustomPojoSerializer extends Serializer<CustomPojo> {\n+\t\t@Override\n+\t\tpublic void write(\n+\t\t\tKryo kryo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02c79cac0047f2400647d7a45b343ed8e18d3103"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4232b761b4f8935a8c3bda86279f860f1d11f1a3", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/4232b761b4f8935a8c3bda86279f860f1d11f1a3", "committedDate": "2020-11-10T15:30:39Z", "message": "[FLINK-20018] Allow escaping in 'pipeline.cached-files' and 'pipeline.default-kryo-serializers'\n\nThis commit enables escaping in options that expect a map of\nstring-string entries. It lets users pass options such as e.g.\n\npipeline.cached-files=name:file1,path:'oss://bucket/file1'"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02c79cac0047f2400647d7a45b343ed8e18d3103", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/02c79cac0047f2400647d7a45b343ed8e18d3103", "committedDate": "2020-11-06T11:00:39Z", "message": "[FLINK-20018] Allow escaping in 'pipeline.cached-files' and 'pipeline.default-kryo-serializers'\n\nThis commit enables escaping in options that expect a map of\nstring-string entries. It lets users pass options such as e.g.\n\npipeline.cached-files=name:file1,path:'oss://bucket/file1'"}, "afterCommit": {"oid": "4232b761b4f8935a8c3bda86279f860f1d11f1a3", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/4232b761b4f8935a8c3bda86279f860f1d11f1a3", "committedDate": "2020-11-10T15:30:39Z", "message": "[FLINK-20018] Allow escaping in 'pipeline.cached-files' and 'pipeline.default-kryo-serializers'\n\nThis commit enables escaping in options that expect a map of\nstring-string entries. It lets users pass options such as e.g.\n\npipeline.cached-files=name:file1,path:'oss://bucket/file1'"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4456, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}