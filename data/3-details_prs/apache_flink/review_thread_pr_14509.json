{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTIyODg3", "number": 14509, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTo1MTo1NlrOFJj0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0NzoyMFrOFJvftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NTY4Mzg3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTo1MTo1NlrOIL8biA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxNTo1MTo1NlrOIL8biA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTM5NTMzNg==", "bodyText": "nit formatting", "url": "https://github.com/apache/flink/pull/14509#discussion_r549395336", "createdAt": "2020-12-28T15:51:56Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGateTest.java", "diffHunk": "@@ -88,7 +94,14 @@\n /** Tests for {@link SingleInputGate}. */\n public class SingleInputGateTest extends InputGateTestBase {\n \n-    /**\n+    @Test(expected = CheckpointException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e02e1ff19305c2ae291727b9ae58a7488a3157"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzI2MzIxOnYy", "diffSide": "LEFT", "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQwODoxMzoyM1rOIMJktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo1MDoyNlrOIMMjHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMDY3Ng==", "bodyText": "As I understand from the offline discussion. Parallel union doesn't work while cogroup is almost working, but not quite - it's still failing? In that case I would keep this test ignored.", "url": "https://github.com/apache/flink/pull/14509#discussion_r549610676", "createdAt": "2020-12-29T08:13:23Z", "author": {"login": "pnowojski"}, "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "diffHunk": "@@ -189,7 +189,6 @@ public UnalignedCheckpointITCase(String desc, UnalignedSettings settings) {\n     }\n \n     @Test\n-    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36adcd40bc836c05b2dc63cff0a779ea4aeec41c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxOTIwOA==", "bodyText": "I've fiixed the remaining issues with cogroup in Fix channel indices in StreamTaskNetworkInput.\nThe only failing test currently is union. But I commented it out so UnalignedCheckpointITCase should run, but shouldn't fail any builds.\nI can @Ignore it again if you prefer.", "url": "https://github.com/apache/flink/pull/14509#discussion_r549619208", "createdAt": "2020-12-29T08:42:40Z", "author": {"login": "rkhachatryan"}, "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "diffHunk": "@@ -189,7 +189,6 @@ public UnalignedCheckpointITCase(String desc, UnalignedSettings settings) {\n     }\n \n     @Test\n-    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMDY3Ng=="}, "originalCommit": {"oid": "36adcd40bc836c05b2dc63cff0a779ea4aeec41c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1OTQyMA==", "bodyText": "If the remaining tests (apart of union) are stable, let's leave it as is. I thought that cogroup is also still failing sporadically.", "url": "https://github.com/apache/flink/pull/14509#discussion_r549659420", "createdAt": "2020-12-29T10:50:26Z", "author": {"login": "pnowojski"}, "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "diffHunk": "@@ -189,7 +189,6 @@ public UnalignedCheckpointITCase(String desc, UnalignedSettings settings) {\n     }\n \n     @Test\n-    @Ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTYxMDY3Ng=="}, "originalCommit": {"oid": "36adcd40bc836c05b2dc63cff0a779ea4aeec41c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU5NDE2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0NjoxNFrOIMMeMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMjozMTo1MlrOIMOPyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1ODE2MA==", "bodyText": "The only reason why we need this, is because of StatusWatermarkValve? And theoretically we could migrate StatusWatermarkValve from raw indexes to InputChannelInfo and get rid of this conversion as well?\nIf so, that brings another question. Could there be a similar bugs in StatusWatermarkValve that originate from using raw int as channel index?", "url": "https://github.com/apache/flink/pull/14509#discussion_r549658160", "createdAt": "2020-12-29T10:46:14Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "diffHunk": "@@ -73,21 +72,20 @@\n \n     private final DeserializationDelegate<StreamElement> deserializationDelegate;\n \n-    private final RecordDeserializer<DeserializationDelegate<StreamElement>>[] recordDeserializers;\n+    private final Map<InputChannelInfo, RecordDeserializer<DeserializationDelegate<StreamElement>>>\n+            recordDeserializers;\n+    private final Map<InputChannelInfo, Integer> flattenedChannelIndices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe634b6ea1ba38207ccc1fdb0cd5b19d11ab05c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY4NzI0MQ==", "bodyText": "The only reason why we need this, is because of StatusWatermarkValve? And theoretically we could migrate StatusWatermarkValve from raw indexes to InputChannelInfo and get rid of this conversion as well?\n\nYes, this is needed for StatusWatermarkValve which could also be migrated to InputChannelInfo.\nHowever, I couldn't find any issues there (or any other classes).", "url": "https://github.com/apache/flink/pull/14509#discussion_r549687241", "createdAt": "2020-12-29T12:31:52Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "diffHunk": "@@ -73,21 +72,20 @@\n \n     private final DeserializationDelegate<StreamElement> deserializationDelegate;\n \n-    private final RecordDeserializer<DeserializationDelegate<StreamElement>>[] recordDeserializers;\n+    private final Map<InputChannelInfo, RecordDeserializer<DeserializationDelegate<StreamElement>>>\n+            recordDeserializers;\n+    private final Map<InputChannelInfo, Integer> flattenedChannelIndices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1ODE2MA=="}, "originalCommit": {"oid": "fbe634b6ea1ba38207ccc1fdb0cd5b19d11ab05c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzU5NjcxOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo0NzoyMFrOIMMfng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMjozNjowNlrOIMOUdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1ODUyNg==", "bodyText": "We are accessing this Map just once per buffer, so there should be no performance penalty?", "url": "https://github.com/apache/flink/pull/14509#discussion_r549658526", "createdAt": "2020-12-29T10:47:20Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "diffHunk": "@@ -73,21 +72,20 @@\n \n     private final DeserializationDelegate<StreamElement> deserializationDelegate;\n \n-    private final RecordDeserializer<DeserializationDelegate<StreamElement>>[] recordDeserializers;\n+    private final Map<InputChannelInfo, RecordDeserializer<DeserializationDelegate<StreamElement>>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbe634b6ea1ba38207ccc1fdb0cd5b19d11ab05c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY4ODQzNg==", "bodyText": "Yes, once per buffer. Moreover, map access was already there before:\n    private void processBuffer(BufferOrEvent bufferOrEvent) throws IOException {\n        lastChannel = channelIndexes.get(bufferOrEvent.getChannelInfo());\n\nso it shouldn't make any difference.", "url": "https://github.com/apache/flink/pull/14509#discussion_r549688436", "createdAt": "2020-12-29T12:36:06Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "diffHunk": "@@ -73,21 +72,20 @@\n \n     private final DeserializationDelegate<StreamElement> deserializationDelegate;\n \n-    private final RecordDeserializer<DeserializationDelegate<StreamElement>>[] recordDeserializers;\n+    private final Map<InputChannelInfo, RecordDeserializer<DeserializationDelegate<StreamElement>>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY1ODUyNg=="}, "originalCommit": {"oid": "fbe634b6ea1ba38207ccc1fdb0cd5b19d11ab05c"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4590, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}