{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTk1MzM2", "number": 14140, "title": "[FLINK-19864][tests] Fix unpredictable Thread.getState in StreamTaskTestHarness due to concurrent class loading", "bodyText": "What is the purpose of the change\nFix unpredictable Thread.getState in StreamTaskTestHarness.waitForInputProcessing due to concurrent class loading\nBrief change log\nQuery whether all input has been processed using MailboxProcessor.isDefaultActionUnavailable through MailboxExecutor.execute.\nVerifying this change\nThis change is already covered by existing tests:\n\nTwoInputStreamTaskTest.testWatermarkMetrics and other tests depending on StreamTaskTestHarness.waitForInputProcessing.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)", "createdAt": "2020-11-19T14:31:39Z", "url": "https://github.com/apache/flink/pull/14140", "merged": true, "mergeCommit": {"oid": "eb500b84311717cfbc64d15683621b812e76ca55"}, "closed": true, "closedAt": "2020-11-23T12:11:39Z", "author": {"login": "kezhuw"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeDbSYgH2gAyNTIzOTk1MzM2OmIzNTc2ZTI0YmU2ZmE2MmUxYTk0MmM0MDg4OTdmZGYwMzRjYmIzMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfRaf4gFqTUzNjI3NzUwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d", "author": {"user": {"login": "kezhuw", "name": "Kezhu Wang"}}, "url": "https://github.com/apache/flink/commit/b3576e24be6fa62e1a942c408897fdf034cbb30d", "committedDate": "2020-11-19T14:14:29Z", "message": "[FLINK-19864][tests] Fix unpredictable Thread.getState in StreamTaskTestHarness due to concurrent class loading"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NDk4NzYw", "url": "https://github.com/apache/flink/pull/14140#pullrequestreview-535498760", "createdAt": "2020-11-20T14:56:39Z", "commit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo1NjozOVrOH3THHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo1ODozMlrOH3TL-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0Njg0Nw==", "bodyText": "I think isDefaultActionUnavailable() is not the best choice here because suspension is a temporary state; some input may come after this check.\nWhat about using mailboxProcessor.isMailboxLoopRunning() instead?\nIt is updated on InputStatus.END_OF_INPUT which seems exactly what is needed here.", "url": "https://github.com/apache/flink/pull/14140#discussion_r527746847", "createdAt": "2020-11-20T14:56:39Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "diffHunk": "@@ -401,20 +401,36 @@ public void waitForInputProcessing() throws Exception {\n \t\t\t}\n \t\t}\n \n-\t\t// then wait for the Task Thread to be in a blocked state\n-\t\t// Check whether the state is blocked, this should be the case if it cannot\n-\t\t// notifyNonEmpty more input, i.e. all currently available input has been processed.\n-\t\twhile (true) {\n-\t\t\tThread.State state = taskThread.getState();\n-\t\t\tif (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||\n-\t\t\t\t\tstate == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {\n+\t\t// Wait for all currently available input has been processed.\n+\t\tfinal AtomicBoolean allInputProcessed = new AtomicBoolean();\n+\t\tfinal MailboxProcessor mailboxProcessor = taskThread.task.mailboxProcessor;\n+\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n+\t\twhile (taskThread.isAlive()) {\n+\t\t\ttry {\n+\t\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n+\t\t\t\tmailboxExecutor.execute(() -> {\n+\t\t\t\t\tallInputProcessed.set(mailboxProcessor.isDefaultActionUnavailable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0ODA4OA==", "bodyText": "With this await, is the sleep below still necessary?", "url": "https://github.com/apache/flink/pull/14140#discussion_r527748088", "createdAt": "2020-11-20T14:58:32Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "diffHunk": "@@ -401,20 +401,36 @@ public void waitForInputProcessing() throws Exception {\n \t\t\t}\n \t\t}\n \n-\t\t// then wait for the Task Thread to be in a blocked state\n-\t\t// Check whether the state is blocked, this should be the case if it cannot\n-\t\t// notifyNonEmpty more input, i.e. all currently available input has been processed.\n-\t\twhile (true) {\n-\t\t\tThread.State state = taskThread.getState();\n-\t\t\tif (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||\n-\t\t\t\t\tstate == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {\n+\t\t// Wait for all currently available input has been processed.\n+\t\tfinal AtomicBoolean allInputProcessed = new AtomicBoolean();\n+\t\tfinal MailboxProcessor mailboxProcessor = taskThread.task.mailboxProcessor;\n+\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n+\t\twhile (taskThread.isAlive()) {\n+\t\t\ttry {\n+\t\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n+\t\t\t\tmailboxExecutor.execute(() -> {\n+\t\t\t\t\tallInputProcessed.set(mailboxProcessor.isDefaultActionUnavailable());\n+\t\t\t\t\tlatch.countDown();\n+\t\t\t\t}, \"query-whether-processInput-has-suspend-itself\");\n+\t\t\t\t// Mail could be dropped due to task exception, so we do timed-await here.\n+\t\t\t\tlatch.await(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2Mjc3NTAy", "url": "https://github.com/apache/flink/pull/14140#pullrequestreview-536277502", "createdAt": "2020-11-23T09:06:13Z", "commit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4399, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}