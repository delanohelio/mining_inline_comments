{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDc3NjY1", "number": 12306, "title": "[FLINK-17899][runtime] Integrate FLIP-126 Watermarks with FLIP-27 Sources", "bodyText": "What is the purpose of the change\nThis PR integrates the new Watermark Generators introduced as part of FLIP-126 with the new Source Interface introduced in FLIP-27\nA discussion about the design approach is under the JIRA issue FLINK-17899\nBrief change log\nThe main changes in this PR are:\n\n\nThe introduction of SourceOutputWithWatermarks which is a SourceOutput that internally runs the TimestampAssigner and WatermarkGenerator\n\n\nThe extension of the SourceReader's output parameter from SourceOutput to ReaderOutput. The ReaderOutput extends the SourceOutput and additionally allows the creation of \"split-local\" Source Outputs, to run the watermark generation logic per split.\n\n\nUsing the WatermarkOutputMultiplexer to combine the watermarks from the split-local outputs.\n\n\nA bunch of utils to create and setup these classes, considering streaming (generate watermarks) and batch (no watermarks).\n\n\nThis PR also includes [FLINK-17898] (Remove Exceptions from signatures of SourceOutput) and [FLINK-17897] (Classify FLIP-27 source API as @PublicEvolving) as pre-processing, to avoid merge conflicts later.\nVerifying this change\nThis PR is only covered in a shallow way by existing tests. More tests are needed.\nThis PR currently served only as a base of review of the production code implementation.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): yes\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): yes\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? yes\nIf yes, how is the feature documented? not documented\n\nDocumentation of the new features is still undecided - it is possible that this feature stays a \"hidden\" feature in the upcoming release", "createdAt": "2020-05-24T22:12:10Z", "url": "https://github.com/apache/flink/pull/12306", "merged": true, "mergeCommit": {"oid": "5365e40b59fec77de126054746257f17a718fb5b"}, "closed": true, "closedAt": "2020-05-27T20:01:04Z", "author": {"login": "StephanEwen"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckjLUoABqjMzNjgzNjQ1MTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclbnZegBqjMzNzg5Mjk4OTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b43664f2f90c8291bd2d5175c91714eaddf6285", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/7b43664f2f90c8291bd2d5175c91714eaddf6285", "committedDate": "2020-05-24T21:57:12Z", "message": "[FLINK-17899][runtime] Remove unnecessary implementation of SourceContext in SourceOperatorStreamTask\n\nFewer implementations of the interface make de-virtualization of its methods easier."}, "afterCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/1cf9d57642f568baf3a92d22ed7d320cd5b146b6", "committedDate": "2020-05-24T22:26:05Z", "message": "[FLINK-17899][runtime] Remove unnecessary implementation of SourceContext in SourceOperatorStreamTask\n\nFewer implementations of the interface make de-virtualization of its methods easier."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTkyOTQ0", "url": "https://github.com/apache/flink/pull/12306#pullrequestreview-417592944", "createdAt": "2020-05-25T09:43:15Z", "commit": {"oid": "4875f1635096a9d407bb4ddc71d0209e1ea024b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MzoxNVrOGZ7aSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwOTo0MzoxNVrOGZ7aSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0MDk3MA==", "bodyText": "This does not remove the output from watermarkOutputs. Please add a test that verifies correct behaviour when removing outputs.\nWith the current design, it's actually not possible to remove the output from watermarkOutputs. One possible solution is to get rid of that list and always use the Map for iterating the outputs in onPeriodicEmit(). That would be a smidge slower but I think that's ok because periodic watermark emission does not happen super often.", "url": "https://github.com/apache/flink/pull/12306#discussion_r429840970", "createdAt": "2020-05-25T09:43:15Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/common/eventtime/WatermarkOutputMultiplexer.java", "diffHunk": "@@ -88,13 +85,17 @@ public WatermarkOutputMultiplexer(WatermarkOutput underlyingOutput) {\n \t * an output ID that can be used to get a deferred or immediate {@link WatermarkOutput} for that\n \t * output.\n \t */\n-\tpublic int registerNewOutput() {\n-\t\tint newOutputId = nextOutputId;\n-\t\tnextOutputId++;\n-\t\tOutputState outputState = new OutputState();\n-\t\twatermarkPerOutputId.put(newOutputId, outputState);\n+\tpublic void registerNewOutput(String id) {\n+\t\tfinal OutputState outputState = new OutputState();\n+\n+\t\tfinal OutputState previouslyRegistered = watermarkPerOutputId.putIfAbsent(id, outputState);\n+\t\tcheckState(previouslyRegistered == null, \"Already contains an output for ID %s\", id);\n+\n \t\twatermarkOutputs.add(outputState);\n-\t\treturn newOutputId;\n+\t}\n+\n+\tpublic boolean unregisterOutput(String id) {\n+\t\treturn watermarkPerOutputId.remove(id) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4875f1635096a9d407bb4ddc71d0209e1ea024b4"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NjI4ODUx", "url": "https://github.com/apache/flink/pull/12306#pullrequestreview-417628851", "createdAt": "2020-05-25T10:50:07Z", "commit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMDo1MDowN1rOGZ9LCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDozODo1N1rOGaDOTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTgzNQ==", "bodyText": "Is there a reason to override the method in the parent class here?", "url": "https://github.com/apache/flink/pull/12306#discussion_r429869835", "createdAt": "2020-05-25T10:50:07Z", "author": {"login": "becketqin"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/ReaderOutput.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.api.common.eventtime.Watermark;\n+\n+/**\n+ * The interface provided by Flink task to the {@link SourceReader} to emit records\n+ * to downstream operators for message processing.\n+ */\n+@PublicEvolving\n+public interface ReaderOutput<T> extends SourceOutput<T> {\n+\n+\t/**\n+\t * Emit a record without a timestamp. Equivalent to {@link #collect(Object, long) collect(timestamp, null)};\n+\t *\n+\t * @param record the record to emit.\n+\t */\n+\t@Override\n+\tvoid collect(T record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTUyNA==", "bodyText": "Should we specify the behavior of this method to just return the existing SourceOutput if one is already created for the given split?", "url": "https://github.com/apache/flink/pull/12306#discussion_r429871524", "createdAt": "2020-05-25T10:54:27Z", "author": {"login": "becketqin"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/ReaderOutput.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ Licensed to the Apache Software Foundation (ASF) under one\n+ or more contributor license agreements.  See the NOTICE file\n+ distributed with this work for additional information\n+ regarding copyright ownership.  The ASF licenses this file\n+ to you under the Apache License, Version 2.0 (the\n+ \"License\"); you may not use this file except in compliance\n+ with the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source;\n+\n+import org.apache.flink.annotation.PublicEvolving;\n+import org.apache.flink.api.common.eventtime.Watermark;\n+\n+/**\n+ * The interface provided by Flink task to the {@link SourceReader} to emit records\n+ * to downstream operators for message processing.\n+ */\n+@PublicEvolving\n+public interface ReaderOutput<T> extends SourceOutput<T> {\n+\n+\t/**\n+\t * Emit a record without a timestamp. Equivalent to {@link #collect(Object, long) collect(timestamp, null)};\n+\t *\n+\t * @param record the record to emit.\n+\t */\n+\t@Override\n+\tvoid collect(T record);\n+\n+\t/**\n+\t * Emit a record with timestamp.\n+\t *\n+\t * @param record the record to emit.\n+\t * @param timestamp the timestamp of the record.\n+\t */\n+\t@Override\n+\tvoid collect(T record, long timestamp);\n+\n+\t/**\n+\t * Emits the given watermark.\n+\t *\n+\t * <p>Emitting a watermark also implicitly marks the stream as <i>active</i>, ending\n+\t * previously marked idleness.\n+\t */\n+\t@Override\n+\tvoid emitWatermark(Watermark watermark);\n+\n+\t/**\n+\t * Marks this output as idle, meaning that downstream operations do not\n+\t * wait for watermarks from this output.\n+\t *\n+\t * <p>An output becomes active again as soon as the next watermark is emitted.\n+\t */\n+\t@Override\n+\tvoid markIdle();\n+\n+\t/**\n+\t * Creates a {@code SourceOutput} for a specific Source Split. Use these outputs if you want to\n+\t * run split-local logic, like watermark generation.\n+\t * Only one split-local output may be created per split.\n+\t *\n+\t * <p><b>IMPORTANT:</b> After the split has been finished, it is crucial to release the created\n+\t * output again. Otherwise it will continue to contribute to the watermark generation like a\n+\t * perpetually stalling source split, and may hold back the watermark indefinitely.\n+\t *\n+\t * @see #releaseOutputForSplit(String)\n+\t */\n+\tSourceOutput<T> createOutputForSplit(String splitId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0MjgwMQ==", "bodyText": "Might be better to put in the constructor of SourceOperator?", "url": "https://github.com/apache/flink/pull/12306#discussion_r429942801", "createdAt": "2020-05-25T13:44:39Z", "author": {"login": "becketqin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/SourceOperatorFactory.java", "diffHunk": "@@ -61,9 +67,11 @@ public SourceOperatorFactory(Source<OUT, ?, ?> source, int numCoordinatorWorkerT\n \t\tfinal SourceOperator<OUT, ?> sourceOperator = instantiateSourceOperator(\n \t\t\t\tsource::createReader,\n \t\t\t\tgateway,\n-\t\t\t\tsource.getSplitSerializer());\n+\t\t\t\tsource.getSplitSerializer(),\n+\t\t\t\teventTimeConfig);\n \n \t\tsourceOperator.setup(parameters.getContainingTask(), parameters.getStreamConfig(), parameters.getOutput());\n+\t\tsourceOperator.processingTimeService = parameters.getProcessingTimeService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0NDI2MQ==", "bodyText": "TimestampAndWatermarksFactory seems a more consistent class name.", "url": "https://github.com/apache/flink/pull/12306#discussion_r429944261", "createdAt": "2020-05-25T13:47:41Z", "author": {"login": "becketqin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/source/EventTimeConfig.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.source;\n+\n+import org.apache.flink.api.common.eventtime.RecordTimestampAssigner;\n+import org.apache.flink.api.common.eventtime.TimestampAssigner;\n+import org.apache.flink.api.common.eventtime.TimestampAssignerSupplier;\n+import org.apache.flink.api.common.eventtime.WatermarkGeneratorSupplier;\n+import org.apache.flink.metrics.MetricGroup;\n+import org.apache.flink.streaming.runtime.tasks.ProcessingTimeService;\n+\n+import java.io.Serializable;\n+import java.time.Duration;\n+\n+/**\n+ * A collection of all information relevant to setting up timestamp extraction and watermark\n+ * generation in a data source operator.\n+ */\n+public final class EventTimeConfig<T> implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk0NjA0MA==", "bodyText": "Is this a symbolic special value of \"NO_TIMESTAMP\" or it might trigger retraction in the downstream operators?", "url": "https://github.com/apache/flink/pull/12306#discussion_r429946040", "createdAt": "2020-05-25T13:51:23Z", "author": {"login": "becketqin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/source/SourceOutputWithWatermarks.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.source;\n+\n+import org.apache.flink.api.common.eventtime.TimestampAssigner;\n+import org.apache.flink.api.common.eventtime.Watermark;\n+import org.apache.flink.api.common.eventtime.WatermarkGenerator;\n+import org.apache.flink.api.common.eventtime.WatermarkOutput;\n+import org.apache.flink.api.connector.source.SourceOutput;\n+import org.apache.flink.streaming.runtime.io.PushingAsyncDataInput;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.ExceptionInChainedOperatorException;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * Implementation of the SourceOutput. The records emitted to this output are pushed into a given\n+ * {@link PushingAsyncDataInput.DataOutput}. The watermarks are pushed into the same output, or\n+ * into a separate {@link WatermarkOutput}, if one is provided.\n+ *\n+ * <h2>Perdiodic Watermarks</h2>\n+ *\n+ * <p>This output does not implement periodic watermarks\n+ * <h2>Note on Performance Considerations</h2>\n+ *\n+ * <p>The methods {@link SourceOutput#collect(Object)} and {@link SourceOutput#collect(Object, long)}\n+ * are highly performance-critical (part of the hot loop). To make the code as JIT friendly as possible,\n+ * we want to have only a single implementation of these two methods, across all classes.\n+ * That way, the JIT compiler can de-virtualize (and inline) them better.\n+ *\n+ * <p>Currently, we have one implementation of these methods in the batch case (see class\n+ * {@link BatchTimestampsAndWatermarks}) and one for the streaming case (this class). When the JVM\n+ * is dedicated to a single job (or type of job) only one of these classes will be loaded. In mixed\n+ * job setups, we still have a bimorphic method (rather than a poly/-/mega-morphic method).\n+ *\n+ * @param <T> The type of emitted records.\n+ */\n+public class SourceOutputWithWatermarks<T> implements SourceOutput<T> {\n+\n+\tprivate final PushingAsyncDataInput.DataOutput<T> recordsOutput;\n+\n+\tprivate final TimestampAssigner<T> timestampAssigner;\n+\n+\tprivate final WatermarkGenerator<T> watermarkGenerator;\n+\n+\tprivate final WatermarkOutput onEventWatermarkOutput;\n+\n+\tprivate final WatermarkOutput periodicWatermarkOutput;\n+\n+\t/**\n+\t * Creates a new SourceOutputWithWatermarks that emits records to the given DataOutput\n+\t * and watermarks to the (possibly different) WatermarkOutput.\n+\t */\n+\tprotected SourceOutputWithWatermarks(\n+\t\t\tPushingAsyncDataInput.DataOutput<T> recordsOutput,\n+\t\t\tWatermarkOutput onEventWatermarkOutput,\n+\t\t\tWatermarkOutput periodicWatermarkOutput,\n+\t\t\tTimestampAssigner<T> timestampAssigner,\n+\t\t\tWatermarkGenerator<T> watermarkGenerator) {\n+\n+\t\tthis.recordsOutput = checkNotNull(recordsOutput);\n+\t\tthis.onEventWatermarkOutput = checkNotNull(onEventWatermarkOutput);\n+\t\tthis.periodicWatermarkOutput = checkNotNull(periodicWatermarkOutput);\n+\t\tthis.timestampAssigner = checkNotNull(timestampAssigner);\n+\t\tthis.watermarkGenerator = checkNotNull(watermarkGenerator);\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t// SourceOutput Methods\n+\t//\n+\t// Note that the two methods below are final, as a partial enforcement\n+\t// of the performance design goal mentioned in the class-level comment.\n+\t// ------------------------------------------------------------------------\n+\n+\t@Override\n+\tpublic final void collect(T record) {\n+\t\tcollect(record, Long.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MDczNw==", "bodyText": "Why is is a possibly different WatermarkOutput?", "url": "https://github.com/apache/flink/pull/12306#discussion_r429950737", "createdAt": "2020-05-25T14:01:04Z", "author": {"login": "becketqin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/source/SourceOutputWithWatermarks.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.source;\n+\n+import org.apache.flink.api.common.eventtime.TimestampAssigner;\n+import org.apache.flink.api.common.eventtime.Watermark;\n+import org.apache.flink.api.common.eventtime.WatermarkGenerator;\n+import org.apache.flink.api.common.eventtime.WatermarkOutput;\n+import org.apache.flink.api.connector.source.SourceOutput;\n+import org.apache.flink.streaming.runtime.io.PushingAsyncDataInput;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.runtime.tasks.ExceptionInChainedOperatorException;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * Implementation of the SourceOutput. The records emitted to this output are pushed into a given\n+ * {@link PushingAsyncDataInput.DataOutput}. The watermarks are pushed into the same output, or\n+ * into a separate {@link WatermarkOutput}, if one is provided.\n+ *\n+ * <h2>Perdiodic Watermarks</h2>\n+ *\n+ * <p>This output does not implement periodic watermarks\n+ * <h2>Note on Performance Considerations</h2>\n+ *\n+ * <p>The methods {@link SourceOutput#collect(Object)} and {@link SourceOutput#collect(Object, long)}\n+ * are highly performance-critical (part of the hot loop). To make the code as JIT friendly as possible,\n+ * we want to have only a single implementation of these two methods, across all classes.\n+ * That way, the JIT compiler can de-virtualize (and inline) them better.\n+ *\n+ * <p>Currently, we have one implementation of these methods in the batch case (see class\n+ * {@link BatchTimestampsAndWatermarks}) and one for the streaming case (this class). When the JVM\n+ * is dedicated to a single job (or type of job) only one of these classes will be loaded. In mixed\n+ * job setups, we still have a bimorphic method (rather than a poly/-/mega-morphic method).\n+ *\n+ * @param <T> The type of emitted records.\n+ */\n+public class SourceOutputWithWatermarks<T> implements SourceOutput<T> {\n+\n+\tprivate final PushingAsyncDataInput.DataOutput<T> recordsOutput;\n+\n+\tprivate final TimestampAssigner<T> timestampAssigner;\n+\n+\tprivate final WatermarkGenerator<T> watermarkGenerator;\n+\n+\tprivate final WatermarkOutput onEventWatermarkOutput;\n+\n+\tprivate final WatermarkOutput periodicWatermarkOutput;\n+\n+\t/**\n+\t * Creates a new SourceOutputWithWatermarks that emits records to the given DataOutput\n+\t * and watermarks to the (possibly different) WatermarkOutput.\n+\t */\n+\tprotected SourceOutputWithWatermarks(\n+\t\t\tPushingAsyncDataInput.DataOutput<T> recordsOutput,\n+\t\t\tWatermarkOutput onEventWatermarkOutput,\n+\t\t\tWatermarkOutput periodicWatermarkOutput,\n+\t\t\tTimestampAssigner<T> timestampAssigner,\n+\t\t\tWatermarkGenerator<T> watermarkGenerator) {\n+\n+\t\tthis.recordsOutput = checkNotNull(recordsOutput);\n+\t\tthis.onEventWatermarkOutput = checkNotNull(onEventWatermarkOutput);\n+\t\tthis.periodicWatermarkOutput = checkNotNull(periodicWatermarkOutput);\n+\t\tthis.timestampAssigner = checkNotNull(timestampAssigner);\n+\t\tthis.watermarkGenerator = checkNotNull(watermarkGenerator);\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t// SourceOutput Methods\n+\t//\n+\t// Note that the two methods below are final, as a partial enforcement\n+\t// of the performance design goal mentioned in the class-level comment.\n+\t// ------------------------------------------------------------------------\n+\n+\t@Override\n+\tpublic final void collect(T record) {\n+\t\tcollect(record, Long.MIN_VALUE);\n+\t}\n+\n+\t@Override\n+\tpublic final void collect(T record, long timestamp) {\n+\t\ttry {\n+\t\t\tfinal long assignedTimestamp = timestampAssigner.extractTimestamp(record, timestamp);\n+\n+\t\t\t// IMPORTANT: The event must be emitted before the watermark generator is called.\n+\t\t\trecordsOutput.emitRecord(new StreamRecord<>(record, assignedTimestamp));\n+\t\t\twatermarkGenerator.onEvent(record, assignedTimestamp, onEventWatermarkOutput);\n+\t\t} catch (ExceptionInChainedOperatorException e) {\n+\t\t\tthrow e;\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new ExceptionInChainedOperatorException(e);\n+\t\t}\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t// WatermarkOutput Methods\n+\t//\n+\t// These two methods are final as well, to enforce the contract that the\n+\t// watermarks from emitWatermark(Watermark) go to the same output as the\n+\t// watermarks from the watermarkGenerator.onEvent(...) calls in the collect(...)\n+\t// methods.\n+\t// ------------------------------------------------------------------------\n+\n+\t@Override\n+\tpublic final void emitWatermark(Watermark watermark) {\n+\t\tonEventWatermarkOutput.emitWatermark(watermark);\n+\t}\n+\n+\t@Override\n+\tpublic final void markIdle() {\n+\t\tonEventWatermarkOutput.markIdle();\n+\t}\n+\n+\tpublic final void emitPeriodicWatermark() {\n+\t\twatermarkGenerator.onPeriodicEmit(periodicWatermarkOutput);\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t// Factories\n+\t// ------------------------------------------------------------------------\n+\n+\t/**\n+\t * Creates a new SourceOutputWithWatermarks that emits records to the given DataOutput\n+\t * and watermarks to the (possibly different) WatermarkOutput.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2ODk3NQ==", "bodyText": "Is this an \"Internal\" class? I am wondering when should the annotations be put?", "url": "https://github.com/apache/flink/pull/12306#discussion_r429968975", "createdAt": "2020-05-25T14:38:57Z", "author": {"login": "becketqin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/source/TimestampsAndWatermarks.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.operators.source;\n+\n+import org.apache.flink.api.connector.source.ReaderOutput;\n+import org.apache.flink.streaming.runtime.io.PushingAsyncDataInput;\n+\n+/**\n+ * Basic interface for the timestamp extraction and watermark generation logic for the\n+ * {@link org.apache.flink.api.connector.source.SourceReader}.\n+ *\n+ * <p>Implementations of this class may or may not actually perform certain tasks, like watermark\n+ * generation. For example, the batch-oriented implementation typically skips all watermark generation\n+ * logic.\n+ *\n+ * @param <T> The type of the emitted records.\n+ */\n+public interface TimestampsAndWatermarks<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cf9d57642f568baf3a92d22ed7d320cd5b146b6", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/1cf9d57642f568baf3a92d22ed7d320cd5b146b6", "committedDate": "2020-05-24T22:26:05Z", "message": "[FLINK-17899][runtime] Remove unnecessary implementation of SourceContext in SourceOperatorStreamTask\n\nFewer implementations of the interface make de-virtualization of its methods easier."}, "afterCommit": {"oid": "e71b50ee095aaa43abf46f994c8ee0f2f0f3771e", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/e71b50ee095aaa43abf46f994c8ee0f2f0f3771e", "committedDate": "2020-05-26T16:58:35Z", "message": "[FLINK-XXXXX][Scala APIs] Use Scala inferred TypeInformation rather in StreamExecEnv.continuousSource().\n\nPreviously, the source went always through the Java Type Extractor stack and ignored the\nTypeInformation provided by the Scala Type Inferrence."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e71b50ee095aaa43abf46f994c8ee0f2f0f3771e", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/e71b50ee095aaa43abf46f994c8ee0f2f0f3771e", "committedDate": "2020-05-26T16:58:35Z", "message": "[FLINK-XXXXX][Scala APIs] Use Scala inferred TypeInformation rather in StreamExecEnv.continuousSource().\n\nPreviously, the source went always through the Java Type Extractor stack and ignored the\nTypeInformation provided by the Scala Type Inferrence."}, "afterCommit": {"oid": "4e18dbd8b3fce888e83e2f3519f107e3043dd9cb", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/4e18dbd8b3fce888e83e2f3519f107e3043dd9cb", "committedDate": "2020-05-26T20:19:33Z", "message": "[FLINK-17950][Scala DataStream API] Fix StreamExecutionEnvironment.continuousSource(...) method\n\n  - Fix return type from Unit to DataStream\n  - Forward inferred TypeInformation\n  - Add test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e18dbd8b3fce888e83e2f3519f107e3043dd9cb", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/4e18dbd8b3fce888e83e2f3519f107e3043dd9cb", "committedDate": "2020-05-26T20:19:33Z", "message": "[FLINK-17950][Scala DataStream API] Fix StreamExecutionEnvironment.continuousSource(...) method\n\n  - Fix return type from Unit to DataStream\n  - Forward inferred TypeInformation\n  - Add test"}, "afterCommit": {"oid": "b0954d3b81b93e68cd3bae202c7813d08a216d89", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/b0954d3b81b93e68cd3bae202c7813d08a216d89", "committedDate": "2020-05-26T20:30:17Z", "message": "[FLINK-17950][Scala DataStream API] Fix StreamExecutionEnvironment.continuousSource(...) method\n\n  - Fix return type from Unit to DataStream\n  - Forward inferred TypeInformation\n  - Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "506819f1dd60d8e0c68d12a7213849a76d0b345e", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/506819f1dd60d8e0c68d12a7213849a76d0b345e", "committedDate": "2020-05-27T15:54:18Z", "message": "[hotfix][runtime] Annotate ProcessingTimeCallback as a FunctionalInterface\n\nThe interface is used as such throught the runtime already, but is missing the annotation\nto guard the SAM nature."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "352c8f72a3109462a6a13b850ad148e522c83316", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/352c8f72a3109462a6a13b850ad148e522c83316", "committedDate": "2020-05-27T15:54:18Z", "message": "[hotfix][core] Add a constant for the special value \"NO_TIMESTAMP\"."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c94661124ab2f12dd102f414227c87695ab345", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/95c94661124ab2f12dd102f414227c87695ab345", "committedDate": "2020-05-27T15:54:18Z", "message": "[hotfix][DataStream API] Minor code cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "067d2f0cc5ad7c84d52997e62c115449a8f2c205", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/067d2f0cc5ad7c84d52997e62c115449a8f2c205", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17898][core] Remove Exceptions from signatures of SourceOutput methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6b5a7a2d7f6b405b6c0cbb0a6f6364eb87f2937", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/c6b5a7a2d7f6b405b6c0cbb0a6f6364eb87f2937", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17897][core] Classify FLIP-27 source API to @Experimental / @PublicEvolving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e01f5284b2a9b1d41ef49507598e2912b839206", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/8e01f5284b2a9b1d41ef49507598e2912b839206", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17903][core] WatermarkOutputMultiplexer supports String IDs and de-registration of outputs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "204536b4727367ecc9702bdc11f2df60a21f60bc", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/204536b4727367ecc9702bdc11f2df60a21f60bc", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17096][core] Simple performance improvements in WatermarkOutputMultiplexer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20713de1d06f2e03e8f15a4c209e7e8ffb9fbaa3", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/20713de1d06f2e03e8f15a4c209e7e8ffb9fbaa3", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17904][runtime] Add scheduleWithFixedDelay to ProcessingTimeService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5070ee9075cda6cb4048636ee1a9f3b384166fc7", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/5070ee9075cda6cb4048636ee1a9f3b384166fc7", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17899][runtime][refactor] Make ProcessingTimeService always available to operators.\n\nPreviously, it was not always supplied to operators to not create it unless needed.\nThis change puts a lazy factory into the parameters supplied to all operators."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bec7fb642c9402ac2ee73354b66e60cfa92389b", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/4bec7fb642c9402ac2ee73354b66e60cfa92389b", "committedDate": "2020-05-27T15:54:18Z", "message": "[FLINK-17899][core][refactor] Add a utility NoWatermarksGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f1a4c8071a6d71111185449e795b2f00fa49e9", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/54f1a4c8071a6d71111185449e795b2f00fa49e9", "committedDate": "2020-05-27T16:08:40Z", "message": "[FLINK-17899][runtime] Integrate FLIP-126 Watermarks with FLIP-27 Sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31d669e7c6d0cad88f31a3b6ca4fc5e7d178ddda", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/31d669e7c6d0cad88f31a3b6ca4fc5e7d178ddda", "committedDate": "2020-05-27T16:08:40Z", "message": "[FLINK-17899][runtime] Remove unnecessary implementation of SourceContext in SourceOperatorStreamTask\n\nFewer implementations of the interface make de-virtualization of its methods easier."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fdcbcea3e3968eec6b3b225458e2ce7b7ada1bd", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/4fdcbcea3e3968eec6b3b225458e2ce7b7ada1bd", "committedDate": "2020-05-27T16:08:40Z", "message": "[FLINK-17899][runtime] Add WatermarkStrategies to countinuousSource() methods in the DataStream API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b992cef660c26921608bae3fbc407f8e4b60dd1c", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/b992cef660c26921608bae3fbc407f8e4b60dd1c", "committedDate": "2020-05-27T16:08:40Z", "message": "[FLINK-17950][Scala DataStream API] Fix StreamExecutionEnvironment.continuousSource(...) method\n\n  - Fix return type from Unit to DataStream\n  - Forward inferred TypeInformation\n  - Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0804de54315856b5c3e16c5ed97ac4682ad01ae6", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/0804de54315856b5c3e16c5ed97ac4682ad01ae6", "committedDate": "2020-05-27T16:08:40Z", "message": "[hotfix][core] Improve JavaDocs for FLIP-27 sources."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5365e40b59fec77de126054746257f17a718fb5b", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/5365e40b59fec77de126054746257f17a718fb5b", "committedDate": "2020-05-27T16:08:40Z", "message": "[hotfix] Adjust License Headers for FLIP-27 sources to be same as the remaining code base"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0954d3b81b93e68cd3bae202c7813d08a216d89", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/b0954d3b81b93e68cd3bae202c7813d08a216d89", "committedDate": "2020-05-26T20:30:17Z", "message": "[FLINK-17950][Scala DataStream API] Fix StreamExecutionEnvironment.continuousSource(...) method\n\n  - Fix return type from Unit to DataStream\n  - Forward inferred TypeInformation\n  - Add test"}, "afterCommit": {"oid": "5365e40b59fec77de126054746257f17a718fb5b", "author": {"user": {"login": "StephanEwen", "name": "Stephan Ewen"}}, "url": "https://github.com/apache/flink/commit/5365e40b59fec77de126054746257f17a718fb5b", "committedDate": "2020-05-27T16:08:40Z", "message": "[hotfix] Adjust License Headers for FLIP-27 sources to be same as the remaining code base"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4776, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}