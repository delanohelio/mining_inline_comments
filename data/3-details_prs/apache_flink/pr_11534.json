{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjIyODM3", "number": 11534, "title": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint", "bodyText": "What is the purpose of the change\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data. The filled buffer would be inserted into respective ResultSubpartition queue in normal way.\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue.\nNote this PR relies on the #11515 which I picked some lines from in a separate commit.\nBrief change log\n\nDefine the initializeState inside ResultSubpartition and ResultPartitionWriter interfaces\nImplements the process of initializeState\nInvoke initializeState in StreamTask#beforeInvoke\n\nVerifying this change\n\nAdded unit tests in StreamTaskTest\nAdded unit tests in ResultPartitionTest\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-03-26T14:57:30Z", "url": "https://github.com/apache/flink/pull/11534", "merged": true, "mergeCommit": {"oid": "693cb6adc42d75d1db720b45013430a4c6817d4a"}, "closed": true, "closedAt": "2020-04-07T15:24:58Z", "author": {"login": "zhijiangW"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRsjuFAFqTM4MjY2MzM3NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVRzzwAFqTM4OTAzNDU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjYzMzc1", "url": "https://github.com/apache/flink/pull/11534#pullrequestreview-382663375", "createdAt": "2020-03-27T08:37:38Z", "commit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTc5NjYz", "url": "https://github.com/apache/flink/pull/11534#pullrequestreview-384179663", "createdAt": "2020-03-30T19:52:12Z", "commit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1MjoxM1rOF95veQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0OTo1MVrOF97q0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzQ5Nw==", "bodyText": "nit: we can get rid of this variable using for loop\nnit: import constant could improve readability", "url": "https://github.com/apache/flink/pull/11534#discussion_r400453497", "createdAt": "2020-03-30T19:52:13Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTg2NA==", "bodyText": "I see initializeState is called by parent.\nWhy not to pass ChannelStateReader as a parameter to initializeState then?\n(this would decrease coupling and increase testability)", "url": "https://github.com/apache/flink/pull/11534#discussion_r400455864", "createdAt": "2020-03-30T19:56:35Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Nzk3Mw==", "bodyText": "I guess update() was added to read the value that was written in ChannelStateReader?\nWouldn't creation of bufferConsumer after readOutputData() have the same effect?", "url": "https://github.com/apache/flink/pull/11534#discussion_r400457973", "createdAt": "2020-03-30T20:00:29Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);\n+\n+\t\t\t// check whether there are some states data filled in this time\n+\t\t\tbufferConsumer.update();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MzM3MA==", "bodyText": "The same as for PipelinedSubpartition: I think it's better to pass channelStateReader as a parameter to initializeState (to reduce coupling and other benefits).", "url": "https://github.com/apache/flink/pull/11534#discussion_r400463370", "createdAt": "2020-03-30T20:10:23Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartition.java", "diffHunk": "@@ -107,6 +108,8 @@\n \t@Nullable\n \tprotected final BufferCompressor bufferCompressor;\n \n+\tprivate final ChannelStateReader channelStateReader;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTA3Mg==", "bodyText": "Should we close the reader here? Or it will be used for InputChannels later?", "url": "https://github.com/apache/flink/pull/11534#discussion_r400485072", "createdAt": "2020-03-30T20:49:51Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -434,6 +434,13 @@ protected void beforeInvoke() throws Exception {\n \t\t\t// so that we avoid race conditions in the case that initializeState()\n \t\t\t// registers a timer, that fires before the open() is called.\n \t\t\toperatorChain.initializeStateAndOpenOperators(createStreamTaskStateInitializer());\n+\n+\t\t\tResultPartitionWriter[] writers = getEnvironment().getAllWriters();\n+\t\t\tif (writers != null) {\n+\t\t\t\tfor (ResultPartitionWriter writer : writers) {\n+\t\t\t\t\twriter.initializeState();\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/d0d0b6fef21a118932e878255aa40f10f17fe753", "committedDate": "2020-03-26T14:48:46Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}, "afterCommit": {"oid": "9e82da175780aa6a6ef19272a41c9a4796621e1a", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/9e82da175780aa6a6ef19272a41c9a4796621e1a", "committedDate": "2020-04-03T03:08:56Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e82da175780aa6a6ef19272a41c9a4796621e1a", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/9e82da175780aa6a6ef19272a41c9a4796621e1a", "committedDate": "2020-04-03T03:08:56Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}, "afterCommit": {"oid": "2670a045bd9c9c4c75e7a22bf188fc673c85a062", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/2670a045bd9c9c4c75e7a22bf188fc673c85a062", "committedDate": "2020-04-03T05:00:01Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MTMyMzMz", "url": "https://github.com/apache/flink/pull/11534#pullrequestreview-387132333", "createdAt": "2020-04-03T10:20:31Z", "commit": {"oid": "2670a045bd9c9c4c75e7a22bf188fc673c85a062"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozMVrOGAPcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozMVrOGAPcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjMwMQ==", "bodyText": "nit: space", "url": "https://github.com/apache/flink/pull/11534#discussion_r402906301", "createdAt": "2020-04-03T10:20:31Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/writer/RecordWriterTest.java", "diffHunk": "@@ -464,6 +456,59 @@ public void testIsAvailableOrNot() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testEmitRecordWithPartitionStateRecovery() throws Exception {\n+\t\tfinal int totalBuffers = 10; // enough for both states and normal records\n+\t\tfinal int totalStates = 2;\n+\t\tfinal int[] states = {1, 2, 3, 4};\n+\t\tfinal int[] records = {5, 6, 7, 8};\n+\t\tfinal int bufferSize = states.length * Integer.BYTES;\n+\n+\t\tfinal NetworkBufferPool globalPool = new NetworkBufferPool(totalBuffers, bufferSize , 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2670a045bd9c9c4c75e7a22bf188fc673c85a062"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34e52b4461b08091ce2d019537d2ceda1ca068b", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/c34e52b4461b08091ce2d019537d2ceda1ca068b", "committedDate": "2020-04-07T09:57:18Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2670a045bd9c9c4c75e7a22bf188fc673c85a062", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/2670a045bd9c9c4c75e7a22bf188fc673c85a062", "committedDate": "2020-04-03T05:00:01Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}, "afterCommit": {"oid": "c34e52b4461b08091ce2d019537d2ceda1ca068b", "author": {"user": {"login": "zhijiangW", "name": "zhijiang"}}, "url": "https://github.com/apache/flink/commit/c34e52b4461b08091ce2d019537d2ceda1ca068b", "committedDate": "2020-04-07T09:57:18Z", "message": "[FLINK-16537][network] Implement ResultPartition state recovery for unaligned checkpoint\n\nDuring state recovery for unaligned checkpoint, the partition state should also be recovered besides with existing operator states.\n\nThe ResultPartition would request buffer from local pool and then interact with ChannelStateReader to fill in the state data.\nThe filled buffer would be inserted into respective ResultSubpartition queue in normal way.\n\nIt should guarantee that op can not process any inputs before finishing all the output recovery to avoid mis-order issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDM0NTY4", "url": "https://github.com/apache/flink/pull/11534#pullrequestreview-389034568", "createdAt": "2020-04-07T11:43:28Z", "commit": {"oid": "c34e52b4461b08091ce2d019537d2ceda1ca068b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2598, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}