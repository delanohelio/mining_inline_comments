{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzY1NzE4", "number": 11025, "title": "[FLINK-15919][core][mem] MemoryManager shouldn't allow releasing more memory than reserved", "bodyText": "What is the purpose of the change\nCurrently MemoryManager allows to release more memory than the left reserved size and this PR aims at fixing the problem.\nBrief change log\nChange the MemoryManager.releaseMemory method, recording the actual memory to release during the reservedMemory computation and use it for releasing budgetByType.\nVerifying this change\nThis change added a new testMemoryReleaseMoreThanReserved test in MemoryManagerTest to cover the issue case.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-02-05T13:11:11Z", "url": "https://github.com/apache/flink/pull/11025", "merged": true, "mergeCommit": {"oid": "f4aa9f81ccc052a7802aee6ad3dfee2b2f8be514"}, "closed": true, "closedAt": "2020-02-06T11:36:12Z", "author": {"login": "carp84"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBVz4igH2gAyMzcxMzY1NzE4OjdkNjA5YThjOTIyMGFhYmM5MmFjZmY4YWRmZjI4OTY4ZTE3ODBmYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBZ2MxAFqTM1MzkxNTE5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0", "author": {"user": {"login": "carp84", "name": "Yu Li"}}, "url": "https://github.com/apache/flink/commit/7d609a8c9220aabc92acff8adff28968e1780fc0", "committedDate": "2020-02-05T13:04:41Z", "message": "[FLINK-15919][core][mem] MemoryManager shouldn't allow releasing more memory than reserved"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzA1OTY3", "url": "https://github.com/apache/flink/pull/11025#pullrequestreview-353705967", "createdAt": "2020-02-05T13:17:34Z", "commit": {"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNzozNFrOFl3VDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzozMDo1NlrOFl3ujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0ODE0Mg==", "bodyText": "I'd suggest to create a separate test for this part.", "url": "https://github.com/apache/flink/pull/11025#discussion_r375248142", "createdAt": "2020-02-05T13:17:34Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java", "diffHunk": "@@ -264,6 +265,30 @@ public void testMemoryReservation() throws MemoryReservationException {\n \t\tmemoryManager.releaseAllMemory(owner, MemoryType.OFF_HEAP);\n \t}\n \n+\t@Test\n+\tpublic void testMemoryReleaseMoreThanReserved() throws MemoryReservationException {\n+\t\tObject owner = new Object();\n+\t\tObject owner2 = new Object();\n+\t\tlong totalHeapMemorySize = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\t// to prevent memory size exceeding the maximum, reserve some memory from another owner.\n+\t\tmemoryManager.reserveMemory(owner2, MemoryType.HEAP, PAGE_SIZE);\n+\n+\t\t// test reserve once and release multiple times\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tlong heapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\n+\t\t// test release more than the left reserved size\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE / 2);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\theapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\t\tmemoryManager.releaseAllMemory(owner2, MemoryType.HEAP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1NDY3MQ==", "bodyText": "I'd suggest to change this block into:\npublic void releaseMemory(Object owner, MemoryType memoryType, long size) {\n\tcheckMemoryReservationPreconditions(owner, memoryType, size);\n\tif (size == 0L) {\n\t\treturn;\n\t}\n\n\treservedMemory.compute(owner, (o, reservations) -> {\n\t\tif (reservations != null) {\n\t\t\treservations.compute(\n\t\t\t\tmemoryType,\n\t\t\t\t(mt, currentlyReserved) -> {\n\t\t\t\t\tlong newReservedMemory = 0;\n\t\t\t\t\tif (currentlyReserved != null) {\n\t\t\t\t\t\tif (currentlyReserved < size) {\n\t\t\t\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\t\t\"Trying to release more memory {} than it was reserved {} so far for the owner {}\",\n\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\tcurrentlyReserved,\n\t\t\t\t\t\t\t\towner);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewReservedMemory = releaseAndCalculateReservedMemory(size, memoryType, currentlyReserved);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn newReservedMemory == 0 ? null : newReservedMemory;\n\t\t\t\t});\n\t\t}\n\t\t//noinspection ReturnOfNull\n\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n\t});\n}\n\nprivate long releaseAndCalculateReservedMemory(long memoryToFree, MemoryType memoryType, long currentlyReserved) {\n\tfinal long effectiveMemoryToRelease = Math.min(currentlyReserved, memoryToFree);\n\tbudgetByType.releaseBudgetForKey(memoryType, effectiveMemoryToRelease);\n\n\treturn currentlyReserved - effectiveMemoryToRelease;\n}", "url": "https://github.com/apache/flink/pull/11025#discussion_r375254671", "createdAt": "2020-02-05T13:30:56Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java", "diffHunk": "@@ -501,17 +503,21 @@ public void releaseMemory(Object owner, MemoryType memoryType, long size) {\n \t\t\t\t\t\t\t\tsize,\n \t\t\t\t\t\t\t\tcurrentlyReserved == null ? 0 : currentlyReserved,\n \t\t\t\t\t\t\t\towner);\n+\t\t\t\t\t\t\tif (currentlyReserved != null) {\n+\t\t\t\t\t\t\t\treleasedSize.set(currentlyReserved);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t//noinspection ReturnOfNull\n \t\t\t\t\t\t\treturn null;\n \t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\treleasedSize.set(size);\n \t\t\t\t\t\t\treturn currentlyReserved - size;\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t\t}\n \t\t\t//noinspection ReturnOfNull\n \t\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n \t\t});\n-\t\tbudgetByType.releaseBudgetForKey(memoryType, size);\n+\t\tbudgetByType.releaseBudgetForKey(memoryType, releasedSize.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d73ea754eb0bf68b062c4981c1c8bbcd370fdbb0", "author": {"user": {"login": "carp84", "name": "Yu Li"}}, "url": "https://github.com/apache/flink/commit/d73ea754eb0bf68b062c4981c1c8bbcd370fdbb0", "committedDate": "2020-02-05T17:03:07Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa43635bc165b55a7dbc170b4cba7fb28d5979e", "author": {"user": {"login": "carp84", "name": "Yu Li"}}, "url": "https://github.com/apache/flink/commit/eaa43635bc165b55a7dbc170b4cba7fb28d5979e", "committedDate": "2020-02-05T17:04:55Z", "message": "Minor: remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea980f386e41dac4d34bf6950f9ed1094ac6f6f3", "author": {"user": {"login": "carp84", "name": "Yu Li"}}, "url": "https://github.com/apache/flink/commit/ea980f386e41dac4d34bf6950f9ed1094ac6f6f3", "committedDate": "2020-02-05T17:31:31Z", "message": "Minor: Reinforce test case not to exceeding the budget limit with multiple memory release"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTE1MTkz", "url": "https://github.com/apache/flink/pull/11025#pullrequestreview-353915193", "createdAt": "2020-02-05T17:46:50Z", "commit": {"oid": "ea980f386e41dac4d34bf6950f9ed1094ac6f6f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4222, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}