{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTMwMTYz", "number": 14510, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1MDo0NlrOFK2Mag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyNjoyNFrOFK25LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTE3OTk0OnYy", "diffSide": "RIGHT", "path": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMDo1MDo0NlrOINtR8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMDoxNjo0N1rOIR6v2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NDI3NA==", "bodyText": "It is not required to extend this interface since the FrontMetricGroup works against the AbstractMetricGroup, and we currently don't want to extend this interface further.\n(This will also render some other changes moot)", "url": "https://github.com/apache/flink/pull/14510#discussion_r551244274", "createdAt": "2021-01-04T10:50:46Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java", "diffHunk": "@@ -186,6 +186,15 @@\n      */\n     Map<String, String> getAllVariables();\n \n+    /**\n+     * Returns a map of all variables and their associated value, for example {@code\n+     * {\"<host>\"=\"host-7\", \"<tm_id>\"=\"taskmanager-2\"}}.\n+     *\n+     * @param filter character filter which is applied to the variables and values if not null.\n+     * @return map of all variables and their associated value\n+     */\n+    Map<String, String> getAllVariables(CharacterFilter filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkzMzg0MA==", "bodyText": "Yes, I hesitated on that one, I tried to make it as general as possible. But if you don't want to extend the interface, fair enough, I'll revert the interface extension and related changes.\nBesides, do you think that having the getAllVariables(CharacterFilter filter) version in AbstractMetricGroup makes sense or only in FrontMetricGroup ?", "url": "https://github.com/apache/flink/pull/14510#discussion_r554933840", "createdAt": "2021-01-11T10:02:02Z", "author": {"login": "echauchot"}, "path": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java", "diffHunk": "@@ -186,6 +186,15 @@\n      */\n     Map<String, String> getAllVariables();\n \n+    /**\n+     * Returns a map of all variables and their associated value, for example {@code\n+     * {\"<host>\"=\"host-7\", \"<tm_id>\"=\"taskmanager-2\"}}.\n+     *\n+     * @param filter character filter which is applied to the variables and values if not null.\n+     * @return map of all variables and their associated value\n+     */\n+    Map<String, String> getAllVariables(CharacterFilter filter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NDI3NA=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDk5NjY4Nw==", "bodyText": "I think we will need it in the AbstractMetricGroup.\nIdeally no class works directly against the FrontMetricGroup; this currently only happens for some reporters because we do not find the time to properly move getLogicalScope() into the MetricGroup interface.", "url": "https://github.com/apache/flink/pull/14510#discussion_r554996687", "createdAt": "2021-01-11T11:56:56Z", "author": {"login": "zentol"}, "path": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java", "diffHunk": "@@ -186,6 +186,15 @@\n      */\n     Map<String, String> getAllVariables();\n \n+    /**\n+     * Returns a map of all variables and their associated value, for example {@code\n+     * {\"<host>\"=\"host-7\", \"<tm_id>\"=\"taskmanager-2\"}}.\n+     *\n+     * @param filter character filter which is applied to the variables and values if not null.\n+     * @return map of all variables and their associated value\n+     */\n+    Map<String, String> getAllVariables(CharacterFilter filter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NDI3NA=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY1OTIyNA==", "bodyText": "ok clear, thanks", "url": "https://github.com/apache/flink/pull/14510#discussion_r555659224", "createdAt": "2021-01-12T10:16:47Z", "author": {"login": "echauchot"}, "path": "flink-metrics/flink-metrics-core/src/main/java/org/apache/flink/metrics/MetricGroup.java", "diffHunk": "@@ -186,6 +186,15 @@\n      */\n     Map<String, String> getAllVariables();\n \n+    /**\n+     * Returns a map of all variables and their associated value, for example {@code\n+     * {\"<host>\"=\"host-7\", \"<tm_id>\"=\"taskmanager-2\"}}.\n+     *\n+     * @param filter character filter which is applied to the variables and values if not null.\n+     * @return map of all variables and their associated value\n+     */\n+    Map<String, String> getAllVariables(CharacterFilter filter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI0NDI3NA=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTIzMTYyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowNjoyOFrOINtv8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMjowODowM1rOIRSpWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MTk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CharacterFilter wrapWithDefaultFilter(CharacterFilter filter, char delimiter) {\n          \n          \n            \n                private CharacterFilter wrapWithDefaultFilter(CharacterFilter filter, char delimiter) {", "url": "https://github.com/apache/flink/pull/14510#discussion_r551251953", "createdAt": "2021-01-04T11:06:28Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -119,12 +122,28 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         this.variables = new Map[registry.getNumberReporters() + 1];\n     }\n \n+    CharacterFilter wrapWithDefaultFilter(CharacterFilter filter, char delimiter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMjIwMg==", "bodyText": "oups I forgot to reduce visibilities, thanks for catching !", "url": "https://github.com/apache/flink/pull/14510#discussion_r555002202", "createdAt": "2021-01-11T12:08:03Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -119,12 +122,28 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         this.variables = new Map[registry.getNumberReporters() + 1];\n     }\n \n+    CharacterFilter wrapWithDefaultFilter(CharacterFilter filter, char delimiter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MTk1Mw=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTIzNDgwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMTowNzozNVrOINtx0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMjowODozMVrOIRSqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MjQzNA==", "bodyText": "I'd like to keep the reporterIndex as the first argument because all other arguments are somewhat dependent on it", "url": "https://github.com/apache/flink/pull/14510#discussion_r551252434", "createdAt": "2021-01-04T11:07:35Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -119,12 +122,28 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         this.variables = new Map[registry.getNumberReporters() + 1];\n     }\n \n+    CharacterFilter wrapWithDefaultFilter(CharacterFilter filter, char delimiter) {\n+        CharacterFilter defaultFilter = input -> input.replace(delimiter, DEFAULT_REPLACEMENT);\n+        return filter == null\n+                ? defaultFilter\n+                : input -> defaultFilter.filterCharacters(filter.filterCharacters(input));\n+    }\n+\n     @Override\n     public Map<String, String> getAllVariables() {\n-        return internalGetAllVariables(0, Collections.emptySet());\n+        return internalGetAllVariables(null, 0, Collections.emptySet(), registry.getDelimiter());\n+    }\n+\n+    @Override\n+    public Map<String, String> getAllVariables(CharacterFilter filter) {\n+        return internalGetAllVariables(filter, 0, Collections.emptySet(), registry.getDelimiter());\n     }\n \n-    public Map<String, String> getAllVariables(int reporterIndex, Set<String> excludedVariables) {\n+    public Map<String, String> getAllVariables(\n+            CharacterFilter filter,\n+            int reporterIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTAwMjQzMg==", "bodyText": "+1", "url": "https://github.com/apache/flink/pull/14510#discussion_r555002432", "createdAt": "2021-01-11T12:08:31Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -119,12 +122,28 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         this.variables = new Map[registry.getNumberReporters() + 1];\n     }\n \n+    CharacterFilter wrapWithDefaultFilter(CharacterFilter filter, char delimiter) {\n+        CharacterFilter defaultFilter = input -> input.replace(delimiter, DEFAULT_REPLACEMENT);\n+        return filter == null\n+                ? defaultFilter\n+                : input -> defaultFilter.filterCharacters(filter.filterCharacters(input));\n+    }\n+\n     @Override\n     public Map<String, String> getAllVariables() {\n-        return internalGetAllVariables(0, Collections.emptySet());\n+        return internalGetAllVariables(null, 0, Collections.emptySet(), registry.getDelimiter());\n+    }\n+\n+    @Override\n+    public Map<String, String> getAllVariables(CharacterFilter filter) {\n+        return internalGetAllVariables(filter, 0, Collections.emptySet(), registry.getDelimiter());\n     }\n \n-    public Map<String, String> getAllVariables(int reporterIndex, Set<String> excludedVariables) {\n+    public Map<String, String> getAllVariables(\n+            CharacterFilter filter,\n+            int reporterIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1MjQzNA=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI1OTM5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroupTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToxNTozMFrOINt_ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxMzoyODo1MVrOIRVTvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NTk2Ng==", "bodyText": "There should also be a test that an exclusion that matches the filtered variable (e.g., k_1) is not applied. (i.e., that exclusions are always applied before they are filtered)\nThat said, I don't think that currently works correctly if a group retrieves variables from a parent, because they will already have the default filter applied to them.", "url": "https://github.com/apache/flink/pull/14510#discussion_r551255966", "createdAt": "2021-01-04T11:15:30Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroupTest.java", "diffHunk": "@@ -415,4 +419,119 @@ public void testGetAllVariablesDoesNotDeadlock() throws InterruptedException {\n             childRegisteringThread.join();\n         }\n     }\n+\n+    @Test\n+    public void testReporterDelimiterIsFiltered() throws Exception {\n+        MetricConfig metricConfig = new MetricConfig();\n+        metricConfig.setProperty(\n+                ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf('*'));\n+\n+        MetricRegistryImpl metricRegistry =\n+                new MetricRegistryImpl(\n+                        MetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n+                        Collections.singletonList(\n+                                ReporterSetup.forReporter(\n+                                        \"test\", metricConfig, new TestReporter())));\n+        try {\n+            String metricName = \"Test*Counter\";\n+            TaskManagerMetricGroup metricGroup =\n+                    new TaskManagerMetricGroup(metricRegistry, \"hos*t\", \"i*d\");\n+            Counter counter = metricGroup.counter(metricName);\n+            TestReporter reporter = (TestReporter) metricRegistry.getReporters().get(0);\n+            final String expected =\n+                    String.format(\n+                            \"%s%s%s%s%s%s%s\",\n+                            \"hos*t\".replace('*', AbstractMetricGroup.DEFAULT_REPLACEMENT),\n+                            '*',\n+                            TaskExecutor.TASK_MANAGER_NAME.replace(\n+                                    '*', AbstractMetricGroup.DEFAULT_REPLACEMENT),\n+                            '*',\n+                            \"i*d\".replace('*', AbstractMetricGroup.DEFAULT_REPLACEMENT),\n+                            '*',\n+                            metricName.replace('*', AbstractMetricGroup.DEFAULT_REPLACEMENT));\n+            assertEquals(expected, reporter.getCounters().get(counter));\n+        } finally {\n+            metricRegistry.shutdown().get();\n+        }\n+    }\n+\n+    private static class TestReporter extends AbstractReporter {\n+        @Override\n+        public void open(MetricConfig config) {}\n+\n+        @Override\n+        public void close() {}\n+\n+        public Map<Counter, String> getCounters() {\n+            return counters;\n+        }\n+\n+        @Override\n+        public String filterCharacters(String input) {\n+            return input;\n+        }\n+    }\n+\n+    @Test\n+    public void testLowLevelGetAllVariablesWithFilterAndDelimiter() throws Exception {\n+        MetricRegistry registry = TestingMetricRegistry.builder().setNumberReporters(2).build();\n+\n+        AbstractMetricGroup<?> group =\n+                new GenericMetricGroup(registry, null, \"test\") {\n+                    @Override\n+                    protected void putVariables(Map<String, String> variables) {\n+                        variables.put(\"k*1\", \"v*1\");\n+                        variables.put(\"k*2\", \"v*2\");\n+                    }\n+                };\n+\n+        Map<String, String> allVariables;\n+        final CharacterFilter simpleFilter = input -> input.replace('1', 'a');\n+\n+        // test filter wrapping\n+        allVariables = group.getAllVariables(simpleFilter, 0, Collections.emptySet(), '*');\n+        assertThat(allVariables, IsMapContaining.hasKey(\"k_a\"));\n+        assertThat(allVariables, IsMapContaining.hasValue(\"v_a\"));\n+\n+        // test default filter, add exclusions to avoid cache hit\n+        allVariables = group.getAllVariables(null, 1, Collections.singleton(\"k*2\"), '*');\n+        assertThat(allVariables, IsMapContaining.hasKey(\"k_1\"));\n+        assertThat(allVariables, IsMapContaining.hasValue(\"v_1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0NTgyMA==", "bodyText": "as stated in the comment in the code, this exclusion is added only to avoid cache hit. It is not clear enough, I'll replace it by just recreating the group.\nRegarding exclusions, I'll add proper tests for filtered exclusions, thanks for pointing out.", "url": "https://github.com/apache/flink/pull/14510#discussion_r555045820", "createdAt": "2021-01-11T13:28:51Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroupTest.java", "diffHunk": "@@ -415,4 +419,119 @@ public void testGetAllVariablesDoesNotDeadlock() throws InterruptedException {\n             childRegisteringThread.join();\n         }\n     }\n+\n+    @Test\n+    public void testReporterDelimiterIsFiltered() throws Exception {\n+        MetricConfig metricConfig = new MetricConfig();\n+        metricConfig.setProperty(\n+                ConfigConstants.METRICS_REPORTER_SCOPE_DELIMITER, String.valueOf('*'));\n+\n+        MetricRegistryImpl metricRegistry =\n+                new MetricRegistryImpl(\n+                        MetricRegistryConfiguration.defaultMetricRegistryConfiguration(),\n+                        Collections.singletonList(\n+                                ReporterSetup.forReporter(\n+                                        \"test\", metricConfig, new TestReporter())));\n+        try {\n+            String metricName = \"Test*Counter\";\n+            TaskManagerMetricGroup metricGroup =\n+                    new TaskManagerMetricGroup(metricRegistry, \"hos*t\", \"i*d\");\n+            Counter counter = metricGroup.counter(metricName);\n+            TestReporter reporter = (TestReporter) metricRegistry.getReporters().get(0);\n+            final String expected =\n+                    String.format(\n+                            \"%s%s%s%s%s%s%s\",\n+                            \"hos*t\".replace('*', AbstractMetricGroup.DEFAULT_REPLACEMENT),\n+                            '*',\n+                            TaskExecutor.TASK_MANAGER_NAME.replace(\n+                                    '*', AbstractMetricGroup.DEFAULT_REPLACEMENT),\n+                            '*',\n+                            \"i*d\".replace('*', AbstractMetricGroup.DEFAULT_REPLACEMENT),\n+                            '*',\n+                            metricName.replace('*', AbstractMetricGroup.DEFAULT_REPLACEMENT));\n+            assertEquals(expected, reporter.getCounters().get(counter));\n+        } finally {\n+            metricRegistry.shutdown().get();\n+        }\n+    }\n+\n+    private static class TestReporter extends AbstractReporter {\n+        @Override\n+        public void open(MetricConfig config) {}\n+\n+        @Override\n+        public void close() {}\n+\n+        public Map<Counter, String> getCounters() {\n+            return counters;\n+        }\n+\n+        @Override\n+        public String filterCharacters(String input) {\n+            return input;\n+        }\n+    }\n+\n+    @Test\n+    public void testLowLevelGetAllVariablesWithFilterAndDelimiter() throws Exception {\n+        MetricRegistry registry = TestingMetricRegistry.builder().setNumberReporters(2).build();\n+\n+        AbstractMetricGroup<?> group =\n+                new GenericMetricGroup(registry, null, \"test\") {\n+                    @Override\n+                    protected void putVariables(Map<String, String> variables) {\n+                        variables.put(\"k*1\", \"v*1\");\n+                        variables.put(\"k*2\", \"v*2\");\n+                    }\n+                };\n+\n+        Map<String, String> allVariables;\n+        final CharacterFilter simpleFilter = input -> input.replace('1', 'a');\n+\n+        // test filter wrapping\n+        allVariables = group.getAllVariables(simpleFilter, 0, Collections.emptySet(), '*');\n+        assertThat(allVariables, IsMapContaining.hasKey(\"k_a\"));\n+        assertThat(allVariables, IsMapContaining.hasValue(\"v_a\"));\n+\n+        // test default filter, add exclusions to avoid cache hit\n+        allVariables = group.getAllVariables(null, 1, Collections.singleton(\"k*2\"), '*');\n+        assertThat(allVariables, IsMapContaining.hasKey(\"k_1\"));\n+        assertThat(allVariables, IsMapContaining.hasValue(\"v_1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI1NTk2Ng=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ2OTI5NDUyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxMToyNjoyNFrOINuTZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMzo0MToyMFrOISvreQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ==", "bodyText": "This implies that variables returned by parent.getAllVariables() already had a filter applied to them for a delimiter that may not be matching delimiter (i.e., registry.getDelimiter()).\nFurthermore, this also means that exclusion may not be applied correctly.\nI think we need to restrict the filtering to cases where the calls originate from a reporter.", "url": "https://github.com/apache/flink/pull/14510#discussion_r551261031", "createdAt": "2021-01-04T11:26:24Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4OTc1OA==", "bodyText": "ah yeah, thanks for pointing out ! Anyway same goes for the AbstractMetricGroup#getMetricIdentifier() case no ?", "url": "https://github.com/apache/flink/pull/14510#discussion_r555089758", "createdAt": "2021-01-11T14:36:42Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEyNjU5MQ==", "bodyText": "It shouldn't be a problem for getMetricIdentifier(); this method only relies on this.scopeComponents which is constant and does not fetch anything from parent groups.\nMaybe I haven't explained this well.\nLet's say the delimiter is -, the global default delimiter (returned by registry.getDelimiter()) is ., and we have a variable defined in a parent group called -aaa..\nThe result we want is _aaa..\nThe problem is you retrieved this variable in the first place via parent.getAllVariables(). This one doesn't know about your filter, and uses the delimiter returned by registry.getDelimiter(). It will apply this filter, resulting in -aaa_, and when your filter is applied we end up with _aaa_, which is not what we want.\nThe easiest way I see to solve is to only wrap the filter if the cachingIndexis greater than 0.", "url": "https://github.com/apache/flink/pull/14510#discussion_r555126591", "createdAt": "2021-01-11T15:28:14Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTY3NDUzNQ==", "bodyText": "thanks for the details.\nIt was clear already for the getAllVariables() inheritance case.", "url": "https://github.com/apache/flink/pull/14510#discussion_r555674535", "createdAt": "2021-01-12T10:40:42Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTgyNDQ5OA==", "bodyText": "besides I don't think that testing cachingIndex > 0 is enough to detect that the call was done by a reporter because if excluded variables are empty cachingIndex is set to 0 (to save memory space) even when the call is done by a reporter.", "url": "https://github.com/apache/flink/pull/14510#discussion_r555824498", "createdAt": "2021-01-12T14:44:41Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE2MTc2Mg==", "bodyText": "Good catch; we have to extend that optimization to only trigger if there is neither a filter nor any excluded variables.", "url": "https://github.com/apache/flink/pull/14510#discussion_r556161762", "createdAt": "2021-01-12T23:21:24Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjUyNjQ1Nw==", "bodyText": "what I did for clarity is that internalGetAllVariables takes a boolean calledFromReporter that is true when the provided reporterIndex is valid. AbstractMetricGroup#getAllVariables() and AbstractMetricGroup#getAllVariables(CharacterFilter filter) that call this method with registry.getDelimiter() pass calledFromReporter == false.\nDoes it look good to you ?", "url": "https://github.com/apache/flink/pull/14510#discussion_r556526457", "createdAt": "2021-01-13T13:41:20Z", "author": {"login": "echauchot"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/groups/AbstractMetricGroup.java", "diffHunk": "@@ -137,11 +156,18 @@ public AbstractMetricGroup(MetricRegistry registry, String[] scope, A parent) {\n         // if no variables are excluded (which is the default!) we re-use the general variables map\n         // to save space\n         return internalGetAllVariables(\n-                excludedVariables.isEmpty() ? 0 : reporterIndex, excludedVariables);\n+                filter,\n+                excludedVariables.isEmpty() ? 0 : reporterIndex,\n+                excludedVariables,\n+                delimiter);\n     }\n \n     private Map<String, String> internalGetAllVariables(\n-            int cachingIndex, Set<String> excludedVariables) {\n+            CharacterFilter filter,\n+            int cachingIndex,\n+            Set<String> excludedVariables,\n+            char delimiter) {\n+        CharacterFilter newFilter = wrapWithDefaultFilter(filter, delimiter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MTAzMQ=="}, "originalCommit": {"oid": "932157724cf6bd963643aa9970c82ce0e0b2c8fe"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4594, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}