{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTU0ODI3", "number": 13551, "title": "[FLINK-19520][configuration] Add randomization of checkpoint config.", "bodyText": "What is the purpose of the change\nWith the larger refactoring of checkpoint alignment and the additional of more unaligned checkpoint settings, it becomes increasingly important to provide a large test coverage.\nUnfortunately, adding sufficient test cases in a test matrix appears to be unrealistic: many of the encountered issues were subtle, sometimes caused by race conditions or unusual test configurations and often only visible in e2e tests.\nHence, we like to rely on all existing Flink tests to provide a sufficient coverage for checkpointing. However, as more and more options in unaligned checkpoint are going to be implemented in this and the upcoming release, running all Flink tests - especially e2e - in a test matrix is prohibitively expensive, even for nightly builds.\nThus, we want to introduce test randomization for all tests that do not use a specific checkpointing mode. In a similar way, we switched from aligned checkpoints by default in tests to unaligned checkpoint during the last release cycle.\nTo not burden the developers of other components too much, we set the following requirements:\n\nRandomization should be seeded in a way that both builds on Azure pipelines and local builds will result in the same settings to ease debugging and ensure reproducibility.\nRandomized options should be shown in the test log.\nExecution order of test cases will not influence the randomization.\nRandomization is hidden, no change on any test is needed.\nRandomization only happens during local/remote test execution. User deployments are not affected.\nTest developers are able to avoid randomization by explicitly providing checkpoint configs.\n\nBrief change log\n\nAdd generic method to choose random values for checkpoint config.\nUse it for uninitialized \"execution.checkpointing.unaligned\".\nAdds flag to enable randomization in root pom. User code will not trigger randomization but chooses constant default values.\n\nVerifying this change\n\nNot covered (yet)\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-10-07T10:42:24Z", "url": "https://github.com/apache/flink/pull/13551", "merged": true, "mergeCommit": {"oid": "4fd2cec5b9390e6f7e26b0a86b5f4886ff7e68e5"}, "closed": true, "closedAt": "2021-02-10T13:31:27Z", "author": {"login": "AHeise"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQN8AeABqjM4NTA4OTEzMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd4rSvfgBqjQzMTMyMjIyNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b037bbc8fd11fce426527e4caefccd075ddc4b6", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/5b037bbc8fd11fce426527e4caefccd075ddc4b6", "committedDate": "2020-10-07T10:38:26Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging."}, "afterCommit": {"oid": "fe4a6228d31108e71a6e9faab97598ffa9a09b8b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/fe4a6228d31108e71a6e9faab97598ffa9a09b8b", "committedDate": "2020-10-07T14:34:08Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe4a6228d31108e71a6e9faab97598ffa9a09b8b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/fe4a6228d31108e71a6e9faab97598ffa9a09b8b", "committedDate": "2020-10-07T14:34:08Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging."}, "afterCommit": {"oid": "a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "committedDate": "2020-10-08T12:19:54Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a56066797b457d917a4a7752ec136e3efd7a0a79", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/a56066797b457d917a4a7752ec136e3efd7a0a79", "committedDate": "2020-10-08T12:22:47Z", "message": "[FLINK-XXX][network] Fix union gate polling gates through iterator.\n\nThe iterator bypasses priority counting leading to (numPriorityElements > size) in PrioritizedDeque. That in turn would leave a UnionInputGate with permament priority notification.\nAlso harden PrioritizedDeque to disallow such operation + test."}, "afterCommit": {"oid": "9fc0e6589dc686dbec7cca9d155908ba7f30e474", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/9fc0e6589dc686dbec7cca9d155908ba7f30e474", "committedDate": "2020-10-08T12:25:17Z", "message": "[FLINK-XXX][network] Double-check if gate still has priority buffer when enqueuing in UnionInputGate.\n\nSince notification is not atomic in respect to gate enqueuing, priority event already polled by task thread when netty enqueues the gate."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fc0e6589dc686dbec7cca9d155908ba7f30e474", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/9fc0e6589dc686dbec7cca9d155908ba7f30e474", "committedDate": "2020-10-08T12:25:17Z", "message": "[FLINK-XXX][network] Double-check if gate still has priority buffer when enqueuing in UnionInputGate.\n\nSince notification is not atomic in respect to gate enqueuing, priority event already polled by task thread when netty enqueues the gate."}, "afterCommit": {"oid": "a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/a875c6b63432a371dd2928d6c3bdb2d4627c5f81", "committedDate": "2020-10-08T12:19:54Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures test failures are deterministic based on the commit id and ease debugging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a2942d056be51f8064a94bfb064143decda77db", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/4a2942d056be51f8064a94bfb064143decda77db", "committedDate": "2020-10-09T06:52:53Z", "message": "WIP move pseudo randomness into TestStreamEnvironment to be used with MiniClusterWithClientResource.\n\nCurrent limitation: only initialized once when MiniClusterWithClientResource is used as a class rule; so order of tests and test filters influence result."}, "afterCommit": {"oid": "d5b25c54ca31fb9dedce7018ced98576df2fd2f2", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/d5b25c54ca31fb9dedce7018ced98576df2fd2f2", "committedDate": "2020-12-04T15:14:27Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5b25c54ca31fb9dedce7018ced98576df2fd2f2", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/d5b25c54ca31fb9dedce7018ced98576df2fd2f2", "committedDate": "2020-12-04T15:14:27Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}, "afterCommit": {"oid": "44c5039ffaa0e88247eba8fb86f664d607ae0536", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/44c5039ffaa0e88247eba8fb86f664d607ae0536", "committedDate": "2020-12-04T15:21:07Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44c5039ffaa0e88247eba8fb86f664d607ae0536", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/44c5039ffaa0e88247eba8fb86f664d607ae0536", "committedDate": "2020-12-04T15:21:07Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}, "afterCommit": {"oid": "07e1b12f433dec764812f49b9c0348d25498d6f6", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/07e1b12f433dec764812f49b9c0348d25498d6f6", "committedDate": "2020-12-04T15:23:58Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07e1b12f433dec764812f49b9c0348d25498d6f6", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/07e1b12f433dec764812f49b9c0348d25498d6f6", "committedDate": "2020-12-04T15:23:58Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}, "afterCommit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "committedDate": "2020-12-05T00:30:21Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTg1NTgw", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-546185580", "createdAt": "2020-12-07T14:12:38Z", "commit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4MDI2MTEw", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-548026110", "createdAt": "2020-12-09T10:09:50Z", "commit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDowOTo1MFrOICMpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDowOTo1MFrOICMpiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTE3NTMwNw==", "bodyText": "So for the given commit id and given test name, the random selection choices will be always the same, on each run on any environment/machine?\nIf so, maybe put that (^^^) as a java doc for this create method?", "url": "https://github.com/apache/flink/pull/13551#discussion_r539175307", "createdAt": "2020-12-09T10:09:50Z", "author": {"login": "pnowojski"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.math.BigInteger;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if unset.\n+ */\n+@Internal\n+class PseudoRandomValueSelector {\n+\tprivate final Function<Integer, Integer> randomValueSupplier;\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+\tprivate PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+\t\tthis.randomValueSupplier = randomValueSupplier;\n+\t}\n+\n+\tpublic <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+\t\tif (configuration.contains(option)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tfinal Integer choice = randomValueSupplier.apply(alternatives.length);\n+\t\tT value = alternatives[choice];\n+\t\tLOG.info(\"Randomly selected {} for {}\", value, option.key());\n+\t\tconfiguration.set(option, value);\n+\t}\n+\n+\tpublic static PseudoRandomValueSelector create(Object entryPointSeed) {\n+\t\tfinal long commitSeed = new BigInteger(EnvironmentInformation.getGitCommitId(), 16).hashCode();\n+\t\tfinal long combinedSeed = commitSeed << 32 | entryPointSeed.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjM5MTQ1", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-549639145", "createdAt": "2020-12-10T22:01:44Z", "commit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowMTo0NFrOIDfQ9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowMTo0NFrOIDfQ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUyODg4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic TestRule nameProvider = new TestNameProvider();\n          \n          \n            \n            \tpublic final TestRule nameProvider = new TestNameProvider();", "url": "https://github.com/apache/flink/pull/13551#discussion_r540528885", "createdAt": "2020-12-10T22:01:44Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/util/TestLogger.java", "diffHunk": "@@ -67,6 +67,9 @@ public void failed(Throwable e, Description description) {\n \t\t}\n \t};\n \n+\t@Rule\n+\tpublic TestRule nameProvider = new TestNameProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjQxMDI0", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-549641024", "createdAt": "2020-12-10T22:04:36Z", "commit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNDozNlrOIDfXSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjowNDozNlrOIDfXSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDUzMDUwNg==", "bodyText": "This seems a bit...janky? Why can we not mutate the configuration within the MiniClusterResource?", "url": "https://github.com/apache/flink/pull/13551#discussion_r540530506", "createdAt": "2020-12-10T22:04:36Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -44,6 +47,12 @@ public TestStreamEnvironment(\n \t\t\t\tnull);\n \n \t\tsetParallelism(parallelism);\n+\n+\t\tif (Randomization) {\n+\t\t\tfinal String testName = TestNameProvider.getCurrentTestName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/a88c6caabb50541ecdc8fcafa232adf0e799bbbb", "committedDate": "2020-12-05T00:30:21Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases.\n\nTest randomization provides a good coverage for new checkpointing features based on existing tests.\nSeeding ensures randomization is deterministic based on the commit id for a specific test case to ease debugging."}, "afterCommit": {"oid": "fded2a71d2064276f69335ec94c36b35b8789985", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/fded2a71d2064276f69335ec94c36b35b8789985", "committedDate": "2021-01-08T13:00:38Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MTAwOTcx", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-567100971", "createdAt": "2021-01-13T10:48:41Z", "commit": {"oid": "fded2a71d2064276f69335ec94c36b35b8789985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDo0ODo0MVrOISpuOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDo0ODo0MVrOISpuOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODg1OA==", "bodyText": "Why is it important for this to work in IntelliJ?", "url": "https://github.com/apache/flink/pull/13551#discussion_r556428858", "createdAt": "2021-01-13T10:48:41Z", "author": {"login": "zentol"}, "path": "flink-runtime/pom.xml", "diffHunk": "@@ -509,6 +509,16 @@ under the License.\n \t\t\t\t\t\t<!-- It is useless due to the way Flink does branches and tags -->\n \t\t\t\t\t\t<skip>true</skip>\n \t\t\t\t\t</gitDescribe>\n+\t\t\t\t\t<!-- The git.properties is not really used, but works around an IntelliJ bug where", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fded2a71d2064276f69335ec94c36b35b8789985"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY3MTAxMTAw", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-567101100", "createdAt": "2021-01-13T10:48:50Z", "commit": {"oid": "fded2a71d2064276f69335ec94c36b35b8789985"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDo0ODo1MVrOISpujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxMDo0ODo1MVrOISpujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQyODk0Mg==", "bodyText": "hmm...like, we could add a hook to setAsContext to pass the name/modify the config/pass a factory, but it'd still suck since the TestNameProvider must live within the TestLogger; we just can't get around that singleton access can we...", "url": "https://github.com/apache/flink/pull/13551#discussion_r556428942", "createdAt": "2021-01-13T10:48:51Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -69,13 +74,28 @@ public static void setAsContext(\n                     TestStreamEnvironment env =\n                             new TestStreamEnvironment(\n                                     miniCluster, parallelism, jarFiles, classpaths);\n+                    randomize(conf);\n                     env.configure(conf, env.getUserClassloader());\n                     return env;\n                 };\n \n         initializeContextEnvironment(factory);\n     }\n \n+    /**\n+     * Randomizes configuration on test case level even if mini cluster is used in a class rule.\n+     *\n+     * @param conf\n+     */\n+    private static void randomize(Configuration conf) {\n+        if (Randomization) {\n+            final String testName = TestNameProvider.getCurrentTestName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fded2a71d2064276f69335ec94c36b35b8789985"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9751d3ffff922d7153fd4a77a28f2f810dcdc32b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/9751d3ffff922d7153fd4a77a28f2f810dcdc32b", "committedDate": "2021-01-18T10:26:34Z", "message": "1"}, "afterCommit": {"oid": "e8385c8a38bc5af203708d57a9c412059a49cb51", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/e8385c8a38bc5af203708d57a9c412059a49cb51", "committedDate": "2021-02-01T19:33:56Z", "message": "1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8385c8a38bc5af203708d57a9c412059a49cb51", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/e8385c8a38bc5af203708d57a9c412059a49cb51", "committedDate": "2021-02-01T19:33:56Z", "message": "1"}, "afterCommit": {"oid": "65a576c3b4e91ad887204cab36d0739826d7e07d", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/65a576c3b4e91ad887204cab36d0739826d7e07d", "committedDate": "2021-02-01T19:51:24Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65a576c3b4e91ad887204cab36d0739826d7e07d", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/65a576c3b4e91ad887204cab36d0739826d7e07d", "committedDate": "2021-02-01T19:51:24Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "bccc38316d268ba384c1921639c9c03cc299d49b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/bccc38316d268ba384c1921639c9c03cc299d49b", "committedDate": "2021-02-01T19:57:15Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bccc38316d268ba384c1921639c9c03cc299d49b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/bccc38316d268ba384c1921639c9c03cc299d49b", "committedDate": "2021-02-01T19:57:15Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "76ffa53caba8f8b2161d8f865cb58b3c6c08a29b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/76ffa53caba8f8b2161d8f865cb58b3c6c08a29b", "committedDate": "2021-02-01T19:57:36Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76ffa53caba8f8b2161d8f865cb58b3c6c08a29b", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/76ffa53caba8f8b2161d8f865cb58b3c6c08a29b", "committedDate": "2021-02-01T19:57:36Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "4c3a8b4fa089a223d1d90476068a7ef3111d5bfa", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/4c3a8b4fa089a223d1d90476068a7ef3111d5bfa", "committedDate": "2021-02-01T20:04:42Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c3a8b4fa089a223d1d90476068a7ef3111d5bfa", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/4c3a8b4fa089a223d1d90476068a7ef3111d5bfa", "committedDate": "2021-02-01T20:04:42Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "925d15f0f5777111cf5f1df34da76b5dc36935c9", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/925d15f0f5777111cf5f1df34da76b5dc36935c9", "committedDate": "2021-02-01T20:13:13Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "925d15f0f5777111cf5f1df34da76b5dc36935c9", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/925d15f0f5777111cf5f1df34da76b5dc36935c9", "committedDate": "2021-02-01T20:13:13Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "019646dd12750ec211a543f858836637a164d845", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/019646dd12750ec211a543f858836637a164d845", "committedDate": "2021-02-01T20:17:19Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "019646dd12750ec211a543f858836637a164d845", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/019646dd12750ec211a543f858836637a164d845", "committedDate": "2021-02-01T20:17:19Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "committedDate": "2021-02-01T20:29:00Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgwNzQ3MDI1", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-580747025", "createdAt": "2021-02-01T20:42:25Z", "commit": {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQyMDo0MjoyNVrOIdzpjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQyMDo1NjowNFrOId0G-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyNTgzNg==", "bodyText": "What part of this class is not thread safe?", "url": "https://github.com/apache/flink/pull/13551#discussion_r568125836", "createdAt": "2021-02-01T20:42:25Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEyOTgzOA==", "bodyText": "braces! (I hope this will fail the CI, if not we might have to re-enable some checkstyle rules...)", "url": "https://github.com/apache/flink/pull/13551#discussion_r568129838", "createdAt": "2021-02-01T20:49:39Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n+        final Random random = new Random(combinedSeed);\n+        return new PseudoRandomValueSelector(random::nextInt);\n+    }\n+\n+    private static String getGlobalSeed() {\n+        // manual seed or set by maven\n+        final String seed = System.getProperty(\"test.randomization.seed\");\n+        if (seed != null) {\n+            return seed;\n+        }\n+\n+        // Read with git command (if installed)\n+        final Optional<String> gitCommitId = getGitCommitId();\n+        if (gitCommitId.isPresent()) {\n+            return gitCommitId.get();\n+        }\n+\n+        // try EnvironmentInformation, which is set in the maven process\n+        final String commitId = EnvironmentInformation.getGitCommitId();\n+        if (!commitId.equals(EnvironmentInformation.UNKNOWN_COMMIT_ID)) {\n+            return commitId;\n+        }\n+\n+        LOG.warn(\n+                \"Cannot initialize maven property test.randomization.seed with commit id, please set manually to receive reproducible builds.\");\n+        // return any constant\n+        return \"\";\n+    }\n+\n+    @VisibleForTesting\n+    static Optional<String> getGitCommitId() {\n+        try {\n+            Process process = new ProcessBuilder(\"git\", \"rev-parse\", \"HEAD\").start();\n+            try (InputStream input = process.getInputStream()) {\n+                final String commit = IOUtils.toString(input, Charset.defaultCharset()).trim();\n+                if (commit.matches(\"[a-f0-9]{40}\")) return Optional.of(commit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEzMzM3MQ==", "bodyText": "technically speaking these should be  @VisibleForTesting.", "url": "https://github.com/apache/flink/pull/13551#discussion_r568133371", "createdAt": "2021-02-01T20:56:04Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,6 +41,8 @@\n  * startup options, or the JVM version.\n  */\n public class EnvironmentInformation {\n+    public static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+    public static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/df7d30894d9bf8f2d5ab361d2c0437d5aec065f9", "committedDate": "2021-02-01T20:29:00Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83", "committedDate": "2021-02-02T06:48:14Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzMTkwOTUz", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-583190953", "createdAt": "2021-02-04T09:29:07Z", "commit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOToyOTowN1rOIfqWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQwOTo0NDoxMFrOIfrAYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private final Function<Integer, Integer> randomValueSupplier;\n          \n          \n            \n            \n          \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n          \n          \n            \n                private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n          \n          \n            \n            \n          \n          \n            \n                private final Function<Integer, Integer> randomValueSupplier;", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070648", "createdAt": "2021-02-04T09:29:07Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDc3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n          \n          \n            \n                private static final long GLOBAL_SEED = (long) getGlobalSeed().hashCode() << 32;", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070779", "createdAt": "2021-02-04T09:29:19Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MDkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n          \n          \n            \n                    final long combinedSeed = GLOBAL_SEED | entryPointSeed.hashCode();", "url": "https://github.com/apache/flink/pull/13551#discussion_r570070905", "createdAt": "2021-02-04T09:29:30Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MTM0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Integer choice = randomValueSupplier.apply(alternatives.length);\n          \n          \n            \n                    final int choice = randomValueSupplier.apply(alternatives.length);", "url": "https://github.com/apache/flink/pull/13551#discussion_r570071347", "createdAt": "2021-02-04T09:30:03Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3MzMyMQ==", "bodyText": "Test randomization was enabled but test.randomization.seed was not configured, nor could the commit hash be retrieved from git or the EnvironmentInformation. Please set the test.randomization.seed property manually to make the build reproducible.", "url": "https://github.com/apache/flink/pull/13551#discussion_r570073321", "createdAt": "2021-02-04T09:32:51Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/PseudoRandomValueSelector.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import net.jcip.annotations.NotThreadSafe;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.function.Function;\n+\n+/**\n+ * Initializes the {@link Configuration} for particular {@link ConfigOption}s with random values if\n+ * unset.\n+ *\n+ * <p>With the same seed, the same values are always selected if the {@link #select(Configuration,\n+ * ConfigOption, Object[])} invocation happens in the same order. A different seed should select\n+ * different values.\n+ *\n+ * <p>The seed is calculated from a global seed (~unique per build) and a seed specific to test\n+ * cases. Thus, two different builds will mostly result in different values for the same test case.\n+ * Similarly, two test cases in the same build will have different randomized values.\n+ *\n+ * <p>The seed can be set with the maven/system property test.randomization.seed and is set by\n+ * default to commit id. If the seed is empty, {@link EnvironmentInformation} and as a last fallback\n+ * git command is used to retrieve the commit id.\n+ */\n+@Internal\n+@NotThreadSafe\n+class PseudoRandomValueSelector {\n+    private final Function<Integer, Integer> randomValueSupplier;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(PseudoRandomValueSelector.class);\n+\n+    private static final long GlobalSeed = (long) getGlobalSeed().hashCode() << 32;\n+\n+    private PseudoRandomValueSelector(Function<Integer, Integer> randomValueSupplier) {\n+        this.randomValueSupplier = randomValueSupplier;\n+    }\n+\n+    public <T> void select(Configuration configuration, ConfigOption<T> option, T... alternatives) {\n+        if (configuration.contains(option)) {\n+            return;\n+        }\n+        final Integer choice = randomValueSupplier.apply(alternatives.length);\n+        T value = alternatives[choice];\n+        LOG.info(\"Randomly selected {} for {}\", value, option.key());\n+        configuration.set(option, value);\n+    }\n+\n+    public static PseudoRandomValueSelector create(Object entryPointSeed) {\n+        final long combinedSeed = GlobalSeed | entryPointSeed.hashCode();\n+        final Random random = new Random(combinedSeed);\n+        return new PseudoRandomValueSelector(random::nextInt);\n+    }\n+\n+    private static String getGlobalSeed() {\n+        // manual seed or set by maven\n+        final String seed = System.getProperty(\"test.randomization.seed\");\n+        if (seed != null) {\n+            return seed;\n+        }\n+\n+        // Read with git command (if installed)\n+        final Optional<String> gitCommitId = getGitCommitId();\n+        if (gitCommitId.isPresent()) {\n+            return gitCommitId.get();\n+        }\n+\n+        // try EnvironmentInformation, which is set in the maven process\n+        final String commitId = EnvironmentInformation.getGitCommitId();\n+        if (!commitId.equals(EnvironmentInformation.UNKNOWN_COMMIT_ID)) {\n+            return commitId;\n+        }\n+\n+        LOG.warn(\n+                \"Cannot initialize maven property test.randomization.seed with commit id, please set manually to receive reproducible builds.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3Mzk3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final boolean Randomization =\n          \n          \n            \n                private static final boolean RANDOMIZE_CHECKPOINTING_CONFIG =", "url": "https://github.com/apache/flink/pull/13551#discussion_r570073977", "createdAt": "2021-02-04T09:33:46Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -18,18 +18,23 @@\n \n package org.apache.flink.streaming.util;\n \n+import org.apache.flink.configuration.Configuration;\n import org.apache.flink.core.fs.Path;\n import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions;\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n import org.apache.flink.streaming.api.environment.StreamExecutionEnvironmentFactory;\n import org.apache.flink.test.util.MiniClusterPipelineExecutorServiceLoader;\n+import org.apache.flink.util.TestNameProvider;\n \n import java.net.URL;\n import java.util.Collection;\n import java.util.Collections;\n \n /** A {@link StreamExecutionEnvironment} that executes its jobs on {@link MiniCluster}. */\n public class TestStreamEnvironment extends StreamExecutionEnvironment {\n+    private static final boolean Randomization =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NDc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (Randomization) {\n          \n          \n            \n                    if (RANDOMIZE_CHECKPOINTING_CONFIG) {", "url": "https://github.com/apache/flink/pull/13551#discussion_r570074782", "createdAt": "2021-02-04T09:34:58Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/main/java/org/apache/flink/streaming/util/TestStreamEnvironment.java", "diffHunk": "@@ -69,13 +74,30 @@ public static void setAsContext(\n                     TestStreamEnvironment env =\n                             new TestStreamEnvironment(\n                                     miniCluster, parallelism, jarFiles, classpaths);\n+                    randomize(conf);\n                     env.configure(conf, env.getUserClassloader());\n                     return env;\n                 };\n \n         initializeContextEnvironment(factory);\n     }\n \n+    /**\n+     * Randomizes configuration on test case level even if mini cluster is used in a class rule.\n+     *\n+     * <p>Note that only unset properties are randomized.\n+     *\n+     * @param conf the configuration to randomize\n+     */\n+    private static void randomize(Configuration conf) {\n+        if (Randomization) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTQ1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n          \n          \n            \n                    final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"seed\");", "url": "https://github.com/apache/flink/pull/13551#discussion_r570075455", "createdAt": "2021-02-04T09:35:58Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NTk4NA==", "bodyText": "assertThat(uniqueValues.size(); greaterThan(1))?", "url": "https://github.com/apache/flink/pull/13551#discussion_r570075984", "createdAt": "2021-02-04T09:36:45Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3NjIzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nonnull", "url": "https://github.com/apache/flink/pull/13551#discussion_r570076235", "createdAt": "2021-02-04T09:37:06Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3ODUxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Tests that it produces the same value for the same seed. */\n          \n          \n            \n                /** Tests that the selector produces the same value for the same seed. */", "url": "https://github.com/apache/flink/pull/13551#discussion_r570078512", "createdAt": "2021-02-04T09:40:15Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA3OTc2MQ==", "bodyText": "maybe add another set for the second value, to test that a sequence of selections is also deterministic.", "url": "https://github.com/apache/flink/pull/13551#discussion_r570079761", "createdAt": "2021-02-04T09:42:00Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */\n+    @Test\n+    public void testStableRandomization() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\");\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDA4MTM3Ng==", "bodyText": "re-use org.apache.flink.runtime.testutils.ZooKeeperTestUtils#runsOnCIInfrastructure instead", "url": "https://github.com/apache/flink/pull/13551#discussion_r570081376", "createdAt": "2021-02-04T09:44:10Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {\n+\n+    /**\n+     * Tests that the selector will return different values if invoked several times even for the\n+     * same option.\n+     */\n+    @Test\n+    public void testRandomizationOfValues() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final PseudoRandomValueSelector valueSelector = PseudoRandomValueSelector.create(\"test\");\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final Duration selectedValue =\n+                    selectValue(valueSelector, CHECKPOINTING_INTERVAL, alternatives);\n+            uniqueValues.add(selectedValue);\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    @Nonnull\n+    private <T> T selectValue(\n+            PseudoRandomValueSelector valueSelector, ConfigOption<T> option, T... alternatives) {\n+        final Configuration configuration = new Configuration();\n+        assertNull(configuration.get(option));\n+        valueSelector.select(configuration, option, alternatives);\n+        final T selected = configuration.get(option);\n+        assertNotNull(selected);\n+        return selected;\n+    }\n+\n+    /** Tests that the selector will return different values for different seeds. */\n+    @Test\n+    public void testRandomizationWithSeed() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\" + i);\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertNotEquals(1, uniqueValues.size());\n+    }\n+\n+    /** Tests that it produces the same value for the same seed. */\n+    @Test\n+    public void testStableRandomization() {\n+        final Duration[] alternatives =\n+                IntStream.range(0, 1000).boxed().map(Duration::ofMillis).toArray(Duration[]::new);\n+\n+        final Set<Duration> uniqueValues = new HashSet<>(1);\n+        for (int i = 0; i < 100; i++) {\n+            final PseudoRandomValueSelector selector = PseudoRandomValueSelector.create(\"test\");\n+            uniqueValues.add(selectValue(selector, CHECKPOINTING_INTERVAL, alternatives));\n+        }\n+        assertEquals(1, uniqueValues.size());\n+    }\n+\n+    /**\n+     * Tests that reading through git command yields the same as {@link EnvironmentInformation}.\n+     *\n+     * <p>This test assumes that both sources of information are available (CI).\n+     */\n+    @Test\n+    public void readCommitId() {\n+        assumeNotNull(System.getProperty(\"CI\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e119ed52f21bc045418a0a3c2cf3cc3e1d69f83"}, "originalPosition": 114}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32b4aa620e79c8aee446756a801d68814ddf7b31", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/32b4aa620e79c8aee446756a801d68814ddf7b31", "committedDate": "2021-02-04T10:38:15Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Chesnay Schepler <chesnay@apache.org>"}, "afterCommit": {"oid": "6101fad56a7ee9504de66e2cae702bde314507c7", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/6101fad56a7ee9504de66e2cae702bde314507c7", "committedDate": "2021-02-04T10:55:02Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6101fad56a7ee9504de66e2cae702bde314507c7", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/6101fad56a7ee9504de66e2cae702bde314507c7", "committedDate": "2021-02-04T10:55:02Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "29e7176390cd2877927bb8a20ac327921e8ae936", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/29e7176390cd2877927bb8a20ac327921e8ae936", "committedDate": "2021-02-04T10:57:25Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzODk2MDE5", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-583896019", "createdAt": "2021-02-04T23:16:41Z", "commit": {"oid": "29e7176390cd2877927bb8a20ac327921e8ae936"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMzoxNjo0MlrOIgLSAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNFQyMzoxNjo0MlrOIgLSAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MDYxMDE3Nw==", "bodyText": "extend TestLogger", "url": "https://github.com/apache/flink/pull/13551#discussion_r570610177", "createdAt": "2021-02-04T23:16:42Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils/src/test/java/org/apache/flink/streaming/util/PseudoRandomValueSelectorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.util;\n+\n+import org.apache.flink.api.java.tuple.Tuple3;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.runtime.testutils.ZooKeeperTestUtils;\n+import org.apache.flink.runtime.util.EnvironmentInformation;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.IntStream;\n+\n+import static org.apache.flink.configuration.CheckpointingOptions.SAVEPOINT_DIRECTORY;\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.CHECKPOINTING_INTERVAL;\n+import static org.apache.flink.streaming.api.environment.ExecutionCheckpointingOptions.TOLERABLE_FAILURE_NUMBER;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeNoException;\n+import static org.junit.Assume.assumeNotNull;\n+\n+/** Tests {@link PseudoRandomValueSelector}. */\n+public class PseudoRandomValueSelectorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e7176390cd2877927bb8a20ac327921e8ae936"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgzODk2MTky", "url": "https://github.com/apache/flink/pull/13551#pullrequestreview-583896192", "createdAt": "2021-02-04T23:17:05Z", "commit": {"oid": "29e7176390cd2877927bb8a20ac327921e8ae936"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29e7176390cd2877927bb8a20ac327921e8ae936", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/29e7176390cd2877927bb8a20ac327921e8ae936", "committedDate": "2021-02-04T10:57:25Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "cbea04b43aff774174026806b85c73401d226eb3", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/cbea04b43aff774174026806b85c73401d226eb3", "committedDate": "2021-02-10T07:22:19Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d69b21f05abca0de64a2e778c292a7d0694b263", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/3d69b21f05abca0de64a2e778c292a7d0694b263", "committedDate": "2021-02-10T07:23:04Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbea04b43aff774174026806b85c73401d226eb3", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/cbea04b43aff774174026806b85c73401d226eb3", "committedDate": "2021-02-10T07:22:19Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}, "afterCommit": {"oid": "3d69b21f05abca0de64a2e778c292a7d0694b263", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/3d69b21f05abca0de64a2e778c292a7d0694b263", "committedDate": "2021-02-10T07:23:04Z", "message": "[FLINK-19520][configuration] Add randomization of checkpoint config in ITCases."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3760, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}