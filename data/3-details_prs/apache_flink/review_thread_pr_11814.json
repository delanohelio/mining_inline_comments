{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODU0NjEz", "number": 11814, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzoyNjo1NFrOD2PCEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMToxNzozOFrOD81OwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTk1OTg2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/serialization/SpillingAdaptiveSpanningRecordDeserializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzoyNjo1NFrOGL99Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzoyNjo1NFrOGL99Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMjYzMA==", "bodyText": "Thanks for finding this bug!\nI think the root cause was the state inconsistency among {leftOverLimit, leftOverStart} with leftOverData. During #clear() we only reset leftOverData as null, but now reset the derived {leftOverLimit, leftOverStart} from leftOverData. So we have to check the condition only by leftOverData here. Another option is also to reset {leftOverLimit, leftOverStart} during #clear() to keep all consistency.", "url": "https://github.com/apache/flink/pull/11814#discussion_r415202630", "createdAt": "2020-04-26T03:26:54Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/serialization/SpillingAdaptiveSpanningRecordDeserializer.java", "diffHunk": "@@ -597,12 +597,12 @@ private void addNextChunkFromMemorySegment(MemorySegment segment, int offset, in\n \t\t\t\tthrow new UnsupportedOperationException(\"Unaligned checkpoint currently do not support spilled \" +\n \t\t\t\t\t\"records.\");\n \t\t\t} else if (recordLength != -1) {\n-\t\t\t\tint leftOverSize = leftOverLimit - leftOverStart;\n+\t\t\t\tint leftOverSize = leftOverData != null ? leftOverLimit - leftOverStart : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42653324e6245cf58b547928f0b90d151fcf8f48"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODQ3MzE2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzoyNDoxNFrOGVmtag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzoyNDoxNFrOGVmtag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNzQ5OA==", "bodyText": "#8693 will add extra notifyCheckpointAborted that we could use here. I guess it's a race which PR is going to be merged first.", "url": "https://github.com/apache/flink/pull/11814#discussion_r425307498", "createdAt": "2020-05-14T17:24:14Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -189,6 +188,7 @@ private void cleanup(\n \t\t\tCheckpointMetrics metrics, CheckpointOptions options,\n \t\t\tException ex) throws Exception {\n \n+\t\tchannelStateWriter.abort(metadata.getCheckpointId(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e688933309bb8c7476facd2b7e6a52da74ede67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODQ3NDg2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzoyNDo0N1rOGVmulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1MjowNVrOGV8MDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNzc5OQ==", "bodyText": "nit: I guess it's no longer notifyCheckpointComplete, but finishedWriting(...)?", "url": "https://github.com/apache/flink/pull/11814#discussion_r425307799", "createdAt": "2020-05-14T17:24:47Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -240,7 +240,8 @@ private void finishAndReportAsync(Map<OperatorID, OperatorSnapshotFutures> snaps\n \t\tfinal Future<?> channelWrittenFuture;\n \t\tif (unalignedCheckpointEnabled) {\n \t\t\tChannelStateWriteResult writeResult = channelStateWriter.getWriteResult(metadata.getCheckpointId());\n-\t\t\tchannelWrittenFuture = writeResult.getJointFuture();\n+\t\t\tchannelWrittenFuture = writeResult.getJointFuture()\n+\t\t\t\t.whenComplete((dummy, ex) -> channelStateWriter.notifyCheckpointComplete(metadata.getCheckpointId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e688933309bb8c7476facd2b7e6a52da74ede67"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1OTQwNQ==", "bodyText": "I called it stop now (symmetric to start).", "url": "https://github.com/apache/flink/pull/11814#discussion_r425659405", "createdAt": "2020-05-15T08:52:05Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -240,7 +240,8 @@ private void finishAndReportAsync(Map<OperatorID, OperatorSnapshotFutures> snaps\n \t\tfinal Future<?> channelWrittenFuture;\n \t\tif (unalignedCheckpointEnabled) {\n \t\t\tChannelStateWriteResult writeResult = channelStateWriter.getWriteResult(metadata.getCheckpointId());\n-\t\t\tchannelWrittenFuture = writeResult.getJointFuture();\n+\t\t\tchannelWrittenFuture = writeResult.getJointFuture()\n+\t\t\t\t.whenComplete((dummy, ex) -> channelStateWriter.notifyCheckpointComplete(metadata.getCheckpointId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMwNzc5OQ=="}, "originalCommit": {"oid": "2e688933309bb8c7476facd2b7e6a52da74ede67"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTEzMjgxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriterImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMToxNzozOFrOGWAvvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxOToyMlrOGWNaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDA3OQ==", "bodyText": "I guess the below Preconditions.checkState(results.size() < maxCheckpoints, \"results.size() > maxCheckpoints\", results.size(), maxCheckpoints); might be invalid if we remove the old ones here?", "url": "https://github.com/apache/flink/pull/11814#discussion_r425734079", "createdAt": "2020-05-15T11:17:38Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriterImpl.java", "diffHunk": "@@ -91,6 +91,7 @@ public ChannelStateWriterImpl(CheckpointStorageWorkerView streamFactoryResolver)\n \n \t@Override\n \tpublic void start(long checkpointId, CheckpointOptions checkpointOptions) {\n+\t\tresults.keySet().forEach(oldCheckpointId -> abort(oldCheckpointId, new Exception(\"Starting new checkpoint \" + checkpointId)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd4011ecc3dc8bb29d4d365dcb00f0b7505b6832"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MTU2OQ==", "bodyText": "You are right that it's probably not needed. However, it's an inexpensive check that verifies the highlighted line.\nI'd keep the check for now.", "url": "https://github.com/apache/flink/pull/11814#discussion_r425941569", "createdAt": "2020-05-15T17:19:22Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/channel/ChannelStateWriterImpl.java", "diffHunk": "@@ -91,6 +91,7 @@ public ChannelStateWriterImpl(CheckpointStorageWorkerView streamFactoryResolver)\n \n \t@Override\n \tpublic void start(long checkpointId, CheckpointOptions checkpointOptions) {\n+\t\tresults.keySet().forEach(oldCheckpointId -> abort(oldCheckpointId, new Exception(\"Starting new checkpoint \" + checkpointId)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTczNDA3OQ=="}, "originalCommit": {"oid": "bd4011ecc3dc8bb29d4d365dcb00f0b7505b6832"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1673, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}