{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDExNTE5", "number": 14393, "title": "[FLINK-20605][coordination] Rework cancellation of slot allocation futures", "bodyText": "Properly skip the processing of slot allocation that have already concluded by no longer relying on the cancellation of futures, as it is unreliable when using async operations since other operations may occur in-between, and instead using a set for tracking pending allocations and checking at the start of processing.\nBasically, in the current code the future to be cancelled can be completed without the async portion having run but being scheduled. If now some operation occurs that would lead to the future being cancelled, then the async portion still runs because a completed future cannot be cancelled.\nThis wasn't a problem in the old slot manager because it was a lot more lenient when it comes to changing slot states.", "createdAt": "2020-12-15T16:57:37Z", "url": "https://github.com/apache/flink/pull/14393", "merged": true, "mergeCommit": {"oid": "5cabecb0f7b7ad25036badca40500782eacef848"}, "closed": true, "closedAt": "2020-12-17T15:17:04Z", "author": {"login": "zentol"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmdTWCAH2gAyNTQwNDExNTE5OjI0N2VhYjA0ODI5NGM5ZTZjNmE5ZWNmODg3ZDk4NmQ0NWNjNzc5YTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnFGdqABqjQxMjU2MTEwNzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "247eab048294c9e6c6a9ecf887d986d45cc779a3", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/247eab048294c9e6c6a9ecf887d986d45cc779a3", "committedDate": "2020-12-15T16:54:44Z", "message": "[hotfix][coordination] Ease debugging of errors during slot allocation\n\nWhen transitioning from PENDING to ALLOCATED we now first verify that the job ID is matching because this is a more serious issues.\nFurthermore, if either the slot state of job ID conditions are not met we now print  better error messages.\n\nFinally, log the state transitions of all slots."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODI4MTg2", "url": "https://github.com/apache/flink/pull/14393#pullrequestreview-553828186", "createdAt": "2020-12-16T15:53:59Z", "commit": {"oid": "e449ce26f5e0b80a6e46810bbbffc19d09f5f59b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1Mzo1OVrOIHMTBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1Mzo1OVrOIHMTBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxMjQyMQ==", "bodyText": "Do we still have to distinguish between CancellationException and others in the else branch?", "url": "https://github.com/apache/flink/pull/14393#discussion_r544412421", "createdAt": "2020-12-16T15:53:59Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/resourcemanager/slotmanager/DeclarativeSlotManager.java", "diffHunk": "@@ -505,17 +496,12 @@ private void allocateSlot(TaskManagerSlotInformation taskManagerSlot, JobID jobI\n \t\t\tresourceManagerId,\n \t\t\ttaskManagerRequestTimeout);\n \n-\t\trequestFuture.whenComplete(\n+\t\tCompletableFuture<Void> slotAllocationResponseProcessingFuture = requestFuture.handleAsync(\n \t\t\t(Acknowledge acknowledge, Throwable throwable) -> {\n-\t\t\t\tif (acknowledge != null) {\n-\t\t\t\t\tcompletableFuture.complete(acknowledge);\n-\t\t\t\t} else {\n-\t\t\t\t\tcompletableFuture.completeExceptionally(throwable);\n+\t\t\t\tif (!pendingSlotAllocations.contains(slotId)) {\n+\t\t\t\t\tLOG.debug(\"Ignoring slot allocation update from task executor {} for slot {} and job {}, because the allocation was already completed or cancelled.\", instanceId, slotId, jobId);\n+\t\t\t\t\treturn null;\n \t\t\t\t}\n-\t\t\t});\n-\n-\t\tCompletableFuture<Void> slotAllocationResponseProcessingFuture = completableFuture.handleAsync(\n-\t\t\t(Acknowledge acknowledge, Throwable throwable) -> {\n \t\t\t\tif (acknowledge != null) {\n \t\t\t\t\tLOG.trace(\"Completed allocation of slot {} for job {}.\", slotId, jobId);\n \t\t\t\t\tslotTracker.notifyAllocationComplete(slotId, jobId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e449ce26f5e0b80a6e46810bbbffc19d09f5f59b"}, "originalPosition": 84}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2a9c7f68dc51ad9d1d4a0595bb64f8c2012b863", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/e2a9c7f68dc51ad9d1d4a0595bb64f8c2012b863", "committedDate": "2020-12-16T22:56:54Z", "message": "Remove CancellationException block"}, "afterCommit": {"oid": "713bd7a1f1896b1a8999ca08dfa5661158408b0f", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/713bd7a1f1896b1a8999ca08dfa5661158408b0f", "committedDate": "2020-12-17T10:55:52Z", "message": "Remove CancellationException block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d433649f8b04bb456aeaf28fd13dfa82cbea936", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/0d433649f8b04bb456aeaf28fd13dfa82cbea936", "committedDate": "2020-12-17T15:16:29Z", "message": "[FLINK-20605][coordination] Rework cancellation of slot allocation futures\n\nThe previous approach did not properly because it could happen that the future has been completed at the time it is being cancelled (e.g., because the corresponding task\n executor was unregistered). This order of events can happen since the processing of the allocation is done asynchronously, and can be scheduled after any other event.\nThis caused the processing to run although we expected this not too happen, resulting in various errors, including:\n- completing an allocation despite being shut down\n- completing an allocation despite the task executor not being registered anymore\n- completing an allocation despite the slot report already having reporter a slot as allocated"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e31004ae37a8ffc1bb8916db18a471c7c037be2b", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/e31004ae37a8ffc1bb8916db18a471c7c037be2b", "committedDate": "2020-12-17T11:00:56Z", "message": "checkstyle"}, "afterCommit": {"oid": "0d433649f8b04bb456aeaf28fd13dfa82cbea936", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/0d433649f8b04bb456aeaf28fd13dfa82cbea936", "committedDate": "2020-12-17T15:16:29Z", "message": "[FLINK-20605][coordination] Rework cancellation of slot allocation futures\n\nThe previous approach did not properly because it could happen that the future has been completed at the time it is being cancelled (e.g., because the corresponding task\n executor was unregistered). This order of events can happen since the processing of the allocation is done asynchronously, and can be scheduled after any other event.\nThis caused the processing to run although we expected this not too happen, resulting in various errors, including:\n- completing an allocation despite being shut down\n- completing an allocation despite the task executor not being registered anymore\n- completing an allocation despite the slot report already having reporter a slot as allocated"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3616, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}