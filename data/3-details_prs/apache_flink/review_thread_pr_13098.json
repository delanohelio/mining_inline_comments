{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MjY5MjI4", "number": 13098, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTo1Njo1NlrOEWqeKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNzo1OFrOEXFPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMTk5OTc4OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/data_stream.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTo1Njo1NlrOG-CIgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTo1Njo1NlrOG-CIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5OTg0Mw==", "bodyText": "What if the func is a Callable?", "url": "https://github.com/apache/flink/pull/13098#discussion_r467699843", "createdAt": "2020-08-10T05:56:56Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +233,32 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        \"\"\"\n+        Applies a Filter transformation on a DataStream. The transformation calls a FilterFunction\n+        for each element of the DataStream and retains only those element for which the function\n+        returns true. Elements for which the function returns false are filtered. The user can also\n+        extend RichFilterFunction to gain access to other features provided by the RichFunction\n+        interface.\n+\n+        :param func: The FilterFunction that is called for each element of the DataStream.\n+        :return: The filtered DataStream.\n+        \"\"\"\n+        class FilterFlatMap(FlatMapFunction):\n+            def __init__(self, filter_func):\n+                self._func = filter_func\n+\n+            def flat_map(self, value):\n+                if self._func.filter(value):\n+                    yield value\n+\n+        j_input_type = self._j_data_stream.getTransformation().getOutputType()\n+        type_info = typeinfo._from_java_type(j_input_type)\n+        j_data_stream = self.flat_map(FilterFlatMap(func), type_info=type_info)._j_data_stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAwMzM1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTo1OTowMVrOG-CKbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTo1OTowMVrOG-CKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDMzNA==", "bodyText": "Remove ;", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700334", "createdAt": "2020-08-10T05:59:01Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAwNTU4OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMDoxOVrOG-CLjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMDoxOVrOG-CLjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDYyMQ==", "bodyText": "Tre => True", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700621", "createdAt": "2020-08-10T06:00:19Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())\n+    Note that the system assumes that the function does not modify the elemetns on which the\n+    predicate is applied. Violating this assumption can lead to incoorect results.\n+    \"\"\"\n+\n+    @abc.abstractmethod\n+    def filter(self, value):\n+        \"\"\"\n+        The filter function that evaluates the predicate.\n+\n+        :param value: The value to be filtered.\n+        :return: Tre for values that should be retained, false for values to be filtered out.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAwNjA5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMDozM1rOG-CL0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMDozM1rOG-CL0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDY5MA==", "bodyText": "elemetns => elements", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700690", "createdAt": "2020-08-10T06:00:33Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())\n+    Note that the system assumes that the function does not modify the elemetns on which the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAwNjc5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMDo1N1rOG-CMMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMDo1N1rOG-CMMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDc4NA==", "bodyText": "incoorect => incorrect", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700784", "createdAt": "2020-08-10T06:00:57Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())\n+    Note that the system assumes that the function does not modify the elemetns on which the\n+    predicate is applied. Violating this assumption can lead to incoorect results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAwODMwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMTo1OFrOG-CNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowMTo1OFrOG-CNBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDk5Nw==", "bodyText": "Remove new", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700997", "createdAt": "2020-08-10T06:01:58Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAxMTg0OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowNDoyMlrOG-CPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowNDoyMlrOG-CPAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMTUwNA==", "bodyText": "This class has never been used.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467701504", "createdAt": "2020-08-10T06:04:22Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -140,6 +163,19 @@ def flat_map(self, value):\n         return self._func(value)\n \n \n+class FilterFunctionWrapper(FunctionWrapper):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAxMzM5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowNToxNVrOG-CP0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowNToxNVrOG-CP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMTcxNA==", "bodyText": "Change either one to Callable filter function to cover the Callable scenario.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467701714", "createdAt": "2020-08-10T06:05:15Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "diffHunk": "@@ -149,6 +149,33 @@ def flat_map(value):\n         expected.sort()\n         self.assertEqual(expected, results)\n \n+    def test_filter_without_data_types(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')])\n+        filtered_stream = ds.filter(MyFilterFunction())\n+        collect_util = DataStreamCollectUtil()\n+        collect_util.collect(filtered_stream)\n+        self.env.execute(\"test filter\")\n+        results = collect_util.results()\n+        expected = [\"(2, 'Hello', 'Hi')\"]\n+        results.sort()\n+        expected.sort()\n+        self.assertEqual(expected, results)\n+\n+    def test_filter_with_data_types(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')],\n+                                      type_info=Types.ROW(\n+                                          [Types.INT(), Types.STRING(), Types.STRING()])\n+                                      )\n+        filtered_stream = ds.filter(MyFilterFunction())\n+        collect_util = DataStreamCollectUtil()\n+        collect_util.collect(filtered_stream)\n+        self.env.execute(\"test filter\")\n+        results = collect_util.results()\n+        expected = ['2,Hello,Hi']\n+        results.sort()\n+        expected.sort()\n+        self.assertEqual(expected, results)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjIxNjgxOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/data_stream.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozNDoyMFrOG-EDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozNzoyM1rOG-EIpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTMwMA==", "bodyText": "throw an exception if it is not a FilterFunction nor a Callable function.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467731300", "createdAt": "2020-08-10T07:34:20Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,35 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        \"\"\"\n+        Applies a Filter transformation on a DataStream. The transformation calls a FilterFunction\n+        for each element of the DataStream and retains only those element for which the function\n+        returns true. Elements for which the function returns false are filtered. The user can also\n+        extend RichFilterFunction to gain access to other features provided by the RichFunction\n+        interface.\n+\n+        :param func: The FilterFunction that is called for each element of the DataStream.\n+        :return: The filtered DataStream.\n+        \"\"\"\n+        class FilterFlatMap(FlatMapFunction):\n+            def __init__(self, filter_func):\n+                self._func = filter_func\n+\n+            def flat_map(self, value):\n+                if self._func.filter(value):\n+                    yield value\n+\n+        if isinstance(func, Callable):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c98a59b403eb2e1d16f3915f3b5fca1ba5c88ff"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMjY0NQ==", "bodyText": "Ok, this will make it more robust.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467732645", "createdAt": "2020-08-10T07:37:23Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,35 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        \"\"\"\n+        Applies a Filter transformation on a DataStream. The transformation calls a FilterFunction\n+        for each element of the DataStream and retains only those element for which the function\n+        returns true. Elements for which the function returns false are filtered. The user can also\n+        extend RichFilterFunction to gain access to other features provided by the RichFunction\n+        interface.\n+\n+        :param func: The FilterFunction that is called for each element of the DataStream.\n+        :return: The filtered DataStream.\n+        \"\"\"\n+        class FilterFlatMap(FlatMapFunction):\n+            def __init__(self, filter_func):\n+                self._func = filter_func\n+\n+            def flat_map(self, value):\n+                if self._func.filter(value):\n+                    yield value\n+\n+        if isinstance(func, Callable):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTMwMA=="}, "originalCommit": {"oid": "8c98a59b403eb2e1d16f3915f3b5fca1ba5c88ff"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjM4NTExOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/data_stream.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNzo1OFrOG-rDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNzo1OFrOG-rDuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDM2Mw==", "bodyText": "There are side effects for this implementation. If we perform multi key_by, it will also introduce multi maps in the stream graph. This should be avoided.", "url": "https://github.com/apache/flink/pull/13098#discussion_r468370363", "createdAt": "2020-08-11T07:07:58Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -434,6 +465,16 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             -> 'DataStream':\n         return self._values().flat_map(func, type_info)\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        return self._values().filter(func)\n+\n+    def add_sink(self, sink_func: SinkFunction) -> 'DataStreamSink':\n+        return self._values().add_sink(sink_func)\n+\n+    def key_by(self, key_selector: Union[Callable, KeySelector],\n+               key_type_info: TypeInformation = None) -> 'KeyedStream':\n+        return self._values().key_by(key_selector, key_type_info)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff831a80a0ab5a1fbaabfb6d19e91f25d32314"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4937, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}