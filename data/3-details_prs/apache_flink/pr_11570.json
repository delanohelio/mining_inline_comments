{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NzM0Njg2", "number": 11570, "title": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL", "bodyText": "What is the purpose of the change\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.\nVerifying this change\n\nObjectToExpressionTest for when the conversion is used from Java's DSL\nImplicitConversionsTest for when the conversion is used from Scala's DSL\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-03-30T15:42:10Z", "url": "https://github.com/apache/flink/pull/11570", "merged": true, "mergeCommit": {"oid": "d156d09a6cb3f21245da4ae73b263ee4c8dfe4b7"}, "closed": true, "closedAt": "2020-04-07T06:25:18Z", "author": {"login": "dawidwys"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSwrpPABqjMxNzkzNDE5MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVAO7kABqjMyMDU4NjQ5OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f39ea7308df9acada532b8a1420b653f0c56455", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/2f39ea7308df9acada532b8a1420b653f0c56455", "committedDate": "2020-03-30T15:34:44Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL"}, "afterCommit": {"oid": "846f4a051c92d2b6899881e6f8e8615458d74d79", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/846f4a051c92d2b6899881e6f8e8615458d74d79", "committedDate": "2020-03-30T15:59:14Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "846f4a051c92d2b6899881e6f8e8615458d74d79", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/846f4a051c92d2b6899881e6f8e8615458d74d79", "committedDate": "2020-03-30T15:59:14Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}, "afterCommit": {"oid": "d8aeca956d2ac04033dc2a4e81b99cb95d56af78", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/d8aeca956d2ac04033dc2a4e81b99cb95d56af78", "committedDate": "2020-03-31T12:34:00Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8aeca956d2ac04033dc2a4e81b99cb95d56af78", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/d8aeca956d2ac04033dc2a4e81b99cb95d56af78", "committedDate": "2020-03-31T12:34:00Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}, "afterCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/bd38b0c506cb0f0bbf174837828b279f0150fcbf", "committedDate": "2020-03-31T13:18:48Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MTY0MDI0", "url": "https://github.com/apache/flink/pull/11570#pullrequestreview-388164024", "createdAt": "2020-04-06T11:35:41Z", "commit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMTozNTo0MVrOGBTkxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMjoyMDoxNVrOGBVEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMjQ3MQ==", "bodyText": "nit: we are still in the same class and don't need to fully qualify the method", "url": "https://github.com/apache/flink/pull/11570#discussion_r404022471", "createdAt": "2020-04-06T11:35:41Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java", "diffHunk": "@@ -52,14 +63,151 @@ private ApiExpressionUtils() {\n \t\t// private\n \t}\n \n+\t/**\n+\t * Converts a given object to an expression.\n+\t *\n+\t * <p>It converts:\n+\t * <ul>\n+\t *     <li>{@link Row} to a call to a row constructor expression</li>\n+\t *     <li>{@link Map} to a call to a map constructor expression</li>\n+\t *     <li>{@link List} to a call to an array constructor expression</li>\n+\t *     <li>arrays to a call to an array constructor expression</li>\n+\t *     <li>Scala's {@code Seq} to an array constructor via reflection</li>\n+\t *     <li>Scala's {@code Map} to a map constructor via reflection</li>\n+\t *     <li>Scala's {@code BigDecimal} to a DECIMAL literal</li>\n+\t *     <li>if none of the above applies, the function tries to convert the object\n+\t *          to a value literal with {@link #valueLiteral(Object)}</li>\n+\t * </ul>\n+\t *\n+\t * @param expression An object to convert to an expression\n+\t */\n \tpublic static Expression objectToExpression(Object expression) {\n \t\tif (expression instanceof ApiExpression) {\n \t\t\treturn ((ApiExpression) expression).toExpr();\n \t\t} else if (expression instanceof Expression) {\n \t\t\treturn (Expression) expression;\n+\t\t} else if (expression instanceof Row) {\n+\t\t\treturn convertRow((Row) expression);\n+\t\t} else if (expression instanceof Map) {\n+\t\t\treturn convertJavaMap((Map<?, ?>) expression);\n+\t\t} else if (expression instanceof List) {\n+\t\t\treturn convertJavaList((List<?>) expression);\n+\t\t} else if (expression.getClass().isArray()) {\n+\t\t\treturn convertArray(expression);\n \t\t} else {\n-\t\t\treturn valueLiteral(expression);\n+\t\t\treturn convertScala(expression).orElseGet(() -> valueLiteral(expression));\n+\t\t}\n+\t}\n+\n+\tprivate static Expression convertRow(Row expression) {\n+\t\tList<Expression> fields = IntStream.range(0, expression.getArity())\n+\t\t\t.mapToObj(expression::getField)\n+\t\t\t.map(ApiExpressionUtils::objectToExpression)\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\treturn ApiExpressionUtils.unresolvedCall(BuiltInFunctionDefinitions.ROW, fields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyODQ0Mg==", "bodyText": "nit: javaList2ArrayConstructor", "url": "https://github.com/apache/flink/pull/11570#discussion_r404028442", "createdAt": "2020-04-06T11:46:58Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-scala/src/main/scala/org/apache/flink/table/api/expressionDsl.scala", "diffHunk": "@@ -425,54 +388,29 @@ trait ImplicitExpressionConversions {\n   implicit def localDateTime2Literal(localDateTime: LocalDateTime): Expression =\n     valueLiteral(localDateTime)\n \n+  implicit def jList2ArrayConstructor(jList: JList[_]): Expression = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyODYzMQ==", "bodyText": "nit: javaMap2MapConstructor", "url": "https://github.com/apache/flink/pull/11570#discussion_r404028631", "createdAt": "2020-04-06T11:47:19Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-api-scala/src/main/scala/org/apache/flink/table/api/expressionDsl.scala", "diffHunk": "@@ -425,54 +388,29 @@ trait ImplicitExpressionConversions {\n   implicit def localDateTime2Literal(localDateTime: LocalDateTime): Expression =\n     valueLiteral(localDateTime)\n \n+  implicit def jList2ArrayConstructor(jList: JList[_]): Expression = {\n+    ApiExpressionUtils.objectToExpression(jList)\n+  }\n+\n+  implicit def seq2ArrayConstructor(seq: Seq[_]): Expression = {\n+    ApiExpressionUtils.objectToExpression(seq)\n+  }\n+\n   implicit def array2ArrayConstructor(array: Array[_]): Expression = {\n+    ApiExpressionUtils.objectToExpression(array)\n+  }\n \n-    def createArray(elements: Array[_]): Expression = {\n-      unresolvedCall(BuiltInFunctionDefinitions.ARRAY, elements.map(valueLiteral): _*)\n-    }\n+  implicit def map2MapConstructor(map: JMap[_, _]): Expression = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0Njg5MQ==", "bodyText": "nit: it would be interesting to understand why this is necessary now? if we do with this regression, I would at least remove the right toExpr call", "url": "https://github.com/apache/flink/pull/11570#discussion_r404046891", "createdAt": "2020-04-06T12:20:15Z", "author": {"login": "twalthr"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/validation/ScalarOperatorsValidationTest.scala", "diffHunk": "@@ -43,7 +43,7 @@ class ScalarOperatorsValidationTest extends ScalarOperatorsTestBase {\n \n   @Test(expected = classOf[ValidationException])\n   def testInvalidStringComparison2(): Unit = {\n-    testTableApi(\"w\" > 4.toExpr, \"FAIL\", \"FAIL\")\n+    testTableApi(\"w\".toExpr > 4.toExpr, \"FAIL\", \"FAIL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/bd38b0c506cb0f0bbf174837828b279f0150fcbf", "committedDate": "2020-03-31T13:18:48Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}, "afterCommit": {"oid": "4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "committedDate": "2020-04-06T13:59:07Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "committedDate": "2020-04-06T15:14:34Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "committedDate": "2020-04-06T13:59:07Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}, "afterCommit": {"oid": "17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "committedDate": "2020-04-06T15:14:34Z", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2171, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}