{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzU2MTUz", "number": 11624, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyNToxMVrODuTG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMjo1NVrODwtI6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc0MTU5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOToyNToxMVrOGANkmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODozMDo0NFrOGD0mtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng==", "bodyText": "Why not to inject this in the constructor of StreamTaskStateInitializerImpl?", "url": "https://github.com/apache/flink/pull/11624#discussion_r402875546", "createdAt": "2020-04-03T09:25:11Z", "author": {"login": "azagrebin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5ODAyMA==", "bodyText": "I just don't want to introduce too many changes here. If we plan to inject this as a filed, I am in favor of moving TtlTimeProvider at operator level (by changing StreamTaskStateInitializer#streamOperatorStateContext) but not in the constructor which was FLINK-14156 fixed.", "url": "https://github.com/apache/flink/pull/11624#discussion_r402898020", "createdAt": "2020-04-03T10:04:45Z", "author": {"login": "Myasuka"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjUyNA==", "bodyText": "I think either approach can be refactored in future.\nUsing constructor is the usual way how we inject dependencies for tests. The inheritance is usually used to change more complicated internal behaviour.\nYou could also keep the current constructor and add another one annotated with @VisibleForTesting which could accept the custom TtlTimeProvider field.", "url": "https://github.com/apache/flink/pull/11624#discussion_r402916524", "createdAt": "2020-04-03T10:40:37Z", "author": {"login": "azagrebin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwNzcwNw==", "bodyText": "There existed another problem why we not change the constructor of StreamTaskStateInitializerImpl.\nCurrent AbstractStreamOperatorTestHarness is not created from a builder, and once a new AbstractStreamOperatorTestHarness is created, the inner streamTaskStateInitializer has been created with the default TtlTimeProvider. Even we set ttl time provider to AbstractStreamOperatorTestHarness later, the inner streamTaskStateInitializer would not notice the changed ttl time provider unless we call AbstractStreamOperatorTestHarness#setup to re-create the inner streamTaskStateInitializer.\nHowever, AbstractStreamOperatorTestHarness#setup actually call a deprecated SetupableStreamOperator#setup interface.\nIn a nutshell, unless we refactor how we build AbstractStreamOperatorTestHarness, to make the customized ttl time provider take effect, we must call AbstractStreamOperatorTestHarness#setup each time which might already be treated as a deprecated interface.", "url": "https://github.com/apache/flink/pull/11624#discussion_r403207707", "createdAt": "2020-04-03T18:08:39Z", "author": {"login": "Myasuka"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU5MDIyNw==", "bodyText": "Then I think it makes sense to consider builders to avoid adding more harness constructors.", "url": "https://github.com/apache/flink/pull/11624#discussion_r404590227", "createdAt": "2020-04-07T07:22:52Z", "author": {"login": "azagrebin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzMTQyOA==", "bodyText": "Why not AbstractStreamOperatorTestHarness always use a mocked TtlTimeProvider?  Just like always use the TestProcessingTimeService. Then we don't need to re-create the inner streamTaskStateInitializer.\nI also prefer the way to set processing time on the harness object AbstractStreamOperatorTestHarness#setProcessingTime instead of on other object mockTtlTimeProvider.setCurrentTimeStamp(0L). We can provide a method setStateTtlTime() on the AbstractStreamOperatorTestHarness too.", "url": "https://github.com/apache/flink/pull/11624#discussion_r406631428", "createdAt": "2020-04-10T07:02:13Z", "author": {"login": "wuchong"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1MzIzMw==", "bodyText": "This would indeed work. This is not flexible in general but may be good enough and we already have it for processing time.", "url": "https://github.com/apache/flink/pull/11624#discussion_r406653233", "createdAt": "2020-04-10T08:08:55Z", "author": {"login": "azagrebin"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1ODUxOA==", "bodyText": "I think @wuchong 's suggestion is also a available choice. However, I think FLINK-17011 is the most clean solution to clean up these test code. Although I have to admit that PR #11676 is a bit large for reviewing.", "url": "https://github.com/apache/flink/pull/11624#discussion_r406658518", "createdAt": "2020-04-10T08:24:11Z", "author": {"login": "Myasuka"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY2MDc5MA==", "bodyText": "What about going with this approach first? This can be merged faster and unblock other works. We can also continue the cleanup work using new builders after that, and expose custom time provider in builders to make it more flexible.", "url": "https://github.com/apache/flink/pull/11624#discussion_r406660790", "createdAt": "2020-04-10T08:30:44Z", "author": {"login": "wuchong"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/operators/StreamTaskStateInitializerImpl.java", "diffHunk": "@@ -258,6 +258,10 @@ protected OperatorStateBackend operatorStateBackend(\n \t\t}\n \t}\n \n+\tprotected TtlTimeProvider getTtlTimeProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3NTU0Ng=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODc1OTU1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwOTozMDoxMVrOGANv7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowNjowNVrOGAO-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODQ0Nw==", "bodyText": "I would avoid exposing getTtlTimeProvider in AbstractKeyedStateBackend, although we annotate with VisibleForTesting, it still becomes visible for users.\nThe working of custom TtlTimeProvider can be tested e.g. by creating TTL states and checking that they expire according the custom timestamp. Also this will be tested by other tests which rely on this injection of custom TtlTimeProvider.", "url": "https://github.com/apache/flink/pull/11624#discussion_r402878447", "createdAt": "2020-04-03T09:30:11Z", "author": {"login": "azagrebin"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java", "diffHunk": "@@ -52,4 +55,24 @@ public void testInitializeAfterOpenning() throws Throwable {\n \t\tresult.open();\n \t\tresult.initializeState(new OperatorSubtaskState());\n \t}\n+\n+\t@Test\n+\tpublic void testSetTtlTimeProvider() throws Exception {\n+\t\tAbstractStreamOperatorTestHarness<Integer> result;\n+\t\tAbstractStreamOperator operator = new AbstractStreamOperator<Integer>() {};\n+\t\tresult =\n+\t\t\tnew AbstractStreamOperatorTestHarness<>(\n+\t\t\t\toperator,\n+\t\t\t\t1,\n+\t\t\t\t1,\n+\t\t\t\t0);\n+\t\tresult.config.setStateKeySerializer(IntSerializer.INSTANCE);\n+\n+\t\tlong expectedTimeStamp = 42;\n+\t\tresult.setTtlTimeProvider(() -> expectedTimeStamp);\n+\t\tresult.initializeState(new OperatorSubtaskState());\n+\t\tresult.open();\n+\t\tAssert.assertEquals(expectedTimeStamp,\n+\t\t\t((AbstractKeyedStateBackend<?>) operator.getKeyedStateBackend()).getTtlTimeProvider().currentTimestamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5ODY4Nw==", "bodyText": "This sounds good, and I will update this test.", "url": "https://github.com/apache/flink/pull/11624#discussion_r402898687", "createdAt": "2020-04-03T10:06:05Z", "author": {"login": "Myasuka"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/util/AbstractStreamOperatorTestHarnessTest.java", "diffHunk": "@@ -52,4 +55,24 @@ public void testInitializeAfterOpenning() throws Throwable {\n \t\tresult.open();\n \t\tresult.initializeState(new OperatorSubtaskState());\n \t}\n+\n+\t@Test\n+\tpublic void testSetTtlTimeProvider() throws Exception {\n+\t\tAbstractStreamOperatorTestHarness<Integer> result;\n+\t\tAbstractStreamOperator operator = new AbstractStreamOperator<Integer>() {};\n+\t\tresult =\n+\t\t\tnew AbstractStreamOperatorTestHarness<>(\n+\t\t\t\toperator,\n+\t\t\t\t1,\n+\t\t\t\t1,\n+\t\t\t\t0);\n+\t\tresult.config.setStateKeySerializer(IntSerializer.INSTANCE);\n+\n+\t\tlong expectedTimeStamp = 42;\n+\t\tresult.setTtlTimeProvider(() -> expectedTimeStamp);\n+\t\tresult.initializeState(new OperatorSubtaskState());\n+\t\tresult.open();\n+\t\tAssert.assertEquals(expectedTimeStamp,\n+\t\t\t((AbstractKeyedStateBackend<?>) operator.getKeyedStateBackend()).getTtlTimeProvider().currentTimestamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3ODQ0Nw=="}, "originalCommit": {"oid": "668797635ab529ea21ef234a1f99747cfb4d898a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzk3ODAxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMjo1NVrOGD2kgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDowMjo1NVrOGD2kgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5Mjk5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void setCurrentTimeStamp(long timeStamp) {\n          \n          \n            \n            \tpublic void setCurrentTimestamp(long timestamp) {\n          \n      \n    \n    \n  \n\nA lowercase for S?", "url": "https://github.com/apache/flink/pull/11624#discussion_r406692992", "createdAt": "2020-04-10T10:02:55Z", "author": {"login": "wuchong"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/ttl/MockTtlTimeProvider.java", "diffHunk": "@@ -26,4 +26,8 @@\n \tpublic long currentTimestamp() {\n \t\treturn time;\n \t}\n+\n+\tpublic void setCurrentTimeStamp(long timeStamp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb18708f59f83bdee706e5d0faaf83139e85adb8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 620, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}