{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4Mjg2NzEz", "number": 13155, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0MDozOVrOEYtFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo0MDozN1rOEZB0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQwMDE4OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0MDozOVrOHBKr7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0MDozOVrOHBKr7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk4NTcwOQ==", "bodyText": "add a number which greater than expected_num_partitions", "url": "https://github.com/apache/flink/pull/13155#discussion_r470985709", "createdAt": "2020-08-15T13:40:39Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "diffHunk": "@@ -304,6 +305,28 @@ def test_shuffle(self):\n         pre_ship_strategy = shuffle_node['predecessors'][0]['ship_strategy']\n         self.assertEqual(pre_ship_strategy, 'SHUFFLE')\n \n+    def test_partition_custom(self):\n+        ds = self.env.from_collection([('a', 0), ('b', 0), ('c', 1), ('d', 1), ('e', 2)],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQyMTk3OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/data_stream.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0Njo1OVrOHBK4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo0Njo1OVrOHBK4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk4OTAwNQ==", "bodyText": "Can we find ways to init num_partitions only once?", "url": "https://github.com/apache/flink/pull/13155#discussion_r470989005", "createdAt": "2020-08-15T13:46:59Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -434,6 +434,60 @@ def broadcast(self) -> 'DataStream':\n         \"\"\"\n         return DataStream(self._j_data_stream.broadcast())\n \n+    def partition_custom(self, partitioner: Union[Callable, Partitioner],\n+                         key_selector: Union[Callable, KeySelector]) -> 'DataStream':\n+        \"\"\"\n+        Partitions a DataStream on the key returned by the selector, using a custom partitioner.\n+        This method takes the key selector to get the key to partition on, and a partitioner that\n+        accepts the key type.\n+\n+        Note that this method works only on single field keys, i.e. the selector cannet return\n+        tuples of fields.\n+\n+        :param partitioner: The partitioner to assign partitions to keys.\n+        :param key_selector: The KeySelector with which the DataStream is partitioned.\n+        :return: The partitioned DataStream.\n+        \"\"\"\n+        if callable(key_selector):\n+            key_selector = KeySelectorFunctionWrapper(key_selector)\n+        if not isinstance(key_selector, (KeySelector, KeySelectorFunctionWrapper)):\n+            raise TypeError(\"Parameter key_selector should be a type of KeySelector.\")\n+\n+        if callable(partitioner):\n+            partitioner = PartitionerFunctionWrapper(partitioner)\n+        if not isinstance(partitioner, (Partitioner, PartitionerFunctionWrapper)):\n+            raise TypeError(\"Parameter partitioner should be a type of Partitioner.\")\n+\n+        gateway = get_gateway()\n+        data_stream_num_partitions_env_key = gateway.jvm\\\n+            .org.apache.flink.datastream.runtime.operators.python\\\n+            .DataStreamPythonPartitionCustomFunctionOperator.DATA_STREAM_NUM_PARTITIONS\n+\n+        def partition_custom_map(value):\n+            num_partitions = int(os.environ[data_stream_num_partitions_env_key])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQ1MDUyOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo1NzoyMFrOHBLJQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo1NzoyMFrOHBLJQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5MzIxOA==", "bodyText": "Keep a line break.", "url": "https://github.com/apache/flink/pull/13155#discussion_r470993218", "createdAt": "2020-08-15T13:57:20Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -154,6 +154,22 @@ def filter(self, value):\n         pass\n \n \n+class Partitioner(Function):\n+    \"\"\"\n+    Function to implement a custom partition assignment for keys.\n+    \"\"\"\n+\n+    @abc.abstractmethod\n+    def partition(self, key, num_partitions: int) -> int:\n+        \"\"\"\n+        Computes the partition for the given key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQ1MTU1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo1ODo1NVrOHBLJuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo1ODo1NVrOHBLJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5MzMzNg==", "bodyText": "Type hint", "url": "https://github.com/apache/flink/pull/13155#discussion_r470993336", "createdAt": "2020-08-15T13:58:55Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -274,6 +290,30 @@ def get_key(self, value):\n         return self._func(value)\n \n \n+class PartitionerFunctionWrapper(FunctionWrapper):\n+    \"\"\"\n+    A wrapper class for Partitioner. It's used for wrapping up user defined function in a\n+    Partitioner when user does not implement a Partitioner but directly pass a function\n+    object or a lambda function to partition_custom() function.\n+    \"\"\"\n+    def __init__(self, func):\n+        \"\"\"\n+        The constructor of PartitionerFunctionWrapper.\n+\n+        :param func: user defined function object.\n+        \"\"\"\n+        super(PartitionerFunctionWrapper, self).__init__(func)\n+\n+    def partition(self, key, num_partitions):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQ2MjQ2OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/functions.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoxNToyNFrOHBLO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoxNToyNFrOHBLO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDY2MQ==", "bodyText": "Add this function here would confuse users since this is not a public Function. I think we can find other ways to judge whether this is a  PartitionCustomMapFunction. For example, we can add a local MapFunction returning a special __expr__(toString).", "url": "https://github.com/apache/flink/pull/13155#discussion_r470994661", "createdAt": "2020-08-15T14:15:24Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -324,3 +364,16 @@ def __init__(self, sink_func: Union[str, JavaObject]):\n         :param sink_func: The java SinkFunction object or the full name of the SinkFunction class.\n         \"\"\"\n         super(SinkFunction, self).__init__(sink_func)\n+\n+\n+class PartitionCustomMapFunction(MapFunction):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQ2NTA0OnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/PartitionCustomPartitioner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoxOTozM1rOHBLQFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoxOTozM1rOHBLQFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NDk2Nw==", "bodyText": "Don't need this class. We can reuse org.apache.flink.api.java.functions.IdPartitioner", "url": "https://github.com/apache/flink/pull/13155#discussion_r470994967", "createdAt": "2020-08-15T14:19:33Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/PartitionCustomPartitioner.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.api.common.functions.Partitioner;\n+\n+/**\n+ * A {@link PartitionCustomPartitioner} is a dedicated Partitioner for Python DataStream custom partitioning operation.\n+ * It will directly return the calculated key value as the partition index of current task.\n+ */\n+public class PartitionCustomPartitioner implements Partitioner<Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQ2NzkzOnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/python/env/beam/ProcessPythonEnvironmentManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoyMzozOVrOHBLRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoyMzozOVrOHBLRdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NTMxNg==", "bodyText": "Rename to setEnvironmentVariable. This method would replace the old value if key exists.", "url": "https://github.com/apache/flink/pull/13155#discussion_r470995316", "createdAt": "2020-08-15T14:23:39Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/python/env/beam/ProcessPythonEnvironmentManager.java", "diffHunk": "@@ -240,6 +240,10 @@ public String createRetrievalToken() throws IOException {\n \t\treturn env;\n \t}\n \n+\tpublic void appendEnvironmentVariable(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MzQ3MjEyOnYy", "diffSide": "RIGHT", "path": "flink-python/src/main/java/org/apache/flink/streaming/api/operators/python/AbstractPythonFunctionOperator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxNDoyOTo0NFrOHBLTcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMDowOTozM1rOHBikzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NTgyNA==", "bodyText": "Why need this change?", "url": "https://github.com/apache/flink/pull/13155#discussion_r470995824", "createdAt": "2020-08-15T14:29:44Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/streaming/api/operators/python/AbstractPythonFunctionOperator.java", "diffHunk": "@@ -344,7 +345,7 @@ protected PythonEnvironmentManager createPythonEnvironmentManager() throws IOExc\n \t\t\treturn new ProcessPythonEnvironmentManager(\n \t\t\t\tdependencyInfo,\n \t\t\t\tgetContainingTask().getEnvironment().getTaskManagerInfo().getTmpDirectories(),\n-\t\t\t\tSystem.getenv());\n+\t\t\t\tnew HashMap<>(System.getenv()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM3NzEwMg==", "bodyText": "Because System.getenv() returns a Collections.unmodifiableMap that we can not set any new env variables, therefore we will put it into a new HashMap.", "url": "https://github.com/apache/flink/pull/13155#discussion_r471377102", "createdAt": "2020-08-17T10:09:33Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/src/main/java/org/apache/flink/streaming/api/operators/python/AbstractPythonFunctionOperator.java", "diffHunk": "@@ -344,7 +345,7 @@ protected PythonEnvironmentManager createPythonEnvironmentManager() throws IOExc\n \t\t\treturn new ProcessPythonEnvironmentManager(\n \t\t\t\tdependencyInfo,\n \t\t\t\tgetContainingTask().getEnvironment().getTaskManagerInfo().getTmpDirectories(),\n-\t\t\t\tSystem.getenv());\n+\t\t\t\tnew HashMap<>(System.getenv()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5NTgyNA=="}, "originalCommit": {"oid": "70aeee4d216b47fe0f118abec2758f0a7f6a1260"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Njc5NjgzOnYy", "diffSide": "RIGHT", "path": "flink-python/src/test/java/org/apache/flink/python/util/PartitionCustomTestMapFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo0MDozN1rOHBnDRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjo0MDozN1rOHBnDRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1MDQzOA==", "bodyText": "you need to turn on the -ea switch (enable assertions), otherwise no assert instructions will be run by the JVM at all", "url": "https://github.com/apache/flink/pull/13155#discussion_r471450438", "createdAt": "2020-08-17T12:40:37Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/test/java/org/apache/flink/python/util/PartitionCustomTestMapFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.python.util;\n+\n+import org.apache.flink.api.common.functions.RichMapFunction;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.types.Row;\n+\n+/**\n+ * {@link PartitionCustomTestMapFunction} is a dedicated MapFunction to make sure the specific field data is equal to\n+ * current sub-task index.\n+ */\n+public class PartitionCustomTestMapFunction extends RichMapFunction<Row, Row> {\n+\n+\tprivate int currentTaskIndex;\n+\n+\t@Override\n+\tpublic void open(Configuration parameters) {\n+\t\tthis.currentTaskIndex = getRuntimeContext().getIndexOfThisSubtask();\n+\t}\n+\n+\t@Override\n+\tpublic Row map(Row value) throws Exception {\n+\t\tassert value.getField(1).equals(currentTaskIndex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f640f8fd9dae4c15b536d9a7a243c355c844b1"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 559, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}