{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MjAzMzc1", "number": 11556, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowNjozNVrODsiWww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMToxMlrODsjuog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDI2ODE5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzowNjozNVrOF9cIBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoyODo1M1rOF9e1bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2ODI2MA==", "bodyText": "Extract this test_data_types_only_supported_in_blink_planner into a class and make the  BlinkStreamPandasUDFITTests and BlinkBatchPandasUDFITTests extending from this class.", "url": "https://github.com/apache/flink/pull/11556#discussion_r399968260", "createdAt": "2020-03-30T07:06:35Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "diffHunk": "@@ -255,7 +276,44 @@ class BlinkBatchPandasUDFITTests(PandasUDFITTests,\n \n class BlinkStreamPandasUDFITTests(PandasUDFITTests,\n                                   PyFlinkBlinkStreamTableTestCase):\n-    pass\n+\n+    def test_data_types_only_supported_in_blink_planner(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523696304fb5cbb20fc334127398571a3bf245ae"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAxMjY1Mw==", "bodyText": "Good idea. +1", "url": "https://github.com/apache/flink/pull/11556#discussion_r400012653", "createdAt": "2020-03-30T08:28:53Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "diffHunk": "@@ -255,7 +276,44 @@ class BlinkBatchPandasUDFITTests(PandasUDFITTests,\n \n class BlinkStreamPandasUDFITTests(PandasUDFITTests,\n                                   PyFlinkBlinkStreamTableTestCase):\n-    pass\n+\n+    def test_data_types_only_supported_in_blink_planner(self):", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2ODI2MA=="}, "originalCommit": {"oid": "523696304fb5cbb20fc334127398571a3bf245ae"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDQ3OTM4OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODowODowMFrOF9eFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODowODowMFrOF9eFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMDI4Nw==", "bodyText": "How about \"timestamp_param is wrong value %s, should be %s!\"", "url": "https://github.com/apache/flink/pull/11556#discussion_r400000287", "createdAt": "2020-03-30T08:08:00Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "diffHunk": "@@ -140,6 +142,16 @@ def time_func(time_param):\n                 'time_param of wrong type %s !' % type(time_param[0])\n             return time_param\n \n+        timestamp_value = datetime.datetime(1970, 1, 1, 0, 0, 0, 123000)\n+\n+        def timestamp_func(timestamp_param):\n+            assert isinstance(timestamp_param, pd.Series)\n+            assert isinstance(timestamp_param[0], datetime.datetime), \\\n+                'timestamp_param of wrong type %s !' % type(timestamp_param[0])\n+            assert timestamp_param[0] == timestamp_value, \\\n+                'timestamp_param is wrong value %s, %s!' % (timestamp_param[0], timestamp_value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523696304fb5cbb20fc334127398571a3bf245ae"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDQ5MzE0OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/table/types.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMToxMlrOF9eM5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwODoxMToxMlrOF9eM5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAwMjI3Ng==", "bodyText": "Maybe type(data_type) in [LocalZonedTimestampType, TimestampType]:", "url": "https://github.com/apache/flink/pull/11556#discussion_r400002276", "createdAt": "2020-03-30T08:11:12Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/table/types.py", "diffHunk": "@@ -2282,6 +2288,55 @@ def verify(obj):\n     return verify\n \n \n+def to_arrow_type(data_type):\n+    \"\"\"\n+    Converts the specified Flink data type to pyarrow data type.\n+    \"\"\"\n+    import pyarrow as pa\n+    if type(data_type) == TinyIntType:\n+        return pa.int8()\n+    elif type(data_type) == SmallIntType:\n+        return pa.int16()\n+    elif type(data_type) == IntType:\n+        return pa.int32()\n+    elif type(data_type) == BigIntType:\n+        return pa.int64()\n+    elif type(data_type) == BooleanType:\n+        return pa.bool_()\n+    elif type(data_type) == FloatType:\n+        return pa.float32()\n+    elif type(data_type) == DoubleType:\n+        return pa.float64()\n+    elif type(data_type) == VarCharType:\n+        return pa.utf8()\n+    elif type(data_type) == VarBinaryType:\n+        return pa.binary()\n+    elif type(data_type) == DecimalType:\n+        return pa.decimal128(data_type.precision, data_type.scale)\n+    elif type(data_type) == DateType:\n+        return pa.date32()\n+    elif type(data_type) == TimeType:\n+        if data_type.precision == 0:\n+            return pa.time32('s')\n+        elif 1 <= data_type.precision <= 3:\n+            return pa.time32('ms')\n+        elif 4 <= data_type.precision <= 6:\n+            return pa.time64('us')\n+        else:\n+            return pa.time64('ns')\n+    elif type(data_type) == LocalZonedTimestampType or type(data_type) == TimestampType:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523696304fb5cbb20fc334127398571a3bf245ae"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 749, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}