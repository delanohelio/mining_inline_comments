{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODQxODU1", "number": 11592, "title": "[FLINK-16871][runtime] Make more build time information available at runtime", "bodyText": "FLINK-16871: Make more build time information available at runtime\nWhat is the purpose of the change\nAs discussed here additional build time information is needed at runtime. This pull request is to make this specific change a separate thing.\nBrief change log\n\nGenerate a Version.java file from maven with several properties.\nUpdate the git-commit-id-plugin to the latest version (only the mentioned 2.1.14 was problematic). And updated the url in the comment to the git-commit-id-plugin github repo.\nBy fixating the datetime format in the git-commit-id-plugin these can be reliably exposed as returning an Instant. This makes it possible to reliably format these timestamps in any form we like. The code has been structured in such a way that as little as possible memory remains allocated. For the latest commit and build time a String version of those timestamps is also available and those are formatted using the Europe/Berlin timezone (the origin of Flink) and thus independent of the locale/timezone of the system that created the build.\nThe .version.properties is no longer generated as this was part of the old solution and it is not used anywhere else in the code base.\n\nVerifying this change\nThis change added a few basic test steps.\nVerifying the actual values is not possible because after commit and on each build the values will (and should) be different. Also checking if the commit time is not older than X would mean that a working version of the software would fail the build a while later.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): yes: build time plugin is updated\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no, not really A few more getters are now available in the EnvironmentInformation which only affects developers who need this information.\nIf yes, how is the feature documented? JavaDocs", "createdAt": "2020-04-01T08:33:38Z", "url": "https://github.com/apache/flink/pull/11592", "merged": true, "mergeCommit": {"oid": "a9f72f9565813604af11325c9b1bb6888da143cf"}, "closed": true, "closedAt": "2020-05-06T13:06:58Z", "author": {"login": "nielsbasjes"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTTsWggBqjMxODY4NTQ0MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcekpLNABqjMzMDc0ODA4OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e4d9cc30bfa73f0ac69f842725013662adc93a3", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/5e4d9cc30bfa73f0ac69f842725013662adc93a3", "committedDate": "2020-04-01T08:31:48Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "committedDate": "2020-04-01T08:46:47Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDI4NzUx", "url": "https://github.com/apache/flink/pull/11592#pullrequestreview-389028751", "createdAt": "2020-04-07T11:34:09Z", "commit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTozNDowOVrOGB_VlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMTo1MTowMFrOGB_3bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDczOTQ3Ng==", "bodyText": "why are we changing the version?", "url": "https://github.com/apache/flink/pull/11592#discussion_r404739476", "createdAt": "2020-04-07T11:34:09Z", "author": {"login": "zentol"}, "path": "pom.xml", "diffHunk": "@@ -1811,14 +1811,18 @@ under the License.\n \t\t\t\t<plugin>\n \t\t\t\t\t<groupId>pl.project13.maven</groupId>\n \t\t\t\t\t<artifactId>git-commit-id-plugin</artifactId>\n-\t\t\t\t\t<!-- Don't use 2.1.14 as it is incompatible with various maven versions -->\n-\t\t\t\t\t<version>2.1.10</version>\n+\t\t\t\t\t<version>4.0.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0MDAxMA==", "bodyText": "this seems quite Flink developer oriented and I'm not convinced we need it. How would this be exposed to the developer?", "url": "https://github.com/apache/flink/pull/11592#discussion_r404740010", "createdAt": "2020-04-07T11:35:13Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,14 +49,77 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn PROJECT_VERSION;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn SCALA_VERSION;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn GIT_BUILD_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn GIT_BUILD_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn GIT_COMMIT_ID;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn GIT_COMMIT_ID_ABBREV;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn GIT_COMMIT_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn GIT_COMMIT_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return Does this built have modifications that have not yet been committed.\n+\t */\n+\tpublic static boolean getGitDirty() {\n+\t\treturn GIT_DIRTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0NzYzNQ==", "bodyText": "I would off on this one; it is currently not clear how this will be used and it will make more sense in the follow-up PR.", "url": "https://github.com/apache/flink/pull/11592#discussion_r404747635", "createdAt": "2020-04-07T11:50:02Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,14 +49,77 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn PROJECT_VERSION;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn SCALA_VERSION;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn GIT_BUILD_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn GIT_BUILD_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn GIT_COMMIT_ID;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn GIT_COMMIT_ID_ABBREV;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn GIT_COMMIT_TIME;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn GIT_COMMIT_TIME_STR;\n+\t}\n+\n+\t/**\n+\t * @return Does this built have modifications that have not yet been committed.\n+\t */\n+\tpublic static boolean getGitDirty() {\n+\t\treturn GIT_DIRTY;\n+\t}\n+\n+\t/**\n+\t * Returns the exact name of the Dockerimage for Flink that is needed to run in.\n+\t *\n+\t * @return The \"name:tag\" of the Flink docker image.\n+\t */\n+\tpublic static String getFlinkDockerImageNameAndTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc0ODE0Mw==", "bodyText": "this isn't used anywhere?", "url": "https://github.com/apache/flink/pull/11592#discussion_r404748143", "createdAt": "2020-04-07T11:51:00Z", "author": {"login": "zentol"}, "path": "flink-runtime/pom.xml", "diffHunk": "@@ -402,6 +402,38 @@ under the License.\n \t\t\t\t</configuration>\n \t\t\t</plugin>\n \n+\t\t\t<plugin>\n+\t\t\t\t<groupId>com.google.code.maven-replacer-plugin</groupId>\n+\t\t\t\t<artifactId>replacer</artifactId>\n+\t\t\t\t<version>1.5.3</version>\n+\t\t\t\t<executions>\n+\t\t\t\t\t<execution>\n+\t\t\t\t\t\t<id>Generate Version Java</id>\n+\t\t\t\t\t\t<phase>generate-sources</phase>\n+\t\t\t\t\t\t<goals>\n+\t\t\t\t\t\t\t<goal>replace</goal>\n+\t\t\t\t\t\t</goals>\n+\t\t\t\t\t\t<configuration>\n+\t\t\t\t\t\t\t<file>${basedir}/src/main/code-gen/version/Version.java.template</file>\n+\t\t\t\t\t\t\t<outputFile>${basedir}/target/generated-sources/java/org/apache/flink/version/Version.java</outputFile>\n+\t\t\t\t\t\t</configuration>\n+\t\t\t\t\t</execution>\n+\t\t\t\t</executions>\n+\t\t\t\t<configuration>\n+\t\t\t\t\t<replacements>\n+\t\t\t\t\t\t<replacement><token>@project.version@</token><value>${project.version}</value></replacement>\n+\t\t\t\t\t\t<replacement><token>@scala.version@</token><value>${scala.binary.version}</value></replacement>\n+\n+\t\t\t\t\t\t<replacement><token>@git.build.time@</token><value>${git.build.time}</value></replacement>\n+\t\t\t\t\t\t<replacement><token>@git.build.version@</token><value>${git.build.version}</value></replacement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/d215e4df60dc9d647dcee1aa9a2114cbf49d0566", "committedDate": "2020-04-01T08:46:47Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "47099f663b7644056e9d87b262cd4dba034f513e", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/47099f663b7644056e9d87b262cd4dba034f513e", "committedDate": "2020-04-08T12:58:33Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47099f663b7644056e9d87b262cd4dba034f513e", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/47099f663b7644056e9d87b262cd4dba034f513e", "committedDate": "2020-04-08T12:58:33Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "347da3e6e6a4728ad972b39b58b3946675dd990b", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/347da3e6e6a4728ad972b39b58b3946675dd990b", "committedDate": "2020-04-20T12:26:55Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "347da3e6e6a4728ad972b39b58b3946675dd990b", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/347da3e6e6a4728ad972b39b58b3946675dd990b", "committedDate": "2020-04-20T12:26:55Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "85b85208d9f7dbd75e48c85ff8837131204ba156", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/85b85208d9f7dbd75e48c85ff8837131204ba156", "committedDate": "2020-04-20T12:45:13Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85b85208d9f7dbd75e48c85ff8837131204ba156", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/85b85208d9f7dbd75e48c85ff8837131204ba156", "committedDate": "2020-04-20T12:45:13Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/3f68dbf9b6ee1686394e6c83720c616384e429f0", "committedDate": "2020-04-20T12:47:16Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjY2NjA2", "url": "https://github.com/apache/flink/pull/11592#pullrequestreview-397266606", "createdAt": "2020-04-21T12:11:17Z", "commit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxMToxN1rOGJCWQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjoxNToyOVrOGJCgwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyODgzMg==", "bodyText": "The $ branch means that it will fail if I just run it in the IDE; instead we should return the unknown value.", "url": "https://github.com/apache/flink/pull/11592#discussion_r412128832", "createdAt": "2020-04-21T12:11:17Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyOTA5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate String  projectVersion    = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  scalaVersion      = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  gitCommitId       = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  projectVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  scalaVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  gitCommitId = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;", "url": "https://github.com/apache/flink/pull/11592#discussion_r412129093", "createdAt": "2020-04-21T12:11:42Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyOTIwNA==", "bodyText": "Suggested change", "url": "https://github.com/apache/flink/pull/11592#discussion_r412129204", "createdAt": "2020-04-21T12:11:51Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEyOTM1Ng==", "bodyText": "Suggested change", "url": "https://github.com/apache/flink/pull/11592#discussion_r412129356", "createdAt": "2020-04-21T12:12:05Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMDY3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n          \n          \n            \n            \t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {", "url": "https://github.com/apache/flink/pull/11592#discussion_r412130674", "createdAt": "2020-04-21T12:14:10Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTAxNA==", "bodyText": "why this distinction?", "url": "https://github.com/apache/flink/pull/11592#discussion_r412131014", "createdAt": "2020-04-21T12:14:41Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,148 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING  = \"1970-01-01T00:00:00Z\";\n+\n+\n+\t\tprivate String  projectVersion    = UNKNOWN;\n+\t\tprivate String  scalaVersion      = UNKNOWN;\n+\t\tprivate Instant gitBuildTime      = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr   = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId       = UNKNOWN;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN;\n+\t\tprivate Instant gitCommitTime     = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr  = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry(InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\t\tif (propFile != null) {\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\tproperties.load(propFile);\n+\n+\t\t\t\t\tprojectVersion           = getProperty(properties, \"project.version\");\n+\t\t\t\t\tscalaVersion             = getProperty(properties, \"scala.binary.version\");\n+\n+\t\t\t\t\tgitCommitId              = getProperty(properties, \"git.commit.id\");\n+\t\t\t\t\tgitCommitIdAbbrev        = getProperty(properties, \"git.commit.id.abbrev\");\n+\n+\t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n+\t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+\t\t\t\t\t// Default format is in Berlin timezone because that is where Flink originated.\n+\t\t\t\t\tDateTimeFormatter BERLIN_DATE_TIME = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Europe/Berlin\"));\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tString propGitCommitTime = properties.getProperty(\"git.commit.time\",      DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitCommitTime = gitDateTimeFormatter.parse(propGitCommitTime, Instant::from);\n+\t\t\t\t\t\tgitCommitTimeStr = BERLIN_DATE_TIME.format(gitCommitTime);\n+\n+\t\t\t\t\t\tString propGitBuildTime  = properties.getProperty(\"git.build.time\",       DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitBuildTime = gitDateTimeFormatter.parse(propGitBuildTime, Instant::from);\n+\t\t\t\t\t\tgitBuildTimeStr = BERLIN_DATE_TIME.format(gitBuildTime);\n+\t\t\t\t\t} catch (DateTimeParseException dtpe) {\n+\t\t\t\t\t\tLOG.error(\"{} : {}\", FAIL_MESSAGE, dtpe);\n+\t\t\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch(IOException ioe) {\n+\t\t\t\tif (LOG.isDebugEnabled()) {\n+\t\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.: {}\", ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEzMTUyMA==", "bodyText": "Why are we adding this?", "url": "https://github.com/apache/flink/pull/11592#discussion_r412131520", "createdAt": "2020-04-21T12:15:29Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -367,5 +478,13 @@ public RevisionInformation(String commitId, String commitDate) {\n \t\t\tthis.commitId = commitId;\n \t\t\tthis.commitDate = commitDate;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f68dbf9b6ee1686394e6c83720c616384e429f0"}, "originalPosition": 224}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9827205434e21594c65bf53f7c5c2ceca5cf5f18", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/9827205434e21594c65bf53f7c5c2ceca5cf5f18", "committedDate": "2020-04-28T07:20:39Z", "message": "Update flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\nCo-Authored-By: Chesnay Schepler <chesnay@apache.org>"}, "afterCommit": {"oid": "089bf5d4d25369d9a4a8e5d46975be4591d01660", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/089bf5d4d25369d9a4a8e5d46975be4591d01660", "committedDate": "2020-04-28T08:54:39Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzkyMzcz", "url": "https://github.com/apache/flink/pull/11592#pullrequestreview-401792373", "createdAt": "2020-04-28T12:39:30Z", "commit": {"oid": "089bf5d4d25369d9a4a8e5d46975be4591d01660"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjozOTozMVrOGNR8qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjo0NDoxNFrOGNSIzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU3ODcyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n          \n          \n            \n            \t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n          \n          \n            \n            \t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n          \n          \n            \n            \t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n          \n          \n            \n            \t\tprivate String  projectVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate String  scalaVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n          \n          \n            \n            \t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n          \n          \n            \n            \t\tprivate static final String DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n          \n          \n            \n            \t\tprivate static final String UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n          \n          \n            \n            \t\tprivate static final String UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n          \n          \n            \n            \t\tprivate String projectVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate String scalaVersion = UNKNOWN;\n          \n          \n            \n            \t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String gitBuildTimeStr = DEFAULT_TIME_STRING;\n          \n          \n            \n            \t\tprivate String gitCommitId = UNKNOWN_COMMIT_ID;\n          \n          \n            \n            \t\tprivate String gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n          \n          \n            \n            \t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n          \n          \n            \n            \t\tprivate String gitCommitTimeStr = DEFAULT_TIME_STRING;", "url": "https://github.com/apache/flink/pull/11592#discussion_r416578729", "createdAt": "2020-04-28T12:39:31Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,143 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "089bf5d4d25369d9a4a8e5d46975be4591d01660"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTMyNg==", "bodyText": "private?", "url": "https://github.com/apache/flink/pull/11592#discussion_r416581326", "createdAt": "2020-04-28T12:43:23Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,143 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\t\tif (propFile != null) {\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\tproperties.load(propFile);\n+\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n+\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n+\n+\t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n+\t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+\t\t\t\t\t// Default format is in Berlin timezone because that is where Flink originated.\n+\t\t\t\t\tDateTimeFormatter BERLIN_DATE_TIME = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Europe/Berlin\"));\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tString propGitCommitTime = getProperty(properties, \"git.commit.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitCommitTime = gitDateTimeFormatter.parse(propGitCommitTime, Instant::from);\n+\t\t\t\t\t\tgitCommitTimeStr = BERLIN_DATE_TIME.format(gitCommitTime);\n+\n+\t\t\t\t\t\tString propGitBuildTime  = getProperty(properties, \"git.build.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitBuildTime = gitDateTimeFormatter.parse(propGitBuildTime, Instant::from);\n+\t\t\t\t\t\tgitBuildTimeStr = BERLIN_DATE_TIME.format(gitBuildTime);\n+\t\t\t\t\t} catch (DateTimeParseException dtpe) {\n+\t\t\t\t\t\tLOG.error(\"{} : {}\", FAIL_MESSAGE, dtpe);\n+\t\t\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch(IOException ioe) {\n+\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.: {}\", ioe.getMessage());\n \t\t\t}\n \t\t}\n-\t\t\n-\t\treturn new RevisionInformation(revision, commitDate);\n+\t}\n+\n+\tprivate static final class VersionsHolder {\n+\t\tprivate static final Versions INSTANCE = new Versions();\n+\t}\n+\n+\tpublic static Versions getVersionsInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "089bf5d4d25369d9a4a8e5d46975be4591d01660"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU4MTgzOQ==", "bodyText": "We usually don't encapsulate singletons. What is the goal behind the holder? (I haven't seen this before)", "url": "https://github.com/apache/flink/pull/11592#discussion_r416581839", "createdAt": "2020-04-28T12:44:14Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java", "diffHunk": "@@ -41,42 +45,143 @@\n \tpublic static final String UNKNOWN = \"<unknown>\";\n \n \t/**\n-\t * Returns the version of the code as String. If version == null, then the JobManager does not run from a\n-\t * Maven build. An example is a source code checkout, compile, and run from inside an IDE.\n-\t * \n-\t * @return The version string.\n+\t * Returns the version of the code as String.\n+\t * @return The project version string.\n \t */\n \tpublic static String getVersion() {\n-\t\tString version = EnvironmentInformation.class.getPackage().getImplementationVersion();\n-\t\treturn version != null ? version : UNKNOWN;\n+\t\treturn getVersionsInstance().projectVersion;\n+\t}\n+\n+\t/**\n+\t * Returns the version of the used Scala compiler as String.\n+\t * @return The scala version string.\n+\t */\n+\tpublic static String getScalaVersion() {\n+\t\treturn getVersionsInstance().scalaVersion;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built.\n+\t */\n+\tpublic static Instant getBuildTime() {\n+\t\treturn getVersionsInstance().gitBuildTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant this version of the software was built as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getBuildTimeString() {\n+\t\treturn getVersionsInstance().gitBuildTimeStr;\n+\t}\n+\n+\t/**\n+\t * @return The last known commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitId() {\n+\t\treturn getVersionsInstance().gitCommitId;\n+\t}\n+\n+\t/**\n+\t * @return The last known abbreviated commit id of this version of the software.\n+\t */\n+\tpublic static String getGitCommitIdAbbrev() {\n+\t\treturn getVersionsInstance().gitCommitIdAbbrev;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code.\n+\t */\n+\tpublic static Instant getGitCommitTime() {\n+\t\treturn getVersionsInstance().gitCommitTime;\n+\t}\n+\n+\t/**\n+\t * @return The Instant of the last commit of this code as a String using the Europe/Berlin timezone.\n+\t */\n+\tpublic static String getGitCommitTimeString() {\n+\t\treturn getVersionsInstance().gitCommitTimeStr;\n \t}\n \n \t/**\n \t * Returns the code revision (commit and commit date) of Flink, as generated by the Maven builds.\n-\t * \n+\t *\n \t * @return The code revision.\n \t */\n \tpublic static RevisionInformation getRevisionInformation() {\n-\t\tString revision = UNKNOWN;\n-\t\tString commitDate = UNKNOWN;\n-\t\ttry (InputStream propFile = EnvironmentInformation.class.getClassLoader().getResourceAsStream(\".version.properties\")) {\n-\t\t\tif (propFile != null) {\n-\t\t\t\tProperties properties = new Properties();\n-\t\t\t\tproperties.load(propFile);\n-\t\t\t\tString propRevision = properties.getProperty(\"git.commit.id.abbrev\");\n-\t\t\t\tString propCommitDate = properties.getProperty(\"git.commit.time\");\n-\t\t\t\trevision = propRevision != null ? propRevision : UNKNOWN;\n-\t\t\t\tcommitDate = propCommitDate != null ? propCommitDate : UNKNOWN;\n+\t\treturn new RevisionInformation(getGitCommitIdAbbrev(), getGitCommitTimeString());\n+\t}\n+\n+\tprivate static final class Versions {\n+\t\tprivate static final Instant DEFAULT_TIME_INSTANT = Instant.EPOCH;\n+\t\tprivate static final String  DEFAULT_TIME_STRING = \"1970-01-01T00:00:00+0000\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID = \"DecafC0ffeeD0d0F00d\";\n+\t\tprivate static final String  UNKNOWN_COMMIT_ID_ABBREV = \"DeadD0d0\";\n+\t\tprivate String  projectVersion = UNKNOWN;\n+\t\tprivate String  scalaVersion = UNKNOWN;\n+\t\tprivate Instant gitBuildTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitBuildTimeStr = DEFAULT_TIME_STRING;\n+\t\tprivate String  gitCommitId = UNKNOWN_COMMIT_ID;\n+\t\tprivate String  gitCommitIdAbbrev = UNKNOWN_COMMIT_ID_ABBREV;\n+\t\tprivate Instant gitCommitTime = DEFAULT_TIME_INSTANT;\n+\t\tprivate String  gitCommitTimeStr = DEFAULT_TIME_STRING;\n+\n+\t\tprivate static final String PROP_FILE = \".flink-runtime.version.properties\";\n+\n+\t\tprivate static final String FAIL_MESSAGE = \"The file \" + PROP_FILE + \" has not been generated correctly. You MUST run 'mvn generate-sources' in the flink-runtime module.\";\n+\n+\t\tprivate String getProperty(Properties properties, String key, String defaultValue) {\n+\t\t\tString value = properties.getProperty(key);\n+\t\t\tif (value == null || value.charAt(0) == '$') {\n+\t\t\t\treturn defaultValue;\n \t\t\t}\n-\t\t} catch (Throwable t) {\n-\t\t\tif (LOG.isDebugEnabled()) {\n-\t\t\t\tLOG.debug(\"Cannot determine code revision: Unable to read version property file.\", t);\n-\t\t\t} else {\n-\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.\");\n+\t\t\treturn value;\n+\t\t}\n+\n+\t\tpublic Versions() {\n+\t\t\tClassLoader classLoader = EnvironmentInformation.class.getClassLoader();\n+\t\t\ttry (InputStream propFile = classLoader.getResourceAsStream(PROP_FILE)) {\n+\t\t\t\tif (propFile != null) {\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\tproperties.load(propFile);\n+\n+\t\t\t\t\tprojectVersion = getProperty(properties, \"project.version\", UNKNOWN);\n+\t\t\t\t\tscalaVersion = getProperty(properties, \"scala.binary.version\", UNKNOWN);\n+\n+\t\t\t\t\tgitCommitId = getProperty(properties, \"git.commit.id\", UNKNOWN_COMMIT_ID);\n+\t\t\t\t\tgitCommitIdAbbrev = getProperty(properties, \"git.commit.id.abbrev\", UNKNOWN_COMMIT_ID_ABBREV);\n+\n+\t\t\t\t\t// This is to reliably parse the datetime format configured in the git-commit-id-plugin\n+\t\t\t\t\tDateTimeFormatter gitDateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n+\n+\t\t\t\t\t// Default format is in Berlin timezone because that is where Flink originated.\n+\t\t\t\t\tDateTimeFormatter BERLIN_DATE_TIME = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.of(\"Europe/Berlin\"));\n+\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tString propGitCommitTime = getProperty(properties, \"git.commit.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitCommitTime = gitDateTimeFormatter.parse(propGitCommitTime, Instant::from);\n+\t\t\t\t\t\tgitCommitTimeStr = BERLIN_DATE_TIME.format(gitCommitTime);\n+\n+\t\t\t\t\t\tString propGitBuildTime  = getProperty(properties, \"git.build.time\", DEFAULT_TIME_STRING);\n+\t\t\t\t\t\tgitBuildTime = gitDateTimeFormatter.parse(propGitBuildTime, Instant::from);\n+\t\t\t\t\t\tgitBuildTimeStr = BERLIN_DATE_TIME.format(gitBuildTime);\n+\t\t\t\t\t} catch (DateTimeParseException dtpe) {\n+\t\t\t\t\t\tLOG.error(\"{} : {}\", FAIL_MESSAGE, dtpe);\n+\t\t\t\t\t\tthrow new IllegalStateException(FAIL_MESSAGE);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch(IOException ioe) {\n+\t\t\t\tLOG.info(\"Cannot determine code revision: Unable to read version property file.: {}\", ioe.getMessage());\n \t\t\t}\n \t\t}\n-\t\t\n-\t\treturn new RevisionInformation(revision, commitDate);\n+\t}\n+\n+\tprivate static final class VersionsHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "089bf5d4d25369d9a4a8e5d46975be4591d01660"}, "originalPosition": 187}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "168bea66ba7a153d2ada13622b63a5cfffaaf88a", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/168bea66ba7a153d2ada13622b63a5cfffaaf88a", "committedDate": "2020-04-28T13:52:32Z", "message": "Update flink-runtime/src/main/java/org/apache/flink/runtime/util/EnvironmentInformation.java\n\nCo-Authored-By: Chesnay Schepler <chesnay@apache.org>"}, "afterCommit": {"oid": "1569b0fb708871f14638cec612d272bb8ea53cd1", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/1569b0fb708871f14638cec612d272bb8ea53cd1", "committedDate": "2020-04-29T12:33:19Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1569b0fb708871f14638cec612d272bb8ea53cd1", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/1569b0fb708871f14638cec612d272bb8ea53cd1", "committedDate": "2020-04-29T12:33:19Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "6bfea91889c6736a61b0b698da0774ad0a3f4f22", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/6bfea91889c6736a61b0b698da0774ad0a3f4f22", "committedDate": "2020-04-30T10:01:51Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "committedDate": "2020-05-06T08:45:11Z", "message": "[FLINK-16871][runtime] Make more build time information available at runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bfea91889c6736a61b0b698da0774ad0a3f4f22", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/6bfea91889c6736a61b0b698da0774ad0a3f4f22", "committedDate": "2020-04-30T10:01:51Z", "message": "[FLINK-16871][Runtime] Make more build time information available at runtime"}, "afterCommit": {"oid": "ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "author": {"user": {"login": "nielsbasjes", "name": "Niels Basjes"}}, "url": "https://github.com/apache/flink/commit/ec92e1b119cad2c8e4ea3870bd20eb7a5fcee709", "committedDate": "2020-05-06T08:45:11Z", "message": "[FLINK-16871][runtime] Make more build time information available at runtime"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}