{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODA4OTIw", "number": 13144, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzozMjoxNlrOEYXgVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowNjozMVrOEeNIbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTg2Mzg5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzozMjoxNlrOHAqgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzozMjoxNlrOHAqgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1ODQzNA==", "bodyText": "I guess we will also need a matching input type strategy such that the validation can work properly.", "url": "https://github.com/apache/flink/pull/13144#discussion_r470458434", "createdAt": "2020-08-14T07:32:16Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -82,6 +84,13 @@ public void open(FunctionContext context) {\n \t\tisArgsSingleArray = HiveFunctionUtil.isSingleBoxedArray(argTypes);\n \t}\n \n+\t@Override\n+\tpublic TypeInference getTypeInference(DataTypeFactory typeFactory) {\n+\t\tTypeInference.Builder builder = TypeInference.newBuilder();\n+\t\tbuilder.outputTypeStrategy(new ResultTypeStrategy(this));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409db9efb76541dd932a9b878ba45fa6a78d7c46"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTg5NzM3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNDozNlrOHFWHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNDozNlrOHFWHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzE3OQ==", "bodyText": "Looks like it is inferOutputType", "url": "https://github.com/apache/flink/pull/13144#discussion_r475367179", "createdAt": "2020-08-24T06:24:36Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +142,62 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate Tuple2<Object[], DataType[]> getConstantArgAndTypes(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\treturn Tuple2.of(constantArgs, inputTypes);\n+\t}\n+\n+\t/**\n+\t * Validate input argument types and decide result type.\n+\t */\n+\tprotected abstract DataType validateInputTypes(DataType[] argTypes) throws UDFArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTkwMTc5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNjoxOVrOHFWJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTo1MTo0NFrOHFdDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzgyNQ==", "bodyText": "I can not get it what this is for.", "url": "https://github.com/apache/flink/pull/13144#discussion_r475367825", "createdAt": "2020-08-24T06:26:19Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +142,62 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate Tuple2<Object[], DataType[]> getConstantArgAndTypes(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\treturn Tuple2.of(constantArgs, inputTypes);\n+\t}\n+\n+\t/**\n+\t * Validate input argument types and decide result type.\n+\t */\n+\tprotected abstract DataType validateInputTypes(DataType[] argTypes) throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tTuple2<Object[], DataType[]> constantArgAndTypes = getConstantArgAndTypes(callContext);\n+\t\t\treturn Optional.ofNullable(getHiveResultType(constantArgAndTypes.f0, constantArgAndTypes.f1));\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQyNTg0NQ==", "bodyText": "I think this is needed for input type validation. For example, according to the API contract, a ValidationException can be thrown if the input is invalid, but this should only happen during input inference rather than output inference.", "url": "https://github.com/apache/flink/pull/13144#discussion_r475425845", "createdAt": "2020-08-24T08:29:46Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +142,62 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate Tuple2<Object[], DataType[]> getConstantArgAndTypes(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\treturn Tuple2.of(constantArgs, inputTypes);\n+\t}\n+\n+\t/**\n+\t * Validate input argument types and decide result type.\n+\t */\n+\tprotected abstract DataType validateInputTypes(DataType[] argTypes) throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tTuple2<Object[], DataType[]> constantArgAndTypes = getConstantArgAndTypes(callContext);\n+\t\t\treturn Optional.ofNullable(getHiveResultType(constantArgAndTypes.f0, constantArgAndTypes.f1));\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzgyNQ=="}, "originalCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4MDk2Nw==", "bodyText": "Got it.", "url": "https://github.com/apache/flink/pull/13144#discussion_r475480967", "createdAt": "2020-08-24T09:51:44Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +142,62 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate Tuple2<Object[], DataType[]> getConstantArgAndTypes(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\treturn Tuple2.of(constantArgs, inputTypes);\n+\t}\n+\n+\t/**\n+\t * Validate input argument types and decide result type.\n+\t */\n+\tprotected abstract DataType validateInputTypes(DataType[] argTypes) throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tTuple2<Object[], DataType[]> constantArgAndTypes = getConstantArgAndTypes(callContext);\n+\t\t\treturn Optional.ofNullable(getHiveResultType(constantArgAndTypes.f0, constantArgAndTypes.f1));\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzgyNQ=="}, "originalCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA2MzAxOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMTo0MlrOHJuolA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDoxOVrOHJv08A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzI4NA==", "bodyText": "Move this to a dedicated class because it will be shared for other functions as well?", "url": "https://github.com/apache/flink/pull/13144#discussion_r479963284", "createdAt": "2020-08-31T08:01:42Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjgzMg==", "bodyText": "We can rename HiveFunction to HiveLegacyFunction, and create a new abstract base class HiveFunction.", "url": "https://github.com/apache/flink/pull/13144#discussion_r479982832", "createdAt": "2020-08-31T08:40:19Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzI4NA=="}, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA2NDg0OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMjowOVrOHJupjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NzoxM1rOHJwC3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzUzMg==", "bodyText": "We should also check for isNullLiteral?", "url": "https://github.com/apache/flink/pull/13144#discussion_r479963532", "createdAt": "2020-08-31T08:02:09Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NjM5OA==", "bodyText": "Looks like getArgumentValue will return empty for null literal. But we should add test for null literal.", "url": "https://github.com/apache/flink/pull/13144#discussion_r479986398", "createdAt": "2020-08-31T08:47:13Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzUzMg=="}, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA2ODM4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMzoyMVrOHJurrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMzoyMVrOHJurrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NDA3OQ==", "bodyText": "the CallContext provides a method for throwing validation errors.", "url": "https://github.com/apache/flink/pull/13144#discussion_r479964079", "createdAt": "2020-08-31T08:03:21Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\tthis.constantArguments = constantArgs;\n+\t\tthis.argTypes = inputTypes;\n+\t}\n+\n+\t/**\n+\t * Infer return type of this function call.\n+\t */\n+\tprotected abstract DataType inferReturnType() throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\treturn Optional.of(inferReturnType());\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tthrow new FlinkHiveUDFException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic ArgumentCount getArgumentCount() {\n+\t\t\treturn ConstantArgumentCount.any();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<List<DataType>> inferInputTypes(CallContext callContext, boolean throwOnFailure) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\tinferReturnType();\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tif (throwOnFailure) {\n+\t\t\t\t\tthrow new ValidationException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA3NzQ3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowNjowNVrOHJuw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0NDoxMVrOHJ5cZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTQxMQ==", "bodyText": "I think it would be helpful to print the expected signature in case the user passes wrong arguments?", "url": "https://github.com/apache/flink/pull/13144#discussion_r479965411", "createdAt": "2020-08-31T08:06:05Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\tthis.constantArguments = constantArgs;\n+\t\tthis.argTypes = inputTypes;\n+\t}\n+\n+\t/**\n+\t * Infer return type of this function call.\n+\t */\n+\tprotected abstract DataType inferReturnType() throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\treturn Optional.of(inferReturnType());\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tthrow new FlinkHiveUDFException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic ArgumentCount getArgumentCount() {\n+\t\t\treturn ConstantArgumentCount.any();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<List<DataType>> inferInputTypes(CallContext callContext, boolean throwOnFailure) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\tinferReturnType();\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tif (throwOnFailure) {\n+\t\t\t\t\tthrow new ValidationException(\n+\t\t\t\t\t\t\tString.format(\"Cannot find a suitable Hive function from %s for the input arguments\",\n+\t\t\t\t\t\t\t\t\thiveFunctionWrapper.getClassName()), e);\n+\t\t\t\t} else {\n+\t\t\t\t\treturn Optional.empty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn Optional.of(callContext.getArgumentDataTypes());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic List<Signature> getExpectedSignatures(FunctionDefinition definition) {\n+\t\t\treturn Collections.singletonList(Signature.of(Signature.Argument.of(\"*\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzODU1Mw==", "bodyText": "I'm not sure whether it's possible to get all the valid signatures for a hive function. Some hive function supports implicit type conversion, e.g. a function that operates on string values may take numeric input as well. I'll double check.", "url": "https://github.com/apache/flink/pull/13144#discussion_r480038553", "createdAt": "2020-08-31T10:34:52Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\tthis.constantArguments = constantArgs;\n+\t\tthis.argTypes = inputTypes;\n+\t}\n+\n+\t/**\n+\t * Infer return type of this function call.\n+\t */\n+\tprotected abstract DataType inferReturnType() throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\treturn Optional.of(inferReturnType());\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tthrow new FlinkHiveUDFException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic ArgumentCount getArgumentCount() {\n+\t\t\treturn ConstantArgumentCount.any();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<List<DataType>> inferInputTypes(CallContext callContext, boolean throwOnFailure) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\tinferReturnType();\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tif (throwOnFailure) {\n+\t\t\t\t\tthrow new ValidationException(\n+\t\t\t\t\t\t\tString.format(\"Cannot find a suitable Hive function from %s for the input arguments\",\n+\t\t\t\t\t\t\t\t\thiveFunctionWrapper.getClassName()), e);\n+\t\t\t\t} else {\n+\t\t\t\t\treturn Optional.empty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn Optional.of(callContext.getArgumentDataTypes());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic List<Signature> getExpectedSignatures(FunctionDefinition definition) {\n+\t\t\treturn Collections.singletonList(Signature.of(Signature.Argument.of(\"*\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTQxMQ=="}, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0MDM4OA==", "bodyText": "Actually, this is why this method is very generic and allows you to pass arbitrary strings like NUMERIC or ANY. I don't know how Hive implements UDFs but as a user I would find it useful to get exceptions like\nInvalid input arguments. Expected signatures are:\\n\nf(STRING NOT NULL)\\nf(INT NOT NULL)\\nf(BIGINT NOT NULL)\n\nBtw you can also use InputTypeStrategiesTestBase for testing. See InputTypeStrategiesTest for an example.", "url": "https://github.com/apache/flink/pull/13144#discussion_r480140388", "createdAt": "2020-08-31T13:44:11Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\tthis.constantArguments = constantArgs;\n+\t\tthis.argTypes = inputTypes;\n+\t}\n+\n+\t/**\n+\t * Infer return type of this function call.\n+\t */\n+\tprotected abstract DataType inferReturnType() throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\treturn Optional.of(inferReturnType());\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tthrow new FlinkHiveUDFException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic ArgumentCount getArgumentCount() {\n+\t\t\treturn ConstantArgumentCount.any();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<List<DataType>> inferInputTypes(CallContext callContext, boolean throwOnFailure) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\tinferReturnType();\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tif (throwOnFailure) {\n+\t\t\t\t\tthrow new ValidationException(\n+\t\t\t\t\t\t\tString.format(\"Cannot find a suitable Hive function from %s for the input arguments\",\n+\t\t\t\t\t\t\t\t\thiveFunctionWrapper.getClassName()), e);\n+\t\t\t\t} else {\n+\t\t\t\t\treturn Optional.empty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn Optional.of(callContext.getArgumentDataTypes());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic List<Signature> getExpectedSignatures(FunctionDefinition definition) {\n+\t\t\treturn Collections.singletonList(Signature.of(Signature.Argument.of(\"*\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTQxMQ=="}, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTA3ODg2OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/functions/hive/HiveSimpleUDFTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowNjozMlrOHJuxrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowNjozMlrOHJuxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTYxMw==", "bodyText": "Use org.apache.flink.table.types.inference.utils.CallContextMock", "url": "https://github.com/apache/flink/pull/13144#discussion_r479965613", "createdAt": "2020-08-31T08:06:32Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/functions/hive/HiveSimpleUDFTest.java", "diffHunk": "@@ -291,4 +297,58 @@ public String evaluate(String content) {\n \t\t\treturn content;\n \t\t}\n \t}\n+\n+\t/**\n+\t * A CallContext implementation for Hive UDF tests.\n+\t */\n+\tpublic static class HiveUDFCallContext implements CallContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 556, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}