{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODQwMzYz", "number": 11649, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1NTozNVrODvmbkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMDozMlrODvml7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjM5MzEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/JsonResponseHistoryServerArchivist.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1NTozNVrOGCHmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1NTozNVrOGCHmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3NDkxMw==", "bodyText": "nit in order to make it symmetric:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthis.ioExecutor = ioExecutor;\n          \n          \n            \n            \t\tthis.ioExecutor = Preconditions.checkNotNull(ioExecutor);", "url": "https://github.com/apache/flink/pull/11649#discussion_r404874913", "createdAt": "2020-04-07T14:55:35Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/JsonResponseHistoryServerArchivist.java", "diffHunk": "@@ -39,18 +39,25 @@\n \n \tprivate final Path archivePath;\n \n-\tJsonResponseHistoryServerArchivist(JsonArchivist jsonArchivist, Path archivePath) {\n+\tprivate final Executor ioExecutor;\n+\n+\tJsonResponseHistoryServerArchivist(JsonArchivist jsonArchivist, Path archivePath, Executor ioExecutor) {\n \t\tthis.jsonArchivist = Preconditions.checkNotNull(jsonArchivist);\n \t\tthis.archivePath = Preconditions.checkNotNull(archivePath);\n+\t\tthis.ioExecutor = ioExecutor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bdf83f8bb8fddb56e0b4cef572dffffe5668dc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjQxOTY0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/JsonResponseHistoryServerArchivist.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMDozMlrOGCH3Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowMDozMlrOGCH3Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3OTEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal CompletableFuture<Acknowledge> ackFuture = new CompletableFuture<>();\n          \n          \n            \n            \t\tioExecutor.execute(() -> {\n          \n          \n            \n            \t\t\ttry {\n          \n          \n            \n            \t\t\t\tFsJobArchivist.archiveJob(archivePath, executionGraph.getJobID(), jsonArchivist.archiveJsonWithPath(executionGraph));\n          \n          \n            \n            \t\t\t\tackFuture.complete(Acknowledge.get());\n          \n          \n            \n            \t\t\t} catch (IOException e) {\n          \n          \n            \n            \t\t\t\tackFuture.completeExceptionally(e);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t});\n          \n          \n            \n            \t\treturn ackFuture;\n          \n          \n            \n            return CompletableFuture\n          \n          \n            \n            \t\t\t.runAsync(\n          \n          \n            \n            \t\t\t\tThrowingRunnable.unchecked(() -> FsJobArchivist.archiveJob(\n          \n          \n            \n            \t\t\t\t\tarchivePath,\n          \n          \n            \n            \t\t\t\t\texecutionGraph.getJobID(),\n          \n          \n            \n            \t\t\t\t\tjsonArchivist.archiveJsonWithPath(executionGraph))),\n          \n          \n            \n            \t\t\t\tioExecutor)\n          \n          \n            \n            \t\t\t.thenApply(ignored -> Acknowledge.get());", "url": "https://github.com/apache/flink/pull/11649#discussion_r404879127", "createdAt": "2020-04-07T15:00:32Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/dispatcher/JsonResponseHistoryServerArchivist.java", "diffHunk": "@@ -39,18 +39,25 @@\n \n \tprivate final Path archivePath;\n \n-\tJsonResponseHistoryServerArchivist(JsonArchivist jsonArchivist, Path archivePath) {\n+\tprivate final Executor ioExecutor;\n+\n+\tJsonResponseHistoryServerArchivist(JsonArchivist jsonArchivist, Path archivePath, Executor ioExecutor) {\n \t\tthis.jsonArchivist = Preconditions.checkNotNull(jsonArchivist);\n \t\tthis.archivePath = Preconditions.checkNotNull(archivePath);\n+\t\tthis.ioExecutor = ioExecutor;\n \t}\n \n \t@Override\n \tpublic CompletableFuture<Acknowledge> archiveExecutionGraph(AccessExecutionGraph executionGraph) {\n-\t\ttry {\n-\t\t\tFsJobArchivist.archiveJob(archivePath, executionGraph.getJobID(), jsonArchivist.archiveJsonWithPath(executionGraph));\n-\t\t\treturn CompletableFuture.completedFuture(Acknowledge.get());\n-\t\t} catch (IOException e) {\n-\t\t\treturn FutureUtils.completedExceptionally(e);\n-\t\t}\n+\t\tfinal CompletableFuture<Acknowledge> ackFuture = new CompletableFuture<>();\n+\t\tioExecutor.execute(() -> {\n+\t\t\ttry {\n+\t\t\t\tFsJobArchivist.archiveJob(archivePath, executionGraph.getJobID(), jsonArchivist.archiveJsonWithPath(executionGraph));\n+\t\t\t\tackFuture.complete(Acknowledge.get());\n+\t\t\t} catch (IOException e) {\n+\t\t\t\tackFuture.completeExceptionally(e);\n+\t\t\t}\n+\t\t});\n+\t\treturn ackFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1bdf83f8bb8fddb56e0b4cef572dffffe5668dc"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 644, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}