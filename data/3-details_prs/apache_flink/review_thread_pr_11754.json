{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjk1OTgz", "number": 11754, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowNToxOFrODyCoSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyNToxMlrODyDDuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzk4NDczOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowNToxOFrOGF2lcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowNToxOFrOGF2lcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MDM4Nw==", "bodyText": "rename to expectTriggerCheckpoint? I first thought should is describing test behavior. Same for shouldAbortCheckpoint", "url": "https://github.com/apache/flink/pull/11754#discussion_r408790387", "createdAt": "2020-04-15T12:05:18Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAzNTI2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxOTo1NVrOGF3DyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowODo0MFrOGGHu7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5ODE1Mw==", "bodyText": "I guess we could easily add some more cases, such as\ncheckpoint(20), cancel(10)\ncancel(10), cancel(20)\ncancel(20), cancel(10)\n\nOr even some carefully chosen combination of 3 events.", "url": "https://github.com/apache/flink/pull/11754#discussion_r408798153", "createdAt": "2020-04-15T12:19:55Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MTM0Mg==", "bodyText": "Added these cases plus some for two channels.\nI think that a sequence of two events should cover all cases.", "url": "https://github.com/apache/flink/pull/11754#discussion_r409071342", "createdAt": "2020-04-15T19:08:40Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5ODE1Mw=="}, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA0MDg0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyMToxN1rOGF3HBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyMToxN1rOGF3HBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5ODk4MA==", "bodyText": "This one is not used anymore (going over #runInTaskThread).", "url": "https://github.com/apache/flink/pull/11754#discussion_r408798980", "createdAt": "2020-04-15T12:21:17Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tTestInvokable invokable = new TestInvokable();\n+\t\tCheckpointBarrierUnaligner unaligner = new CheckpointBarrierUnaligner(new int[]{1}, ChannelStateWriter.NO_OP, \"test\", invokable);\n+\n+\t\tfor (RuntimeEvent e : events) {\n+\t\t\tif (e instanceof CancelCheckpointMarker) {\n+\t\t\t\tunaligner.processCancellationBarrier((CancelCheckpointMarker) e);\n+\t\t\t} else if (e instanceof CheckpointBarrier) {\n+\t\t\t\tunaligner.processBarrier((CheckpointBarrier) e, 0, 0);\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"unexpected event type: \" + e);\n+\t\t\t}\n+\t\t}\n+\n+\t\tassertEquals(shouldAbortCheckpoint, invokable.checkpointAborted);\n+\t\tassertEquals(shouldTriggerCheckpoint, invokable.checkpointTriggered);\n+\t}\n+\n+\tprivate static CheckpointBarrier checkpoint(int checkpointId) {\n+\t\treturn new CheckpointBarrier(checkpointId, 1, CheckpointOptions.forCheckpointWithDefaultLocation());\n+\t}\n+\n+\tprivate static CancelCheckpointMarker cancel(int checkpointId) {\n+\t\treturn new CancelCheckpointMarker(checkpointId);\n+\t}\n+\n+\tprivate static class TestInvokable extends AbstractInvokable {\n+\t\tTestInvokable() {\n+\t\t\tsuper(new DummyEnvironment());\n+\t\t}\n+\n+\t\tprivate boolean checkpointAborted;\n+\t\tprivate boolean checkpointTriggered;\n+\n+\t\t@Override\n+\t\tpublic void invoke() {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Future<Boolean> triggerCheckpointAsync(CheckpointMetaData checkpointMetaData, CheckpointOptions checkpointOptions, boolean advanceToEndOfEventTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA1NDk5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoyNToxM1rOGF3PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1NzowM1rOGGHUmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMTIwNA==", "bodyText": "Should we also test notifyBarrierReceived?", "url": "https://github.com/apache/flink/pull/11754#discussion_r408801204", "createdAt": "2020-04-15T12:25:13Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tTestInvokable invokable = new TestInvokable();\n+\t\tCheckpointBarrierUnaligner unaligner = new CheckpointBarrierUnaligner(new int[]{1}, ChannelStateWriter.NO_OP, \"test\", invokable);\n+\n+\t\tfor (RuntimeEvent e : events) {\n+\t\t\tif (e instanceof CancelCheckpointMarker) {\n+\t\t\t\tunaligner.processCancellationBarrier((CancelCheckpointMarker) e);\n+\t\t\t} else if (e instanceof CheckpointBarrier) {\n+\t\t\t\tunaligner.processBarrier((CheckpointBarrier) e, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDYwMQ==", "bodyText": "I don't think so because it is called from processBarrier (which is called here) and effects of it are essentially checked.", "url": "https://github.com/apache/flink/pull/11754#discussion_r409064601", "createdAt": "2020-04-15T18:57:03Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerCancellationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.runtime.checkpoint.CheckpointMetaData;\n+import org.apache.flink.runtime.checkpoint.CheckpointMetrics;\n+import org.apache.flink.runtime.checkpoint.CheckpointOptions;\n+import org.apache.flink.runtime.checkpoint.channel.ChannelStateWriter;\n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+import org.apache.flink.runtime.io.network.api.CancelCheckpointMarker;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+import org.apache.flink.runtime.jobgraph.tasks.AbstractInvokable;\n+import org.apache.flink.runtime.operators.testutils.DummyEnvironment;\n+import org.apache.flink.util.function.RunnableWithException;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * {@link CheckpointBarrierUnaligner} cancellation test.\n+ */\n+@RunWith(Parameterized.class)\n+public class CheckpointBarrierUnalignerCancellationTest {\n+\tprivate final List<RuntimeEvent> events;\n+\tprivate final boolean shouldTriggerCheckpoint;\n+\tprivate final boolean shouldAbortCheckpoint;\n+\n+\tpublic CheckpointBarrierUnalignerCancellationTest(boolean shouldTriggerCheckpoint, boolean shouldAbortCheckpoint, List<RuntimeEvent> events) {\n+\t\tthis.events = events;\n+\t\tthis.shouldTriggerCheckpoint = shouldTriggerCheckpoint;\n+\t\tthis.shouldAbortCheckpoint = shouldAbortCheckpoint;\n+\t}\n+\n+\t@Parameterized.Parameters(name = \"should trigger: {0}, should abort {1}, events: {2}\")\n+\tpublic static Object[][] parameters() {\n+\t\treturn new Object[][]{\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(20), checkpoint(10))},\n+\t\t\t\tnew Object[]{false, true, Arrays.asList(cancel(10), checkpoint(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(cancel(10), checkpoint(20))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(10))},\n+\t\t\t\tnew Object[]{true, true, Arrays.asList(checkpoint(10), cancel(20))},\n+\t\t};\n+\t}\n+\n+\t@Test\n+\tpublic void test() throws Exception {\n+\t\tTestInvokable invokable = new TestInvokable();\n+\t\tCheckpointBarrierUnaligner unaligner = new CheckpointBarrierUnaligner(new int[]{1}, ChannelStateWriter.NO_OP, \"test\", invokable);\n+\n+\t\tfor (RuntimeEvent e : events) {\n+\t\t\tif (e instanceof CancelCheckpointMarker) {\n+\t\t\t\tunaligner.processCancellationBarrier((CancelCheckpointMarker) e);\n+\t\t\t} else if (e instanceof CheckpointBarrier) {\n+\t\t\t\tunaligner.processBarrier((CheckpointBarrier) e, 0, 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwMTIwNA=="}, "originalCommit": {"oid": "6950a256fee785d5b95ea7bd8f21a8f85d31843b"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1622, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}