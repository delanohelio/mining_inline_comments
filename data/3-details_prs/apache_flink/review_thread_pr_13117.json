{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTc0NjAw", "number": 13117, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxMjo1M1rOEXJRJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMTozNVrOEXcW-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzA0NTQ5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/stream_execution_environment.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxMjo1M1rOG-xUVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjowNzozMFrOG-01og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MjkxOQ==", "bodyText": "Adds note that this API is not fault-tolerant and only used in test scenarios.", "url": "https://github.com/apache/flink/pull/13117#discussion_r468472919", "createdAt": "2020-08-11T10:12:53Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/stream_execution_environment.py", "diffHunk": "@@ -465,6 +465,19 @@ def add_source(self, source_func: SourceFunction, source_name: str = 'Custom Sou\n                                                                        j_type_info)\n         return DataStream(j_data_stream=j_data_stream)\n \n+    def read_text_file(self, file_path: str, charset_name: str = \"UTF-8\") -> DataStream:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b170d79e97fa7bfe79bd7031444296512c185a58"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUzMDU5NA==", "bodyText": "Yes, it would be better to inform user it is not suitable for production.", "url": "https://github.com/apache/flink/pull/13117#discussion_r468530594", "createdAt": "2020-08-11T12:07:30Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/pyflink/datastream/stream_execution_environment.py", "diffHunk": "@@ -465,6 +465,19 @@ def add_source(self, source_func: SourceFunction, source_name: str = 'Custom Sou\n                                                                        j_type_info)\n         return DataStream(j_data_stream=j_data_stream)\n \n+    def read_text_file(self, file_path: str, charset_name: str = \"UTF-8\") -> DataStream:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MjkxOQ=="}, "originalCommit": {"oid": "b170d79e97fa7bfe79bd7031444296512c185a58"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzI5OTk3OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/data_stream.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTozMjoxM1rOG-ztmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMTozMjoxM1rOG-ztmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUxMjE1NA==", "bodyText": "The two methods are not supposed to be added in this PR?", "url": "https://github.com/apache/flink/pull/13117#discussion_r468512154", "createdAt": "2020-08-11T11:32:13Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -483,7 +518,17 @@ def reduce(self, func: Union[Callable, ReduceFunction]) -> 'DataStream':\n             j_python_data_stream_scalar_function_operator\n         ))\n \n-    def _values(self):\n+    def key_by(self, key_selector: Union[Callable, KeySelector],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b170d79e97fa7bfe79bd7031444296512c185a58"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDE3MzM5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMTozNVrOG_PLQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMzo1MVrOG_PNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MjExNA==", "bodyText": "Maybe we can extract an assertEqualWithSort() method and reuse the method across all tests. We can improve this in a separate PR.", "url": "https://github.com/apache/flink/pull/13117#discussion_r468962114", "createdAt": "2020-08-12T02:01:35Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -254,3 +254,20 @@ def test_add_custom_source(self):\n         results.sort()\n         expected.sort()\n         self.assertEqual(expected, results)\n+\n+    def test_read_text_file(self):\n+        texts = [\"Mike\", \"Marry\", \"Ted\", \"Jack\", \"Bob\", \"Henry\"]\n+        text_file_path = self.tempdir + '/text_file'\n+        with open(text_file_path, 'a') as f:\n+            for text in texts:\n+                f.write(text)\n+                f.write('\\n')\n+\n+        ds = self.env.read_text_file(text_file_path)\n+        test_sink = DataStreamTestSinkFunction()\n+        ds.add_sink(test_sink)\n+        self.env.execute(\"test read text file\")\n+        results = test_sink.get_results()\n+        results.sort()\n+        texts.sort()\n+        self.assertEqual(texts, results)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "253c7f3594daaff158043874bbe4401ff9ad0e81"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MjY0Ng==", "bodyText": "Sure, I will do it in the later PR.", "url": "https://github.com/apache/flink/pull/13117#discussion_r468962646", "createdAt": "2020-08-12T02:03:51Z", "author": {"login": "shuiqiangchen"}, "path": "flink-python/pyflink/datastream/tests/test_stream_execution_environment.py", "diffHunk": "@@ -254,3 +254,20 @@ def test_add_custom_source(self):\n         results.sort()\n         expected.sort()\n         self.assertEqual(expected, results)\n+\n+    def test_read_text_file(self):\n+        texts = [\"Mike\", \"Marry\", \"Ted\", \"Jack\", \"Bob\", \"Henry\"]\n+        text_file_path = self.tempdir + '/text_file'\n+        with open(text_file_path, 'a') as f:\n+            for text in texts:\n+                f.write(text)\n+                f.write('\\n')\n+\n+        ds = self.env.read_text_file(text_file_path)\n+        test_sink = DataStreamTestSinkFunction()\n+        ds.add_sink(test_sink)\n+        self.env.execute(\"test read text file\")\n+        results = test_sink.get_results()\n+        results.sort()\n+        texts.sort()\n+        self.assertEqual(texts, results)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MjExNA=="}, "originalCommit": {"oid": "253c7f3594daaff158043874bbe4401ff9ad0e81"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 533, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}