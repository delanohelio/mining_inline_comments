{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjE3MDU5", "number": 13958, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDozNDo0N1rOE2HB9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0NzowMVrOE2rsLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTczNzQ4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDozNDo0N1rOHuwaGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNjozNjoxNFrOHvFYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc4OTY1Nw==", "bodyText": "This seems to also put CoLocationConstraint == null into the map.\nThe test also passes because of it. Is it expected? The test graph (2 disjoint JVs w/o CoLocationConstraints) seems to be a normal graph. Why should the test fail?", "url": "https://github.com/apache/flink/pull/13958#discussion_r518789657", "createdAt": "2020-11-06T14:34:47Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -201,4 +195,32 @@ private static void connectVerticesToConsumedPartitions(\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Co-location constraints are only used for iteration head and tail.\n+\t * A paired head and tail needs to be in the same pipelined region so\n+\t * that they can be restarted together.\n+\t */\n+\tprivate void ensureCoLocatedVerticesInSameRegion() {\n+\t\tfinal Map<CoLocationConstraint, DefaultSchedulingPipelinedRegion> constraintToRegion = new IdentityHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c7892e55dd4baaff4968e4257a63a51023d841"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEyOTQzNg==", "bodyText": "Dealing with null constraint is a bug here and have resulted in lots of test failures. I have fixed it.\nThe test was incomplete but I forget about it because it passed due to the null constraint. I will fix it.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519129436", "createdAt": "2020-11-07T06:27:04Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -201,4 +195,32 @@ private static void connectVerticesToConsumedPartitions(\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Co-location constraints are only used for iteration head and tail.\n+\t * A paired head and tail needs to be in the same pipelined region so\n+\t * that they can be restarted together.\n+\t */\n+\tprivate void ensureCoLocatedVerticesInSameRegion() {\n+\t\tfinal Map<CoLocationConstraint, DefaultSchedulingPipelinedRegion> constraintToRegion = new IdentityHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc4OTY1Nw=="}, "originalCommit": {"oid": "e6c7892e55dd4baaff4968e4257a63a51023d841"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEzMzM4Mw==", "bodyText": "done.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519133383", "createdAt": "2020-11-07T06:36:14Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -201,4 +195,32 @@ private static void connectVerticesToConsumedPartitions(\n \t\t\t}\n \t\t}\n \t}\n+\n+\t/**\n+\t * Co-location constraints are only used for iteration head and tail.\n+\t * A paired head and tail needs to be in the same pipelined region so\n+\t * that they can be restarted together.\n+\t */\n+\tprivate void ensureCoLocatedVerticesInSameRegion() {\n+\t\tfinal Map<CoLocationConstraint, DefaultSchedulingPipelinedRegion> constraintToRegion = new IdentityHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc4OTY1Nw=="}, "originalCommit": {"oid": "e6c7892e55dd4baaff4968e4257a63a51023d841"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTc0NjcwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDozNzowNVrOHuwgGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNzowOTozMlrOHvGI3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5MTE5Mg==", "bodyText": "Maybe a side note not for this PR: I would put initializePipelinedRegions and ensureCoLocatedVerticesInSameRegion into a factory method fromExecutionGraph.", "url": "https://github.com/apache/flink/pull/13958#discussion_r518791192", "createdAt": "2020-11-06T14:37:05Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -91,6 +88,8 @@ public DefaultExecutionTopology(ExecutionGraph graph) {\n \t\tthis.pipelinedRegionsByVertex = new HashMap<>();\n \t\tthis.pipelinedRegions = new ArrayList<>();\n \t\tinitializePipelinedRegions();\n+\n+\t\tensureCoLocatedVerticesInSameRegion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c7892e55dd4baaff4968e4257a63a51023d841"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0Mzc0Nw==", "bodyText": "Yes I agree that publishing this in the constructor is not a good idea.\nWill add a separate commit to fix it.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519143747", "createdAt": "2020-11-07T07:03:38Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -91,6 +88,8 @@ public DefaultExecutionTopology(ExecutionGraph graph) {\n \t\tthis.pipelinedRegionsByVertex = new HashMap<>();\n \t\tthis.pipelinedRegions = new ArrayList<>();\n \t\tinitializePipelinedRegions();\n+\n+\t\tensureCoLocatedVerticesInSameRegion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5MTE5Mg=="}, "originalCommit": {"oid": "e6c7892e55dd4baaff4968e4257a63a51023d841"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0NTY5NA==", "bodyText": "done.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519145694", "createdAt": "2020-11-07T07:09:32Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -91,6 +88,8 @@ public DefaultExecutionTopology(ExecutionGraph graph) {\n \t\tthis.pipelinedRegionsByVertex = new HashMap<>();\n \t\tthis.pipelinedRegions = new ArrayList<>();\n \t\tinitializePipelinedRegions();\n+\n+\t\tensureCoLocatedVerticesInSameRegion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc5MTE5Mg=="}, "originalCommit": {"oid": "e6c7892e55dd4baaff4968e4257a63a51023d841"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Nzc0MzgxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0NzowMVrOHvmgyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzoxNDo1OVrOHwb_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA==", "bodyText": "If we are already factoring out initializePipelinedRegions, could we generate all dependencies of DefaultExecutionTopology in the factory method fromExecutionGraph? This should generally separate concerns and make potential testing simpler.\nI also would put this commit before the actual change of this PR if this is not much effort.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519676104", "createdAt": "2020-11-09T09:47:01Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc5NzMyNw==", "bodyText": "I have reordered the commits to let the hotfix happen first.\nBut I do not feel like to factor out vertices and results creation out from DefaultExecutionTopology because I think it is the core part of DefaultExecutionTopology. One can use TestingSchedulingTopology to generate a controllable topology for testing.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519797327", "createdAt": "2020-11-09T13:08:57Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA=="}, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3OTM1OA==", "bodyText": "I meant testing DefaultExecutionTopology itself and its construction process separately\nbut it seems that tests have already been written for the constructor.\nIn this case, I would keep it as it was with final fields at least (it provides immutability and better guarantees)\nif you think that construction does not need to be separated from the DefaultExecutionTopology as just a data holder or we can discuss it in another ticket.", "url": "https://github.com/apache/flink/pull/13958#discussion_r519879358", "createdAt": "2020-11-09T15:02:12Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA=="}, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzNDkzOQ==", "bodyText": "We cannot make pipelinedRegions final because it is built from a Topology.\nAnd we should also avoid the dangerous behavior which published this in the constructor.", "url": "https://github.com/apache/flink/pull/13958#discussion_r520234939", "createdAt": "2020-11-10T01:51:47Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA=="}, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM4OTQ1OQ==", "bodyText": "As I understand, the topology is computed from vertices of EG.\nI meant this refactoring: azagrebin@9bd51df.", "url": "https://github.com/apache/flink/pull/13958#discussion_r520389459", "createdAt": "2020-11-10T08:52:10Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA=="}, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ5OTY0Nw==", "bodyText": "The topology consists of vertices, results and edges. DefaultExecutionTopology currently built these things in the constructor. I feel that moving all these things into the factory method does not bring any immediate benefit but instead introduces risk. So I prefer to do it only when it is needed.", "url": "https://github.com/apache/flink/pull/13958#discussion_r520499647", "createdAt": "2020-11-10T11:43:05Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA=="}, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU1MjI0NA==", "bodyText": "Ok, I think we can merge the PR as is and then I can open a follow-up PR #14020 right-away with my suggestion (FLINK-20078).\nMy concern is the private setter as a compromise to work on a partially constructed Topology.\nI still believe that having a separate step-by-step dependencies generation with immutable data structures is more clear in future. There should be also no risks if tests pass.", "url": "https://github.com/apache/flink/pull/13958#discussion_r520552244", "createdAt": "2020-11-10T13:14:59Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/adapter/DefaultExecutionTopology.java", "diffHunk": "@@ -51,20 +53,20 @@\n \n \tprivate static final Logger LOG = LoggerFactory.getLogger(DefaultExecutionTopology.class);\n \n-\tprivate final ExecutionGraph executionGraph;\n-\n \tprivate final Map<ExecutionVertexID, DefaultExecutionVertex> executionVerticesById;\n \n \tprivate final List<DefaultExecutionVertex> executionVerticesList;\n \n \tprivate final Map<IntermediateResultPartitionID, DefaultResultPartition> resultPartitionsById;\n \n-\tprivate final Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n+\t@Nullable\n+\tprivate Map<ExecutionVertexID, DefaultSchedulingPipelinedRegion> pipelinedRegionsByVertex;\n \n-\tprivate final List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n+\t@Nullable\n+\tprivate List<DefaultSchedulingPipelinedRegion> pipelinedRegions;\n \n-\tpublic DefaultExecutionTopology(ExecutionGraph graph) {\n-\t\tthis.executionGraph = checkNotNull(graph, \"execution graph can not be null\");\n+\tprivate DefaultExecutionTopology(ExecutionGraph graph) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NjEwNA=="}, "originalCommit": {"oid": "2925bc7e08598f79841cb3add571292bcf87127b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4825, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}