{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTAzNTQw", "number": 13512, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0Mzo0NFrOEo7jGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo1MDozN1rOEo_mpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU0MTM2OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0Mzo0NFrOHaTYhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0Mzo0NFrOHaTYhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0MjU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A data source that produces a sequence of number (longs).\n          \n          \n            \n             * A data source that produces a sequence of numbers (longs).", "url": "https://github.com/apache/flink/pull/13512#discussion_r497342599", "createdAt": "2020-09-30T08:43:44Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.Source;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+import org.apache.flink.api.connector.source.SplitEnumeratorContext;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit;\n+import org.apache.flink.api.java.typeutils.ResultTypeQueryable;\n+import org.apache.flink.core.io.SimpleVersionedSerializer;\n+import org.apache.flink.core.memory.DataInputDeserializer;\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.util.NumberSequenceIterator;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A data source that produces a sequence of number (longs).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU0NTE0OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0NDo0MVrOHaTa3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0NDo0MVrOHaTa3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0MzE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t/**\n          \n          \n            \n            \t * Creates a new NumberSequenceSource that produces parallel sequences covering the range\n          \n          \n            \n            \t * 'from' to 'to' (both boundaries are inclusive).\n          \n          \n            \n            \t */\n          \n          \n            \n            \t/**\n          \n          \n            \n            \t * Creates a new {@code NumberSequenceSource} that produces parallel sequences covering the range\n          \n          \n            \n            \t * {@code from} to {@code to} (both boundaries are inclusive).\n          \n          \n            \n            \t */", "url": "https://github.com/apache/flink/pull/13512#discussion_r497343197", "createdAt": "2020-09-30T08:44:41Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.Source;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+import org.apache.flink.api.connector.source.SplitEnumeratorContext;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit;\n+import org.apache.flink.api.java.typeutils.ResultTypeQueryable;\n+import org.apache.flink.core.io.SimpleVersionedSerializer;\n+import org.apache.flink.core.memory.DataInputDeserializer;\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.util.NumberSequenceIterator;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A data source that produces a sequence of number (longs).\n+ * This source is useful for testing and for cases that just need a stream of N events of any kind.\n+ *\n+ * <p>The source splits the sequence into as many parallel sub-sequences as there are parallel\n+ * source readers. Each sub-sequence will be produced in order.\n+ * Consequently, if the parallelism is limited to one, this will produce one sequence in order.\n+ *\n+ * <p>This source is always bounded. For very long sequences (for example over the entire domain\n+ * of long integer values), user may want to consider executing the application in a streaming manner,\n+ * because, despite the fact that the produced stream is bounded, the end bound is pretty far away.\n+ */\n+public class NumberSequenceSource implements\n+\t\tSource<Long, NumberSequenceSource.NumberSequenceSplit, Collection<NumberSequenceSource.NumberSequenceSplit>>,\n+\t\tResultTypeQueryable<Long> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/** The starting number in the sequence, inclusive. */\n+\tprivate final long from;\n+\n+\t/** The end number in the sequence, inclusive. */\n+\tprivate final long to;\n+\n+\t/**\n+\t * Creates a new NumberSequenceSource that produces parallel sequences covering the range\n+\t * 'from' to 'to' (both boundaries are inclusive).\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU2MjU4OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceEnumerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0OTowNlrOHaTl7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo0OTowNlrOHaTl7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0NjAyOQ==", "bodyText": "I would use {@link SplitEnumerator} because it will create links and allows following them in the IDE.", "url": "https://github.com/apache/flink/pull/13512#discussion_r497346029", "createdAt": "2020-09-30T08:49:06Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceEnumerator.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+import org.apache.flink.api.connector.source.SplitEnumeratorContext;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import java.util.ArrayDeque;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A {@code SplitEnumerator} for iterator sources. Simply takes the pre-split set of splits and assigns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU2NjgxOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MDowM1rOHaToaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MDowM1rOHaToaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0NjY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An {@link SourceReader} that returns the values of an iterator, supplied via an\n          \n          \n            \n             * A {@link SourceReader} that returns the values of an iterator, supplied via an", "url": "https://github.com/apache/flink/pull/13512#discussion_r497346664", "createdAt": "2020-09-30T08:50:03Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.ReaderOutput;\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.core.io.InputStatus;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * An {@link SourceReader} that returns the values of an iterator, supplied via an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU3MzIxOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MTozN1rOHaTsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MTozN1rOHaTsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0NzY2Mg==", "bodyText": "nit: broken formatting", "url": "https://github.com/apache/flink/pull/13512#discussion_r497347662", "createdAt": "2020-09-30T08:51:37Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.ReaderOutput;\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.core.io.InputStatus;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * An {@link SourceReader} that returns the values of an iterator, supplied via an\n+ * {@link IteratorSourceSplit}.\n+ *\n+ * <p>The {@code IteratorSourceSplit} is also responsible for taking the current iterator and turning\n+ * it back into a split for checkpointing.\n+ *\n+ * @param <E> The type of events returned by the reader.\n+ * @param <IterT> The type of the iterator that produces the events. This type exists to make the\n+ *                 conversion between iterator and {@code IteratorSourceSplit} type safe.\n+ * @param <SplitT> The concrete type of the {@code IteratorSourceSplit} that creates and converts the\n+ *                 iterator that produces this reader's elements.\n+ */\n+public class IteratorSourceReader<E, IterT extends Iterator<E>, SplitT extends IteratorSourceSplit<E, IterT>>\n+\t\timplements SourceReader<E, SplitT> {\n+\n+\t/** The context for this reader, to communicate with the enumerator. */\n+\tprivate final SourceReaderContext context;\n+\n+\t/** The availability future. This reader is available as soon as a split is assigned. */\n+\tprivate final CompletableFuture<Void> availability;\n+\n+\t/** The iterator producing data. Non-null after a split has been assigned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU3MzM4OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MTo0MVrOHaTscQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MTo0MVrOHaTscQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0NzY5Nw==", "bodyText": "nit: broken formatting", "url": "https://github.com/apache/flink/pull/13512#discussion_r497347697", "createdAt": "2020-09-30T08:51:41Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.ReaderOutput;\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.core.io.InputStatus;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * An {@link SourceReader} that returns the values of an iterator, supplied via an\n+ * {@link IteratorSourceSplit}.\n+ *\n+ * <p>The {@code IteratorSourceSplit} is also responsible for taking the current iterator and turning\n+ * it back into a split for checkpointing.\n+ *\n+ * @param <E> The type of events returned by the reader.\n+ * @param <IterT> The type of the iterator that produces the events. This type exists to make the\n+ *                 conversion between iterator and {@code IteratorSourceSplit} type safe.\n+ * @param <SplitT> The concrete type of the {@code IteratorSourceSplit} that creates and converts the\n+ *                 iterator that produces this reader's elements.\n+ */\n+public class IteratorSourceReader<E, IterT extends Iterator<E>, SplitT extends IteratorSourceSplit<E, IterT>>\n+\t\timplements SourceReader<E, SplitT> {\n+\n+\t/** The context for this reader, to communicate with the enumerator. */\n+\tprivate final SourceReaderContext context;\n+\n+\t/** The availability future. This reader is available as soon as a split is assigned. */\n+\tprivate final CompletableFuture<Void> availability;\n+\n+\t/** The iterator producing data. Non-null after a split has been assigned.\n+\t* This field is null or non-null always together with the {@link #currentSplit} field. */\n+\t@Nullable\n+\tprivate IterT iterator;\n+\n+\t/** The split whose data we return. Non-null after a split has been assigned.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU4MDQ3OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MzoyNFrOHaTw6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1MzoyNFrOHaTw6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0ODg0MQ==", "bodyText": "nit: the newline style for the if-else branches is inconsistent here", "url": "https://github.com/apache/flink/pull/13512#discussion_r497348841", "createdAt": "2020-09-30T08:53:24Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceReader.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.ReaderOutput;\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.core.io.InputStatus;\n+import org.apache.flink.util.FlinkRuntimeException;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * An {@link SourceReader} that returns the values of an iterator, supplied via an\n+ * {@link IteratorSourceSplit}.\n+ *\n+ * <p>The {@code IteratorSourceSplit} is also responsible for taking the current iterator and turning\n+ * it back into a split for checkpointing.\n+ *\n+ * @param <E> The type of events returned by the reader.\n+ * @param <IterT> The type of the iterator that produces the events. This type exists to make the\n+ *                 conversion between iterator and {@code IteratorSourceSplit} type safe.\n+ * @param <SplitT> The concrete type of the {@code IteratorSourceSplit} that creates and converts the\n+ *                 iterator that produces this reader's elements.\n+ */\n+public class IteratorSourceReader<E, IterT extends Iterator<E>, SplitT extends IteratorSourceSplit<E, IterT>>\n+\t\timplements SourceReader<E, SplitT> {\n+\n+\t/** The context for this reader, to communicate with the enumerator. */\n+\tprivate final SourceReaderContext context;\n+\n+\t/** The availability future. This reader is available as soon as a split is assigned. */\n+\tprivate final CompletableFuture<Void> availability;\n+\n+\t/** The iterator producing data. Non-null after a split has been assigned.\n+\t* This field is null or non-null always together with the {@link #currentSplit} field. */\n+\t@Nullable\n+\tprivate IterT iterator;\n+\n+\t/** The split whose data we return. Non-null after a split has been assigned.\n+\t * This field is null or non-null always together with the {@link #iterator} field. */\n+\t@Nullable\n+\tprivate SplitT currentSplit;\n+\n+\t/** The remaining splits. Null means no splits have yet been assigned. */\n+\t@Nullable\n+\tprivate Queue<SplitT> remainingSplits;\n+\n+\tpublic IteratorSourceReader(SourceReaderContext context) {\n+\t\tthis.context = checkNotNull(context);\n+\t\tthis.availability = new CompletableFuture<>();\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\n+\t@Override\n+\tpublic void start() {\n+\t\t// request a split only if we did not get one during restore\n+\t\tif (iterator == null) {\n+\t\t\tcontext.sendSourceEventToCoordinator(new SplitRequestEvent());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic InputStatus pollNext(ReaderOutput<E> output) {\n+\t\tif (iterator != null && iterator.hasNext()) {\n+\t\t\toutput.collect(iterator.next());\n+\t\t\treturn InputStatus.MORE_AVAILABLE;\n+\t\t}\n+\t\telse if (remainingSplits == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU4NjEzOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceSplit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NDozN1rOHaT0Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NDozN1rOHaT0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM0OTcyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A source split that represents a sequence of elements captured in an iterator.\n          \n          \n            \n             * A {@link SourceSplit} that represents a sequence of elements captured in an iterator.", "url": "https://github.com/apache/flink/pull/13512#discussion_r497349726", "createdAt": "2020-09-30T08:54:37Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/IteratorSourceSplit.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceSplit;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * A source split that represents a sequence of elements captured in an iterator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU4ODk4OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/NoSplitAvailableEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NToxN1rOHaT2Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NToxN1rOHaT2Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1MDE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A simple Source Event indicating that there is no split available for the reader (any more).\n          \n          \n            \n             * A {@link SourceEvent} indicating that there is no split available for the reader (any more).", "url": "https://github.com/apache/flink/pull/13512#discussion_r497350167", "createdAt": "2020-09-30T08:55:17Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/NoSplitAvailableEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A simple Source Event indicating that there is no split available for the reader (any more).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzU5MDQyOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/SplitRequestEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NTozNVrOHaT25A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwODo1NTozNVrOHaT25A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM1MDM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code SourceEvent} representing the request for a split, typically sent from the\n          \n          \n            \n             * A {@link SourceEvent} representing the request for a split, typically sent from the", "url": "https://github.com/apache/flink/pull/13512#discussion_r497350372", "createdAt": "2020-09-30T08:55:35Z", "author": {"login": "aljoscha"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/SplitRequestEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A {@code SourceEvent} representing the request for a split, typically sent from the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDA4NzMyOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToxNDozN1rOHaYqOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToxNDozN1rOHaYqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQyOTA1MQ==", "bodyText": "Can we add a comment to explain the number of 16 here?", "url": "https://github.com/apache/flink/pull/13512#discussion_r497429051", "createdAt": "2020-09-30T11:14:37Z", "author": {"login": "becketqin"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.Source;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+import org.apache.flink.api.connector.source.SplitEnumeratorContext;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit;\n+import org.apache.flink.api.java.typeutils.ResultTypeQueryable;\n+import org.apache.flink.core.io.SimpleVersionedSerializer;\n+import org.apache.flink.core.memory.DataInputDeserializer;\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.util.NumberSequenceIterator;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A data source that produces a sequence of number (longs).\n+ * This source is useful for testing and for cases that just need a stream of N events of any kind.\n+ *\n+ * <p>The source splits the sequence into as many parallel sub-sequences as there are parallel\n+ * source readers. Each sub-sequence will be produced in order.\n+ * Consequently, if the parallelism is limited to one, this will produce one sequence in order.\n+ *\n+ * <p>This source is always bounded. For very long sequences (for example over the entire domain\n+ * of long integer values), user may want to consider executing the application in a streaming manner,\n+ * because, despite the fact that the produced stream is bounded, the end bound is pretty far away.\n+ */\n+public class NumberSequenceSource implements\n+\t\tSource<Long, NumberSequenceSource.NumberSequenceSplit, Collection<NumberSequenceSource.NumberSequenceSplit>>,\n+\t\tResultTypeQueryable<Long> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/** The starting number in the sequence, inclusive. */\n+\tprivate final long from;\n+\n+\t/** The end number in the sequence, inclusive. */\n+\tprivate final long to;\n+\n+\t/**\n+\t * Creates a new NumberSequenceSource that produces parallel sequences covering the range\n+\t * 'from' to 'to' (both boundaries are inclusive).\n+\t */\n+\tpublic NumberSequenceSource(long from, long to) {\n+\t\tcheckArgument(from <= to, \"'from' must be <= 'to'\");\n+\t\tthis.from = from;\n+\t\tthis.to = to;\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<Long> getProducedType() {\n+\t\treturn Types.LONG;\n+\t}\n+\n+\t@Override\n+\tpublic Boundedness getBoundedness() {\n+\t\treturn Boundedness.BOUNDED;\n+\t}\n+\n+\t@Override\n+\tpublic SourceReader<Long, NumberSequenceSplit> createReader(SourceReaderContext readerContext) {\n+\t\treturn new IteratorSourceReader<>(readerContext);\n+\t}\n+\n+\t@Override\n+\tpublic SplitEnumerator<NumberSequenceSplit, Collection<NumberSequenceSplit>> createEnumerator(\n+\t\t\tfinal SplitEnumeratorContext<NumberSequenceSplit> enumContext) {\n+\n+\t\tfinal NumberSequenceIterator[] subSequences =\n+\t\t\t\tnew NumberSequenceIterator(from, to).split(enumContext.currentParallelism());\n+\t\tfinal ArrayList<NumberSequenceSplit> splits = new ArrayList<>(subSequences.length);\n+\n+\t\tint splitId = 1;\n+\t\tfor (NumberSequenceIterator seq : subSequences) {\n+\t\t\tsplits.add(new NumberSequenceSplit(String.valueOf(splitId++), seq.getCurrent(), seq.getTo()));\n+\t\t}\n+\n+\t\treturn new IteratorSourceEnumerator<>(enumContext, splits);\n+\t}\n+\n+\t@Override\n+\tpublic SplitEnumerator<NumberSequenceSplit, Collection<NumberSequenceSplit>> restoreEnumerator(\n+\t\t\tfinal SplitEnumeratorContext<NumberSequenceSplit> enumContext, Collection<NumberSequenceSplit> checkpoint) {\n+\t\treturn new IteratorSourceEnumerator<>(enumContext, checkpoint);\n+\t}\n+\n+\t@Override\n+\tpublic SimpleVersionedSerializer<NumberSequenceSplit> getSplitSerializer() {\n+\t\treturn new SplitSerializer();\n+\t}\n+\n+\t@Override\n+\tpublic SimpleVersionedSerializer<Collection<NumberSequenceSplit>> getEnumeratorCheckpointSerializer() {\n+\t\treturn new CheckpointSerializer();\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t//  splits & checkpoint\n+\t// ------------------------------------------------------------------------\n+\n+\t/**\n+\t * A split of the source, representing a number sub-sequence.\n+\t */\n+\tpublic static class NumberSequenceSplit implements IteratorSourceSplit<Long, NumberSequenceIterator> {\n+\n+\t\tprivate final String splitId;\n+\t\tprivate final long from;\n+\t\tprivate final long to;\n+\n+\t\tpublic NumberSequenceSplit(String splitId, long from, long to) {\n+\t\t\tcheckArgument(from <= to, \"'from' must be <= 'to'\");\n+\t\t\tthis.splitId = checkNotNull(splitId);\n+\t\t\tthis.from = from;\n+\t\t\tthis.to = to;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String splitId() {\n+\t\t\treturn splitId;\n+\t\t}\n+\n+\t\tpublic long from() {\n+\t\t\treturn from;\n+\t\t}\n+\n+\t\tpublic long to() {\n+\t\t\treturn to;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic NumberSequenceIterator getIterator() {\n+\t\t\treturn new NumberSequenceIterator(from, to);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IteratorSourceSplit<Long, NumberSequenceIterator> getUpdatedSplitForIterator(\n+\t\t\t\tfinal NumberSequenceIterator iterator) {\n+\t\t\treturn new NumberSequenceSplit(splitId, iterator.getCurrent(), iterator.getTo());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn String.format(\"NumberSequenceSplit [%d, %d] (%s)\", from, to, splitId);\n+\t\t}\n+\t}\n+\n+\tprivate static final class SplitSerializer implements SimpleVersionedSerializer<NumberSequenceSplit> {\n+\n+\t\tprivate static final int CURRENT_VERSION = 1;\n+\n+\t\t@Override\n+\t\tpublic int getVersion() {\n+\t\t\treturn CURRENT_VERSION;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic byte[] serialize(NumberSequenceSplit split) throws IOException {\n+\t\t\tcheckArgument(split.getClass() == NumberSequenceSplit.class, \"cannot serialize subclasses\");\n+\n+\t\t\tfinal DataOutputSerializer out = new DataOutputSerializer(split.splitId().length() + 16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDA4ODg3OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToxNTowOFrOHaYrMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMToxNTowOFrOHaYrMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQyOTI5OQ==", "bodyText": "The number of 20 is a little confusing. Can we add a comment here?", "url": "https://github.com/apache/flink/pull/13512#discussion_r497429299", "createdAt": "2020-09-30T11:15:08Z", "author": {"login": "becketqin"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/NumberSequenceSource.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.Source;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SourceReaderContext;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+import org.apache.flink.api.connector.source.SplitEnumeratorContext;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceEnumerator;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceReader;\n+import org.apache.flink.api.connector.source.lib.util.IteratorSourceSplit;\n+import org.apache.flink.api.java.typeutils.ResultTypeQueryable;\n+import org.apache.flink.core.io.SimpleVersionedSerializer;\n+import org.apache.flink.core.memory.DataInputDeserializer;\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputSerializer;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.util.NumberSequenceIterator;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * A data source that produces a sequence of number (longs).\n+ * This source is useful for testing and for cases that just need a stream of N events of any kind.\n+ *\n+ * <p>The source splits the sequence into as many parallel sub-sequences as there are parallel\n+ * source readers. Each sub-sequence will be produced in order.\n+ * Consequently, if the parallelism is limited to one, this will produce one sequence in order.\n+ *\n+ * <p>This source is always bounded. For very long sequences (for example over the entire domain\n+ * of long integer values), user may want to consider executing the application in a streaming manner,\n+ * because, despite the fact that the produced stream is bounded, the end bound is pretty far away.\n+ */\n+public class NumberSequenceSource implements\n+\t\tSource<Long, NumberSequenceSource.NumberSequenceSplit, Collection<NumberSequenceSource.NumberSequenceSplit>>,\n+\t\tResultTypeQueryable<Long> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/** The starting number in the sequence, inclusive. */\n+\tprivate final long from;\n+\n+\t/** The end number in the sequence, inclusive. */\n+\tprivate final long to;\n+\n+\t/**\n+\t * Creates a new NumberSequenceSource that produces parallel sequences covering the range\n+\t * 'from' to 'to' (both boundaries are inclusive).\n+\t */\n+\tpublic NumberSequenceSource(long from, long to) {\n+\t\tcheckArgument(from <= to, \"'from' must be <= 'to'\");\n+\t\tthis.from = from;\n+\t\tthis.to = to;\n+\t}\n+\n+\t@Override\n+\tpublic TypeInformation<Long> getProducedType() {\n+\t\treturn Types.LONG;\n+\t}\n+\n+\t@Override\n+\tpublic Boundedness getBoundedness() {\n+\t\treturn Boundedness.BOUNDED;\n+\t}\n+\n+\t@Override\n+\tpublic SourceReader<Long, NumberSequenceSplit> createReader(SourceReaderContext readerContext) {\n+\t\treturn new IteratorSourceReader<>(readerContext);\n+\t}\n+\n+\t@Override\n+\tpublic SplitEnumerator<NumberSequenceSplit, Collection<NumberSequenceSplit>> createEnumerator(\n+\t\t\tfinal SplitEnumeratorContext<NumberSequenceSplit> enumContext) {\n+\n+\t\tfinal NumberSequenceIterator[] subSequences =\n+\t\t\t\tnew NumberSequenceIterator(from, to).split(enumContext.currentParallelism());\n+\t\tfinal ArrayList<NumberSequenceSplit> splits = new ArrayList<>(subSequences.length);\n+\n+\t\tint splitId = 1;\n+\t\tfor (NumberSequenceIterator seq : subSequences) {\n+\t\t\tsplits.add(new NumberSequenceSplit(String.valueOf(splitId++), seq.getCurrent(), seq.getTo()));\n+\t\t}\n+\n+\t\treturn new IteratorSourceEnumerator<>(enumContext, splits);\n+\t}\n+\n+\t@Override\n+\tpublic SplitEnumerator<NumberSequenceSplit, Collection<NumberSequenceSplit>> restoreEnumerator(\n+\t\t\tfinal SplitEnumeratorContext<NumberSequenceSplit> enumContext, Collection<NumberSequenceSplit> checkpoint) {\n+\t\treturn new IteratorSourceEnumerator<>(enumContext, checkpoint);\n+\t}\n+\n+\t@Override\n+\tpublic SimpleVersionedSerializer<NumberSequenceSplit> getSplitSerializer() {\n+\t\treturn new SplitSerializer();\n+\t}\n+\n+\t@Override\n+\tpublic SimpleVersionedSerializer<Collection<NumberSequenceSplit>> getEnumeratorCheckpointSerializer() {\n+\t\treturn new CheckpointSerializer();\n+\t}\n+\n+\t// ------------------------------------------------------------------------\n+\t//  splits & checkpoint\n+\t// ------------------------------------------------------------------------\n+\n+\t/**\n+\t * A split of the source, representing a number sub-sequence.\n+\t */\n+\tpublic static class NumberSequenceSplit implements IteratorSourceSplit<Long, NumberSequenceIterator> {\n+\n+\t\tprivate final String splitId;\n+\t\tprivate final long from;\n+\t\tprivate final long to;\n+\n+\t\tpublic NumberSequenceSplit(String splitId, long from, long to) {\n+\t\t\tcheckArgument(from <= to, \"'from' must be <= 'to'\");\n+\t\t\tthis.splitId = checkNotNull(splitId);\n+\t\t\tthis.from = from;\n+\t\t\tthis.to = to;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String splitId() {\n+\t\t\treturn splitId;\n+\t\t}\n+\n+\t\tpublic long from() {\n+\t\t\treturn from;\n+\t\t}\n+\n+\t\tpublic long to() {\n+\t\t\treturn to;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic NumberSequenceIterator getIterator() {\n+\t\t\treturn new NumberSequenceIterator(from, to);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic IteratorSourceSplit<Long, NumberSequenceIterator> getUpdatedSplitForIterator(\n+\t\t\t\tfinal NumberSequenceIterator iterator) {\n+\t\t\treturn new NumberSequenceSplit(splitId, iterator.getCurrent(), iterator.getTo());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn String.format(\"NumberSequenceSplit [%d, %d] (%s)\", from, to, splitId);\n+\t\t}\n+\t}\n+\n+\tprivate static final class SplitSerializer implements SimpleVersionedSerializer<NumberSequenceSplit> {\n+\n+\t\tprivate static final int CURRENT_VERSION = 1;\n+\n+\t\t@Override\n+\t\tpublic int getVersion() {\n+\t\t\treturn CURRENT_VERSION;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic byte[] serialize(NumberSequenceSplit split) throws IOException {\n+\t\t\tcheckArgument(split.getClass() == NumberSequenceSplit.class, \"cannot serialize subclasses\");\n+\n+\t\t\tfinal DataOutputSerializer out = new DataOutputSerializer(split.splitId().length() + 16);\n+\t\t\tserializeV1(out, split);\n+\t\t\treturn out.getCopyOfBuffer();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic NumberSequenceSplit deserialize(int version, byte[] serialized) throws IOException {\n+\t\t\tif (version != CURRENT_VERSION) {\n+\t\t\t\tthrow new IOException(\"Unrecognized version: \" + version);\n+\t\t\t}\n+\t\t\tfinal DataInputDeserializer in = new DataInputDeserializer(serialized);\n+\t\t\treturn deserializeV1(in);\n+\t\t}\n+\n+\t\tstatic void serializeV1(DataOutputView out, NumberSequenceSplit split) throws IOException {\n+\t\t\tout.writeUTF(split.splitId());\n+\t\t\tout.writeLong(split.from());\n+\t\t\tout.writeLong(split.to());\n+\t\t}\n+\n+\t\tstatic NumberSequenceSplit deserializeV1(DataInputView in) throws IOException {\n+\t\t\treturn new NumberSequenceSplit(in.readUTF(), in.readLong(), in.readLong());\n+\t\t}\n+\t}\n+\n+\tprivate static final class CheckpointSerializer implements SimpleVersionedSerializer<Collection<NumberSequenceSplit>> {\n+\n+\t\tprivate static final int CURRENT_VERSION = 1;\n+\n+\t\t@Override\n+\t\tpublic int getVersion() {\n+\t\t\treturn CURRENT_VERSION;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic byte[] serialize(Collection<NumberSequenceSplit> checkpoint) throws IOException {\n+\t\t\tfinal DataOutputSerializer out = new DataOutputSerializer(checkpoint.size() * 20);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDE2NjQzOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/NoSplitAvailableEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTozOTowNFrOHaZaew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxMzo0MlrOHboX_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTQwMw==", "bodyText": "Just want to confirm, we don't need this class any more after FLINK-19265, right?", "url": "https://github.com/apache/flink/pull/13512#discussion_r497441403", "createdAt": "2020-09-30T11:39:04Z", "author": {"login": "becketqin"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/NoSplitAvailableEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A simple Source Event indicating that there is no split available for the reader (any more).\n+ * This event is typically sent from the {@link SplitEnumerator} to the {@link SourceReader}.\n+ */\n+public final class NoSplitAvailableEvent implements SourceEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNTEwMg==", "bodyText": "That is right, we could remove them then.", "url": "https://github.com/apache/flink/pull/13512#discussion_r498735102", "createdAt": "2020-10-02T10:13:42Z", "author": {"login": "StephanEwen"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/NoSplitAvailableEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A simple Source Event indicating that there is no split available for the reader (any more).\n+ * This event is typically sent from the {@link SplitEnumerator} to the {@link SourceReader}.\n+ */\n+public final class NoSplitAvailableEvent implements SourceEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0MTQwMw=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDE4NTUzOnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/SplitRequestEvent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo0NDozNlrOHaZmCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoyMTo1M1rOHbomhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NDM2MA==", "bodyText": "There is also a RequestSplitEvent in SourceReaderBase. I am a little unsure if that should be reused. On one hand, it is just an event, the cost of duplicating is little. On the other hand, they are for the exact same purpose, so ideally we want just one class. That means the implementation should depend on flink-connector-base, which is doable if we move this source implementation to flink-connector-testing as mentioned in the top level comment.\nWhat do you think?", "url": "https://github.com/apache/flink/pull/13512#discussion_r497444360", "createdAt": "2020-09-30T11:44:36Z", "author": {"login": "becketqin"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/SplitRequestEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A {@code SourceEvent} representing the request for a split, typically sent from the\n+ * {@link SourceReader} to the {@link SplitEnumerator}.\n+ */\n+public final class SplitRequestEvent implements SourceEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0OTcyMw==", "bodyText": "I would not move this to a testing project, because this source is used in non-testing as well.\nThe predecessor of this is even directly integrated in the DataStream API at the moment: env.generateSequence()", "url": "https://github.com/apache/flink/pull/13512#discussion_r497449723", "createdAt": "2020-09-30T11:54:38Z", "author": {"login": "StephanEwen"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/SplitRequestEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A {@code SourceEvent} representing the request for a split, typically sent from the\n+ * {@link SourceReader} to the {@link SplitEnumerator}.\n+ */\n+public final class SplitRequestEvent implements SourceEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NDM2MA=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczODgyMA==", "bodyText": "I will do a follow-up where we consolidate these events.\nI think they can be in flink-core, because they are just as much needed for sources using the Source API directly, rather than the SplitReader API.", "url": "https://github.com/apache/flink/pull/13512#discussion_r498738820", "createdAt": "2020-10-02T10:21:53Z", "author": {"login": "StephanEwen"}, "path": "flink-core/src/main/java/org/apache/flink/api/connector/source/lib/util/SplitRequestEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib.util;\n+\n+import org.apache.flink.api.connector.source.SourceEvent;\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.SplitEnumerator;\n+\n+/**\n+ * A {@code SourceEvent} representing the request for a split, typically sent from the\n+ * {@link SourceReader} to the {@link SplitEnumerator}.\n+ */\n+public final class SplitRequestEvent implements SourceEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NDM2MA=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDIwNTgwOnYy", "diffSide": "RIGHT", "path": "flink-core/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMTo1MDozN1rOHaZyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoyMjozNFrOHbonpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NzU2MA==", "bodyText": "Should we also have an IT case for the source as well? This would help reveal issues earlier if this source is intended to be used by other test cases.", "url": "https://github.com/apache/flink/pull/13512#discussion_r497447560", "createdAt": "2020-09-30T11:50:37Z", "author": {"login": "becketqin"}, "path": "flink-core/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderContext;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderOutput;\n+import org.apache.flink.core.io.InputStatus;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceTest {\n+\n+\t@Test\n+\tpublic void testReaderCheckpoints() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MTQ0NA==", "bodyText": "I was contemplating this and decided against that, as mentioned in the PR description.\nThe Integration Test would mostly test the runtime source operator and coordinator, not specific to this source here.\nHaving at least one case of the source being used end to end makes total sense, and this is the case in other tests (see for example #13513)", "url": "https://github.com/apache/flink/pull/13512#discussion_r497451444", "createdAt": "2020-09-30T11:58:03Z", "author": {"login": "StephanEwen"}, "path": "flink-core/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderContext;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderOutput;\n+import org.apache.flink.core.io.InputStatus;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceTest {\n+\n+\t@Test\n+\tpublic void testReaderCheckpoints() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NzU2MA=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1MTk1OA==", "bodyText": "Adding an ITCase is certainly possible, it would not be much work, it would just be added testing time for something that I believed is already covered in other cases.", "url": "https://github.com/apache/flink/pull/13512#discussion_r497451958", "createdAt": "2020-09-30T11:59:00Z", "author": {"login": "StephanEwen"}, "path": "flink-core/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderContext;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderOutput;\n+import org.apache.flink.core.io.InputStatus;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceTest {\n+\n+\t@Test\n+\tpublic void testReaderCheckpoints() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NzU2MA=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg2ODE4NA==", "bodyText": "It seems that we should not reduce test time by skipping reasonable tests? The concern I has was that if there is another test using the NumberSequenceSource failed due to a bug in this source. The author of that test may have to look into the code of this source, which seems something we would like to avoid by having tests here.", "url": "https://github.com/apache/flink/pull/13512#discussion_r497868184", "createdAt": "2020-10-01T00:13:42Z", "author": {"login": "becketqin"}, "path": "flink-core/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderContext;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderOutput;\n+import org.apache.flink.core.io.InputStatus;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceTest {\n+\n+\t@Test\n+\tpublic void testReaderCheckpoints() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NzU2MA=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczOTExMA==", "bodyText": "Fair enough. I'll add an ITCase for the NumberSequenceSource to cover the iterator sources.\nFurther iterator sources should then by fine with unit tests only.", "url": "https://github.com/apache/flink/pull/13512#discussion_r498739110", "createdAt": "2020-10-02T10:22:34Z", "author": {"login": "StephanEwen"}, "path": "flink-core/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.connector.source.SourceReader;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderContext;\n+import org.apache.flink.api.connector.source.mocks.TestingReaderOutput;\n+import org.apache.flink.core.io.InputStatus;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Tests for the {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceTest {\n+\n+\t@Test\n+\tpublic void testReaderCheckpoints() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ0NzU2MA=="}, "originalCommit": {"oid": "45a5a5dd40652d6d9212a0cdba6cd47a293ac819"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 202, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}