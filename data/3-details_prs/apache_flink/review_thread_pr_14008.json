{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MjU2NzEy", "number": 14008, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNjowM1rOE3QCmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNjowM1rOE3QCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzY5OTQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingSubpartitionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNjowM1rOHwfBuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNDoyNjowM1rOHwfBuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYwMjA0Mw==", "bodyText": "The code is not testing if the buffer is really recycled.\nassertTrue(consumer.isRecycled())", "url": "https://github.com/apache/flink/pull/14008#discussion_r520602043", "createdAt": "2020-11-10T14:26:03Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingSubpartitionTest.java", "diffHunk": "@@ -117,6 +121,34 @@ public void testCloseBoundedData() throws Exception {\n \t\tassertTrue(reader.closed);\n \t}\n \n+\t@Test\n+\tpublic void testRecycleCurrentBufferOnFailure() throws Exception {\n+\t\tfinal ResultPartition resultPartition = createPartition(ResultPartitionType.BLOCKING, fileChannelManager);\n+\t\tfinal BoundedBlockingSubpartition subpartition = new BoundedBlockingSubpartition(\n+\t\t\t\t0,\n+\t\t\t\tresultPartition,\n+\t\t\t\tnew FailingBoundedData(),\n+\t\t\t\t!sslEnabled && type == BoundedBlockingSubpartitionType.FILE);\n+\t\tfinal BufferConsumer consumer = BufferBuilderTestUtils.createFilledFinishedBufferConsumer(100);\n+\n+\t\ttry {\n+\t\t\ttry {\n+\t\t\t\tsubpartition.add(consumer);\n+\t\t\t\tsubpartition.createReadView(new NoOpBufferAvailablityListener());\n+\t\t\t\tfail(\"should fail with an exception\");\n+\t\t\t} catch (Exception ignored) {\n+\t\t\t\t// expected\n+\t\t\t}\n+\n+\t\t\tassertNotNull(subpartition.getCurrentBuffer());\n+\t\t\tassertFalse(subpartition.getCurrentBuffer().isRecycled());\n+\t\t} finally {\n+\t\t\tsubpartition.release();\n+\n+\t\t\tassertNull(subpartition.getCurrentBuffer());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409377bf03bf344f259a1386a225ea33b510626c"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4859, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}