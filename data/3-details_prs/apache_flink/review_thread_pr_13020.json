{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzY1ODU5", "number": 13020, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MToxNVrOETUUKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1Mzo1MlrOEXnQRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkxMjQzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MToxNVrOG4-8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwMjoyOToyM1rOG5Qz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tsynchronized (this) {\n          \n          \n            \n            \t\tsynchronized (lock) {", "url": "https://github.com/apache/flink/pull/13020#discussion_r462404713", "createdAt": "2020-07-29T15:51:15Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzQ2NQ==", "bodyText": "I will fix it.", "url": "https://github.com/apache/flink/pull/13020#discussion_r462697465", "createdAt": "2020-07-30T02:29:23Z", "author": {"login": "Tartarus0zm"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNDcxMw=="}, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkyMTY1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1MzoyMlrOG4_CVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNDoxNjoxMFrOG6KL9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA==", "bodyText": "We should not try to submit a response; since we are either already shutdown or in the process of shutting down the response may or may not go through. Better to be consistent and not respond in either case.\nOne thing we can do though is close the channel via ctx.channel().close().", "url": "https://github.com/apache/flink/pull/13020#discussion_r462406228", "createdAt": "2020-07-29T15:53:22Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5ODMzOQ==", "bodyText": "I will test ctx.channel().close() .\nwhat's your mean about\nWhat about catching the NullPointerException within handleException? ?", "url": "https://github.com/apache/flink/pull/13020#discussion_r462698339", "createdAt": "2020-07-30T02:32:43Z", "author": {"login": "Tartarus0zm"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjgyNg==", "bodyText": "As of right now, should the NPE occur then all the user/dev sees is pretty much the same stack trace you got. That's not ideal.\nSo instead, let's handle the case explicitly:\nprivate CompletableFuture<Void> handleException(Throwable throwable, ChannelHandlerContext ctx, HttpRequest httpRequest) {\n\t\tFlinkHttpObjectAggregator flinkHttpObjectAggregator = ctx.pipeline().get(FlinkHttpObjectAggregator.class);\n\t\tif (flinkHttpObjectAggregator == null) {\n\t\t\tlog.warn(\"The connection was closed unexpectedly.\");\n\t\t\treturn CompletableFuture.completedFuture(null);\n\t\t}\n\t\t...", "url": "https://github.com/apache/flink/pull/13020#discussion_r462882826", "createdAt": "2020-07-30T09:50:21Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg5NDc3MQ==", "bodyText": "Do we still need to modify the processing logic of requestProcessingFuture? If we avoid NPE, the changes to requestProcessingFuture may not be necessary.", "url": "https://github.com/apache/flink/pull/13020#discussion_r462894771", "createdAt": "2020-07-30T10:12:31Z", "author": {"login": "Tartarus0zm"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5MzA0NA==", "bodyText": "they are still useful for preventing   something similar from happening again.", "url": "https://github.com/apache/flink/pull/13020#discussion_r463493044", "createdAt": "2020-07-31T09:02:16Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzNzQ5Mg==", "bodyText": "yes", "url": "https://github.com/apache/flink/pull/13020#discussion_r463637492", "createdAt": "2020-07-31T14:16:10Z", "author": {"login": "Tartarus0zm"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjIyOA=="}, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjkyMzgyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1Mzo1M1rOG4_Duw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTo1Mzo1M1rOG4_Duw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNjU4Nw==", "bodyText": "this also needs to happen under the lock, otherwise the race condition isn't fixed. (just move the entire synchronized block here)", "url": "https://github.com/apache/flink/pull/13020#discussion_r462406587", "createdAt": "2020-07-29T15:53:53Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -114,6 +115,21 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \t\t\tlog.trace(\"Received request \" + httpRequest.uri() + '.');\n \t\t}\n \n+\t\tsynchronized (this) {\n+\t\t\tif (terminationFuture != null) {\n+\t\t\t\tString errorMsg = \"The handler instance for \" + untypedResponseMessageHeaders.getTargetRestEndpointURL()\n+\t\t\t\t\t+ \" had already been closed\";\n+\t\t\t\tlog.warn(errorMsg);\n+\t\t\t\tHandlerUtils.sendErrorResponse(\n+\t\t\t\t\tctx,\n+\t\t\t\t\thttpRequest,\n+\t\t\t\t\tnew ErrorResponseBody(errorMsg),\n+\t\t\t\t\tHttpResponseStatus.BAD_REQUEST,\n+\t\t\t\t\tresponseHeaders);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n \t\t\tinFlightRequestTracker.registerRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e746fc298c474c9be8a80ecdc21ebb60a3c6b815"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTk1ODQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1Mzo1MlrOG_f7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjo1Mzo1MlrOG_f7Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIzNjQ4Nw==", "bodyText": "I think I have given you ill-advice here @Tartarus0zm and @zentol. Since we want to support asynchronous operations such as cancel-with-savepoint which only shuts down the cluster (per-job-mode) if the result has been served, it is a valid state that terminationFuture is non null and we still want to process the request.\nWhat I would suggest is to change this line into if (terminationFuture != null && terminationFuture.isDone()) {. Moreover, all inFlightRequestTracker modifying calls should happen under this lock.", "url": "https://github.com/apache/flink/pull/13020#discussion_r469236487", "createdAt": "2020-08-12T12:53:52Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/AbstractHandler.java", "diffHunk": "@@ -116,7 +117,15 @@ protected void respondAsLeader(ChannelHandlerContext ctx, RoutedRequest routedRe\n \n \t\tFileUploads uploadedFiles = null;\n \t\ttry {\n-\t\t\tinFlightRequestTracker.registerRequest();\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (terminationFuture != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d374f52f0c0c40585dc9bad5962aa52cb602b21"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4881, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}