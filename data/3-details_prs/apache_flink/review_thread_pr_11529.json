{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MTM2OTM3", "number": 11529, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMDozNlrODrs1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo1MTowNFrODrtdNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTQ5OTAwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMDozNlrOF8Mn-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToxNjo1NVrOF81xeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NTcyMA==", "bodyText": "Could we avoid 1 & allSelectedMask here? It feels like it should only be relevant for ALL. We could then eagerly apply allSelectedMask instead of setting ALL (new InputSelection(-1 & allSelectedMask)).", "url": "https://github.com/apache/flink/pull/11529#discussion_r398665720", "createdAt": "2020-03-26T15:30:36Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {\n-\t\treturn availableInputsMask != allSelectedMask && inputSelection.areAllInputsSelected();\n+\t\treturn (inputSelection.getInputMask() & allSelectedMask & ~availableInputsMask) != 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3Nzk2MA==", "bodyText": "What's the problem? I think performance wise it doesn't matter, the & allSelectedMask would still need to be there somewhere on the critical path.\nFrom logic perspective, I actually prefer keeping ALL as valid value for the this.inputSelection and doing the & allSelectedMask here, as those extra bits are not an issue in general, but only for this particular line of code (!= 0 comparison).", "url": "https://github.com/apache/flink/pull/11529#discussion_r399277960", "createdAt": "2020-03-27T13:50:26Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {\n-\t\treturn availableInputsMask != allSelectedMask && inputSelection.areAllInputsSelected();\n+\t\treturn (inputSelection.getInputMask() & allSelectedMask & ~availableInputsMask) != 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NTcyMA=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNjkyNg==", "bodyText": "What's the problem? I think performance wise it doesn't matter, the & allSelectedMask would still need to be there somewhere on the critical path.\n\nThe point is that it would be moved out of the critical path. You only need to do it once in the ctor.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399316926", "createdAt": "2020-03-27T14:45:27Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {\n-\t\treturn availableInputsMask != allSelectedMask && inputSelection.areAllInputsSelected();\n+\t\treturn (inputSelection.getInputMask() & allSelectedMask & ~availableInputsMask) != 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NTcyMA=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMjE5NA==", "bodyText": "Unfortunately no. We would still need to do this action once per record around here:\norg.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler#nextSelection\n\tvoid nextSelection() {\n\t\tif (inputSelector == null) {\n\t\t\tinputSelection = InputSelection.ALL;\n\t\t} else {\n\t\t\tinputSelection = inputSelector.nextSelection();\n\t\t}\n\t}\n\n? And I would doubt that saving one bit operation would be visible anywhere, while as I wrote logically I think it's clearer to have this operation here.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399332194", "createdAt": "2020-03-27T15:06:00Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {\n-\t\treturn availableInputsMask != allSelectedMask && inputSelection.areAllInputsSelected();\n+\t\treturn (inputSelection.getInputMask() & allSelectedMask & ~availableInputsMask) != 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NTcyMA=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzOTg5Nw==", "bodyText": "Okay then keep as is.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399339897", "createdAt": "2020-03-27T15:16:55Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {\n-\t\treturn availableInputsMask != allSelectedMask && inputSelection.areAllInputsSelected();\n+\t\treturn (inputSelection.getInputMask() & allSelectedMask & ~availableInputsMask) != 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NTcyMA=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTUwMjMyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMToyMVrOF8MqNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNToyMDoyNFrOF817Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NjI5Mg==", "bodyText": "meta note: it's really confusing to have inputSelection, InputSelectable, and inputSelector. Could you try to consolidate that?", "url": "https://github.com/apache/flink/pull/11529#discussion_r398666292", "createdAt": "2020-03-26T15:31:21Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3NDU2Ng==", "bodyText": "Do you have some proposal? InputSelectable is an interface for users to implement, to provide the chosen InputSelection. That gives as inputSelector from our perspective. Now we are wrapping some input selection handling logic into classes like MultipleInputSelectionHandler. How would you suggest to change it?", "url": "https://github.com/apache/flink/pull/11529#discussion_r399274566", "createdAt": "2020-03-27T13:45:23Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NjI5Mg=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNzg2MQ==", "bodyText": "Can't we keep the name of InputSelectable inputSelectable? It's especially tricky to distinguish inputSelector and inputSelection (edit distance 2).", "url": "https://github.com/apache/flink/pull/11529#discussion_r399317861", "createdAt": "2020-03-27T14:46:45Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NjI5Mg=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MDUwMw==", "bodyText": "then please have the extra commit and I will check if readability improves for me. I also got your point, but I was really confused initially.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399340503", "createdAt": "2020-03-27T15:17:47Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NjI5Mg=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM0MjM2Mw==", "bodyText": "Ops sorry, I deleted my comment and replaced it with just a thumb up, as I changed my mind. I like the inputSelectable name for this field better :) (I've already pushed the commit)", "url": "https://github.com/apache/flink/pull/11529#discussion_r399342363", "createdAt": "2020-03-27T15:20:24Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandler.java", "diffHunk": "@@ -112,7 +112,7 @@ int selectNextInputIndex(int lastReadInputIndex) {\n \t}\n \n \tboolean shouldSetAvailableForAnotherInput() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NjI5Mg=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTUxMTk5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandlerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMzoxM1rOF8MwBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0NzoxNVrOF80c5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Nzc4Mg==", "bodyText": "Add a check what happens on selectionHandler.setAvailableInput(2)?", "url": "https://github.com/apache/flink/pull/11529#discussion_r398667782", "createdAt": "2020-03-26T15:33:13Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandlerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for {@link MultipleInputSelectionHandler}.\n+ */\n+public class MultipleInputSelectionHandlerTest {\n+\t@Test\n+\tpublic void testShouldSetAvailableForAnotherInput() {\n+\t\tInputSelection secondAndThird = new InputSelection.Builder().select(2).select(3).build();\n+\n+\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(() -> secondAndThird, 3);\n+\t\tselectionHandler.nextSelection();\n+\n+\t\tassertFalse(selectionHandler.shouldSetAvailableForAnotherInput());\n+\n+\t\tselectionHandler.setUnavailableInput(0);\n+\t\tassertFalse(selectionHandler.shouldSetAvailableForAnotherInput());\n+\n+\t\tselectionHandler.setUnavailableInput(2);\n+\t\tassertTrue(selectionHandler.shouldSetAvailableForAnotherInput());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI3ODQzNA==", "bodyText": "It's available by default, so the previous check covering that.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399278434", "createdAt": "2020-03-27T13:51:11Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandlerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for {@link MultipleInputSelectionHandler}.\n+ */\n+public class MultipleInputSelectionHandlerTest {\n+\t@Test\n+\tpublic void testShouldSetAvailableForAnotherInput() {\n+\t\tInputSelection secondAndThird = new InputSelection.Builder().select(2).select(3).build();\n+\n+\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(() -> secondAndThird, 3);\n+\t\tselectionHandler.nextSelection();\n+\n+\t\tassertFalse(selectionHandler.shouldSetAvailableForAnotherInput());\n+\n+\t\tselectionHandler.setUnavailableInput(0);\n+\t\tassertFalse(selectionHandler.shouldSetAvailableForAnotherInput());\n+\n+\t\tselectionHandler.setUnavailableInput(2);\n+\t\tassertTrue(selectionHandler.shouldSetAvailableForAnotherInput());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Nzc4Mg=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxODI0NA==", "bodyText": "I was more suggesting to test the state change to go back to default.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399318244", "createdAt": "2020-03-27T14:47:15Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/MultipleInputSelectionHandlerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for {@link MultipleInputSelectionHandler}.\n+ */\n+public class MultipleInputSelectionHandlerTest {\n+\t@Test\n+\tpublic void testShouldSetAvailableForAnotherInput() {\n+\t\tInputSelection secondAndThird = new InputSelection.Builder().select(2).select(3).build();\n+\n+\t\tMultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(() -> secondAndThird, 3);\n+\t\tselectionHandler.nextSelection();\n+\n+\t\tassertFalse(selectionHandler.shouldSetAvailableForAnotherInput());\n+\n+\t\tselectionHandler.setUnavailableInput(0);\n+\t\tassertFalse(selectionHandler.shouldSetAvailableForAnotherInput());\n+\n+\t\tselectionHandler.setUnavailableInput(2);\n+\t\tassertTrue(selectionHandler.shouldSetAvailableForAnotherInput());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Nzc4Mg=="}, "originalCommit": {"oid": "0a282902f953ebc916e1769e2670dafbc4a066c9"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU1MTMyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMailboxTestHarness.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0MTowM1rOF8NIvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0MTowM1rOF8NIvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NDEwOA==", "bodyText": "Kind of replicates the checks. Would it make sense to have a boolean processSingleStep, where we can just execute a while(processSingleStep()) ;?", "url": "https://github.com/apache/flink/pull/11529#discussion_r398674108", "createdAt": "2020-03-26T15:41:03Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMailboxTestHarness.java", "diffHunk": "@@ -122,6 +122,12 @@ private void maybeProcess() throws Exception {\n \n \tpublic void process() throws Exception {\n \t\twhile (streamTask.inputProcessor.isAvailable() && streamTask.mailboxProcessor.isMailboxLoopRunning()) {\n+\t\t\tprocessSingleStep();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU1ODgwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0MjoyOVrOF8NNeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0MjoyOVrOF8NNeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3NTMyMg==", "bodyText": "Not a big fan of the name. How about testInputSelection?", "url": "https://github.com/apache/flink/pull/11529#discussion_r398675322", "createdAt": "2020-03-26T15:42:29Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), false, expectedOutput, true);\n+\t}\n+\n+\t@Test\n+\tpublic void testAnyUnorderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), true, expectedOutput, false);\n+\t}\n+\n+\t@Test\n+\tpublic void testSequentialReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestSequentialMultipleInputStreamOperator.Factory(), true, expectedOutput, true);\n+\t}\n+\n+\t@Test\n+\tpublic void testSpecialRuleReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new SpecialRuleReadingStreamOperatorFactory(3, 4, 2), true, expectedOutput, true);\n+\t}\n+\n+\t@Test\n+\tpublic void testReadFinishedInput() throws Exception {\n+\t\ttry {\n+\t\t\ttestBase(new TestReadFinishedInputStreamOperatorFactory(), true, new ArrayDeque<>(), true);\n+\t\t\tfail(\"should throw an IOException\");\n+\t\t} catch (Exception t) {\n+\t\t\tif (!ExceptionUtils.findThrowableWithMessage(t, \"Can not make a progress: all selected inputs are already finished\").isPresent()) {\n+\t\t\t\tthrow t;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void testBase(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTU4Mzk5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0NzoyN1rOF8NdPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo0NzoyN1rOF8NdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3OTM1OQ==", "bodyText": "Tests are pretty hard to follow as input is separated from output. I don't have a good solution other than replicating that in each test. You could also extract the input sequence as a constant (array). In this way, it's immediately visible when looking at the test (from top to bottom).", "url": "https://github.com/apache/flink/pull/11529#discussion_r398679359", "createdAt": "2020-03-26T15:47:27Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTYwMTE5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTo1MTowNFrOF8NoOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTozMjo0OFrOF9lbmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MjE2OA==", "bodyText": "It's again not easy to see what all the operators are doing. Would it be possible to have a generic operator, where you pass a InputSelectable, such that it is defined at the same place as the expected output?", "url": "https://github.com/apache/flink/pull/11529#discussion_r398682168", "createdAt": "2020-03-26T15:51:04Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), false, expectedOutput, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI4MzE5Nw==", "bodyText": "Hmmm, I think that would be quite difficult to abstract. I get your point, but I'm not sure if it's worth it. (especially take a look at the logic inside SpecialRuleReadingStreamOperatorFactory).", "url": "https://github.com/apache/flink/pull/11529#discussion_r399283197", "createdAt": "2020-03-27T13:58:15Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), false, expectedOutput, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MjE2OA=="}, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxOTczMg==", "bodyText": "Yes the logic would be hard to generalize. It may be worth just to do it partially for the easy cases.", "url": "https://github.com/apache/flink/pull/11529#discussion_r399319732", "createdAt": "2020-03-27T14:49:10Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), false, expectedOutput, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MjE2OA=="}, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzOTcyNw==", "bodyText": "But TestAnyModeMultipleInputStreamOperator is the only easy case that can be easily generalised. Unifying it with TestSequentialMultipleInputStreamOperator would basically require to pass the whole operator here, via the generalised factory. I really don't think it makes sense And generalising just TestAnyModeMultipleInputStreamOperator also doesn't make sense, as that would just add code complexity?", "url": "https://github.com/apache/flink/pull/11529#discussion_r399339727", "createdAt": "2020-03-27T15:16:40Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), false, expectedOutput, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MjE2OA=="}, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyMDczMQ==", "bodyText": "Okay keep as is.", "url": "https://github.com/apache/flink/pull/11529#discussion_r400120731", "createdAt": "2020-03-30T11:32:48Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskMultipleInputSelectiveReadingTest.java", "diffHunk": "@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.tasks;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator;\n+import org.apache.flink.streaming.util.TestAnyModeMultipleInputStreamOperator.ToStringInput;\n+import org.apache.flink.streaming.util.TestSequentialMultipleInputStreamOperator;\n+import org.apache.flink.util.ExceptionUtils;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayDeque;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Queue;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * Test selective reading.\n+ */\n+public class StreamTaskMultipleInputSelectiveReadingTest {\n+\n+\t@Test\n+\tpublic void testAnyOrderedReading() throws Exception {\n+\t\tArrayDeque<Object> expectedOutput = new ArrayDeque<>();\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 1\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 2\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[1]: Hello-3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 3\"));\n+\t\texpectedOutput.add(new StreamRecord<>(\"[2]: 4\"));\n+\n+\t\ttestBase(new TestAnyModeMultipleInputStreamOperator.Factory(), false, expectedOutput, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4MjE2OA=="}, "originalCommit": {"oid": "0b0e3c9589525ab0979b89ac206032ecb865ba3e"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 728, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}