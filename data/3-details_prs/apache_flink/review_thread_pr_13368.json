{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDQ2MTcy", "number": 13368, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToyNzoxOFrOEji8zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMToxNFrOEjjCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzA4MjM3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToyNzoxOFrOHR9NSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMToyNzoxOFrOHR9NSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MDY2Nw==", "bodyText": "maybe also check that initializing <= created, to prevent the order from being messed up?", "url": "https://github.com/apache/flink/pull/13368#discussion_r488590667", "createdAt": "2020-09-15T11:27:18Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "diffHunk": "@@ -749,6 +750,26 @@ public void testOnRemovedJobGraphDoesNotCleanUpHAFiles() throws Exception {\n \t\t} catch (TimeoutException expected) {}\n \t}\n \n+\t@Test\n+\tpublic void testInitializationTimestampForwardedToExecutionGraph() throws Exception {\n+\t\tdispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch));\n+\t\tjobMasterLeaderElectionService.isLeader(UUID.randomUUID());\n+\t\tDispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class);\n+\n+\t\tdispatcherGateway.submitJob(jobGraph, TIMEOUT).get();\n+\n+\t\t// ensure job is running\n+\t\tCommonTestUtils.waitUntilCondition(() -> dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT).get() == JobStatus.RUNNING,\n+\t\t\tDeadline.fromNow(Duration.of(10, ChronoUnit.SECONDS)), 5L);\n+\n+\t\tArchivedExecutionGraph result = dispatcher.requestJob(jobGraph.getJobID(), TIMEOUT).get();\n+\n+\t\t// ensure all statuses are set in the ExecutionGraph\n+\t\tassertThat(result.getStatusTimestamp(JobStatus.INITIALIZING), greaterThan(0L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59deb5d9ae2ddf42b40ff4391d567daa8abef8db"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzA5NDM2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMDozN1rOHR9UhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMDozN1rOHR9UhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5MjUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tDeadline.fromNow(Duration.of(10, ChronoUnit.SECONDS)), 5L);\n          \n          \n            \n            \t\t\tDeadline.fromNow(Duration.ofSeconds(10), 5L);", "url": "https://github.com/apache/flink/pull/13368#discussion_r488592517", "createdAt": "2020-09-15T11:30:37Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "diffHunk": "@@ -749,6 +750,26 @@ public void testOnRemovedJobGraphDoesNotCleanUpHAFiles() throws Exception {\n \t\t} catch (TimeoutException expected) {}\n \t}\n \n+\t@Test\n+\tpublic void testInitializationTimestampForwardedToExecutionGraph() throws Exception {\n+\t\tdispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch));\n+\t\tjobMasterLeaderElectionService.isLeader(UUID.randomUUID());\n+\t\tDispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class);\n+\n+\t\tdispatcherGateway.submitJob(jobGraph, TIMEOUT).get();\n+\n+\t\t// ensure job is running\n+\t\tCommonTestUtils.waitUntilCondition(() -> dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT).get() == JobStatus.RUNNING,\n+\t\t\tDeadline.fromNow(Duration.of(10, ChronoUnit.SECONDS)), 5L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59deb5d9ae2ddf42b40ff4391d567daa8abef8db"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzA5Njg0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMToxNFrOHR9V7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMTozMToxNFrOHR9V7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU5Mjg3OA==", "bodyText": "I'd move all arguments on a separate line.", "url": "https://github.com/apache/flink/pull/13368#discussion_r488592878", "createdAt": "2020-09-15T11:31:14Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/dispatcher/DispatcherTest.java", "diffHunk": "@@ -749,6 +750,26 @@ public void testOnRemovedJobGraphDoesNotCleanUpHAFiles() throws Exception {\n \t\t} catch (TimeoutException expected) {}\n \t}\n \n+\t@Test\n+\tpublic void testInitializationTimestampForwardedToExecutionGraph() throws Exception {\n+\t\tdispatcher = createAndStartDispatcher(heartbeatServices, haServices, new ExpectedJobIdJobManagerRunnerFactory(TEST_JOB_ID, createdJobManagerRunnerLatch));\n+\t\tjobMasterLeaderElectionService.isLeader(UUID.randomUUID());\n+\t\tDispatcherGateway dispatcherGateway = dispatcher.getSelfGateway(DispatcherGateway.class);\n+\n+\t\tdispatcherGateway.submitJob(jobGraph, TIMEOUT).get();\n+\n+\t\t// ensure job is running\n+\t\tCommonTestUtils.waitUntilCondition(() -> dispatcherGateway.requestJobStatus(jobGraph.getJobID(), TIMEOUT).get() == JobStatus.RUNNING,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59deb5d9ae2ddf42b40ff4391d567daa8abef8db"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 456, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}