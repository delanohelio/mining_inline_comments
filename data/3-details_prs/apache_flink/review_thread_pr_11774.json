{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MjYyMjgw", "number": 11774, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNToyM1rOD1WmXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0OTowN1rOD1X5lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjcxMzkxOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjowNToyM1rOGKwDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo0NDoyMVrOGLFCfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjE4Ng==", "bodyText": "Maybe it makes sense to move the added tests to a new class.\nAlso, can be declared static.", "url": "https://github.com/apache/flink/pull/11774#discussion_r413926186", "createdAt": "2020-04-23T16:05:23Z", "author": {"login": "GJL"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3MDA3OA==", "bodyText": "Ok. I have moved the tests to StreamingJobGraphGeneratorWithGlobalDataExchangeModeTest.\nAlso make this method static.", "url": "https://github.com/apache/flink/pull/11774#discussion_r414270078", "createdAt": "2020-04-24T03:44:21Z", "author": {"login": "zhuzhurk"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjE4Ng=="}, "originalCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjkyNjkyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjo0OTowN1rOGKyD5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMzo0MzoyOFrOGLFBgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTE0Mg==", "bodyText": "Is there a benefit compared to calling map1.rescale().map(i -> i).setParallelism(2) ?", "url": "https://github.com/apache/flink/pull/11774#discussion_r413959142", "createdAt": "2020-04-23T16:49:07Z", "author": {"login": "GJL"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map1 = forward.map(i -> i).startNewChain().setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> rescale = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tmap1.getTransformation(), new RescalePartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map2 = rescale.map(i -> i).setParallelism(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2OTgyNg==", "bodyText": "By specifying ShuffleMode.UNDEFINED these test do not need to have the assumption that  ShuffleMode.UNDEFINED is the default value. So later if the default value is changed it will not break these tests.", "url": "https://github.com/apache/flink/pull/11774#discussion_r414269826", "createdAt": "2020-04-24T03:43:28Z", "author": {"login": "zhuzhurk"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map1 = forward.map(i -> i).startNewChain().setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> rescale = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tmap1.getTransformation(), new RescalePartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map2 = rescale.map(i -> i).setParallelism(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTE0Mg=="}, "originalCommit": {"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d"}, "originalPosition": 187}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1647, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}