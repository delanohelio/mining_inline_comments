{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NTU3OTQy", "number": 13697, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMzo0OVrOEycbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzozMzoxOVrOEzGTyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzMwMTE3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozMzo0OVrOHpFsfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjozNDowNVrOHpXzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0Njk3Mw==", "bodyText": "Here we should not expose the whole Bucket as this is an internal class that can change anytime.\nWe can pass here a new interface, something like BucketInfo, which is going to be implemented by the Bucket and which only exposes the necessary information. Currently, these are the public methods in the Bucket, ie.  the BucketID getBucketId(), Path getBucketPath(), and long getPartCounter().\nActually, I would recommend to not expose the part counter because this will not be supported anymore in the new FileSink. If you need access to the in-progress file path, then simply pass that (the result of the assembleNewPartPath()) it in a field and have a method getInProgressFilePath() in the new BucketInfo interface.", "url": "https://github.com/apache/flink/pull/13697#discussion_r512846973", "createdAt": "2020-10-27T16:33:49Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.sink.filesystem;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.core.fs.Path;\n+\n+/**\n+ * Listener about the status of file.\n+ */\n+@Internal\n+public interface FileLifeCycleListener<IN, BucketID> {\n+\n+\t/**\n+\t * Notifies a new file has been opened.\n+\t *\n+\t * <p>Note that this does not mean that the file has been created in the file system. It is\n+\t * only created logically and the actual file will be generated after it is committed.\n+\t *\n+\t * @param bucket The bucket of newly opened file.\n+\t * @param newPath The path of newly opened file.\n+\t */\n+\tvoid openPartFile(Bucket<IN, BucketID> bucket, Path newPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MzY3MA==", "bodyText": "Good point!\n+1 for not exposing the part counter.\nIn addition, consider whether it is enough to expose only the BucketID? Because the new part path is already provided, I think BucketPath is useless in this case too.", "url": "https://github.com/apache/flink/pull/13697#discussion_r513143670", "createdAt": "2020-10-28T02:34:05Z", "author": {"login": "JingsongLi"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.sink.filesystem;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.core.fs.Path;\n+\n+/**\n+ * Listener about the status of file.\n+ */\n+@Internal\n+public interface FileLifeCycleListener<IN, BucketID> {\n+\n+\t/**\n+\t * Notifies a new file has been opened.\n+\t *\n+\t * <p>Note that this does not mean that the file has been created in the file system. It is\n+\t * only created logically and the actual file will be generated after it is committed.\n+\t *\n+\t * @param bucket The bucket of newly opened file.\n+\t * @param newPath The path of newly opened file.\n+\t */\n+\tvoid openPartFile(Bucket<IN, BucketID> bucket, Path newPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0Njk3Mw=="}, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzMwMzA3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozNDoxNVrOHpFtug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjoyMTo0NVrOHpXmoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0NzI5MA==", "bodyText": "Shouldn't we also have a closePathFile() for symmetry?", "url": "https://github.com/apache/flink/pull/13697#discussion_r512847290", "createdAt": "2020-10-27T16:34:15Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.sink.filesystem;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.core.fs.Path;\n+\n+/**\n+ * Listener about the status of file.\n+ */\n+@Internal\n+public interface FileLifeCycleListener<IN, BucketID> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0MDM4NA==", "bodyText": "Yes, it's better to have closePathFile().\nBut at present, because InProgressFileWriters hide the path, we can't get the path when close file.\nWhat's more, the RecoverableFsDataOutputStream recovered from the state does not save path information, such asS3RecoverableFsDataOutputStream, which may require us to save additional path information in state or have the ability to recover path information from the internal structure of RecoverableFsDataOutputStream.", "url": "https://github.com/apache/flink/pull/13697#discussion_r513140384", "createdAt": "2020-10-28T02:21:45Z", "author": {"login": "JingsongLi"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.sink.filesystem;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.core.fs.Path;\n+\n+/**\n+ * Listener about the status of file.\n+ */\n+@Internal\n+public interface FileLifeCycleListener<IN, BucketID> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg0NzI5MA=="}, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzMyMDk1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozNzo0NlrOHpF4fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjozODoyN1rOHpX39A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1MDA0Ng==", "bodyText": "Why not having an Optional instead of a @Nullable? I think null leads to more \"fragile\" code and more difficult to maintain.", "url": "https://github.com/apache/flink/pull/13697#discussion_r512850046", "createdAt": "2020-10-27T16:37:46Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketFactory.java", "diffHunk": "@@ -37,6 +39,7 @@\n \t\t\tfinal long initialPartCounter,\n \t\t\tfinal BucketWriter<IN, BucketID> bucketWriter,\n \t\t\tfinal RollingPolicy<IN, BucketID> rollingPolicy,\n+\t\t\t@Nullable final FileLifeCycleListener<IN, BucketID> fileListener,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NDgyMA==", "bodyText": "https://flink.apache.org/contributing/code-style-and-quality-java.html#java-optional\nIn Flink code style, it is recommended to use the Optional only in method return values.", "url": "https://github.com/apache/flink/pull/13697#discussion_r513144820", "createdAt": "2020-10-28T02:38:27Z", "author": {"login": "JingsongLi"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketFactory.java", "diffHunk": "@@ -37,6 +39,7 @@\n \t\t\tfinal long initialPartCounter,\n \t\t\tfinal BucketWriter<IN, BucketID> bucketWriter,\n \t\t\tfinal RollingPolicy<IN, BucketID> rollingPolicy,\n+\t\t\t@Nullable final FileLifeCycleListener<IN, BucketID> fileListener,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1MDA0Ng=="}, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzMyMTc0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozNzo1NVrOHpF5BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozNzo1NVrOHpF5BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1MDE4MQ==", "bodyText": "Same as above.", "url": "https://github.com/apache/flink/pull/13697#discussion_r512850181", "createdAt": "2020-10-27T16:37:55Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/BucketFactory.java", "diffHunk": "@@ -45,5 +48,6 @@\n \t\t\tfinal BucketWriter<IN, BucketID> bucketWriter,\n \t\t\tfinal RollingPolicy<IN, BucketID> rollingPolicy,\n \t\t\tfinal BucketState<BucketID> bucketState,\n+\t\t\t@Nullable final FileLifeCycleListener<IN, BucketID> fileListener,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzMyNDg2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/Bucket.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozODo0MVrOHpF7Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjozODo0MVrOHpF7Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1MDY5MA==", "bodyText": "Here also, why not Optional?", "url": "https://github.com/apache/flink/pull/13697#discussion_r512850690", "createdAt": "2020-10-27T16:38:41Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/Bucket.java", "diffHunk": "@@ -83,13 +86,15 @@ private Bucket(\n \t\t\tfinal long initialPartCounter,\n \t\t\tfinal BucketWriter<IN, BucketID> bucketWriter,\n \t\t\tfinal RollingPolicy<IN, BucketID> rollingPolicy,\n+\t\t\t@Nullable final FileLifeCycleListener<IN, BucketID> fileListener,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzM0MTk4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/StreamingFileSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNjo0MjoyOFrOHpGF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMjo0Nzo0NFrOHpYB4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1MzQ5MQ==", "bodyText": "@JingsongLi could you describe how this method is going to be used? Because in this commit, it seems that it is a private method of the builder :) Could it at least be package-private so that it is not exposed to the user?", "url": "https://github.com/apache/flink/pull/13697#discussion_r512853491", "createdAt": "2020-10-27T16:42:28Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/StreamingFileSink.java", "diffHunk": "@@ -251,14 +254,20 @@ T withBucketFactory(final BucketFactory<IN, BucketID> factory) {\n \t\t\treturn self();\n \t\t}\n \n+\t\t@Internal\n+\t\t@Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE0NzM2MQ==", "bodyText": "Sorry, let me explain the context:\nIn the file compaction, we need to write a file with the specified name. We hope to use BucketWriter to complete atomic file level writing.\nThe BucketWriter can complete atomic writing, but also shield the implementation details of BulkWriter, RowWiseWriter, OutputStreamBasedWriting and PathBasedWriting. That's great.\nIt's like the createBuckets method, We can not let it be package-private, because it is used by another module (flink-table).", "url": "https://github.com/apache/flink/pull/13697#discussion_r513147361", "createdAt": "2020-10-28T02:47:44Z", "author": {"login": "JingsongLi"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/StreamingFileSink.java", "diffHunk": "@@ -251,14 +254,20 @@ T withBucketFactory(final BucketFactory<IN, BucketID> factory) {\n \t\t\treturn self();\n \t\t}\n \n+\t\t@Internal\n+\t\t@Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1MzQ5MQ=="}, "originalCommit": {"oid": "b45885955bfdee4d4288f9273171e1d52379773f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDE2MjAxOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzozMzoxOVrOHqHQHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzozMzoxOVrOHqHQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyMTA1Mg==", "bodyText": "I think we might change the name of this method to partFileOpened or onPartFileOpened, the current name seems to open the part file actually in this method.", "url": "https://github.com/apache/flink/pull/13697#discussion_r513921052", "createdAt": "2020-10-29T03:33:19Z", "author": {"login": "gaoyunhaii"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/sink/filesystem/FileLifeCycleListener.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.sink.filesystem;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.core.fs.Path;\n+\n+/**\n+ * Listener about the status of file.\n+ */\n+@Internal\n+public interface FileLifeCycleListener<BucketID> {\n+\n+\t/**\n+\t * Notifies a new file has been opened.\n+\t *\n+\t * <p>Note that this does not mean that the file has been created in the file system. It is\n+\t * only created logically and the actual file will be generated after it is committed.\n+\t *\n+\t * @param bucketID The bucketID of newly opened file.\n+\t * @param newPath The path of newly opened file.\n+\t */\n+\tvoid openPartFile(BucketID bucketID, Path newPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd25177243a782fad2e7f9d9ff508e6ba3758303"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 35, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}