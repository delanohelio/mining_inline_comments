{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzIzODM0", "number": 11688, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxMzo0OVrODwqzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxMzo0OVrODwqzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU5NDUzOnYy", "diffSide": "RIGHT", "path": "flink-java/src/main/java/org/apache/flink/api/java/Utils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxMzo0OVrOGDzByg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoyODowMFrOGDzTfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDk1NA==", "bodyText": "Why not just skipt adding this accumulator into context?", "url": "https://github.com/apache/flink/pull/11688#discussion_r406634954", "createdAt": "2020-04-10T07:13:49Z", "author": {"login": "wuchong"}, "path": "flink-java/src/main/java/org/apache/flink/api/java/Utils.java", "diffHunk": "@@ -138,6 +138,12 @@ public void writeRecord(T record) throws IOException {\n \n \t\t@Override\n \t\tpublic void close() {\n+\t\t\t// when the sink is up but not initialized and the job fails due to other operators,\n+\t\t\t// it is possible that close() is called when open() is not called,\n+\t\t\t// so we have to do this null check\n+\t\t\tif (accumulator == null) {\n+\t\t\t\taccumulator = new SerializedListAccumulator<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecd5949bd414f4b1b32f461167e1b86a8047df61"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNzMwMg==", "bodyText": "The user of this CollectHelper expects this accumulator to appear in the result. Not adding this accumulator will result in additional checks on the user side.", "url": "https://github.com/apache/flink/pull/11688#discussion_r406637302", "createdAt": "2020-04-10T07:21:24Z", "author": {"login": "tsreaper"}, "path": "flink-java/src/main/java/org/apache/flink/api/java/Utils.java", "diffHunk": "@@ -138,6 +138,12 @@ public void writeRecord(T record) throws IOException {\n \n \t\t@Override\n \t\tpublic void close() {\n+\t\t\t// when the sink is up but not initialized and the job fails due to other operators,\n+\t\t\t// it is possible that close() is called when open() is not called,\n+\t\t\t// so we have to do this null check\n+\t\t\tif (accumulator == null) {\n+\t\t\t\taccumulator = new SerializedListAccumulator<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDk1NA=="}, "originalCommit": {"oid": "ecd5949bd414f4b1b32f461167e1b86a8047df61"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTQ4NA==", "bodyText": "But the case is job failing, I think it's hard to guarantee the accumulator is in result even if job is failed. What if the operator/task/container is never aroused?", "url": "https://github.com/apache/flink/pull/11688#discussion_r406639484", "createdAt": "2020-04-10T07:28:00Z", "author": {"login": "wuchong"}, "path": "flink-java/src/main/java/org/apache/flink/api/java/Utils.java", "diffHunk": "@@ -138,6 +138,12 @@ public void writeRecord(T record) throws IOException {\n \n \t\t@Override\n \t\tpublic void close() {\n+\t\t\t// when the sink is up but not initialized and the job fails due to other operators,\n+\t\t\t// it is possible that close() is called when open() is not called,\n+\t\t\t// so we have to do this null check\n+\t\t\tif (accumulator == null) {\n+\t\t\t\taccumulator = new SerializedListAccumulator<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNDk1NA=="}, "originalCommit": {"oid": "ecd5949bd414f4b1b32f461167e1b86a8047df61"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1707, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}