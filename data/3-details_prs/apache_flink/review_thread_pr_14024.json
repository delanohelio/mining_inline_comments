{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzgyNjU5", "number": 14024, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjo0ODo1MVrOE3k3zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjo0ODo1MVrOE3k3zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NzExMjQ1OnYy", "diffSide": "RIGHT", "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNjo0ODo1MVrOHxAVwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwOToxNzo0NVrOHxEwhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0Nzg0MQ==", "bodyText": "Why do we need to reduce the backpressure here? I'm worried that any solution on top of it will only work with a certain minimal flow.\nNote that in ef4f78d#diff-c0d448d637f04cc203de3592d7fab0ba2412f2d75c59dcf6e44cc4a3c18e5851R568 I added a modification to the test that avoids backpressuring during recovery (by applying backpressure only after the first successful checkpoint.", "url": "https://github.com/apache/flink/pull/14024#discussion_r521147841", "createdAt": "2020-11-11T06:48:51Z", "author": {"login": "AHeise"}, "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "diffHunk": "@@ -531,8 +534,10 @@ public void invoke(Long value, Context context) throws Exception {\n \t\t\tstate.numOutput++;\n \n \t\t\tif (state.completedCheckpoints < minCheckpoints) {\n-\t\t\t\t// induce heavy backpressure until enough checkpoints have been written\n-\t\t\t\tThread.sleep(0, 100_000);\n+\t\t\t\t// induce backpressure until enough checkpoints have been written\n+\t\t\t\tif (random.nextInt(1000) == 42) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d206d47d44909992405611c8af17a65cb5be0775"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDIzMQ==", "bodyText": "Why do we need to reduce the backpressure here?\n\nThis is a commit from #13827. As far as I understand, the motivation was:\n\nto have higher backpressure (.1ms vs 1ms) for some parts of the stream\nto have unbalanced streams\nreduce running time (was ~1m, now ~10s)\n\nOn average, the change decreases sleep time only by 60% (1-42/1000*10).\n\nI'm worried that any solution on top of it will only work with a certain minimal flow.\n\nWith 1K elements, the sink will sleep 23 times for 1ms, which I think is enough and 1K is a reasonable number of elements for this test.", "url": "https://github.com/apache/flink/pull/14024#discussion_r521220231", "createdAt": "2020-11-11T09:17:45Z", "author": {"login": "rkhachatryan"}, "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "diffHunk": "@@ -531,8 +534,10 @@ public void invoke(Long value, Context context) throws Exception {\n \t\t\tstate.numOutput++;\n \n \t\t\tif (state.completedCheckpoints < minCheckpoints) {\n-\t\t\t\t// induce heavy backpressure until enough checkpoints have been written\n-\t\t\t\tThread.sleep(0, 100_000);\n+\t\t\t\t// induce backpressure until enough checkpoints have been written\n+\t\t\t\tif (random.nextInt(1000) == 42) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0Nzg0MQ=="}, "originalCommit": {"oid": "d206d47d44909992405611c8af17a65cb5be0775"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4875, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}