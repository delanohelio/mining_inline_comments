{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MjEyOTM5", "number": 13422, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMDoyOFrOEljRrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMzo0MFrOEljWtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODEwNzM1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/PipelinedRegionSchedulingStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMDoyOFrOHVFYEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODo0NDozNFrOHVF4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3MDIyNA==", "bodyText": "should we also do this optimisation for other strategies to compare performance in a cleaner way?", "url": "https://github.com/apache/flink/pull/13422#discussion_r491870224", "createdAt": "2020-09-21T08:30:28Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/PipelinedRegionSchedulingStrategy.java", "diffHunk": "@@ -127,13 +136,9 @@ private void maybeScheduleRegion(final SchedulingPipelinedRegion region) {\n \n \t\tcheckState(areRegionVerticesAllInCreatedState(region), \"BUG: trying to schedule a region which is not in CREATED state\");\n \n-\t\tfinal Set<ExecutionVertexID> verticesToSchedule = IterableUtils.toStream(region.getVertices())\n-\t\t\t.map(SchedulingExecutionVertex::getId)\n-\t\t\t.collect(Collectors.toSet());\n \t\tfinal List<ExecutionVertexDeploymentOption> vertexDeploymentOptions =\n-\t\t\tSchedulingStrategyUtils.createExecutionVertexDeploymentOptionsInTopologicalOrder(\n-\t\t\t\tschedulingTopology,\n-\t\t\t\tverticesToSchedule,\n+\t\t\tSchedulingStrategyUtils.createExecutionVertexDeploymentOptions(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f83ae1d3e63dd910dda897f2a60fa3f802b464e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3ODQ3Ng==", "bodyText": "I think it's not needed. Because the sorting is not a problem for other strategies where the sorting is invoked once per triggering event. While for pipelined region scheduling, it is invoked multiple times, each for one region.\nAnd doing it like this requires to add a sorted region vertex map for other strategies, which would be an unnecessary complication.", "url": "https://github.com/apache/flink/pull/13422#discussion_r491878476", "createdAt": "2020-09-21T08:44:34Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/PipelinedRegionSchedulingStrategy.java", "diffHunk": "@@ -127,13 +136,9 @@ private void maybeScheduleRegion(final SchedulingPipelinedRegion region) {\n \n \t\tcheckState(areRegionVerticesAllInCreatedState(region), \"BUG: trying to schedule a region which is not in CREATED state\");\n \n-\t\tfinal Set<ExecutionVertexID> verticesToSchedule = IterableUtils.toStream(region.getVertices())\n-\t\t\t.map(SchedulingExecutionVertex::getId)\n-\t\t\t.collect(Collectors.toSet());\n \t\tfinal List<ExecutionVertexDeploymentOption> vertexDeploymentOptions =\n-\t\t\tSchedulingStrategyUtils.createExecutionVertexDeploymentOptionsInTopologicalOrder(\n-\t\t\t\tschedulingTopology,\n-\t\t\t\tverticesToSchedule,\n+\t\t\tSchedulingStrategyUtils.createExecutionVertexDeploymentOptions(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3MDIyNA=="}, "originalCommit": {"oid": "2f83ae1d3e63dd910dda897f2a60fa3f802b464e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODEyMDIxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/SchedulingStrategyUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODozMzo0MFrOHVFfYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwODo1MTozNlrOHVGIQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3MjA5OA==", "bodyText": "maybe we should also convert stream to a loop for performance in sortPipelinedRegionsInTopologicalOrder?", "url": "https://github.com/apache/flink/pull/13422#discussion_r491872098", "createdAt": "2020-09-21T08:33:40Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/SchedulingStrategyUtils.java", "diffHunk": "@@ -81,6 +82,14 @@\n \t\t\tfinal SchedulingTopology topology,\n \t\t\tfinal Set<SchedulingPipelinedRegion> regions) {\n \n+\t\t// Avoid the O(V) (V is the number of vertices in the topology) sorting\n+\t\t// complexity if the given set of regions is small enough\n+\t\tif (regions.size() == 0) {\n+\t\t\treturn Collections.emptyList();\n+\t\t} else if (regions.size() == 1) {\n+\t\t\treturn Collections.singletonList(regions.iterator().next());\n+\t\t}\n+\n \t\treturn IterableUtils.toStream(topology.getVertices())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62e3ab653c5b01e5ad7b750e1db97d3d066ef287"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg4MjU2MQ==", "bodyText": "I think we can keep it as is to be simpler because it is not the critical part.\nThe reworked java streams are in per-region code path, while this one is invoked the per-event code path. But even the reworked loops are not most critical, because it is in a O(V) complexity.\nThe other 2 commits to fix the vertex/region sorting, reduces O(V^2) complexity to O(V) in each valid triggering event.", "url": "https://github.com/apache/flink/pull/13422#discussion_r491882561", "createdAt": "2020-09-21T08:51:36Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/strategy/SchedulingStrategyUtils.java", "diffHunk": "@@ -81,6 +82,14 @@\n \t\t\tfinal SchedulingTopology topology,\n \t\t\tfinal Set<SchedulingPipelinedRegion> regions) {\n \n+\t\t// Avoid the O(V) (V is the number of vertices in the topology) sorting\n+\t\t// complexity if the given set of regions is small enough\n+\t\tif (regions.size() == 0) {\n+\t\t\treturn Collections.emptyList();\n+\t\t} else if (regions.size() == 1) {\n+\t\t\treturn Collections.singletonList(regions.iterator().next());\n+\t\t}\n+\n \t\treturn IterableUtils.toStream(topology.getVertices())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg3MjA5OA=="}, "originalCommit": {"oid": "62e3ab653c5b01e5ad7b750e1db97d3d066ef287"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 302, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}