{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODE2MTAz", "number": 11699, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MDo0NlrODxrXWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0NDozN1rODxre4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3MzA2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MDo0NlrOGFR-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MDo0NlrOGFR-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDQ2Nw==", "bodyText": "Is this a valid return value? Maybe it is better to throw an UnsupportedOperationException instead of returning null.", "url": "https://github.com/apache/flink/pull/11699#discussion_r408190467", "createdAt": "2020-04-14T14:40:46Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.client.config.entries.ViewEntry;\n+import org.apache.flink.table.client.gateway.Executor;\n+import org.apache.flink.table.client.gateway.ProgramTargetDescriptor;\n+import org.apache.flink.table.client.gateway.ResultDescriptor;\n+import org.apache.flink.table.client.gateway.SessionContext;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A customizable {@link Executor} for testing purposes.\n+ */\n+class TestingExecutor implements Executor {\n+\n+\tint numCancelCalls = 0;\n+\n+\tint numRetrieveResultChancesCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges;\n+\n+\tint numSnapshotResultCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults;\n+\n+\tint numRetrieveResultPageCalls = 0;\n+\tprivate final List<SupplierWithException<List<Row>, SqlExecutionException>> resultPages;\n+\n+\tint numUseCatalogCalls = 0;\n+\tprivate final BiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer;\n+\n+\tint numUseDatabaseCalls = 0;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer;\n+\n+\tTestingExecutor(\n+\t\t\tList<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges,\n+\t\t\tList<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults,\n+\t\t\tList<SupplierWithException<List<Row>, SqlExecutionException>> resultPages,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer) {\n+\t\tthis.resultChanges = resultChanges;\n+\t\tthis.snapshotResults = snapshotResults;\n+\t\tthis.resultPages = resultPages;\n+\t\tthis.useCatalogConsumer = useCatalogConsumer;\n+\t\tthis.useDatabaseConsumer = useDatabaseConsumer;\n+\t}\n+\n+\t@Override\n+\tpublic void cancelQuery(String sessionId, String resultId) throws SqlExecutionException {\n+\t\tnumCancelCalls++;\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(String sessionId, String resultId) throws SqlExecutionException {\n+\t\treturn resultChanges.get(Math.min(numRetrieveResultChancesCalls++, resultChanges.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {\n+\t\treturn resultPages.get(Math.min(numRetrieveResultPageCalls++, resultPages.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<Integer> snapshotResult(String sessionId, String resultId, int pageSize) throws SqlExecutionException {\n+\t\treturn snapshotResults.get(Math.min(numSnapshotResultCalls++, snapshotResults.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic void useCatalog(String sessionId, String catalogName) throws SqlExecutionException {\n+\t\tnumUseCatalogCalls++;\n+\t\tuseCatalogConsumer.accept(sessionId, catalogName);\n+\t}\n+\n+\t@Override\n+\tpublic void useDatabase(String sessionId, String databaseName) throws SqlExecutionException {\n+\t\tnumUseDatabaseCalls++;\n+\t\tuseDatabaseConsumer.accept(sessionId, databaseName);\n+\t}\n+\n+\t@Override\n+\tpublic void start() throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic String openSession(SessionContext session) throws SqlExecutionException {\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3NDc3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTowNVrOGFR_AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTowNVrOGFR_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDcyMA==", "bodyText": "Same here. At least returning a Collections.emptyMap() would be better.", "url": "https://github.com/apache/flink/pull/11699#discussion_r408190720", "createdAt": "2020-04-14T14:41:05Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.client.config.entries.ViewEntry;\n+import org.apache.flink.table.client.gateway.Executor;\n+import org.apache.flink.table.client.gateway.ProgramTargetDescriptor;\n+import org.apache.flink.table.client.gateway.ResultDescriptor;\n+import org.apache.flink.table.client.gateway.SessionContext;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A customizable {@link Executor} for testing purposes.\n+ */\n+class TestingExecutor implements Executor {\n+\n+\tint numCancelCalls = 0;\n+\n+\tint numRetrieveResultChancesCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges;\n+\n+\tint numSnapshotResultCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults;\n+\n+\tint numRetrieveResultPageCalls = 0;\n+\tprivate final List<SupplierWithException<List<Row>, SqlExecutionException>> resultPages;\n+\n+\tint numUseCatalogCalls = 0;\n+\tprivate final BiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer;\n+\n+\tint numUseDatabaseCalls = 0;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer;\n+\n+\tTestingExecutor(\n+\t\t\tList<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges,\n+\t\t\tList<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults,\n+\t\t\tList<SupplierWithException<List<Row>, SqlExecutionException>> resultPages,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer) {\n+\t\tthis.resultChanges = resultChanges;\n+\t\tthis.snapshotResults = snapshotResults;\n+\t\tthis.resultPages = resultPages;\n+\t\tthis.useCatalogConsumer = useCatalogConsumer;\n+\t\tthis.useDatabaseConsumer = useDatabaseConsumer;\n+\t}\n+\n+\t@Override\n+\tpublic void cancelQuery(String sessionId, String resultId) throws SqlExecutionException {\n+\t\tnumCancelCalls++;\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(String sessionId, String resultId) throws SqlExecutionException {\n+\t\treturn resultChanges.get(Math.min(numRetrieveResultChancesCalls++, resultChanges.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {\n+\t\treturn resultPages.get(Math.min(numRetrieveResultPageCalls++, resultPages.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<Integer> snapshotResult(String sessionId, String resultId, int pageSize) throws SqlExecutionException {\n+\t\treturn snapshotResults.get(Math.min(numSnapshotResultCalls++, snapshotResults.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic void useCatalog(String sessionId, String catalogName) throws SqlExecutionException {\n+\t\tnumUseCatalogCalls++;\n+\t\tuseCatalogConsumer.accept(sessionId, catalogName);\n+\t}\n+\n+\t@Override\n+\tpublic void useDatabase(String sessionId, String databaseName) throws SqlExecutionException {\n+\t\tnumUseDatabaseCalls++;\n+\t\tuseDatabaseConsumer.accept(sessionId, databaseName);\n+\t}\n+\n+\t@Override\n+\tpublic void start() throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic String openSession(SessionContext session) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void closeSession(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, String> getSessionProperties(String sessionId) throws SqlExecutionException {\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3NjA0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MToyM1rOGFR_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MToyM1rOGFR_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDk0MA==", "bodyText": "Collections.emptyList() or UnsupportedOperationException.", "url": "https://github.com/apache/flink/pull/11699#discussion_r408190940", "createdAt": "2020-04-14T14:41:23Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.client.config.entries.ViewEntry;\n+import org.apache.flink.table.client.gateway.Executor;\n+import org.apache.flink.table.client.gateway.ProgramTargetDescriptor;\n+import org.apache.flink.table.client.gateway.ResultDescriptor;\n+import org.apache.flink.table.client.gateway.SessionContext;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A customizable {@link Executor} for testing purposes.\n+ */\n+class TestingExecutor implements Executor {\n+\n+\tint numCancelCalls = 0;\n+\n+\tint numRetrieveResultChancesCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges;\n+\n+\tint numSnapshotResultCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults;\n+\n+\tint numRetrieveResultPageCalls = 0;\n+\tprivate final List<SupplierWithException<List<Row>, SqlExecutionException>> resultPages;\n+\n+\tint numUseCatalogCalls = 0;\n+\tprivate final BiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer;\n+\n+\tint numUseDatabaseCalls = 0;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer;\n+\n+\tTestingExecutor(\n+\t\t\tList<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges,\n+\t\t\tList<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults,\n+\t\t\tList<SupplierWithException<List<Row>, SqlExecutionException>> resultPages,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer) {\n+\t\tthis.resultChanges = resultChanges;\n+\t\tthis.snapshotResults = snapshotResults;\n+\t\tthis.resultPages = resultPages;\n+\t\tthis.useCatalogConsumer = useCatalogConsumer;\n+\t\tthis.useDatabaseConsumer = useDatabaseConsumer;\n+\t}\n+\n+\t@Override\n+\tpublic void cancelQuery(String sessionId, String resultId) throws SqlExecutionException {\n+\t\tnumCancelCalls++;\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(String sessionId, String resultId) throws SqlExecutionException {\n+\t\treturn resultChanges.get(Math.min(numRetrieveResultChancesCalls++, resultChanges.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {\n+\t\treturn resultPages.get(Math.min(numRetrieveResultPageCalls++, resultPages.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<Integer> snapshotResult(String sessionId, String resultId, int pageSize) throws SqlExecutionException {\n+\t\treturn snapshotResults.get(Math.min(numSnapshotResultCalls++, snapshotResults.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic void useCatalog(String sessionId, String catalogName) throws SqlExecutionException {\n+\t\tnumUseCatalogCalls++;\n+\t\tuseCatalogConsumer.accept(sessionId, catalogName);\n+\t}\n+\n+\t@Override\n+\tpublic void useDatabase(String sessionId, String databaseName) throws SqlExecutionException {\n+\t\tnumUseDatabaseCalls++;\n+\t\tuseDatabaseConsumer.accept(sessionId, databaseName);\n+\t}\n+\n+\t@Override\n+\tpublic void start() throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic String openSession(SessionContext session) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void closeSession(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, String> getSessionProperties(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void resetSessionProperties(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void setSessionProperty(String sessionId, String key, String value) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void addView(String sessionId, String name, String query) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void removeView(String sessionId, String name) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, ViewEntry> listViews(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listCatalogs(String sessionid) throws SqlExecutionException {\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3NjQ1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MToyOFrOGFSAHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MToyOFrOGFSAHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MTAwNw==", "bodyText": "Same here", "url": "https://github.com/apache/flink/pull/11699#discussion_r408191007", "createdAt": "2020-04-14T14:41:28Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.client.config.entries.ViewEntry;\n+import org.apache.flink.table.client.gateway.Executor;\n+import org.apache.flink.table.client.gateway.ProgramTargetDescriptor;\n+import org.apache.flink.table.client.gateway.ResultDescriptor;\n+import org.apache.flink.table.client.gateway.SessionContext;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A customizable {@link Executor} for testing purposes.\n+ */\n+class TestingExecutor implements Executor {\n+\n+\tint numCancelCalls = 0;\n+\n+\tint numRetrieveResultChancesCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges;\n+\n+\tint numSnapshotResultCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults;\n+\n+\tint numRetrieveResultPageCalls = 0;\n+\tprivate final List<SupplierWithException<List<Row>, SqlExecutionException>> resultPages;\n+\n+\tint numUseCatalogCalls = 0;\n+\tprivate final BiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer;\n+\n+\tint numUseDatabaseCalls = 0;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer;\n+\n+\tTestingExecutor(\n+\t\t\tList<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges,\n+\t\t\tList<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults,\n+\t\t\tList<SupplierWithException<List<Row>, SqlExecutionException>> resultPages,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer) {\n+\t\tthis.resultChanges = resultChanges;\n+\t\tthis.snapshotResults = snapshotResults;\n+\t\tthis.resultPages = resultPages;\n+\t\tthis.useCatalogConsumer = useCatalogConsumer;\n+\t\tthis.useDatabaseConsumer = useDatabaseConsumer;\n+\t}\n+\n+\t@Override\n+\tpublic void cancelQuery(String sessionId, String resultId) throws SqlExecutionException {\n+\t\tnumCancelCalls++;\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(String sessionId, String resultId) throws SqlExecutionException {\n+\t\treturn resultChanges.get(Math.min(numRetrieveResultChancesCalls++, resultChanges.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {\n+\t\treturn resultPages.get(Math.min(numRetrieveResultPageCalls++, resultPages.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<Integer> snapshotResult(String sessionId, String resultId, int pageSize) throws SqlExecutionException {\n+\t\treturn snapshotResults.get(Math.min(numSnapshotResultCalls++, snapshotResults.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic void useCatalog(String sessionId, String catalogName) throws SqlExecutionException {\n+\t\tnumUseCatalogCalls++;\n+\t\tuseCatalogConsumer.accept(sessionId, catalogName);\n+\t}\n+\n+\t@Override\n+\tpublic void useDatabase(String sessionId, String databaseName) throws SqlExecutionException {\n+\t\tnumUseDatabaseCalls++;\n+\t\tuseDatabaseConsumer.accept(sessionId, databaseName);\n+\t}\n+\n+\t@Override\n+\tpublic void start() throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic String openSession(SessionContext session) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void closeSession(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, String> getSessionProperties(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void resetSessionProperties(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void setSessionProperty(String sessionId, String key, String value) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void addView(String sessionId, String name, String query) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void removeView(String sessionId, String name) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, ViewEntry> listViews(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listCatalogs(String sessionid) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listDatabases(String sessionId) throws SqlExecutionException {\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE3ODAyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTo0OFrOGFSBJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MTo0OFrOGFSBJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MTI2OA==", "bodyText": "A couple of more null return values.", "url": "https://github.com/apache/flink/pull/11699#discussion_r408191268", "createdAt": "2020-04-14T14:41:48Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.client.config.entries.ViewEntry;\n+import org.apache.flink.table.client.gateway.Executor;\n+import org.apache.flink.table.client.gateway.ProgramTargetDescriptor;\n+import org.apache.flink.table.client.gateway.ResultDescriptor;\n+import org.apache.flink.table.client.gateway.SessionContext;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A customizable {@link Executor} for testing purposes.\n+ */\n+class TestingExecutor implements Executor {\n+\n+\tint numCancelCalls = 0;\n+\n+\tint numRetrieveResultChancesCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges;\n+\n+\tint numSnapshotResultCalls = 0;\n+\tprivate final List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults;\n+\n+\tint numRetrieveResultPageCalls = 0;\n+\tprivate final List<SupplierWithException<List<Row>, SqlExecutionException>> resultPages;\n+\n+\tint numUseCatalogCalls = 0;\n+\tprivate final BiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer;\n+\n+\tint numUseDatabaseCalls = 0;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer;\n+\n+\tTestingExecutor(\n+\t\t\tList<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChanges,\n+\t\t\tList<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResults,\n+\t\t\tList<SupplierWithException<List<Row>, SqlExecutionException>> resultPages,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer,\n+\t\t\tBiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer) {\n+\t\tthis.resultChanges = resultChanges;\n+\t\tthis.snapshotResults = snapshotResults;\n+\t\tthis.resultPages = resultPages;\n+\t\tthis.useCatalogConsumer = useCatalogConsumer;\n+\t\tthis.useDatabaseConsumer = useDatabaseConsumer;\n+\t}\n+\n+\t@Override\n+\tpublic void cancelQuery(String sessionId, String resultId) throws SqlExecutionException {\n+\t\tnumCancelCalls++;\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<List<Tuple2<Boolean, Row>>> retrieveResultChanges(String sessionId, String resultId) throws SqlExecutionException {\n+\t\treturn resultChanges.get(Math.min(numRetrieveResultChancesCalls++, resultChanges.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic List<Row> retrieveResultPage(String resultId, int page) throws SqlExecutionException {\n+\t\treturn resultPages.get(Math.min(numRetrieveResultPageCalls++, resultPages.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic TypedResult<Integer> snapshotResult(String sessionId, String resultId, int pageSize) throws SqlExecutionException {\n+\t\treturn snapshotResults.get(Math.min(numSnapshotResultCalls++, snapshotResults.size() - 1)).get();\n+\t}\n+\n+\t@Override\n+\tpublic void useCatalog(String sessionId, String catalogName) throws SqlExecutionException {\n+\t\tnumUseCatalogCalls++;\n+\t\tuseCatalogConsumer.accept(sessionId, catalogName);\n+\t}\n+\n+\t@Override\n+\tpublic void useDatabase(String sessionId, String databaseName) throws SqlExecutionException {\n+\t\tnumUseDatabaseCalls++;\n+\t\tuseDatabaseConsumer.accept(sessionId, databaseName);\n+\t}\n+\n+\t@Override\n+\tpublic void start() throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic String openSession(SessionContext session) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void closeSession(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, String> getSessionProperties(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void resetSessionProperties(String sessionId) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void setSessionProperty(String sessionId, String key, String value) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void addView(String sessionId, String name, String query) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void removeView(String sessionId, String name) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, ViewEntry> listViews(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listCatalogs(String sessionid) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listDatabases(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void createTable(String sessionId, String ddl) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic void dropTable(String sessionId, String ddl) throws SqlExecutionException {\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listTables(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listUserDefinedFunctions(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listFunctions(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> listModules(String sessionId) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic TableSchema getTableSchema(String sessionId, String name) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic String explainStatement(String sessionId, String statement) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic List<String> completeStatement(String sessionId, String statement, int position) {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic ResultDescriptor executeQuery(String sessionId, String query) throws SqlExecutionException {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic ProgramTargetDescriptor executeUpdate(String sessionId, String statement) throws SqlExecutionException {\n+\t\treturn null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE4MjY2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0Mjo0OVrOGFSEHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0Mjo0OVrOGFSEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MjAyOQ==", "bodyText": "I think I would not expose the fields directly. Instead I would propose to introduce simple getters. The benefit would be that one could change the underlying implementation if need arises and adding the getters should not be much of an overhead.", "url": "https://github.com/apache/flink/pull/11699#discussion_r408192029", "createdAt": "2020-04-14T14:42:49Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutor.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.client.config.entries.ViewEntry;\n+import org.apache.flink.table.client.gateway.Executor;\n+import org.apache.flink.table.client.gateway.ProgramTargetDescriptor;\n+import org.apache.flink.table.client.gateway.ResultDescriptor;\n+import org.apache.flink.table.client.gateway.SessionContext;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * A customizable {@link Executor} for testing purposes.\n+ */\n+class TestingExecutor implements Executor {\n+\n+\tint numCancelCalls = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE4Nzc0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutorBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0Mzo0NlrOGFSHTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0Mzo0NlrOGFSHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5Mjg0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseCatalogConsumer;\n          \n          \n            \n            \tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseCatalogConsumer = (ignoredA, ignoredB) -> {};", "url": "https://github.com/apache/flink/pull/11699#discussion_r408192846", "createdAt": "2020-04-14T14:43:46Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutorBuilder.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builder for {@link TestingExecutor}.\n+ */\n+class TestingExecutorBuilder {\n+\n+\tprivate List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChangesSupplier = Collections.emptyList();\n+\tprivate List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResultsSupplier = Collections.emptyList();\n+\tprivate List<SupplierWithException<List<Row>, SqlExecutionException>> resultPagesSupplier = Collections.emptyList();\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseCatalogConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE4ODg3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutorBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0NDowMVrOGFSIGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0NDowMVrOGFSIGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MzA1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseDatabaseConsumer;\n          \n          \n            \n            \tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseDatabaseConsumer = (ignoredA, ignoredB) -> {};", "url": "https://github.com/apache/flink/pull/11699#discussion_r408193051", "createdAt": "2020-04-14T14:44:01Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutorBuilder.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builder for {@link TestingExecutor}.\n+ */\n+class TestingExecutorBuilder {\n+\n+\tprivate List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChangesSupplier = Collections.emptyList();\n+\tprivate List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResultsSupplier = Collections.emptyList();\n+\tprivate List<SupplierWithException<List<Row>, SqlExecutionException>> resultPagesSupplier = Collections.emptyList();\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseCatalogConsumer;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseDatabaseConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE5MjM0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutorBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0NDozN1rOGFSKRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0NDozN1rOGFSKRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MzYwNw==", "bodyText": "nit: line break after TestingExecutor(", "url": "https://github.com/apache/flink/pull/11699#discussion_r408193607", "createdAt": "2020-04-14T14:44:37Z", "author": {"login": "tillrohrmann"}, "path": "flink-table/flink-sql-client/src/test/java/org/apache/flink/table/client/cli/TestingExecutorBuilder.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.client.cli;\n+\n+import org.apache.flink.api.java.tuple.Tuple2;\n+import org.apache.flink.table.client.gateway.SqlExecutionException;\n+import org.apache.flink.table.client.gateway.TypedResult;\n+import org.apache.flink.types.Row;\n+import org.apache.flink.util.function.BiConsumerWithException;\n+import org.apache.flink.util.function.SupplierWithException;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builder for {@link TestingExecutor}.\n+ */\n+class TestingExecutorBuilder {\n+\n+\tprivate List<SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException>> resultChangesSupplier = Collections.emptyList();\n+\tprivate List<SupplierWithException<TypedResult<Integer>, SqlExecutionException>> snapshotResultsSupplier = Collections.emptyList();\n+\tprivate List<SupplierWithException<List<Row>, SqlExecutionException>> resultPagesSupplier = Collections.emptyList();\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseCatalogConsumer;\n+\tprivate BiConsumerWithException<String, String, SqlExecutionException> setUseDatabaseConsumer;\n+\n+\t@SafeVarargs\n+\tpublic final TestingExecutorBuilder setResultChangesSupplier(SupplierWithException<TypedResult<List<Tuple2<Boolean, Row>>>, SqlExecutionException> ... resultChangesSupplier) {\n+\t\tthis.resultChangesSupplier = Arrays.asList(resultChangesSupplier);\n+\t\treturn this;\n+\t}\n+\n+\t@SafeVarargs\n+\tpublic final TestingExecutorBuilder setSnapshotResultSupplier(SupplierWithException<TypedResult<Integer>, SqlExecutionException> ... snapshotResultsSupplier) {\n+\t\tthis.snapshotResultsSupplier = Arrays.asList(snapshotResultsSupplier);\n+\t\treturn this;\n+\t}\n+\n+\t@SafeVarargs\n+\tpublic final TestingExecutorBuilder setResultPageSupplier(SupplierWithException<List<Row>, SqlExecutionException> ... resultPageSupplier) {\n+\t\tresultPagesSupplier = Arrays.asList(resultPageSupplier);\n+\t\treturn this;\n+\t}\n+\n+\tpublic final TestingExecutorBuilder setUseCatalogConsumer(BiConsumerWithException<String, String, SqlExecutionException> useCatalogConsumer) {\n+\t\tthis.setUseCatalogConsumer = useCatalogConsumer;\n+\t\treturn this;\n+\t}\n+\n+\tpublic final TestingExecutorBuilder setUseDatabaseConsumer(BiConsumerWithException<String, String, SqlExecutionException> useDatabaseConsumer) {\n+\t\tthis.setUseDatabaseConsumer = useDatabaseConsumer;\n+\t\treturn this;\n+\t}\n+\n+\tpublic TestingExecutor build() {\n+\t\treturn new TestingExecutor(resultChangesSupplier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "901f6d4eaad62b46938337a1bbb429c04caf748d"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1709, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}