{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDU1NjM1", "number": 13834, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDozNjo1OFrOEzouEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNTozMFrOE2rZgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTc5OTg3OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDozNjo1OFrOHq_hZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTo1Mjo1MlrOHrCGaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0Mjk4MQ==", "bodyText": "final int precision = timeType.getPrecision();\n\t\tif (precision > 3) {\n\t\t\tthrow new IllegalArgumentException(\"CSV format does not support TIME type \" +\n\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 ~ 3.\");\n\t\t}\n\t\t// get number of milliseconds of the day\n\t\treturn jsonNode -> {\n\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n\t\t\tif (precision == 0) {\n\t\t\t\treturn localTime.toSecondOfDay() * 1000L;\n\t\t\t} else {\n\t\t\t\treturn (int) (localTime.toNanoOfDay() / 1000_000L);\n\t\t\t}\n\t\t};\nThrows exception in compile phase instead during runtime.\nBesides, we can also support precision 0~3.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514842981", "createdAt": "2020-10-30T04:36:58Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "diffHunk": "@@ -221,12 +221,22 @@ private int convertToDate(JsonNode jsonNode) {\n \t\treturn (int) Date.valueOf(jsonNode.asText()).toLocalDate().toEpochDay();\n \t}\n \n-\tprivate int convertToTime(JsonNode jsonNode) {\n+\tprivate CsvToRowDataConverter convertToTime(TimeType timeType) {\n+\t\tfinal int precision = timeType.getPrecision();\n \t\t// csv currently is using Time.valueOf() to parse time string\n-\t\tLocalTime localTime = Time.valueOf(jsonNode.asText()).toLocalTime();\n \t\t// TODO: FLINK-17525 support millisecond and nanosecond\n \t\t// get number of milliseconds of the day\n-\t\treturn localTime.toSecondOfDay() * 1000;\n+\t\treturn jsonNode -> {\n+\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n+\t\t\tif (precision == 3) {\n+\t\t\t\treturn localTime.toNanoOfDay() / 1000_000L;\n+\t\t\t} else if (precision == 0) {\n+\t\t\t\treturn localTime.toSecondOfDay() * 1000L;\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Csv does not support TIME type \" +\n+\t\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 or 3.\");\n+\t\t\t}\n+\t\t};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4NTIyNw==", "bodyText": "I will optimize.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514885227", "createdAt": "2020-10-30T05:52:52Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "diffHunk": "@@ -221,12 +221,22 @@ private int convertToDate(JsonNode jsonNode) {\n \t\treturn (int) Date.valueOf(jsonNode.asText()).toLocalDate().toEpochDay();\n \t}\n \n-\tprivate int convertToTime(JsonNode jsonNode) {\n+\tprivate CsvToRowDataConverter convertToTime(TimeType timeType) {\n+\t\tfinal int precision = timeType.getPrecision();\n \t\t// csv currently is using Time.valueOf() to parse time string\n-\t\tLocalTime localTime = Time.valueOf(jsonNode.asText()).toLocalTime();\n \t\t// TODO: FLINK-17525 support millisecond and nanosecond\n \t\t// get number of milliseconds of the day\n-\t\treturn localTime.toSecondOfDay() * 1000;\n+\t\treturn jsonNode -> {\n+\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n+\t\t\tif (precision == 3) {\n+\t\t\t\treturn localTime.toNanoOfDay() / 1000_000L;\n+\t\t\t} else if (precision == 0) {\n+\t\t\t\treturn localTime.toSecondOfDay() * 1000L;\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Csv does not support TIME type \" +\n+\t\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 or 3.\");\n+\t\t\t}\n+\t\t};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0Mjk4MQ=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTgwNTQ1OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDozODoxNFrOHq_lew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzoyMDozMlrOHrDoUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0NDAyNw==", "bodyText": "We should still use getInt, because we always use int to represent number of milliseconds of the day in Flink SQL internally. See Javadoc of RowData.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514844027", "createdAt": "2020-10-30T04:38:14Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java", "diffHunk": "@@ -128,7 +128,7 @@ private static RowFieldConverter createRowFieldConverter(LogicalType fieldType)\n \t\t\tcase DATE:\n \t\t\t\treturn (csvMapper, container, row, pos) -> convertDate(row.getInt(pos), container);\n \t\t\tcase TIME_WITHOUT_TIME_ZONE:\n-\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getInt(pos), container);\n+\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getLong(pos), container);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg5MTIzMA==", "bodyText": "Will overflow when supporting nanosecond precision in the future", "url": "https://github.com/apache/flink/pull/13834#discussion_r514891230", "createdAt": "2020-10-30T06:15:43Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java", "diffHunk": "@@ -128,7 +128,7 @@ private static RowFieldConverter createRowFieldConverter(LogicalType fieldType)\n \t\t\tcase DATE:\n \t\t\t\treturn (csvMapper, container, row, pos) -> convertDate(row.getInt(pos), container);\n \t\t\tcase TIME_WITHOUT_TIME_ZONE:\n-\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getInt(pos), container);\n+\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getLong(pos), container);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0NDAyNw=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMTIxNA==", "bodyText": "That's why we don't support precision > 3 for now.\nWhen the planner supports precision > 3 in the future, we can update csv format to use the higer precision data structure (maybe long or otheres).", "url": "https://github.com/apache/flink/pull/13834#discussion_r514901214", "createdAt": "2020-10-30T06:51:07Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java", "diffHunk": "@@ -128,7 +128,7 @@ private static RowFieldConverter createRowFieldConverter(LogicalType fieldType)\n \t\t\tcase DATE:\n \t\t\t\treturn (csvMapper, container, row, pos) -> convertDate(row.getInt(pos), container);\n \t\t\tcase TIME_WITHOUT_TIME_ZONE:\n-\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getInt(pos), container);\n+\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getLong(pos), container);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0NDAyNw=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkxMDI4OA==", "bodyText": "get it", "url": "https://github.com/apache/flink/pull/13834#discussion_r514910288", "createdAt": "2020-10-30T07:20:32Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java", "diffHunk": "@@ -128,7 +128,7 @@ private static RowFieldConverter createRowFieldConverter(LogicalType fieldType)\n \t\t\tcase DATE:\n \t\t\t\treturn (csvMapper, container, row, pos) -> convertDate(row.getInt(pos), container);\n \t\t\tcase TIME_WITHOUT_TIME_ZONE:\n-\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getInt(pos), container);\n+\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getLong(pos), container);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0NDAyNw=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTgzMjcwOnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDo0NDowNlrOHq_5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjozODowMlrOHr0spg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA==", "bodyText": "Why not reuse the testNullableField method?", "url": "https://github.com/apache/flink/pull/13834#discussion_r514849074", "createdAt": "2020-10-30T04:44:06Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4NjcwNw==", "bodyText": "For example, the input is \"12:12:12.232\", but the precision is 2, then the result should be \"12:12:12.23\". The existing test named testNullableField  must be modified to meet the needs of this test. But the change affects other test cases. So i add a new test methed named testFieldForTime.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514886707", "createdAt": "2020-10-30T05:58:39Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwMDQ2Ng==", "bodyText": "For such case, I think you can use the test method only validate the deserialization.\ntestField(\n\t\t\tDataType fieldType,\n\t\t\tString csvValue,\n\t\t\tObject value,\n\t\t\tConsumer<CsvRowDataDeserializationSchema.Builder> deserializationConfig,\n\t\t\tString fieldDelimiter)", "url": "https://github.com/apache/flink/pull/13834#discussion_r514900466", "createdAt": "2020-10-30T06:48:31Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk0MTY2Ng==", "bodyText": "Sorry for my carelessness, I will optimize it.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514941666", "createdAt": "2020-10-30T08:36:32Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MzgxMA==", "bodyText": "@wuchong\nthe following code\nRow actualRow = (Row) DataFormatConverters.getConverterForDataType(dataType).toExternal(deserializedRow); \nin methed\ntestField( DataType fieldType, String csvValue, Object value, Consumer<CsvRowDataDeserializationSchema.Builder> deserializationConfig, String fieldDelimiter)\nwill change TIME(n) (0<=n<=3) to  TIME(0) .Then the test will fail.\nI still use testFieldForTime().", "url": "https://github.com/apache/flink/pull/13834#discussion_r514983810", "createdAt": "2020-10-30T09:56:18Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5Njg2NQ==", "bodyText": "This works in my environment:\n\t\ttestField(\n\t\t\tTIME(3),\n\t\t\t\"12:12:12.232421\",\n\t\t\tLocalTime.parse(\"12:12:12.232\"),\n\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n\t\t\t\",\");", "url": "https://github.com/apache/flink/pull/13834#discussion_r514996865", "createdAt": "2020-10-30T10:20:43Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxNDIxNA==", "bodyText": "fix it", "url": "https://github.com/apache/flink/pull/13834#discussion_r515714214", "createdAt": "2020-11-02T02:38:02Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTgzNjI1OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDo0NDo0M1rOHq_7mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNTo1ODo1MlrOHrCMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTY4OA==", "bodyText": "Add more tests for TIME(1), TIME(2).", "url": "https://github.com/apache/flink/pull/13834#discussion_r514849688", "createdAt": "2020-10-30T04:44:43Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232421\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12.23\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg4Njc2Nw==", "bodyText": "ok", "url": "https://github.com/apache/flink/pull/13834#discussion_r514886767", "createdAt": "2020-10-30T05:58:52Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232421\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12.23\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(0),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTY4OA=="}, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNTg0MTQyOnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDo0NTo0NVrOHq__Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDo0NTo0NVrOHq__Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg1MDYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\",\");\n          \n          \n            \n            \t\t} catch (Exception e) {\n          \n          \n            \n            \t\t\tactualMessage = e.getCause().getMessage();\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tassertEquals(expectedMessage, actualMessage);\n          \n          \n            \n            \t\t\t\t\",\");\n          \n          \n            \n            \t\t\t\tfail(\"Exception should be thrown.\");\n          \n          \n            \n            \t\t} catch (Exception e) {\n          \n          \n            \n            \t\t\tassertEquals(expectedMessage, e.getCause().getMessage());\n          \n          \n            \n            \t\t}", "url": "https://github.com/apache/flink/pull/13834#discussion_r514850603", "createdAt": "2020-10-30T04:45:45Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232421\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12.23\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(0),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\n+\t\tint precision = 2;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 or 3.\", precision);\n+\t\tString actualMessage = null;\n+\t\ttry {\n+\t\t\ttestFieldForTime(\n+\t\t\t\tTIME(precision),\n+\t\t\t\t\"12:12:12.23\",\n+\t\t\t\t\"12:12:12\",\n+\t\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\t\",\");\n+\t\t} catch (Exception e) {\n+\t\t\tactualMessage = e.getCause().getMessage();\n+\t\t}\n+\t\tassertEquals(expectedMessage, actualMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY1OTE0OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToyNjo0MVrOHvltZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozNzoyN1rOHxJfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2Mjk1MA==", "bodyText": "This is never used.", "url": "https://github.com/apache/flink/pull/13834#discussion_r519662950", "createdAt": "2020-11-09T09:26:41Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -320,6 +339,34 @@ private void testField(\n \t\tassertEquals(expectedCsv, new String(serializedRow));\n \t}\n \n+\tprivate void testFieldForTime(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5Nzg1OQ==", "bodyText": "i will clean up", "url": "https://github.com/apache/flink/pull/13834#discussion_r521297859", "createdAt": "2020-11-11T11:37:27Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -320,6 +339,34 @@ private void testField(\n \t\tassertEquals(expectedCsv, new String(serializedRow));\n \t}\n \n+\tprivate void testFieldForTime(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2Mjk1MA=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY2MTUzOnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToyNzoxNVrOHvlu5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozNzozOVrOHxJgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MzMzMw==", "bodyText": "Why not hard code the exception message?", "url": "https://github.com/apache/flink/pull/13834#discussion_r519663333", "createdAt": "2020-11-09T09:27:15Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\tint precision = 5;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 ~ 3.\", precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5Nzk0MQ==", "bodyText": "fix it", "url": "https://github.com/apache/flink/pull/13834#discussion_r521297941", "createdAt": "2020-11-11T11:37:39Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\tint precision = 5;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 ~ 3.\", precision);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MzMzMw=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY4MDcyOnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozMTo0MFrOHvl6iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozMjowNlrOHxJVcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjMxMw==", "bodyText": "Could you add a comment \"this is for rounding off values out of precision\"?", "url": "https://github.com/apache/flink/pull/13834#discussion_r519666313", "createdAt": "2020-11-09T09:31:40Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "diffHunk": "@@ -221,12 +221,27 @@ private int convertToDate(JsonNode jsonNode) {\n \t\treturn (int) Date.valueOf(jsonNode.asText()).toLocalDate().toEpochDay();\n \t}\n \n-\tprivate int convertToTime(JsonNode jsonNode) {\n+\tprivate CsvToRowDataConverter convertToTime(TimeType timeType) {\n+\t\tfinal int precision = timeType.getPrecision();\n \t\t// csv currently is using Time.valueOf() to parse time string\n-\t\tLocalTime localTime = Time.valueOf(jsonNode.asText()).toLocalTime();\n \t\t// TODO: FLINK-17525 support millisecond and nanosecond\n \t\t// get number of milliseconds of the day\n-\t\treturn localTime.toSecondOfDay() * 1000;\n+\t\tif (precision > 3) {\n+\t\t\tthrow new IllegalArgumentException(\"Csv does not support TIME type \" +\n+\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 ~ 3.\");\n+\t\t}\n+\t\treturn jsonNode -> {\n+\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n+\t\t\tint mills = (int) (localTime.toNanoOfDay() / 1000_000L);\n+\t\t\tif (precision == 2) {\n+\t\t\t\tmills = mills / 10 * 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5NTIxOA==", "bodyText": "ok", "url": "https://github.com/apache/flink/pull/13834#discussion_r521295218", "createdAt": "2020-11-11T11:32:06Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "diffHunk": "@@ -221,12 +221,27 @@ private int convertToDate(JsonNode jsonNode) {\n \t\treturn (int) Date.valueOf(jsonNode.asText()).toLocalDate().toEpochDay();\n \t}\n \n-\tprivate int convertToTime(JsonNode jsonNode) {\n+\tprivate CsvToRowDataConverter convertToTime(TimeType timeType) {\n+\t\tfinal int precision = timeType.getPrecision();\n \t\t// csv currently is using Time.valueOf() to parse time string\n-\t\tLocalTime localTime = Time.valueOf(jsonNode.asText()).toLocalTime();\n \t\t// TODO: FLINK-17525 support millisecond and nanosecond\n \t\t// get number of milliseconds of the day\n-\t\treturn localTime.toSecondOfDay() * 1000;\n+\t\tif (precision > 3) {\n+\t\t\tthrow new IllegalArgumentException(\"Csv does not support TIME type \" +\n+\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 ~ 3.\");\n+\t\t}\n+\t\treturn jsonNode -> {\n+\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n+\t\t\tint mills = (int) (localTime.toNanoOfDay() / 1000_000L);\n+\t\t\tif (precision == 2) {\n+\t\t\t\tmills = mills / 10 * 10;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjMxMw=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY4NDY1OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozMjo0NFrOHvl89A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMTozNzo1OFrOHxJgoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjkzMg==", "bodyText": "This will not fail. Because it is not TIME(5).\nYou should add fail(); if you want to verify it should fail.", "url": "https://github.com/apache/flink/pull/13834#discussion_r519666932", "createdAt": "2020-11-09T09:32:44Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\tint precision = 5;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 ~ 3.\", precision);\n+\t\ttry {\n+\t\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI5ODA4MA==", "bodyText": "fix it", "url": "https://github.com/apache/flink/pull/13834#discussion_r521298080", "createdAt": "2020-11-11T11:37:58Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\tint precision = 5;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 ~ 3.\", precision);\n+\t\ttry {\n+\t\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjkzMg=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzY5NjAwOnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNTozMFrOHvmD1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQwMjowMDoyMVrOHxmTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ==", "bodyText": "All of these only test the deserialization. We should also add tests for serialization. I think we can use testNullableField for this purpose.\nBesides, we can rename method testField(fieldType, csvValue, value, deserializationConfig, fieldDelimiter) to testFieldSerialization to be more specific.", "url": "https://github.com/apache/flink/pull/13834#discussion_r519668695", "createdAt": "2020-11-09T09:35:30Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwMjkyNQ==", "bodyText": "rename method  testField(fieldType, csvValue, value, deserializationConfig, fieldDelimiter) to testFieldSerialization ?  or testFieldDeserialization ?", "url": "https://github.com/apache/flink/pull/13834#discussion_r521302925", "createdAt": "2020-11-11T11:47:37Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxMTk2Mw==", "bodyText": "The reason for not using testNullableField  can be seen in our previous dialogue.", "url": "https://github.com/apache/flink/pull/13834#discussion_r521311963", "createdAt": "2020-11-11T12:05:38Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0MzM5MA==", "bodyText": "Rename to testFieldDeserialization.", "url": "https://github.com/apache/flink/pull/13834#discussion_r521343390", "createdAt": "2020-11-11T13:03:53Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM0MzgxNQ==", "bodyText": "We only use testNullableField to test conversion without precision loss.", "url": "https://github.com/apache/flink/pull/13834#discussion_r521343815", "createdAt": "2020-11-11T13:04:32Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTc2OTgwNA==", "bodyText": "done", "url": "https://github.com/apache/flink/pull/13834#discussion_r521769804", "createdAt": "2020-11-12T02:00:21Z", "author": {"login": "pyscala"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ=="}, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4981, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}