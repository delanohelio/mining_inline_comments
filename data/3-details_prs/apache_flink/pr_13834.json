{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDU1NjM1", "number": 13834, "title": "[FLINK-19872][csv] Fix CSV format is unable to parse millisecond for TIME type", "bodyText": "What is the purpose of the change\nSupport to parse millisecond for TIME type in CSV format\nBrief change log\nSupport to parse millisecond for TIME type in CSV format\nVerifying this change\nThis change added tests and can be verified as follows:\ntestSerializeDeserializeForTime() \nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): ( no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)", "createdAt": "2020-10-29T06:42:52Z", "url": "https://github.com/apache/flink/pull/13834", "merged": true, "mergeCommit": {"oid": "e86b40909dcd4a0f53fa900989cf2655ff8f6c19"}, "closed": true, "closedAt": "2020-11-12T07:50:34Z", "author": {"login": "pyscala"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXfTl4gFqTUyMDM3MTgzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbp0eggBqjM5ODY1ODk1MDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMzcxODMw", "url": "https://github.com/apache/flink/pull/13834#pullrequestreview-520371830", "createdAt": "2020-10-30T04:36:58Z", "commit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDozNjo1OFrOHq_hZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNDo0NTo0NVrOHq__Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0Mjk4MQ==", "bodyText": "final int precision = timeType.getPrecision();\n\t\tif (precision > 3) {\n\t\t\tthrow new IllegalArgumentException(\"CSV format does not support TIME type \" +\n\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 ~ 3.\");\n\t\t}\n\t\t// get number of milliseconds of the day\n\t\treturn jsonNode -> {\n\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n\t\t\tif (precision == 0) {\n\t\t\t\treturn localTime.toSecondOfDay() * 1000L;\n\t\t\t} else {\n\t\t\t\treturn (int) (localTime.toNanoOfDay() / 1000_000L);\n\t\t\t}\n\t\t};\nThrows exception in compile phase instead during runtime.\nBesides, we can also support precision 0~3.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514842981", "createdAt": "2020-10-30T04:36:58Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "diffHunk": "@@ -221,12 +221,22 @@ private int convertToDate(JsonNode jsonNode) {\n \t\treturn (int) Date.valueOf(jsonNode.asText()).toLocalDate().toEpochDay();\n \t}\n \n-\tprivate int convertToTime(JsonNode jsonNode) {\n+\tprivate CsvToRowDataConverter convertToTime(TimeType timeType) {\n+\t\tfinal int precision = timeType.getPrecision();\n \t\t// csv currently is using Time.valueOf() to parse time string\n-\t\tLocalTime localTime = Time.valueOf(jsonNode.asText()).toLocalTime();\n \t\t// TODO: FLINK-17525 support millisecond and nanosecond\n \t\t// get number of milliseconds of the day\n-\t\treturn localTime.toSecondOfDay() * 1000;\n+\t\treturn jsonNode -> {\n+\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n+\t\t\tif (precision == 3) {\n+\t\t\t\treturn localTime.toNanoOfDay() / 1000_000L;\n+\t\t\t} else if (precision == 0) {\n+\t\t\t\treturn localTime.toSecondOfDay() * 1000L;\n+\t\t\t} else {\n+\t\t\t\tthrow new IllegalArgumentException(\"Csv does not support TIME type \" +\n+\t\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 or 3.\");\n+\t\t\t}\n+\t\t};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0NDAyNw==", "bodyText": "We should still use getInt, because we always use int to represent number of milliseconds of the day in Flink SQL internally. See Javadoc of RowData.", "url": "https://github.com/apache/flink/pull/13834#discussion_r514844027", "createdAt": "2020-10-30T04:38:14Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/RowDataToCsvConverters.java", "diffHunk": "@@ -128,7 +128,7 @@ private static RowFieldConverter createRowFieldConverter(LogicalType fieldType)\n \t\t\tcase DATE:\n \t\t\t\treturn (csvMapper, container, row, pos) -> convertDate(row.getInt(pos), container);\n \t\t\tcase TIME_WITHOUT_TIME_ZONE:\n-\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getInt(pos), container);\n+\t\t\t\treturn (csvMapper, container, row, pos) -> convertTime(row.getLong(pos), container);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTA3NA==", "bodyText": "Why not reuse the testNullableField method?", "url": "https://github.com/apache/flink/pull/13834#discussion_r514849074", "createdAt": "2020-10-30T04:44:06Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg0OTY4OA==", "bodyText": "Add more tests for TIME(1), TIME(2).", "url": "https://github.com/apache/flink/pull/13834#discussion_r514849688", "createdAt": "2020-10-30T04:44:43Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232421\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12.23\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(0),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDg1MDYwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\",\");\n          \n          \n            \n            \t\t} catch (Exception e) {\n          \n          \n            \n            \t\t\tactualMessage = e.getCause().getMessage();\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tassertEquals(expectedMessage, actualMessage);\n          \n          \n            \n            \t\t\t\t\",\");\n          \n          \n            \n            \t\t\t\tfail(\"Exception should be thrown.\");\n          \n          \n            \n            \t\t} catch (Exception e) {\n          \n          \n            \n            \t\t\tassertEquals(expectedMessage, e.getCause().getMessage());\n          \n          \n            \n            \t\t}", "url": "https://github.com/apache/flink/pull/13834#discussion_r514850603", "createdAt": "2020-10-30T04:45:45Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -109,6 +109,54 @@ public void testSerializeDeserialize() throws Exception {\n \t\t\tnew byte[] {107, 3, 11});\n \t}\n \n+\t@Test\n+\tpublic void testSerializeDeserializeForTime() throws Exception {\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.232421\",\n+\t\t\t\"12:12:12.232\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(3),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12.23\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\t\ttestFieldForTime(\n+\t\t\tTIME(0),\n+\t\t\t\"12:12:12.23\",\n+\t\t\t\"12:12:12\",\n+\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\",\");\n+\n+\t\tint precision = 2;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 or 3.\", precision);\n+\t\tString actualMessage = null;\n+\t\ttry {\n+\t\t\ttestFieldForTime(\n+\t\t\t\tTIME(precision),\n+\t\t\t\t\"12:12:12.23\",\n+\t\t\t\t\"12:12:12\",\n+\t\t\t\t(deserSchema) -> deserSchema.setNullLiteral(\"null\"),\n+\t\t\t\t(serSchema) -> serSchema.setNullLiteral(\"null\"),\n+\t\t\t\t\",\");\n+\t\t} catch (Exception e) {\n+\t\t\tactualMessage = e.getCause().getMessage();\n+\t\t}\n+\t\tassertEquals(expectedMessage, actualMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3792d96b470ee584cd60265925bf578d65fffa64"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MDYzODgx", "url": "https://github.com/apache/flink/pull/13834#pullrequestreview-526063881", "createdAt": "2020-11-09T09:26:41Z", "commit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOToyNjo0MVrOHvltZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTozNTozMFrOHvmD1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2Mjk1MA==", "bodyText": "This is never used.", "url": "https://github.com/apache/flink/pull/13834#discussion_r519662950", "createdAt": "2020-11-09T09:26:41Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -320,6 +339,34 @@ private void testField(\n \t\tassertEquals(expectedCsv, new String(serializedRow));\n \t}\n \n+\tprivate void testFieldForTime(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2MzMzMw==", "bodyText": "Why not hard code the exception message?", "url": "https://github.com/apache/flink/pull/13834#discussion_r519663333", "createdAt": "2020-11-09T09:27:15Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\tint precision = 5;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 ~ 3.\", precision);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjMxMw==", "bodyText": "Could you add a comment \"this is for rounding off values out of precision\"?", "url": "https://github.com/apache/flink/pull/13834#discussion_r519666313", "createdAt": "2020-11-09T09:31:40Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/main/java/org/apache/flink/formats/csv/CsvToRowDataConverters.java", "diffHunk": "@@ -221,12 +221,27 @@ private int convertToDate(JsonNode jsonNode) {\n \t\treturn (int) Date.valueOf(jsonNode.asText()).toLocalDate().toEpochDay();\n \t}\n \n-\tprivate int convertToTime(JsonNode jsonNode) {\n+\tprivate CsvToRowDataConverter convertToTime(TimeType timeType) {\n+\t\tfinal int precision = timeType.getPrecision();\n \t\t// csv currently is using Time.valueOf() to parse time string\n-\t\tLocalTime localTime = Time.valueOf(jsonNode.asText()).toLocalTime();\n \t\t// TODO: FLINK-17525 support millisecond and nanosecond\n \t\t// get number of milliseconds of the day\n-\t\treturn localTime.toSecondOfDay() * 1000;\n+\t\tif (precision > 3) {\n+\t\t\tthrow new IllegalArgumentException(\"Csv does not support TIME type \" +\n+\t\t\t\t\"with precision: \" + precision + \", it only supports precision 0 ~ 3.\");\n+\t\t}\n+\t\treturn jsonNode -> {\n+\t\t\tLocalTime localTime = LocalTime.parse(jsonNode.asText());\n+\t\t\tint mills = (int) (localTime.toNanoOfDay() / 1000_000L);\n+\t\t\tif (precision == 2) {\n+\t\t\t\tmills = mills / 10 * 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2NjkzMg==", "bodyText": "This will not fail. Because it is not TIME(5).\nYou should add fail(); if you want to verify it should fail.", "url": "https://github.com/apache/flink/pull/13834#discussion_r519666932", "createdAt": "2020-11-09T09:32:44Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\tint precision = 5;\n+\t\tString expectedMessage = String.format(\"Csv does not support TIME type with precision: %d, it only supports precision 0 ~ 3.\", precision);\n+\t\ttry {\n+\t\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY2ODY5NQ==", "bodyText": "All of these only test the deserialization. We should also add tests for serialization. I think we can use testNullableField for this purpose.\nBesides, we can rename method testField(fieldType, csvValue, value, deserializationConfig, fieldDelimiter) to testFieldSerialization to be more specific.", "url": "https://github.com/apache/flink/pull/13834#discussion_r519668695", "createdAt": "2020-11-09T09:35:30Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-csv/src/test/java/org/apache/flink/formats/csv/CsvRowDataSerDeSchemaTest.java", "diffHunk": "@@ -150,6 +151,24 @@ public void testSerializeDeserializeCustomizedProperties() throws Exception {\n \t\t\tdeserConfig,\n \t\t\t\";\");\n \t\ttestField(STRING(), \"null\", \"null\", serConfig, deserConfig, \";\"); // string because null literal has not been set\n+\t\ttestField(TIME(3), \"12:12:12.232\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.232342\", LocalTime.parse(\"12:12:12.232\") , deserConfig , \";\");\n+\t\ttestField(TIME(3), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.23\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.232312\", LocalTime.parse(\"12:12:12.23\") , deserConfig , \";\");\n+\t\ttestField(TIME(2), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12.2235\", LocalTime.parse(\"12:12:12.2\") , deserConfig , \";\");\n+\t\ttestField(TIME(1), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");\n+\t\ttestField(TIME(0), \"12:12:12.45\", LocalTime.parse(\"12:12:12\") , deserConfig , \";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc0a2a29d0fba59d7b7769353bd4d91aa1307ecb"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NzAwNTc0", "url": "https://github.com/apache/flink/pull/13834#pullrequestreview-528700574", "createdAt": "2020-11-12T03:00:01Z", "commit": {"oid": "63f6644db59a1a512ceef894317b3bf29355b7a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dd7a167a257fe6379340600a53ab4262c35f62f", "author": {"user": {"login": "pyscala", "name": "fangliang"}}, "url": "https://github.com/apache/flink/commit/6dd7a167a257fe6379340600a53ab4262c35f62f", "committedDate": "2020-11-12T03:14:20Z", "message": "[FLINK-19872][csv] Fix CSV format is unable to parse millisecond for TIME type\n\nThis closes #13834"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63f6644db59a1a512ceef894317b3bf29355b7a0", "author": {"user": {"login": "pyscala", "name": "fangliang"}}, "url": "https://github.com/apache/flink/commit/63f6644db59a1a512ceef894317b3bf29355b7a0", "committedDate": "2020-11-12T01:57:47Z", "message": "bug fix"}, "afterCommit": {"oid": "6dd7a167a257fe6379340600a53ab4262c35f62f", "author": {"user": {"login": "pyscala", "name": "fangliang"}}, "url": "https://github.com/apache/flink/commit/6dd7a167a257fe6379340600a53ab4262c35f62f", "committedDate": "2020-11-12T03:14:20Z", "message": "[FLINK-19872][csv] Fix CSV format is unable to parse millisecond for TIME type\n\nThis closes #13834"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4932, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}