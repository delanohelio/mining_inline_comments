{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTE0MzU3", "number": 12072, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODowMDoyOVrOD7IKzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzowMjozNFrOD7U3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzI2NDEzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODowMDoyOVrOGTRAYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODo1Mzo1N1rOGTS8Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1NDc1Mg==", "bodyText": "I guess the reason of not using Optional.flatMap was IOException thrown from RecordDeserializer.getUnconsumedBuffer.\nThe root cause of that IOException is DataOutputSerializer wrapping with it OOMs and RuntimeExceptions.\nSince the resulting IOException is never recovered or analyzed and originally it's RuntimeException I'd consider wrap IOException and use flatMap.", "url": "https://github.com/apache/flink/pull/12072#discussion_r422854752", "createdAt": "2020-05-11T08:00:29Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "diffHunk": "@@ -210,12 +210,15 @@ public int getInputIndex() {\n \t\t\tfinal InputChannel channel = checkpointedInputGate.getChannel(channelIndex);\n \n \t\t\t// Assumption for retrieving buffers = one concurrent checkpoint\n-\t\t\trecordDeserializers[channelIndex].getUnconsumedBuffer().ifPresent(buffer ->\n-\t\t\t\tchannelStateWriter.addInputData(\n-\t\t\t\t\tcheckpointId,\n-\t\t\t\t\tchannel.getChannelInfo(),\n-\t\t\t\t\tChannelStateWriter.SEQUENCE_NUMBER_UNKNOWN,\n-\t\t\t\t\tbuffer));\n+\t\t\tRecordDeserializer<?> deserializer = recordDeserializers[channelIndex];\n+\t\t\tif (deserializer != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9046a584b295d9b431dd0b34a86dbdac89603365"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg4NjQ3OQ==", "bodyText": "Yes, I'm not a big fan of using IOExceptions everywhere, especially for unrecoverable issues. So your suggestion makes lots of sense.\nBut I'd also like to avoid larger refactorings right now (and DataOutputSerializer is used at various places), when it can be easily avoided as above. I'm assuming the quest for a more functional style takes a long time with the current exception handling as is.", "url": "https://github.com/apache/flink/pull/12072#discussion_r422886479", "createdAt": "2020-05-11T08:53:57Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInput.java", "diffHunk": "@@ -210,12 +210,15 @@ public int getInputIndex() {\n \t\t\tfinal InputChannel channel = checkpointedInputGate.getChannel(channelIndex);\n \n \t\t\t// Assumption for retrieving buffers = one concurrent checkpoint\n-\t\t\trecordDeserializers[channelIndex].getUnconsumedBuffer().ifPresent(buffer ->\n-\t\t\t\tchannelStateWriter.addInputData(\n-\t\t\t\t\tcheckpointId,\n-\t\t\t\t\tchannel.getChannelInfo(),\n-\t\t\t\t\tChannelStateWriter.SEQUENCE_NUMBER_UNKNOWN,\n-\t\t\t\t\tbuffer));\n+\t\t\tRecordDeserializer<?> deserializer = recordDeserializers[channelIndex];\n+\t\t\tif (deserializer != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1NDc1Mg=="}, "originalCommit": {"oid": "9046a584b295d9b431dd0b34a86dbdac89603365"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzI4OTk1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODowODowMlrOGTRQgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODowODowMlrOGTRQgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg1ODg4Mg==", "bodyText": "1 -> numInputChannels ?", "url": "https://github.com/apache/flink/pull/12072#discussion_r422858882", "createdAt": "2020-05-11T08:08:02Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInputTest.java", "diffHunk": "@@ -106,6 +111,45 @@ public void testNoDataProcessedAfterCheckpointBarrier() throws Exception {\n \t\tassertEquals(0, output.getNumberOfEmittedRecords());\n \t}\n \n+\t@Test\n+\tpublic void testSnapshotAfterEndOfPartition() throws Exception {\n+\t\tVerifyRecordsDataOutput<Long> output = new VerifyRecordsDataOutput<>();\n+\t\tLongSerializer inSerializer = LongSerializer.INSTANCE;\n+\t\tint numInputChannels = 1;\n+\t\tStreamTestSingleInputGate<Long> inputGate = new StreamTestSingleInputGate<>(numInputChannels, 0, inSerializer, 1024);\n+\t\tTestRecordDeserializer[] deserializers = IntStream.range(0, numInputChannels)\n+\t\t\t.mapToObj(index -> new TestRecordDeserializer(ioManager.getSpillingDirectoriesPaths()))\n+\t\t\t.toArray(TestRecordDeserializer[]::new);\n+\t\tStreamTaskNetworkInput<Long> input = new StreamTaskNetworkInput<>(\n+\t\t\tnew CheckpointedInputGate(\n+\t\t\t\tinputGate.getInputGate(),\n+\t\t\t\tnew CheckpointBarrierUnaligner(\n+\t\t\t\t\tnew int[] { 1 },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9046a584b295d9b431dd0b34a86dbdac89603365"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzMwMDQ3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInputTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODoxMDo0OVrOGTRWpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwODoxMDo0OVrOGTRWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg2MDQ1Mg==", "bodyText": "Extracting 0 to channelId would make the test a bit more readable.", "url": "https://github.com/apache/flink/pull/12072#discussion_r422860452", "createdAt": "2020-05-11T08:10:49Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/StreamTaskNetworkInputTest.java", "diffHunk": "@@ -106,6 +111,45 @@ public void testNoDataProcessedAfterCheckpointBarrier() throws Exception {\n \t\tassertEquals(0, output.getNumberOfEmittedRecords());\n \t}\n \n+\t@Test\n+\tpublic void testSnapshotAfterEndOfPartition() throws Exception {\n+\t\tVerifyRecordsDataOutput<Long> output = new VerifyRecordsDataOutput<>();\n+\t\tLongSerializer inSerializer = LongSerializer.INSTANCE;\n+\t\tint numInputChannels = 1;\n+\t\tStreamTestSingleInputGate<Long> inputGate = new StreamTestSingleInputGate<>(numInputChannels, 0, inSerializer, 1024);\n+\t\tTestRecordDeserializer[] deserializers = IntStream.range(0, numInputChannels)\n+\t\t\t.mapToObj(index -> new TestRecordDeserializer(ioManager.getSpillingDirectoriesPaths()))\n+\t\t\t.toArray(TestRecordDeserializer[]::new);\n+\t\tStreamTaskNetworkInput<Long> input = new StreamTaskNetworkInput<>(\n+\t\t\tnew CheckpointedInputGate(\n+\t\t\t\tinputGate.getInputGate(),\n+\t\t\t\tnew CheckpointBarrierUnaligner(\n+\t\t\t\t\tnew int[] { 1 },\n+\t\t\t\t\tChannelStateWriter.NO_OP,\n+\t\t\t\t\t\"test\",\n+\t\t\t\t\tnew DummyCheckpointInvokable())),\n+\t\t\tinSerializer,\n+\t\t\tnew StatusWatermarkValve(1, output),\n+\t\t\t0,\n+\t\t\tdeserializers);\n+\n+\t\tinputGate.sendEvent(new CheckpointBarrier(0, 0, CheckpointOptions.forCheckpointWithDefaultLocation()), 0);\n+\t\tinputGate.sendElement(new StreamRecord<>(42L), 0);\n+\n+\t\tassertHasNextElement(input, output);\n+\t\tassertHasNextElement(input, output);\n+\t\tassertEquals(1, output.getNumberOfEmittedRecords());\n+\n+\t\t// send EndOfPartitionEvent and ensure that deserializer has been released\n+\t\tinputGate.sendEvent(EndOfPartitionEvent.INSTANCE, 0);\n+\t\tinput.emitNext(output);\n+\t\tassertNull(deserializers[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9046a584b295d9b431dd0b34a86dbdac89603365"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTMwODY2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1MzozMVrOGTk28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1MzozMVrOGTk28w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MDAxOQ==", "bodyText": "remove this code and add a //TODO: use readView.notifyPriorityEvent for local channels comment?", "url": "https://github.com/apache/flink/pull/12072#discussion_r423180019", "createdAt": "2020-05-11T16:53:31Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -127,10 +127,10 @@ public void readRecoveredState(ChannelStateReader stateReader) throws IOExceptio\n \t@Override\n \tpublic boolean add(BufferConsumer bufferConsumer, boolean isPriorityEvent) throws IOException {\n \t\tif (isPriorityEvent) {\n-\t\t\tif (readView != null && readView.notifyPriorityEvent(bufferConsumer)) {\n-\t\t\t\tbufferConsumer.close();\n-\t\t\t\treturn true;\n-\t\t\t}\n+//\t\t\tif (readView != null && readView.notifyPriorityEvent(bufferConsumer)) {\n+//\t\t\t\tbufferConsumer.close();\n+//\t\t\t\treturn true;\n+//\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a282fb5a3b1b8c63e0b087d0a29068d8f22096"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTMxOTAwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo1NjowNFrOGTk9cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToxODoxMVrOGTp6wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MTY4MQ==", "bodyText": "&& buffer.isBuffer()?", "url": "https://github.com/apache/flink/pull/12072#discussion_r423181681", "createdAt": "2020-05-11T16:56:04Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannel.java", "diffHunk": "@@ -196,9 +208,17 @@ public void run() {\n \t\t\t}\n \t\t}\n \n-\t\tnumBytesIn.inc(next.buffer().getSize());\n+\t\tBuffer buffer = next.buffer();\n+\t\tCheckpointBarrier notifyReceivedBarrier = parseCheckpointBarrierOrNull(buffer);\n+\t\tif (notifyReceivedBarrier != null) {\n+\t\t\treceivedCheckpointId = notifyReceivedBarrier.getId();\n+\t\t} else if (receivedCheckpointId < lastRequestedCheckpointId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d42f2dd006e6c7344453c35bcc8d0422e0fb3ff"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2MjkxNA==", "bodyText": "Oh darn; how the hell did that slip through :/", "url": "https://github.com/apache/flink/pull/12072#discussion_r423262914", "createdAt": "2020-05-11T19:18:11Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannel.java", "diffHunk": "@@ -196,9 +208,17 @@ public void run() {\n \t\t\t}\n \t\t}\n \n-\t\tnumBytesIn.inc(next.buffer().getSize());\n+\t\tBuffer buffer = next.buffer();\n+\t\tCheckpointBarrier notifyReceivedBarrier = parseCheckpointBarrierOrNull(buffer);\n+\t\tif (notifyReceivedBarrier != null) {\n+\t\t\treceivedCheckpointId = notifyReceivedBarrier.getId();\n+\t\t} else if (receivedCheckpointId < lastRequestedCheckpointId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4MTY4MQ=="}, "originalCommit": {"oid": "8d42f2dd006e6c7344453c35bcc8d0422e0fb3ff"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTM0NTQzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzowMjozNFrOGTlN1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzowMjozNFrOGTlN1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE4NTg3OA==", "bodyText": "add maybe one more buffer and some events, like EndOfPartitionEvent at the end?", "url": "https://github.com/apache/flink/pull/12072#discussion_r423185878", "createdAt": "2020-05-11T17:02:34Z", "author": {"login": "pnowojski"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/LocalInputChannelTest.java", "diffHunk": "@@ -448,6 +455,36 @@ public void testUnblockReleasedChannel() throws Exception {\n \t\tlocalChannel.resumeConsumption();\n \t}\n \n+\t@Test\n+\tpublic void testCheckpointingInflightData() throws Exception {\n+\t\tSingleInputGate inputGate = new SingleInputGateBuilder().build();\n+\t\tList<Buffer> receivedBuffers = new ArrayList<>();\n+\t\tinputGate.registerBufferReceivedListener(new BufferReceivedListener() {\n+\t\t\t@Override\n+\t\t\tpublic void notifyBufferReceived(Buffer buffer, InputChannelInfo channelInfo) {\n+\t\t\t\treceivedBuffers.add(buffer);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void notifyBarrierReceived(CheckpointBarrier barrier, InputChannelInfo channelInfo) {}\n+\t\t});\n+\n+\t\tResultSubpartitionView subpartitionView = createResultSubpartitionView(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d42f2dd006e6c7344453c35bcc8d0422e0fb3ff"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1392, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}