{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MzgwMzc3", "number": 13141, "title": "[FLINK-18852] Fix StreamScan doesn't inherit parallelism from input in legacy planner", "bodyText": "\u2026legacy planner\nWhat is the purpose of the change\nCurrently in legacy planner, StreamScan don't inherit parallelism from input, which is unexpected.\nThis PR will fix it.\nBrief change log\nFix StreamScan parallelism\nVerifying this change\nThis change is verified through UT (TableSourceITCase#testStreamScanParallelism)\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): ( no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-08-13T13:19:49Z", "url": "https://github.com/apache/flink/pull/13141", "merged": true, "mergeCommit": {"oid": "fccf7ee03b3653fc91ef49d023bc2e316f2cda0f"}, "closed": true, "closedAt": "2020-09-02T04:30:32Z", "author": {"login": "liupc"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-uJyxgFqTQ2NzMyMzUwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEj-cggBqjM3MTM4MjMyOTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzIzNTA2", "url": "https://github.com/apache/flink/pull/13141#pullrequestreview-467323506", "createdAt": "2020-08-14T05:55:23Z", "commit": {"oid": "ed47271c426abff4426ccf2d0fd5858e6f3d8390"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNTo1NToyM1rOHAocog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNTo1NToyM1rOHAocog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQyNDczOA==", "bodyText": "use new methods instead of depreacted methods\nuse DDL to register a table (StreamTableSourceScan path). registerTableSourceInternal is a hack way.\nWe may need to support parallelism property for the COLLECTION source (TestCollectionTableFactory).\n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                val table = env.fromElements[String]()\n          \n          \n            \n                  .setParallelism(1)\n          \n          \n            \n                  .toTable(tEnv, 'a)\n          \n          \n            \n            \n          \n          \n            \n                tEnv.registerTable(\"MyTable1\", table)\n          \n          \n            \n                val parallelism = tEnv.scan(\"MyTable1\")\n          \n          \n            \n                  .toAppendStream[String]\n          \n          \n            \n                  .getParallelism\n          \n          \n            \n            \n          \n          \n            \n                assertEquals(1, parallelism)\n          \n          \n            \n            \n          \n          \n            \n                // test StreamTableSourceScan\n          \n          \n            \n                val tableSource = new StreamTableSource[String]() {\n          \n          \n            \n            \n          \n          \n            \n                  override def getDataStream(execEnv: JExecEnv): DataStream[String] = {\n          \n          \n            \n                    execEnv.fromElements[String](\"blabla\")\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  override def getTableSchema: TableSchema = {\n          \n          \n            \n                    new TableSchema(Array(\"a\"), Array(Types.STRING()))\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  override def getReturnType: TypeInformation[String] = {\n          \n          \n            \n                    Types.STRING()\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                tEnv.asInstanceOf[TableEnvironmentInternal].registerTableSourceInternal(\"MyTable2\", tableSource)\n          \n          \n            \n                val parallelism2 = tEnv.scan(\"MyTable2\")\n          \n          \n            \n                  .toAppendStream[String]\n          \n          \n            \n                  .getParallelism\n          \n          \n            \n            \n          \n          \n            \n                assertEquals(1, parallelism2)\n          \n          \n            \n               tEnv.createTemporaryView(\"MyTable1\", table)\n          \n          \n            \n                val parallelism = tEnv.from(\"MyTable1\")\n          \n          \n            \n                  .toAppendStream[String]\n          \n          \n            \n                  .parallelism\n          \n          \n            \n            \n          \n          \n            \n                assertEquals(1, parallelism)\n          \n          \n            \n            \n          \n          \n            \n                // test StreamTableSourceScan\n          \n          \n            \n                val createTableStmt =\n          \n          \n            \n                  \"\"\"\n          \n          \n            \n                    |CREATE TEMPORARY TABLE MyTable2 (\n          \n          \n            \n                    |  str varchar\n          \n          \n            \n                    |) with (\n          \n          \n            \n                    |  'connector' = 'COLLECTION',\n          \n          \n            \n                    |  'is-bounded' = 'false',\n          \n          \n            \n                    | 'parallelism' = '1'\n          \n          \n            \n                    |)\n          \n          \n            \n                  \"\"\".stripMargin\n          \n          \n            \n                tEnv.executeSql(createTableStmt)\n          \n          \n            \n            \n          \n          \n            \n                val parallelism2 = tEnv.from(\"MyTable2\")\n          \n          \n            \n                  .toAppendStream[String]\n          \n          \n            \n                  .parallelism\n          \n          \n            \n            \n          \n          \n            \n                assertEquals(1, parallelism2)", "url": "https://github.com/apache/flink/pull/13141#discussion_r470424738", "createdAt": "2020-08-14T05:55:23Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner/src/test/scala/org/apache/flink/table/runtime/stream/table/TableSourceITCase.scala", "diffHunk": "@@ -81,6 +81,51 @@ class TableSourceITCase extends AbstractTestBase {\n     // info.\n   }\n \n+  @Test\n+  def testStreamScanParallelism(): Unit = {\n+    val env = StreamExecutionEnvironment.getExecutionEnvironment\n+    val settings = EnvironmentSettings.newInstance().useOldPlanner().build()\n+    val tEnv = StreamTableEnvironment.create(env, settings)\n+\n+    // set environment parallelism to 4\n+    env.setParallelism(4)\n+\n+    // test DataStreamScan\n+    val table = env.fromElements[String]()\n+      .setParallelism(1)\n+      .toTable(tEnv, 'a)\n+\n+    tEnv.registerTable(\"MyTable1\", table)\n+    val parallelism = tEnv.scan(\"MyTable1\")\n+      .toAppendStream[String]\n+      .getParallelism\n+\n+    assertEquals(1, parallelism)\n+\n+    // test StreamTableSourceScan\n+    val tableSource = new StreamTableSource[String]() {\n+\n+      override def getDataStream(execEnv: JExecEnv): DataStream[String] = {\n+        execEnv.fromElements[String](\"blabla\")\n+      }\n+\n+      override def getTableSchema: TableSchema = {\n+        new TableSchema(Array(\"a\"), Array(Types.STRING()))\n+      }\n+\n+      override def getReturnType: TypeInformation[String] = {\n+        Types.STRING()\n+      }\n+    }\n+\n+    tEnv.asInstanceOf[TableEnvironmentInternal].registerTableSourceInternal(\"MyTable2\", tableSource)\n+    val parallelism2 = tEnv.scan(\"MyTable2\")\n+      .toAppendStream[String]\n+      .getParallelism\n+\n+    assertEquals(1, parallelism2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed47271c426abff4426ccf2d0fd5858e6f3d8390"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTU2MjIy", "url": "https://github.com/apache/flink/pull/13141#pullrequestreview-479556222", "createdAt": "2020-09-01T09:24:57Z", "commit": {"oid": "0e9c4198095239ebee07a466a5e23de1a60809ac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae1223cf2a3be7c8fea0666821a217e8fa2c841", "author": {"user": {"login": "liupc", "name": "PengchengLiu"}}, "url": "https://github.com/apache/flink/commit/2ae1223cf2a3be7c8fea0666821a217e8fa2c841", "committedDate": "2020-09-01T09:27:15Z", "message": "[FLINK-18852][table-planner] Fix StreamScan don't inherit parallelism from input in legacy planner\n\nThis closes #13141"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e9c4198095239ebee07a466a5e23de1a60809ac", "author": {"user": {"login": "liupc", "name": "PengchengLiu"}}, "url": "https://github.com/apache/flink/commit/0e9c4198095239ebee07a466a5e23de1a60809ac", "committedDate": "2020-08-17T04:56:45Z", "message": "Fix tests"}, "afterCommit": {"oid": "2ae1223cf2a3be7c8fea0666821a217e8fa2c841", "author": {"user": {"login": "liupc", "name": "PengchengLiu"}}, "url": "https://github.com/apache/flink/commit/2ae1223cf2a3be7c8fea0666821a217e8fa2c841", "committedDate": "2020-09-01T09:27:15Z", "message": "[FLINK-18852][table-planner] Fix StreamScan don't inherit parallelism from input in legacy planner\n\nThis closes #13141"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4864, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}