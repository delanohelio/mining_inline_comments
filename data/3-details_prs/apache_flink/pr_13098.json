{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MjY5MjI4", "number": 13098, "title": "[FLINK-18866][python] Support filter() operation for Python DataStrea\u2026", "bodyText": "What is the purpose of the change\nSupport filter() operation for Python DataStream API.\nBrief change log\n\nAdd filter() interface for Python DataStream API\nAdd a new Function class named FilterFunction and a wrapper class for user defined filter function.\n\nVerifying this change\nThis change has test case covered by test_filter_with_data_types and test_filter_without_data_types in test_data_stream.py\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): ( no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): ( no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not documented)", "createdAt": "2020-08-10T04:42:50Z", "url": "https://github.com/apache/flink/pull/13098", "merged": true, "mergeCommit": {"oid": "f1e34e659aed9f7bbf7cd7c38e10e97ca88e4b73"}, "closed": true, "closedAt": "2020-08-11T11:44:52Z", "author": {"login": "shuiqiangchen"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9b65lAFqTQ2Mzk3MDc5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9zjMsABqjM2NDIzMTM4OTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTcwNzk1", "url": "https://github.com/apache/flink/pull/13098#pullrequestreview-463970795", "createdAt": "2020-08-10T05:56:56Z", "commit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNTo1Njo1NlrOG-CIgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjowNToxNVrOG-CP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY5OTg0Mw==", "bodyText": "What if the func is a Callable?", "url": "https://github.com/apache/flink/pull/13098#discussion_r467699843", "createdAt": "2020-08-10T05:56:56Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +233,32 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        \"\"\"\n+        Applies a Filter transformation on a DataStream. The transformation calls a FilterFunction\n+        for each element of the DataStream and retains only those element for which the function\n+        returns true. Elements for which the function returns false are filtered. The user can also\n+        extend RichFilterFunction to gain access to other features provided by the RichFunction\n+        interface.\n+\n+        :param func: The FilterFunction that is called for each element of the DataStream.\n+        :return: The filtered DataStream.\n+        \"\"\"\n+        class FilterFlatMap(FlatMapFunction):\n+            def __init__(self, filter_func):\n+                self._func = filter_func\n+\n+            def flat_map(self, value):\n+                if self._func.filter(value):\n+                    yield value\n+\n+        j_input_type = self._j_data_stream.getTransformation().getOutputType()\n+        type_info = typeinfo._from_java_type(j_input_type)\n+        j_data_stream = self.flat_map(FilterFlatMap(func), type_info=type_info)._j_data_stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDMzNA==", "bodyText": "Remove ;", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700334", "createdAt": "2020-08-10T05:59:01Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDYyMQ==", "bodyText": "Tre => True", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700621", "createdAt": "2020-08-10T06:00:19Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())\n+    Note that the system assumes that the function does not modify the elemetns on which the\n+    predicate is applied. Violating this assumption can lead to incoorect results.\n+    \"\"\"\n+\n+    @abc.abstractmethod\n+    def filter(self, value):\n+        \"\"\"\n+        The filter function that evaluates the predicate.\n+\n+        :param value: The value to be filtered.\n+        :return: Tre for values that should be retained, false for values to be filtered out.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDY5MA==", "bodyText": "elemetns => elements", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700690", "createdAt": "2020-08-10T06:00:33Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())\n+    Note that the system assumes that the function does not modify the elemetns on which the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDc4NA==", "bodyText": "incoorect => incorrect", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700784", "createdAt": "2020-08-10T06:00:57Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())\n+    Note that the system assumes that the function does not modify the elemetns on which the\n+    predicate is applied. Violating this assumption can lead to incoorect results.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMDk5Nw==", "bodyText": "Remove new", "url": "https://github.com/apache/flink/pull/13098#discussion_r467700997", "createdAt": "2020-08-10T06:01:58Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -83,6 +83,29 @@ def flat_map(self, value):\n         pass\n \n \n+class FilterFunction(Function):\n+    \"\"\"\n+    A filter function is a predicate applied individually to each record. The predicate decides\n+    whether to keep the element, or to discard it.\n+    The basic syntax for using a FilterFunction is as follows:\n+    :\n+         >>> ds = ...;\n+         >>> result = ds.filter(new MyFilterFunction())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMTUwNA==", "bodyText": "This class has never been used.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467701504", "createdAt": "2020-08-10T06:04:22Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/functions.py", "diffHunk": "@@ -140,6 +163,19 @@ def flat_map(self, value):\n         return self._func(value)\n \n \n+class FilterFunctionWrapper(FunctionWrapper):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMTcxNA==", "bodyText": "Change either one to Callable filter function to cover the Callable scenario.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467701714", "createdAt": "2020-08-10T06:05:15Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "diffHunk": "@@ -149,6 +149,33 @@ def flat_map(value):\n         expected.sort()\n         self.assertEqual(expected, results)\n \n+    def test_filter_without_data_types(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')])\n+        filtered_stream = ds.filter(MyFilterFunction())\n+        collect_util = DataStreamCollectUtil()\n+        collect_util.collect(filtered_stream)\n+        self.env.execute(\"test filter\")\n+        results = collect_util.results()\n+        expected = [\"(2, 'Hello', 'Hi')\"]\n+        results.sort()\n+        expected.sort()\n+        self.assertEqual(expected, results)\n+\n+    def test_filter_with_data_types(self):\n+        ds = self.env.from_collection([(1, 'Hi', 'Hello'), (2, 'Hello', 'Hi')],\n+                                      type_info=Types.ROW(\n+                                          [Types.INT(), Types.STRING(), Types.STRING()])\n+                                      )\n+        filtered_stream = ds.filter(MyFilterFunction())\n+        collect_util = DataStreamCollectUtil()\n+        collect_util.collect(filtered_stream)\n+        self.env.execute(\"test filter\")\n+        results = collect_util.results()\n+        expected = ['2,Hello,Hi']\n+        results.sort()\n+        expected.sort()\n+        self.assertEqual(expected, results)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8987176f205b330cf101f81aa126637c0846b298"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDA5NTAx", "url": "https://github.com/apache/flink/pull/13098#pullrequestreview-464009501", "createdAt": "2020-08-10T07:34:19Z", "commit": {"oid": "8c98a59b403eb2e1d16f3915f3b5fca1ba5c88ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozNDoyMFrOG-EDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzozNDoyMFrOG-EDZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzczMTMwMA==", "bodyText": "throw an exception if it is not a FilterFunction nor a Callable function.", "url": "https://github.com/apache/flink/pull/13098#discussion_r467731300", "createdAt": "2020-08-10T07:34:20Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,35 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        \"\"\"\n+        Applies a Filter transformation on a DataStream. The transformation calls a FilterFunction\n+        for each element of the DataStream and retains only those element for which the function\n+        returns true. Elements for which the function returns false are filtered. The user can also\n+        extend RichFilterFunction to gain access to other features provided by the RichFunction\n+        interface.\n+\n+        :param func: The FilterFunction that is called for each element of the DataStream.\n+        :return: The filtered DataStream.\n+        \"\"\"\n+        class FilterFlatMap(FlatMapFunction):\n+            def __init__(self, filter_func):\n+                self._func = filter_func\n+\n+            def flat_map(self, value):\n+                if self._func.filter(value):\n+                    yield value\n+\n+        if isinstance(func, Callable):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c98a59b403eb2e1d16f3915f3b5fca1ba5c88ff"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3d582238a0afb694a4712c247a66cd31fac072b", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/f3d582238a0afb694a4712c247a66cd31fac072b", "committedDate": "2020-08-10T08:24:02Z", "message": "- resolve review issues."}, "afterCommit": {"oid": "2577a9c0cca713f583f38d593c8803bc6d5506c8", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/2577a9c0cca713f583f38d593c8803bc6d5506c8", "committedDate": "2020-08-10T11:51:48Z", "message": "- rebase master branch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2577a9c0cca713f583f38d593c8803bc6d5506c8", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/2577a9c0cca713f583f38d593c8803bc6d5506c8", "committedDate": "2020-08-10T11:51:48Z", "message": "- rebase master branch"}, "afterCommit": {"oid": "af3d92942065464e267e9715696ec3154ed32ee9", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/af3d92942065464e267e9715696ec3154ed32ee9", "committedDate": "2020-08-11T02:17:05Z", "message": "-rebase master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0ODAxMjQ0", "url": "https://github.com/apache/flink/pull/13098#pullrequestreview-464801244", "createdAt": "2020-08-11T07:07:58Z", "commit": {"oid": "19ff831a80a0ab5a1fbaabfb6d19e91f25d32314"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNzo1OFrOG-rDuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNzowNzo1OFrOG-rDuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM3MDM2Mw==", "bodyText": "There are side effects for this implementation. If we perform multi key_by, it will also introduce multi maps in the stream graph. This should be avoided.", "url": "https://github.com/apache/flink/pull/13098#discussion_r468370363", "createdAt": "2020-08-11T07:07:58Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -434,6 +465,16 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             -> 'DataStream':\n         return self._values().flat_map(func, type_info)\n \n+    def filter(self, func: Union[Callable, FilterFunction]) -> 'DataStream':\n+        return self._values().filter(func)\n+\n+    def add_sink(self, sink_func: SinkFunction) -> 'DataStreamSink':\n+        return self._values().add_sink(sink_func)\n+\n+    def key_by(self, key_selector: Union[Callable, KeySelector],\n+               key_type_info: TypeInformation = None) -> 'KeyedStream':\n+        return self._values().key_by(key_selector, key_type_info)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ff831a80a0ab5a1fbaabfb6d19e91f25d32314"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ace2b45eaf1462b8f9d7896cbd298b1b933affcf", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/ace2b45eaf1462b8f9d7896cbd298b1b933affcf", "committedDate": "2020-08-11T09:25:25Z", "message": "[FLINK-18866][python] Support filter() operation for Python DataStream API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76abab84fbdfa86ed35c97368e573a22a606abdb", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/76abab84fbdfa86ed35c97368e573a22a606abdb", "committedDate": "2020-08-11T09:25:25Z", "message": "- resolve review issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6492a6bcd67aa1666b0ef7e3d9912f27caeeb9f8", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/6492a6bcd67aa1666b0ef7e3d9912f27caeeb9f8", "committedDate": "2020-08-11T09:25:25Z", "message": "- resolve review issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dce931da7986e9551066e2298bdc267721bd9fd", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/8dce931da7986e9551066e2298bdc267721bd9fd", "committedDate": "2020-08-11T09:25:25Z", "message": "- rebase master branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bcbe3e041fa542b38489a9cb2ed283be7b4b450", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/0bcbe3e041fa542b38489a9cb2ed283be7b4b450", "committedDate": "2020-08-11T09:26:23Z", "message": "-rebase master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1552f6c1f93a6775863b6d90b8d8db88ad417531", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/1552f6c1f93a6775863b6d90b8d8db88ad417531", "committedDate": "2020-08-11T09:27:04Z", "message": "[FLINK-18866][python] override filter() for KeyedStream."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b8fe46103e7e96f4afa9bfeda2a0a5becd1244", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/d0b8fe46103e7e96f4afa9bfeda2a0a5becd1244", "committedDate": "2020-08-11T09:27:04Z", "message": "[FLINK-18866][python] Simplified key_by() for KeyedStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eccf085ce92a91039325b98bb5de50ccd258f5e", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/9eccf085ce92a91039325b98bb5de50ccd258f5e", "committedDate": "2020-08-11T09:38:39Z", "message": "[FLINK-18866][python] Add filter() operation for Python DataStream API."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42988fb8a3ef91b8b25104772c702c154a822ac2", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/42988fb8a3ef91b8b25104772c702c154a822ac2", "committedDate": "2020-08-11T08:14:49Z", "message": "[FLINK-18866][python] Simplified key_by() for KeyedStream"}, "afterCommit": {"oid": "9eccf085ce92a91039325b98bb5de50ccd258f5e", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/9eccf085ce92a91039325b98bb5de50ccd258f5e", "committedDate": "2020-08-11T09:38:39Z", "message": "[FLINK-18866][python] Add filter() operation for Python DataStream API."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2840, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}