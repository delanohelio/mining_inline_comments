{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjI2MTIy", "number": 11979, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzowNDowN1rOD4yt1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowODoxNFrOD5thog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc3NzgyOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzowNDowN1rOGPtvPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzoyOToxOVrOGPyANg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMTE5Nw==", "bodyText": "Do you mean \u201c\u793a\u4f8b\u201d instead of \u201c\u5b9e\u4f8b\u201d\uff1f", "url": "https://github.com/apache/flink/pull/11979#discussion_r419131197", "createdAt": "2020-05-03T17:04:07Z", "author": {"login": "XBaith"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002\n+\u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002\n \n-### Example\n+### \u5b9e\u4f8b", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwMTA3OA==", "bodyText": "Yes, in order to be consistent, your suggestion is feasible. I have made changes. Thank you very much for your attention.", "url": "https://github.com/apache/flink/pull/11979#discussion_r419201078", "createdAt": "2020-05-04T03:29:19Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002\n+\u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002\n \n-### Example\n+### \u5b9e\u4f8b", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMTE5Nw=="}, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc4MzAwOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzowOToxN1rOGPtxvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMzozMzoxN1rOGPyB9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMTgzNg==", "bodyText": "\u201c\u5fc6\u8d77\u201d\u8fd8\u662f\u8bf4\u201c\u60f3\u8d77\u201d\uff0c\u6211\u4e2a\u4eba\u89c9\u5f97\u201c\u60f3\u8d77\u201d\u8bfb\u8d77\u6765\u66f4\u7b26\u5408\u6211\u4eec\u5e73\u5e38\u7684\u8bf4\u6cd5\u3002\u4ea6\u6216\u8005\u8bf4\u610f\u8bd1\u6210\u201c\u4f60\u5e94\u8be5\u8bb0\u5f97\u201d", "url": "https://github.com/apache/flink/pull/11979#discussion_r419131836", "createdAt": "2020-05-03T17:09:17Z", "author": {"login": "XBaith"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002\n+\u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002\n \n-### Example\n+### \u5b9e\u4f8b\n \n-If you've done the\n-[hands-on exercise]({% link training/streaming_analytics.zh.md %}#hands-on)\n-in the [Streaming Analytics training]({% link training/streaming_analytics.zh.md %}),\n-you will recall that it uses a `TumblingEventTimeWindow` to compute the sum of the tips for\n-each driver during each hour, like this:\n+\u5982\u679c\u4f60\u5df2\u7ecf\u4f53\u9a8c\u4e86\n+[\u6d41\u5f0f\u5206\u6790\u8bad\u7ec3]({% link training/streaming_analytics.zh.md %})\n+\u7684[\u52a8\u624b\u5b9e\u8df5]({% link training/streaming_analytics.zh.md %}#hands-on)\uff0c\n+\u4f60\u4f1a\u5fc6\u8d77\uff0c\u5b83\u662f\u91c7\u7528 `TumblingEventTimeWindow` \u6765\u8ba1\u7b97\u6bcf\u4e2a\u5c0f\u65f6\u5185\u6bcf\u4e2a\u53f8\u673a\u7684\u5c0f\u8d39\u603b\u548c\uff0c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTIwMTUyNQ==", "bodyText": "Yes, it will be easier to understand in translation. I've updated it.\nThank you.", "url": "https://github.com/apache/flink/pull/11979#discussion_r419201525", "createdAt": "2020-05-04T03:33:17Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002\n+\u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002\n \n-### Example\n+### \u5b9e\u4f8b\n \n-If you've done the\n-[hands-on exercise]({% link training/streaming_analytics.zh.md %}#hands-on)\n-in the [Streaming Analytics training]({% link training/streaming_analytics.zh.md %}),\n-you will recall that it uses a `TumblingEventTimeWindow` to compute the sum of the tips for\n-each driver during each hour, like this:\n+\u5982\u679c\u4f60\u5df2\u7ecf\u4f53\u9a8c\u4e86\n+[\u6d41\u5f0f\u5206\u6790\u8bad\u7ec3]({% link training/streaming_analytics.zh.md %})\n+\u7684[\u52a8\u624b\u5b9e\u8df5]({% link training/streaming_analytics.zh.md %}#hands-on)\uff0c\n+\u4f60\u4f1a\u5fc6\u8d77\uff0c\u5b83\u662f\u91c7\u7528 `TumblingEventTimeWindow` \u6765\u8ba1\u7b97\u6bcf\u4e2a\u5c0f\u65f6\u5185\u6bcf\u4e2a\u53f8\u673a\u7684\u5c0f\u8d39\u603b\u548c\uff0c", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMTgzNg=="}, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc4NDc3OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzoxMToxOFrOGPtyqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzoxMToxOFrOGPtyqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMjA3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u4f7f\u7528 `KeyedProcessFunction` \u53bb\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u662f\u5408\u7406\u3001\u76f4\u63a5\u4e14\u6709\u5b66\u4e60\u610f\u4e49\u7684\u3002\n          \n          \n            \n            \u4f7f\u7528 `KeyedProcessFunction` \u53bb\u5b9e\u73b0\u76f8\u540c\u7684\u64cd\u4f5c\u66f4\u52a0\u76f4\u63a5\u4e14\u66f4\u6709\u5b66\u4e60\u610f\u4e49\u3002", "url": "https://github.com/apache/flink/pull/11979#discussion_r419132072", "createdAt": "2020-05-03T17:11:18Z", "author": {"login": "XBaith"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -51,8 +50,8 @@ DataStream<Tuple3<Long, Long, Float>> hourlyTips = fares\n         .process(new AddTips());\n {% endhighlight %}\n \n-It is reasonably straightforward, and educational, to do the same thing with a\n-`KeyedProcessFunction`. Let us begin by replacing the code above with this:\n+\u4f7f\u7528 `KeyedProcessFunction` \u53bb\u5b9e\u73b0\u76f8\u540c\u7684\u6548\u679c\u662f\u5408\u7406\u3001\u76f4\u63a5\u4e14\u6709\u5b66\u4e60\u610f\u4e49\u7684\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc5MzY1OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzoyMDozNlrOGPt26A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzoyMDozNlrOGPt26A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMzE2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u5e0c\u671b\u4ece Flink operator \u83b7\u5f97\u591a\u4e2a\u8f93\u51fa\u6d41\uff0c\u5982\u4e0b\u62a5\u544a\u6761\u76ee\uff1a\n          \n          \n            \n            \u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u5e0c\u671b\u4ece Flink \u7b97\u5b50\u83b7\u5f97\u591a\u4e2a\u8f93\u51fa\u6d41\uff0c\u5982\u4e0b\u62a5\u544a\u6761\u76ee\uff1a", "url": "https://github.com/apache/flink/pull/11979#discussion_r419133160", "createdAt": "2020-05-03T17:20:36Z", "author": {"login": "XBaith"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a\n \n-* The `OnTimerContext context` passed in to `onTimer` can be used to determine the current key.\n+* \u4f20\u9012\u7ed9 `onTimer` \u7684 `OnTimerContext context` \u53ef\u7528\u4e8e\u786e\u5b9a\u5f53\u524d key\u3002\n \n-* Our pseudo-windows are being triggered when the current watermark reaches the end of each hour, at\n-  which point `onTimer` is called. This onTimer method removes the related entry from `sumOfTips`,\n-  which has the effect of making it impossible to accommodate late events. This is the equivalent of\n-  setting the allowedLateness to zero when working with Flink's time windows.\n+* \u6211\u4eec\u7684 pseudo-windows \u5728\u5f53\u524d Watermark \u5230\u8fbe\u6bcf\u5c0f\u65f6\u7ed3\u675f\u65f6\u89e6\u53d1\uff0c\u6b64\u65f6\u8c03\u7528 `onTimer`\u3002\n+  \u8fd9\u4e2a `onTimer` \u65b9\u6cd5\u4ece `sumOfTips` \u4e2d\u5220\u9664\u76f8\u5173\u7684\u6761\u76ee\uff0c\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\u4e0d\u53ef\u80fd\u5bb9\u7eb3\u5ef6\u8fdf\u7684\u4e8b\u4ef6\u3002\n+  \u8fd9\u76f8\u5f53\u4e8e\u5728\u4f7f\u7528 Flink \u7684\u65f6\u95f4\u7a97\u53e3\u65f6\u5c06 allowedLateness \u8bbe\u7f6e\u4e3a\u96f6\u3002\n \n-### Performance Considerations\n+### \u6027\u80fd\u8003\u8651\n \n-Flink provides `MapState` and `ListState` types that are optimized for RocksDB. Where possible,\n-these should be used instead of a `ValueState` object holding some sort of collection. The RocksDB\n-state backend can append to `ListState` without going through (de)serialization, and for `MapState`, each\n-key/value pair is a separate RocksDB object, so `MapState` can be efficiently accessed and updated.\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002\n+Flink \u63d0\u4f9b\u4e86\u4e3a RocksDB \u4f18\u5316\u7684 `MapState` \u548c `ListState` \u7c7b\u578b\u3002\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002\n+RocksDB State Backend \u53ef\u4ee5\u9644\u52a0\u5230 `ListState`\uff0c\u800c\u65e0\u9700\u8fdb\u884c\uff08\u53cd\uff09\u5e8f\u5217\u5316\uff0c\n+\u5bf9\u4e8e `MapState`\uff0c\u6bcf\u4e2a key/value \u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684 RocksDB \u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u6709\u6548\u5730\u8bbf\u95ee\u548c\u66f4\u65b0 `MapState`\u3002\n \n {% top %}\n \n ## Side Outputs\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-There are several good reasons to want to have more than one output stream from a Flink operator, such as reporting:\n+\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u5e0c\u671b\u4ece Flink operator \u83b7\u5f97\u591a\u4e2a\u8f93\u51fa\u6d41\uff0c\u5982\u4e0b\u62a5\u544a\u6761\u76ee\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODc5NTgxOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNzoyMjo0N1rOGPt38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjoyOToyOVrOGPxhpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMzQyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u8fd9\u53ef\u4ee5\u4f5c\u4e3a `Keyedcomprocessfunction` \u5b9e\u73b0\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u6765\u68c0\u6d4b\u548c\u6e05\u9664\u4efb\u4f55\u8fc7\u65f6\u7684 State\u3002\n          \n          \n            \n            \u8fd9\u53ef\u4ee5\u4f5c\u4e3a `KeyedCoProcessFunction` \u5b9e\u73b0\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u6765\u68c0\u6d4b\u548c\u6e05\u9664\u4efb\u4f55\u8fc7\u65f6\u7684 State\u3002", "url": "https://github.com/apache/flink/pull/11979#discussion_r419133426", "createdAt": "2020-05-03T17:22:47Z", "author": {"login": "XBaith"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -269,38 +259,35 @@ SingleOutputStreamOperator hourlyTips = fares\n hourlyTips.getSideOutput(lateFares).print();\n {% endhighlight %}\n \n-Alternatively, you can use two OutputTags with the\n-same name to refer to the same side output, but if you do, they must have the same type.\n+\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u540c\u540d\u7684 OutputTag \u6765\u5f15\u7528\u540c\u4e00\u4e2a\u65c1\u8def\u8f93\u51fa\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n \n {% top %}\n \n-## Closing Remarks\n+## \u7ed3\u8bed\n \n-In this example you have seen how a `ProcessFunction` can be used to reimplement a straightforward time\n-window. Of course, if Flink's built-in windowing API meets your needs, by all means, go ahead and\n-use it. But if you find yourself considering doing something contorted with Flink's windows, don't\n-be afraid to roll your own.\n+\u5728\u672c\u4f8b\u4e2d\uff0c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 `ProcessFunction` \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n+\u5f53\u7136\uff0c\u5982\u679c Flink \u5185\u7f6e\u7684\u7a97\u53e3 API \u80fd\u591f\u6ee1\u8db3\u4f60\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f18\u5148\u4f7f\u7528\u5b83\u3002\n+\u4f46\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u8003\u8651\u7528 Flink \u7684\u7a97\u53e3\u505a\u4e9b\u9519\u7efc\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4e0d\u8981\u5bb3\u6015\u81ea\u5df1\u52a8\u624b\u3002\n \n-Also, `ProcessFunctions` are useful for many other use cases beyond computing analytics. The hands-on\n-exercise below provides an example of something completely different.\n+\u6b64\u5916\uff0c`ProcessFunctions` \u5bf9\u4e8e\u8ba1\u7b97\u5206\u6790\u4e4b\u5916\u7684\u8bb8\u591a\u5176\u4ed6\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002\n+\u4e0b\u9762\u7684\u5b9e\u8df5\u7ec3\u4e60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\n \n-Another common use case for ProcessFunctions is for expiring stale state. If you think back to the\n-[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares),\n-where a `RichCoFlatMapFunction` is used to compute a simple join, the sample solution assumes that\n-the TaxiRides and TaxiFares are perfectly matched, one-to-one for each `rideId`. If an event is lost,\n-the other event for the same `rideId` will be held in state forever. This could instead be implemented\n-as a `KeyedCoProcessFunction`, and a timer could be used to detect and clear any stale state.\n+ProcessFunctions \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8fc7\u671f\u8fc7\u65f6 State\u3002\u5982\u679c\u4f60\u56de\u60f3\u4e00\u4e0b\n+[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares)\uff0c\n+\u5176\u4e2d\u4f7f\u7528 `RichCoFlatMapFunction` \u6765\u8ba1\u7b97\u7b80\u5355 Join\uff0c\u90a3\u4e48\u793a\u4f8b\u89e3\u51b3\u65b9\u6848\u5047\u8bbe TaxiRides \u548c TaxiFares \n+\u5b8c\u5168\u5339\u914d\uff0c\u6bcf\u4e2a `rideId` \u4e00\u5bf9\u4e00\u3002\u5982\u679c\u67d0\u4e2a\u4e8b\u4ef6\u4e22\u5931\uff0c\u5219\u540c\u4e00 `rideId` \u7684\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4fdd\u6301 State\u3002\n+\u8fd9\u53ef\u4ee5\u4f5c\u4e3a `Keyedcomprocessfunction` \u5b9e\u73b0\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u6765\u68c0\u6d4b\u548c\u6e05\u9664\u4efb\u4f55\u8fc7\u65f6\u7684 State\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MzI1NA==", "bodyText": "There is no doubt that it was a mistake of proofreading before I submitted the document. I will correct and put an end to such mistakes in time.\nThank you very much !", "url": "https://github.com/apache/flink/pull/11979#discussion_r419193254", "createdAt": "2020-05-04T02:29:29Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -269,38 +259,35 @@ SingleOutputStreamOperator hourlyTips = fares\n hourlyTips.getSideOutput(lateFares).print();\n {% endhighlight %}\n \n-Alternatively, you can use two OutputTags with the\n-same name to refer to the same side output, but if you do, they must have the same type.\n+\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u540c\u540d\u7684 OutputTag \u6765\u5f15\u7528\u540c\u4e00\u4e2a\u65c1\u8def\u8f93\u51fa\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n \n {% top %}\n \n-## Closing Remarks\n+## \u7ed3\u8bed\n \n-In this example you have seen how a `ProcessFunction` can be used to reimplement a straightforward time\n-window. Of course, if Flink's built-in windowing API meets your needs, by all means, go ahead and\n-use it. But if you find yourself considering doing something contorted with Flink's windows, don't\n-be afraid to roll your own.\n+\u5728\u672c\u4f8b\u4e2d\uff0c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 `ProcessFunction` \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n+\u5f53\u7136\uff0c\u5982\u679c Flink \u5185\u7f6e\u7684\u7a97\u53e3 API \u80fd\u591f\u6ee1\u8db3\u4f60\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f18\u5148\u4f7f\u7528\u5b83\u3002\n+\u4f46\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u8003\u8651\u7528 Flink \u7684\u7a97\u53e3\u505a\u4e9b\u9519\u7efc\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4e0d\u8981\u5bb3\u6015\u81ea\u5df1\u52a8\u624b\u3002\n \n-Also, `ProcessFunctions` are useful for many other use cases beyond computing analytics. The hands-on\n-exercise below provides an example of something completely different.\n+\u6b64\u5916\uff0c`ProcessFunctions` \u5bf9\u4e8e\u8ba1\u7b97\u5206\u6790\u4e4b\u5916\u7684\u8bb8\u591a\u5176\u4ed6\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002\n+\u4e0b\u9762\u7684\u5b9e\u8df5\u7ec3\u4e60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\n \n-Another common use case for ProcessFunctions is for expiring stale state. If you think back to the\n-[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares),\n-where a `RichCoFlatMapFunction` is used to compute a simple join, the sample solution assumes that\n-the TaxiRides and TaxiFares are perfectly matched, one-to-one for each `rideId`. If an event is lost,\n-the other event for the same `rideId` will be held in state forever. This could instead be implemented\n-as a `KeyedCoProcessFunction`, and a timer could be used to detect and clear any stale state.\n+ProcessFunctions \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8fc7\u671f\u8fc7\u65f6 State\u3002\u5982\u679c\u4f60\u56de\u60f3\u4e00\u4e0b\n+[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares)\uff0c\n+\u5176\u4e2d\u4f7f\u7528 `RichCoFlatMapFunction` \u6765\u8ba1\u7b97\u7b80\u5355 Join\uff0c\u90a3\u4e48\u793a\u4f8b\u89e3\u51b3\u65b9\u6848\u5047\u8bbe TaxiRides \u548c TaxiFares \n+\u5b8c\u5168\u5339\u914d\uff0c\u6bcf\u4e2a `rideId` \u4e00\u5bf9\u4e00\u3002\u5982\u679c\u67d0\u4e2a\u4e8b\u4ef6\u4e22\u5931\uff0c\u5219\u540c\u4e00 `rideId` \u7684\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4fdd\u6301 State\u3002\n+\u8fd9\u53ef\u4ee5\u4f5c\u4e3a `Keyedcomprocessfunction` \u5b9e\u73b0\uff0c\u5e76\u4e14\u53ef\u4ee5\u4f7f\u7528\u8ba1\u65f6\u5668\u6765\u68c0\u6d4b\u548c\u6e05\u9664\u4efb\u4f55\u8fc7\u65f6\u7684 State\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEzMzQyNg=="}, "originalCommit": {"oid": "51f00c041b126b54616f191f669750e819c733db"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODIzNzI3OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxMDozNFrOGRGgpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTowMzoxMFrOGRN6XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NTYzOQ==", "bodyText": "\u201cProcess Functions\" \u4e2a\u4eba\u611f\u89c9\u4e5f\u9700\u8981\u7ffb\u8bd1", "url": "https://github.com/apache/flink/pull/11979#discussion_r420585639", "createdAt": "2020-05-06T07:10:34Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcwNjkwOQ==", "bodyText": "@klion26  What about translating ' Process Functions '  into '\u5904\u7406\u51fd\u6570' or '\u6d41\u7a0b\u51fd\u6570'\uff1f", "url": "https://github.com/apache/flink/pull/11979#discussion_r420706909", "createdAt": "2020-05-06T11:03:10Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NTYzOQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI0MDkwOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxMTo1MVrOGRGiwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTowODo1NVrOGROFgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NjE3Ng==", "bodyText": "\u201cProcessFunction \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\u201d \u8fd9\u53e5\u8bdd\u8bfb\u8d77\u6765\u6709\u4e00\u70b9\u70b9\u62d7\u53e3\uff0c\u80fd\u5426\u6539\u6210 \u201d\u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer\uff0cState \u7ed3\u5408\u5728\u4e00\u8d77\u201c \u6216\u8005\u5176\u4ed6\u7684\u63cf\u8ff0\u65b9\u5f0f\u5462\uff1f", "url": "https://github.com/apache/flink/pull/11979#discussion_r420586176", "createdAt": "2020-05-06T07:11:51Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcwOTc2MQ==", "bodyText": "@klion26 Thanks for your suggestion. I will make improvements based on your suggestions in next commit.", "url": "https://github.com/apache/flink/pull/11979#discussion_r420709761", "createdAt": "2020-05-06T11:08:55Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NjE3Ng=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI0MjUwOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxMjoyMFrOGRGjrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxMjoyMFrOGRGjrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NjQxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002\n          \n          \n            \n            \u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002", "url": "https://github.com/apache/flink/pull/11979#discussion_r420586415", "createdAt": "2020-05-06T07:12:20Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -29,19 +29,18 @@ under the License.\n \n ## Process Functions\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-A `ProcessFunction` combines event processing with timers and state, making it a powerful building\n-block for stream processing applications. This is the basis for creating event-driven applications\n-with Flink. It is very similar to a `RichFlatMapFunction`, but with the addition of timers.\n+`ProcessFunction` \u5c06\u4e8b\u4ef6\u5904\u7406\u4e0e Timer \u548c State \u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6210\u4e3a\u6d41\u5904\u7406\u5e94\u7528\u7684\u5f3a\u5927\u6784\u5efa\u6a21\u5757\u3002\n+\u8fd9\u662f\u4f7f\u7528 Flink \u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840\u3002\u5b83\u548c `RichFlatMapFunction` \u5341\u5206\u76f8\u4f3c\uff0c \u4f46\u662f\u589e\u52a0\u4e86 Timer\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI0ODc0OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNDozOFrOGRGnfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNDozOFrOGRGnfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NzM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4e00\u4e2a\u540d\u4e3a `PseudoWindow` \u7684 `KeyedProcessFunction` \u88ab\u5e94\u7528\u4e8e KeyedStream \uff0c\n          \n          \n            \n            \u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4e00\u4e2a\u540d\u4e3a `PseudoWindow` \u7684 `KeyedProcessFunction` \u88ab\u5e94\u7528\u4e8e KeyedStream\uff0c", "url": "https://github.com/apache/flink/pull/11979#discussion_r420587391", "createdAt": "2020-05-06T07:14:38Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -61,11 +60,10 @@ DataStream<Tuple3<Long, Long, Float>> hourlyTips = fares\n         .process(new PseudoWindow(Time.hours(1)));\n {% endhighlight %}\n \n-In this code snippet a `KeyedProcessFunction` called `PseudoWindow` is being applied to a keyed\n-stream, the result of which is a `DataStream<Tuple3<Long, Long, Float>>` (the same kind of stream\n-produced by the implementation that uses Flink's built-in time windows).\n+\u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4e00\u4e2a\u540d\u4e3a `PseudoWindow` \u7684 `KeyedProcessFunction` \u88ab\u5e94\u7528\u4e8e KeyedStream \uff0c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI1MDM0OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNToxMlrOGRGodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODoxMDozOVrOGSdW8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NzYzOQ==", "bodyText": "\u8fd9\u91cc\u7684\u6ce8\u91ca\u4e5f\u4e00\u8d77\u7ffb\u8bd1\u4e0b\uff1f\n\u4ee5\u53ca\u4e0b\u9762\u5176\u4ed6\u4ee3\u7801\u7684\u6ce8\u91ca", "url": "https://github.com/apache/flink/pull/11979#discussion_r420587639", "createdAt": "2020-05-06T07:15:12Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -61,11 +60,10 @@ DataStream<Tuple3<Long, Long, Float>> hourlyTips = fares\n         .process(new PseudoWindow(Time.hours(1)));\n {% endhighlight %}\n \n-In this code snippet a `KeyedProcessFunction` called `PseudoWindow` is being applied to a keyed\n-stream, the result of which is a `DataStream<Tuple3<Long, Long, Float>>` (the same kind of stream\n-produced by the implementation that uses Flink's built-in time windows).\n+\u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4e00\u4e2a\u540d\u4e3a `PseudoWindow` \u7684 `KeyedProcessFunction` \u88ab\u5e94\u7528\u4e8e KeyedStream \uff0c\n+\u5176\u7ed3\u679c\u662f\u4e00\u4e2a `DataStream<Tuple3<Long, Long, Float>>` \uff08\u4e0e\u4f7f\u7528 Flink \u5185\u7f6e\u65f6\u95f4\u7a97\u53e3\u7684\u5b9e\u73b0\u751f\u6210\u7684\u6d41\u76f8\u540c\uff09\u3002\n \n-The overall outline of `PseudoWindow` has this shape:\n+`PseudoWindow` \u7684\u603b\u4f53\u8f6e\u5ed3\u793a\u610f\u5982\u4e0b\uff1a\n \n {% highlight java %}\n // Compute the sum of the tips for each driver in hour-long windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwODU2Mw==", "bodyText": "@klion26\nHi , @klion26\nI have followed up the translation of the comments and I'm looking forward to receiving your suggestions\nThank you for your attention.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422008563", "createdAt": "2020-05-08T08:10:39Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -61,11 +60,10 @@ DataStream<Tuple3<Long, Long, Float>> hourlyTips = fares\n         .process(new PseudoWindow(Time.hours(1)));\n {% endhighlight %}\n \n-In this code snippet a `KeyedProcessFunction` called `PseudoWindow` is being applied to a keyed\n-stream, the result of which is a `DataStream<Tuple3<Long, Long, Float>>` (the same kind of stream\n-produced by the implementation that uses Flink's built-in time windows).\n+\u5728\u8fd9\u4e2a\u4ee3\u7801\u7247\u6bb5\u4e2d\uff0c\u4e00\u4e2a\u540d\u4e3a `PseudoWindow` \u7684 `KeyedProcessFunction` \u88ab\u5e94\u7528\u4e8e KeyedStream \uff0c\n+\u5176\u7ed3\u679c\u662f\u4e00\u4e2a `DataStream<Tuple3<Long, Long, Float>>` \uff08\u4e0e\u4f7f\u7528 Flink \u5185\u7f6e\u65f6\u95f4\u7a97\u53e3\u7684\u5b9e\u73b0\u751f\u6210\u7684\u6d41\u76f8\u540c\uff09\u3002\n \n-The overall outline of `PseudoWindow` has this shape:\n+`PseudoWindow` \u7684\u603b\u4f53\u8f6e\u5ed3\u793a\u610f\u5982\u4e0b\uff1a\n \n {% highlight java %}\n // Compute the sum of the tips for each driver in hour-long windows.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4NzYzOQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI1MjEzOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNTo1NFrOGRGprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNTo1NFrOGRGprg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4Nzk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n          \n          \n            \n            * \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c\u8fd8\u5305\u62ec", "url": "https://github.com/apache/flink/pull/11979#discussion_r420587950", "createdAt": "2020-05-06T07:15:54Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI1MjczOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNjowOVrOGRGqCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNjowOVrOGRGqCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4ODA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n          \n          \n            \n              `CoProcessFunctions`\u3001`BroadcastProcessFunctions` \u7b49.", "url": "https://github.com/apache/flink/pull/11979#discussion_r420588043", "createdAt": "2020-05-06T07:16:09Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODI1NzExOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzoxNzo1M1rOGRGswA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo0MDozOVrOGSfzmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4ODczNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n          \n          \n            \n            * \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a`processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n          \n      \n    \n    \n  \n\n\u201dprocessElement \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\u201c\u8fd9\u4e2a\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\u5417\uff1f\u8fd9\u91cc\u662f\u8bf4\u6bcf\u6b21\u8f93\u5165\u90fd\u4f1a\u8c03\u7528 processElement \u8fd9\u4e2a\u51fd\u6570", "url": "https://github.com/apache/flink/pull/11979#discussion_r420588736", "createdAt": "2020-05-06T07:17:53Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA0ODY2NQ==", "bodyText": "Yes. @klion26 ,I handled it.\nThank you so much .", "url": "https://github.com/apache/flink/pull/11979#discussion_r422048665", "createdAt": "2020-05-08T09:40:39Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU4ODczNg=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMwNTgxOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozMzozOVrOGRHKrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo1Mjo0OVrOGSgIJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjM5Nw==", "bodyText": "\u201c\u9664\u5176\u4ed6\u5916\u201d \u611f\u89c9\u602a\u602a\u7684\uff0c\u6682\u65f6\u7ed9\u4e0d\u51fa\u4e00\u4e2a\u66f4\u597d\u7684\u7ffb\u8bd1\uff0c\u53ef\u4ee5\u770b\u5176\u4ed6\u4eba\u6709\u6ca1\u6709\u66f4\u597d\u7684\u5efa\u8bae", "url": "https://github.com/apache/flink/pull/11979#discussion_r420596397", "createdAt": "2020-05-06T07:33:39Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n+  \u5f53\u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u8c03\u7528 `onTimer`\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09timer\uff0c\u4e5f\u53ef\u4ee5\u662f\u5904\u7406\u65f6\u95f4\uff08processing time\uff09timer\u3002\n+  `processElement` \u548c `onTimer` \u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4e0e `TimerService` \u4ea4\u4e92\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1MzkyNw==", "bodyText": "Hi, @klion26\nWhat do you think of translating\n\"processElement \u548c onTimer \u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4e0e TimerService \u4ea4\u4e92\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002\"\ninto\n\"\u6b64\u5916/\u9664\u6b64\u4e4b\u5916\uff0cprocessElement \u548c onTimer \u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4e0e TimerService \u4ea4\u4e92\u3002\" \uff1f\nThank you for your attention!\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422053927", "createdAt": "2020-05-08T09:52:49Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n+  \u5f53\u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u8c03\u7528 `onTimer`\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09timer\uff0c\u4e5f\u53ef\u4ee5\u662f\u5904\u7406\u65f6\u95f4\uff08processing time\uff09timer\u3002\n+  `processElement` \u548c `onTimer` \u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4e0e `TimerService` \u4ea4\u4e92\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjM5Nw=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMwODQ1OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozNDoyNVrOGRHMMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo1NTozOVrOGSgM3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5Njc4Ng==", "bodyText": "\u8fd9\u91cc\u5982\u679c\u7ffb\u8bd1\u6210 \u201c\u57fa\u4e8e\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09\u7684 timer\uff0c\u57fa\u4e8e\u5904\u7406\u65f6\u95f4\uff08processing time\uff09\u7684 timer\u201d\u4f1a\u66f4\u597d\u4e00\u4e9b\u5417\uff1f", "url": "https://github.com/apache/flink/pull/11979#discussion_r420596786", "createdAt": "2020-05-06T07:34:25Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n+  \u5f53\u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u8c03\u7528 `onTimer`\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09timer\uff0c\u4e5f\u53ef\u4ee5\u662f\u5904\u7406\u65f6\u95f4\uff08processing time\uff09timer\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NTEzMg==", "bodyText": "@klion26\nI have applied your suggestion into the translation of the sentence.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422055132", "createdAt": "2020-05-08T09:55:39Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n+  \u5f53\u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u8c03\u7528 `onTimer`\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09timer\uff0c\u4e5f\u53ef\u4ee5\u662f\u5904\u7406\u65f6\u95f4\uff08processing time\uff09timer\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5Njc4Ng=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMwOTM1OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozNDo0M1rOGRHMwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo1NjozMVrOGSgOTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjkzMA==", "bodyText": "\u8fd9\u91cc\u7684\u6ce8\u91ca\u80fd\u5426\u4e5f\u7ffb\u8bd1\u4e00\u4e0b\u5462", "url": "https://github.com/apache/flink/pull/11979#discussion_r420596930", "createdAt": "2020-05-06T07:34:43Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n+  \u5f53\u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u8c03\u7528 `onTimer`\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09timer\uff0c\u4e5f\u53ef\u4ee5\u662f\u5904\u7406\u65f6\u95f4\uff08processing time\uff09timer\u3002\n+  `processElement` \u548c `onTimer` \u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4e0e `TimerService` \u4ea4\u4e92\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002\n+  \u8fd9\u4e24\u4e2a\u56de\u8c03\u8fd8\u4f20\u9012\u4e86\u4e00\u4e2a\u53ef\u7528\u4e8e\u53d1\u51fa\u7ed3\u679c\u7684 `Collector`\u3002\n \n-#### The `open()` method\n+#### `open()` \u65b9\u6cd5\n \n {% highlight java %}\n // Keyed, managed state, with an entry for each window, keyed by the window's end time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NTUwMg==", "bodyText": "@klion26\nI have translated the comments into Chinese.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422055502", "createdAt": "2020-05-08T09:56:31Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -106,21 +104,20 @@ public static class PseudoWindow extends\n }\n {% endhighlight %}\n \n-Things to be aware of:\n+\u6ce8\u610f\u4e8b\u9879\uff1a\n \n-* There are several types of ProcessFunctions -- this is a `KeyedProcessFunction`, but there are also\n-  `CoProcessFunctions`, `BroadcastProcessFunctions`, etc. \n+* \u6709\u51e0\u79cd\u7c7b\u578b\u7684 ProcessFunctions -- \u4e0d\u4ec5\u5305\u62ec `KeyedProcessFunction`\uff0c \u8fd8\u5305\u62ec\n+  `CoProcessFunctions`\u3001 `BroadcastProcessFunctions` \u7b49. \n \n-* A `KeyedProcessFunction` is a kind of `RichFunction`. Being a `RichFunction`, it has access to the `open`\n-  and `getRuntimeContext` methods needed for working with managed keyed state.\n+* `KeyedProcessFunction` \u662f\u4e00\u79cd `RichFunction`\u3002\u4f5c\u4e3a `RichFunction`\uff0c\u5b83\u53ef\u4ee5\u8bbf\u95ee\u4f7f\u7528 Managed Keyed State \u6240\u9700\u7684 `open`\n+  \u548c `getRuntimeContext` \u65b9\u6cd5\u3002\n \n-* There are two callbacks to implement: `processElement` and `onTimer`. `processElement` is called\n-  with each incoming event; `onTimer` is called when timers fire. These can be either event time or\n-  processing time timers. Both `processElement` and `onTimer` are provided with a context object\n-  that can be used to interact with a `TimerService` (among other things). Both callbacks are also\n-  passed a `Collector` that can be used to emit results.\n+* \u6709\u4e24\u4e2a\u56de\u8c03\u65b9\u6cd5\u987b\u8981\u5b9e\u73b0\uff1a `processElement` \u548c `onTimer`\u3002`processElement` \u4e0e\u6bcf\u4e2a\u4f20\u5165\u4e8b\u4ef6\u4e00\u8d77\u8c03\u7528\uff1b\n+  \u5f53\u8ba1\u65f6\u5668\u89e6\u53d1\u65f6\u8c03\u7528 `onTimer`\u3002\u5b83\u4eec\u53ef\u4ee5\u662f\u4e8b\u4ef6\u65f6\u95f4\uff08event time\uff09timer\uff0c\u4e5f\u53ef\u4ee5\u662f\u5904\u7406\u65f6\u95f4\uff08processing time\uff09timer\u3002\n+  `processElement` \u548c `onTimer` \u90fd\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u53ef\u7528\u4e8e\u4e0e `TimerService` \u4ea4\u4e92\uff08\u9664\u5176\u4ed6\u5916\uff09\u3002\n+  \u8fd9\u4e24\u4e2a\u56de\u8c03\u8fd8\u4f20\u9012\u4e86\u4e00\u4e2a\u53ef\u7528\u4e8e\u53d1\u51fa\u7ed3\u679c\u7684 `Collector`\u3002\n \n-#### The `open()` method\n+#### `open()` \u65b9\u6cd5\n \n {% highlight java %}\n // Keyed, managed state, with an entry for each window, keyed by the window's end time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5NjkzMA=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMyMTMxOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzozODo0NlrOGRHUFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo1NzoxM1rOGSgPng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5ODgwNQ==", "bodyText": "\u8fd9\u91cc\u8bf4\u7684\u610f\u601d\u662f\u6307\u201c\u7531\u4e8e\u4e71\u5e8f\uff0c\u53ef\u80fd\u9700\u8981\u5728\u8f93\u51fa\u524d\u4e00\u5c0f\u65f6\u7ed3\u679c\u524d\uff0c\u5904\u7406\u4e0b\u4e00\u5c0f\u65f6\u7684\u6570\u636e\u201d -- \u56e0\u4e3a\u8fd9\u6837\u80fd\u591f\u4fdd\u8bc1\u201c\u4e71\u5e8f\u9020\u6210\u7684\u8fdf\u5230\u6570\u636e\u201d\u5f97\u5230\u6b63\u786e\u5904\u7406\uff08\u653e\u5230\u524d\u4e00\u4e2a\u5c0f\u65f6\u4e2d\uff09\n\u8fd9\u91cc\u53ef\u4ee5\u91cd\u65b0\u7ec4\u7ec7\u4e0b\u8bed\u8a00\u770b\u600e\u4e48\u63cf\u8ff0\u66f4\u597d\u4e00\u4e9b", "url": "https://github.com/apache/flink/pull/11979#discussion_r420598805", "createdAt": "2020-05-06T07:38:46Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -136,13 +133,12 @@ public void open(Configuration conf) {\n }\n {% endhighlight %}\n \n-Because the fare events can arrive out of order, it will sometimes be necessary to process events\n-for one hour before having finished computing the results for the previous hour. In fact, if the\n-watermarking delay is much longer than the window length, then there may be many windows open\n-simultaneously, rather than just two. This implementation supports this by using a `MapState` that\n-maps the timestamp for the end of each window to the sum of the tips for that window.\n+\u7531\u4e8e\u7968\u4ef7\u4e8b\u4ef6\uff08fare-event\uff09\u53ef\u80fd\u4f1a\u4e71\u5e8f\u5230\u8fbe\uff0c\u6709\u65f6\u9700\u8981\u5728\u8ba1\u7b97\u5b8c\u524d\u4e00\u5c0f\u65f6\u7684\u7ed3\u679c\u4e4b\u524d\u5904\u7406\u4e00\u5c0f\u65f6\u7684\u4e8b\u4ef6\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NTgzOA==", "bodyText": "@klion26\nI have followed up the translation of the comments and I'm looking forward to receiving your suggestions\nThank you for your attention.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422055838", "createdAt": "2020-05-08T09:57:13Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -136,13 +133,12 @@ public void open(Configuration conf) {\n }\n {% endhighlight %}\n \n-Because the fare events can arrive out of order, it will sometimes be necessary to process events\n-for one hour before having finished computing the results for the previous hour. In fact, if the\n-watermarking delay is much longer than the window length, then there may be many windows open\n-simultaneously, rather than just two. This implementation supports this by using a `MapState` that\n-maps the timestamp for the end of each window to the sum of the tips for that window.\n+\u7531\u4e8e\u7968\u4ef7\u4e8b\u4ef6\uff08fare-event\uff09\u53ef\u80fd\u4f1a\u4e71\u5e8f\u5230\u8fbe\uff0c\u6709\u65f6\u9700\u8981\u5728\u8ba1\u7b97\u5b8c\u524d\u4e00\u5c0f\u65f6\u7684\u7ed3\u679c\u4e4b\u524d\u5904\u7406\u4e00\u5c0f\u65f6\u7684\u4e8b\u4ef6\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5ODgwNQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMyODIwOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0MDo1OVrOGRHYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwOTo1ODoxN1rOGSgRiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5OTkyNQ==", "bodyText": "\u8fd9\u91cc tips \u662f\u4e0d\u662f\u7ffb\u8bd1\u4f1a\u66f4\u597d\u4e00\u4e9b", "url": "https://github.com/apache/flink/pull/11979#discussion_r420599925", "createdAt": "2020-05-06T07:40:59Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -136,13 +133,12 @@ public void open(Configuration conf) {\n }\n {% endhighlight %}\n \n-Because the fare events can arrive out of order, it will sometimes be necessary to process events\n-for one hour before having finished computing the results for the previous hour. In fact, if the\n-watermarking delay is much longer than the window length, then there may be many windows open\n-simultaneously, rather than just two. This implementation supports this by using a `MapState` that\n-maps the timestamp for the end of each window to the sum of the tips for that window.\n+\u7531\u4e8e\u7968\u4ef7\u4e8b\u4ef6\uff08fare-event\uff09\u53ef\u80fd\u4f1a\u4e71\u5e8f\u5230\u8fbe\uff0c\u6709\u65f6\u9700\u8981\u5728\u8ba1\u7b97\u5b8c\u524d\u4e00\u5c0f\u65f6\u7684\u7ed3\u679c\u4e4b\u524d\u5904\u7406\u4e00\u5c0f\u65f6\u7684\u4e8b\u4ef6\u3002\n+\u5b9e\u9645\u4e0a\uff0c\u5982\u679c Watermark \u5ef6\u8fdf\u6bd4\u7a97\u53e3\u957f\u5ea6\u957f\u5f97\u591a\uff0c\u5219\u53ef\u80fd\u6709\u591a\u4e2a\u7a97\u53e3\u540c\u65f6\u6253\u5f00\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e24\u4e2a\u3002\n+\u6b64\u5b9e\u73b0\u901a\u8fc7\u4f7f\u7528 `MapState` \u6765\u652f\u6301\u5904\u7406\u8fd9\u4e00\u70b9\uff0c\u8be5 `MapState` \u5c06\u6bcf\u4e2a\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4\u6233\u6620\u5c04\u5230\u8be5\u7a97\u53e3\u7684 tips ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA1NjMyOA==", "bodyText": "@klion26\nI have translated the 'tips' into Chinese.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422056328", "createdAt": "2020-05-08T09:58:17Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -136,13 +133,12 @@ public void open(Configuration conf) {\n }\n {% endhighlight %}\n \n-Because the fare events can arrive out of order, it will sometimes be necessary to process events\n-for one hour before having finished computing the results for the previous hour. In fact, if the\n-watermarking delay is much longer than the window length, then there may be many windows open\n-simultaneously, rather than just two. This implementation supports this by using a `MapState` that\n-maps the timestamp for the end of each window to the sum of the tips for that window.\n+\u7531\u4e8e\u7968\u4ef7\u4e8b\u4ef6\uff08fare-event\uff09\u53ef\u80fd\u4f1a\u4e71\u5e8f\u5230\u8fbe\uff0c\u6709\u65f6\u9700\u8981\u5728\u8ba1\u7b97\u5b8c\u524d\u4e00\u5c0f\u65f6\u7684\u7ed3\u679c\u4e4b\u524d\u5904\u7406\u4e00\u5c0f\u65f6\u7684\u4e8b\u4ef6\u3002\n+\u5b9e\u9645\u4e0a\uff0c\u5982\u679c Watermark \u5ef6\u8fdf\u6bd4\u7a97\u53e3\u957f\u5ea6\u957f\u5f97\u591a\uff0c\u5219\u53ef\u80fd\u6709\u591a\u4e2a\u7a97\u53e3\u540c\u65f6\u6253\u5f00\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u4e24\u4e2a\u3002\n+\u6b64\u5b9e\u73b0\u901a\u8fc7\u4f7f\u7528 `MapState` \u6765\u652f\u6301\u5904\u7406\u8fd9\u4e00\u70b9\uff0c\u8be5 `MapState` \u5c06\u6bcf\u4e2a\u7a97\u53e3\u7684\u7ed3\u675f\u65f6\u95f4\u6233\u6620\u5c04\u5230\u8be5\u7a97\u53e3\u7684 tips ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU5OTkyNQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODMzMjEyOnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0MjoxOFrOGRHa4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo0MjoxOFrOGRHa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwMDU0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * \u672c\u4f8b\u4f7f\u7528\u4e00\u4e2a `MapState`\uff0c\u5176\u4e2d keys \u662f\u65f6\u95f4\u6233( timestamp )\uff0c\u5e76\u4e3a\u540c\u4e00\u65f6\u95f4\u6233\u8bbe\u7f6e\u4e00\u4e2a Timer\u3002\n          \n          \n            \n            * \u672c\u4f8b\u4f7f\u7528\u4e00\u4e2a `MapState`\uff0c\u5176\u4e2d keys \u662f\u65f6\u95f4\u6233(timestamp)\uff0c\u5e76\u4e3a\u540c\u4e00\u65f6\u95f4\u6233\u8bbe\u7f6e\u4e00\u4e2a Timer\u3002", "url": "https://github.com/apache/flink/pull/11979#discussion_r420600547", "createdAt": "2020-05-06T07:42:18Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -173,18 +169,16 @@ public void processElement(\n }\n {% endhighlight %}\n \n-Things to consider:\n+\u9700\u8981\u8003\u8651\u7684\u4e8b\u9879\uff1a\n \n-* What happens with late events? Events that are behind the watermark (i.e., late) are being\n-  dropped. If you want to do something better than this, consider using a side output, which is\n-  explained in the [next section]({% link training/event_driven.zh.md\n-  %}#side-outputs).\n+* \u5ef6\u8fdf\u7684\u4e8b\u4ef6\u600e\u4e48\u529e\uff1fwatermark \u540e\u9762\u7684\u4e8b\u4ef6\uff08\u5373\u5ef6\u8fdf\u7684\uff09\u6b63\u5728\u88ab\u5220\u9664\u3002\n+  \u5982\u679c\u4f60\u60f3\u505a\u4e00\u4e9b\u6bd4\u8fd9\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u65c1\u8def\u8f93\u51fa\uff08Side outputs\uff09\uff0c\u8fd9\u5c06\u5728\n+  [\u4e0b\u4e00\u8282]({% link training/event_driven.zh.md%}#side-outputs)\u4e2d\u89e3\u91ca\u3002\n \n-* This example uses a `MapState` where the keys are timestamps, and sets a `Timer` for that same\n-  timestamp. This is a common pattern; it makes it easy and efficient to lookup relevant information\n-  when the timer fires.\n+* \u672c\u4f8b\u4f7f\u7528\u4e00\u4e2a `MapState`\uff0c\u5176\u4e2d keys \u662f\u65f6\u95f4\u6233( timestamp )\uff0c\u5e76\u4e3a\u540c\u4e00\u65f6\u95f4\u6233\u8bbe\u7f6e\u4e00\u4e2a Timer\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM3Mzc4OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1NToyNFrOGRH04Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowNjo1N1rOGSdQ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNzIwMQ==", "bodyText": "\u8fd9\u4e2a\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\u5417\uff1f\u73b0\u5728\u8fd9\u6837\u663e\u5f97\u4f18\u70b9\u7a81\u5140", "url": "https://github.com/apache/flink/pull/11979#discussion_r420607201", "createdAt": "2020-05-06T07:55:24Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNzAyNg==", "bodyText": "Hi, @klion26\nI have replaced it with '\u6ce8\u610f\uff1a'. And  what do you think of it ?\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422007026", "createdAt": "2020-05-08T08:06:57Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwNzIwMQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM4NzM2OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNzo1OTo0NFrOGRH9Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowNDoyM1rOGSdMww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwOTM3NQ==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u53ef\u4ee5\u4f18\u5316\u4e0b\uff0c\u73b0\u5728\u8bfb\u8d77\u6765\uff0c\u4f1a\u8ba9\u4eba\u611f\u89c9\u5f88\u7591\u60d1\u201c\u8fd9\u4e9b\u5bf9\u8c61\u662f\u5565\u201d\uff1f\n\u7ffb\u8bd1\u6210\u201c\u5728\u76f8\u5bf9\u4e8e ValueState\uff0c\u66f4\u5efa\u8bae\u4f7f\u7528 MapState \u548c ListState\uff0c\u56e0\u4e3a\u4f7f\u7528 RocksDBStateBackend \u7684\u60c5\u51b5\u4e0b\uff0cMapState \u548c ListState \u6bd4 ValueState \u6027\u80fd\u66f4\u597d\u201d\u662f\u5426\u4f1a\u597d\u4e00\u4e9b\u5462\uff1f\n\u7136\u540e\u518d\u52a0\u4e0a ListState \u548c MapState \u4e3a\u4ec0\u4e48\u66f4\u597d\u7684\u7ffb\u8bd1", "url": "https://github.com/apache/flink/pull/11979#discussion_r420609375", "createdAt": "2020-05-06T07:59:44Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a\n \n-* The `OnTimerContext context` passed in to `onTimer` can be used to determine the current key.\n+* \u4f20\u9012\u7ed9 `onTimer` \u7684 `OnTimerContext context` \u53ef\u7528\u4e8e\u786e\u5b9a\u5f53\u524d key\u3002\n \n-* Our pseudo-windows are being triggered when the current watermark reaches the end of each hour, at\n-  which point `onTimer` is called. This onTimer method removes the related entry from `sumOfTips`,\n-  which has the effect of making it impossible to accommodate late events. This is the equivalent of\n-  setting the allowedLateness to zero when working with Flink's time windows.\n+* \u6211\u4eec\u7684 pseudo-windows \u5728\u5f53\u524d Watermark \u5230\u8fbe\u6bcf\u5c0f\u65f6\u7ed3\u675f\u65f6\u89e6\u53d1\uff0c\u6b64\u65f6\u8c03\u7528 `onTimer`\u3002\n+  \u8fd9\u4e2a `onTimer` \u65b9\u6cd5\u4ece `sumOfTips` \u4e2d\u5220\u9664\u76f8\u5173\u7684\u6761\u76ee\uff0c\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\u4e0d\u53ef\u80fd\u5bb9\u7eb3\u5ef6\u8fdf\u7684\u4e8b\u4ef6\u3002\n+  \u8fd9\u76f8\u5f53\u4e8e\u5728\u4f7f\u7528 Flink \u7684\u65f6\u95f4\u7a97\u53e3\u65f6\u5c06 allowedLateness \u8bbe\u7f6e\u4e3a\u96f6\u3002\n \n-### Performance Considerations\n+### \u6027\u80fd\u8003\u8651\n \n-Flink provides `MapState` and `ListState` types that are optimized for RocksDB. Where possible,\n-these should be used instead of a `ValueState` object holding some sort of collection. The RocksDB\n-state backend can append to `ListState` without going through (de)serialization, and for `MapState`, each\n-key/value pair is a separate RocksDB object, so `MapState` can be efficiently accessed and updated.\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNTk1NQ==", "bodyText": "Hi, @klion26\nI have made some improvements according your suggestion and the original text. Thank\nyou.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422005955", "createdAt": "2020-05-08T08:04:23Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a\n \n-* The `OnTimerContext context` passed in to `onTimer` can be used to determine the current key.\n+* \u4f20\u9012\u7ed9 `onTimer` \u7684 `OnTimerContext context` \u53ef\u7528\u4e8e\u786e\u5b9a\u5f53\u524d key\u3002\n \n-* Our pseudo-windows are being triggered when the current watermark reaches the end of each hour, at\n-  which point `onTimer` is called. This onTimer method removes the related entry from `sumOfTips`,\n-  which has the effect of making it impossible to accommodate late events. This is the equivalent of\n-  setting the allowedLateness to zero when working with Flink's time windows.\n+* \u6211\u4eec\u7684 pseudo-windows \u5728\u5f53\u524d Watermark \u5230\u8fbe\u6bcf\u5c0f\u65f6\u7ed3\u675f\u65f6\u89e6\u53d1\uff0c\u6b64\u65f6\u8c03\u7528 `onTimer`\u3002\n+  \u8fd9\u4e2a `onTimer` \u65b9\u6cd5\u4ece `sumOfTips` \u4e2d\u5220\u9664\u76f8\u5173\u7684\u6761\u76ee\uff0c\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\u4e0d\u53ef\u80fd\u5bb9\u7eb3\u5ef6\u8fdf\u7684\u4e8b\u4ef6\u3002\n+  \u8fd9\u76f8\u5f53\u4e8e\u5728\u4f7f\u7528 Flink \u7684\u65f6\u95f4\u7a97\u53e3\u65f6\u5c06 allowedLateness \u8bbe\u7f6e\u4e3a\u96f6\u3002\n \n-### Performance Considerations\n+### \u6027\u80fd\u8003\u8651\n \n-Flink provides `MapState` and `ListState` types that are optimized for RocksDB. Where possible,\n-these should be used instead of a `ValueState` object holding some sort of collection. The RocksDB\n-state backend can append to `ListState` without going through (de)serialization, and for `MapState`, each\n-key/value pair is a separate RocksDB object, so `MapState` can be efficiently accessed and updated.\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYwOTM3NQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODM5NzE4OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowMzowOFrOGRIDlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMjo1OVrOGSdKWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMDk2Nw==", "bodyText": "\u201c\u8fd9\u4e9b\u6807\u8bb0\u5177\u6709\u4e0e Side output \u7684 DataStream \u7c7b\u578b\u76f8\u5bf9\u5e94\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u540d\u79f0\u3002\u201d \u5982\u679c\u7ffb\u8bd1\u6210 \u201c\u8fd9\u4e9b\u6807\u8bb0\u62e5\u6709\u81ea\u5df1\u7684\u540d\u79f0\uff0c\u5e76\u4e0e\u5bf9\u5e94 DataStream \u7c7b\u578b\u4e00\u81f4\u201d\u662f\u5426\u4f1a\u597d\u4e00\u4e9b\u5462\uff1f\n\u73b0\u5728\u7684\u7ffb\u8bd1\u4e2d\uff0c\u6700\u540e\u4e00\u53e5\u201c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u540d\u79f0\u201d\u611f\u89c9\u6709\u70b9\u5947\u602a", "url": "https://github.com/apache/flink/pull/11979#discussion_r420610967", "createdAt": "2020-05-06T08:03:08Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a\n \n-* The `OnTimerContext context` passed in to `onTimer` can be used to determine the current key.\n+* \u4f20\u9012\u7ed9 `onTimer` \u7684 `OnTimerContext context` \u53ef\u7528\u4e8e\u786e\u5b9a\u5f53\u524d key\u3002\n \n-* Our pseudo-windows are being triggered when the current watermark reaches the end of each hour, at\n-  which point `onTimer` is called. This onTimer method removes the related entry from `sumOfTips`,\n-  which has the effect of making it impossible to accommodate late events. This is the equivalent of\n-  setting the allowedLateness to zero when working with Flink's time windows.\n+* \u6211\u4eec\u7684 pseudo-windows \u5728\u5f53\u524d Watermark \u5230\u8fbe\u6bcf\u5c0f\u65f6\u7ed3\u675f\u65f6\u89e6\u53d1\uff0c\u6b64\u65f6\u8c03\u7528 `onTimer`\u3002\n+  \u8fd9\u4e2a `onTimer` \u65b9\u6cd5\u4ece `sumOfTips` \u4e2d\u5220\u9664\u76f8\u5173\u7684\u6761\u76ee\uff0c\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\u4e0d\u53ef\u80fd\u5bb9\u7eb3\u5ef6\u8fdf\u7684\u4e8b\u4ef6\u3002\n+  \u8fd9\u76f8\u5f53\u4e8e\u5728\u4f7f\u7528 Flink \u7684\u65f6\u95f4\u7a97\u53e3\u65f6\u5c06 allowedLateness \u8bbe\u7f6e\u4e3a\u96f6\u3002\n \n-### Performance Considerations\n+### \u6027\u80fd\u8003\u8651\n \n-Flink provides `MapState` and `ListState` types that are optimized for RocksDB. Where possible,\n-these should be used instead of a `ValueState` object holding some sort of collection. The RocksDB\n-state backend can append to `ListState` without going through (de)serialization, and for `MapState`, each\n-key/value pair is a separate RocksDB object, so `MapState` can be efficiently accessed and updated.\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002\n+Flink \u63d0\u4f9b\u4e86\u4e3a RocksDB \u4f18\u5316\u7684 `MapState` \u548c `ListState` \u7c7b\u578b\u3002\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002\n+RocksDB State Backend \u53ef\u4ee5\u9644\u52a0\u5230 `ListState`\uff0c\u800c\u65e0\u9700\u8fdb\u884c\uff08\u53cd\uff09\u5e8f\u5217\u5316\uff0c\n+\u5bf9\u4e8e `MapState`\uff0c\u6bcf\u4e2a key/value \u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684 RocksDB \u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u6709\u6548\u5730\u8bbf\u95ee\u548c\u66f4\u65b0 `MapState`\u3002\n \n {% top %}\n \n ## Side Outputs\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-There are several good reasons to want to have more than one output stream from a Flink operator, such as reporting:\n+\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u5e0c\u671b\u4ece Flink \u7b97\u5b50\u83b7\u5f97\u591a\u4e2a\u8f93\u51fa\u6d41\uff0c\u5982\u4e0b\u62a5\u544a\u6761\u76ee\uff1a\n \n-* exceptions\n-* malformed events\n-* late events\n-* operational alerts, such as timed-out connections to external services\n+* \u5f02\u5e38\u60c5\u51b5\uff08exceptions\uff09\n+* \u683c\u5f0f\u9519\u8bef\u7684\u4e8b\u4ef6\uff08malformed events\uff09\n+* \u8fdf\u5230\u7684\u4e8b\u4ef6\uff08late events\uff09\n+* operator \u544a\u8b66\uff08operational alerts\uff09\uff0c\u5982\u4e0e\u5916\u90e8\u670d\u52a1\u7684\u8fde\u63a5\u8d85\u65f6\n \n-Side outputs are a convenient way to do this. Beyond error reporting, side outputs are also\n-a good way to implement an n-way split of a stream.\n+\u65c1\u8def\u8f93\u51fa\uff08Side outputs\uff09\u662f\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002\u9664\u4e86\u9519\u8bef\u62a5\u544a\u4e4b\u5916\uff0c\u65c1\u8def\u8f93\u51fa\u4e5f\u662f\u5b9e\u73b0\u6d41\u7684 n \u8def\u5206\u5272\u7684\u597d\u65b9\u6cd5\u3002\n \n-### Example\n+### \u793a\u4f8b\n \n-You are now in a position to do something with the late events that were ignored in the previous\n-section.\n+\u73b0\u5728\u4f60\u53ef\u4ee5\u5bf9\u4e0a\u4e00\u8282\u4e2d\u5ffd\u7565\u7684\u5ef6\u8fdf\u4e8b\u4ef6\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\u3002\n \n-A side output channel is associated with an `OutputTag<T>`. These tags have generic types that\n-correspond to the type of the side output's `DataStream`, and they have names.\n+Side output channel \u4e0e `OutputTag<T>` \u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u6807\u8bb0\u5177\u6709\u4e0e Side output \u7684 `DataStream` \u7c7b\u578b\u76f8\u5bf9\u5e94\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u540d\u79f0\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNTMzOQ==", "bodyText": "Hi, @klion26\nI have made corresponding improvements according your suggestion and the original text. Thank you so much.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422005339", "createdAt": "2020-05-08T08:02:59Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -202,52 +196,48 @@ public void onTimer(\n }\n {% endhighlight %}\n \n-Observations:\n+\u89c2\u5bdf\uff1a\n \n-* The `OnTimerContext context` passed in to `onTimer` can be used to determine the current key.\n+* \u4f20\u9012\u7ed9 `onTimer` \u7684 `OnTimerContext context` \u53ef\u7528\u4e8e\u786e\u5b9a\u5f53\u524d key\u3002\n \n-* Our pseudo-windows are being triggered when the current watermark reaches the end of each hour, at\n-  which point `onTimer` is called. This onTimer method removes the related entry from `sumOfTips`,\n-  which has the effect of making it impossible to accommodate late events. This is the equivalent of\n-  setting the allowedLateness to zero when working with Flink's time windows.\n+* \u6211\u4eec\u7684 pseudo-windows \u5728\u5f53\u524d Watermark \u5230\u8fbe\u6bcf\u5c0f\u65f6\u7ed3\u675f\u65f6\u89e6\u53d1\uff0c\u6b64\u65f6\u8c03\u7528 `onTimer`\u3002\n+  \u8fd9\u4e2a `onTimer` \u65b9\u6cd5\u4ece `sumOfTips` \u4e2d\u5220\u9664\u76f8\u5173\u7684\u6761\u76ee\uff0c\u8fd9\u6837\u505a\u7684\u6548\u679c\u662f\u4e0d\u53ef\u80fd\u5bb9\u7eb3\u5ef6\u8fdf\u7684\u4e8b\u4ef6\u3002\n+  \u8fd9\u76f8\u5f53\u4e8e\u5728\u4f7f\u7528 Flink \u7684\u65f6\u95f4\u7a97\u53e3\u65f6\u5c06 allowedLateness \u8bbe\u7f6e\u4e3a\u96f6\u3002\n \n-### Performance Considerations\n+### \u6027\u80fd\u8003\u8651\n \n-Flink provides `MapState` and `ListState` types that are optimized for RocksDB. Where possible,\n-these should be used instead of a `ValueState` object holding some sort of collection. The RocksDB\n-state backend can append to `ListState` without going through (de)serialization, and for `MapState`, each\n-key/value pair is a separate RocksDB object, so `MapState` can be efficiently accessed and updated.\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002\n+Flink \u63d0\u4f9b\u4e86\u4e3a RocksDB \u4f18\u5316\u7684 `MapState` \u548c `ListState` \u7c7b\u578b\u3002\n+\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\uff0c\u5e94\u8be5\u4f7f\u7528\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u800c\u4e0d\u662f\u6301\u6709\u67d0\u79cd\u96c6\u5408\u7684 `ValueState` \u5bf9\u8c61\u3002\n+RocksDB State Backend \u53ef\u4ee5\u9644\u52a0\u5230 `ListState`\uff0c\u800c\u65e0\u9700\u8fdb\u884c\uff08\u53cd\uff09\u5e8f\u5217\u5316\uff0c\n+\u5bf9\u4e8e `MapState`\uff0c\u6bcf\u4e2a key/value \u90fd\u662f\u4e00\u4e2a\u5355\u72ec\u7684 RocksDB \u5bf9\u8c61\uff0c\u56e0\u6b64\u53ef\u4ee5\u6709\u6548\u5730\u8bbf\u95ee\u548c\u66f4\u65b0 `MapState`\u3002\n \n {% top %}\n \n ## Side Outputs\n \n-### Introduction\n+### \u4ecb\u7ecd\n \n-There are several good reasons to want to have more than one output stream from a Flink operator, such as reporting:\n+\u6709\u51e0\u4e2a\u5f88\u597d\u7684\u7406\u7531\u5e0c\u671b\u4ece Flink \u7b97\u5b50\u83b7\u5f97\u591a\u4e2a\u8f93\u51fa\u6d41\uff0c\u5982\u4e0b\u62a5\u544a\u6761\u76ee\uff1a\n \n-* exceptions\n-* malformed events\n-* late events\n-* operational alerts, such as timed-out connections to external services\n+* \u5f02\u5e38\u60c5\u51b5\uff08exceptions\uff09\n+* \u683c\u5f0f\u9519\u8bef\u7684\u4e8b\u4ef6\uff08malformed events\uff09\n+* \u8fdf\u5230\u7684\u4e8b\u4ef6\uff08late events\uff09\n+* operator \u544a\u8b66\uff08operational alerts\uff09\uff0c\u5982\u4e0e\u5916\u90e8\u670d\u52a1\u7684\u8fde\u63a5\u8d85\u65f6\n \n-Side outputs are a convenient way to do this. Beyond error reporting, side outputs are also\n-a good way to implement an n-way split of a stream.\n+\u65c1\u8def\u8f93\u51fa\uff08Side outputs\uff09\u662f\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002\u9664\u4e86\u9519\u8bef\u62a5\u544a\u4e4b\u5916\uff0c\u65c1\u8def\u8f93\u51fa\u4e5f\u662f\u5b9e\u73b0\u6d41\u7684 n \u8def\u5206\u5272\u7684\u597d\u65b9\u6cd5\u3002\n \n-### Example\n+### \u793a\u4f8b\n \n-You are now in a position to do something with the late events that were ignored in the previous\n-section.\n+\u73b0\u5728\u4f60\u53ef\u4ee5\u5bf9\u4e0a\u4e00\u8282\u4e2d\u5ffd\u7565\u7684\u5ef6\u8fdf\u4e8b\u4ef6\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\u3002\n \n-A side output channel is associated with an `OutputTag<T>`. These tags have generic types that\n-correspond to the type of the side output's `DataStream`, and they have names.\n+Side output channel \u4e0e `OutputTag<T>` \u76f8\u5173\u8054\u3002\u8fd9\u4e9b\u6807\u8bb0\u5177\u6709\u4e0e Side output \u7684 `DataStream` \u7c7b\u578b\u76f8\u5bf9\u5e94\u7684\u6cdb\u578b\u7c7b\u578b\uff0c\u5e76\u4e14\u5b83\u4eec\u5177\u6709\u540d\u79f0\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMDk2Nw=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODQwNjA1OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNTo0OVrOGRIJEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwODowMTo0NlrOGSdIRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjM3MQ==", "bodyText": "\u8fd9\u91cc\u5c06\u201c\u8fc7\u671f\u201d\u7ffb\u8bd1\u6210\u201c\u6e05\u7406\u201d\u4f1a\u66f4\u597d\u4e00\u4e9b\u5417\uff1f", "url": "https://github.com/apache/flink/pull/11979#discussion_r420612371", "createdAt": "2020-05-06T08:05:49Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -269,38 +259,35 @@ SingleOutputStreamOperator hourlyTips = fares\n hourlyTips.getSideOutput(lateFares).print();\n {% endhighlight %}\n \n-Alternatively, you can use two OutputTags with the\n-same name to refer to the same side output, but if you do, they must have the same type.\n+\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u540c\u540d\u7684 OutputTag \u6765\u5f15\u7528\u540c\u4e00\u4e2a\u65c1\u8def\u8f93\u51fa\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n \n {% top %}\n \n-## Closing Remarks\n+## \u7ed3\u8bed\n \n-In this example you have seen how a `ProcessFunction` can be used to reimplement a straightforward time\n-window. Of course, if Flink's built-in windowing API meets your needs, by all means, go ahead and\n-use it. But if you find yourself considering doing something contorted with Flink's windows, don't\n-be afraid to roll your own.\n+\u5728\u672c\u4f8b\u4e2d\uff0c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 `ProcessFunction` \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n+\u5f53\u7136\uff0c\u5982\u679c Flink \u5185\u7f6e\u7684\u7a97\u53e3 API \u80fd\u591f\u6ee1\u8db3\u4f60\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f18\u5148\u4f7f\u7528\u5b83\u3002\n+\u4f46\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u8003\u8651\u7528 Flink \u7684\u7a97\u53e3\u505a\u4e9b\u9519\u7efc\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4e0d\u8981\u5bb3\u6015\u81ea\u5df1\u52a8\u624b\u3002\n \n-Also, `ProcessFunctions` are useful for many other use cases beyond computing analytics. The hands-on\n-exercise below provides an example of something completely different.\n+\u6b64\u5916\uff0c`ProcessFunctions` \u5bf9\u4e8e\u8ba1\u7b97\u5206\u6790\u4e4b\u5916\u7684\u8bb8\u591a\u5176\u4ed6\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002\n+\u4e0b\u9762\u7684\u5b9e\u8df5\u7ec3\u4e60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\n \n-Another common use case for ProcessFunctions is for expiring stale state. If you think back to the\n-[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares),\n-where a `RichCoFlatMapFunction` is used to compute a simple join, the sample solution assumes that\n-the TaxiRides and TaxiFares are perfectly matched, one-to-one for each `rideId`. If an event is lost,\n-the other event for the same `rideId` will be held in state forever. This could instead be implemented\n-as a `KeyedCoProcessFunction`, and a timer could be used to detect and clear any stale state.\n+ProcessFunctions \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8fc7\u671f\u8fc7\u65f6 State\u3002\u5982\u679c\u4f60\u56de\u60f3\u4e00\u4e0b", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwNDgwNw==", "bodyText": "@klion26\nYes, it's more accurate! I have made corresponding improvements according your suggestion. Thank you so much.\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422004807", "createdAt": "2020-05-08T08:01:46Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -269,38 +259,35 @@ SingleOutputStreamOperator hourlyTips = fares\n hourlyTips.getSideOutput(lateFares).print();\n {% endhighlight %}\n \n-Alternatively, you can use two OutputTags with the\n-same name to refer to the same side output, but if you do, they must have the same type.\n+\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u540c\u540d\u7684 OutputTag \u6765\u5f15\u7528\u540c\u4e00\u4e2a\u65c1\u8def\u8f93\u51fa\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n \n {% top %}\n \n-## Closing Remarks\n+## \u7ed3\u8bed\n \n-In this example you have seen how a `ProcessFunction` can be used to reimplement a straightforward time\n-window. Of course, if Flink's built-in windowing API meets your needs, by all means, go ahead and\n-use it. But if you find yourself considering doing something contorted with Flink's windows, don't\n-be afraid to roll your own.\n+\u5728\u672c\u4f8b\u4e2d\uff0c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 `ProcessFunction` \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n+\u5f53\u7136\uff0c\u5982\u679c Flink \u5185\u7f6e\u7684\u7a97\u53e3 API \u80fd\u591f\u6ee1\u8db3\u4f60\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f18\u5148\u4f7f\u7528\u5b83\u3002\n+\u4f46\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u8003\u8651\u7528 Flink \u7684\u7a97\u53e3\u505a\u4e9b\u9519\u7efc\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4e0d\u8981\u5bb3\u6015\u81ea\u5df1\u52a8\u624b\u3002\n \n-Also, `ProcessFunctions` are useful for many other use cases beyond computing analytics. The hands-on\n-exercise below provides an example of something completely different.\n+\u6b64\u5916\uff0c`ProcessFunctions` \u5bf9\u4e8e\u8ba1\u7b97\u5206\u6790\u4e4b\u5916\u7684\u8bb8\u591a\u5176\u4ed6\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002\n+\u4e0b\u9762\u7684\u5b9e\u8df5\u7ec3\u4e60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\n \n-Another common use case for ProcessFunctions is for expiring stale state. If you think back to the\n-[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares),\n-where a `RichCoFlatMapFunction` is used to compute a simple join, the sample solution assumes that\n-the TaxiRides and TaxiFares are perfectly matched, one-to-one for each `rideId`. If an event is lost,\n-the other event for the same `rideId` will be held in state forever. This could instead be implemented\n-as a `KeyedCoProcessFunction`, and a timer could be used to detect and clear any stale state.\n+ProcessFunctions \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8fc7\u671f\u8fc7\u65f6 State\u3002\u5982\u679c\u4f60\u56de\u60f3\u4e00\u4e0b", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjM3MQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODQxMzE0OnYy", "diffSide": "RIGHT", "path": "docs/training/event_driven.zh.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowODoxNFrOGRINmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1Nzo0N1rOGSdA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzUyOQ==", "bodyText": "\u201c\u6bcf\u4e2a rideId \u4e00\u5bf9\u4e00\u201d \u5efa\u8bae\u518d\u8865\u5145\u4e00\u4e0b\uff0c\u4ec0\u4e48\u4e1c\u897f\u4e00\u5bf9\u4e00\uff0c\u73b0\u5728\u7684\u63cf\u8ff0\u4e2d\uff0c\u4f1a\u8ba9\u4eba\u6bd4\u79d2\u7591\u60d1\n\u201c\u5219\u540c\u4e00 rideId \u7684\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4fdd\u6301 State\u201d \u6539\u6210\u201c\u5219\u540c\u4e00 rideId \u7684\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u5bf9 State \u5219\u6c38\u8fdc\u4e0d\u4f1a\u88ab\u6e05\u7406\u6389\u201d \u662f\u5426\u4f1a\u66f4\u597d\u4e00\u4e9b\u5462\uff1f", "url": "https://github.com/apache/flink/pull/11979#discussion_r420613529", "createdAt": "2020-05-06T08:08:14Z", "author": {"login": "klion26"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -269,38 +259,35 @@ SingleOutputStreamOperator hourlyTips = fares\n hourlyTips.getSideOutput(lateFares).print();\n {% endhighlight %}\n \n-Alternatively, you can use two OutputTags with the\n-same name to refer to the same side output, but if you do, they must have the same type.\n+\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u540c\u540d\u7684 OutputTag \u6765\u5f15\u7528\u540c\u4e00\u4e2a\u65c1\u8def\u8f93\u51fa\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n \n {% top %}\n \n-## Closing Remarks\n+## \u7ed3\u8bed\n \n-In this example you have seen how a `ProcessFunction` can be used to reimplement a straightforward time\n-window. Of course, if Flink's built-in windowing API meets your needs, by all means, go ahead and\n-use it. But if you find yourself considering doing something contorted with Flink's windows, don't\n-be afraid to roll your own.\n+\u5728\u672c\u4f8b\u4e2d\uff0c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 `ProcessFunction` \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n+\u5f53\u7136\uff0c\u5982\u679c Flink \u5185\u7f6e\u7684\u7a97\u53e3 API \u80fd\u591f\u6ee1\u8db3\u4f60\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f18\u5148\u4f7f\u7528\u5b83\u3002\n+\u4f46\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u8003\u8651\u7528 Flink \u7684\u7a97\u53e3\u505a\u4e9b\u9519\u7efc\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4e0d\u8981\u5bb3\u6015\u81ea\u5df1\u52a8\u624b\u3002\n \n-Also, `ProcessFunctions` are useful for many other use cases beyond computing analytics. The hands-on\n-exercise below provides an example of something completely different.\n+\u6b64\u5916\uff0c`ProcessFunctions` \u5bf9\u4e8e\u8ba1\u7b97\u5206\u6790\u4e4b\u5916\u7684\u8bb8\u591a\u5176\u4ed6\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002\n+\u4e0b\u9762\u7684\u5b9e\u8df5\u7ec3\u4e60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\n \n-Another common use case for ProcessFunctions is for expiring stale state. If you think back to the\n-[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares),\n-where a `RichCoFlatMapFunction` is used to compute a simple join, the sample solution assumes that\n-the TaxiRides and TaxiFares are perfectly matched, one-to-one for each `rideId`. If an event is lost,\n-the other event for the same `rideId` will be held in state forever. This could instead be implemented\n-as a `KeyedCoProcessFunction`, and a timer could be used to detect and clear any stale state.\n+ProcessFunctions \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8fc7\u671f\u8fc7\u65f6 State\u3002\u5982\u679c\u4f60\u56de\u60f3\u4e00\u4e0b\n+[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares)\uff0c\n+\u5176\u4e2d\u4f7f\u7528 `RichCoFlatMapFunction` \u6765\u8ba1\u7b97\u7b80\u5355 Join\uff0c\u90a3\u4e48\u793a\u4f8b\u89e3\u51b3\u65b9\u6848\u5047\u8bbe TaxiRides \u548c TaxiFares \n+\u5b8c\u5168\u5339\u914d\uff0c\u6bcf\u4e2a `rideId` \u4e00\u5bf9\u4e00\u3002\u5982\u679c\u67d0\u4e2a\u4e8b\u4ef6\u4e22\u5931\uff0c\u5219\u540c\u4e00 `rideId` \u7684\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4fdd\u6301 State\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwMjkzMA==", "bodyText": "@klion26\nHi, @klion26\nI re-integrated the entire scene of the example to translate these sentences more semantically and apply your suggestions. If you have any better suggestions, please leave  comments, I will continue to improve it. From the bottom of my heart, thank you so much for your guidance and help !\nSincerely,\nRoc", "url": "https://github.com/apache/flink/pull/11979#discussion_r422002930", "createdAt": "2020-05-08T07:57:47Z", "author": {"login": "RocMarshal"}, "path": "docs/training/event_driven.zh.md", "diffHunk": "@@ -269,38 +259,35 @@ SingleOutputStreamOperator hourlyTips = fares\n hourlyTips.getSideOutput(lateFares).print();\n {% endhighlight %}\n \n-Alternatively, you can use two OutputTags with the\n-same name to refer to the same side output, but if you do, they must have the same type.\n+\u6216\u8005\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u540c\u540d\u7684 OutputTag \u6765\u5f15\u7528\u540c\u4e00\u4e2a\u65c1\u8def\u8f93\u51fa\uff0c\u4f46\u5982\u679c\u8fd9\u6837\u505a\uff0c\u5b83\u4eec\u5fc5\u987b\u5177\u6709\u76f8\u540c\u7684\u7c7b\u578b\u3002\n \n {% top %}\n \n-## Closing Remarks\n+## \u7ed3\u8bed\n \n-In this example you have seen how a `ProcessFunction` can be used to reimplement a straightforward time\n-window. Of course, if Flink's built-in windowing API meets your needs, by all means, go ahead and\n-use it. But if you find yourself considering doing something contorted with Flink's windows, don't\n-be afraid to roll your own.\n+\u5728\u672c\u4f8b\u4e2d\uff0c\u4f60\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4f7f\u7528 `ProcessFunction` \u91cd\u65b0\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u65f6\u95f4\u7a97\u53e3\u3002\n+\u5f53\u7136\uff0c\u5982\u679c Flink \u5185\u7f6e\u7684\u7a97\u53e3 API \u80fd\u591f\u6ee1\u8db3\u4f60\u7684\u5f00\u53d1\u9700\u6c42\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f18\u5148\u4f7f\u7528\u5b83\u3002\n+\u4f46\u5982\u679c\u4f60\u53d1\u73b0\u81ea\u5df1\u5728\u8003\u8651\u7528 Flink \u7684\u7a97\u53e3\u505a\u4e9b\u9519\u7efc\u590d\u6742\u7684\u4e8b\u60c5\uff0c\u4e0d\u8981\u5bb3\u6015\u81ea\u5df1\u52a8\u624b\u3002\n \n-Also, `ProcessFunctions` are useful for many other use cases beyond computing analytics. The hands-on\n-exercise below provides an example of something completely different.\n+\u6b64\u5916\uff0c`ProcessFunctions` \u5bf9\u4e8e\u8ba1\u7b97\u5206\u6790\u4e4b\u5916\u7684\u8bb8\u591a\u5176\u4ed6\u7528\u4f8b\u4e5f\u5f88\u6709\u7528\u3002\n+\u4e0b\u9762\u7684\u5b9e\u8df5\u7ec3\u4e60\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u5168\u4e0d\u540c\u7684\u4f8b\u5b50\u3002\n \n-Another common use case for ProcessFunctions is for expiring stale state. If you think back to the\n-[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares),\n-where a `RichCoFlatMapFunction` is used to compute a simple join, the sample solution assumes that\n-the TaxiRides and TaxiFares are perfectly matched, one-to-one for each `rideId`. If an event is lost,\n-the other event for the same `rideId` will be held in state forever. This could instead be implemented\n-as a `KeyedCoProcessFunction`, and a timer could be used to detect and clear any stale state.\n+ProcessFunctions \u7684\u53e6\u4e00\u4e2a\u5e38\u89c1\u7528\u4f8b\u662f\u8fc7\u671f\u8fc7\u65f6 State\u3002\u5982\u679c\u4f60\u56de\u60f3\u4e00\u4e0b\n+[Rides and Fares Exercise](https://github.com/apache/flink-training/tree/{% if site.is_stable %}release-{{ site.version_title }}{% else %}master{% endif %}/rides-and-fares)\uff0c\n+\u5176\u4e2d\u4f7f\u7528 `RichCoFlatMapFunction` \u6765\u8ba1\u7b97\u7b80\u5355 Join\uff0c\u90a3\u4e48\u793a\u4f8b\u89e3\u51b3\u65b9\u6848\u5047\u8bbe TaxiRides \u548c TaxiFares \n+\u5b8c\u5168\u5339\u914d\uff0c\u6bcf\u4e2a `rideId` \u4e00\u5bf9\u4e00\u3002\u5982\u679c\u67d0\u4e2a\u4e8b\u4ef6\u4e22\u5931\uff0c\u5219\u540c\u4e00 `rideId` \u7684\u53e6\u4e00\u4e2a\u4e8b\u4ef6\u5c06\u6c38\u8fdc\u4fdd\u6301 State\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzUyOQ=="}, "originalCommit": {"oid": "2ba60790d4e33338f52ff6cd2845c81a7ca424a3"}, "originalPosition": 263}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1498, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}