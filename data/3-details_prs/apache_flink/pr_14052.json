{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDEzOTYz", "number": 14052, "title": "[FLINK-20030][network] Rewrite RemoteInputChannel#getInflightBuffersUnsafe to use sequence numbers", "bodyText": "What is the purpose of the change\n#13827 revealed some issues with RemoteInputChannel.getInflightBuffers which are also relevant for the master branch.\n\nnumBuffersOvertaken is ambiguous\nit can be overwritten\nsequence number can overflow\n\nBrief change log\n\npull commit from #13827 to replace numBuffersOvertaken with sequence number\nadd lastBarrierId to prevent overwriting it\n\nVerifying this change\nAdded unit tests (testGetInflightBuffersAfterPollingBuffer, testGetInflightBuffersOverflow, testGetAllInflightBuffers, testGetInflightBuffers in RemoteInputChannelTest)\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): yes\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: yes\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? no", "createdAt": "2020-11-12T16:45:20Z", "url": "https://github.com/apache/flink/pull/14052", "merged": true, "mergeCommit": {"oid": "a97fe1f3f24993ff8cce2dd008281f162022fa27"}, "closed": true, "closedAt": "2020-11-20T07:15:02Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb1rQCABqjM5ODk3MzAxNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeBpB4gFqTUzNDM2ODU0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14e0929bf9cebd4db7c60c5928d71e631fb4ad47", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/14e0929bf9cebd4db7c60c5928d71e631fb4ad47", "committedDate": "2020-11-12T16:41:22Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}, "afterCommit": {"oid": "0d6c68e97c1c6d23ca2870932db0cdfeddebcafd", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/0d6c68e97c1c6d23ca2870932db0cdfeddebcafd", "committedDate": "2020-11-12T17:05:16Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d6c68e97c1c6d23ca2870932db0cdfeddebcafd", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/0d6c68e97c1c6d23ca2870932db0cdfeddebcafd", "committedDate": "2020-11-12T17:05:16Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}, "afterCommit": {"oid": "9f30c9730919038a0247cd4b7a2929df05ee669f", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/9f30c9730919038a0247cd4b7a2929df05ee669f", "committedDate": "2020-11-13T08:28:10Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f30c9730919038a0247cd4b7a2929df05ee669f", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/9f30c9730919038a0247cd4b7a2929df05ee669f", "committedDate": "2020-11-13T08:28:10Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}, "afterCommit": {"oid": "9b6d028dde24fc8fd21e3a3542756c813fca9c13", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/9b6d028dde24fc8fd21e3a3542756c813fca9c13", "committedDate": "2020-11-13T15:20:07Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwOTY1ODQy", "url": "https://github.com/apache/flink/pull/14052#pullrequestreview-530965842", "createdAt": "2020-11-16T07:29:21Z", "commit": {"oid": "95b32349343babb0bc132d95172a80105c8ea81a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzoyOToyMlrOHzqwSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDo1Mjo1MVrOHz1dsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzkzOTkxNQ==", "bodyText": "There is some reason why it's turned off by default and it should stay this way. If you want to know the reason, I'd have to ask Chesnay or Robert though.", "url": "https://github.com/apache/flink/pull/14052#discussion_r523939915", "createdAt": "2020-11-16T07:29:22Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/test/resources/log4j2-test.properties", "diffHunk": "@@ -18,7 +18,7 @@\n \n # Set root logger level to OFF to not flood build logs\n # set manually to INFO for debugging purposes\n-rootLogger.level = OFF\n+rootLogger.level = ERROR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b32349343babb0bc132d95172a80105c8ea81a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NTI4NQ==", "bodyText": "You wrote in the PR description that this PR will also avoid numBuffersOvertaken being overwritten, but I don't see a specific change in that regard here. I was assuming that one of the earlier PRs already helped with that by fixing checkForBarrier.", "url": "https://github.com/apache/flink/pull/14052#discussion_r523995285", "createdAt": "2020-11-16T09:05:01Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -481,7 +489,7 @@ private boolean addPriorityBuffer(SequenceBuffer sequenceBuffer) throws IOExcept\n \t\tif (channelStatePersister.checkForBarrier(sequenceBuffer.buffer)) {\n \t\t\t// checkpoint was not yet started by task thread,\n \t\t\t// so remember the numbers of buffers to spill for the time when it will be started\n-\t\t\tnumBuffersOvertaken = receivedBuffers.getNumUnprioritizedElements();\n+\t\t\tlastOvertakenSequenceNumber = sequenceBuffer.sequenceNumber;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de43e752d21e95496aab69e13d9c007fa29d5b2f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NzQzMg==", "bodyText": "It should be possible to avoid iterating over all buffers by aborting on the first !shouldBeSpilled.", "url": "https://github.com/apache/flink/pull/14052#discussion_r523997432", "createdAt": "2020-11-16T09:07:04Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -506,43 +514,75 @@ public void checkpointStarted(CheckpointBarrier barrier) {\n \t\tsynchronized (receivedBuffers) {\n \t\t\tchannelStatePersister.startPersisting(\n \t\t\t\tbarrier.getId(),\n-\t\t\t\tgetInflightBuffers(numBuffersOvertaken == ALL ? receivedBuffers.getNumUnprioritizedElements() : numBuffersOvertaken));\n+\t\t\t\tgetInflightBuffers());\n \t\t}\n \t}\n \n \tpublic void checkpointStopped(long checkpointId) {\n \t\tsynchronized (receivedBuffers) {\n \t\t\tchannelStatePersister.stopPersisting(checkpointId);\n-\t\t\tnumBuffersOvertaken = ALL;\n+\t\t\tlastOvertakenSequenceNumber = null;\n+\t\t}\n+\t}\n+\n+\t@VisibleForTesting\n+\tList<Buffer> getInflightBuffers() {\n+\t\tsynchronized (receivedBuffers) {\n+\t\t\treturn getInflightBuffersUnsafe();\n \t\t}\n \t}\n \n \t/**\n \t * Returns a list of buffers, checking the first n non-priority buffers, and skipping all events.\n \t */\n-\tprivate List<Buffer> getInflightBuffers(int numBuffers) {\n+\tprivate List<Buffer> getInflightBuffersUnsafe() {\n \t\tassert Thread.holdsLock(receivedBuffers);\n \n-\t\tif (numBuffers == 0) {\n-\t\t\treturn Collections.emptyList();\n-\t\t}\n-\n-\t\tfinal List<Buffer> inflightBuffers = new ArrayList<>(numBuffers);\n+\t\tfinal List<Buffer> inflightBuffers = new ArrayList<>();\n \t\tIterator<SequenceBuffer> iterator = receivedBuffers.iterator();\n \t\t// skip all priority events (only buffers are stored anyways)\n \t\tIterators.advance(iterator, receivedBuffers.getNumPriorityElements());\n \n-\t\t// spill number of overtaken buffers or all of them if barrier has not been seen yet\n-\t\tfor (int pos = 0; pos < numBuffers; pos++) {\n-\t\t\tBuffer buffer = iterator.next().buffer;\n-\t\t\tif (buffer.isBuffer()) {\n-\t\t\t\tinflightBuffers.add(buffer.retainBuffer());\n+\t\twhile (iterator.hasNext()) {\n+\t\t\tSequenceBuffer sequenceBuffer = iterator.next();\n+\t\t\tif (sequenceBuffer.buffer.isBuffer() && shouldBeSpilled(sequenceBuffer.sequenceNumber)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de43e752d21e95496aab69e13d9c007fa29d5b2f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwMjkxMA==", "bodyText": "Do we need to use similar code later for timeout at a different place? If so, I'd pull it in some Util (even flink-core?).\nAlternatively, we could also just switch to having long sequence numbers. I was originally writing this overflow check, but I'm now thinking that it might be easier to just add these 4 bytes to each buffer header.\nI guess the question is how often we actually reach Int.MAX in one execution attempt on one channel. With a 32kb buffer, it's ~70 Tb data on that channel, so rather unlikely in one attempt. On the other hand, if we ever persist the buffer id (for incremental state channel), we might reach it eventually.", "url": "https://github.com/apache/flink/pull/14052#discussion_r524002910", "createdAt": "2020-11-16T09:12:02Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -506,43 +514,75 @@ public void checkpointStarted(CheckpointBarrier barrier) {\n \t\tsynchronized (receivedBuffers) {\n \t\t\tchannelStatePersister.startPersisting(\n \t\t\t\tbarrier.getId(),\n-\t\t\t\tgetInflightBuffers(numBuffersOvertaken == ALL ? receivedBuffers.getNumUnprioritizedElements() : numBuffersOvertaken));\n+\t\t\t\tgetInflightBuffers());\n \t\t}\n \t}\n \n \tpublic void checkpointStopped(long checkpointId) {\n \t\tsynchronized (receivedBuffers) {\n \t\t\tchannelStatePersister.stopPersisting(checkpointId);\n-\t\t\tnumBuffersOvertaken = ALL;\n+\t\t\tlastOvertakenSequenceNumber = null;\n+\t\t}\n+\t}\n+\n+\t@VisibleForTesting\n+\tList<Buffer> getInflightBuffers() {\n+\t\tsynchronized (receivedBuffers) {\n+\t\t\treturn getInflightBuffersUnsafe();\n \t\t}\n \t}\n \n \t/**\n \t * Returns a list of buffers, checking the first n non-priority buffers, and skipping all events.\n \t */\n-\tprivate List<Buffer> getInflightBuffers(int numBuffers) {\n+\tprivate List<Buffer> getInflightBuffersUnsafe() {\n \t\tassert Thread.holdsLock(receivedBuffers);\n \n-\t\tif (numBuffers == 0) {\n-\t\t\treturn Collections.emptyList();\n-\t\t}\n-\n-\t\tfinal List<Buffer> inflightBuffers = new ArrayList<>(numBuffers);\n+\t\tfinal List<Buffer> inflightBuffers = new ArrayList<>();\n \t\tIterator<SequenceBuffer> iterator = receivedBuffers.iterator();\n \t\t// skip all priority events (only buffers are stored anyways)\n \t\tIterators.advance(iterator, receivedBuffers.getNumPriorityElements());\n \n-\t\t// spill number of overtaken buffers or all of them if barrier has not been seen yet\n-\t\tfor (int pos = 0; pos < numBuffers; pos++) {\n-\t\t\tBuffer buffer = iterator.next().buffer;\n-\t\t\tif (buffer.isBuffer()) {\n-\t\t\t\tinflightBuffers.add(buffer.retainBuffer());\n+\t\twhile (iterator.hasNext()) {\n+\t\t\tSequenceBuffer sequenceBuffer = iterator.next();\n+\t\t\tif (sequenceBuffer.buffer.isBuffer() && shouldBeSpilled(sequenceBuffer.sequenceNumber)) {\n+\t\t\t\tinflightBuffers.add(sequenceBuffer.buffer.retainBuffer());\n \t\t\t}\n \t\t}\n \n+\t\tlastOvertakenSequenceNumber = null;\n+\n \t\treturn inflightBuffers;\n \t}\n \n+\t/**\n+\t * @return if given {@param sequenceNumber} should be spilled given {@link #lastOvertakenSequenceNumber}.\n+\t * We might not have yet received {@link CheckpointBarrier} and we might need to spill everything.\n+\t * If we have already received it, there is a bit nasty corner case of {@link SequenceBuffer#sequenceNumber}\n+\t * overflowing that needs to be handled as well.\n+\t */\n+\tprivate boolean shouldBeSpilled(int sequenceNumber) {\n+\t\tif (lastOvertakenSequenceNumber == null) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tcheckState(\n+\t\t\treceivedBuffers.size() < Integer.MAX_VALUE / 2,\n+\t\t\t\"Too many buffers for sequenceNumber overflow detection code to work correctly\");\n+\n+\t\tboolean possibleOverflowAfterOvertaking = Integer.MAX_VALUE / 2 < lastOvertakenSequenceNumber;\n+\t\tboolean possibleOverflowBeforeOvertaking = lastOvertakenSequenceNumber < -Integer.MAX_VALUE / 2;\n+\n+\t\tif (possibleOverflowAfterOvertaking) {\n+\t\t\treturn sequenceNumber < lastOvertakenSequenceNumber && sequenceNumber > 0;\n+\t\t}\n+\t\telse if (possibleOverflowBeforeOvertaking) {\n+\t\t\treturn sequenceNumber < lastOvertakenSequenceNumber || sequenceNumber > 0;\n+\t\t}\n+\t\telse {\n+\t\t\treturn sequenceNumber < lastOvertakenSequenceNumber;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de43e752d21e95496aab69e13d9c007fa29d5b2f"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAxNjc0Mg==", "bodyText": "I'm not sure if all of this particular refactoring makes the test more readable: How should I know which sequence number sequence to expect? The assertion at the end is easy to understand though.\nIt would be much easier to understand with:\nsendBuffer(0);\nsendBuffer(1);\nsendBarrier(2);\nsendBuffer(3);\nsendBuffer(4);\n\nThese building blocks should also be reusable for the other tests.", "url": "https://github.com/apache/flink/pull/14052#discussion_r524016742", "createdAt": "2020-11-16T09:24:36Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannelTest.java", "diffHunk": "@@ -1125,70 +1127,137 @@ public void testUnblockReleasedChannel() throws Exception {\n \n \t@Test\n \tpublic void testPrioritySequenceNumbers() throws Exception {\n-\t\tfinal NetworkBufferPool networkBufferPool = new NetworkBufferPool(4, 4096);\n-\t\tSingleInputGate inputGate = new SingleInputGateBuilder()\n-\t\t\t.setChannelFactory(InputChannelBuilder::buildRemoteChannel)\n-\t\t\t.setBufferPoolFactory(networkBufferPool.createBufferPool(1, 4))\n-\t\t\t.setSegmentProvider(networkBufferPool)\n-\t\t\t.build();\n-\t\tfinal RemoteInputChannel channel = (RemoteInputChannel) inputGate.getChannel(0);\n-\t\tinputGate.setup();\n-\t\tinputGate.requestPartitions();\n+\t\tfinal RemoteInputChannel channel = buildInputGateAndGetChannel();\n+\t\tsendBuffersAndBarrier(channel, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de43e752d21e95496aab69e13d9c007fa29d5b2f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDExNTM3OA==", "bodyText": "Ah that what I was missing in the first main commit.\nI propose to squash the 2 main commits or at least already use the final name/type in the first main commit, so that the two commits don't touch every piece of code twice.", "url": "https://github.com/apache/flink/pull/14052#discussion_r524115378", "createdAt": "2020-11-16T10:52:51Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -98,14 +100,11 @@\n \n \tprivate final BufferManager bufferManager;\n \n-\t/**\n-\t * Indicates the last overtaken sequence number by the most recent {@link CheckpointBarrier}\n-\t * before task thread started checkpoint, or {@code null} if {@link CheckpointBarrier} hasn't\n-\t * arrived yet.\n-\t */\n \t@GuardedBy(\"receivedBuffers\")\n-\t@Nullable\n-\tprivate Integer lastOvertakenSequenceNumber = null;\n+\tprivate int lastBarrierSequenceNumber = NONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b6d028dde24fc8fd21e3a3542756c813fca9c13"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b6d028dde24fc8fd21e3a3542756c813fca9c13", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/9b6d028dde24fc8fd21e3a3542756c813fca9c13", "committedDate": "2020-11-13T15:20:07Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}, "afterCommit": {"oid": "4965e2e5cb1a2baebdb7e2f516df106a4a3f523f", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/4965e2e5cb1a2baebdb7e2f516df106a4a3f523f", "committedDate": "2020-11-17T09:30:45Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4965e2e5cb1a2baebdb7e2f516df106a4a3f523f", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/4965e2e5cb1a2baebdb7e2f516df106a4a3f523f", "committedDate": "2020-11-17T09:30:45Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}, "afterCommit": {"oid": "854da081b822a73282ae05bdeb890d3e87b9e7cb", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/854da081b822a73282ae05bdeb890d3e87b9e7cb", "committedDate": "2020-11-18T17:58:49Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88671ad26ad07b78ee2819c919c4e96f789f9437", "author": {"user": {"login": "pnowojski", "name": "Piotr Nowojski"}}, "url": "https://github.com/apache/flink/commit/88671ad26ad07b78ee2819c919c4e96f789f9437", "committedDate": "2020-11-18T18:05:20Z", "message": "[FLINK-20030][network] Rewrite RemoteInputChannel#getInflightBuffersUnsafe to use sequence numbers\n\nThis will make this method more stable for changes of the internal state of the RemoteInputChannel\nwhen timeouting aligned checkpoints."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a24deacbf6d88b856faba8add3a470e425451f7b", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/a24deacbf6d88b856faba8add3a470e425451f7b", "committedDate": "2020-11-18T18:05:20Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "854da081b822a73282ae05bdeb890d3e87b9e7cb", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/854da081b822a73282ae05bdeb890d3e87b9e7cb", "committedDate": "2020-11-18T17:58:49Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}, "afterCommit": {"oid": "a24deacbf6d88b856faba8add3a470e425451f7b", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/a24deacbf6d88b856faba8add3a470e425451f7b", "committedDate": "2020-11-18T18:05:20Z", "message": "[FLINK-20030][network] Introduce lastBarrierId in RemoteInputChannel\n\nThis allows to prevent overwriting of lastBarrierSqn from\nBarrierController when processing a newer barrier."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MzY4NTQ1", "url": "https://github.com/apache/flink/pull/14052#pullrequestreview-534368545", "createdAt": "2020-11-19T12:09:41Z", "commit": {"oid": "a24deacbf6d88b856faba8add3a470e425451f7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4224, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}