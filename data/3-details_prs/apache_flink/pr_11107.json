{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDAxNzk1", "number": 11107, "title": "[FLINK-16071][python] Optimize the cost of the get item of the Row", "bodyText": "What is the purpose of the change\nThis pull request will Optimize the cost of the get item of the Row in Python UDF\nBrief change log\n\nUsing FlattenRowCoder in Python UDF\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nIt is the perforce improvements without function test\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)\n\nHow does this patch test\nTest Code\n@udf(input_types=[DataTypes.INT(False)], result_type=DataTypes.INT(False))\ndef inc(x):\n    return x\n\nt_env.register_function(\"inc\", inc)\n\n# num_rows = 100000000\nnum_rows = 100000\nnum_columns = 100\n\nselect_list = [\"inc(c%s)\" % i for i in range(num_columns)]\nt_env.register_table_sink(\n    \"sink\",\n    PrintTableSink(\n        [\"c%s\" % i for i in range(num_columns)],\n        [DataTypes.INT(False)] * num_columns))\n\nt_env.from_table_source(MultiRowColumnTableSource(num_rows, num_columns)) \\\n    .select(','.join(select_list)) \\\n    .insert_into(\"sink\")\n\nbeg_time = time.time()\nt_env.execute(\"perf_test\")\nprint(\"consume time: \" + str(time.time() - beg_time))\n\nTest Results\nnum rows, num colums |  Consume Time(Before) | Consume Time(After)\n10w, 100                         |    53.32s                           |   22.18s\n100w,10                          |    55.88s                           |   33.85s", "createdAt": "2020-02-17T08:22:46Z", "url": "https://github.com/apache/flink/pull/11107", "merged": true, "mergeCommit": {"oid": "9bc6f693294952cd1456701e60d63722514a8b9b"}, "closed": true, "closedAt": "2020-02-17T14:00:24Z", "author": {"login": "HuangXingBo"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFIoPjAH2gAyMzc2MDAxNzk1OjkyMDMxNjkxMzBiMjQ1YTc3MzM1Mzg5ZDYzMTQ0ODUyNzEzOGNhNWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFKDnNAH2gAyMzc2MDAxNzk1OmEyZjI5OWExNDU4YTUyNGQwOTVlYTk4MzU2NmYzMmQzZjQ3NjRjNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9203169130b245a77335389d631448527138ca5b", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/9203169130b245a77335389d631448527138ca5b", "committedDate": "2020-02-17T07:58:54Z", "message": "[FLINK-16071][python] Optimize the cost of the get item of the Row"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NTU4NTI0", "url": "https://github.com/apache/flink/pull/11107#pullrequestreview-359558524", "createdAt": "2020-02-17T08:33:56Z", "commit": {"oid": "9203169130b245a77335389d631448527138ca5b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODozMzo1NlrOFqb4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwODozNToxNlrOFqb6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0MTM4NQ==", "bodyText": "The result of decode will be list for the performance. -> The decoded result will be flattened as a list of column values of a row instead of a row object.", "url": "https://github.com/apache/flink/pull/11107#discussion_r380041385", "createdAt": "2020-02-17T08:33:56Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -31,31 +32,31 @@\n FLINK_SCHEMA_CODER_URN = \"flink:coder:schema:v1\"\n \n \n-__all__ = ['RowCoder', 'BigIntCoder', 'TinyIntCoder', 'BooleanCoder',\n+__all__ = ['FlattenRowCoder', 'RowCoder', 'BigIntCoder', 'TinyIntCoder', 'BooleanCoder',\n            'SmallIntCoder', 'IntCoder', 'FloatCoder', 'DoubleCoder',\n            'BinaryCoder', 'CharCoder', 'DateCoder', 'TimeCoder',\n            'TimestampCoder', 'ArrayCoder', 'MapCoder', 'DecimalCoder']\n \n \n-class RowCoder(FastCoder):\n+class FlattenRowCoder(FastCoder):\n     \"\"\"\n-    Coder for Row.\n+    Coder for Row. The result of decode will be list for the performance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9203169130b245a77335389d631448527138ca5b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA0MTkzMw==", "bodyText": "What about moving this method to class FlattenRowCoder? It makes the code more readable.", "url": "https://github.com/apache/flink/pull/11107#discussion_r380041933", "createdAt": "2020-02-17T08:35:16Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/fn_execution/coders.py", "diffHunk": "@@ -319,7 +338,7 @@ def to_type_hint(self):\n \n @Coder.register_urn(FLINK_SCHEMA_CODER_URN, flink_fn_execution_pb2.Schema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9203169130b245a77335389d631448527138ca5b"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2f299a1458a524d095ea983566f32d3f4764c68", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/a2f299a1458a524d095ea983566f32d3f4764c68", "committedDate": "2020-02-17T09:38:42Z", "message": "fix comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4392, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}