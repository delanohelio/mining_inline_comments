{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Mjk3Nzgw", "number": 11420, "title": "[FLINK-16565][python][ml] Make Pipeline Json compitable between Java and Python if all PipelineStages are Java ones", "bodyText": "What is the purpose of the change\nMake Pipeline Json compitable between Java and Python if all PipelineStages are Java ones.\nBrief change log\n\nIn Pipeline.load_json(), also try to load json with Java method if can't load json with Python method.\nIn Pipeline.to_json(), returns a Java json string if all PipelineStages in this Pipeline are Java ones.\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded integration test(test_pipeline_from_and_to_java_json) for testing load_json and to_json\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? (PythonDocs)", "createdAt": "2020-03-16T15:03:23Z", "url": "https://github.com/apache/flink/pull/11420", "merged": true, "mergeCommit": {"oid": "a7dccf1945d7b2b4abc726c4ca213677df17d8bc"}, "closed": true, "closedAt": "2020-03-18T09:40:51Z", "author": {"login": "hequn8128"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOPN6wAH2gAyMzg5Mjk3NzgwOmQ2ZWVhOTIwNjBkYTNhZmRmNTQxZTJmY2M5MGUxMDNjMzRjZWYyNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOyHGlAFqTM3NjYxNDUwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259", "author": {"user": {"login": "hequn8128", "name": "Hequn Cheng"}}, "url": "https://github.com/apache/flink/commit/d6eea92060da3afdf541e2fcc90e103c34cef259", "committedDate": "2020-03-16T14:44:48Z", "message": "[FLINK-16565][python][ml] Make Pipeline Json compitable between Java and Python if all Pipelinestages are Java ones"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTc5MTA5", "url": "https://github.com/apache/flink/pull/11420#pullrequestreview-376179109", "createdAt": "2020-03-17T16:04:25Z", "commit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNDoyNVrOF3jJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxMjo0OFrOF3jg-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MTc1MA==", "bodyText": "nit: makes error message more verbose, express which stage is problematic\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Unexpected Java PipelineStage. It should be a %s, \"\n          \n          \n            \n                                    \"Unexpected Java PipelineStage: %s. Class should be a %s, \"", "url": "https://github.com/apache/flink/pull/11420#discussion_r393791750", "createdAt": "2020-03-17T16:04:25Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/api/base.py", "diffHunk": "@@ -265,11 +266,56 @@ def transform(self, t_env: TableEnvironment, input: Table) -> Table:\n         return input\n \n     def to_json(self) -> str:\n-        import jsonpickle\n-        return str(jsonpickle.encode(self, keys=True))\n+        \"\"\"\n+        If all PipelineStages in this Pipeline are Java ones, this method will return a\n+        Java json string, which can be loaded either from a Python Pipeline or a Java Pipeline,\n+        otherwise, it returns a Python json string which can only be loaded from a Python Pipeline.\n+        \"\"\"\n+        # if all PipelineStages are Java ones, we use Java toJson() to generate Json string\n+        # so that the string can also be loaded from Java side.\n+        if all([type(stage) in [JavaTransformer, JavaEstimator, JavaModel]\n+                for stage in self.get_stages()]):\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            for stage in self.get_stages():\n+                stage._convert_params_to_java(stage._j_obj)\n+                j_pipeline.appendStage(stage._j_obj)\n+            return j_pipeline.toJson()\n+        else:\n+            import jsonpickle\n+            return str(jsonpickle.encode(self, keys=True))\n \n     def load_json(self, json: str) -> None:\n-        import jsonpickle\n-        pipeline = jsonpickle.decode(json, keys=True)\n-        for stage in pipeline.get_stages():\n-            self.append_stage(stage)\n+        \"\"\"\n+        This method can either load from a Java Pipeline json or a Python Pipeline json.\n+        \"\"\"\n+        # noinspection PyBroadException\n+        try:\n+            # try to load json with Python method\n+            import jsonpickle\n+            pipeline = jsonpickle.decode(json, keys=True)\n+            for stage in pipeline.get_stages():\n+                self.append_stage(stage)\n+        except Exception:\n+            # if can't load json with Python method, try to load with Java method\n+            gw = get_gateway()\n+            j_pipeline = gw.jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.loadJson(json)\n+\n+            for j_stage in j_pipeline.getStages():\n+                j_stage_class = j_stage.getClass()\n+                j_transformer_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Transformer)\n+                j_estimator_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Estimator)\n+                j_model_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Model)\n+                if j_transformer_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaTransformer(j_stage))\n+                elif j_estimator_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaEstimator(j_stage))\n+                elif j_model_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaModel(j_stage))\n+                else:\n+                    raise TypeError(\n+                        \"Unexpected Java PipelineStage. It should be a %s, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MjAzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    (j_transformer_class.getCanonicalName(),\n          \n          \n            \n                                    (j_stage_class.getCanonicalName(),\n          \n          \n            \n                                     j_transformer_class.getCanonicalName(),", "url": "https://github.com/apache/flink/pull/11420#discussion_r393792036", "createdAt": "2020-03-17T16:04:51Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/api/base.py", "diffHunk": "@@ -265,11 +266,56 @@ def transform(self, t_env: TableEnvironment, input: Table) -> Table:\n         return input\n \n     def to_json(self) -> str:\n-        import jsonpickle\n-        return str(jsonpickle.encode(self, keys=True))\n+        \"\"\"\n+        If all PipelineStages in this Pipeline are Java ones, this method will return a\n+        Java json string, which can be loaded either from a Python Pipeline or a Java Pipeline,\n+        otherwise, it returns a Python json string which can only be loaded from a Python Pipeline.\n+        \"\"\"\n+        # if all PipelineStages are Java ones, we use Java toJson() to generate Json string\n+        # so that the string can also be loaded from Java side.\n+        if all([type(stage) in [JavaTransformer, JavaEstimator, JavaModel]\n+                for stage in self.get_stages()]):\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            for stage in self.get_stages():\n+                stage._convert_params_to_java(stage._j_obj)\n+                j_pipeline.appendStage(stage._j_obj)\n+            return j_pipeline.toJson()\n+        else:\n+            import jsonpickle\n+            return str(jsonpickle.encode(self, keys=True))\n \n     def load_json(self, json: str) -> None:\n-        import jsonpickle\n-        pipeline = jsonpickle.decode(json, keys=True)\n-        for stage in pipeline.get_stages():\n-            self.append_stage(stage)\n+        \"\"\"\n+        This method can either load from a Java Pipeline json or a Python Pipeline json.\n+        \"\"\"\n+        # noinspection PyBroadException\n+        try:\n+            # try to load json with Python method\n+            import jsonpickle\n+            pipeline = jsonpickle.decode(json, keys=True)\n+            for stage in pipeline.get_stages():\n+                self.append_stage(stage)\n+        except Exception:\n+            # if can't load json with Python method, try to load with Java method\n+            gw = get_gateway()\n+            j_pipeline = gw.jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.loadJson(json)\n+\n+            for j_stage in j_pipeline.getStages():\n+                j_stage_class = j_stage.getClass()\n+                j_transformer_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Transformer)\n+                j_estimator_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Estimator)\n+                j_model_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Model)\n+                if j_transformer_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaTransformer(j_stage))\n+                elif j_estimator_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaEstimator(j_stage))\n+                elif j_model_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaModel(j_stage))\n+                else:\n+                    raise TypeError(\n+                        \"Unexpected Java PipelineStage. It should be a %s, \"\n+                        \"%s or a %s.\" %\n+                        (j_transformer_class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5Nzg4Mw==", "bodyText": "this piece of code replicates most of the logic in Pipeline.to_json() except for the hard-coded pipeline stage \"select_cols\". was wondering if there's a better way of making the test, e.g. use a json string literal here?", "url": "https://github.com/apache/flink/pull/11420#discussion_r393797883", "createdAt": "2020-03-17T16:12:48Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/tests/test_pipeline_it_case.py", "diffHunk": "@@ -169,3 +169,39 @@ def test_pipeline(self):\n         # the first input is false since 0 + 0 is smaller than the max_sum 14.\n         # the second input is true since 12 + 3 is bigger than the max_sum 14.\n         self.assert_equals(actual, [\"false\", \"true\"])\n+\n+    def test_pipeline_from_and_to_java_json(self):\n+\n+        def get_java_pipeline_json():\n+            wrapper = WrapperTransformer(selected_cols=[\"a\", \"b\"])\n+            wrapper._convert_params_to_java(wrapper._j_obj)\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.appendStage(wrapper._j_obj)\n+            return j_pipeline.toJson()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf17c53b9dd8dad8d8e2286c2140f96dca488b3", "author": {"user": {"login": "hequn8128", "name": "Hequn Cheng"}}, "url": "https://github.com/apache/flink/commit/acf17c53b9dd8dad8d8e2286c2140f96dca488b3", "committedDate": "2020-03-18T02:11:38Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTU4MTY1", "url": "https://github.com/apache/flink/pull/11420#pullrequestreview-376558165", "createdAt": "2020-03-18T04:31:28Z", "commit": {"oid": "acf17c53b9dd8dad8d8e2286c2140f96dca488b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTc5NTQ5", "url": "https://github.com/apache/flink/pull/11420#pullrequestreview-376579549", "createdAt": "2020-03-18T05:50:43Z", "commit": {"oid": "acf17c53b9dd8dad8d8e2286c2140f96dca488b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1MDo0M1rOF33Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1MDo0M1rOF33Hfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExOTAzOA==", "bodyText": "Do we know the exact exception type here? It would good to not naively catch all the exception if possible. If we don't know the exact exception, we should probably remember the exception and raise it when the Java Pipeline load also failed. The error message would then be something like:\n\"Cannot load the JSON as either a Java Pipeline or a Python Pipeline. Python Pipeline load failed due to THIS_EXCEPTION. Java Pipeline load failed due to ANOTHER_EXCEPTION.\"", "url": "https://github.com/apache/flink/pull/11420#discussion_r394119038", "createdAt": "2020-03-18T05:50:43Z", "author": {"login": "becketqin"}, "path": "flink-python/pyflink/ml/api/base.py", "diffHunk": "@@ -265,11 +266,57 @@ def transform(self, t_env: TableEnvironment, input: Table) -> Table:\n         return input\n \n     def to_json(self) -> str:\n-        import jsonpickle\n-        return str(jsonpickle.encode(self, keys=True))\n+        \"\"\"\n+        If all PipelineStages in this Pipeline are Java ones, this method will return a\n+        Java json string, which can be loaded either from a Python Pipeline or a Java Pipeline,\n+        otherwise, it returns a Python json string which can only be loaded from a Python Pipeline.\n+        \"\"\"\n+        # if all PipelineStages are Java ones, we use Java toJson() to generate Json string\n+        # so that the string can also be loaded from Java side.\n+        if all([type(stage) in [JavaTransformer, JavaEstimator, JavaModel]\n+                for stage in self.get_stages()]):\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            for stage in self.get_stages():\n+                stage._convert_params_to_java(stage._j_obj)\n+                j_pipeline.appendStage(stage._j_obj)\n+            return j_pipeline.toJson()\n+        else:\n+            import jsonpickle\n+            return str(jsonpickle.encode(self, keys=True))\n \n     def load_json(self, json: str) -> None:\n-        import jsonpickle\n-        pipeline = jsonpickle.decode(json, keys=True)\n-        for stage in pipeline.get_stages():\n-            self.append_stage(stage)\n+        \"\"\"\n+        This method can either load from a Java Pipeline json or a Python Pipeline json.\n+        \"\"\"\n+        # noinspection PyBroadException\n+        try:\n+            # try to load json with Python method\n+            import jsonpickle\n+            pipeline = jsonpickle.decode(json, keys=True)\n+            for stage in pipeline.get_stages():\n+                self.append_stage(stage)\n+        except Exception:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf17c53b9dd8dad8d8e2286c2140f96dca488b3"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "530f2d828bf1c07e990b25a63c8f93bb127733bf", "author": {"user": {"login": "hequn8128", "name": "Hequn Cheng"}}, "url": "https://github.com/apache/flink/commit/530f2d828bf1c07e990b25a63c8f93bb127733bf", "committedDate": "2020-03-18T07:00:38Z", "message": "improve the error handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NjE0NTA1", "url": "https://github.com/apache/flink/pull/11420#pullrequestreview-376614505", "createdAt": "2020-03-18T07:24:02Z", "commit": {"oid": "530f2d828bf1c07e990b25a63c8f93bb127733bf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2807, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}