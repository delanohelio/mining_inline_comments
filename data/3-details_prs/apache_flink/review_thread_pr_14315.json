{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTg1NzEz", "number": 14315, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjoyMTo0OFrOFCsbJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjoyMzoyNFrOFDPIhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzY5MzE4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/nodes/exec/TestingBatchExecNode.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjoyMTo0OFrOIB_LOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMjoyMTo0OFrOIB_LOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODk1NDU1NA==", "bodyText": "Maybe it's useless import?", "url": "https://github.com/apache/flink/pull/14315#discussion_r538954554", "createdAt": "2020-12-09T02:21:48Z", "author": {"login": "V1ncentzzZ"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/nodes/exec/TestingBatchExecNode.scala", "diffHunk": "@@ -23,6 +23,7 @@ import org.apache.flink.table.api.TableConfig\n import org.apache.flink.table.planner.calcite.{FlinkContextImpl, FlinkRelOptClusterFactory, FlinkRexBuilder, FlinkTypeFactory, FlinkTypeSystem}\n import org.apache.flink.table.planner.delegation.BatchPlanner\n import org.apache.flink.table.planner.plan.nodes.physical.batch.BatchPhysicalRel\n+import org.apache.flink.table.types.logical.RowType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d81f10ae1ee99ae852e4333e9ac766c44f563cf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTMxMDU2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/utils/ExecNodePlanDumper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMTo1ODowNlrOICx4Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzozNTozMVrOICz_4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NTIzOQ==", "bodyText": "I think it is a dag not tree?", "url": "https://github.com/apache/flink/pull/14315#discussion_r539785239", "createdAt": "2020-12-10T01:58:06Z", "author": {"login": "wenlong88"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/utils/ExecNodePlanDumper.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.utils;\n+\n+import org.apache.flink.table.planner.plan.nodes.calcite.LegacySink;\n+import org.apache.flink.table.planner.plan.nodes.calcite.Sink;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNode;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitor;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitorImpl;\n+import org.apache.flink.table.planner.plan.nodes.physical.FlinkPhysicalRel;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An utility class for converting an exec node plan to a string as a tree style.\n+ */\n+public class ExecNodePlanDumper {\n+\n+\t/**\n+\t * Converts an {@link ExecNode} tree to a string as a tree style.\n+\t *\n+\t * @param node the ExecNode to convert\n+\t * @return explain plan of ExecNode\n+\t *\n+\t * <p> The following tree of {@link ExecNode}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e7b23c85777667d339a659a70922d79d8ca9a79"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyMDAwMA==", "bodyText": "if there is only one sink (root) node, it's a rooted tree, see https://en.wikipedia.org/wiki/Tree_(graph_theory)#Rooted_tree", "url": "https://github.com/apache/flink/pull/14315#discussion_r539820000", "createdAt": "2020-12-10T03:35:31Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/utils/ExecNodePlanDumper.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.utils;\n+\n+import org.apache.flink.table.planner.plan.nodes.calcite.LegacySink;\n+import org.apache.flink.table.planner.plan.nodes.calcite.Sink;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNode;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitor;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitorImpl;\n+import org.apache.flink.table.planner.plan.nodes.physical.FlinkPhysicalRel;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An utility class for converting an exec node plan to a string as a tree style.\n+ */\n+public class ExecNodePlanDumper {\n+\n+\t/**\n+\t * Converts an {@link ExecNode} tree to a string as a tree style.\n+\t *\n+\t * @param node the ExecNode to convert\n+\t * @return explain plan of ExecNode\n+\t *\n+\t * <p> The following tree of {@link ExecNode}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4NTIzOQ=="}, "originalCommit": {"oid": "0e7b23c85777667d339a659a70922d79d8ca9a79"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTMzMjg0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/utils/ExecNodePlanDumper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjowNTo0M1rOICyErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoxNjozOFrOICzmPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODQ2MA==", "bodyText": "just wonder that why the result doesn't contain 2 tree starting from sink but three trees? IMO, treeToString and dagToString can be unified and it maybe easier to understand for user if the plan starts from sink.", "url": "https://github.com/apache/flink/pull/14315#discussion_r539788460", "createdAt": "2020-12-10T02:05:43Z", "author": {"login": "wenlong88"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/utils/ExecNodePlanDumper.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.utils;\n+\n+import org.apache.flink.table.planner.plan.nodes.calcite.LegacySink;\n+import org.apache.flink.table.planner.plan.nodes.calcite.Sink;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNode;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitor;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitorImpl;\n+import org.apache.flink.table.planner.plan.nodes.physical.FlinkPhysicalRel;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An utility class for converting an exec node plan to a string as a tree style.\n+ */\n+public class ExecNodePlanDumper {\n+\n+\t/**\n+\t * Converts an {@link ExecNode} tree to a string as a tree style.\n+\t *\n+\t * @param node the ExecNode to convert\n+\t * @return explain plan of ExecNode\n+\t *\n+\t * <p> The following tree of {@link ExecNode}\n+\t * <pre>{@code\n+\t *        Sink\n+\t *         |\n+\t *        Join\n+\t *      /      \\\n+\t *  Filter1  Filter2\n+\t *     \\     /\n+\t *    Project1\n+\t *       |\n+\t *     Scan\n+\t * }</pre>\n+\t *\n+\t * would be converted to the tree style as following:\n+\t * <pre>{@code\n+\t * Sink\n+\t * +- Join\n+\t *    :- Filter1\n+\t *    :  +- Project1(reuse_id=[1])\n+\t *    :     +- Scan\n+\t *    +- Filter2\n+\t *       +- Reused(reference_id=[1])\n+\t * }\n+\t * }</pre>\n+\t */\n+\tpublic static String treeToString(ExecNode<?> node) {\n+\t\treturn treeToString(node, new ArrayList<>(), false);\n+\t}\n+\n+\t/**\n+\t * Converts an {@link ExecNode} tree to a string as a tree style.\n+\t *\n+\t * @param node the ExecNode to convert\n+\t * @param borders node sets that stop visit when meet them\n+\t * @param includingBorders Whether print the border nodes\n+\t * @return the plan of ExecNode\n+\t */\n+\tpublic static String treeToString(ExecNode<?> node, List<ExecNode<?>> borders, boolean includingBorders) {\n+\t\tcheckNotNull(node, \"node should not be null.\");\n+\t\t// convert to mutable list\n+\t\tList<ExecNode<?>> borderList = new ArrayList<>(checkNotNull(borders, \"borders should not be null.\"));\n+\t\tTreeReuseInfo reuseInfo = new TreeReuseInfo(node, borderList);\n+\t\treturn doConvertTreeToString(node, reuseInfo, true, borderList, includingBorders);\n+\t}\n+\n+\t/**\n+\t * Converts an {@link ExecNode} DAG to a string as a tree style.\n+\t *\n+\t * @param nodes the ExecNodes to convert\n+\t * @return the plan of ExecNode\n+\t *\n+\t * <p> The following DAG of {@link ExecNode}\n+\t * <pre>{@code\n+\t *     Sink1    Sink2\n+\t *      |        |\n+\t *   Filter3  Filter4\n+\t *       \\     /\n+\t *        Join\n+\t *      /      \\\n+\t *  Filter1  Filter2\n+\t *     \\     /\n+\t *    Project1\n+\t *       |\n+\t *     Scan\n+\t * }</pre>\n+\t *\n+\t * would be converted to the tree style as following:\n+\t * <pre>{@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMzQzOA==", "bodyText": "how to display the reused (common) plan ? If  the result of the example just contains two trees, each tree will display all nodes from sink to source.", "url": "https://github.com/apache/flink/pull/14315#discussion_r539813438", "createdAt": "2020-12-10T03:16:38Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/utils/ExecNodePlanDumper.java", "diffHunk": "@@ -0,0 +1,391 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.utils;\n+\n+import org.apache.flink.table.planner.plan.nodes.calcite.LegacySink;\n+import org.apache.flink.table.planner.plan.nodes.calcite.Sink;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNode;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitor;\n+import org.apache.flink.table.planner.plan.nodes.exec.ExecNodeVisitorImpl;\n+import org.apache.flink.table.planner.plan.nodes.physical.FlinkPhysicalRel;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+\n+/**\n+ * An utility class for converting an exec node plan to a string as a tree style.\n+ */\n+public class ExecNodePlanDumper {\n+\n+\t/**\n+\t * Converts an {@link ExecNode} tree to a string as a tree style.\n+\t *\n+\t * @param node the ExecNode to convert\n+\t * @return explain plan of ExecNode\n+\t *\n+\t * <p> The following tree of {@link ExecNode}\n+\t * <pre>{@code\n+\t *        Sink\n+\t *         |\n+\t *        Join\n+\t *      /      \\\n+\t *  Filter1  Filter2\n+\t *     \\     /\n+\t *    Project1\n+\t *       |\n+\t *     Scan\n+\t * }</pre>\n+\t *\n+\t * would be converted to the tree style as following:\n+\t * <pre>{@code\n+\t * Sink\n+\t * +- Join\n+\t *    :- Filter1\n+\t *    :  +- Project1(reuse_id=[1])\n+\t *    :     +- Scan\n+\t *    +- Filter2\n+\t *       +- Reused(reference_id=[1])\n+\t * }\n+\t * }</pre>\n+\t */\n+\tpublic static String treeToString(ExecNode<?> node) {\n+\t\treturn treeToString(node, new ArrayList<>(), false);\n+\t}\n+\n+\t/**\n+\t * Converts an {@link ExecNode} tree to a string as a tree style.\n+\t *\n+\t * @param node the ExecNode to convert\n+\t * @param borders node sets that stop visit when meet them\n+\t * @param includingBorders Whether print the border nodes\n+\t * @return the plan of ExecNode\n+\t */\n+\tpublic static String treeToString(ExecNode<?> node, List<ExecNode<?>> borders, boolean includingBorders) {\n+\t\tcheckNotNull(node, \"node should not be null.\");\n+\t\t// convert to mutable list\n+\t\tList<ExecNode<?>> borderList = new ArrayList<>(checkNotNull(borders, \"borders should not be null.\"));\n+\t\tTreeReuseInfo reuseInfo = new TreeReuseInfo(node, borderList);\n+\t\treturn doConvertTreeToString(node, reuseInfo, true, borderList, includingBorders);\n+\t}\n+\n+\t/**\n+\t * Converts an {@link ExecNode} DAG to a string as a tree style.\n+\t *\n+\t * @param nodes the ExecNodes to convert\n+\t * @return the plan of ExecNode\n+\t *\n+\t * <p> The following DAG of {@link ExecNode}\n+\t * <pre>{@code\n+\t *     Sink1    Sink2\n+\t *      |        |\n+\t *   Filter3  Filter4\n+\t *       \\     /\n+\t *        Join\n+\t *      /      \\\n+\t *  Filter1  Filter2\n+\t *     \\     /\n+\t *    Project1\n+\t *       |\n+\t *     Scan\n+\t * }</pre>\n+\t *\n+\t * would be converted to the tree style as following:\n+\t * <pre>{@code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc4ODQ2MA=="}, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTM1ODkxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/FlinkRelNode.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjoxNTozOVrOICySww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMzoyMDoxN1rOICzrBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5MjA2Nw==", "bodyText": "what is the purpose to change this? is there any bad case to use Infix in all expresssion?", "url": "https://github.com/apache/flink/pull/14315#discussion_r539792067", "createdAt": "2020-12-10T02:15:39Z", "author": {"login": "wenlong88"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/FlinkRelNode.scala", "diffHunk": "@@ -89,19 +89,31 @@ trait FlinkRelNode extends RelNode {\n         val ops = c.getOperands.map(\n           getExpressionString(_, inFields, localExprsTable, expressionFormat))\n         c.getOperator match {\n-          case _ : SqlAsOperator => ops.head\n+          case _: SqlAsOperator => ops.head\n           case _ =>\n-            expressionFormat match {\n-              case ExpressionFormat.Infix if ops.size() == 1 =>\n-                val operand = ops.head\n-                c.getKind match {\n-                  case IS_FALSE | IS_NOT_FALSE | IS_TRUE | IS_NOT_TRUE | IS_UNKNOWN | IS_NULL |\n-                       IS_NOT_NULL => s\"$operand $op\"\n-                  case _ => s\"$op($operand)\"\n-                }\n-              case ExpressionFormat.Infix => s\"(${ops.mkString(s\" $op \")})\"\n-              case ExpressionFormat.PostFix => s\"(${ops.mkString(\", \")})$op\"\n-              case ExpressionFormat.Prefix => s\"$op(${ops.mkString(\", \")})\"\n+            if (ops.size() == 1) {\n+              val operand = ops.head\n+              c.getKind match {\n+                case IS_FALSE | IS_NOT_FALSE | IS_TRUE | IS_NOT_TRUE | IS_UNKNOWN\n+                     | IS_NULL | IS_NOT_NULL => s\"$operand $op\"\n+                case _ => s\"$op($operand)\"\n+              }\n+            } else {\n+              c.getKind match {\n+                case TIMES | DIVIDE | PLUS | MINUS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNDY2Mw==", "bodyText": "The udfs should be prefix format. my_add(a, b) for prefix format is easier readable than a my_add b for infix format.", "url": "https://github.com/apache/flink/pull/14315#discussion_r539814663", "createdAt": "2020-12-10T03:20:17Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/FlinkRelNode.scala", "diffHunk": "@@ -89,19 +89,31 @@ trait FlinkRelNode extends RelNode {\n         val ops = c.getOperands.map(\n           getExpressionString(_, inFields, localExprsTable, expressionFormat))\n         c.getOperator match {\n-          case _ : SqlAsOperator => ops.head\n+          case _: SqlAsOperator => ops.head\n           case _ =>\n-            expressionFormat match {\n-              case ExpressionFormat.Infix if ops.size() == 1 =>\n-                val operand = ops.head\n-                c.getKind match {\n-                  case IS_FALSE | IS_NOT_FALSE | IS_TRUE | IS_NOT_TRUE | IS_UNKNOWN | IS_NULL |\n-                       IS_NOT_NULL => s\"$operand $op\"\n-                  case _ => s\"$op($operand)\"\n-                }\n-              case ExpressionFormat.Infix => s\"(${ops.mkString(s\" $op \")})\"\n-              case ExpressionFormat.PostFix => s\"(${ops.mkString(\", \")})$op\"\n-              case ExpressionFormat.Prefix => s\"$op(${ops.mkString(\", \")})\"\n+            if (ops.size() == 1) {\n+              val operand = ops.head\n+              c.getKind match {\n+                case IS_FALSE | IS_NOT_FALSE | IS_TRUE | IS_NOT_TRUE | IS_UNKNOWN\n+                     | IS_NULL | IS_NOT_NULL => s\"$operand $op\"\n+                case _ => s\"$op($operand)\"\n+              }\n+            } else {\n+              c.getKind match {\n+                case TIMES | DIVIDE | PLUS | MINUS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5MjA2Nw=="}, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTM3OTg5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/batch/sql/ValuesTest.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMjoyMzoyNFrOICydtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDoyMjo0MlrOIC04_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5NDg3MA==", "bodyText": "why source not reused?", "url": "https://github.com/apache/flink/pull/14315#discussion_r539794870", "createdAt": "2020-12-10T02:23:24Z", "author": {"login": "wenlong88"}, "path": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/batch/sql/ValuesTest.xml", "diffHunk": "@@ -34,9 +34,9 @@ LogicalProject(a=[$0], b=[$1]), rowType=[RecordType(INTEGER a, DECIMAL(20, 1) b)\n       <![CDATA[\n Union(all=[true], union=[EXPR$0, EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n :- Calc(select=[1 AS EXPR$0, 2.0:DECIMAL(20, 1) AS EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n-:  +- Values(tuples=[[{ 0 }]], values=[ZERO], reuse_id=[1]), rowType=[RecordType(INTEGER ZERO)]\n+:  +- Values(tuples=[[{ 0 }]], values=[ZERO]), rowType=[RecordType(INTEGER ZERO)]\n +- Calc(select=[3 AS EXPR$0, 4.0:DECIMAL(20, 1) AS EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n-   +- Reused(reference_id=[1]), rowType=[RecordType(INTEGER ZERO)]\n+   +- Values(tuples=[[{ 0 }]], values=[ZERO]), rowType=[RecordType(INTEGER ZERO)]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxNzYzMw==", "bodyText": "because the case tests the rel plan with row type, only exec plan will reuse the sub-plan, not rel plan", "url": "https://github.com/apache/flink/pull/14315#discussion_r539817633", "createdAt": "2020-12-10T03:28:52Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/batch/sql/ValuesTest.xml", "diffHunk": "@@ -34,9 +34,9 @@ LogicalProject(a=[$0], b=[$1]), rowType=[RecordType(INTEGER a, DECIMAL(20, 1) b)\n       <![CDATA[\n Union(all=[true], union=[EXPR$0, EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n :- Calc(select=[1 AS EXPR$0, 2.0:DECIMAL(20, 1) AS EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n-:  +- Values(tuples=[[{ 0 }]], values=[ZERO], reuse_id=[1]), rowType=[RecordType(INTEGER ZERO)]\n+:  +- Values(tuples=[[{ 0 }]], values=[ZERO]), rowType=[RecordType(INTEGER ZERO)]\n +- Calc(select=[3 AS EXPR$0, 4.0:DECIMAL(20, 1) AS EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n-   +- Reused(reference_id=[1]), rowType=[RecordType(INTEGER ZERO)]\n+   +- Values(tuples=[[{ 0 }]], values=[ZERO]), rowType=[RecordType(INTEGER ZERO)]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5NDg3MA=="}, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzNDYyMQ==", "bodyText": "I had created a JIRA  to refactor the test case, after that your concern will be dispelled", "url": "https://github.com/apache/flink/pull/14315#discussion_r539834621", "createdAt": "2020-12-10T04:22:42Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/test/resources/org/apache/flink/table/planner/plan/batch/sql/ValuesTest.xml", "diffHunk": "@@ -34,9 +34,9 @@ LogicalProject(a=[$0], b=[$1]), rowType=[RecordType(INTEGER a, DECIMAL(20, 1) b)\n       <![CDATA[\n Union(all=[true], union=[EXPR$0, EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n :- Calc(select=[1 AS EXPR$0, 2.0:DECIMAL(20, 1) AS EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n-:  +- Values(tuples=[[{ 0 }]], values=[ZERO], reuse_id=[1]), rowType=[RecordType(INTEGER ZERO)]\n+:  +- Values(tuples=[[{ 0 }]], values=[ZERO]), rowType=[RecordType(INTEGER ZERO)]\n +- Calc(select=[3 AS EXPR$0, 4.0:DECIMAL(20, 1) AS EXPR$1]), rowType=[RecordType(INTEGER EXPR$0, DECIMAL(20, 1) EXPR$1)]\n-   +- Reused(reference_id=[1]), rowType=[RecordType(INTEGER ZERO)]\n+   +- Values(tuples=[[{ 0 }]], values=[ZERO]), rowType=[RecordType(INTEGER ZERO)]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc5NDg3MA=="}, "originalCommit": {"oid": "c89b7c0522e126bb172acaef9d182d602a4a7d34"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4698, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}