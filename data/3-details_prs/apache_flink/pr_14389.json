{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMTI0ODE0", "number": 14389, "title": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work", "bodyText": "What is the purpose of the change\nThis pull request will Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work\nVerifying this change\nThis change added tests and can be verified as follows:\n\nIT case test_flat_aggregate\nIT case test_flat_aggregate_list_view\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not applicable)", "createdAt": "2020-12-15T09:59:14Z", "url": "https://github.com/apache/flink/pull/14389", "merged": true, "mergeCommit": {"oid": "9c486d1c1d245263630b2e9dc0f3d6a95e130a4d"}, "closed": true, "closedAt": "2020-12-17T02:00:12Z", "author": {"login": "HuangXingBo"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmlgebgH2gAyNTQwMTI0ODE0OjMwMjdjMjVlMTlkYmI1MWI5Zjk2NzM4OTU5ZTA0MzQxMWZhYmZmNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmqLo6gFqTU1MzQzMTUxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/3027c25e19dbb51b9f96738959e043411fabff57", "committedDate": "2020-12-16T02:28:19Z", "message": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3385ab7b31e3d312cc4f98ab9b619c15ad400215", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/3385ab7b31e3d312cc4f98ab9b619c15ad400215", "committedDate": "2020-12-15T09:20:28Z", "message": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work"}, "afterCommit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/3027c25e19dbb51b9f96738959e043411fabff57", "committedDate": "2020-12-16T02:28:19Z", "message": "[FLINK-20528][python] Add Python building blocks to make sure the basic functionality of Stream Group Table Aggregation could work"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDA1MjU5", "url": "https://github.com/apache/flink/pull/14389#pullrequestreview-553405259", "createdAt": "2020-12-16T07:04:56Z", "commit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowNDo1NlrOIG2Yug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQwNzowOTowNFrOIG2mwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1MzQzNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n          \n          \n            \n            def udtaf(f: Union[Callable, TableAggregateFunction, Type] = None,", "url": "https://github.com/apache/flink/pull/14389#discussion_r544053434", "createdAt": "2020-12-16T07:04:56Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -647,3 +692,72 @@ def udaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n     else:\n         return _create_udaf(f, input_types, result_type, accumulator_type, func_type,\n                             deterministic, name)\n+\n+\n+def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NDIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    raise ValueError(\"The func_type must be one of 'general', got %s.\"\n          \n          \n            \n                    raise ValueError(\"The func_type must be 'general', got %s.\"", "url": "https://github.com/apache/flink/pull/14389#discussion_r544054227", "createdAt": "2020-12-16T07:05:51Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -647,3 +692,72 @@ def udaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n     else:\n         return _create_udaf(f, input_types, result_type, accumulator_type, func_type,\n                             deterministic, name)\n+\n+\n+def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n+          input_types: Union[List[DataType], DataType] = None, result_type: DataType = None,\n+          accumulator_type: DataType = None, deterministic: bool = None, name: str = None,\n+          func_type: str = 'general') -> Union[UserDefinedAggregateFunctionWrapper, Callable]:\n+    \"\"\"\n+    Helper method for creating a user-defined table aggregate function.\n+\n+    Example:\n+    ::\n+\n+        >>> # The input_types is optional.\n+        >>> class Top2(TableAggregateFunction):\n+        ...     def emit_value(self, accumulator):\n+        ...         yield Row(accumulator[0])\n+        ...         yield Row(accumulator[1])\n+        ...\n+        ...     def create_accumulator(self):\n+        ...         return [None, None]\n+        ...\n+        ...     def accumulate(self, accumulator, *args):\n+        ...         if args[0] is not None:\n+        ...             if accumulator[0] is None or args[0] > accumulator[0]:\n+        ...                 accumulator[1] = accumulator[0]\n+        ...                 accumulator[0] = args[0]\n+        ...             elif accumulator[1] is None or args[0] > accumulator[1]:\n+        ...                 accumulator[1] = args[0]\n+        ...\n+        ...     def retract(self, accumulator, *args):\n+        ...         accumulator[0] = accumulator[0] - 1\n+        ...\n+        ...     def merge(self, accumulator, accumulators):\n+        ...         for other_acc in accumulators:\n+        ...             self.accumulate(accumulator, other_acc[0])\n+        ...             self.accumulate(accumulator, other_acc[1])\n+        ...\n+        ...     def get_accumulator_type(self):\n+        ...         return DataTypes.ARRAY(DataTypes.BIGINT())\n+        ...\n+        ...     def get_result_type(self):\n+        ...         return DataTypes.ROW(\n+        ...             [DataTypes.FIELD(\"a\", DataTypes.BIGINT())])\n+        >>> top2 = udtaf(Top2())\n+\n+    :param f: user-defined table aggregate function.\n+    :param input_types: optional, the input data types.\n+    :param result_type: the result data type.\n+    :param accumulator_type: optional, the accumulator data type.\n+    :param deterministic: the determinism of the function's results. True if and only if a call to\n+                          this function is guaranteed to always return the same result given the\n+                          same parameters. (default True)\n+    :param name: the function name.\n+    :param func_type: the type of the python function, available value: general\n+                     (default: general)\n+    :return: UserDefinedAggregateFunctionWrapper or function.\n+\n+    .. versionadded:: 1.13.0\n+    \"\"\"\n+    if func_type != 'general':\n+        raise ValueError(\"The func_type must be one of 'general', got %s.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NTA4MA==", "bodyText": "So it still doesn't support pandas? Could you create a ticket?", "url": "https://github.com/apache/flink/pull/14389#discussion_r544055080", "createdAt": "2020-12-16T07:06:55Z", "author": {"login": "dianfu"}, "path": "flink-python/pyflink/table/udf.py", "diffHunk": "@@ -647,3 +692,72 @@ def udaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n     else:\n         return _create_udaf(f, input_types, result_type, accumulator_type, func_type,\n                             deterministic, name)\n+\n+\n+def udtaf(f: Union[Callable, UserDefinedFunction, Type] = None,\n+          input_types: Union[List[DataType], DataType] = None, result_type: DataType = None,\n+          accumulator_type: DataType = None, deterministic: bool = None, name: str = None,\n+          func_type: str = 'general') -> Union[UserDefinedAggregateFunctionWrapper, Callable]:\n+    \"\"\"\n+    Helper method for creating a user-defined table aggregate function.\n+\n+    Example:\n+    ::\n+\n+        >>> # The input_types is optional.\n+        >>> class Top2(TableAggregateFunction):\n+        ...     def emit_value(self, accumulator):\n+        ...         yield Row(accumulator[0])\n+        ...         yield Row(accumulator[1])\n+        ...\n+        ...     def create_accumulator(self):\n+        ...         return [None, None]\n+        ...\n+        ...     def accumulate(self, accumulator, *args):\n+        ...         if args[0] is not None:\n+        ...             if accumulator[0] is None or args[0] > accumulator[0]:\n+        ...                 accumulator[1] = accumulator[0]\n+        ...                 accumulator[0] = args[0]\n+        ...             elif accumulator[1] is None or args[0] > accumulator[1]:\n+        ...                 accumulator[1] = args[0]\n+        ...\n+        ...     def retract(self, accumulator, *args):\n+        ...         accumulator[0] = accumulator[0] - 1\n+        ...\n+        ...     def merge(self, accumulator, accumulators):\n+        ...         for other_acc in accumulators:\n+        ...             self.accumulate(accumulator, other_acc[0])\n+        ...             self.accumulate(accumulator, other_acc[1])\n+        ...\n+        ...     def get_accumulator_type(self):\n+        ...         return DataTypes.ARRAY(DataTypes.BIGINT())\n+        ...\n+        ...     def get_result_type(self):\n+        ...         return DataTypes.ROW(\n+        ...             [DataTypes.FIELD(\"a\", DataTypes.BIGINT())])\n+        >>> top2 = udtaf(Top2())\n+\n+    :param f: user-defined table aggregate function.\n+    :param input_types: optional, the input data types.\n+    :param result_type: the result data type.\n+    :param accumulator_type: optional, the accumulator data type.\n+    :param deterministic: the determinism of the function's results. True if and only if a call to\n+                          this function is guaranteed to always return the same result given the\n+                          same parameters. (default True)\n+    :param name: the function name.\n+    :param func_type: the type of the python function, available value: general\n+                     (default: general)\n+    :return: UserDefinedAggregateFunctionWrapper or function.\n+\n+    .. versionadded:: 1.13.0\n+    \"\"\"\n+    if func_type != 'general':\n+        raise ValueError(\"The func_type must be one of 'general', got %s.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NDIyNw=="}, "originalCommit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDA1NzAyNQ==", "bodyText": "What's the purpose of this change?", "url": "https://github.com/apache/flink/pull/14389#discussion_r544057025", "createdAt": "2020-12-16T07:09:04Z", "author": {"login": "dianfu"}, "path": "flink-python/src/main/java/org/apache/flink/table/runtime/operators/python/aggregate/PythonStreamGroupTableAggregateOperator.java", "diffHunk": "@@ -39,30 +37,19 @@\n \t@VisibleForTesting\n \tprotected static final String STREAM_GROUP_TABLE_AGGREGATE_URN = \"flink:transform:stream_group_table_aggregate:v1\";\n \n-\tprivate final PythonAggregateFunctionInfo aggregateFunction;\n-\n-\tprivate final DataViewUtils.DataViewSpec[] dataViewSpecs;\n-\n \tpublic PythonStreamGroupTableAggregateOperator(\n \t\tConfiguration config,\n \t\tRowType inputType,\n \t\tRowType outputType,\n-\t\tPythonAggregateFunctionInfo aggregateFunction,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3027c25e19dbb51b9f96738959e043411fabff57"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9a42ef2b9b8c865242fed422050db94466840dd", "author": {"user": {"login": "HuangXingBo", "name": null}}, "url": "https://github.com/apache/flink/commit/c9a42ef2b9b8c865242fed422050db94466840dd", "committedDate": "2020-12-16T07:38:56Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNDMxNTE5", "url": "https://github.com/apache/flink/pull/14389#pullrequestreview-553431519", "createdAt": "2020-12-16T07:55:05Z", "commit": {"oid": "c9a42ef2b9b8c865242fed422050db94466840dd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3603, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}