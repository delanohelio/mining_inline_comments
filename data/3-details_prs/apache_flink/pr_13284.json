{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MTc5NDcw", "number": 13284, "title": "[FLINK-17016][runtime] Integrate pipelined region scheduling", "bodyText": "What is the purpose of the change\nThis PR is to integrate pipelined region scheduling with DefaultScheduler.\nA new config option \"jobmanager.scheduler.scheduling-strategy\" is introduced to control whether to use the new \"region\" scheduling or to use the \"legacy\" eager/lazy-from-sources scheduling.\nThis change is based on #13181 and #13321\nBrief change log\n\nChange scheduling strategy for ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST\nFix breaking tests due to insufficient slots\n\nVerifying this change\n\nAdded integration tests\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-08-31T09:33:04Z", "url": "https://github.com/apache/flink/pull/13284", "merged": true, "mergeCommit": {"oid": "4df2295f54709f4292888a3b4fcbb019dd4d7901"}, "closed": true, "closedAt": "2020-09-11T14:23:25Z", "author": {"login": "zhuzhurk"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEj-L6AFqTQ3ODY2MjIzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHxFuBAFqTQ4NjU4MDExNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NjYyMjMz", "url": "https://github.com/apache/flink/pull/13284#pullrequestreview-478662233", "createdAt": "2020-08-31T14:24:40Z", "commit": {"oid": "93baa67155390c49eacb26683a8f439fb8811533"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNDo0MFrOHJ7AsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODozNToxMFrOHKEBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NjA2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal Set<CoLocationGroup> coLocationGroups = new HashSet<>();\n          \n          \n            \n            \t\tfor (JobVertex vertex : getVertices()) {\n          \n          \n            \n            \t\t\tCoLocationGroup coLocationGroup = vertex.getCoLocationGroup();\n          \n          \n            \n            \t\t\tif (coLocationGroup != null) {\n          \n          \n            \n            \t\t\t\tcoLocationGroups.add(coLocationGroup);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tfinal Set<CoLocationGroupDesc> coLocationGroupDescs = coLocationGroups\n          \n          \n            \n            \t\t\t.stream()\n          \n          \n            \n            \t\t\t.map(CoLocationGroupDesc::from)\n          \n          \n            \n            \t\t\t.collect(Collectors.toSet());\n          \n          \n            \n            \t\tfinal Set<CoLocationGroupDesc> coLocationGroupDescs = new HashSet<>();\n          \n          \n            \n            \t\tfor (JobVertex vertex : getVertices()) {\n          \n          \n            \n            \t\t\tCoLocationGroup coLocationGroup = vertex.getCoLocationGroup();\n          \n          \n            \n            \t\t\tif (coLocationGroup != null) {\n          \n          \n            \n            \t\t\t\tCoLocationGroupDesc coLocationGroupDesc = CoLocationGroupDesc.from(coLocationGroup)\n          \n          \n            \n            \t\t\t\tcoLocationGroupDescs.add(coLocationGroupDesc);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "url": "https://github.com/apache/flink/pull/13284#discussion_r480166064", "createdAt": "2020-08-31T14:24:40Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/JobGraph.java", "diffHunk": "@@ -300,6 +305,32 @@ public int getNumberOfVertices() {\n \t\treturn this.taskVertices.size();\n \t}\n \n+\tpublic Set<SlotSharingGroup> getSlotSharingGroups() {\n+\t\tfinal Set<SlotSharingGroup> slotSharingGroups = new HashSet<>();\n+\t\tfor (JobVertex vertex : getVertices()) {\n+\t\t\tfinal SlotSharingGroup slotSharingGroup = vertex.getSlotSharingGroup();\n+\t\t\tcheckNotNull(slotSharingGroup);\n+\n+\t\t\tslotSharingGroups.add(slotSharingGroup);\n+\t\t}\n+\t\treturn Collections.unmodifiableSet(slotSharingGroups);\n+\t}\n+\n+\tpublic Set<CoLocationGroupDesc> getCoLocationGroupDescriptors() {\n+\t\tfinal Set<CoLocationGroup> coLocationGroups = new HashSet<>();\n+\t\tfor (JobVertex vertex : getVertices()) {\n+\t\t\tCoLocationGroup coLocationGroup = vertex.getCoLocationGroup();\n+\t\t\tif (coLocationGroup != null) {\n+\t\t\t\tcoLocationGroups.add(coLocationGroup);\n+\t\t\t}\n+\t\t}\n+\t\tfinal Set<CoLocationGroupDesc> coLocationGroupDescs = coLocationGroups\n+\t\t\t.stream()\n+\t\t\t.map(CoLocationGroupDesc::from)\n+\t\t\t.collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93baa67155390c49eacb26683a8f439fb8811533"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5NTk5OA==", "bodyText": "do logicalSlotSharingGroupSupplier and coLocationGroupSupplier have to be Suppliers?", "url": "https://github.com/apache/flink/pull/13284#discussion_r480295998", "createdAt": "2020-08-31T18:02:10Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionSlotAllocatorFactory.java", "diffHunk": "@@ -19,11 +19,39 @@\n \n package org.apache.flink.runtime.scheduler;\n \n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.jobmanager.scheduler.CoLocationGroupDesc;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.scheduler.strategy.SchedulingTopology;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n /**\n  * Interface for {@link ExecutionSlotAllocator} factories.\n  */\n+@FunctionalInterface\n public interface ExecutionSlotAllocatorFactory {\n \n-\tExecutionSlotAllocator createInstance(PreferredLocationsRetriever preferredLocationsRetriever);\n-\n+\t/**\n+\t * Instantiates the {@link ExecutionSlotAllocator}.\n+\t *\n+\t * @param preferredLocationsRetriever to retrieve preferred locations for each execution\n+\t * @param resourceProfileRetriever to retrieve required {@link ResourceProfile} for each execution\n+\t * @param priorAllocationIdRetriever to retrieve prior {@link AllocationID} for each execution\n+\t * @param topology scheduling topology of the job\n+\t * @param logicalSlotSharingGroupSupplier to supply all slot sharing groups in the job\n+\t * @param coLocationGroupSupplier to supply all co-location groups in the job\n+\t * @return The instantiated slot allocator\n+\t */\n+\tExecutionSlotAllocator createInstance(\n+\t\tPreferredLocationsRetriever preferredLocationsRetriever,\n+\t\tFunction<ExecutionVertexID, ResourceProfile> resourceProfileRetriever,\n+\t\tFunction<ExecutionVertexID, AllocationID> priorAllocationIdRetriever,\n+\t\tSchedulingTopology topology,\n+\t\tSupplier<Set<SlotSharingGroup>> logicalSlotSharingGroupSupplier,\n+\t\tSupplier<Set<CoLocationGroupDesc>> coLocationGroupSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93baa67155390c49eacb26683a8f439fb8811533"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5ODg3Mw==", "bodyText": "I would consider uniting these parameters into e.g.\ninterface ExecutionSlotAllocationContext implements PreferredLocationsRetriever {\n   ResourceProfile getResourceProfile(ExecutionVertexID);\n   AllocationID getPriorAllocationId(ExecutionVertexID);\n   ...\n}", "url": "https://github.com/apache/flink/pull/13284#discussion_r480298873", "createdAt": "2020-08-31T18:07:54Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/ExecutionSlotAllocatorFactory.java", "diffHunk": "@@ -19,11 +19,39 @@\n \n package org.apache.flink.runtime.scheduler;\n \n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.jobmanager.scheduler.CoLocationGroupDesc;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.scheduler.strategy.SchedulingTopology;\n+\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n /**\n  * Interface for {@link ExecutionSlotAllocator} factories.\n  */\n+@FunctionalInterface\n public interface ExecutionSlotAllocatorFactory {\n \n-\tExecutionSlotAllocator createInstance(PreferredLocationsRetriever preferredLocationsRetriever);\n-\n+\t/**\n+\t * Instantiates the {@link ExecutionSlotAllocator}.\n+\t *\n+\t * @param preferredLocationsRetriever to retrieve preferred locations for each execution\n+\t * @param resourceProfileRetriever to retrieve required {@link ResourceProfile} for each execution\n+\t * @param priorAllocationIdRetriever to retrieve prior {@link AllocationID} for each execution\n+\t * @param topology scheduling topology of the job\n+\t * @param logicalSlotSharingGroupSupplier to supply all slot sharing groups in the job\n+\t * @param coLocationGroupSupplier to supply all co-location groups in the job\n+\t * @return The instantiated slot allocator\n+\t */\n+\tExecutionSlotAllocator createInstance(\n+\t\tPreferredLocationsRetriever preferredLocationsRetriever,\n+\t\tFunction<ExecutionVertexID, ResourceProfile> resourceProfileRetriever,\n+\t\tFunction<ExecutionVertexID, AllocationID> priorAllocationIdRetriever,\n+\t\tSchedulingTopology topology,\n+\t\tSupplier<Set<SlotSharingGroup>> logicalSlotSharingGroupSupplier,\n+\t\tSupplier<Set<CoLocationGroupDesc>> coLocationGroupSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93baa67155390c49eacb26683a8f439fb8811533"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA==", "bodyText": "does the test need to wait for 5s? could it be 1s or even less?", "url": "https://github.com/apache/flink/pull/13284#discussion_r480313010", "createdAt": "2020-08-31T18:34:07Z", "author": {"login": "azagrebin"}, "path": "flink-tests/src/test/java/org/apache/flink/test/scheduling/PipelinedRegionSchedulingITCase.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.scheduling;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.client.program.MiniClusterClient;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionType;\n+import org.apache.flink.runtime.jobgraph.DistributionPattern;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.runtime.jobgraph.JobVertex;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmanager.scheduler.NoResourceAvailableException;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.jobmaster.JobResult;\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+import org.apache.flink.runtime.testtasks.NoOpInvokable;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * IT case for pipelined region scheduling.\n+ */\n+public class PipelinedRegionSchedulingITCase extends TestLogger {\n+\n+\t@Test\n+\tpublic void testSuccessWithSlotsNoFewerThanTheMaxRegionRequired() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(2);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(false));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailsOnInsufficientSlots() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(1);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(true));\n+\n+\t\tfinal Throwable jobFailure = jobResult\n+\t\t\t.getSerializedThrowable()\n+\t\t\t.get()\n+\t\t\t.deserializeError(ClassLoader.getSystemClassLoader());\n+\n+\t\tfinal Optional<NoResourceAvailableException> cause = ExceptionUtils.findThrowable(\n+\t\t\tjobFailure,\n+\t\t\tNoResourceAvailableException.class);\n+\t\tassertThat(cause.isPresent(), is(true));\n+\t\tassertThat(cause.get().getMessage(), containsString(\"Slot request bulk is not fulfillable!\"));\n+\t}\n+\n+\tprivate JobResult executeSchedulingTest(int numSlots) throws Exception {\n+\t\tfinal Configuration configuration = new Configuration();\n+\t\tconfiguration.setString(RestOptions.BIND_PORT, \"0\");\n+\t\tconfiguration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, 5000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e68f6bd327d805261acdc9005a9cfc099f595ae"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzYwNw==", "bodyText": "what is the difference between parallelism 2 and 100 for the tests?", "url": "https://github.com/apache/flink/pull/13284#discussion_r480313607", "createdAt": "2020-08-31T18:35:10Z", "author": {"login": "azagrebin"}, "path": "flink-tests/src/test/java/org/apache/flink/test/scheduling/PipelinedRegionSchedulingITCase.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.scheduling;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.client.program.MiniClusterClient;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionType;\n+import org.apache.flink.runtime.jobgraph.DistributionPattern;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.runtime.jobgraph.JobVertex;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmanager.scheduler.NoResourceAvailableException;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.jobmaster.JobResult;\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+import org.apache.flink.runtime.testtasks.NoOpInvokable;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * IT case for pipelined region scheduling.\n+ */\n+public class PipelinedRegionSchedulingITCase extends TestLogger {\n+\n+\t@Test\n+\tpublic void testSuccessWithSlotsNoFewerThanTheMaxRegionRequired() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(2);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(false));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailsOnInsufficientSlots() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(1);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(true));\n+\n+\t\tfinal Throwable jobFailure = jobResult\n+\t\t\t.getSerializedThrowable()\n+\t\t\t.get()\n+\t\t\t.deserializeError(ClassLoader.getSystemClassLoader());\n+\n+\t\tfinal Optional<NoResourceAvailableException> cause = ExceptionUtils.findThrowable(\n+\t\t\tjobFailure,\n+\t\t\tNoResourceAvailableException.class);\n+\t\tassertThat(cause.isPresent(), is(true));\n+\t\tassertThat(cause.get().getMessage(), containsString(\"Slot request bulk is not fulfillable!\"));\n+\t}\n+\n+\tprivate JobResult executeSchedulingTest(int numSlots) throws Exception {\n+\t\tfinal Configuration configuration = new Configuration();\n+\t\tconfiguration.setString(RestOptions.BIND_PORT, \"0\");\n+\t\tconfiguration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, 5000L);\n+\n+\t\tfinal MiniClusterConfiguration miniClusterConfiguration = new MiniClusterConfiguration.Builder()\n+\t\t\t.setConfiguration(configuration)\n+\t\t\t.setNumTaskManagers(1)\n+\t\t\t.setNumSlotsPerTaskManager(numSlots)\n+\t\t\t.build();\n+\n+\t\ttry (MiniCluster miniCluster = new MiniCluster(miniClusterConfiguration)) {\n+\t\t\tminiCluster.start();\n+\n+\t\t\tfinal MiniClusterClient miniClusterClient = new MiniClusterClient(configuration, miniCluster);\n+\n+\t\t\tfinal JobGraph jobGraph = createJobGraph(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e68f6bd327d805261acdc9005a9cfc099f595ae"}, "originalPosition": 93}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e68f6bd327d805261acdc9005a9cfc099f595ae", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/6e68f6bd327d805261acdc9005a9cfc099f595ae", "committedDate": "2020-08-31T09:30:57Z", "message": "[FLINK-17016][runtime] Change blink planner batch jobs to run with pipelined region scheduling"}, "afterCommit": {"oid": "42b7875dce1d37427b9f85f21172208c1bd8c97b", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/42b7875dce1d37427b9f85f21172208c1bd8c97b", "committedDate": "2020-09-01T15:53:43Z", "message": "[FLINK-17016][runtime] Change blink planner batch jobs to run with pipelined region scheduling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21bf743431be5233b62ff1a127f81721edd3939d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/21bf743431be5233b62ff1a127f81721edd3939d", "committedDate": "2020-09-02T05:16:56Z", "message": "[FLINK-14870] Fix slot sharing for vertices\n\nNote: the change should be part of FLINK-14870. It is added here temporarily to unblock the verification of pipelined region scheduling"}, "afterCommit": {"oid": "e5a5f7d8e5a8cb5ce7e18bbf54ed2671f31e75a4", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/e5a5f7d8e5a8cb5ce7e18bbf54ed2671f31e75a4", "committedDate": "2020-09-02T11:30:14Z", "message": "Improve tests for pipelined region scheduling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a541f5410ff96d39708288ae7aa672ed2ebb05a8", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/a541f5410ff96d39708288ae7aa672ed2ebb05a8", "committedDate": "2020-09-03T04:04:42Z", "message": "Fix unstable cases in MiniClusterITCase"}, "afterCommit": {"oid": "71281ac4921c174c214f2393e169e7140698af2d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/71281ac4921c174c214f2393e169e7140698af2d", "committedDate": "2020-09-03T15:20:14Z", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71281ac4921c174c214f2393e169e7140698af2d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/71281ac4921c174c214f2393e169e7140698af2d", "committedDate": "2020-09-03T15:20:14Z", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests"}, "afterCommit": {"oid": "c89d0141f4a854bc7deb4512a2b2007fccfb13fd", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/c89d0141f4a854bc7deb4512a2b2007fccfb13fd", "committedDate": "2020-09-04T07:35:51Z", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c89d0141f4a854bc7deb4512a2b2007fccfb13fd", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/c89d0141f4a854bc7deb4512a2b2007fccfb13fd", "committedDate": "2020-09-04T07:35:51Z", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests"}, "afterCommit": {"oid": "6af35bfdfa14c049bf4abe1c88ee49a689f38085", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/6af35bfdfa14c049bf4abe1c88ee49a689f38085", "committedDate": "2020-09-05T14:44:18Z", "message": "Enable global data exchange mode \u201cPOINTWISE_EDGES_PIPELINED\u201d for TPC-DS tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "082acd11f648164a30ceaf74a4ebe669fc52dda0", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/082acd11f648164a30ceaf74a4ebe669fc52dda0", "committedDate": "2020-09-05T14:56:17Z", "message": "Fixup! [FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling"}, "afterCommit": {"oid": "793c09043c209e8c2de95bdf14f6415f6cbb87b5", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/793c09043c209e8c2de95bdf14f6415f6cbb87b5", "committedDate": "2020-09-05T15:44:36Z", "message": "Fixup! [FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "793c09043c209e8c2de95bdf14f6415f6cbb87b5", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/793c09043c209e8c2de95bdf14f6415f6cbb87b5", "committedDate": "2020-09-05T15:44:36Z", "message": "Fixup! [FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling"}, "afterCommit": {"oid": "48283bec48b118b5cba4581c56209986815cda98", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/48283bec48b118b5cba4581c56209986815cda98", "committedDate": "2020-09-06T03:16:22Z", "message": "Fixup! [FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ab00d3240a796ded1f76b47249c9a2df9da8149", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/9ab00d3240a796ded1f76b47249c9a2df9da8149", "committedDate": "2020-09-06T17:19:46Z", "message": "Fix SlotSharingExecutionSlotAllocator for duplicated shared slot removal"}, "afterCommit": {"oid": "e95e0ab0f0bf363c26d1f8e1d92b0d9a98986cb5", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/e95e0ab0f0bf363c26d1f8e1d92b0d9a98986cb5", "committedDate": "2020-09-08T09:48:53Z", "message": "[hotfix][tests] Let TPC-DS tests run in POINTWISE_EDGES_PIPELINED data exchange mode"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDg4NjMw", "url": "https://github.com/apache/flink/pull/13284#pullrequestreview-484088630", "createdAt": "2020-09-08T12:37:26Z", "commit": {"oid": "db83c8518a3caf488e094b5730e59e57259a4560"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjozNzoyNlrOHOa12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozNzo1NlrOHOdmGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MTg4MQ==", "bodyText": "I would consider using ConfigOption.enumType, like e.g. state.backend.rocksdb.timer-service.factory", "url": "https://github.com/apache/flink/pull/13284#discussion_r484881881", "createdAt": "2020-09-08T12:37:26Z", "author": {"login": "azagrebin"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/JobManagerOptions.java", "diffHunk": "@@ -339,6 +340,23 @@\n \t\t\t\t.list(\n \t\t\t\t\ttext(\"'ng': new generation scheduler\"))\n \t\t\t\t.build());\n+\n+\t/**\n+\t * Config parameter determining the scheduling strategy.\n+\t */\n+\t@Documentation.ExcludeFromDocumentation(\"User normally should not be expected to change this config.\")\n+\tpublic static final ConfigOption<String> SCHEDULING_STRATEGY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db83c8518a3caf488e094b5730e59e57259a4560"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4MzgwMg==", "bodyText": "I would consider moving DefaultSchedulerComponents with its factory methodcreateSchedulerComponents into a separate file to avoid VisibleForTesting, then DefaultSchedulerFactoryTest can be DefaultSchedulerComponentsTest.", "url": "https://github.com/apache/flink/pull/13284#discussion_r484883802", "createdAt": "2020-09-08T12:40:46Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultSchedulerFactory.java", "diffHunk": "@@ -127,7 +133,33 @@ public SchedulerNG createInstance(\n \t\t\texecutionDeploymentTracker);\n \t}\n \n-\tprivate static DefaultSchedulerComponents createDefaultSchedulerComponents(\n+\t@VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db83c8518a3caf488e094b5730e59e57259a4560"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5MDcwNQ==", "bodyText": "ok, 5s may be not a big deal for one test.\nanother idea could be to sleep/poll connected TMs from MiniCluster#requestClusterOverview\nto wait for all TMs connected before running the job", "url": "https://github.com/apache/flink/pull/13284#discussion_r484890705", "createdAt": "2020-09-08T12:51:59Z", "author": {"login": "azagrebin"}, "path": "flink-tests/src/test/java/org/apache/flink/test/scheduling/PipelinedRegionSchedulingITCase.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.scheduling;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.client.program.MiniClusterClient;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.runtime.io.network.partition.ResultPartitionType;\n+import org.apache.flink.runtime.jobgraph.DistributionPattern;\n+import org.apache.flink.runtime.jobgraph.JobGraph;\n+import org.apache.flink.runtime.jobgraph.JobVertex;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmanager.scheduler.NoResourceAvailableException;\n+import org.apache.flink.runtime.jobmanager.scheduler.SlotSharingGroup;\n+import org.apache.flink.runtime.jobmaster.JobResult;\n+import org.apache.flink.runtime.minicluster.MiniCluster;\n+import org.apache.flink.runtime.minicluster.MiniClusterConfiguration;\n+import org.apache.flink.runtime.testtasks.NoOpInvokable;\n+import org.apache.flink.util.ExceptionUtils;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Test;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * IT case for pipelined region scheduling.\n+ */\n+public class PipelinedRegionSchedulingITCase extends TestLogger {\n+\n+\t@Test\n+\tpublic void testSuccessWithSlotsNoFewerThanTheMaxRegionRequired() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(2);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(false));\n+\t}\n+\n+\t@Test\n+\tpublic void testFailsOnInsufficientSlots() throws Exception {\n+\t\tfinal JobResult jobResult = executeSchedulingTest(1);\n+\t\tassertThat(jobResult.getSerializedThrowable().isPresent(), is(true));\n+\n+\t\tfinal Throwable jobFailure = jobResult\n+\t\t\t.getSerializedThrowable()\n+\t\t\t.get()\n+\t\t\t.deserializeError(ClassLoader.getSystemClassLoader());\n+\n+\t\tfinal Optional<NoResourceAvailableException> cause = ExceptionUtils.findThrowable(\n+\t\t\tjobFailure,\n+\t\t\tNoResourceAvailableException.class);\n+\t\tassertThat(cause.isPresent(), is(true));\n+\t\tassertThat(cause.get().getMessage(), containsString(\"Slot request bulk is not fulfillable!\"));\n+\t}\n+\n+\tprivate JobResult executeSchedulingTest(int numSlots) throws Exception {\n+\t\tfinal Configuration configuration = new Configuration();\n+\t\tconfiguration.setString(RestOptions.BIND_PORT, \"0\");\n+\t\tconfiguration.setLong(JobManagerOptions.SLOT_REQUEST_TIMEOUT, 5000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxMzAxMA=="}, "originalCommit": {"oid": "6e68f6bd327d805261acdc9005a9cfc099f595ae"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkwNTIxOA==", "bodyText": "Maybe this way it is easier  for testing.\nI was more thinking about an interface ExecutionSlotAllocationContext implemented internally in DefaultScheduler by wrapping preferredLocationsRetriever/jobGraph/EG/schedulingTopology.", "url": "https://github.com/apache/flink/pull/13284#discussion_r484905218", "createdAt": "2020-09-08T13:14:52Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultScheduler.java", "diffHunk": "@@ -160,7 +160,15 @@\n \t\t\tfailoverStrategy,\n \t\t\trestartBackoffTimeStrategy);\n \t\tthis.schedulingStrategy = schedulingStrategyFactory.createInstance(this, getSchedulingTopology());\n-\t\tthis.executionSlotAllocator = checkNotNull(executionSlotAllocatorFactory).createInstance(getPreferredLocationsRetriever());\n+\n+\t\tfinal ExecutionSlotAllocationContext slotAllocationContext = new ExecutionSlotAllocationContext(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b7736f0a03c649b595507bef2df26b3258b555d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyNzAwMw==", "bodyText": "are they not in the same SSG by default?", "url": "https://github.com/apache/flink/pull/13284#discussion_r484927003", "createdAt": "2020-09-08T13:37:56Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/minicluster/MiniClusterITCase.java", "diffHunk": "@@ -400,16 +400,23 @@ public void testJobWithAnOccasionallyFailingSenderVertex() throws Exception {\n \t\ttry (final MiniCluster miniCluster = new MiniCluster(cfg)) {\n \t\t\tminiCluster.start();\n \n+\t\t\t// putting sender and receiver vertex in the same slot sharing group is required\n+\t\t\t// to ensure all senders can be deployed. Otherwise this case can fail if the\n+\t\t\t// expected failing sender is not deployed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd4d3e23b0f3a2b3f1c1a7755e1a9c79a5d2f86"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e95e0ab0f0bf363c26d1f8e1d92b0d9a98986cb5", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/e95e0ab0f0bf363c26d1f8e1d92b0d9a98986cb5", "committedDate": "2020-09-08T09:48:53Z", "message": "[hotfix][tests] Let TPC-DS tests run in POINTWISE_EDGES_PIPELINED data exchange mode"}, "afterCommit": {"oid": "acc8ba0856f79a5e7915e8612ef0789190a3806d", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/acc8ba0856f79a5e7915e8612ef0789190a3806d", "committedDate": "2020-09-09T08:26:05Z", "message": "Fixup! [FLINK-17016][runtime] Enable to use pipelined region scheduling strategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTMxODg3", "url": "https://github.com/apache/flink/pull/13284#pullrequestreview-485131887", "createdAt": "2020-09-09T15:30:06Z", "commit": {"oid": "acc8ba0856f79a5e7915e8612ef0789190a3806d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTozMDowNlrOHPNCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNTozMjo0MVrOHPNJhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDI2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class DefaultSchedulerFactoryTest extends TestLogger {\n          \n          \n            \n            public class DefaultSchedulerComponentsFactoryTest extends TestLogger {", "url": "https://github.com/apache/flink/pull/13284#discussion_r485704263", "createdAt": "2020-09-09T15:30:06Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultSchedulerFactoryTest.java", "diffHunk": "@@ -35,7 +35,7 @@\n import static org.junit.Assert.assertThat;\n \n /**\n- * Tests for {@link DefaultSchedulerFactory}.\n+ * Tests for {@link DefaultSchedulerComponents}.\n  */\n public class DefaultSchedulerFactoryTest extends TestLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc8ba0856f79a5e7915e8612ef0789190a3806d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNDc2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Tests for {@link DefaultSchedulerComponents}.\n          \n          \n            \n             * Tests for {@link DefaultSchedulerComponents#createSchedulerComponents}.", "url": "https://github.com/apache/flink/pull/13284#discussion_r485704767", "createdAt": "2020-09-09T15:30:46Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/scheduler/DefaultSchedulerFactoryTest.java", "diffHunk": "@@ -35,7 +35,7 @@\n import static org.junit.Assert.assertThat;\n \n /**\n- * Tests for {@link DefaultSchedulerFactory}.\n+ * Tests for {@link DefaultSchedulerComponents}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc8ba0856f79a5e7915e8612ef0789190a3806d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTcwNjExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Components to create a {@link DefaultScheduler}.\n          \n          \n            \n             * Components to create a {@link DefaultScheduler} which depend on the configured {@link JobManagerOptions#SCHEDULING_STRATEGY}.", "url": "https://github.com/apache/flink/pull/13284#discussion_r485706117", "createdAt": "2020-09-09T15:32:41Z", "author": {"login": "azagrebin"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/DefaultSchedulerComponents.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.flink.runtime.scheduler;\n+\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.configuration.CheckpointingOptions;\n+import org.apache.flink.configuration.ClusterOptions;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.runtime.concurrent.ComponentMainThreadExecutor;\n+import org.apache.flink.runtime.executiongraph.SlotProviderStrategy;\n+import org.apache.flink.runtime.jobgraph.ScheduleMode;\n+import org.apache.flink.runtime.jobmaster.slotpool.LocationPreferenceSlotSelectionStrategy;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotProvider;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotProviderImpl;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotRequestBulkChecker;\n+import org.apache.flink.runtime.jobmaster.slotpool.PhysicalSlotRequestBulkCheckerImpl;\n+import org.apache.flink.runtime.jobmaster.slotpool.PreviousAllocationSlotSelectionStrategy;\n+import org.apache.flink.runtime.jobmaster.slotpool.Scheduler;\n+import org.apache.flink.runtime.jobmaster.slotpool.SchedulerImpl;\n+import org.apache.flink.runtime.jobmaster.slotpool.SlotPool;\n+import org.apache.flink.runtime.jobmaster.slotpool.SlotSelectionStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.EagerSchedulingStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.LazyFromSourcesSchedulingStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.PipelinedRegionSchedulingStrategy;\n+import org.apache.flink.runtime.scheduler.strategy.SchedulingStrategyFactory;\n+import org.apache.flink.util.clock.SystemClock;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * Components to create a {@link DefaultScheduler}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc8ba0856f79a5e7915e8612ef0789190a3806d"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95fb9ba421b50fc89e8f3e84f30386eed4082bcf", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/95fb9ba421b50fc89e8f3e84f30386eed4082bcf", "committedDate": "2020-09-09T08:47:38Z", "message": "Fixup! [FLINK-17016][runtime] Enable to use pipelined region scheduling strategy"}, "afterCommit": {"oid": "b50f9615fa9ee90ce66d44ee70e14e9d4c780e0c", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b50f9615fa9ee90ce66d44ee70e14e9d4c780e0c", "committedDate": "2020-09-10T08:44:13Z", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\u201c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d718061ce904de956e8e4f3dcc144052b379ab0", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/7d718061ce904de956e8e4f3dcc144052b379ab0", "committedDate": "2020-09-10T09:00:02Z", "message": "[hotfix] Fix checkstyle violations in JobGraph and JobGraphTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7c66c8b7da831c1f0c98bedeb5d6736f0fa4c86", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/d7c66c8b7da831c1f0c98bedeb5d6736f0fa4c86", "committedDate": "2020-09-10T09:00:03Z", "message": "[FLINK-17016][runtime] Use SlotSharingExecutionSlotAllocator for pipelined region scheduling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b50f9615fa9ee90ce66d44ee70e14e9d4c780e0c", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/b50f9615fa9ee90ce66d44ee70e14e9d4c780e0c", "committedDate": "2020-09-10T08:44:13Z", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\u201c"}, "afterCommit": {"oid": "e62b16868e32d87e90e0133fd7158132c408e615", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/e62b16868e32d87e90e0133fd7158132c408e615", "committedDate": "2020-09-10T09:00:03Z", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\u201c"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a687e9ac807a260103dc3249c962890571c4ecda", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/a687e9ac807a260103dc3249c962890571c4ecda", "committedDate": "2020-09-10T12:31:42Z", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e62b16868e32d87e90e0133fd7158132c408e615", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/e62b16868e32d87e90e0133fd7158132c408e615", "committedDate": "2020-09-10T09:00:03Z", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\u201c"}, "afterCommit": {"oid": "a687e9ac807a260103dc3249c962890571c4ecda", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/a687e9ac807a260103dc3249c962890571c4ecda", "committedDate": "2020-09-10T12:31:42Z", "message": "[FLINK-17016][runtime] Enable to use pipelined region scheduling strategy\n\nIt can be enabled via config option \"jobmanager.scheduler.scheduling-strategy=region\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTgwMTE2", "url": "https://github.com/apache/flink/pull/13284#pullrequestreview-486580116", "createdAt": "2020-09-11T08:26:18Z", "commit": {"oid": "a687e9ac807a260103dc3249c962890571c4ecda"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4276, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}