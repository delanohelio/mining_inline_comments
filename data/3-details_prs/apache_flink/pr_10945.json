{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTEzMTEy", "number": 10945, "title": "[FLINK-15274][docs]Added separate plugin page.", "bodyText": "Plugin page will be expanded in the future for connectors and other types.\nCentral page to point someone who asks: what are plugins?\n\nWhat is the purpose of the change\nAdds a dedicated plugin page, which will be expanded in the future for connectors and other types.\nCentral page to point someone who asks: what are plugins?\nBrief change log\n\nAdds plugin page\nAdds several links to the plugin page\n\nVerifying this change\nDoes not apply\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-01-24T16:20:48Z", "url": "https://github.com/apache/flink/pull/10945", "merged": true, "mergeCommit": {"oid": "a5bc859330c9f8ef6a33bdcbe7d6d178def1bfb5"}, "closed": true, "closedAt": "2020-01-28T12:34:12Z", "author": {"login": "AHeise"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9kOLtgFqTM0ODE3Njk2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-wkrEAFqTM0OTMzODkwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTc2OTYx", "url": "https://github.com/apache/flink/pull/10945#pullrequestreview-348176961", "createdAt": "2020-01-24T19:32:16Z", "commit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozMjoxNlrOFhoMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTozNToyMFrOFhoRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNTc3OQ==", "bodyText": "The documentation is versioned so the reader can assume what they are looking at is relevant to that version. For that reason we generally avoid listing Flink versions and reserve those comments for the release notes.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n          \n          \n            \n            Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.", "url": "https://github.com/apache/flink/pull/10945#discussion_r370805779", "createdAt": "2020-01-24T19:32:16Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjA3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n          \n          \n            \n            Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).", "url": "https://github.com/apache/flink/pull/10945#discussion_r370806073", "createdAt": "2020-01-24T19:32:52Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n++-- conf\n++-- lib\n++-- ...\n+\\-- plugins\n+    +-- s3\n+    |   +-- aws-credential-provider.jar\n+    |   \\-- flink-s3-fs-hadoop.jar\n+    \\-- azure\n+        \\-- flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNjg2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Plugins may access certain whitelisted packages from lib/. Most importantly, all needed service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary, so that core Flink has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n          \n          \n            \n            Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.", "url": "https://github.com/apache/flink/pull/10945#discussion_r370806866", "createdAt": "2020-01-24T19:34:39Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n++-- conf\n++-- lib\n++-- ...\n+\\-- plugins\n+    +-- s3\n+    |   +-- aws-credential-provider.jar\n+    |   \\-- flink-s3-fs-hadoop.jar\n+    \\-- azure\n+        \\-- flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from lib/. Most importantly, all needed service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary, so that core Flink has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgwNzE4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file systems, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory\n          \n          \n            \n            All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "url": "https://github.com/apache/flink/pull/10945#discussion_r370807180", "createdAt": "2020-01-24T19:35:20Z", "author": {"login": "sjwiesman"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins have been introduced in Flink 1.9 and facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n++-- conf\n++-- lib\n++-- ...\n+\\-- plugins\n+    +-- s3\n+    |   +-- aws-credential-provider.jar\n+    |   \\-- flink-s3-fs-hadoop.jar\n+    \\-- azure\n+        \\-- flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through it's own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from lib/. Most importantly, all needed service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary, so that core Flink has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file systems, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f006c04d4c5e5237057a662096dd20742c026ec", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/3f006c04d4c5e5237057a662096dd20742c026ec", "committedDate": "2020-01-24T15:47:53Z", "message": "[FLINK-15274][docs]Added separate plugin page.\n\nPlugin page will be expanded in the future for connectors and other types.\nCentral page to point someone who asks: what are plugins?"}, "afterCommit": {"oid": "c4c0572dd96d5ca2ff3a484e56adc569e03783da", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/c4c0572dd96d5ca2ff3a484e56adc569e03783da", "committedDate": "2020-01-24T21:43:14Z", "message": "[FLINK-15274][docs]Added separate plugin page.\n\nPlugin page will be expanded in the future for connectors and other types.\nCentral page to point someone who asks: what are plugins?"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTIyNjEx", "url": "https://github.com/apache/flink/pull/10945#pullrequestreview-348522611", "createdAt": "2020-01-27T09:23:27Z", "commit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToyMzoyOFrOFh8DqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToyNjowOFrOFh8Iag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMTMwNQ==", "bodyText": "I would split longer lines (like this) into multiple lines. Makes reading diffs, reviewing and resolving conflicts significantly easier.", "url": "https://github.com/apache/flink/pull/10945#discussion_r371131305", "createdAt": "2020-01-27T09:23:28Z", "author": {"login": "pnowojski"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEzMjUyMg==", "bodyText": "Could we document what's the problem with MapR? (I have already forgotten)", "url": "https://github.com/apache/flink/pull/10945#discussion_r371132522", "createdAt": "2020-01-27T09:26:08Z", "author": {"login": "pnowojski"}, "path": "docs/ops/plugins.md", "diffHunk": "@@ -0,0 +1,91 @@\n+---\n+title: \"Plugins\"\n+nav-id: plugins\n+nav-parent_id: ops\n+nav-pos: 16\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+Plugins facilitate a strict separation of code through restricted classloaders. Plugins cannot access classes from other plugins or from Flink that have not been specifically whitelisted. This strict isolation allows plugins to contain conflicting versions of the same library without the need to relocate classes or to converge to common versions.\n+\n+Currently, only file systems are pluggable but in the future, connectors, formats, and even user code should also be pluggable.\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+## Isolation and plugin structure\n+\n+Plugins reside in their own folders and can consist of several jars. The names of the plugin folders are arbitrary.\n+\n+```\n+flink-dist\n+\u251c\u2500\u2500 conf\n+\u251c\u2500\u2500 lib\n+...\n+\u2514\u2500\u2500 plugins\n+    \u251c\u2500\u2500 s3\n+    \u2502   \u251c\u2500\u2500 aws-credential-provider.jar\n+    \u2502   \u2514\u2500\u2500 flink-s3-fs-hadoop.jar\n+    \u2514\u2500\u2500 azure\n+        \u2514\u2500\u2500 flink-azure-fs-hadoop.jar\n+``` \n+\n+Each plugin is loaded through its own classloader and completely isolated from any other plugin. Hence, the `flink-s3-fs-hadoop` and `flink-azure-fs-hadoop` can depend on different conflicting library versions. There is no need to relocate any class during the creation of fat jars (shading).\n+\n+Plugins may access certain whitelisted packages from Flink's `lib/` folder. In particular, all necessary service provider interfaces (SPI) are loaded through the system classloader, so that no two versions of `org.apache.flink.core.fs.FileSystem` exist at any given time, even if users accidentally bundle it in their fat jar. This singleton class requirement is strictly necessary so that the Flink runtime has an entry point into the plugin. Service classes are discovered through the `java.util.ServiceLoader`, so make sure to retain the service definitions in `META-INF/services` during shading.\n+\n+<span class=\"label label-warning\">Note</span> *Currently, more Flink core classes are still accessible from plugins as we flesh out the SPI system.*\n+\n+Furthermore, the most common logger frameworks are whitelisted, such that logging is uniformly possible across Flink core, plugins, and user code.\n+\n+## File Systems\n+\n+All [file systems](filesystems/index) **except MapR** are pluggable. That means they can and should be used as plugins. To use a pluggable file system, copy the corresponding JAR file from the `opt` directory to a directory under `plugins` directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aaf22fc596b0c54c6aef28a6c1216a1e5474976", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/9aaf22fc596b0c54c6aef28a6c1216a1e5474976", "committedDate": "2020-01-27T15:14:25Z", "message": "[FLINK-15274][docs]Added separate plugin page.\n\nPlugin page will be expanded in the future for connectors and other types.\nCentral page to point someone who asks: what are plugins?"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1f1cfbd069850680d5fb3e0e9300794af30987d", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/e1f1cfbd069850680d5fb3e0e9300794af30987d", "committedDate": "2020-01-27T09:17:23Z", "message": "Added Seth's suggestions\r\n\r\nwill squash later.\n\nCo-Authored-By: Seth Wiesman <sjwiesman@gmail.com>"}, "afterCommit": {"oid": "9aaf22fc596b0c54c6aef28a6c1216a1e5474976", "author": {"user": {"login": "AHeise", "name": "Arvid Heise"}}, "url": "https://github.com/apache/flink/commit/9aaf22fc596b0c54c6aef28a6c1216a1e5474976", "committedDate": "2020-01-27T15:14:25Z", "message": "[FLINK-15274][docs]Added separate plugin page.\n\nPlugin page will be expanded in the future for connectors and other types.\nCentral page to point someone who asks: what are plugins?"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzM4OTA1", "url": "https://github.com/apache/flink/pull/10945#pullrequestreview-349338905", "createdAt": "2020-01-28T12:33:44Z", "commit": {"oid": "9aaf22fc596b0c54c6aef28a6c1216a1e5474976"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4485, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}