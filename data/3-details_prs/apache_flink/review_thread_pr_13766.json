{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4ODU0NDky", "number": 13766, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxNDo1M1rOEzfEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTozMDoxNlrOEzfXoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDIxOTYzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxNDo1M1rOHqu-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxNDo1M1rOHqu-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MTk5OA==", "bodyText": "PRC  -> RPC", "url": "https://github.com/apache/flink/pull/13766#discussion_r514571998", "createdAt": "2020-10-29T21:14:53Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDIyMTg4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxNTo0MVrOHqvAZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo1OToyMVrOHrGQQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM4OA==", "bodyText": "why should these only be queryable if the state is failed?", "url": "https://github.com/apache/flink/pull/13766#discussion_r514572388", "createdAt": "2020-10-29T21:15:41Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MzI4Mw==", "bodyText": "I will remove the check. More details see comment #13766 (comment).", "url": "https://github.com/apache/flink/pull/13766#discussion_r514953283", "createdAt": "2020-10-30T08:59:21Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjM4OA=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDIyMjMzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToxNTo1MVrOHqvAqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwODo1Njo1OFrOHrGLkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjQ1OA==", "bodyText": "why should these only be queryable if the state is failed? I get the idea, but imo such a simple data-structure shouldn't enforce behaviors.", "url": "https://github.com/apache/flink/pull/13766#discussion_r514572458", "createdAt": "2020-10-29T21:15:51Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MjA4Mw==", "bodyText": "Ok. I will remove the check. Also regarding your other comments, I think we do not need factory methods to differentiate whether it is created for FAILED state. I will add 2 constructors instead. One needs to specify the cancelTask/releasePartitions flags if the they need to be true.", "url": "https://github.com/apache/flink/pull/13766#discussion_r514952083", "createdAt": "2020-10-30T08:56:58Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3MjQ1OA=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI2MTU5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyODoxNFrOHqvY7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwNzowODozMlrOHrDZHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODY3MA==", "bodyText": "a more apt name might by \"TaskExecutionStateTransition\"", "url": "https://github.com/apache/flink/pull/13766#discussion_r514578670", "createdAt": "2020-10-29T21:28:14Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkwNjM5OA==", "bodyText": "I did not have a good idea to name it and TaskExecutionStateTransition sounds good to me.", "url": "https://github.com/apache/flink/pull/13766#discussion_r514906398", "createdAt": "2020-10-30T07:08:32Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3ODY3MA=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI2NDg2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMToyOToxN1rOHqva9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTowMjo1NVrOHrKN8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ==", "bodyText": "This seems like a dangerous default, and I wouldn't be surprised if we at some point call this by accident instead of creating a failed TaskExecutionStateWrapper", "url": "https://github.com/apache/flink/pull/13766#discussion_r514579189", "createdAt": "2020-10-29T21:29:17Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java", "diffHunk": "@@ -84,7 +85,11 @@\n \n \tvoid handleGlobalFailure(Throwable cause);\n \n-\tboolean updateTaskExecutionState(TaskExecutionState taskExecutionState);\n+\tdefault boolean updateTaskExecutionState(TaskExecutionState taskExecutionState) {\n+\t\treturn updateTaskExecutionState(TaskExecutionStateWrapper.createFrom(taskExecutionState));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NzA1Mg==", "bodyText": "You are right. However, this method will be removed soon when removing the legacy scheduling in ExecutionGraph (FLINK-15626). And I hope to not refactor its usages right now to avoid massive conflicts with the ongoing change of FLINK-17760 which will replace the usage with SchedulerNG#updateTaskExecutionState().\nI will mark it as deprecated for now to prevent it from being further used?\nWDYT?", "url": "https://github.com/apache/flink/pull/13766#discussion_r514957052", "createdAt": "2020-10-30T09:07:08Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java", "diffHunk": "@@ -84,7 +85,11 @@\n \n \tvoid handleGlobalFailure(Throwable cause);\n \n-\tboolean updateTaskExecutionState(TaskExecutionState taskExecutionState);\n+\tdefault boolean updateTaskExecutionState(TaskExecutionState taskExecutionState) {\n+\t\treturn updateTaskExecutionState(TaskExecutionStateWrapper.createFrom(taskExecutionState));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTAxODIyNw==", "bodyText": "sounds good", "url": "https://github.com/apache/flink/pull/13766#discussion_r515018227", "createdAt": "2020-10-30T11:02:55Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerNG.java", "diffHunk": "@@ -84,7 +85,11 @@\n \n \tvoid handleGlobalFailure(Throwable cause);\n \n-\tboolean updateTaskExecutionState(TaskExecutionState taskExecutionState);\n+\tdefault boolean updateTaskExecutionState(TaskExecutionState taskExecutionState) {\n+\t\treturn updateTaskExecutionState(TaskExecutionStateWrapper.createFrom(taskExecutionState));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTE4OQ=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDI2Nzg1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMTozMDoxNlrOHqvczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMjozOFrOHrGpzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ==", "bodyText": "it is not intuitive that this method checks for a failed state, but the plain createFrom() does not assert the opposite (i.e., that the task did not fail).", "url": "https://github.com/apache/flink/pull/13766#discussion_r514579661", "createdAt": "2020-10-29T21:30:16Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn releasePartitions;\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n+\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFromFailedState(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1MzQ2NA==", "bodyText": "I will remove the check and the factory methods. See comment #13766 (comment).", "url": "https://github.com/apache/flink/pull/13766#discussion_r514953464", "createdAt": "2020-10-30T08:59:41Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn releasePartitions;\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n+\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFromFailedState(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTgyMg==", "bodyText": "Just a note that createFrom() will also be used for FAILED state which is reported from TaskManager because the flags will be false.", "url": "https://github.com/apache/flink/pull/13766#discussion_r514959822", "createdAt": "2020-10-30T09:12:38Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/executiongraph/TaskExecutionStateWrapper.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.executiongraph;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.runtime.accumulators.AccumulatorSnapshot;\n+import org.apache.flink.runtime.execution.ExecutionState;\n+import org.apache.flink.runtime.taskmanager.TaskExecutionState;\n+\n+import static org.apache.flink.util.Preconditions.checkNotNull;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * Wraps {@link TaskExecutionState}, along with actions to take\n+ * if it is FAILED state.\n+ */\n+public class TaskExecutionStateWrapper {\n+\n+\tprivate final TaskExecutionState taskExecutionState;\n+\n+\t/**\n+\t * Indicating whether to send a PRC call to remove task from TaskManager.\n+\t * True if the failure is fired by JobManager and the execution is already\n+\t * deployed. Otherwise it should be false.\n+\t */\n+\tprivate final boolean cancelTask;\n+\n+\tprivate final boolean releasePartitions;\n+\n+\tprivate TaskExecutionStateWrapper(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tthis.taskExecutionState = checkNotNull(taskExecutionState);\n+\t\tthis.cancelTask = cancelTask;\n+\t\tthis.releasePartitions = releasePartitions;\n+\t}\n+\n+\tpublic Throwable getError(ClassLoader userCodeClassloader) {\n+\t\treturn taskExecutionState.getError(userCodeClassloader);\n+\t}\n+\n+\tpublic ExecutionAttemptID getID() {\n+\t\treturn taskExecutionState.getID();\n+\t}\n+\n+\tpublic ExecutionState getExecutionState() {\n+\t\treturn taskExecutionState.getExecutionState();\n+\t}\n+\n+\tpublic JobID getJobID() {\n+\t\treturn taskExecutionState.getJobID();\n+\t}\n+\n+\tpublic AccumulatorSnapshot getAccumulators() {\n+\t\treturn taskExecutionState.getAccumulators();\n+\t}\n+\n+\tpublic IOMetrics getIOMetrics() {\n+\t\treturn taskExecutionState.getIOMetrics();\n+\t}\n+\n+\tpublic boolean getCancelTask() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn cancelTask;\n+\t}\n+\n+\tpublic boolean getReleasePartitions() {\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);\n+\t\treturn releasePartitions;\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFrom(TaskExecutionState taskExecutionState) {\n+\t\treturn new TaskExecutionStateWrapper(taskExecutionState, false, false);\n+\t}\n+\n+\tpublic static TaskExecutionStateWrapper createFromFailedState(\n+\t\t\tfinal TaskExecutionState taskExecutionState,\n+\t\t\tfinal boolean cancelTask,\n+\t\t\tfinal boolean releasePartitions) {\n+\n+\t\tcheckState(taskExecutionState.getExecutionState() == ExecutionState.FAILED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU3OTY2MQ=="}, "originalCommit": {"oid": "b46f97dd6b1fa67b4dd169867c1967877ac8534c"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 93, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}