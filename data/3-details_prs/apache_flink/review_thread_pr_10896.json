{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDk4NjYy", "number": 10896, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToxNDowM1rODZCRGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMzowNDozOVrODZC78w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTc4MTM3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToxNDowM1rOFfN5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToxNDowM1rOFfN5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3Nzk0OQ==", "bodyText": "Move this JavaUserDefinedAggFunctions? So that it can be reused across tests.", "url": "https://github.com/apache/flink/pull/10896#discussion_r368277949", "createdAt": "2020-01-19T09:14:03Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "diffHunk": "@@ -1186,4 +1189,41 @@ class AggregateITCase(\n     assertEquals(expected, sink.getRetractResults)\n   }\n \n+  @Test\n+  def testGenericTypesWithoutStateClean(): Unit = {\n+    tEnv.getConfig.setIdleStateRetentionTime(Time.days(0), Time.days(0))\n+    val t = env.fromElements(1, 2, 3).toTable(tEnv, 'a)\n+    val results = t\n+        .select(new GenericAggregateFunction()('a))\n+        .toRetractStream[Row]\n+\n+    val sink = new TestingRetractSink\n+    results.addSink(sink).setParallelism(1)\n+    env.execute()\n+  }\n+}\n+\n+class RandomClass(var i: Int)\n+\n+class GenericAggregateFunction extends AggregateFunction[java.lang.Integer, RandomClass] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTc4Njg5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToyNTo1MVrOFfN8nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToyNTo1MVrOFfN8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3ODY4Nw==", "bodyText": "Please use failingDataSource to cover more paths.", "url": "https://github.com/apache/flink/pull/10896#discussion_r368278687", "createdAt": "2020-01-19T09:25:51Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "diffHunk": "@@ -1186,4 +1189,41 @@ class AggregateITCase(\n     assertEquals(expected, sink.getRetractResults)\n   }\n \n+  @Test\n+  def testGenericTypesWithoutStateClean(): Unit = {\n+    tEnv.getConfig.setIdleStateRetentionTime(Time.days(0), Time.days(0))\n+    val t = env.fromElements(1, 2, 3).toTable(tEnv, 'a)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTc4Njk3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToyNjoyMlrOFfN8sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQwOToyNjoyMlrOFfN8sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI3ODcwNQ==", "bodyText": "Could you add a comment above this because we don't provide a way to disable state cleanup.", "url": "https://github.com/apache/flink/pull/10896#discussion_r368278705", "createdAt": "2020-01-19T09:26:22Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/AggregateITCase.scala", "diffHunk": "@@ -1186,4 +1189,41 @@ class AggregateITCase(\n     assertEquals(expected, sink.getRetractResults)\n   }\n \n+  @Test\n+  def testGenericTypesWithoutStateClean(): Unit = {\n+    tEnv.getConfig.setIdleStateRetentionTime(Time.days(0), Time.days(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg4NzQ2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1NjoyOVrOFfOwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1NjoyOVrOFfOwTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MTkxOA==", "bodyText": "Add another test for equality?", "url": "https://github.com/apache/flink/pull/10896#discussion_r368291918", "createdAt": "2020-01-19T12:56:29Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "diffHunk": "@@ -4159,4 +4159,11 @@ class ScalarFunctionsTest extends ScalarTypesTestBase {\n       \"IS_ALPHA(f33)\",\n       \"false\")\n   }\n+\n+  @Test\n+  def testEquality(): Unit = {\n+    testSqlApi(\n+      \"f55=f56\",\n+      \"false\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg4NzU5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1NjozNlrOFfOwXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1NjozNlrOFfOwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MTkzMg==", "bodyText": "testRawTypeEquality?", "url": "https://github.com/apache/flink/pull/10896#discussion_r368291932", "createdAt": "2020-01-19T12:56:36Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "diffHunk": "@@ -4159,4 +4159,11 @@ class ScalarFunctionsTest extends ScalarTypesTestBase {\n       \"IS_ALPHA(f33)\",\n       \"false\")\n   }\n+\n+  @Test\n+  def testEquality(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg4Nzg3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1NzoxMVrOFfOwgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1NzoxMVrOFfOwgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MTk2OQ==", "bodyText": "testRawTypeEquality?", "url": "https://github.com/apache/flink/pull/10896#discussion_r368291969", "createdAt": "2020-01-19T12:57:11Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/expressions/ScalarFunctionsTest.scala", "diffHunk": "@@ -4159,4 +4159,11 @@ class ScalarFunctionsTest extends ScalarTypesTestBase {\n       \"IS_ALPHA(f33)\",\n       \"false\")\n   }\n+\n+  @Test\n+  def testEquality(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg4ODIxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1ODowM1rOFfOwsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1ODowM1rOFfOwsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjAxNw==", "bodyText": "Add a test for BinaryRow(BinaryGeneric(timestamp)) vs GenericRow(BinaryGeneric(timestamp)).", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292017", "createdAt": "2020-01-19T12:58:03Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.codegen;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.dataformat.BinaryGeneric;\n+import org.apache.flink.table.dataformat.GenericRow;\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.runtime.generated.RecordEqualiser;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.TimestampType;\n+import org.apache.flink.table.types.logical.TypeInformationRawType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link EqualiserCodeGenerator}.\n+ */\n+public class EqualiserCodeGeneratorTest {\n+\n+\t@Test\n+\tpublic void testRaw() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TypeInformationRawType<>(Types.INT)})\n+\t\t\t\t.generateRecordEqualiser(\"RAW\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1))));\n+\t\tAssert.assertFalse(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(2))));\n+\t}\n+\n+\t@Test\n+\tpublic void testTimestamp() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TimestampType()})\n+\t\t\t\t.generateRecordEqualiser(\"TIMESTAMP\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(SqlTimestamp.fromEpochMillis(1024)),\n+\t\t\t\tGenericRow.of(SqlTimestamp.fromEpochMillis(1024))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg4ODMzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1ODoxMVrOFfOwwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1ODoxMVrOFfOwwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjAzMw==", "bodyText": "Add a test for BinaryRow(BinaryGeneric(1)) vs GenericRow(BinaryGeneric(1)).", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292033", "createdAt": "2020-01-19T12:58:11Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.codegen;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.dataformat.BinaryGeneric;\n+import org.apache.flink.table.dataformat.GenericRow;\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.runtime.generated.RecordEqualiser;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.TimestampType;\n+import org.apache.flink.table.types.logical.TypeInformationRawType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link EqualiserCodeGenerator}.\n+ */\n+public class EqualiserCodeGeneratorTest {\n+\n+\t@Test\n+\tpublic void testRaw() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TypeInformationRawType<>(Types.INT)})\n+\t\t\t\t.generateRecordEqualiser(\"RAW\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg4ODQwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1ODoyM1rOFfOwyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjo1ODoyM1rOFfOwyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjA0Mg==", "bodyText": "Add a test for BinaryRow(BinaryGeneric(1)) vs GenericRow(BinaryGeneric(1)).", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292042", "createdAt": "2020-01-19T12:58:23Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/java/org/apache/flink/table/planner/codegen/EqualiserCodeGeneratorTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.codegen;\n+\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.table.dataformat.BinaryGeneric;\n+import org.apache.flink.table.dataformat.GenericRow;\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.runtime.generated.RecordEqualiser;\n+import org.apache.flink.table.types.logical.LogicalType;\n+import org.apache.flink.table.types.logical.TimestampType;\n+import org.apache.flink.table.types.logical.TypeInformationRawType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Test for {@link EqualiserCodeGenerator}.\n+ */\n+public class EqualiserCodeGeneratorTest {\n+\n+\t@Test\n+\tpublic void testRaw() {\n+\t\tRecordEqualiser equaliser = new EqualiserCodeGenerator(\n+\t\t\t\tnew LogicalType[]{new TypeInformationRawType<>(Types.INT)})\n+\t\t\t\t.generateRecordEqualiser(\"RAW\")\n+\t\t\t\t.newInstance(Thread.currentThread().getContextClassLoader());\n+\t\tAssert.assertTrue(equaliser.equalsWithoutHeader(\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1)),\n+\t\t\t\tGenericRow.of(new BinaryGeneric<>(1))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTg5MTA3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/EqualiserCodeGenerator.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMzowNDozOVrOFfOyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMzowNDozOVrOFfOyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MjQyOQ==", "bodyText": "Can we improve the existing constructor to accept only Array[] ? So that we can avoid to maintain two constructors.", "url": "https://github.com/apache/flink/pull/10896#discussion_r368292429", "createdAt": "2020-01-19T13:04:39Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/EqualiserCodeGenerator.scala", "diffHunk": "@@ -29,6 +30,10 @@ import scala.collection.JavaConversions._\n \n class EqualiserCodeGenerator(fieldTypes: Seq[LogicalType]) {\n \n+  def this(fieldTypes: Array[LogicalType]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f765a3816b97657b93895347980f6899a45e95b9"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1246, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}