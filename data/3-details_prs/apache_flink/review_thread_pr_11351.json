{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NDA0Njcy", "number": 11351, "reviewThreads": {"totalCount": 91, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyMzozNlrODqOzHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0MzoyOVrOD0JrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjA5MjQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyMzozNlrOF52jbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDoyMzozNlrOF52jbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwNjk1Nw==", "bodyText": "This change is irrelated?\nIf so, I suggest not making this change.", "url": "https://github.com/apache/flink/pull/11351#discussion_r396206957", "createdAt": "2020-03-23T04:23:36Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -311,10 +309,13 @@ public void recycle(MemorySegment segment) {\n \t\t\t\t\tExceptionUtils.rethrow(t);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tnumAddedBuffers = bufferQueue.addExclusiveBuffer(new NetworkBuffer(segment, this), numRequiredBuffers);\n+\t\t\tcheckState(!isBlockedByCheckpoint, \"Channel blocked by checkpoint.\");\n+\n+\t\t\tint numAddedBuffers = bufferQueue.addExclusiveBuffer(new NetworkBuffer(segment, this), numRequiredBuffers);\n+\t\t\tnotifyAvailable = numAddedBuffers > 0 && unannouncedCredit++ == 0;\n \t\t}\n \n-\t\tif (numAddedBuffers > 0 && unannouncedCredit.getAndAdd(numAddedBuffers) == 0) {\n+\t\tif (notifyAvailable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395bc07a4fca4e2f3ee8b96b4ef8054595227157"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjExOTY0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNDo0NTowN1rOF52zsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMDo0MjoxOVrOF5_thQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxMTEyMA==", "bodyText": "inputChannel ->  optionalInputChannel , irrelated changes, should revert.", "url": "https://github.com/apache/flink/pull/11351#discussion_r396211120", "createdAt": "2020-03-23T04:45:07Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -507,20 +510,27 @@ public boolean isFinished() {\n \tprivate Optional<InputWithData<InputChannel, BufferAndAvailability>> waitAndGetNextData(boolean blocking)\n \t\t\tthrows IOException, InterruptedException {\n \t\twhile (true) {\n-\t\t\tOptional<InputChannel> inputChannel = getChannel(blocking);\n-\t\t\tif (!inputChannel.isPresent()) {\n+\t\t\tOptional<InputChannel> optionalInputChannel = getChannel(blocking);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395bc07a4fca4e2f3ee8b96b4ef8054595227157"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM1Njk5Nw==", "bodyText": "name conflicts with the flowing InputChannel", "url": "https://github.com/apache/flink/pull/11351#discussion_r396356997", "createdAt": "2020-03-23T10:42:19Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -507,20 +510,27 @@ public boolean isFinished() {\n \tprivate Optional<InputWithData<InputChannel, BufferAndAvailability>> waitAndGetNextData(boolean blocking)\n \t\t\tthrows IOException, InterruptedException {\n \t\twhile (true) {\n-\t\t\tOptional<InputChannel> inputChannel = getChannel(blocking);\n-\t\t\tif (!inputChannel.isPresent()) {\n+\t\t\tOptional<InputChannel> optionalInputChannel = getChannel(blocking);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxMTEyMA=="}, "originalCommit": {"oid": "395bc07a4fca4e2f3ee8b96b4ef8054595227157"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ2NDU5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1OToyMVrOF56FPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNzo1OToyMVrOF56FPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NDc2NA==", "bodyText": "It is better to reuse the blocked states from CheckpointBarrierAligner if possible to avoid managing it duplicated in another place and causing potential inconsistency.", "url": "https://github.com/apache/flink/pull/11351#discussion_r396264764", "createdAt": "2020-03-23T07:59:21Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -140,6 +141,8 @@\n \t/** Channels, which notified this input gate about available data. */\n \tprivate final ArrayDeque<InputChannel> inputChannelsWithData = new ArrayDeque<>();\n \n+\tprivate final HashMap<Integer, InputChannel> channelsBlockedByCheckpoint = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395bc07a4fca4e2f3ee8b96b4ef8054595227157"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjQ5NjM3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODoxMDoyOFrOF56YSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwODoxMDoyOFrOF56YSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2OTY0Mw==", "bodyText": "It is tricky to make zero credit has a special meaning, and we also break the previous assumption without negative credits.\nI think it might be better to define a separate message to describe the semantic of barrier alignment to unblock upstream side. Then the credit is always positive to be consistent as before, and we only define another blocked state on upstream side to control the buffer transport besides with positive credits.", "url": "https://github.com/apache/flink/pull/11351#discussion_r396269643", "createdAt": "2020-03-23T08:10:28Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -416,7 +452,18 @@ public int getUnannouncedCredit() {\n \t * @return Credit which was not announced to the sender yet.\n \t */\n \tpublic int getAndResetUnannouncedCredit() {\n-\t\treturn unannouncedCredit.getAndSet(0);\n+\t\tsynchronized (bufferQueue) {\n+\t\t\tint credit = unannouncedCredit;\n+\t\t\tunannouncedCredit = 0;\n+\t\t\tif (credit == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395bc07a4fca4e2f3ee8b96b4ef8054595227157"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTMzNTExOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/BufferConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMjo1N1rOF6qCqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMjo1N1rOF6qCqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MDUzNw==", "bodyText": "It seems a bit strange to see this field in BufferConsumer.\nAfter discussing offline, we introduce another enum type for identifying the specific AbstractEvent instance inside Buffer without deserialization. Then the required components can judge the type from buffer to make some improvements. At the beginning we only focus on CheckpointBarrier event and make others unknown.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397050537", "createdAt": "2020-03-24T10:32:57Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/BufferConsumer.java", "diffHunk": "@@ -44,6 +44,8 @@\n \n \tprivate int currentReaderPosition;\n \n+\tprivate final boolean isExactlyOnceBarrier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTcyODY5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjoyNzozMVrOF6t52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjozMTo0OVrOF747ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzgxNw==", "bodyText": "inputChannels are accessed via synchronized requestLock in other places. Do we need the sync here?", "url": "https://github.com/apache/flink/pull/11351#discussion_r397113817", "createdAt": "2020-03-24T12:27:31Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -616,6 +628,13 @@ public void sendTaskEvent(TaskEvent event) throws IOException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void onExactlyOnceCheckpointCompletedOrCanceled(long checkpointId) {\n+\t\tfor (InputChannel inputChannel: inputChannels.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0MzA3NQ==", "bodyText": "I have removed this code", "url": "https://github.com/apache/flink/pull/11351#discussion_r398343075", "createdAt": "2020-03-26T06:31:49Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -616,6 +628,13 @@ public void sendTaskEvent(TaskEvent event) throws IOException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void onExactlyOnceCheckpointCompletedOrCanceled(long checkpointId) {\n+\t\tfor (InputChannel inputChannel: inputChannels.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExMzgxNw=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc0OTI3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowNTo0OFrOF7Le4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjozNzozOFrOF75CzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5ODQzNQ==", "bodyText": "There are five paths for calling notifyCheckpointCompletedOrCanceled in this method, then it is a bit hard to trace every path and analysis whether it needs this call. In contrast, we can analysis this issue from a reverse way to make it easy. E.g. only two paths (begin new alignment and under current alignment) do not need the notify call, so we can make a boolean tag only for these two paths, and handle the unified notification at the end of this method.\nIn detail, we can define a boolean shouldNotify = true at the beginning of this method and also set the notifyCheckpointId = currentCheckpointId. Then tag this boolean as false in below two paths, and finally call notifyCheckpointCompletedOrCanceled at the end of this method if shouldNotify = true.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397598435", "createdAt": "2020-03-25T04:05:48Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -100,21 +105,20 @@ public boolean isBlocked(int channelIndex) {\n \t}\n \n \t@Override\n-\tpublic boolean processBarrier(CheckpointBarrier receivedBarrier, int channelIndex, long bufferedBytes) throws Exception {\n+\tpublic void processBarrier(CheckpointBarrier receivedBarrier, int channelIndex) throws Exception {\n \t\tfinal long barrierId = receivedBarrier.getId();\n \n \t\t// fast path for single channel cases\n \t\tif (totalNumberOfInputChannels == 1) {\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n-\t\t\t\tnotifyCheckpoint(receivedBarrier, bufferedBytes, latestAlignmentDurationNanos);\n+\t\t\t\tnotifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos);\n \t\t\t}\n-\t\t\treturn false;\n+\t\t\tnotifyCheckpointCompletedOrCanceled(barrierId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5ODg4Ng==", "bodyText": "For the case of totalNumberOfInputChannels == 1, it should be handled separately for fast path. Then I suggest moving this path as a separate method to make #processBarrier seem shorter, and also it can be reused by below processCancellationBarrier if providing a function argument.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397598886", "createdAt": "2020-03-25T04:07:57Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -100,21 +105,20 @@ public boolean isBlocked(int channelIndex) {\n \t}\n \n \t@Override\n-\tpublic boolean processBarrier(CheckpointBarrier receivedBarrier, int channelIndex, long bufferedBytes) throws Exception {\n+\tpublic void processBarrier(CheckpointBarrier receivedBarrier, int channelIndex) throws Exception {\n \t\tfinal long barrierId = receivedBarrier.getId();\n \n \t\t// fast path for single channel cases\n \t\tif (totalNumberOfInputChannels == 1) {\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n-\t\t\t\tnotifyCheckpoint(receivedBarrier, bufferedBytes, latestAlignmentDurationNanos);\n+\t\t\t\tnotifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos);\n \t\t\t}\n-\t\t\treturn false;\n+\t\t\tnotifyCheckpointCompletedOrCanceled(barrierId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5ODQzNQ=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0NDkwOA==", "bodyText": "I have changed the implementation", "url": "https://github.com/apache/flink/pull/11351#discussion_r398344908", "createdAt": "2020-03-26T06:37:38Z", "author": {"login": "wsry"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -100,21 +105,20 @@ public boolean isBlocked(int channelIndex) {\n \t}\n \n \t@Override\n-\tpublic boolean processBarrier(CheckpointBarrier receivedBarrier, int channelIndex, long bufferedBytes) throws Exception {\n+\tpublic void processBarrier(CheckpointBarrier receivedBarrier, int channelIndex) throws Exception {\n \t\tfinal long barrierId = receivedBarrier.getId();\n \n \t\t// fast path for single channel cases\n \t\tif (totalNumberOfInputChannels == 1) {\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n-\t\t\t\tnotifyCheckpoint(receivedBarrier, bufferedBytes, latestAlignmentDurationNanos);\n+\t\t\t\tnotifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos);\n \t\t\t}\n-\t\t\treturn false;\n+\t\t\tnotifyCheckpointCompletedOrCanceled(barrierId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5ODQzNQ=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc1MzAwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowODoyOVrOF7LhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowODoyOVrOF7LhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5ODk4NQ==", "bodyText": "we can reduce this path for simple by https://github.com/apache/flink/pull/11351/files#r397598435", "url": "https://github.com/apache/flink/pull/11351#discussion_r397598985", "createdAt": "2020-03-25T04:08:29Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -140,14 +144,15 @@ else if (barrierId > currentCheckpointId) {\n \n \t\t\t\t// abort the current checkpoint\n \t\t\t\treleaseBlocksAndResetBarriers();\n-\t\t\t\tcheckpointAborted = true;\n+\t\t\t\tnotifyCheckpointCompletedOrCanceled(currentCheckpointId);\n \n \t\t\t\t// begin a new checkpoint\n \t\t\t\tbeginNewAlignment(barrierId, channelIndex, receivedBarrier.getTimestamp());\n \t\t\t}\n \t\t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc1MzUzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowODo0NlrOF7LhXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDowODo0NlrOF7LhXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5OTA2OA==", "bodyText": "we can also reduce this path for simple by https://github.com/apache/flink/pull/11351/files#r397598435", "url": "https://github.com/apache/flink/pull/11351#discussion_r397599068", "createdAt": "2020-03-25T04:08:46Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -157,7 +162,8 @@ else if (barrierId > currentCheckpointId) {\n \t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc1NjE5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxMDoyMVrOF7Li9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxMDoyMVrOF7Li9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5OTQ3OQ==", "bodyText": "Refer to this idea https://github.com/apache/flink/pull/11351/files#r397598435, we can also avoid calling notifyCheckpointCompletedOrCanceled in five paths.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397599479", "createdAt": "2020-03-25T04:10:21Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -214,7 +219,7 @@ protected void onBarrier(int channelIndex) throws IOException {\n \t}\n \n \t@Override\n-\tpublic boolean processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws Exception {\n+\tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc1NzcwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxMToyN1rOF7Ljzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoyMTowMFrOF7LsEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5OTY5NA==", "bodyText": "nit: should be private method.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397599694", "createdAt": "2020-03-25T04:11:27Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -318,6 +326,16 @@ public long getAlignmentDurationNanos() {\n \t\t}\n \t}\n \n+\tpublic void registerInputGate(CheckpointedInputGate inputGate) {\n+\t\tinputGates.add(checkNotNull(inputGate));\n+\t}\n+\n+\tpublic void notifyCheckpointCompletedOrCanceled(long checkpointId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMTgwOQ==", "bodyText": "We might need to adjust this method naming, because it is not indicating for the checkpoint really completed (the async checkpoint process). notifyUnblockInputChannels?", "url": "https://github.com/apache/flink/pull/11351#discussion_r397601809", "createdAt": "2020-03-25T04:21:00Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -318,6 +326,16 @@ public long getAlignmentDurationNanos() {\n \t\t}\n \t}\n \n+\tpublic void registerInputGate(CheckpointedInputGate inputGate) {\n+\t\tinputGates.add(checkNotNull(inputGate));\n+\t}\n+\n+\tpublic void notifyCheckpointCompletedOrCanceled(long checkpointId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5OTY5NA=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc2NjU4OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoxNjo1NlrOF7Lotg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNzoxODo1OVrOF756Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMDk1MA==", "bodyText": "I am considering the call sequence for notifyCheckpoint and notifyCheckpointCompletedOrCanceled.\nnotifyCheckpoint might take some time for local IO operations I guess. If we can notifyCheckpointCompletedOrCanceled beforehand to unblock upstream to send data, then it might get benefit for performance.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397600950", "createdAt": "2020-03-25T04:16:56Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -172,10 +178,9 @@ else if (barrierId > currentCheckpointId) {\n \t\t\t}\n \n \t\t\treleaseBlocksAndResetBarriers();\n-\t\t\tnotifyCheckpoint(receivedBarrier, bufferedBytes, latestAlignmentDurationNanos);\n-\t\t\treturn true;\n+\t\t\tnotifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos);\n+\t\t\tnotifyCheckpointCompletedOrCanceled(barrierId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0Njk5MA==", "bodyText": "As suggested above, I move notify to the end of this method which unifies the notify process", "url": "https://github.com/apache/flink/pull/11351#discussion_r398346990", "createdAt": "2020-03-26T06:44:18Z", "author": {"login": "wsry"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -172,10 +178,9 @@ else if (barrierId > currentCheckpointId) {\n \t\t\t}\n \n \t\t\treleaseBlocksAndResetBarriers();\n-\t\t\tnotifyCheckpoint(receivedBarrier, bufferedBytes, latestAlignmentDurationNanos);\n-\t\t\treturn true;\n+\t\t\tnotifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos);\n+\t\t\tnotifyCheckpointCompletedOrCanceled(barrierId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMDk1MA=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM1OTExMA==", "bodyText": "As suggested above, I have moved the notify to the end of the method to unify the notifications.", "url": "https://github.com/apache/flink/pull/11351#discussion_r398359110", "createdAt": "2020-03-26T07:18:59Z", "author": {"login": "wsry"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -172,10 +178,9 @@ else if (barrierId > currentCheckpointId) {\n \t\t\t}\n \n \t\t\treleaseBlocksAndResetBarriers();\n-\t\t\tnotifyCheckpoint(receivedBarrier, bufferedBytes, latestAlignmentDurationNanos);\n-\t\t\treturn true;\n+\t\t\tnotifyCheckpoint(receivedBarrier, latestAlignmentDurationNanos);\n+\t\t\tnotifyCheckpointCompletedOrCanceled(barrierId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMDk1MA=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc3NzU5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoyNDowMFrOF7Lu4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoyNDowMFrOF7Lu4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMjUyOQ==", "bodyText": "Another option is passing inputGate in constructor instead to avoid exposing another methods outside. Otherwise in tests if someone constructs the CheckpointBarrierAligner, but forgets to register gate afterwards, then the gates are actually touched in the internal related processes to bring unexpected behaviors.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397602529", "createdAt": "2020-03-25T04:24:00Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -318,6 +326,16 @@ public long getAlignmentDurationNanos() {\n \t\t}\n \t}\n \n+\tpublic void registerInputGate(CheckpointedInputGate inputGate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDc4MjEwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoyNjo1M1rOF7LxXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDoyNjo1M1rOF7LxXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMzE2Nw==", "bodyText": "we can avoid introducing the interface method and this empty implementation by https://github.com/apache/flink/pull/11351/files#r397602529", "url": "https://github.com/apache/flink/pull/11351#discussion_r397603167", "createdAt": "2020-03-25T04:26:53Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java", "diffHunk": "@@ -230,8 +227,7 @@ public long getAlignmentDurationNanos() {\n \t}\n \n \t@Override\n-\tpublic void checkpointSizeLimitExceeded(long maxBufferedBytes) throws Exception {\n-\t\tthrow new UnsupportedOperationException(\"This should never happened as this class doesn't block any data\");\n+\tpublic void registerInputGate(CheckpointedInputGate inputGate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDgwMDQzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo0MDowM1rOF7L77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo0MDowM1rOF7L77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNTg3MA==", "bodyText": "We can also avoid this synchronized after removing states by #11351 (comment)", "url": "https://github.com/apache/flink/pull/11351#discussion_r397605870", "createdAt": "2020-03-25T04:40:03Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -397,6 +409,17 @@ public void notifyBufferDestroyed() {\n \t\t// Nothing to do actually.\n \t}\n \n+\t@Override\n+\tpublic void onExactlyOnceCheckpointCompletedOrCanceled(long checkpointId) {\n+\t\tsynchronized (bufferQueue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDgwMTU4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo0MDo1MFrOF7L8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNDo0MDo1MFrOF7L8kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNjAzNA==", "bodyText": "if (isBlockedByCheckpoint(checkpointId)) {\n    notifyResumeConsumption()\n}", "url": "https://github.com/apache/flink/pull/11351#discussion_r397606034", "createdAt": "2020-03-25T04:40:50Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -397,6 +409,17 @@ public void notifyBufferDestroyed() {\n \t\t// Nothing to do actually.\n \t}\n \n+\t@Override\n+\tpublic void onExactlyOnceCheckpointCompletedOrCanceled(long checkpointId) {\n+\t\tsynchronized (bufferQueue) {\n+\t\t\tif (!isBlockedByCheckpoint(checkpointId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDgzMTUwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/InputChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTowMTowN1rOF7MOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNTowMVrOF7MsWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxMDUxNw==", "bodyText": "I considered discarding these two states in InputChannel level to unify reuse the states inside CheckpointBarrierAligner.\nRegarding the RemoteInputChannel case, these two states are used for avoiding unnecessary notification for upstream side if the unblock is triggered by other channels.\nOne possible option is to pass the boolean array of blocked channelsfromCheckpointBarrierAlignerwhile callingnotifyCheckpointCompletedOrCanceled. In CheckpointedInputGateandUnionInputGatelevel, they can also  pass the maintainedoffsetIndexto dedicatedSingleInputGate, then the single gate can judge whether the respective RemoteInputChannel` is actually blocked or not to notify the upstream side if necessary.\nRegarding the LocalInputChannel case, we can consider it separately.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397610517", "createdAt": "2020-03-25T05:01:07Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/InputChannel.java", "diffHunk": "@@ -56,6 +57,10 @@\n \n \tprotected final SingleInputGate inputGate;\n \n+\tprotected long currentCheckpointId = -1;\n+\n+\tprotected ChannelState channelState = ChannelState.CONSUMING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxODI2Ng==", "bodyText": "For the case of LocalInputChannel, the current problem is that when the subparition view notifies the data available, then the respective local channel would be added into gate data queue. When the gate pools buffer from such local channel, it should be aware whether this local channel was already blocked by CheckpointBarrierAligner or not. If blocked, it should not return this buffer to upper component to avoid caching.\nAnother option to solve this issue is to avoid adding local channel into gate queue via tagging the blocked state in ResultSubpartitionView. We already added this state in NetworkSequenceViewReader for remote channel. If we can migrate this state into ResultSubpartitionView level, then we can make reuse of this state for both remote and local channels. And I think it should be transparent to do the similar things either in  NetworkSequenceViewReader or ResultSubpartitionView.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397618266", "createdAt": "2020-03-25T05:35:01Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/InputChannel.java", "diffHunk": "@@ -56,6 +57,10 @@\n \n \tprotected final SingleInputGate inputGate;\n \n+\tprotected long currentCheckpointId = -1;\n+\n+\tprotected ChannelState channelState = ChannelState.CONSUMING;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxMDUxNw=="}, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTA3MzcwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzoxNDo1M1rOF7OboA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzoxNDo1M1rOF7OboA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0Njc1Mg==", "bodyText": "This can be removed if removing states by #11351 (comment)", "url": "https://github.com/apache/flink/pull/11351#discussion_r397646752", "createdAt": "2020-03-25T07:14:53Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -419,6 +442,17 @@ public int getAndResetUnannouncedCredit() {\n \t\treturn unannouncedCredit.getAndSet(0);\n \t}\n \n+\t/**\n+\t * Unblocks this channel from exactly once checkpoint.\n+\t */\n+\tpublic void unblockChannel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTA5NzU4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzoyNToyNFrOF7OqCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzoyNToyNFrOF7OqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MDQ0MQ==", "bodyText": "It should make use of existing writeAndFlushNextMessageIfPossible for writing any messages on downstream side, otherwise we might miss some conditions such as if (channelError.get() != null || !channel.isWritable())  inside previous writeAndFlushNextMessageIfPossible. And also bring much overhead work for maintaining two different paths (e.g. for failure handling).\nWe can refactor the existing inputChannelsWithCredit as a more general outbound message queue to insert both AddCredit and ResumeConsumption messages. And define an abstract ClientOutboundMessage with buildMessage method to be implemented by AddCredit and ResumeConsumption separately during writeAndFlushNextMessageIfPossible.", "url": "https://github.com/apache/flink/pull/11351#discussion_r397650441", "createdAt": "2020-03-25T07:25:24Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "diffHunk": "@@ -193,6 +199,16 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object msg) throws Exc\n \t\t\tif (triggerWrite) {\n \t\t\t\twriteAndFlushNextMessageIfPossible(ctx.channel());\n \t\t\t}\n+\t\t} else if (msg instanceof ResumeConsumptionEvent) {\n+\t\t\tRemoteInputChannel inputChannel = ((ResumeConsumptionEvent) msg).inputChannel;\n+\t\t\tinputChannel.unblockChannel();\n+\t\t\tResumeConsumption resumeConsumption = new ResumeConsumption(inputChannel.getInputChannelId());\n+\n+\t\t\tctx.channel().writeAndFlush(resumeConsumption).addListener((ChannelFutureListener) channelFuture -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47267a0ddd0dd8fded91dc33eeaecac3c83cbb36"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE3MTcwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0NTozN1rOGAIqXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0NTozN1rOGAIqXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5NTEwMA==", "bodyText": "It seems not clear whether the passed dataType must be an event type or not. So the method naming with argument seems not consistent, i prefer to naming the method as tagDataType or setDataType", "url": "https://github.com/apache/flink/pull/11351#discussion_r402795100", "createdAt": "2020-04-03T07:45:37Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -55,9 +57,9 @@\n \tboolean isBuffer();\n \n \t/**\n-\t * Tags this buffer to represent an event.\n+\t * Tags this buffer to represent an event of the given type.\n \t */\n-\tvoid tagAsEvent();\n+\tvoid tagAsEvent(DataType dataType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE5MjEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MDo0OFrOGAI2Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MDo0OFrOGAI2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5ODE1NA==", "bodyText": "nit: add an empty line after each value.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402798154", "createdAt": "2020-04-03T07:50:48Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +229,53 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer contains.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.\n+\t */\n+\tenum DataType {\n+\t\t/**\n+\t\t * DATA_BUFFER indicates that this buffer represents a non-event data buffer.\n+\t\t */\n+\t\tDATA_BUFFER(true, false),\n+\t\t/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODIwMDcwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MjozMVrOGAI7BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MjozMVrOGAI7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5OTM2NA==", "bodyText": "OTHER_EVENT instead", "url": "https://github.com/apache/flink/pull/11351#discussion_r402799364", "createdAt": "2020-04-03T07:52:31Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +229,53 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer contains.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.\n+\t */\n+\tenum DataType {\n+\t\t/**\n+\t\t * DATA_BUFFER indicates that this buffer represents a non-event data buffer.\n+\t\t */\n+\t\tDATA_BUFFER(true, false),\n+\t\t/**\n+\t\t * EXACTLY_ONCE_CHECKPOINT_BARRIER indicates that this buffer represents a\n+\t\t * serialized checkpoint barrier of exactly once checkpoint mode.\n+\t\t */\n+\t\tEXACTLY_ONCE_CHECKPOINT_BARRIER(false, true),\n+\t\t/**\n+\t\t * UNKNOWN_EVENT indicates this buffer represents serialized data of other\n+\t\t * unknown event.\n+\t\t */\n+\t\tUNKNOWN_EVENT(false, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODIzMzA3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1ODowM1rOGAJMzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1ODowM1rOGAJMzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwMzkxOA==", "bodyText": "It does not need to maintain this so specific property, otherwise when we further extend the data type enum future, it also needs to extend the respective field here.\nisBuffer is a general property to be retained for widely use.  Then we can also judge via getDataType == DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER  to replace isExactlyOnceCheckpointBarrier.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402803918", "createdAt": "2020-04-03T07:58:03Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +229,53 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer contains.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.\n+\t */\n+\tenum DataType {\n+\t\t/**\n+\t\t * DATA_BUFFER indicates that this buffer represents a non-event data buffer.\n+\t\t */\n+\t\tDATA_BUFFER(true, false),\n+\t\t/**\n+\t\t * EXACTLY_ONCE_CHECKPOINT_BARRIER indicates that this buffer represents a\n+\t\t * serialized checkpoint barrier of exactly once checkpoint mode.\n+\t\t */\n+\t\tEXACTLY_ONCE_CHECKPOINT_BARRIER(false, true),\n+\t\t/**\n+\t\t * UNKNOWN_EVENT indicates this buffer represents serialized data of other\n+\t\t * unknown event.\n+\t\t */\n+\t\tUNKNOWN_EVENT(false, false);\n+\n+\t\tprivate final boolean isBuffer;\n+\n+\t\tprivate final boolean isExactlyOnceCheckpointBarrier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI0MDM4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/BufferConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1OTowMlrOGAJQkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1OTowMlrOGAJQkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNDg4MA==", "bodyText": "nit: bufferDataType -> dataType", "url": "https://github.com/apache/flink/pull/11351#discussion_r402804880", "createdAt": "2020-04-03T07:59:02Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/BufferConsumer.java", "diffHunk": "@@ -53,23 +53,23 @@ public BufferConsumer(\n \t\t\tPositionMarker currentWriterPosition,\n \t\t\tint currentReaderPosition) {\n \t\tthis(\n-\t\t\tnew NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler), true),\n+\t\t\tnew NetworkBuffer(checkNotNull(memorySegment), checkNotNull(recycler)),\n \t\t\tcurrentWriterPosition,\n \t\t\tcurrentReaderPosition);\n \t}\n \n \t/**\n \t * Constructs {@link BufferConsumer} instance with static content.\n \t */\n-\tpublic BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, boolean isBuffer) {\n-\t\tthis(memorySegment, recycler, memorySegment.size(), isBuffer);\n+\tpublic BufferConsumer(MemorySegment memorySegment, BufferRecycler recycler, Buffer.DataType bufferDataType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI0NjE5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1OTo1NFrOGAJTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1OTo1NFrOGAJTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNTY1OA==", "bodyText": "ditto: dataType", "url": "https://github.com/apache/flink/pull/11351#discussion_r402805658", "createdAt": "2020-04-03T07:59:54Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "diffHunk": "@@ -52,8 +52,8 @@\n \t/** The recycler for the backing {@link MemorySegment}. */\n \tprivate final BufferRecycler recycler;\n \n-\t/** Whether this buffer represents a buffer or an event. */\n-\tprivate boolean isBuffer;\n+\t/** The {@link DataType} this buffer contains. */\n+\tprivate DataType bufferDataType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI0ODIxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMDoxOFrOGAJUvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowMDoxOFrOGAJUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwNTk1MA==", "bodyText": "contains -> represents", "url": "https://github.com/apache/flink/pull/11351#discussion_r402805950", "createdAt": "2020-04-03T08:00:18Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "diffHunk": "@@ -52,8 +52,8 @@\n \t/** The recycler for the backing {@link MemorySegment}. */\n \tprivate final BufferRecycler recycler;\n \n-\t/** Whether this buffer represents a buffer or an event. */\n-\tprivate boolean isBuffer;\n+\t/** The {@link DataType} this buffer contains. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODI5MTA2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODowNzoxNlrOGAJr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNToxNzoyNFrOGDxRvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMTg4Mg==", "bodyText": "why remove condition of finish?", "url": "https://github.com/apache/flink/pull/11351#discussion_r402811882", "createdAt": "2020-04-03T08:07:16Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -114,7 +114,7 @@ private boolean add(BufferConsumer bufferConsumer, boolean finish) {\n \t\t\tbuffers.add(bufferConsumer);\n \t\t\tupdateStatistics(bufferConsumer);\n \t\t\tincreaseBuffersInBacklog(bufferConsumer);\n-\t\t\tnotifyDataAvailable = shouldNotifyDataAvailable() || finish;\n+\t\t\tnotifyDataAvailable = shouldNotifyDataAvailable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDc3NjMyNQ==", "bodyText": "We don't need special handling for EOF here, if I keep the || finish, considering the blockByCheckpoint tag, the condition looks this\nnotifyDataAvailable = shouldNotifyDataAvailable() || (finish && !isBlockedByCheckpoint);, which is not elegant enough.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404776325", "createdAt": "2020-04-07T12:40:58Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -114,7 +114,7 @@ private boolean add(BufferConsumer bufferConsumer, boolean finish) {\n \t\t\tbuffers.add(bufferConsumer);\n \t\t\tupdateStatistics(bufferConsumer);\n \t\t\tincreaseBuffersInBacklog(bufferConsumer);\n-\t\t\tnotifyDataAvailable = shouldNotifyDataAvailable() || finish;\n+\t\t\tnotifyDataAvailable = shouldNotifyDataAvailable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMTg4Mg=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwNjI3MA==", "bodyText": "If this condition is actually redundant irrelevant with this PR, then we can create a separate ticket for removing it.\nI am not sure whether there were any considerations for adding this tag before and might impact behaviors, then it is better for a separate ticket for checking instead of a hotfix commit.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406606270", "createdAt": "2020-04-10T05:17:24Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -114,7 +114,7 @@ private boolean add(BufferConsumer bufferConsumer, boolean finish) {\n \t\t\tbuffers.add(bufferConsumer);\n \t\t\tupdateStatistics(bufferConsumer);\n \t\t\tincreaseBuffersInBacklog(bufferConsumer);\n-\t\t\tnotifyDataAvailable = shouldNotifyDataAvailable() || finish;\n+\t\t\tnotifyDataAvailable = shouldNotifyDataAvailable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxMTg4Mg=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODMyMDI2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxMTo1MlrOGAJ74w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowNDoxOVrOGAO7ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNTk3MQ==", "bodyText": "use buffer.getDataType() == Buffer.DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER instead.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402815971", "createdAt": "2020-04-03T08:11:52Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NzgwMg==", "bodyText": "I add a util method in Buffer.DataType to judge if a Buffer is an ExactlyOnceCheckpointBarrier", "url": "https://github.com/apache/flink/pull/11351#discussion_r402897802", "createdAt": "2020-04-03T10:04:19Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxNTk3MQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODMzODI1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoxNDo0MVrOGAKFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzowOTozMVrOGB1ysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxODQ5MQ==", "bodyText": "The readerView maintains the blocked state, then I prefer to moving this judgement inside subpartition view. So we can remove this method blockOnCheckpointBarrier completely.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402818491", "createdAt": "2020-04-03T08:14:41Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();\n+\t\t\tif (isExactlyOnceCheckpointBarrier) {\n+\t\t\t\treadView.blockOnCheckpointBarrier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyMzAyNg==", "bodyText": "To do so, we have three components to maintain the separate states to finalize the final available state.\nResultSubpartition:  data available via BufferAndBacklog internal state\nResultSubpartitionView: blocked state when polling barrier\nNetworkSequenceViewReader: credit available", "url": "https://github.com/apache/flink/pull/11351#discussion_r402823026", "createdAt": "2020-04-03T08:20:01Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();\n+\t\t\tif (isExactlyOnceCheckpointBarrier) {\n+\t\t\t\treadView.blockOnCheckpointBarrier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxODQ5MQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MzA5MA==", "bodyText": "As discussed, I moved the blockedByCheckpoint tag to subpartition.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404583090", "createdAt": "2020-04-07T07:09:31Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();\n+\t\t\tif (isExactlyOnceCheckpointBarrier) {\n+\t\t\t\treadView.blockOnCheckpointBarrier();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgxODQ5MQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODM4MTAyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODoyMTozNFrOGAKc1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxMDozMFrOGB10lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNDQwNw==", "bodyText": "Remove !isExactlyOnceCheckpointBarrier to not mix this state with ResultSubpartition component, we can get this blocked state separately from ResultSubpartitionView, then every concept is clean.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402824407", "createdAt": "2020-04-03T08:21:34Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();\n+\t\t\tif (isExactlyOnceCheckpointBarrier) {\n+\t\t\t\treadView.blockOnCheckpointBarrier();\n+\t\t\t}\n+\n \t\t\tupdateStatistics(buffer);\n \t\t\t// Do not report last remaining buffer on buffers as available to read (assuming it's unfinished).\n \t\t\t// It will be reported for reading either on flush or when the number of buffers in the queue\n \t\t\t// will be 2 or more.\n \t\t\treturn new BufferAndBacklog(\n \t\t\t\tbuffer,\n-\t\t\t\tisAvailableUnsafe(),\n+\t\t\t\tisAvailableUnsafe() && !isExactlyOnceCheckpointBarrier,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDY4OQ==", "bodyText": "the downstream task of LocalChannel will check this isAvailable state and decide whether to add the corresponding input channel to available queue again.\nI will move this to constructor of BufferAndBacklog.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402900689", "createdAt": "2020-04-03T10:09:42Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();\n+\t\t\tif (isExactlyOnceCheckpointBarrier) {\n+\t\t\t\treadView.blockOnCheckpointBarrier();\n+\t\t\t}\n+\n \t\t\tupdateStatistics(buffer);\n \t\t\t// Do not report last remaining buffer on buffers as available to read (assuming it's unfinished).\n \t\t\t// It will be reported for reading either on flush or when the number of buffers in the queue\n \t\t\t// will be 2 or more.\n \t\t\treturn new BufferAndBacklog(\n \t\t\t\tbuffer,\n-\t\t\t\tisAvailableUnsafe(),\n+\t\t\t\tisAvailableUnsafe() && !isExactlyOnceCheckpointBarrier,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNDQwNw=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MzU3Mg==", "bodyText": "I have unified this tag with isAvailable.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404583572", "createdAt": "2020-04-07T07:10:30Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -197,13 +197,18 @@ BufferAndBacklog pollBuffer() {\n \t\t\t\treturn null;\n \t\t\t}\n \n+\t\t\tboolean isExactlyOnceCheckpointBarrier = buffer.getDataType().isExactlyOnceCheckpointBarrier();\n+\t\t\tif (isExactlyOnceCheckpointBarrier) {\n+\t\t\t\treadView.blockOnCheckpointBarrier();\n+\t\t\t}\n+\n \t\t\tupdateStatistics(buffer);\n \t\t\t// Do not report last remaining buffer on buffers as available to read (assuming it's unfinished).\n \t\t\t// It will be reported for reading either on flush or when the number of buffers in the queue\n \t\t\t// will be 2 or more.\n \t\t\treturn new BufferAndBacklog(\n \t\t\t\tbuffer,\n-\t\t\t\tisAvailableUnsafe(),\n+\t\t\t\tisAvailableUnsafe() && !isExactlyOnceCheckpointBarrier,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgyNDQwNw=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODQ0NTMxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozMjoxMlrOGALAhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxMjoyMVrOGB14Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzU0MA==", "bodyText": "I know it can avoid entering the following actions if readerView is not fitted.  But another issue is that notifyDataAvailable would be called in three places in this class, and it already judges the readerView inside for unification. So I suggested to add the condition readView.isBlockedByCheckpoint() inside notifyDataAvailable.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402833540", "createdAt": "2020-04-03T08:32:12Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -302,7 +307,7 @@ public int unsynchronizedGetNumberOfQueuedBuffers() {\n \tpublic void flush() {\n \t\tfinal boolean notifyDataAvailable;\n \t\tsynchronized (buffers) {\n-\t\t\tif (buffers.isEmpty()) {\n+\t\t\tif (buffers.isEmpty() || readView == null || readView.isBlockedByCheckpoint()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NDUzOQ==", "bodyText": "Some tags should be  checked in lock, I removed the check in notifyDataAvailable.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404584539", "createdAt": "2020-04-07T07:12:21Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -302,7 +307,7 @@ public int unsynchronizedGetNumberOfQueuedBuffers() {\n \tpublic void flush() {\n \t\tfinal boolean notifyDataAvailable;\n \t\tsynchronized (buffers) {\n-\t\t\tif (buffers.isEmpty()) {\n+\t\t\tif (buffers.isEmpty() || readView == null || readView.isBlockedByCheckpoint()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzMzU0MA=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODQ1ODU2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwODozNDoxOVrOGALHuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxMjo1MlrOGB15aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNTM4Nw==", "bodyText": "also we can remove this condition by reusing it inside notifyDataAvailable as mentioned above.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402835387", "createdAt": "2020-04-03T08:34:19Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -376,7 +381,7 @@ public int getBuffersInBacklog() {\n \n \tprivate boolean shouldNotifyDataAvailable() {\n \t\t// Notify only when we added first finished buffer.\n-\t\treturn readView != null && !flushRequested && getNumberOfFinishedBuffers() == 1;\n+\t\treturn readView != null && !flushRequested && !readView.isBlockedByCheckpoint() && getNumberOfFinishedBuffers() == 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NDgxMQ==", "bodyText": "Some tags should be checked in lock, I removed the check in notifyDataAvailable.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404584811", "createdAt": "2020-04-07T07:12:52Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -376,7 +381,7 @@ public int getBuffersInBacklog() {\n \n \tprivate boolean shouldNotifyDataAvailable() {\n \t\t// Notify only when we added first finished buffer.\n-\t\treturn readView != null && !flushRequested && getNumberOfFinishedBuffers() == 1;\n+\t\treturn readView != null && !flushRequested && !readView.isBlockedByCheckpoint() && getNumberOfFinishedBuffers() == 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgzNTM4Nw=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg3Mjk1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowMToyN1rOGAO1ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxMzoxN1rOGB16Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NjI5MQ==", "bodyText": "It is sensitive to maintain a volatile variable in core stack. Actually we can avoid it for RemoteInputChannel by accessing it only by netty stack, it would only bring one more unnecessary UserEventTrigger in netty stack. But for local channel, it has problems now, let us think whether they are other options to bypass.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402896291", "createdAt": "2020-04-03T10:01:27Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionView.java", "diffHunk": "@@ -39,6 +40,8 @@\n \t/** Flag indicating whether this view has been released. */\n \tprivate final AtomicBoolean isReleased;\n \n+\tprivate volatile boolean isBlockedByCheckpoint = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NTAxNA==", "bodyText": "As discussed, I moved the blockedByCheckpoint tag to subpartition.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404585014", "createdAt": "2020-04-07T07:13:17Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionView.java", "diffHunk": "@@ -39,6 +40,8 @@\n \t/** Flag indicating whether this view has been released. */\n \tprivate final AtomicBoolean isReleased;\n \n+\tprivate volatile boolean isBlockedByCheckpoint = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5NjI5MQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg5NDM3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedSequenceNumberingViewReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowODoxN1rOGAPDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNDo1M1rOGB193g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTg3MQ==", "bodyText": "From subpartitionView prospective , it is better to give a overall method for judging its condition, not spreading multiple conditions. we might need to refactor the current ResultSubpartition#isAvailable for also considering blocked state with nextBufferIsEvent.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402899871", "createdAt": "2020-04-03T10:08:17Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedSequenceNumberingViewReader.java", "diffHunk": "@@ -119,7 +124,7 @@ public boolean isAvailable() {\n \t\t\treturn subpartitionView.isAvailable();\n \t\t}\n \t\telse {\n-\t\t\treturn subpartitionView.nextBufferIsEvent();\n+\t\t\treturn !subpartitionView.isBlockedByCheckpoint() && subpartitionView.nextBufferIsEvent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NTk1MA==", "bodyText": "I unified the isBlockedByCheckpoint tag with isAvailable.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404585950", "createdAt": "2020-04-07T07:14:53Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedSequenceNumberingViewReader.java", "diffHunk": "@@ -119,7 +124,7 @@ public boolean isAvailable() {\n \t\t\treturn subpartitionView.isAvailable();\n \t\t}\n \t\telse {\n-\t\t\treturn subpartitionView.nextBufferIsEvent();\n+\t\t\treturn !subpartitionView.isBlockedByCheckpoint() && subpartitionView.nextBufferIsEvent();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg5OTg3MQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODg5OTgxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartitionView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDowOTo0NFrOGAPG6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoxMDozMlrOGAPIng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDcxNQ==", "bodyText": "As above commented, if we can avoid task thread touching the blocked state, then together with https://github.com/apache/flink/pull/11351/files#r402899871, we can remove this method completely.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402900715", "createdAt": "2020-04-03T10:09:44Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartitionView.java", "diffHunk": "@@ -50,6 +50,10 @@\n \n \tboolean isReleased();\n \n+\tboolean isBlockedByCheckpoint();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMTE1MA==", "bodyText": "Actually i want this state already be covered by part of existing isAvailable method.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402901150", "createdAt": "2020-04-03T10:10:32Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartitionView.java", "diffHunk": "@@ -50,6 +50,10 @@\n \n \tboolean isReleased();\n \n+\tboolean isBlockedByCheckpoint();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMDcxNQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk3MjMwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozMTo1OFrOGAPz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNzozMFrOGB2C-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMjIyNA==", "bodyText": "I notice that some usages are relying on the ordinal  of enum value. So do you think we should give some notes to avoid adjusting the existing sequence if extending it future?", "url": "https://github.com/apache/flink/pull/11351#discussion_r402912224", "createdAt": "2020-04-03T10:31:58Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +229,53 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer contains.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NzI1OA==", "bodyText": "The ordinal of enum value is used when writing buffer to disk and sending buffers through network. As suggested, I have removed those logic so the ordinal of enum value is never used now.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404587258", "createdAt": "2020-04-07T07:17:30Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +229,53 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer contains.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMjIyNA=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk4Mjk3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/NettyMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNToxOFrOGAP6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNToxOFrOGAP6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzg3OQ==", "bodyText": "we can still retain the isBuffer as before, because it is enough now to avoid increasing the header size.", "url": "https://github.com/apache/flink/pull/11351#discussion_r402913879", "createdAt": "2020-04-03T10:35:18Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/NettyMessage.java", "diffHunk": "@@ -276,22 +279,22 @@ protected Object decode(ChannelHandlerContext ctx, ByteBuf in) throws Exception\n \n \t\tfinal int backlog;\n \n-\t\tfinal boolean isBuffer;\n+\t\tfinal Buffer.DataType bufferDataType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk4NzQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNjo0MVrOGAP9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNjo0MVrOGAP9Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDU2Ng==", "bodyText": "unrelated change", "url": "https://github.com/apache/flink/pull/11351#discussion_r402914566", "createdAt": "2020-04-03T10:36:41Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -311,10 +310,11 @@ public void recycle(MemorySegment segment) {\n \t\t\t\t\tExceptionUtils.rethrow(t);\n \t\t\t\t}\n \t\t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk4NzgzOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNjo1MFrOGAP9Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNjo1MFrOGAP9Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDYzNQ==", "bodyText": "unrelated change", "url": "https://github.com/apache/flink/pull/11351#discussion_r402914635", "createdAt": "2020-04-03T10:36:50Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -299,7 +299,6 @@ private void notifyCreditAvailable() {\n \t@Override\n \tpublic void recycle(MemorySegment segment) {\n \t\tint numAddedBuffers;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk4ODk5OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNzowOFrOGAP9-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNzowOFrOGAP9-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDgxMQ==", "bodyText": "unrelated change", "url": "https://github.com/apache/flink/pull/11351#discussion_r402914811", "createdAt": "2020-04-03T10:37:08Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -482,7 +492,6 @@ public Buffer requestBuffer() {\n \t */\n \tvoid onSenderBacklog(int backlog) throws IOException {\n \t\tint numRequestedBuffers = 0;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk5MTI2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNzo1NVrOGAP_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNzo1NVrOGAP_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTE3MQ==", "bodyText": "unrelated change?", "url": "https://github.com/apache/flink/pull/11351#discussion_r402915171", "createdAt": "2020-04-03T10:37:55Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -383,7 +383,7 @@ public NotificationResult notifyBufferAvailable(Buffer buffer) {\n \t\t\t\t}\n \t\t\t}\n \n-\t\t\tif (unannouncedCredit.getAndAdd(1) == 0) {\n+\t\t\tif (unannouncedCredit.getAndIncrement() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk5MTk0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozODowNlrOGAP_xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozODowNlrOGAP_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTI2OA==", "bodyText": "unrelated change?", "url": "https://github.com/apache/flink/pull/11351#discussion_r402915268", "createdAt": "2020-04-03T10:38:06Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -311,10 +310,11 @@ public void recycle(MemorySegment segment) {\n \t\t\t\t\tExceptionUtils.rethrow(t);\n \t\t\t\t}\n \t\t\t}\n+\n \t\t\tnumAddedBuffers = bufferQueue.addExclusiveBuffer(new NetworkBuffer(segment, this), numRequiredBuffers);\n \t\t}\n \n-\t\tif (numAddedBuffers > 0 && unannouncedCredit.getAndAdd(numAddedBuffers) == 0) {\n+\t\tif (numAddedBuffers > 0 && unannouncedCredit.getAndIncrement() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk5MzY2OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/NettyMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozODozOVrOGAQA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozODozOVrOGAQA1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTU0MA==", "bodyText": "unrelated change?", "url": "https://github.com/apache/flink/pull/11351#discussion_r402915540", "createdAt": "2020-04-03T10:38:39Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/NettyMessage.java", "diffHunk": "@@ -681,8 +684,6 @@ static CloseRequest readFrom(@SuppressWarnings(\"unused\") ByteBuf buffer) throws\n \t\tfinal InputChannelID receiverId;\n \n \t\tAddCredit(int credit, InputChannelID receiverId) {\n-\t\t\tcheckArgument(credit > 0, \"The announced credit should be greater than 0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDEzMjA4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0MDo1OVrOGBxxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0MDo1OVrOGBxxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNzE3Mg==", "bodyText": "nit: adjust the comment as well.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404517172", "createdAt": "2020-04-07T03:40:59Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "diffHunk": "@@ -310,19 +316,17 @@ private void writeAndFlushNextMessageIfPossible(Channel channel) {\n \t\t}\n \n \t\twhile (true) {\n-\t\t\tRemoteInputChannel inputChannel = inputChannelsWithCredit.poll();\n+\t\t\tClientOutboundMessage outboundMessage = clientOutboundMessages.poll();\n \n \t\t\t// The input channel may be null because of the write callbacks\n \t\t\t// that are executed after each write.\n-\t\t\tif (inputChannel == null) {\n+\t\t\tif (outboundMessage == null) {\n \t\t\t\treturn;\n \t\t\t}\n \n \t\t\t//It is no need to notify credit for the released channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDEzNzE5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0NDoxNVrOGBx0Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0NDoxNVrOGBx0Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNzk1NQ==", "bodyText": "nit: checkNotNull(inputChannel)", "url": "https://github.com/apache/flink/pull/11351#discussion_r404517955", "createdAt": "2020-04-07T03:44:15Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "diffHunk": "@@ -350,4 +354,38 @@ public void operationComplete(ChannelFuture future) throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate static abstract class ClientOutboundMessage {\n+\t\tprotected final RemoteInputChannel inputChannel;\n+\n+\t\tClientOutboundMessage(RemoteInputChannel inputChannel) {\n+\t\t\tthis.inputChannel = inputChannel;\n+\t\t}\n+\n+\t\tabstract Object buildMessage();\n+\t}\n+\n+\tprivate static class AddCreditMessage extends ClientOutboundMessage {\n+\n+\t\tAddCreditMessage(RemoteInputChannel inputChannel) {\n+\t\t\tsuper(inputChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDEzNzQyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0NDoyNFrOGBx0ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMzo0NDoyNFrOGBx0ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUxNzk4OQ==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11351#discussion_r404517989", "createdAt": "2020-04-07T03:44:24Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/CreditBasedPartitionRequestClientHandler.java", "diffHunk": "@@ -350,4 +354,38 @@ public void operationComplete(ChannelFuture future) throws Exception {\n \t\t\t}\n \t\t}\n \t}\n+\n+\tprivate static abstract class ClientOutboundMessage {\n+\t\tprotected final RemoteInputChannel inputChannel;\n+\n+\t\tClientOutboundMessage(RemoteInputChannel inputChannel) {\n+\t\t\tthis.inputChannel = inputChannel;\n+\t\t}\n+\n+\t\tabstract Object buildMessage();\n+\t}\n+\n+\tprivate static class AddCreditMessage extends ClientOutboundMessage {\n+\n+\t\tAddCreditMessage(RemoteInputChannel inputChannel) {\n+\t\t\tsuper(inputChannel);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object buildMessage() {\n+\t\t\treturn new AddCredit(inputChannel.getAndResetUnannouncedCredit(), inputChannel.getInputChannelId());\n+\t\t}\n+\t}\n+\n+\tprivate static class ResumeConsumptionMessage extends ClientOutboundMessage {\n+\n+\t\tResumeConsumptionMessage(RemoteInputChannel inputChannel) {\n+\t\t\tsuper(inputChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDE2NDQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDowMzozMFrOGByEig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDowMzozMFrOGByEig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyMjEyMg==", "bodyText": "request->requests, exactly-once", "url": "https://github.com/apache/flink/pull/11351#discussion_r404522122", "createdAt": "2020-04-07T04:03:30Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueue.java", "diffHunk": "@@ -161,6 +161,26 @@ void addCredit(InputChannelID receiverId, int credit) throws Exception {\n \t\t}\n \t}\n \n+\t/**\n+\t * The consumer request to resume data consumption after an exactly once checkpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDIxNjQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNDozNjo0NVrOGByi-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo1MzoxOVrOGB75_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyOTkxNQ==", "bodyText": "should we further remove this method because it is always return 0 after this PR? If so, how many changes it will be involved?", "url": "https://github.com/apache/flink/pull/11351#discussion_r404529915", "createdAt": "2020-04-07T04:36:45Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java", "diffHunk": "@@ -59,19 +56,13 @@ public CheckpointMetrics(\n \t\tcheckArgument(bytesBufferedInAlignment >= -1);\n \t\tcheckArgument(alignmentDurationNanos >= -1);\n \n-\t\tthis.bytesBufferedInAlignment = bytesBufferedInAlignment;\n \t\tthis.alignmentDurationNanos = alignmentDurationNanos;\n \t\tthis.syncDurationMillis = syncDurationMillis;\n \t\tthis.asyncDurationMillis = asyncDurationMillis;\n \t}\n \n \tpublic long getBytesBufferedInAlignment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MzI2MQ==", "bodyText": "I further removed the relevant code except those in rest handler, the rest handler always return 0 to the web ui, I think we need another ticket to further remove it in web ui.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404683261", "createdAt": "2020-04-07T09:53:19Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java", "diffHunk": "@@ -59,19 +56,13 @@ public CheckpointMetrics(\n \t\tcheckArgument(bytesBufferedInAlignment >= -1);\n \t\tcheckArgument(alignmentDurationNanos >= -1);\n \n-\t\tthis.bytesBufferedInAlignment = bytesBufferedInAlignment;\n \t\tthis.alignmentDurationNanos = alignmentDurationNanos;\n \t\tthis.syncDurationMillis = syncDurationMillis;\n \t\tthis.asyncDurationMillis = asyncDurationMillis;\n \t}\n \n \tpublic long getBytesBufferedInAlignment() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUyOTkxNQ=="}, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDI5NjE0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyMTo0OFrOGBzRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyMTo0OFrOGBzRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MTc4NA==", "bodyText": "In mostly normal cases, this list should not be created beforehand, so it is better to create based on demand.\nI know it is for unification consideration. Another option is that we can migrate partial resume notification inside releaseBlocksAndResetBarriers which is involved in batch of channels to be notified.\nThen the other cases are all for the single channel notification which can be done inside #processBarrier. Then we can define boolean shouldNotify beforehand, and to remove unnecessary two else conditions below to make the logics seem shorter. And at the end to notify the channelIndex if shouldNotify set as false intermediate steps.\nAnother potential benefit is to make notification happen before notifyCheckpoint. notifyCheckpoint would be involved in some IO operations during sync process, so it is better to notify light-weight unblock actions beforehand to make data ready earlier.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404541784", "createdAt": "2020-04-07T05:21:48Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -100,21 +119,22 @@ public boolean isBlocked(int channelIndex) {\n \t}\n \n \t@Override\n-\tpublic boolean processBarrier(CheckpointBarrier receivedBarrier, int channelIndex, long bufferedBytes) throws Exception {\n+\tpublic void processBarrier(CheckpointBarrier receivedBarrier, int channelIndex) throws Exception {\n \t\tfinal long barrierId = receivedBarrier.getId();\n+\t\tList<Integer> channelsToUnblock = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDMwMTI0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyNDoyM1rOGBzUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyNDoyM1rOGBzUWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MjU1NQ==", "bodyText": "Considering my above concerns, all the resume notification can be done inside releaseBlocksAndResetBarriers instead", "url": "https://github.com/apache/flink/pull/11351#discussion_r404542555", "createdAt": "2020-04-07T05:24:23Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -214,8 +233,9 @@ protected void onBarrier(int channelIndex) throws IOException {\n \t}\n \n \t@Override\n-\tpublic boolean processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws Exception {\n+\tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws Exception {\n \t\tfinal long barrierId = cancelBarrier.getCheckpointId();\n+\t\tList<Integer> channelsToUnblock = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDMwMzYzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyNTozNFrOGBzVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyNTozNFrOGBzVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MjkxOA==", "bodyText": "ditto: make notification inside releaseBlocksAndResetBarriers", "url": "https://github.com/apache/flink/pull/11351#discussion_r404542918", "createdAt": "2020-04-07T05:25:34Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -280,28 +298,29 @@ else if (barrierId > currentCheckpointId) {\n \t\t\t}\n \n \t\t\tnotifyAbortOnCancellationBarrier(barrierId);\n-\t\t\treturn false;\n \t\t}\n \n \t\t// else: trailing barrier from either\n \t\t//   - a previous (subsumed) checkpoint\n \t\t//   - the current checkpoint if it was already canceled\n-\t\treturn false;\n+\n+\t\tunblockCheckpoint(channelsToUnblock);\n \t}\n \n \t@Override\n-\tpublic boolean processEndOfPartition() throws Exception {\n+\tpublic void processEndOfPartition() throws Exception {\n \t\tnumClosedChannels++;\n \n+\t\tList<Integer> channelsToUnblock = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDUxMzQ3OnYy", "diffSide": "LEFT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo1Mjo1N1rOGB1TYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo1Mjo1N1rOGB1TYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3NTA3NQ==", "bodyText": "return Optional.empty(); can be merged in condition. also remove throws Exception\n\nprivate Optional handleEmptyBuffer()  {\nif (inputGate.isFinished()) {\nisFinished = true;\n}\nreturn Optional.empty();\n}", "url": "https://github.com/apache/flink/pull/11351#discussion_r404575075", "createdAt": "2020-04-07T06:52:57Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java", "diffHunk": "@@ -180,40 +141,15 @@ private int offsetChannelIndex(int channelIndex) {\n \t\t\treturn Optional.empty();\n \t\t}\n \n-\t\tif (endOfInputGate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU2Mjk0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/CheckpointBarrier.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzowODo0NVrOGB1xKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzowODo0NVrOGB1xKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4MjY5OA==", "bodyText": "it would be better to make isExactlyOnceMode as an internal field of CheckpointOptions, then we can avoid touching the changes of multiple related classes.", "url": "https://github.com/apache/flink/pull/11351#discussion_r404582698", "createdAt": "2020-04-07T07:08:45Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/CheckpointBarrier.java", "diffHunk": "@@ -47,11 +48,18 @@\n \tprivate final long id;\n \tprivate final long timestamp;\n \tprivate final CheckpointOptions checkpointOptions;\n+\tprivate final boolean isExactlyOnceMode;\n \n+\t@VisibleForTesting\n \tpublic CheckpointBarrier(long id, long timestamp, CheckpointOptions checkpointOptions) {\n+\t\tthis(id, timestamp, checkpointOptions, true);\n+\t}\n+\n+\tpublic CheckpointBarrier(long id, long timestamp, CheckpointOptions checkpointOptions, boolean isExactlyOnceMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU4NzE1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjowOFrOGB2AMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjowOFrOGB2AMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjU0Nw==", "bodyText": "nit: package private", "url": "https://github.com/apache/flink/pull/11351#discussion_r404586547", "createdAt": "2020-04-07T07:16:08Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -130,26 +112,26 @@ private static CheckpointBarrierHandler createCheckpointBarrierHandler(\n \t\t}\n \t}\n \n-\tprivate static BufferStorage createBufferStorage(\n-\t\t\tCheckpointingMode checkpointMode,\n-\t\t\tint pageSize,\n-\t\t\tConfiguration taskManagerConfig,\n-\t\t\tString taskName) {\n-\t\tswitch (checkpointMode) {\n-\t\t\tcase EXACTLY_ONCE: {\n-\t\t\t\tlong maxAlign = taskManagerConfig.getLong(TaskManagerOptions.TASK_CHECKPOINT_ALIGNMENT_BYTES_LIMIT);\n-\t\t\t\tif (!(maxAlign == -1 || maxAlign > 0)) {\n-\t\t\t\t\tthrow new IllegalConfigurationException(\n-\t\t\t\t\t\tTaskManagerOptions.TASK_CHECKPOINT_ALIGNMENT_BYTES_LIMIT.key()\n-\t\t\t\t\t\t\t+ \" must be positive or -1 (infinite)\");\n-\t\t\t\t}\n-\t\t\t\treturn new CachedBufferStorage(pageSize, maxAlign, taskName);\n+\tpublic static InputGate[] generateChannelIndexToInputGateMap(int numberOfInputChannels, InputGate ...inputGates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDU4NzYyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjoxN1rOGB2Afg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNjoxN1rOGB2Afg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjYyMg==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11351#discussion_r404586622", "createdAt": "2020-04-07T07:16:17Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/InputProcessorUtil.java", "diffHunk": "@@ -130,26 +112,26 @@ private static CheckpointBarrierHandler createCheckpointBarrierHandler(\n \t\t}\n \t}\n \n-\tprivate static BufferStorage createBufferStorage(\n-\t\t\tCheckpointingMode checkpointMode,\n-\t\t\tint pageSize,\n-\t\t\tConfiguration taskManagerConfig,\n-\t\t\tString taskName) {\n-\t\tswitch (checkpointMode) {\n-\t\t\tcase EXACTLY_ONCE: {\n-\t\t\t\tlong maxAlign = taskManagerConfig.getLong(TaskManagerOptions.TASK_CHECKPOINT_ALIGNMENT_BYTES_LIMIT);\n-\t\t\t\tif (!(maxAlign == -1 || maxAlign > 0)) {\n-\t\t\t\t\tthrow new IllegalConfigurationException(\n-\t\t\t\t\t\tTaskManagerOptions.TASK_CHECKPOINT_ALIGNMENT_BYTES_LIMIT.key()\n-\t\t\t\t\t\t\t+ \" must be positive or -1 (infinite)\");\n-\t\t\t\t}\n-\t\t\t\treturn new CachedBufferStorage(pageSize, maxAlign, taskName);\n+\tpublic static InputGate[] generateChannelIndexToInputGateMap(int numberOfInputChannels, InputGate ...inputGates) {\n+\t\tInputGate[] channelIndexToInputGate = new InputGate[numberOfInputChannels];\n+\t\tint channelIndexOffset = 0;\n+\t\tfor (InputGate inputGate: inputGates) {\n+\t\t\tfor (int i = 0; i < inputGate.getNumberOfInputChannels(); ++i) {\n+\t\t\t\tchannelIndexToInputGate[channelIndexOffset + i] = inputGate;\n \t\t\t}\n-\t\t\tcase AT_LEAST_ONCE:\n-\t\t\t\treturn new EmptyBufferStorage();\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(\"Unrecognized Checkpointing Mode: \" + checkpointMode);\n+\t\t\tchannelIndexOffset += inputGate.getNumberOfInputChannels();\n+\t\t}\n+\t\treturn channelIndexToInputGate;\n+\t}\n+\n+\tpublic static Map<InputGate, Integer> generateInputGateToChannelIndexOffsetMap(InputGate ...inputGates) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2741cfd7192d0bbd4269b4cd3334ca084e2b67"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQxNzk0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNTozMDo1NlrOGDxcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNTozMDo1NlrOGDxcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwOTA4NQ==", "bodyText": "nit: whitespace for { and =", "url": "https://github.com/apache/flink/pull/11351#discussion_r406609085", "createdAt": "2020-04-10T05:30:56Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java", "diffHunk": "@@ -90,7 +111,11 @@ else if (obj != null && obj.getClass() == CheckpointOptions.class) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"CheckpointOptions: \" + checkpointType + \" @ \" + targetLocation;\n+\t\treturn \"CheckpointOptions{\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzQxODU4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNTozMToyOVrOGDxdHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNTozMToyOVrOGDxdHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwOTE4Mw==", "bodyText": "nit: increase indentation for arguments", "url": "https://github.com/apache/flink/pull/11351#discussion_r406609183", "createdAt": "2020-04-10T05:31:29Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java", "diffHunk": "@@ -42,12 +43,23 @@\n \t/** Target location for the checkpoint. */\n \tprivate final CheckpointStorageLocationReference targetLocation;\n \n+\tprivate final boolean isExactlyOnceMode;\n+\n+\t@VisibleForTesting\n+\tpublic CheckpointOptions(\n+\t\tCheckpointType checkpointType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzU5ODE4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/PartitionRequestClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxNTo0MVrOGDzEGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxNTo0MVrOGDzEGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNTU0NQ==", "bodyText": "the description is not correct.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406635545", "createdAt": "2020-04-10T07:15:41Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/PartitionRequestClient.java", "diffHunk": "@@ -50,6 +50,13 @@ void requestSubpartition(\n \t */\n \tvoid notifyCreditAvailable(RemoteInputChannel inputChannel);\n \n+\t/**\n+\t * Notifies available credits from one remote input channel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzY0MjgwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzozNjo1MVrOGDzecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzozNTowOVrOGETFDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MjI5MA==", "bodyText": "Is it necessary to ensureAccessible for setter?", "url": "https://github.com/apache/flink/pull/11351#discussion_r406642290", "createdAt": "2020-04-10T07:36:51Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "diffHunk": "@@ -639,4 +632,16 @@ public boolean isCompressed() {\n \tpublic void setCompressed(boolean isCompressed) {\n \t\tthis.isCompressed = isCompressed;\n \t}\n+\n+\t@Override\n+\tpublic DataType getDataType() {\n+\t\treturn dataType;\n+\t}\n+\n+\t@Override\n+\tpublic void setDataType(DataType dataType) {\n+\t\tensureAccessible();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MDA3Ng==", "bodyText": "I copied this from tagAsEvent, IMO, ensureAccessible is not a must here and I checked the code, ensureAccessible method mainly checks about the reference count and ensures that the buffer is not recycled, so I  think it should be ok to keep this check.", "url": "https://github.com/apache/flink/pull/11351#discussion_r407160076", "createdAt": "2020-04-12T07:35:09Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/NetworkBuffer.java", "diffHunk": "@@ -639,4 +632,16 @@ public boolean isCompressed() {\n \tpublic void setCompressed(boolean isCompressed) {\n \t\tthis.isCompressed = isCompressed;\n \t}\n+\n+\t@Override\n+\tpublic DataType getDataType() {\n+\t\treturn dataType;\n+\t}\n+\n+\t@Override\n+\tpublic void setDataType(DataType dataType) {\n+\t\tensureAccessible();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MjI5MA=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzY2MzY1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0NTo0OVrOGDzqqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0NTo0OVrOGDzqqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NTQxNw==", "bodyText": "Some general usages also reference this, so I prefer to defining EVENT_BUFFER instead for general purpose. The semantic here is also covering the above EXACTLY_ONCE_CHECKPOINT_BARRIER. If we defined as OTHER_EVENT, it seems exclude the EXACTLY_ONCE_CHECKPOINT_BARRIER.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406645417", "createdAt": "2020-04-10T07:45:49Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +224,58 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer represents.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Sets the type of data this buffer represents.\n+\t */\n+\tvoid setDataType(DataType dataType);\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.\n+\t */\n+\tenum DataType {\n+\t\t/**\n+\t\t * DATA_BUFFER indicates that this buffer represents a non-event data buffer.\n+\t\t */\n+\t\tDATA_BUFFER(true),\n+\n+\t\t/**\n+\t\t * EXACTLY_ONCE_CHECKPOINT_BARRIER indicates that this buffer represents a\n+\t\t * serialized checkpoint barrier of exactly once checkpoint mode.\n+\t\t */\n+\t\tEXACTLY_ONCE_CHECKPOINT_BARRIER(false),\n+\n+\t\t/**\n+\t\t * UNKNOWN_EVENT indicates this buffer represents serialized data of other\n+\t\t * unknown event.\n+\t\t */\n+\t\tOTHER_EVENT(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzY2NTc0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0Njo0MlrOGDzr6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo0Njo0MlrOGDzr6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0NTczOA==", "bodyText": "The descriptions should also be adjusted.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406645738", "createdAt": "2020-04-10T07:46:42Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -227,4 +224,58 @@\n \t * Tags the buffer as compressed or uncompressed.\n \t */\n \tvoid setCompressed(boolean isCompressed);\n+\n+\t/**\n+\t * Gets the type of data this buffer represents.\n+\t */\n+\tDataType getDataType();\n+\n+\t/**\n+\t * Sets the type of data this buffer represents.\n+\t */\n+\tvoid setDataType(DataType dataType);\n+\n+\t/**\n+\t * Used to identify the type of data contained in {@link Buffer}.\n+\t */\n+\tenum DataType {\n+\t\t/**\n+\t\t * DATA_BUFFER indicates that this buffer represents a non-event data buffer.\n+\t\t */\n+\t\tDATA_BUFFER(true),\n+\n+\t\t/**\n+\t\t * EXACTLY_ONCE_CHECKPOINT_BARRIER indicates that this buffer represents a\n+\t\t * serialized checkpoint barrier of exactly once checkpoint mode.\n+\t\t */\n+\t\tEXACTLY_ONCE_CHECKPOINT_BARRIER(false),\n+\n+\t\t/**\n+\t\t * UNKNOWN_EVENT indicates this buffer represents serialized data of other", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAzMjYzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyOTo0MVrOGD3EOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyOTo0MVrOGD3EOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMTExMw==", "bodyText": "I think we should not modify the condition of flushRequested, and only work on the condition of notifyDataAvailable.\nThen isBlockedByCheckpoint can be added into below notifyDataAvailable, but now touch readerView condition which is out of scope of this PR.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406701113", "createdAt": "2020-04-10T10:29:41Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -322,7 +341,7 @@ public int unsynchronizedGetNumberOfQueuedBuffers() {\n \tpublic void flush() {\n \t\tfinal boolean notifyDataAvailable;\n \t\tsynchronized (buffers) {\n-\t\t\tif (buffers.isEmpty()) {\n+\t\t\tif (buffers.isEmpty() || readView == null || isBlockedByCheckpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDAzNDkyOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDozMDo0OFrOGD3FhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyMTozMVrOGFu89Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMTQ0NQ==", "bodyText": "better to make this change as a separate hotfix commit", "url": "https://github.com/apache/flink/pull/11351#discussion_r406701445", "createdAt": "2020-04-10T10:30:48Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -396,13 +415,11 @@ public int getBuffersInBacklog() {\n \n \tprivate boolean shouldNotifyDataAvailable() {\n \t\t// Notify only when we added first finished buffer.\n-\t\treturn readView != null && !flushRequested && getNumberOfFinishedBuffers() == 1;\n+\t\treturn readView != null && !flushRequested && !isBlockedByCheckpoint && getNumberOfFinishedBuffers() == 1;\n \t}\n \n \tprivate void notifyDataAvailable() {\n-\t\tif (readView != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2Mzc0Ng==", "bodyText": "I remove the readView != null condition check in flush as suggested, so I add this condition back.", "url": "https://github.com/apache/flink/pull/11351#discussion_r407163746", "createdAt": "2020-04-12T08:11:12Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -396,13 +415,11 @@ public int getBuffersInBacklog() {\n \n \tprivate boolean shouldNotifyDataAvailable() {\n \t\t// Notify only when we added first finished buffer.\n-\t\treturn readView != null && !flushRequested && getNumberOfFinishedBuffers() == 1;\n+\t\treturn readView != null && !flushRequested && !isBlockedByCheckpoint && getNumberOfFinishedBuffers() == 1;\n \t}\n \n \tprivate void notifyDataAvailable() {\n-\t\tif (readView != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMTQ0NQ=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTMzMw==", "bodyText": "Actually this condition even this method can be removed if we can reuse the preceding three conditions inside shouldNotifyDataAvailable for #flush() operation, because only the available conditions inside #flush not check the readerView != null.", "url": "https://github.com/apache/flink/pull/11351#discussion_r408665333", "createdAt": "2020-04-15T08:21:31Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -396,13 +415,11 @@ public int getBuffersInBacklog() {\n \n \tprivate boolean shouldNotifyDataAvailable() {\n \t\t// Notify only when we added first finished buffer.\n-\t\treturn readView != null && !flushRequested && getNumberOfFinishedBuffers() == 1;\n+\t\treturn readView != null && !flushRequested && !isBlockedByCheckpoint && getNumberOfFinishedBuffers() == 1;\n \t}\n \n \tprivate void notifyDataAvailable() {\n-\t\tif (readView != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMTQ0NQ=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA2MTc5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartitionView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo0NDowMFrOGD3U-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo0NDowMFrOGD3U-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNTQwMQ==", "bodyText": "it is better to merge isAvailableWithoutCredit() with existing isAvailable() to avoid maintaining two separate interface methods. We can integrate them into isAvailable(int credit) method for distinguishing the condition inside implementations.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406705401", "createdAt": "2020-04-10T10:44:00Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartitionView.java", "diffHunk": "@@ -50,12 +50,14 @@\n \n \tboolean isReleased();\n \n+\tvoid resumeConsumption();\n+\n \tThrowable getFailureCause();\n \n \t/**\n-\t * Returns whether the next buffer is an event or not.\n+\t * Returns true if we can read data without available credits.\n \t */\n-\tboolean nextBufferIsEvent();\n+\tboolean isAvailableWithoutCredit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA3MTg4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo0OToyN1rOGD3bEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo0OToyN1rOGD3bEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwNjk2MA==", "bodyText": "@GuardedBy(\"buffers\")", "url": "https://github.com/apache/flink/pull/11351#discussion_r406706960", "createdAt": "2020-04-10T10:49:27Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -86,6 +86,9 @@\n \t/** The total number of bytes (both data and event buffers). */\n \tprivate long totalNumberOfBytes;\n \n+\t/** Whether this subpartition is blocked by exactly once checkpoint and is waiting for resumption. */\n+\tprivate boolean isBlockedByCheckpoint = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDA4NDAzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDo1NjozMFrOGD3icA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowMzowMlrOGFuT_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg0OA==", "bodyText": "why the blocked partition would be pulled buffer since it was unavailable.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406708848", "createdAt": "2020-04-10T10:56:30Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -179,6 +182,10 @@ public void release() {\n \t@Nullable\n \tBufferAndBacklog pollBuffer() {\n \t\tsynchronized (buffers) {\n+\t\t\tif (isBlockedByCheckpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2Njk3Nw==", "bodyText": "Because there are redundant notifications for local channel which means we may notify data available even when the downstream task in the poll loop. Maybe we fix it in another ticket if we think it's a problem.", "url": "https://github.com/apache/flink/pull/11351#discussion_r407166977", "createdAt": "2020-04-12T08:42:11Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -179,6 +182,10 @@ public void release() {\n \t@Nullable\n \tBufferAndBacklog pollBuffer() {\n \t\tsynchronized (buffers) {\n+\t\t\tif (isBlockedByCheckpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg0OA=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0OTQyMA==", "bodyText": "I see, it is for the case of local channel. I think we should supplement a test to cover this change if possible.", "url": "https://github.com/apache/flink/pull/11351#discussion_r408649420", "createdAt": "2020-04-15T07:53:45Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -179,6 +182,10 @@ public void release() {\n \t@Nullable\n \tBufferAndBacklog pollBuffer() {\n \t\tsynchronized (buffers) {\n+\t\t\tif (isBlockedByCheckpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg0OA=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NDg0Nw==", "bodyText": "Also it is better to give some descriptions here to explain this situation for better understanding.", "url": "https://github.com/apache/flink/pull/11351#discussion_r408654847", "createdAt": "2020-04-15T08:03:02Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -179,6 +182,10 @@ public void release() {\n \t@Nullable\n \tBufferAndBacklog pollBuffer() {\n \t\tsynchronized (buffers) {\n+\t\t\tif (isBlockedByCheckpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwODg0OA=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDEwOTQ1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxMToxMVrOGD3xTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxMToxMVrOGD3xTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMjY1Mg==", "bodyText": "it is ambiguous to distinguish the semantics between isAvailableWithoutCredit and isMoreAvailable if not back to see the implementation. I prefer to using dataAvailable and eventAvailable instead.\nAnd from the outside view, we only provide the isAvailable(int credit) method for hiding the details.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406712652", "createdAt": "2020-04-10T11:11:11Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultSubpartition.java", "diffHunk": "@@ -136,13 +136,13 @@ public void initializeState(ChannelStateReader stateReader) throws IOException,\n \t\tprivate final Buffer buffer;\n \t\tprivate final boolean isMoreAvailable;\n \t\tprivate final int buffersInBacklog;\n-\t\tprivate final boolean nextBufferIsEvent;\n+\t\tprivate final boolean isAvailableWithoutCredit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDExNjE5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNDo1OVrOGD31Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNDowNjowN1rOGFpBwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzY4Mg==", "bodyText": "this change worths a separate hotfix commit", "url": "https://github.com/apache/flink/pull/11351#discussion_r406713682", "createdAt": "2020-04-10T11:14:59Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -883,16 +883,7 @@ private void configureCheckpointing() {\n \n \t\tCheckpointingMode mode = cfg.getCheckpointingMode();\n \n-\t\tboolean isExactlyOnce;\n-\t\tif (mode == CheckpointingMode.EXACTLY_ONCE) {\n-\t\t\tisExactlyOnce = true;\n-\t\t} else if (mode == CheckpointingMode.AT_LEAST_ONCE) {\n-\t\t\tisExactlyOnce = false;\n-\t\t} else {\n-\t\t\tthrow new IllegalStateException(\"Unexpected checkpointing mode. \" +\n-\t\t\t\t\"Did not expect there to be another checkpointing mode besides \" +\n-\t\t\t\t\"exactly-once or at-least-once.\");\n-\t\t}\n+\t\tboolean isExactlyOnce = cfg.isCheckpointingEnabled() && mode == CheckpointingMode.EXACTLY_ONCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NzUzNg==", "bodyText": "I do something further in this round of fixup.", "url": "https://github.com/apache/flink/pull/11351#discussion_r407167536", "createdAt": "2020-04-12T08:47:30Z", "author": {"login": "wsry"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -883,16 +883,7 @@ private void configureCheckpointing() {\n \n \t\tCheckpointingMode mode = cfg.getCheckpointingMode();\n \n-\t\tboolean isExactlyOnce;\n-\t\tif (mode == CheckpointingMode.EXACTLY_ONCE) {\n-\t\t\tisExactlyOnce = true;\n-\t\t} else if (mode == CheckpointingMode.AT_LEAST_ONCE) {\n-\t\t\tisExactlyOnce = false;\n-\t\t} else {\n-\t\t\tthrow new IllegalStateException(\"Unexpected checkpointing mode. \" +\n-\t\t\t\t\"Did not expect there to be another checkpointing mode besides \" +\n-\t\t\t\t\"exactly-once or at-least-once.\");\n-\t\t}\n+\t\tboolean isExactlyOnce = cfg.isCheckpointingEnabled() && mode == CheckpointingMode.EXACTLY_ONCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzY4Mg=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2ODI1Nw==", "bodyText": "I move this to another PR.", "url": "https://github.com/apache/flink/pull/11351#discussion_r408568257", "createdAt": "2020-04-15T04:06:07Z", "author": {"login": "wsry"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -883,16 +883,7 @@ private void configureCheckpointing() {\n \n \t\tCheckpointingMode mode = cfg.getCheckpointingMode();\n \n-\t\tboolean isExactlyOnce;\n-\t\tif (mode == CheckpointingMode.EXACTLY_ONCE) {\n-\t\t\tisExactlyOnce = true;\n-\t\t} else if (mode == CheckpointingMode.AT_LEAST_ONCE) {\n-\t\t\tisExactlyOnce = false;\n-\t\t} else {\n-\t\t\tthrow new IllegalStateException(\"Unexpected checkpointing mode. \" +\n-\t\t\t\t\"Did not expect there to be another checkpointing mode besides \" +\n-\t\t\t\t\"exactly-once or at-least-once.\");\n-\t\t}\n+\t\tboolean isExactlyOnce = cfg.isCheckpointingEnabled() && mode == CheckpointingMode.EXACTLY_ONCE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzY4Mg=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDE1NTQzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTozMzo1N1rOGD4LWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTozNDo0M1rOGD4MKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxOTMyMQ==", "bodyText": "nit: Integer -> int", "url": "https://github.com/apache/flink/pull/11351#discussion_r406719321", "createdAt": "2020-04-10T11:33:57Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -318,6 +325,13 @@ public long getAlignmentDurationNanos() {\n \t\t}\n \t}\n \n+\tprivate void unblockCheckpoint(Integer channelToUnblock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxOTUyOA==", "bodyText": "I suggest renaming unblockCheckpoint to resumeConsumption to unify all the stacks.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406719528", "createdAt": "2020-04-10T11:34:43Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -318,6 +325,13 @@ public long getAlignmentDurationNanos() {\n \t\t}\n \t}\n \n+\tprivate void unblockCheckpoint(Integer channelToUnblock) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxOTMyMQ=="}, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDc5NTYxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NTozM1rOGD-Gxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0NTozM1rOGD-Gxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxNjQ1NQ==", "bodyText": "channelIndexToInputChannel should be protected in sync by requestLock, because in code path this array would be modified by RPC thread via updateInputChannel. Although that method is never invoked in streaming job, it still has the potential risk to break this assumption.", "url": "https://github.com/apache/flink/pull/11351#discussion_r406816455", "createdAt": "2020-04-10T15:45:33Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -616,6 +622,11 @@ public void sendTaskEvent(TaskEvent event) throws IOException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void unblockCheckpoint(int channelIndex) {\n+\t\tchannelIndexToInputChannel[channelIndex].unblockCheckpoint();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDgwNzEyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0OTo0MVrOGD-NzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNTo0OTo0MVrOGD-NzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgxODI1Mg==", "bodyText": "nit: this argument seems redundant because it can be got from channelIndexToInputGate.length", "url": "https://github.com/apache/flink/pull/11351#discussion_r406818252", "createdAt": "2020-04-10T15:49:41Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -69,10 +79,14 @@\n \tCheckpointBarrierAligner(\n \t\t\tint totalNumberOfInputChannels,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20f4e859705d31fd8a0821241bc9813cb39d0c32"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzEzNjUxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowNTozMVrOGFuZQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowNTozMVrOGFuZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1NjE5Mg==", "bodyText": "Unify this assert also for above isDataAvailableUnsafe?", "url": "https://github.com/apache/flink/pull/11351#discussion_r408656192", "createdAt": "2020-04-15T08:05:31Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -275,14 +283,24 @@ public PipelinedSubpartitionView createReadView(BufferAvailabilityListener avail\n \t\treturn readView;\n \t}\n \n-\tpublic boolean isAvailable() {\n+\tpublic boolean isAvailable(int numCreditsAvailable) {\n \t\tsynchronized (buffers) {\n-\t\t\treturn isAvailableUnsafe();\n+\t\t\tif (numCreditsAvailable > 0) {\n+\t\t\t\treturn isDataAvailableUnsafe();\n+\t\t\t}\n+\n+\t\t\treturn isEventAvailableUnsafe();\n \t\t}\n \t}\n \n-\tprivate boolean isAvailableUnsafe() {\n-\t\treturn flushRequested || getNumberOfFinishedBuffers() > 0;\n+\tprivate boolean isDataAvailableUnsafe() {\n+\t\treturn !isBlockedByCheckpoint && (flushRequested || getNumberOfFinishedBuffers() > 0);\n+\t}\n+\n+\tprivate boolean isEventAvailableUnsafe() {\n+\t\tassert Thread.holdsLock(buffers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzYxMDY2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxMTozOFrOGFy_EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxMTozOFrOGFy_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczMTQwOA==", "bodyText": "nit: better to assert channelIndexToInputChannel[channelIndex] != null in advance and give some rich informations if exception.", "url": "https://github.com/apache/flink/pull/11351#discussion_r408731408", "createdAt": "2020-04-15T10:11:38Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/SingleInputGate.java", "diffHunk": "@@ -616,6 +625,11 @@ public void sendTaskEvent(TaskEvent event) throws IOException {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void resumeConsumption(int channelIndex) {\n+\t\tchannelIndexToInputChannel[channelIndex].resumeConsumption();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzYzMTIzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/UnionInputGate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxNzozMFrOGFzLzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoxNzozMFrOGFzLzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODczNDY3MA==", "bodyText": "@VisibleForTesting", "url": "https://github.com/apache/flink/pull/11351#discussion_r408734670", "createdAt": "2020-04-15T10:17:30Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/UnionInputGate.java", "diffHunk": "@@ -297,4 +312,8 @@ private void queueInputGate(InputGate inputGate) {\n \t\t\treturn Optional.of(inputGate);\n \t\t}\n \t}\n+\n+\tList<InputGate> getChannelIndexToInputGate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY3MzM2OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDoyOTo1NlrOGFzlmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1NDo0NFrOGGdqEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MTI3Mg==", "bodyText": "I guess this channel index change is irrelevant?", "url": "https://github.com/apache/flink/pull/11351#discussion_r408741272", "createdAt": "2020-04-15T10:29:56Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "diffHunk": "@@ -130,18 +130,18 @@ private void testRegisterTaskWithLimitedBuffers(int bufferPoolSize) throws Excep\n \t\tfinal SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4};\n \n \t\tcreateRemoteInputChannel(ig4, 0, rp1, connManager, network.getNetworkBufferPool());\n-\t\tcreateRemoteInputChannel(ig4, 0, rp2, connManager, network.getNetworkBufferPool());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzMDU0Ng==", "bodyText": "yes, it is irrelevant.", "url": "https://github.com/apache/flink/pull/11351#discussion_r409430546", "createdAt": "2020-04-16T09:54:44Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "diffHunk": "@@ -130,18 +130,18 @@ private void testRegisterTaskWithLimitedBuffers(int bufferPoolSize) throws Excep\n \t\tfinal SingleInputGate[] inputGates = new SingleInputGate[] {ig1, ig2, ig3, ig4};\n \n \t\tcreateRemoteInputChannel(ig4, 0, rp1, connManager, network.getNetworkBufferPool());\n-\t\tcreateRemoteInputChannel(ig4, 0, rp2, connManager, network.getNetworkBufferPool());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MTI3Mg=="}, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY4NjE1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/buffer/NetworkBufferTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozMzo0NVrOGFztvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozMzo0NVrOGFztvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MzM1Nw==", "bodyText": "nit: actually we can still retain testRecycleBuffer(boolean isBuffer) method and get the respective dataType before newBuffer here. Then we can avoid many above changes.", "url": "https://github.com/apache/flink/pull/11351#discussion_r408743357", "createdAt": "2020-04-15T10:33:45Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/buffer/NetworkBufferTest.java", "diffHunk": "@@ -98,79 +98,79 @@ private static NetworkBuffer newBuffer(int length, int maxCapacity, boolean isBu\n \n \t@Test\n \tpublic void testDataBufferIsBuffer() {\n-\t\tassertFalse(newBuffer(1024, 1024, false).isBuffer());\n+\t\tassertFalse(newBuffer(1024, 1024, Buffer.DataType.EVENT_BUFFER).isBuffer());\n \t}\n \n \t@Test\n \tpublic void testEventBufferIsBuffer() {\n-\t\tassertFalse(newBuffer(1024, 1024, false).isBuffer());\n+\t\tassertFalse(newBuffer(1024, 1024, Buffer.DataType.EVENT_BUFFER).isBuffer());\n \t}\n \n \t@Test\n \tpublic void testDataBufferTagAsEvent() {\n-\t\ttestTagAsEvent(true);\n+\t\ttestTagAsEvent(Buffer.DataType.DATA_BUFFER);\n \t}\n \n \t@Test\n \tpublic void testEventBufferTagAsEvent() {\n-\t\ttestTagAsEvent(false);\n+\t\ttestTagAsEvent(Buffer.DataType.EVENT_BUFFER);\n \t}\n \n-\tprivate static void testTagAsEvent(boolean isBuffer) {\n-\t\tNetworkBuffer buffer = newBuffer(1024, 1024, isBuffer);\n-\t\tbuffer.tagAsEvent();\n+\tprivate static void testTagAsEvent(Buffer.DataType dataType) {\n+\t\tNetworkBuffer buffer = newBuffer(1024, 1024, dataType);\n+\t\tbuffer.setDataType(Buffer.DataType.EVENT_BUFFER);\n \t\tassertFalse(buffer.isBuffer());\n \t}\n \n \t@Test\n \tpublic void testDataBufferGetMemorySegment() {\n-\t\ttestGetMemorySegment(true);\n+\t\ttestGetMemorySegment(Buffer.DataType.DATA_BUFFER);\n \t}\n \n \t@Test\n \tpublic void testEventBufferGetMemorySegment() {\n-\t\ttestGetMemorySegment(false);\n+\t\ttestGetMemorySegment(Buffer.DataType.EVENT_BUFFER);\n \t}\n \n-\tprivate static void testGetMemorySegment(boolean isBuffer) {\n+\tprivate static void testGetMemorySegment(Buffer.DataType dataType) {\n \t\tfinal MemorySegment segment = MemorySegmentFactory.allocateUnpooledSegment(1024);\n-\t\tNetworkBuffer buffer = new NetworkBuffer(segment, FreeingBufferRecycler.INSTANCE, isBuffer);\n+\t\tNetworkBuffer buffer = new NetworkBuffer(segment, FreeingBufferRecycler.INSTANCE, dataType);\n \t\tassertSame(segment, buffer.getMemorySegment());\n \t}\n \n \t@Test\n \tpublic void testDataBufferGetRecycler() {\n-\t\ttestGetRecycler(true);\n+\t\ttestGetRecycler(Buffer.DataType.DATA_BUFFER);\n \t}\n \n \t@Test\n \tpublic void testEventBufferGetRecycler() {\n-\t\ttestGetRecycler(false);\n+\t\ttestGetRecycler(Buffer.DataType.EVENT_BUFFER);\n \t}\n \n-\tprivate static void testGetRecycler(boolean isBuffer) {\n+\tprivate static void testGetRecycler(Buffer.DataType dataType) {\n \t\tBufferRecycler recycler = MemorySegment::free;\n \n-\t\tNetworkBuffer dataBuffer = newBuffer(1024, 1024, isBuffer, recycler);\n+\t\tNetworkBuffer dataBuffer = newBuffer(1024, 1024, dataType, recycler);\n \t\tassertSame(recycler, dataBuffer.getRecycler());\n \t}\n \n \t@Test\n \tpublic void testDataBufferRecycleBuffer() {\n-\t\ttestRecycleBuffer(true);\n+\t\ttestRecycleBuffer(Buffer.DataType.DATA_BUFFER);\n \t}\n \n \t@Test\n \tpublic void testEventBufferRecycleBuffer() {\n-\t\ttestRecycleBuffer(false);\n+\t\ttestRecycleBuffer(Buffer.DataType.EVENT_BUFFER);\n \t}\n \n \t/**\n \t * Tests that {@link NetworkBuffer#recycleBuffer()} and {@link NetworkBuffer#isRecycled()} are\n \t * coupled and are also consistent with {@link NetworkBuffer#refCnt()}.\n \t */\n-\tprivate static void testRecycleBuffer(boolean isBuffer) {\n-\t\tNetworkBuffer buffer = newBuffer(1024, 1024, isBuffer);\n+\tprivate static void testRecycleBuffer(Buffer.DataType dataType) {\n+\t\tNetworkBuffer buffer = newBuffer(1024, 1024, dataType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY4Nzg5OnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/buffer/NetworkBufferTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNDoxNlrOGFzu0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNDoxNlrOGFzu0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MzYzNQ==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11351#discussion_r408743635", "createdAt": "2020-04-15T10:34:16Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/buffer/NetworkBufferTest.java", "diffHunk": "@@ -341,16 +341,16 @@ private static void testReadableBytes(boolean isBuffer) {\n \n \t@Test\n \tpublic void testDataBufferGetNioBufferReadable() {\n-\t\ttestGetNioBufferReadable(true);\n+\t\ttestGetNioBufferReadable(Buffer.DataType.DATA_BUFFER);\n \t}\n \n \t@Test\n \tpublic void testEventBufferGetNioBufferReadable() {\n-\t\ttestGetNioBufferReadable(false);\n+\t\ttestGetNioBufferReadable(Buffer.DataType.EVENT_BUFFER);\n \t}\n \n-\tprivate void testGetNioBufferReadable(boolean isBuffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzY5MDkzOnYy", "diffSide": "LEFT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/NettyMessageClientDecoderDelegateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNToxOVrOGFzwzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDozNToxOVrOGFzwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NDE0Mw==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11351#discussion_r408744143", "createdAt": "2020-04-15T10:35:19Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/NettyMessageClientDecoderDelegateTest.java", "diffHunk": "@@ -219,20 +219,17 @@ private void testNettyMessageClientDecoding(\n \tprivate void addBufferResponse(\n \t\tList<NettyMessage> messages,\n \t\tInputChannelID inputChannelId,\n-\t\tboolean isBuffer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODcwMDA5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MzoyMFrOGF9n6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MzoyMFrOGF9n6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNTcwNA==", "bodyText": "\"and after that the buffered elements\" is not invalid", "url": "https://github.com/apache/flink/pull/11351#discussion_r408905704", "createdAt": "2020-04-15T14:53:20Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/MultipleInputStreamTaskTest.java", "diffHunk": "@@ -146,7 +144,6 @@ public void testCheckpointBarriers() throws Exception {\n \n \t\t\t// now we should see the barrier and after that the buffered elements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODg0NDUwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMzo0MFrOGF_DPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyMzo0MFrOGF_DPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyOTA4NQ==", "bodyText": "It should be put before testHarness.waitForInputProcessing()", "url": "https://github.com/apache/flink/pull/11351#discussion_r408929085", "createdAt": "2020-04-15T15:23:40Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/OneInputStreamTaskTest.java", "diffHunk": "@@ -464,16 +452,16 @@ public void testOvertakingCheckpointBarriers() throws Exception {\n \t\t// we should not yet see the barrier, only the two elements from non-blocked input\n \t\tTestHarnessUtil.assertOutputEquals(\"Output was not correct.\", expectedOutput, testHarness.getOutput());\n \n-\t\t// Now give a later barrier to all inputs, this should unblock the first channel,\n-\t\t// thereby allowing the two blocked elements through\n-\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n+\t\t// Now give a later barrier to all inputs, this should unblock the first channel\n \t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n \t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n \t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n \n+\t\t// wait until the channel is unblocked\n+\t\ttestHarness.waitForInputProcessing();\n+\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODg0ODE2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyNDoyN1rOGF_FlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNToyNDoyN1rOGF_FlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyOTY4NQ==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11351#discussion_r408929685", "createdAt": "2020-04-15T15:24:27Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/TwoInputStreamTaskTest.java", "diffHunk": "@@ -369,16 +359,16 @@ public void testOvertakingCheckpointBarriers() throws Exception {\n \t\t\t\texpectedOutput,\n \t\t\t\ttestHarness.getOutput());\n \n-\t\t// Now give a later barrier to all inputs, this should unblock the first channel,\n-\t\t// thereby allowing the two blocked elements through\n-\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);\n+\t\t// Now give a later barrier to all inputs, this should unblock the first channel\n \t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 1);\n \t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 0);\n \t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 1, 1);\n \n+\t\t// wait until the channel is unblocked\n+\t\ttestHarness.waitForInputProcessing();\n+\t\ttestHarness.processEvent(new CheckpointBarrier(1, 1, CheckpointOptions.forCheckpointWithDefaultLocation()), 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA0MTA5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzozMlrOGGA_4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjowNzozMlrOGGA_4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MDk5NA==", "bodyText": "This tests the?", "url": "https://github.com/apache/flink/pull/11351#discussion_r408960994", "createdAt": "2020-04-15T16:07:32Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTestBase.java", "diffHunk": "@@ -900,247 +580,185 @@ public void testMultiChannelAbortCheckpoint() throws Exception {\n \t\t\t\t// some buffers and a successful checkpoint\n \t\t\t/* 0 */ createBuffer(0), createBuffer(2), createBuffer(0),\n \t\t\t/* 3 */ createBarrier(1, 1), createBarrier(1, 2),\n-\t\t\t/* 5 */ createBuffer(2), createBuffer(1),\n-\t\t\t/* 7 */ createBarrier(1, 0),\n-\t\t\t/* 8 */ createBuffer(0), createBuffer(2),\n+\t\t\t/* 5 */ createBuffer(0),\n+\t\t\t/* 6 */ createBarrier(1, 0),\n+\t\t\t/* 7 */ createBuffer(0), createBuffer(2),\n \n \t\t\t\t// aborted on last barrier\n-\t\t\t/* 10 */ createBarrier(2, 0), createBarrier(2, 2),\n-\t\t\t/* 12 */ createBuffer(0), createBuffer(2),\n-\t\t\t/* 14 */ createCancellationBarrier(2, 1),\n+\t\t\t/* 9 */  createBarrier(2, 0), createBarrier(2, 2),\n+\t\t\t/* 11 */ createBuffer(1),\n+\t\t\t/* 12 */ createCancellationBarrier(2, 1),\n \n \t\t\t\t// successful checkpoint\n-\t\t\t/* 15 */ createBuffer(2), createBuffer(1),\n-\t\t\t/* 17 */ createBarrier(3, 1), createBarrier(3, 2), createBarrier(3, 0),\n+\t\t\t/* 13 */ createBuffer(2), createBuffer(1),\n+\t\t\t/* 15 */ createBarrier(3, 1), createBarrier(3, 2), createBarrier(3, 0),\n \n \t\t\t\t// abort on first barrier\n-\t\t\t/* 20 */ createBuffer(0), createBuffer(1),\n-\t\t\t/* 22 */ createCancellationBarrier(4, 1), createBarrier(4, 2),\n-\t\t\t/* 24 */ createBuffer(0),\n-\t\t\t/* 25 */ createBarrier(4, 0),\n+\t\t\t/* 18 */ createBuffer(0), createBuffer(1),\n+\t\t\t/* 20 */ createCancellationBarrier(4, 1), createBarrier(4, 2),\n+\t\t\t/* 22 */ createBuffer(2),\n+\t\t\t/* 23 */ createBarrier(4, 0),\n \n \t\t\t\t// another successful checkpoint\n-\t\t\t/* 26 */ createBuffer(0), createBuffer(1), createBuffer(2),\n-\t\t\t/* 29 */ createBarrier(5, 2), createBarrier(5, 1), createBarrier(5, 0),\n-\t\t\t/* 32 */ createBuffer(0), createBuffer(1),\n+\t\t\t/* 24 */ createBuffer(0), createBuffer(1), createBuffer(2),\n+\t\t\t/* 27 */ createBarrier(5, 2), createBarrier(5, 1), createBarrier(5, 0),\n+\t\t\t/* 30 */ createBuffer(0), createBuffer(1),\n \n \t\t\t\t// abort multiple cancellations and a barrier after the cancellations\n-\t\t\t/* 34 */ createCancellationBarrier(6, 1), createCancellationBarrier(6, 2),\n-\t\t\t/* 36 */ createBarrier(6, 0),\n+\t\t\t/* 32 */ createCancellationBarrier(6, 1), createCancellationBarrier(6, 2),\n+\t\t\t/* 34 */ createBarrier(6, 0),\n \n-\t\t\t/* 37 */ createBuffer(0)\n+\t\t\t/* 35 */ createBuffer(0)\n \t\t};\n-\t\tAbstractInvokable toNotify = mock(AbstractInvokable.class);\n+\t\tValidatingCheckpointHandler toNotify = new ValidatingCheckpointHandler();\n \t\tinputGate = createBarrierBuffer(3, sequence, toNotify);\n \n \t\tlong startTs;\n \n \t\t// successful first checkpoint, with some aligned buffers\n+\t\ttoNotify.setNextExpectedCheckpointId(1);\n \t\tcheck(sequence[0], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tcheck(sequence[1], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tcheck(sequence[2], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tstartTs = System.nanoTime();\n \t\tcheck(sequence[5], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)), any(CheckpointOptions.class), any(CheckpointMetrics.class));\n+\t\tcheck(sequence[7], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tvalidateAlignmentTime(startTs, inputGate);\n+\t\tInteger[] expectedUnblockedChannels1 = new Integer[] {0, 1, 2};\n+\t\tassertArrayEquals(expectedUnblockedChannels1, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n \n-\t\tcheck(sequence[6], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tcheck(sequence[8], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[9], inputGate.pollNext().get(), PAGE_SIZE);\n+\t\tcheck(sequence[11], inputGate.pollNext().get(), PAGE_SIZE);\n \n \t\t// canceled checkpoint on last barrier\n-\t\tstartTs = System.nanoTime();\n-\t\tcheck(sequence[12], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).abortCheckpointOnBarrier(eq(2L),\n-\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n-\t\tvalidateAlignmentTime(startTs, inputGate);\n \t\tcheck(sequence[13], inputGate.pollNext().get(), PAGE_SIZE);\n+\t\tassertEquals(2, toNotify.getLastCanceledCheckpointId());\n+\t\tInteger[] expectedUnblockedChannels2 = new Integer[] {0, 2};\n+\t\tassertArrayEquals(expectedUnblockedChannels2, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n+\t\tassertEquals(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER, toNotify.getCheckpointFailureReason());\n+\t\tcheck(sequence[14], inputGate.pollNext().get(), PAGE_SIZE);\n \n \t\t// one more successful checkpoint\n-\t\tcheck(sequence[15], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[16], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tstartTs = System.nanoTime();\n-\t\tcheck(sequence[20], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(3L)), any(CheckpointOptions.class), any(CheckpointMetrics.class));\n+\t\ttoNotify.setNextExpectedCheckpointId(3);\n+\t\tcheck(sequence[18], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tvalidateAlignmentTime(startTs, inputGate);\n-\t\tcheck(sequence[21], inputGate.pollNext().get(), PAGE_SIZE);\n+\t\tInteger[] expectedUnblockedChannels3 = new Integer[] {0, 1, 2};\n+\t\tassertArrayEquals(expectedUnblockedChannels3, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n+\t\tcheck(sequence[19], inputGate.pollNext().get(), PAGE_SIZE);\n \n \t\t// this checkpoint gets immediately canceled\n-\t\tcheck(sequence[24], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).abortCheckpointOnBarrier(eq(4L),\n-\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n+\t\tcheck(sequence[22], inputGate.pollNext().get(), PAGE_SIZE);\n+\t\tassertEquals(4, toNotify.getLastCanceledCheckpointId());\n+\t\tassertEquals(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER, toNotify.getCheckpointFailureReason());\n \t\tassertEquals(0L, inputGate.getAlignmentDurationNanos());\n+\t\tInteger[] expectedUnblockedChannels4 = new Integer[] {2};\n+\t\tassertArrayEquals(expectedUnblockedChannels4, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n \n \t\t// some buffers\n+\t\tcheck(sequence[24], inputGate.pollNext().get(), PAGE_SIZE);\n+\t\tInteger[] expectedUnblockedChannels5 = new Integer[] {0};\n+\t\tassertArrayEquals(expectedUnblockedChannels5, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n+\t\tcheck(sequence[25], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tcheck(sequence[26], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[27], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[28], inputGate.pollNext().get(), PAGE_SIZE);\n \n \t\t// a simple successful checkpoint\n \t\tstartTs = System.nanoTime();\n-\t\tcheck(sequence[32], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(5L)), any(CheckpointOptions.class), any(CheckpointMetrics.class));\n-\t\tvalidateAlignmentTime(startTs, inputGate);\n-\t\tcheck(sequence[33], inputGate.pollNext().get(), PAGE_SIZE);\n-\n-\t\tcheck(sequence[37], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).abortCheckpointOnBarrier(eq(6L),\n-\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n-\t\tassertEquals(0L, inputGate.getAlignmentDurationNanos());\n-\t}\n-\n-\t@Test\n-\tpublic void testAbortViaQueuedBarriers() throws Exception {\n-\t\tBufferOrEvent[] sequence = {\n-\t\t\t\t// starting a checkpoint\n-\t\t\t/* 0 */ createBuffer(1),\n-\t\t\t/* 1 */ createBarrier(1, 1), createBarrier(1, 2),\n-\t\t\t/* 3 */ createBuffer(2), createBuffer(0), createBuffer(1),\n-\n-\t\t\t\t// queued barrier and cancellation barrier\n-\t\t\t/* 6 */ createCancellationBarrier(2, 2),\n-\t\t\t/* 7 */ createBarrier(2, 1),\n-\n-\t\t\t\t// some intermediate buffers (some queued)\n-\t\t\t/* 8 */ createBuffer(0), createBuffer(1), createBuffer(2),\n-\n-\t\t\t\t// complete initial checkpoint\n-\t\t\t/* 11 */ createBarrier(1, 0),\n-\n-\t\t\t\t// some buffers (none queued, since checkpoint is aborted)\n-\t\t\t/* 12 */ createBuffer(2), createBuffer(1), createBuffer(0),\n-\n-\t\t\t\t// final barrier of aborted checkpoint\n-\t\t\t/* 15 */ createBarrier(2, 0),\n-\n-\t\t\t\t// some more buffers\n-\t\t\t/* 16 */ createBuffer(0), createBuffer(1), createBuffer(2)\n-\t\t};\n-\t\tAbstractInvokable toNotify = mock(AbstractInvokable.class);\n-\t\tinputGate = createBarrierBuffer(3, sequence, toNotify);\n-\n-\t\tlong startTs;\n-\n-\t\tcheck(sequence[0], inputGate.pollNext().get(), PAGE_SIZE);\n-\n-\t\t// starting first checkpoint\n-\t\tstartTs = System.nanoTime();\n-\t\tcheck(sequence[4], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[8], inputGate.pollNext().get(), PAGE_SIZE);\n-\n-\t\t// finished first checkpoint\n-\t\tcheck(sequence[3], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).triggerCheckpointOnBarrier(argThat(new CheckpointMatcher(1L)), any(CheckpointOptions.class), any(CheckpointMetrics.class));\n+\t\ttoNotify.setNextExpectedCheckpointId(5);\n+\t\tcheck(sequence[30], inputGate.pollNext().get(), PAGE_SIZE);\n \t\tvalidateAlignmentTime(startTs, inputGate);\n+\t\tInteger[] expectedUnblockedChannels6 = new Integer[] {0, 1, 2};\n+\t\tassertArrayEquals(expectedUnblockedChannels6, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n+\t\tcheck(sequence[31], inputGate.pollNext().get(), PAGE_SIZE);\n \n-\t\tcheck(sequence[5], inputGate.pollNext().get(), PAGE_SIZE);\n-\n-\t\t// re-read the queued cancellation barriers\n-\t\tcheck(sequence[9], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tverify(toNotify, times(1)).abortCheckpointOnBarrier(eq(2L),\n-\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n-\t\tassertEquals(0L, inputGate.getAlignmentDurationNanos());\n-\n-\t\tcheck(sequence[10], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[12], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[13], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[14], inputGate.pollNext().get(), PAGE_SIZE);\n-\n-\t\tcheck(sequence[16], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[17], inputGate.pollNext().get(), PAGE_SIZE);\n-\t\tcheck(sequence[18], inputGate.pollNext().get(), PAGE_SIZE);\n-\n-\t\t// no further alignment should have happened\n+\t\tcheck(sequence[35], inputGate.pollNext().get(), PAGE_SIZE);\n+\t\tassertEquals(6, toNotify.getLastCanceledCheckpointId());\n+\t\tassertEquals(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER, toNotify.getCheckpointFailureReason());\n \t\tassertEquals(0L, inputGate.getAlignmentDurationNanos());\n+\t\tInteger[] expectedUnblockedChannels7 = new Integer[] {0};\n+\t\tassertArrayEquals(expectedUnblockedChannels7, mockInputGate.getAndResetLastUnblockedChannels().toArray());\n \n-\t\t// no further checkpoint (abort) notifications\n-\t\tverify(toNotify, times(1)).triggerCheckpointOnBarrier(any(CheckpointMetaData.class), any(CheckpointOptions.class), any(CheckpointMetrics.class));\n-\t\tverify(toNotify, times(1)).abortCheckpointOnBarrier(anyLong(),\n-\t\t\targThat(new CheckpointExceptionMatcher(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER)));\n+\t\tassertEquals(3, toNotify.getTriggerCheckpointCounter());\n+\t\tassertEquals(3, toNotify.getAbortCheckpointCounter());\n \t}\n \n \t/**\n-\t * This tests the where a replay of queued checkpoint barriers meets\n-\t * a canceled checkpoint.\n+\t * This tests the where a checkpoint barriers meets a canceled checkpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 1085}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTA1NzAzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTestBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTowNVrOGGBJfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxMTowNVrOGGBJfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2MzQ1NQ==", "bodyText": "nit: triggeredCheckpointCounter, abortedCheckpointCounter", "url": "https://github.com/apache/flink/pull/11351#discussion_r408963455", "createdAt": "2020-04-15T16:11:05Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTestBase.java", "diffHunk": "@@ -1284,8 +902,11 @@ private static void validateAlignmentTime(long alignmentStartTimestamp, Checkpoi\n \t */\n \tprivate static class ValidatingCheckpointHandler extends AbstractInvokable {\n \n+\t\tprivate CheckpointFailureReason failureReason;\n+\t\tprivate long lastCanceledCheckpointId = -1L;\n \t\tprivate long nextExpectedCheckpointId = -1L;\n-\t\tprivate long lastReportedBytesBufferedInAlignment = -1;\n+\t\tprivate long triggerCheckpointCounter = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 1297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTEzODMxOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTozMVrOGGB9Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjozMTozMVrOGGB9Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Njc0Mw==", "bodyText": "nit: formatting  only make the argument getConfiguration().isExactlyOnceCheckpointMode() as as separate line", "url": "https://github.com/apache/flink/pull/11351#discussion_r408976743", "createdAt": "2020-04-15T16:31:31Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SourceStreamTask.java", "diffHunk": "@@ -89,7 +89,8 @@ public void triggerCheckpoint(long checkpointId) throws FlinkException {\n \t\t\t\t\t// TODO - we need to see how to derive those. We should probably not encode this in the\n \t\t\t\t\t// TODO -   source's trigger message, but do a handshake in this task between the trigger\n \t\t\t\t\t// TODO -   message from the master, and the source's trigger notification\n-\t\t\t\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.forCheckpointWithDefaultLocation();\n+\t\t\t\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk0NDEzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzoyOTo0MFrOGGTPhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzoyOTo0MFrOGGTPhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI1OTkwOQ==", "bodyText": "it is no need to call finish for this test, otherwise we also need to assert EndofPartitionEvent below.", "url": "https://github.com/apache/flink/pull/11351#discussion_r409259909", "createdAt": "2020-04-16T03:29:40Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "diffHunk": "@@ -353,14 +354,32 @@ private void testBacklogConsistentWithNumberOfConsumableBuffers(boolean isFlushR\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testBlockedByCheckpointAndResumeConsumption() throws IOException, InterruptedException {\n+\t\tsubpartition.add(createFilledFinishedBufferConsumer(BUFFER_SIZE));\n+\t\tsubpartition.add(createEventBufferConsumer(BUFFER_SIZE, Buffer.DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER));\n+\t\tsubpartition.add(createEventBufferConsumer(BUFFER_SIZE, Buffer.DataType.EVENT_BUFFER));\n+\t\tsubpartition.add(createFilledFinishedBufferConsumer(BUFFER_SIZE));\n+\t\tsubpartition.finish();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk0NjYxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozMToxM1rOGGTQ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDo0Nzo1MlrOGGfkMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MDI4NA==", "bodyText": "why we can not verify the real event class here and pass null for all the events, otherwise it is no need to introduce this expectedEventClass argument in assertNextEvent", "url": "https://github.com/apache/flink/pull/11351#discussion_r409260284", "createdAt": "2020-04-16T03:31:13Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "diffHunk": "@@ -353,14 +354,32 @@ private void testBacklogConsistentWithNumberOfConsumableBuffers(boolean isFlushR\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testBlockedByCheckpointAndResumeConsumption() throws IOException, InterruptedException {\n+\t\tsubpartition.add(createFilledFinishedBufferConsumer(BUFFER_SIZE));\n+\t\tsubpartition.add(createEventBufferConsumer(BUFFER_SIZE, Buffer.DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER));\n+\t\tsubpartition.add(createEventBufferConsumer(BUFFER_SIZE, Buffer.DataType.EVENT_BUFFER));\n+\t\tsubpartition.add(createFilledFinishedBufferConsumer(BUFFER_SIZE));\n+\t\tsubpartition.finish();\n+\n+\t\tassertNextBuffer(readView, BUFFER_SIZE, true, 1, true, true);\n+\t\tassertNextEvent(readView, BUFFER_SIZE, null, false, 1, false, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2MTgwOA==", "bodyText": "The expectedEventClass is never used currently, and if we want to check the event class, we need to create a real event, however, we use fake events only.", "url": "https://github.com/apache/flink/pull/11351#discussion_r409461808", "createdAt": "2020-04-16T10:47:52Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "diffHunk": "@@ -353,14 +354,32 @@ private void testBacklogConsistentWithNumberOfConsumableBuffers(boolean isFlushR\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testBlockedByCheckpointAndResumeConsumption() throws IOException, InterruptedException {\n+\t\tsubpartition.add(createFilledFinishedBufferConsumer(BUFFER_SIZE));\n+\t\tsubpartition.add(createEventBufferConsumer(BUFFER_SIZE, Buffer.DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER));\n+\t\tsubpartition.add(createEventBufferConsumer(BUFFER_SIZE, Buffer.DataType.EVENT_BUFFER));\n+\t\tsubpartition.add(createFilledFinishedBufferConsumer(BUFFER_SIZE));\n+\t\tsubpartition.finish();\n+\n+\t\tassertNextBuffer(readView, BUFFER_SIZE, true, 1, true, true);\n+\t\tassertNextEvent(readView, BUFFER_SIZE, null, false, 1, false, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MDI4NA=="}, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk1MzcyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozNTozMlrOGGTVAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzozNTozMlrOGGTVAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2MTMxMw==", "bodyText": "I guess we also need to supplement the tests for covering the blocked subpartition for flush operation.", "url": "https://github.com/apache/flink/pull/11351#discussion_r409261313", "createdAt": "2020-04-16T03:35:32Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "diffHunk": "@@ -353,14 +354,32 @@ private void testBacklogConsistentWithNumberOfConsumableBuffers(boolean isFlushR\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testBlockedByCheckpointAndResumeConsumption() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk2NDc4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo0MjowNlrOGGTbJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo0MjowNlrOGGTbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2Mjg4Ng==", "bodyText": "Unify the same naming for expectedIsMoreAvailableWithoutCredit as below expectedIsEventAvailable? also for expectedIsMoreAvailable", "url": "https://github.com/apache/flink/pull/11351#discussion_r409262886", "createdAt": "2020-04-16T03:42:06Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartitionWithReadViewTest.java", "diffHunk": "@@ -369,7 +388,7 @@ static void assertNextBuffer(\n \t\t\t\tnull,\n \t\t\t\texpectedIsMoreAvailable,\n \t\t\t\texpectedBuffersInBacklog,\n-\t\t\t\texpectedNextBufferIsEvent,\n+\t\t\t\texpectedIsMoreAvailableWithoutCredit,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDk3NjU0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueueTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMzo0OToxMFrOGGTh_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMTowNTo1NFrOGGgKFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2NDYzNg==", "bodyText": "typo adequate?", "url": "https://github.com/apache/flink/pull/11351#discussion_r409264636", "createdAt": "2020-04-16T03:49:10Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueueTest.java", "diffHunk": "@@ -381,6 +387,47 @@ public void testEnqueueReaderByNotifyingBufferAndCredit() throws Exception {\n \t\tassertNull(channel.readOutbound());\n \t}\n \n+\t/**\n+\t * Tests {@link PartitionRequestQueue#enqueueAvailableReader(NetworkSequenceViewReader)},\n+\t * verifying the reader would be enqueued in the pipeline after resuming data consumption if there\n+\t * are credit and data available.\n+\t */\n+\t@Test\n+\tpublic void testEnqueueReaderByResumingConsumption() throws Exception {\n+\t\tPipelinedSubpartition subpartition = PipelinedSubpartitionTest.createPipelinedSubpartition();\n+\t\tsubpartition.add(createEventBufferConsumer(4096, Buffer.DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER));\n+\t\tsubpartition.add(createEventBufferConsumer(4096, Buffer.DataType.DATA_BUFFER));\n+\n+\t\tBufferAvailabilityListener bufferAvailabilityListener = new NoOpBufferAvailablityListener();\n+\t\tPipelinedSubpartitionView view = subpartition.createReadView(bufferAvailabilityListener);\n+\t\tResultPartitionProvider partitionProvider = (partitionId, index, availabilityListener) -> view;\n+\n+\t\tInputChannelID receiverId = new InputChannelID();\n+\t\tPartitionRequestQueue queue = new PartitionRequestQueue();\n+\t\tCreditBasedSequenceNumberingViewReader reader = new CreditBasedSequenceNumberingViewReader(receiverId, 0, queue);\n+\t\tEmbeddedChannel channel = new EmbeddedChannel(queue);\n+\n+\t\treader.requestSubpartitionView(partitionProvider, new ResultPartitionID(), 0);\n+\t\tqueue.notifyReaderCreated(reader);\n+\t\t// we have adequate credits", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3MTUxMQ==", "bodyText": "There seems no problem?", "url": "https://github.com/apache/flink/pull/11351#discussion_r409471511", "createdAt": "2020-04-16T11:05:54Z", "author": {"login": "wsry"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/PartitionRequestQueueTest.java", "diffHunk": "@@ -381,6 +387,47 @@ public void testEnqueueReaderByNotifyingBufferAndCredit() throws Exception {\n \t\tassertNull(channel.readOutbound());\n \t}\n \n+\t/**\n+\t * Tests {@link PartitionRequestQueue#enqueueAvailableReader(NetworkSequenceViewReader)},\n+\t * verifying the reader would be enqueued in the pipeline after resuming data consumption if there\n+\t * are credit and data available.\n+\t */\n+\t@Test\n+\tpublic void testEnqueueReaderByResumingConsumption() throws Exception {\n+\t\tPipelinedSubpartition subpartition = PipelinedSubpartitionTest.createPipelinedSubpartition();\n+\t\tsubpartition.add(createEventBufferConsumer(4096, Buffer.DataType.EXACTLY_ONCE_CHECKPOINT_BARRIER));\n+\t\tsubpartition.add(createEventBufferConsumer(4096, Buffer.DataType.DATA_BUFFER));\n+\n+\t\tBufferAvailabilityListener bufferAvailabilityListener = new NoOpBufferAvailablityListener();\n+\t\tPipelinedSubpartitionView view = subpartition.createReadView(bufferAvailabilityListener);\n+\t\tResultPartitionProvider partitionProvider = (partitionId, index, availabilityListener) -> view;\n+\n+\t\tInputChannelID receiverId = new InputChannelID();\n+\t\tPartitionRequestQueue queue = new PartitionRequestQueue();\n+\t\tCreditBasedSequenceNumberingViewReader reader = new CreditBasedSequenceNumberingViewReader(receiverId, 0, queue);\n+\t\tEmbeddedChannel channel = new EmbeddedChannel(queue);\n+\n+\t\treader.requestSubpartitionView(partitionProvider, new ResultPartitionID(), 0);\n+\t\tqueue.notifyReaderCreated(reader);\n+\t\t// we have adequate credits", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI2NDYzNg=="}, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTAyMzg3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/NettyPartitionRequestClientTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxNjo1NFrOGGT8uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNDoxNjo1NFrOGGT8uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI3MTQ4MQ==", "bodyText": "is it possible to call inputChannel#resumeConsumption instead of client.resumeConsumption, then we can further verify the interaction between input channel and client.", "url": "https://github.com/apache/flink/pull/11351#discussion_r409271481", "createdAt": "2020-04-16T04:16:54Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/netty/NettyPartitionRequestClientTest.java", "diffHunk": "@@ -142,6 +147,45 @@ public void testDoublePartitionRequest() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testResumeConsumption() throws Exception {\n+\t\tfinal CreditBasedPartitionRequestClientHandler handler = new CreditBasedPartitionRequestClientHandler();\n+\t\tfinal EmbeddedChannel channel = new EmbeddedChannel(handler);\n+\t\tfinal PartitionRequestClient client = createPartitionRequestClient(channel, handler);\n+\n+\t\tfinal NetworkBufferPool networkBufferPool = new NetworkBufferPool(10, 32, 2);\n+\t\tfinal SingleInputGate inputGate = createSingleInputGate(1);\n+\t\tfinal RemoteInputChannel inputChannel = createRemoteInputChannel(inputGate, client, networkBufferPool);\n+\n+\t\ttry {\n+\t\t\tclient.resumeConsumption(inputChannel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2462af49621e9f2ce29a26879a4b97d4ad752dc2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDExMDQ5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/serialization/EventSerializerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0MzoyOVrOGI8sHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0MzoyOVrOGI8sHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjEyNQ==", "bodyText": "nit: final", "url": "https://github.com/apache/flink/pull/11351#discussion_r412036125", "createdAt": "2020-04-21T09:43:29Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/serialization/EventSerializerTest.java", "diffHunk": "@@ -44,16 +45,16 @@\n  */\n public class EventSerializerTest {\n \n+\tprivate AbstractEvent[] events = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c88d15d2c173ab2dd0c03b0a6d702d7bcfbf18"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 891, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}