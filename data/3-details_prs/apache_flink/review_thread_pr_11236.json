{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzU5ODE5", "number": 11236, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDozMzoxOVrODjaUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxODozNlrODkhJ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDU4MDA5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDozMzoxOVrOFvNDfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMDozMzoxOVrOFvNDfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0MTI3OQ==", "bodyText": "Please help to check this change. cc @twalthr", "url": "https://github.com/apache/flink/pull/11236#discussion_r385041279", "createdAt": "2020-02-27T10:33:19Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "diffHunk": "@@ -181,6 +182,10 @@ else if (typeInfo instanceof CompositeType) {\n \t\t\treturn createLegacyType(LogicalTypeRoot.STRUCTURED_TYPE, typeInfo);\n \t\t}\n \n+\t\telse if (typeInfo instanceof GenericTypeInfo) {\n+\t\t\treturn DataTypes.RAW(typeInfo).bridgedTo(typeInfo.getTypeClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE2NzA5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTowNTo0MFrOFw4eDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDoxMDo0NlrOFw_jIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMTE2Ng==", "bodyText": "Can you add test to LegacyTypeInfoDataTypeConverterTest?", "url": "https://github.com/apache/flink/pull/11236#discussion_r386801166", "createdAt": "2020-03-03T05:05:40Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "diffHunk": "@@ -181,6 +182,10 @@ else if (typeInfo instanceof CompositeType) {\n \t\t\treturn createLegacyType(LogicalTypeRoot.STRUCTURED_TYPE, typeInfo);\n \t\t}\n \n+\t\telse if (typeInfo instanceof GenericTypeInfo) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNzE1NA==", "bodyText": "LegacyTypeInfoDataTypeConverterTest already covers RAW type, I updated the test result.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386917154", "createdAt": "2020-03-03T10:10:46Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/types/utils/LegacyTypeInfoDataTypeConverter.java", "diffHunk": "@@ -181,6 +182,10 @@ else if (typeInfo instanceof CompositeType) {\n \t\t\treturn createLegacyType(LogicalTypeRoot.STRUCTURED_TYPE, typeInfo);\n \t\t}\n \n+\t\telse if (typeInfo instanceof GenericTypeInfo) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMTE2Ng=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE3MTM2OnYy", "diffSide": "LEFT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/SinkCodeGenerator.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTowODo0MFrOFw4gmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNTowODo0MFrOFw4gmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMTgxOQ==", "bodyText": "Ah... Yes, it is return type instead of inputType.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386801819", "createdAt": "2020-03-03T05:08:40Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/SinkCodeGenerator.scala", "diffHunk": "@@ -83,8 +86,10 @@ object SinkCodeGenerator {\n             inputRowType,\n             inputTerm,\n             inputFieldMapping = Option(mapping))\n+        val outputBaseRowType = new BaseRowTypeInfo(\n+          getCompositeTypes(pojo).map(fromTypeInfoToLogicalType): _*)\n         val conversion = resultGenerator.generateConverterResultExpression(\n-          inputRowType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE3MzM0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/SinkCodeGenerator.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxMDoxOVrOFw4h1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxMDoxOVrOFw4h1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjEzNQ==", "bodyText": "It is pojo now, don't need getCompositeTypes.\nJust RowType.of((0 until ct.getArity).map(ct.getTypeAt).toArray).", "url": "https://github.com/apache/flink/pull/11236#discussion_r386802135", "createdAt": "2020-03-03T05:10:19Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/SinkCodeGenerator.scala", "diffHunk": "@@ -83,8 +86,10 @@ object SinkCodeGenerator {\n             inputRowType,\n             inputTerm,\n             inputFieldMapping = Option(mapping))\n+        val outputBaseRowType = new BaseRowTypeInfo(\n+          getCompositeTypes(pojo).map(fromTypeInfoToLogicalType): _*)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE3NjAxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxMTo0OFrOFw4jWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTozNzowM1rOFw-X6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjUyMg==", "bodyText": "This is just for RawType? Can you add comment?", "url": "https://github.com/apache/flink/pull/11236#discussion_r386802522", "createdAt": "2020-03-03T05:11:48Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5NzgyMg==", "bodyText": "This is for Pojo type. We have to compare query schema with POJO sink schema by field names instead of field indexes.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386897822", "createdAt": "2020-03-03T09:36:54Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjUyMg=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5Nzg5Ng==", "bodyText": "I will add a comment.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386897896", "createdAt": "2020-03-03T09:37:03Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMjUyMg=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE4MDQ5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxNToxMlrOFw4mLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMTo1MzozOVrOFxCz8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI0Nw==", "bodyText": "Can you extract pojo mapping in SinkCodeGenerator to here too? Both are for POJO reorder.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386803247", "createdAt": "2020-03-03T05:15:12Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNTU1NA==", "bodyText": "There is not too much code can be shared (4 lines) and the logic is different: SinkCodeGenerator extracts a fields mapping, however, TableSinkUtils just extract the index.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386915554", "createdAt": "2020-03-03T10:07:49Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI0Nw=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk3MDYxMA==", "bodyText": "Just a minor suggestion.\nI not mean share codes, just put all pojo things together is better to understand.", "url": "https://github.com/apache/flink/pull/11236#discussion_r386970610", "createdAt": "2020-03-03T11:53:39Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI0Nw=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjE4NTM3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwNToxODozNlrOFw4o6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMDowOTozNFrOFw_geA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzk0NQ==", "bodyText": "BTW, don't reorder the nested data in SinkCodeGenerator?", "url": "https://github.com/apache/flink/pull/11236#discussion_r386803945", "createdAt": "2020-03-03T05:18:36Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNDY3Ng==", "bodyText": "Unfortunately, we can't reorder the nested data in SinkCodeGenerator for now. Because the ExprCodeGenerator only accetps the top-level mapping. If we want to support reorder nested data, ExprCodeGenerator requires a major refactoring. I will leave that as a future work and it is not a big requirement as of right now (it's hard to construct a nested named row for now).", "url": "https://github.com/apache/flink/pull/11236#discussion_r386914676", "createdAt": "2020-03-03T10:06:13Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzk0NQ=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkxNjQ3Mg==", "bodyText": "Besides, we have to keep the nested fields reordering in TableSinkUtils to make the simplest case StreamTableEnvironmentITCase#testToAppendStreamWithPojoType passed (no nested reordering required when code generation).", "url": "https://github.com/apache/flink/pull/11236#discussion_r386916472", "createdAt": "2020-03-03T10:09:34Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/sinks/TableSinkUtils.scala", "diffHunk": "@@ -189,13 +190,45 @@ object TableSinkUtils {\n       queryLogicalType,\n       withChangeFlag)\n     if (LogicalTypeChecks.isCompositeType(requestedOutputType.getLogicalType)) {\n-      DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      fromDataTypeToTypeInfo(requestedOutputType) match {\n+        case pj: PojoTypeInfo[_] => expandPojoTypeToSchema(pj, queryLogicalType)\n+        case _ => DataTypeUtils.expandCompositeTypeToSchema(requestedOutputType)\n+      }\n     } else {\n       // atomic type\n       TableSchema.builder().field(\"f0\", requestedOutputType).build()\n     }\n   }\n \n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzk0NQ=="}, "originalCommit": {"oid": "7404df3a2130267c63a43d42398f08fd6ae09b0b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 918, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}