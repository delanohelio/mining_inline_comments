{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzQwMzMy", "number": 13304, "title": "[FLINK-19118][python] Support Expression in the operations of Python Table API", "bodyText": "What is the purpose of the change\nThis pull request support Expression in the operations of Python Table API\nBrief change log\n\nUpdate the operations in Table to allow both string and Expression arguments\n\nVerifying this change\n\nHave updated the existing tests to use Expression.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? (Will add documentation in a separate PR)", "createdAt": "2020-09-02T11:00:50Z", "url": "https://github.com/apache/flink/pull/13304", "merged": true, "mergeCommit": {"oid": "a8cc62a901dabe6c4d877b97db6024715b68174a"}, "closed": true, "closedAt": "2020-09-04T01:15:59Z", "author": {"login": "dianfu"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE4_1AAH2gAyNDc3NzQwMzMyOmQzMDhmZTg0MjMxMWU3OTRiZTcwYjIxYzFmOTMzNWM5M2ZiMjliNWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFah2tAFqTQ4MjI5MjY4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d308fe842311e794be70b21c1f9335c93fb29b5b", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/d308fe842311e794be70b21c1f9335c93fb29b5b", "committedDate": "2020-09-02T09:57:20Z", "message": "[FLINK-19118][python] Support Expression in the operations of Python Table API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDQ1NjE1", "url": "https://github.com/apache/flink/pull/13304#pullrequestreview-481445615", "createdAt": "2020-09-03T02:17:14Z", "commit": {"oid": "d308fe842311e794be70b21c1f9335c93fb29b5b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjoxNzoxNFrOHMSzYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMjozMDo0OVrOHMTiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY1MzAyNw==", "bodyText": "combine to one string?", "url": "https://github.com/apache/flink/pull/13304#discussion_r482653027", "createdAt": "2020-09-03T02:17:14Z", "author": {"login": "WeiZhong94"}, "path": "flink-python/pyflink/table/tests/test_pandas_udf.py", "diffHunk": "@@ -58,8 +59,8 @@ def test_basic_functionality(self):\n \n         t = self.t_env.from_elements([(1, 2, 3), (2, 5, 6), (3, 1, 9)], ['a', 'b', 'c'])\n         exec_insert_table(\n-            t.where(\"add_one(b) <= 3\").select(\"a, b + 1, add(a + 1, subtract_one(c)) + 2, \"\n-                                              \"add(add_one(a), 1L)\"),\n+            t.where(E.call('add_one', t.b) <= 3)\n+             .select(\"a, b + 1, add(a + 1, subtract_one(c)) + 2, \" \"add(add_one(a), 1L)\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d308fe842311e794be70b21c1f9335c93fb29b5b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY2NTA5OA==", "bodyText": "\".rows\" seems not supported. Maybe we should support it or use \"row_interval()\" instead?", "url": "https://github.com/apache/flink/pull/13304#discussion_r482665098", "createdAt": "2020-09-03T02:30:49Z", "author": {"login": "WeiZhong94"}, "path": "flink-python/pyflink/table/tests/test_window.py", "diffHunk": "@@ -40,8 +41,8 @@ class BatchTableWindowTests(PyFlinkBatchTableTestCase):\n \n     def test_tumble_window(self):\n         t = self.t_env.from_elements([(1, 1, \"Hello\")], [\"a\", \"b\", \"c\"])\n-        result = t.window(Tumble.over(\"2.rows\").on(\"a\").alias(\"w\"))\\\n-            .group_by(\"w, c\").select(\"b.sum\")\n+        result = t.window(Tumble.over(E.lit(2).rows).on(\"a\").alias(\"w\"))\\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d308fe842311e794be70b21c1f9335c93fb29b5b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/8ad8edefaaa28a0459b40b3587013d9ca7c14933", "committedDate": "2020-09-03T02:51:11Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDY0ODUy", "url": "https://github.com/apache/flink/pull/13304#pullrequestreview-481464852", "createdAt": "2020-09-03T03:22:59Z", "commit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTIzMjQw", "url": "https://github.com/apache/flink/pull/13304#pullrequestreview-481523240", "createdAt": "2020-09-03T06:20:59Z", "commit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoyMDo1OVrOHMXetw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzowMDowN1rOHMYkrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyOTY1NQ==", "bodyText": "How about  E -> expr(Shorthand in lowercase)? some as pandas did?  e.g.: import numpy as np\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/tests/dtypes/test_dtypes.py", "url": "https://github.com/apache/flink/pull/13304#discussion_r482729655", "createdAt": "2020-09-03T06:20:59Z", "author": {"login": "sunjincheng121"}, "path": "flink-python/pyflink/table/examples/batch/word_count.py", "diffHunk": "@@ -23,6 +23,7 @@\n \n from pyflink.dataset import ExecutionEnvironment\n from pyflink.table import BatchTableEnvironment, TableConfig\n+from pyflink.table import expressions as E", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTgyOA==", "bodyText": "How about do a little bit change as follows?:\n t2 = t.alias(\"d, e, f\")\n result = t2.select(t2.d, t2.e, t2.f)", "url": "https://github.com/apache/flink/pull/13304#discussion_r482741828", "createdAt": "2020-09-03T06:48:03Z", "author": {"login": "sunjincheng121"}, "path": "flink-python/pyflink/table/tests/test_calc.py", "diffHunk": "@@ -31,21 +32,21 @@ class StreamTableCalcTests(PyFlinkStreamTableTestCase):\n \n     def test_select(self):\n         t = self.t_env.from_elements([(1, 'hi', 'hello')], ['a', 'b', 'c'])\n-        result = t.select(\"a + 1, b, c\")\n+        result = t.select(t.a + 1, t.b, t.c)\n         query_operation = result._j_table.getQueryOperation()\n         self.assertEqual('[plus(a, 1), b, c]',\n                          query_operation.getProjectList().toString())\n \n     def test_alias(self):\n         t = self.t_env.from_elements([(1, 'Hi', 'Hello')], ['a', 'b', 'c'])\n-        result = t.alias(\"d, e, f\").select(\"d, e, f\")\n+        result = t.alias(\"d, e, f\").select(E.col('d'), E.col('e'), E.col('f'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NDA4OA==", "bodyText": "t.select(\"a, b, c\") -> t.select(t.a, t.b, t.c)\nE.col('a') -> t.a?", "url": "https://github.com/apache/flink/pull/13304#discussion_r482744088", "createdAt": "2020-09-03T06:52:57Z", "author": {"login": "sunjincheng121"}, "path": "flink-python/pyflink/table/tests/test_column_operation.py", "diffHunk": "@@ -16,36 +16,37 @@\n # limitations under the License.\n ################################################################################\n \n+from pyflink.table import expressions as E\n from pyflink.testing.test_case_utils import PyFlinkStreamTableTestCase\n \n \n class StreamTableColumnsOperationTests(PyFlinkStreamTableTestCase):\n \n     def test_add_columns(self):\n         t = self.t_env.from_elements([(1, 'Hi', 'Hello')], ['a', 'b', 'c'])\n-        result = t.select(\"a\").add_columns(\"a + 1 as b, a + 2 as c\")\n+        result = t.select(t.a).add_columns((t.a + 1).alias('b'), (t.a + 2).alias('c'))\n         query_operation = result._j_table.getQueryOperation()\n         self.assertEqual('[a, plus(a, 1), '\n                          'plus(a, 2)]',\n                          query_operation.getProjectList().toString())\n \n     def test_add_or_replace_columns(self):\n         t = self.t_env.from_elements([(1, 'Hi', 'Hello')], ['a', 'b', 'c'])\n-        result = t.select(\"a\").add_or_replace_columns(\"a + 1 as b, a + 2 as a\")\n+        result = t.select(\"a\").add_or_replace_columns((t.a + 1).alias('b'), (t.a + 2).alias('a'))\n         query_operation = result._j_table.getQueryOperation()\n         self.assertEqual('[plus(a, 2), '\n                          'plus(a, 1)]',\n                          query_operation.getProjectList().toString())\n \n     def test_rename_columns(self):\n         t = self.t_env.from_elements([(1, 'Hi', 'Hello')], ['a', 'b', 'c'])\n-        result = t.select(\"a, b, c\").rename_columns(\"a as d, c as f, b as e\")\n+        result = t.select(\"a, b, c\").rename_columns(t.a.alias('d'), t.c.alias('f'), t.b.alias('e'))\n         table_schema = result._j_table.getQueryOperation().getTableSchema()\n         self.assertEqual(['d', 'e', 'f'], list(table_schema.getFieldNames()))\n \n     def test_drop_columns(self):\n         t = self.t_env.from_elements([(1, 'Hi', 'Hello')], ['a', 'b', 'c'])\n-        result = t.select(\"a, b, c\").drop_columns(\"a, c\")\n+        result = t.select(\"a, b, c\").drop_columns(E.col('a'), E.col('c'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjU1OA==", "bodyText": "E.col('id') == E.col('word') -> source.id == source.word", "url": "https://github.com/apache/flink/pull/13304#discussion_r482746558", "createdAt": "2020-09-03T06:57:52Z", "author": {"login": "sunjincheng121"}, "path": "flink-python/pyflink/table/tests/test_correlate.py", "diffHunk": "@@ -39,7 +40,8 @@ def test_join_lateral_with_join_predicate(self):\n                                                     \"org.apache.flink.table.utils.TableFunc1\")\n         source = t_env.from_elements([(\"1\", \"1#3#5#7\"), (\"2\", \"2#4#6#8\")], [\"id\", \"words\"])\n \n-        result = source.join_lateral(\"split(words) as (word)\", \"id = word\")\n+        result = source.join_lateral(E.call('split', source.words).alias('word'),\n+                                     E.col('id') == E.col('word'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NzU2Nw==", "bodyText": "E.col('a') -> t.a", "url": "https://github.com/apache/flink/pull/13304#discussion_r482747567", "createdAt": "2020-09-03T07:00:07Z", "author": {"login": "sunjincheng121"}, "path": "flink-python/pyflink/table/tests/test_dependency.py", "diffHunk": "@@ -112,7 +113,7 @@ def check_requirements(i):\n             ['a', 'b'], [DataTypes.BIGINT(), DataTypes.BIGINT()])\n         self.t_env.register_table_sink(\"Results\", table_sink)\n         t = self.t_env.from_elements([(1, 2), (2, 5), (3, 1)], ['a', 'b'])\n-        exec_insert_table(t.select(\"check_requirements(a), a\"), \"Results\")\n+        exec_insert_table(t.select(E.call('check_requirements', E.col('a')), E.col('a')), \"Results\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ad8edefaaa28a0459b40b3587013d9ca7c14933"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83acd696081b6640843fca45874693201aafe13d", "author": {"user": {"login": "dianfu", "name": "Dian Fu"}}, "url": "https://github.com/apache/flink/commit/83acd696081b6640843fca45874693201aafe13d", "committedDate": "2020-09-03T08:56:52Z", "message": "address comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjkyNjgw", "url": "https://github.com/apache/flink/pull/13304#pullrequestreview-482292680", "createdAt": "2020-09-04T01:01:22Z", "commit": {"oid": "83acd696081b6640843fca45874693201aafe13d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4357, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}