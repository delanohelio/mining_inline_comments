{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNjYyODQx", "number": 13447, "title": "[FLINK-19297][network] Make ResultPartitionWriter record-oriented", "bodyText": "What is the purpose of the change\nCurrently, ResultPartitionWriter is buffer-oriented, that is, RecordWriter will add buffer of different channels to ResultPartitionWriter and the buffer boundary serves as a nature boundary of data belonging to different channels. However, this abstraction is not flexible enough to handle some cases where records are appended a joint-structure shared by all channels and sorting is used to cluster data belonging to different channels.\nThis PR makes ResultPartitionWriter record-oriented which offers more flexibility to the implementation of ResultPartitionWriter. And based on the new record-oriented Interface, we will introduce the sort-merge based blocking shuffle to Flink in the future.\nBrief change log\n\ncommit 1eae320: [FLINK-19320][task] Removes RecordWriter#clearBuffers and the corresponding test cases.\ncommit 6f6538e: [hotfix] Remove outdated description of RecordWriter.\ncommit c5c7396: [FLINK-19312][network] Introduce BufferWritingResultPartition which wraps the ResultSubpartition related logic\ncommit 7556bbf: [FLINK-19297][network] Make ResultPartitionWriter record-oriented\ncommit 28e1a15: [hotfix] Remove unused RecordWriterTest#TrackingBufferRecycler\ncommit 720849b: [FLINK-19302][network] Fix issue of flushing BoundedBlockingResultPartition\ncommit d4a56d8: [FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nVerifying this change\nThis change is verified by both existing tests and new added tests.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-09-22T03:06:12Z", "url": "https://github.com/apache/flink/pull/13447", "merged": true, "mergeCommit": {"oid": "aa62e64902a9dd3904a9049dcc9746682fb9f7fa"}, "closed": true, "closedAt": "2020-09-24T16:03:28Z", "author": {"login": "wsry"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLPTnMABqjM3OTEzMjEyODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLyI95gBqjM3OTk4NzE3MTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4a56d85b6a00b8c10a4993a5f3c483ad26e5213", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/d4a56d85b6a00b8c10a4993a5f3c483ad26e5213", "committedDate": "2020-09-22T02:40:10Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "620bd4aeecbb133a360cefae8c873ded05e5b720", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/620bd4aeecbb133a360cefae8c873ded05e5b720", "committedDate": "2020-09-22T03:19:40Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "620bd4aeecbb133a360cefae8c873ded05e5b720", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/620bd4aeecbb133a360cefae8c873ded05e5b720", "committedDate": "2020-09-22T03:19:40Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "30010e1ebc1bc65cf5151a544134947567baac4d", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/30010e1ebc1bc65cf5151a544134947567baac4d", "committedDate": "2020-09-22T06:04:35Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDI1Mzk3", "url": "https://github.com/apache/flink/pull/13447#pullrequestreview-493425397", "createdAt": "2020-09-22T12:52:57Z", "commit": {"oid": "f98909f2c50173758f29167fcd176010a937d284"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo1Mjo1OFrOHV4gvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMzoxMTowMlrOHV5Qvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwODAzMA==", "bodyText": "Just to double check: We do not want this to be the default behavior in BufferWritingResultPartition, because this would finish the partial buffers for streaming/pipelined cases as well, which we don't want.\nI think this logic may be confusing for future developers. What we could do is the following:\n\nBufferWritingResultPartition leaves the void flush(int) and flushAll() methods abstract.\nInstead it offers protected void flushSubpartition(int partition, boolean finishProducers) and protected void flushAllSubpartitions(boolean finishProducers). That makes it clear that there is a producer that may or may not be finished, so the caller has to be aware of this behavior.\nThe BoundedBlockingResultPartition then implements flushAll() { flushAllSubpartitions(true); } and the PipelinedResultPartition implements flushAll() { flushAllSubpartitions(false); }", "url": "https://github.com/apache/flink/pull/13447#discussion_r492708030", "createdAt": "2020-09-22T12:52:58Z", "author": {"login": "StephanEwen"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/BoundedBlockingResultPartition.java", "diffHunk": "@@ -63,6 +63,22 @@ public BoundedBlockingResultPartition(\n \t\t\tbufferPoolFactory);\n \t}\n \n+\t@Override\n+\tpublic void flush(int targetSubpartition) {\n+\t\tfinishBroadcastBufferBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f98909f2c50173758f29167fcd176010a937d284"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcyMDMxOQ==", "bodyText": "It would be really great if this method were not public. Ideally we can remove this completely, because all tests that use this bypass some crucial logic of this class and may result in meaningless tests.\nThis method is used in three places:\n\nThe occurrence in SingleInputGateTest can be replaced with emitting a record.\nThe occurrence in TestPartitionProducer could be removed by adjusting TestProducerSource to produce ByteBuffer instead of BufferConsumer, which looks like a nice change that might even simplify things.\nIf the change for PartitionTestUtils could in theory be kept, and the visibility of the method be reduced to package-private.", "url": "https://github.com/apache/flink/pull/13447#discussion_r492720319", "createdAt": "2020-09-22T13:11:02Z", "author": {"login": "StephanEwen"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/writer/RecordWriter.java", "diffHunk": "@@ -109,89 +94,58 @@\n \t\t}\n \t}\n \n-\tprotected void emit(T record, int targetChannel) throws IOException, InterruptedException {\n+\tprotected void emit(T record, int targetSubpartition) throws IOException {\n \t\tcheckErroneous();\n \n-\t\tserializer.serializeRecord(record);\n-\n-\t\t// Make sure we don't hold onto the large intermediate serialization buffer for too long\n-\t\tcopyFromSerializerToTargetChannel(targetChannel);\n-\t}\n-\n-\t/**\n-\t * @param targetChannel\n-\t * @return <tt>true</tt> if the intermediate serialization buffer should be pruned\n-\t */\n-\tprotected boolean copyFromSerializerToTargetChannel(int targetChannel) throws IOException, InterruptedException {\n-\t\t// We should reset the initial position of the intermediate serialization buffer before\n-\t\t// copying, so the serialization results can be copied to multiple target buffers.\n-\t\tserializer.reset();\n-\n-\t\tboolean pruneTriggered = false;\n-\t\tBufferBuilder bufferBuilder = getBufferBuilder(targetChannel);\n-\t\tSerializationResult result = serializer.copyToBufferBuilder(bufferBuilder);\n-\t\twhile (result.isFullBuffer()) {\n-\t\t\tfinishBufferBuilder(bufferBuilder);\n-\n-\t\t\t// If this was a full record, we are done. Not breaking out of the loop at this point\n-\t\t\t// will lead to another buffer request before breaking out (that would not be a\n-\t\t\t// problem per se, but it can lead to stalls in the pipeline).\n-\t\t\tif (result.isFullRecord()) {\n-\t\t\t\tpruneTriggered = true;\n-\t\t\t\temptyCurrentBufferBuilder(targetChannel);\n-\t\t\t\tbreak;\n-\t\t\t}\n-\n-\t\t\tbufferBuilder = requestNewBufferBuilder(targetChannel);\n-\t\t\tresult = serializer.copyToBufferBuilder(bufferBuilder);\n-\t\t}\n-\t\tcheckState(!serializer.hasSerializedData(), \"All data should be written at once\");\n+\t\ttargetPartition.emitRecord(serializeRecord(serializer, record), targetSubpartition);\n \n \t\tif (flushAlways) {\n-\t\t\tflushTargetPartition(targetChannel);\n+\t\t\ttargetPartition.flush(targetSubpartition);\n \t\t}\n-\t\treturn pruneTriggered;\n \t}\n \n \tpublic void broadcastEvent(AbstractEvent event) throws IOException {\n \t\tbroadcastEvent(event, false);\n \t}\n \n \tpublic void broadcastEvent(AbstractEvent event, boolean isPriorityEvent) throws IOException {\n-\t\ttry (BufferConsumer eventBufferConsumer = EventSerializer.toBufferConsumer(event)) {\n-\t\t\tfor (int targetChannel = 0; targetChannel < numberOfChannels; targetChannel++) {\n-\t\t\t\ttryFinishCurrentBufferBuilder(targetChannel);\n-\n-\t\t\t\t// Retain the buffer so that it can be recycled by each channel of targetPartition\n-\t\t\t\ttargetPartition.addBufferConsumer(eventBufferConsumer.copy(), targetChannel, isPriorityEvent);\n-\t\t\t}\n+\t\ttargetPartition.broadcastEvent(event, isPriorityEvent);\n \n-\t\t\tif (flushAlways) {\n-\t\t\t\tflushAll();\n-\t\t\t}\n+\t\tif (flushAlways) {\n+\t\t\tflushAll();\n \t\t}\n \t}\n \n-\tpublic void flushAll() {\n-\t\ttargetPartition.flushAll();\n+\t@VisibleForTesting\n+\tpublic static ByteBuffer serializeRecord(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f95779273fd0c8ca9ec4eeaf8a4dc232ecb6788a"}, "originalPosition": 150}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30010e1ebc1bc65cf5151a544134947567baac4d", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/30010e1ebc1bc65cf5151a544134947567baac4d", "committedDate": "2020-09-22T06:04:35Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "fe617726316ca41ecb446cedc718aac77d8aeb31", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/fe617726316ca41ecb446cedc718aac77d8aeb31", "committedDate": "2020-09-23T07:59:19Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe617726316ca41ecb446cedc718aac77d8aeb31", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/fe617726316ca41ecb446cedc718aac77d8aeb31", "committedDate": "2020-09-23T07:59:19Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "4afb45bc2cee67d99fffda71792b292e6bfbf7c2", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/4afb45bc2cee67d99fffda71792b292e6bfbf7c2", "committedDate": "2020-09-23T11:19:47Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4afb45bc2cee67d99fffda71792b292e6bfbf7c2", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/4afb45bc2cee67d99fffda71792b292e6bfbf7c2", "committedDate": "2020-09-23T11:19:47Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "a0f1eaefc83dd9c183e43215bdbc3d1e4e06b5d4", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/a0f1eaefc83dd9c183e43215bdbc3d1e4e06b5d4", "committedDate": "2020-09-23T11:52:06Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0f1eaefc83dd9c183e43215bdbc3d1e4e06b5d4", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/a0f1eaefc83dd9c183e43215bdbc3d1e4e06b5d4", "committedDate": "2020-09-23T11:52:06Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "b9b964ea58a463c3b742f22c27f9dfc998715277", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/b9b964ea58a463c3b742f22c27f9dfc998715277", "committedDate": "2020-09-23T12:04:39Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fcc9db08d65a5d05bf0a9d010d6308103c132e0", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/1fcc9db08d65a5d05bf0a9d010d6308103c132e0", "committedDate": "2020-09-23T17:40:07Z", "message": "[FLINK-19320][task] Remove RecordWriter#clearBuffers\n\nPreviously, RecordWriter#clearBuffers was used to recycle the partially filled buffer in the serializer. However, currently the serializer does not contain any network buffer any more. The method now is used to finish the current BufferBuilders and only some tests and BatchTask use it. Actually, these usage should be replaced by RecordWriter#close which dose the same thing. So this patch removes RecordWriter#clearBuffers and the corresponding test cases."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4914aebfa6692ea2ba6216065bcc6a7c0b128b9", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/d4914aebfa6692ea2ba6216065bcc6a7c0b128b9", "committedDate": "2020-09-23T17:40:07Z", "message": "[hotfix] Remove outdated description in Javadoc of RecordWriter\n\nThis closes #13447"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9b964ea58a463c3b742f22c27f9dfc998715277", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/b9b964ea58a463c3b742f22c27f9dfc998715277", "committedDate": "2020-09-23T12:04:39Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "bd18b11e160b674d37e7ed538f84bde0ad82ba18", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/bd18b11e160b674d37e7ed538f84bde0ad82ba18", "committedDate": "2020-09-23T18:33:21Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd18b11e160b674d37e7ed538f84bde0ad82ba18", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/bd18b11e160b674d37e7ed538f84bde0ad82ba18", "committedDate": "2020-09-23T18:33:21Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "65520f125fed528a36e8808e2dcc2a3437b041ed", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/65520f125fed528a36e8808e2dcc2a3437b041ed", "committedDate": "2020-09-23T18:54:07Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e3ac706c5fb08997d5e088cccd0ab5fda7e1cc2", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/1e3ac706c5fb08997d5e088cccd0ab5fda7e1cc2", "committedDate": "2020-09-23T19:31:08Z", "message": "[FLINK-19312][network] Introduce BufferWritingResultPartition which wraps the ResultSubpartition related logic\n\nIn the current abstraction, buffers are written to and read from ResultSubpartitions, which is a hash-style data writing and reading implementation. This is in contrast to implementations where records are appended to a joint structure, from which the data is drawn after the write phase is finished, for example the sort-based partitioning which clusters data belonging to different channels by sorting channel index. In the future, sort-merge based ResultPartitionWriter will be implemented which can not share the current hash-style ResultSubpartition related logics. So this patch migrates these logics from ResultPartition to the new BufferWritingResultPartition, after which ResultPartition is free of ResultSubpartition and can be reused by the future sort-merge based ResultPartitionWriter implementation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65520f125fed528a36e8808e2dcc2a3437b041ed", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/65520f125fed528a36e8808e2dcc2a3437b041ed", "committedDate": "2020-09-23T18:54:07Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "da7a6d2a4ecf76fad05303f2e39e33efb94cf0b6", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/da7a6d2a4ecf76fad05303f2e39e33efb94cf0b6", "committedDate": "2020-09-23T19:35:38Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e19cb540b3ca9421c7c0022458aff96c9e1bd6d2", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/e19cb540b3ca9421c7c0022458aff96c9e1bd6d2", "committedDate": "2020-09-23T19:52:50Z", "message": "[FLINK-19297][network] Make ResultPartitionWriter record-oriented\n\nCurrently, the ResultPartitionWriter is buffer-oriented, that is, RecordWriter can only add buffers of different channels to ResultPartitionWriter and the buffer boundary serves as a nature boundary of data belonging to different channels. However, this abstraction is not flexible enough to handle new implementations like sort-based partitioning where records are appended a joint structure shared by all channels and sorting is used to cluster data belonging to different channels. This patch makes ResultPartitionWriter record-oriented by adding new record-oriented interfaces to and removing the old buffer-oriented interfaces from ResultPartitionWriter. After this change, the future sort-merge based ResultPartitionWriter can be implemented easily."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97b8643b5e9f44e52911c05a35e6d6699aea4440", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/97b8643b5e9f44e52911c05a35e6d6699aea4440", "committedDate": "2020-09-23T19:54:32Z", "message": "[hotfix] Remove unused RecordWriterTest#TrackingBufferRecycler\n\nThis closes #13447"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4341d6daa1329ce85090bcc480f7f7ed04d10a", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/cb4341d6daa1329ce85090bcc480f7f7ed04d10a", "committedDate": "2020-09-23T19:54:54Z", "message": "[FLINK-19302][network] Fix flushing BoundedBlockingResultPartition\n\nCurrently, when flushing the BoundedBlockingSubpartition, the unfinished BufferConsumer will be closed and recycled, however the corresponding BufferBuilder is not finished and the writer can keep coping records to it which can lead to loss of data. This patch fix the issue by finishing the corresponding BufferBuilders first when flushing a BoundedBlockingResultPartition."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "063c529b916e3bf9f6bc2be39f04be87bb84eb84", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/063c529b916e3bf9f6bc2be39f04be87bb84eb84", "committedDate": "2020-09-23T19:55:09Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da7a6d2a4ecf76fad05303f2e39e33efb94cf0b6", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/da7a6d2a4ecf76fad05303f2e39e33efb94cf0b6", "committedDate": "2020-09-23T19:35:38Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}, "afterCommit": {"oid": "063c529b916e3bf9f6bc2be39f04be87bb84eb84", "author": {"user": {"login": "wsry", "name": "caoyingjie"}}, "url": "https://github.com/apache/flink/commit/063c529b916e3bf9f6bc2be39f04be87bb84eb84", "committedDate": "2020-09-23T19:55:09Z", "message": "[FLINK-19323][network] Small optimization of RecordWriter#serializeRecord\n\nCurrently, when serializing a record, the serializer will first skip 4 bytes for length filed and serialize the record. Then it gets the serialized record length and skips back to position 0 to write the length field. After that, it skip again to the tail of the serialized data. This patch avoids the last two skips by writing length field to position 0 directly."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4161, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}