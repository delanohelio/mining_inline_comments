{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NzQ0NzU1", "number": 13305, "title": "[FLINK-19109][task] Ignore isLoopRunning in MailboxExecutor.isIdle", "bodyText": "What is the purpose of the change\nCurrently, MailboxExecutor.isIdle checks whether the mailbox loop is running or not.\nIf not, ContinuousFileReaderOperator continues file processing loop without going through the mailbox.\nHowever, the mailbox can still contain (and receive new) mails (e.g. from timers) that should be processed.\nIn particular, this check currently prevents periodic watermarks from being emitted.\nThis PR simply removes this check.\nVerifying this change\n\nAdded FileReadingWatermarkITCase\nExisting tests cover the rest of ContinuousFileReaderOperator (e.g. ContinuousFileProcessingTest)\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): yes\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? no", "createdAt": "2020-09-02T11:09:20Z", "url": "https://github.com/apache/flink/pull/13305", "merged": true, "mergeCommit": {"oid": "361ccb3ad734490aa4df9aa9d0430a31680581db"}, "closed": true, "closedAt": "2020-09-07T07:44:04Z", "author": {"login": "rkhachatryan"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE-u4NgBqjM3MjA3NTEyNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFQWMpgBqjM3MjQ2Mzg0NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6da9dbc0b1f5f47475da8dfe5be8d8fd4ef80edc", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/6da9dbc0b1f5f47475da8dfe5be8d8fd4ef80edc", "committedDate": "2020-09-02T10:59:25Z", "message": "[FLINK-191909][task] Ignore isLoopRunning in MailboxExecutor.isIdle\n\nWhen closing, this flag is set, but mailbox can still contain\n(and receive new) mails (e.g. from timers) that should be processed.\nIn particular, this check currently prevents periodic watermarks from\nbeing emitted."}, "afterCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/db800b0d36bc68eba7f346ce1b66fbf738c182fd", "committedDate": "2020-09-02T16:37:28Z", "message": "[FLINK-19109][task] Ignore isLoopRunning in MailboxExecutor.isIdle\n\nWhen closing, this flag is set, but mailbox can still contain\n(and receive new) mails (e.g. from timers) that should be processed.\nIn particular, this check currently prevents periodic watermarks from\nbeing emitted."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTY1NDU2", "url": "https://github.com/apache/flink/pull/13305#pullrequestreview-481165456", "createdAt": "2020-09-02T18:40:20Z", "commit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MDoyMFrOHL82Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODo0MDoyMFrOHL82Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA==", "bodyText": "Overall this looks good to me, but I'm just trying to check that this assertion isn't going to be brittle. Is this simply asserting that the actual number of WMs should be at least 20% of the expected number -- which is based on how long the sink was open?", "url": "https://github.com/apache/flink/pull/13305#discussion_r482293318", "createdAt": "2020-09-02T18:40:20Z", "author": {"login": "alpinegizmo"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNTYxNzMy", "url": "https://github.com/apache/flink/pull/13305#pullrequestreview-481561732", "createdAt": "2020-09-03T07:22:22Z", "commit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzoyMjoyMlrOHMZa4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozMDozM1rOHMZs2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2MTQ0Mg==", "bodyText": "what about adding a unit test for this method? Unit test wouldn't be very useful, but also would be trivial?", "url": "https://github.com/apache/flink/pull/13305#discussion_r482761442", "createdAt": "2020-09-03T07:22:22Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/MailboxExecutorImpl.java", "diffHunk": "@@ -57,8 +57,7 @@ public MailboxExecutorImpl(@Nonnull TaskMailbox mailbox, int priority, StreamTas\n \t}\n \n \tpublic boolean isIdle() {\n-\t\treturn !mailboxProcessor.isMailboxLoopRunning() ||\n-\t\t\t(mailboxProcessor.isDefaultActionUnavailable() && !mailbox.hasMail() && mailbox.getState().isAcceptingMails());\n+\t\treturn mailboxProcessor.isDefaultActionUnavailable() && !mailbox.hasMail() && mailbox.getState().isAcceptingMails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NjA0MA==", "bodyText": "I would hope that thanks to mailbox this should be quite easily testable with the test harness.\nWhat about testing that some mailbox action is allowed to be executed when the CFRO is closing up and processing some infinite split?", "url": "https://github.com/apache/flink/pull/13305#discussion_r482766040", "createdAt": "2020-09-03T07:30:33Z", "author": {"login": "pnowojski"}, "path": "flink-tests/src/test/java/org/apache/flink/test/streaming/api/FileReadingWatermarkITCase.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.test.streaming.api;\n+\n+import org.apache.flink.api.common.JobExecutionResult;\n+import org.apache.flink.api.common.accumulators.IntCounter;\n+import org.apache.flink.api.common.accumulators.LongCounter;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.streaming.api.TimeCharacteristic;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n+import org.apache.flink.streaming.api.functions.sink.SinkFunction;\n+import org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;\n+import org.apache.flink.streaming.api.windowing.time.Time;\n+\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.UUID;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that watermarks are emitted while file is being read, particularly the last split.\n+ *\n+ * @see <a href=\"https://issues.apache.org/jira/browse/FLINK-19109\">FLINK-19109</a>\n+ */\n+public class FileReadingWatermarkITCase {\n+\tprivate static final String DURATION_ACC_NAME = \"duration\";\n+\tprivate static final String NUM_WATERMARKS_ACC_NAME = \"numWatermarks\";\n+\tprivate static final int FILE_SIZE_LINES = 100_000;\n+\tprivate static final int WATERMARK_INTERVAL_MILLIS = 10;\n+\tprivate static final int MIN_EXPECTED_WATERMARKS = 5;\n+\n+\t@Test\n+\tpublic void testWatermarkEmissionWithChaining() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(1);\n+\t\tenv.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n+\t\tenv.getConfig().setAutoWatermarkInterval(WATERMARK_INTERVAL_MILLIS);\n+\n+\t\tcheckState(env.isChainingEnabled());\n+\n+\t\tenv\n+\t\t\t.readTextFile(getSourceFile().getAbsolutePath())\n+\t\t\t.assignTimestampsAndWatermarks(getExtractorAssigner())\n+\t\t\t.addSink(getWatermarkCounter());\n+\n+\t\tJobExecutionResult result = env.execute();\n+\n+\t\tint actual = result.getAccumulatorResult(NUM_WATERMARKS_ACC_NAME);\n+\t\tdouble expected = ((double) (long) result.getAccumulatorResult(DURATION_ACC_NAME)) / WATERMARK_INTERVAL_MILLIS;\n+\n+\t\tassertTrue(\"too few watermarks emitted: \" + actual, actual >= MIN_EXPECTED_WATERMARKS);\n+\t\tassertEquals(1, actual / expected, .8d); // very simple pipeline might spend its time on setup instead of actual processing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5MzMxOA=="}, "originalCommit": {"oid": "db800b0d36bc68eba7f346ce1b66fbf738c182fd"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODE5OTc4", "url": "https://github.com/apache/flink/pull/13305#pullrequestreview-481819978", "createdAt": "2020-09-03T13:08:20Z", "commit": {"oid": "b37d13c99ca3f68f80b26a4f97371d309b124810"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "380b8d7be6ae142a27061c6d529c2ca059a51aa5", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/380b8d7be6ae142a27061c6d529c2ca059a51aa5", "committedDate": "2020-09-03T13:09:20Z", "message": "[FLINK-19109][task] Ignore isLoopRunning in MailboxExecutor.isIdle\n\nWhen closing, this flag is set, but mailbox can still contain\n(and receive new) mails (e.g. from timers) that should be processed.\nIn particular, this check currently prevents periodic watermarks from\nbeing emitted."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b37d13c99ca3f68f80b26a4f97371d309b124810", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/b37d13c99ca3f68f80b26a4f97371d309b124810", "committedDate": "2020-09-03T11:12:05Z", "message": "fixup! [FLINK-19109][task] Ignore isLoopRunning in MailboxExecutor.isIdle"}, "afterCommit": {"oid": "380b8d7be6ae142a27061c6d529c2ca059a51aa5", "author": {"user": {"login": "rkhachatryan", "name": "Roman"}}, "url": "https://github.com/apache/flink/commit/380b8d7be6ae142a27061c6d529c2ca059a51aa5", "committedDate": "2020-09-03T13:09:20Z", "message": "[FLINK-19109][task] Ignore isLoopRunning in MailboxExecutor.isIdle\n\nWhen closing, this flag is set, but mailbox can still contain\n(and receive new) mails (e.g. from timers) that should be processed.\nIn particular, this check currently prevents periodic watermarks from\nbeing emitted."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4364, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}