{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NzA0OTA3", "number": 13907, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNzoxMFrOFApiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowNDoxNlrOFD3OCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MjI0ODMyOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNzoxMFrOH_C4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjowMzo0OVrOICD_NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2OTQ3MQ==", "bodyText": "does the equals and hash function need to be modify? @zhuxiaoshang", "url": "https://github.com/apache/flink/pull/13907#discussion_r535869471", "createdAt": "2020-12-04T06:37:10Z", "author": {"login": "zhisheng17"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -55,6 +61,10 @@ public int getMaxRetries() {\n \t\treturn maxRetries;\n \t}\n \n+\tpublic Integer getParallelism() {\n+\t\treturn parallelism;\n+\t}\n+\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\tif (this == o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49181d26aa6a07bc289544ad0d55929fd2c89377"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzMzM5Nw==", "bodyText": "Yes you are right @zhisheng17 ,I ignored.", "url": "https://github.com/apache/flink/pull/13907#discussion_r539033397", "createdAt": "2020-12-09T06:03:49Z", "author": {"login": "zhuxiaoshang"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -55,6 +61,10 @@ public int getMaxRetries() {\n \t\treturn maxRetries;\n \t}\n \n+\tpublic Integer getParallelism() {\n+\t\treturn parallelism;\n+\t}\n+\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\tif (this == o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2OTQ3MQ=="}, "originalCommit": {"oid": "49181d26aa6a07bc289544ad0d55929fd2c89377"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDI5MDE4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxMzozN1rOICENVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoyOTo1OFrOICEmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzAxMw==", "bodyText": "Will return false when parallelism > 128?", "url": "https://github.com/apache/flink/pull/13907#discussion_r539037013", "createdAt": "2020-12-09T06:13:37Z", "author": {"login": "V1ncentzzZ"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -66,12 +76,13 @@ public boolean equals(Object o) {\n \t\tJdbcExecutionOptions that = (JdbcExecutionOptions) o;\n \t\treturn batchIntervalMs == that.batchIntervalMs &&\n \t\t\tbatchSize == that.batchSize &&\n-\t\t\tmaxRetries == that.maxRetries;\n+\t\t\tmaxRetries == that.maxRetries &&\n+\t\t\tparallelism == that.parallelism;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f1cf14d4d413c4c87881516215c7ffffd5be64"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzOTkzNg==", "bodyText": "Maybe the framework will check whether the parallelism > max parallelism limit.\nMoreover where do you get the 128?IIRC,128 is the limit of max keyGroup.", "url": "https://github.com/apache/flink/pull/13907#discussion_r539039936", "createdAt": "2020-12-09T06:21:29Z", "author": {"login": "zhuxiaoshang"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -66,12 +76,13 @@ public boolean equals(Object o) {\n \t\tJdbcExecutionOptions that = (JdbcExecutionOptions) o;\n \t\treturn batchIntervalMs == that.batchIntervalMs &&\n \t\t\tbatchSize == that.batchSize &&\n-\t\t\tmaxRetries == that.maxRetries;\n+\t\t\tmaxRetries == that.maxRetries &&\n+\t\t\tparallelism == that.parallelism;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzAxMw=="}, "originalCommit": {"oid": "f4f1cf14d4d413c4c87881516215c7ffffd5be64"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MjY5OA==", "bodyText": "My suggestion is that use equals() instead of == beacause of the == will return false when parallelism's value more than 128.", "url": "https://github.com/apache/flink/pull/13907#discussion_r539042698", "createdAt": "2020-12-09T06:28:19Z", "author": {"login": "V1ncentzzZ"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -66,12 +76,13 @@ public boolean equals(Object o) {\n \t\tJdbcExecutionOptions that = (JdbcExecutionOptions) o;\n \t\treturn batchIntervalMs == that.batchIntervalMs &&\n \t\t\tbatchSize == that.batchSize &&\n-\t\t\tmaxRetries == that.maxRetries;\n+\t\t\tmaxRetries == that.maxRetries &&\n+\t\t\tparallelism == that.parallelism;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzAxMw=="}, "originalCommit": {"oid": "f4f1cf14d4d413c4c87881516215c7ffffd5be64"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA0MzM0MQ==", "bodyText": "ok,I have changed it.", "url": "https://github.com/apache/flink/pull/13907#discussion_r539043341", "createdAt": "2020-12-09T06:29:58Z", "author": {"login": "zhuxiaoshang"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -66,12 +76,13 @@ public boolean equals(Object o) {\n \t\tJdbcExecutionOptions that = (JdbcExecutionOptions) o;\n \t\treturn batchIntervalMs == that.batchIntervalMs &&\n \t\t\tbatchSize == that.batchSize &&\n-\t\t\tmaxRetries == that.maxRetries;\n+\t\t\tmaxRetries == that.maxRetries &&\n+\t\t\tparallelism == that.parallelism;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzNzAxMw=="}, "originalCommit": {"oid": "f4f1cf14d4d413c4c87881516215c7ffffd5be64"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDMwMjk5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxODoyNVrOICEUQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwNjoxODoyNVrOICEUQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAzODc4Ng==", "bodyText": "@zhuxiaoshang maybe, idea will recommend to use equals() instead of ==", "url": "https://github.com/apache/flink/pull/13907#discussion_r539038786", "createdAt": "2020-12-09T06:18:25Z", "author": {"login": "zhisheng17"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -66,12 +76,13 @@ public boolean equals(Object o) {\n \t\tJdbcExecutionOptions that = (JdbcExecutionOptions) o;\n \t\treturn batchIntervalMs == that.batchIntervalMs &&\n \t\t\tbatchSize == that.batchSize &&\n-\t\t\tmaxRetries == that.maxRetries;\n+\t\t\tmaxRetries == that.maxRetries &&\n+\t\t\tparallelism == that.parallelism;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f1cf14d4d413c4c87881516215c7ffffd5be64"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NDY1NDI3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowNjowOVrOICHWTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwODowNjowOVrOICHWTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA4ODQ2Mg==", "bodyText": "It's seem this method is useless now? If no one uses it, please delete it. Otherwise, we can just treat this method as\nof(outputFormat, null)", "url": "https://github.com/apache/flink/pull/13907#discussion_r539088462", "createdAt": "2020-12-09T08:06:09Z", "author": {"login": "fsk119"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -36,6 +38,23 @@ static OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n \t\treturn () -> outputFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a20a54634b452b7a9fbc28e3a292196376602b3f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTkxMjYwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwNzo1Mzo0OFrOIDtA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTozMzoxN1rOIDwguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NDEzNg==", "bodyText": "This is a public API. Please add a new method instead of changing the existing one, otherwise, it's not API compatible.", "url": "https://github.com/apache/flink/pull/13907#discussion_r540754136", "createdAt": "2020-12-11T07:53:48Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -23,17 +23,29 @@\n import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider {\n \n \t/**\n-\t * Helper method for creating a static provider.\n+\t * Helper method for creating a static provider with a provided sink parallelism.\n \t */\n-\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n-\t\treturn () -> outputFormat;\n+\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat, Integer sinkParallelism) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ba8c4410ef2616561f46462d1000056949e8c6b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc4ODg1Nw==", "bodyText": "According to  @fsk119 's suggestion,I removed the old method because it is never used.\nIf not i can get it back.", "url": "https://github.com/apache/flink/pull/13907#discussion_r540788857", "createdAt": "2020-12-11T08:57:17Z", "author": {"login": "zhuxiaoshang"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -23,17 +23,29 @@\n import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider {\n \n \t/**\n-\t * Helper method for creating a static provider.\n+\t * Helper method for creating a static provider with a provided sink parallelism.\n \t */\n-\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n-\t\treturn () -> outputFormat;\n+\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat, Integer sinkParallelism) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NDEzNg=="}, "originalCommit": {"oid": "5ba8c4410ef2616561f46462d1000056949e8c6b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgwNDMyNA==", "bodyText": "This is a public API. We don't know whether it is used by external projects.", "url": "https://github.com/apache/flink/pull/13907#discussion_r540804324", "createdAt": "2020-12-11T09:22:16Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -23,17 +23,29 @@\n import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider {\n \n \t/**\n-\t * Helper method for creating a static provider.\n+\t * Helper method for creating a static provider with a provided sink parallelism.\n \t */\n-\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n-\t\treturn () -> outputFormat;\n+\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat, Integer sinkParallelism) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NDEzNg=="}, "originalCommit": {"oid": "5ba8c4410ef2616561f46462d1000056949e8c6b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgxMTQ0OA==", "bodyText": "ok\uff0cgot it", "url": "https://github.com/apache/flink/pull/13907#discussion_r540811448", "createdAt": "2020-12-11T09:33:17Z", "author": {"login": "zhuxiaoshang"}, "path": "flink-table/flink-table-common/src/main/java/org/apache/flink/table/connector/sink/OutputFormatProvider.java", "diffHunk": "@@ -23,17 +23,29 @@\n import org.apache.flink.table.connector.ParallelismProvider;\n import org.apache.flink.table.data.RowData;\n \n+import java.util.Optional;\n+\n /**\n  * Provider of an {@link OutputFormat} instance as a runtime implementation for {@link DynamicTableSink}.\n  */\n @PublicEvolving\n public interface OutputFormatProvider extends DynamicTableSink.SinkRuntimeProvider, ParallelismProvider {\n \n \t/**\n-\t * Helper method for creating a static provider.\n+\t * Helper method for creating a static provider with a provided sink parallelism.\n \t */\n-\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat) {\n-\t\treturn () -> outputFormat;\n+\tstatic OutputFormatProvider of(OutputFormat<RowData> outputFormat, Integer sinkParallelism) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1NDEzNg=="}, "originalCommit": {"oid": "5ba8c4410ef2616561f46462d1000056949e8c6b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NTk0NzYwOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowNDoxNlrOIDtUaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwODowNDoxNlrOIDtUaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc1OTE0Nw==", "bodyText": "I'm not sure about adding this to JdbcExecutionOptions, because JdbcExecutionOptions is an public API for JdbcSink. For JdbcSink#sink, this may looks weird because the configured parallelism doesn't work as the returned object is SinkFunction.\nAnother option is adding the parallelism to JdbcDmlOption or JdbcOption, they are both internal class.", "url": "https://github.com/apache/flink/pull/13907#discussion_r540759147", "createdAt": "2020-12-11T08:04:16Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/JdbcExecutionOptions.java", "diffHunk": "@@ -35,12 +35,18 @@\n \tprivate final long batchIntervalMs;\n \tprivate final int batchSize;\n \tprivate final int maxRetries;\n+\tprivate final Integer parallelism;\n \n-\tprivate JdbcExecutionOptions(long batchIntervalMs, int batchSize, int maxRetries) {\n+\tprivate JdbcExecutionOptions(\n+\t\t\tlong batchIntervalMs,\n+\t\t\tint batchSize,\n+\t\t\tint maxRetries,\n+\t\t\tInteger parallelism) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ba8c4410ef2616561f46462d1000056949e8c6b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4907, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}