{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNjA2MzQy", "number": 12264, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1ODo0MVrOD-O1ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjoxMToxMlrOEADwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTgxMzg2OnYy", "diffSide": "RIGHT", "path": "flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1ODo0MVrOGYNI4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo0MDo1OVrOGacYLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDI3Mg==", "bodyText": "We might be able to unify this configuration option with ClusterOptions.CLUSTER_IO_EXECUTOR_POOL_SIZE.", "url": "https://github.com/apache/flink/pull/12264#discussion_r428034272", "createdAt": "2020-05-20T13:58:41Z", "author": {"login": "tillrohrmann"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java", "diffHunk": "@@ -490,6 +490,13 @@\n \t\t\t\t+ \" size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max\"\n \t\t\t\t+ \" size to the same value.\");\n \n+\t@Documentation.ExcludeFromDocumentation(\"This option just serves as a last-ditch escape hatch.\")\n+\tpublic static final ConfigOption<Integer> NUM_IO_THREADS =\n+\t\tkey(\"taskmanager.io.threads.num\")\n+\t\t\t.intType()\n+\t\t\t.defaultValue(2)\n+\t\t\t.withDescription(\"The number of threads to use for non-critical IO operations.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Njk3Mg==", "bodyText": "hmm...maybe; the use-cases are quite different though?\nCLUSTER_IO_EXECUTOR_POOL_SIZE is currently used for the pool we use for the HA executor pool, which is probably pretty important stuff.\nMeanwhile, on the TM it is mostly about disk cleanup.\nShould these really be controlled through the same option? If a user sees a problem with slow disk cleanup and increases the pool size, should this really affect the HA side?", "url": "https://github.com/apache/flink/pull/12264#discussion_r429896972", "createdAt": "2020-05-25T11:59:36Z", "author": {"login": "zentol"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java", "diffHunk": "@@ -490,6 +490,13 @@\n \t\t\t\t+ \" size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max\"\n \t\t\t\t+ \" size to the same value.\");\n \n+\t@Documentation.ExcludeFromDocumentation(\"This option just serves as a last-ditch escape hatch.\")\n+\tpublic static final ConfigOption<Integer> NUM_IO_THREADS =\n+\t\tkey(\"taskmanager.io.threads.num\")\n+\t\t\t.intType()\n+\t\t\t.defaultValue(2)\n+\t\t\t.withDescription(\"The number of threads to use for non-critical IO operations.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDI3Mg=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4MTEwMA==", "bodyText": "The HighAvailabilityServices use the ioExecutor for I/O tasks. Concretely, they use it do dispose a completed checkpoint. In that sense it is also an I/O operation and I think they could be served by the same executor. But in order to keep the scope smaller, we don't have to do it in this PR.", "url": "https://github.com/apache/flink/pull/12264#discussion_r430381100", "createdAt": "2020-05-26T12:40:59Z", "author": {"login": "tillrohrmann"}, "path": "flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java", "diffHunk": "@@ -490,6 +490,13 @@\n \t\t\t\t+ \" size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max\"\n \t\t\t\t+ \" size to the same value.\");\n \n+\t@Documentation.ExcludeFromDocumentation(\"This option just serves as a last-ditch escape hatch.\")\n+\tpublic static final ConfigOption<Integer> NUM_IO_THREADS =\n+\t\tkey(\"taskmanager.io.threads.num\")\n+\t\t\t.intType()\n+\t\t\t.defaultValue(2)\n+\t\t\t.withDescription(\"The number of threads to use for non-critical IO operations.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDI3Mg=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg0OTkxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowNTozOVrOGYNe_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowMDowM1rOGa74bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ==", "bodyText": "Can the ioExecutor also replace the taskIOExecutor?", "url": "https://github.com/apache/flink/pull/12264#discussion_r428039935", "createdAt": "2020-05-20T14:05:39Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "diffHunk": "@@ -265,10 +265,15 @@ public static TaskManagerServices fromConfiguration(\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NDY5NQ==", "bodyText": "Technically yes, but I wouldn't know how many threads the executor should have. It is also easier to judge how many you'd need if the task and TM operations are separated.", "url": "https://github.com/apache/flink/pull/12264#discussion_r429894695", "createdAt": "2020-05-25T11:53:58Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "diffHunk": "@@ -265,10 +265,15 @@ public static TaskManagerServices fromConfiguration(\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NDQ5Mg==", "bodyText": "I think we should really unify them. taskIOExecutor is effectively the same as ioExecutor because it is used by the TaskExecutorLocalStateStoresManager for discarding local state. I think it is better to use common thread pools until we have a really good reason for separating thread pools. Creating more thread pools will also increase the required resource foot print.\nConcerning the number of threads, I would suggest to use ClusterOptions.CLUSTER_IO_EXECUTOR_POOL_SIZE which defaults to the number of available cores if it has not been specified. This will also allow users to increase the thread pool if things take too long with a single thread.", "url": "https://github.com/apache/flink/pull/12264#discussion_r430384492", "createdAt": "2020-05-26T12:46:53Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "diffHunk": "@@ -265,10 +265,15 @@ public static TaskManagerServices fromConfiguration(\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NDMzOA==", "bodyText": "Well, one reason is uncertainty.\nDo you know how many resources the state cleanup currently siphons from the RpcService executor?\nI don't disagree with your take in general, but as is the PR is pretty safe to back-port to older versions.\nI'm not so sure about this if we include the taskIOExecutor change; we don't have to look back very far for issues when we moved things away from the RPC executor (FLINK-17248).", "url": "https://github.com/apache/flink/pull/12264#discussion_r430564338", "createdAt": "2020-05-26T16:54:28Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "diffHunk": "@@ -265,10 +265,15 @@ public static TaskManagerServices fromConfiguration(\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NzI2Mw==", "bodyText": "I think it is actually a good idea to move it away from the RpcService's executor because this is the same pool which is used to run the RpcEndpoints.", "url": "https://github.com/apache/flink/pull/12264#discussion_r430897263", "createdAt": "2020-05-27T07:00:03Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "diffHunk": "@@ -265,10 +265,15 @@ public static TaskManagerServices fromConfiguration(\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg2MzA1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowODoxOVrOGYNnGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMTo1MDoyNFrOGZ-moA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MjAxMA==", "bodyText": "I guess a OneShotLatch would also work here if the test threads call the trigger on it.", "url": "https://github.com/apache/flink/pull/12264#discussion_r428042010", "createdAt": "2020-05-20T14:08:19Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "diffHunk": "@@ -100,6 +105,27 @@ public void testRegisterTaskWithInsufficientBuffers() throws Exception {\n \t\ttestRegisterTaskWithLimitedBuffers(bufferCount);\n \t}\n \n+\t@Test\n+\tpublic void testSlowIODoesNotBlockRelease() throws Exception {\n+\t\tBlockerSync sync = new BlockerSync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MzI4MA==", "bodyText": "I used a BlockerSync since it allows blocking without throwing checked exceptions.\nOneShotLatch#await throwing InterruptedException is a bit annoying. Maybe we should change that; for testing purposes it seems irrelevant?", "url": "https://github.com/apache/flink/pull/12264#discussion_r429893280", "createdAt": "2020-05-25T11:50:24Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "diffHunk": "@@ -100,6 +105,27 @@ public void testRegisterTaskWithInsufficientBuffers() throws Exception {\n \t\ttestRegisterTaskWithLimitedBuffers(bufferCount);\n \t}\n \n+\t@Test\n+\tpublic void testSlowIODoesNotBlockRelease() throws Exception {\n+\t\tBlockerSync sync = new BlockerSync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MjAxMA=="}, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg5MzkyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNDozN1rOGYN6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNDozN1rOGYN6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NzAzNQ==", "bodyText": "I would suggest to also shut this executor service down at the end of the test. It might be necessary to unblock the release operation for this.", "url": "https://github.com/apache/flink/pull/12264#discussion_r428047035", "createdAt": "2020-05-20T14:14:37Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java", "diffHunk": "@@ -280,7 +273,65 @@ public void testClusterPartitionRelease() throws Exception {\n \t\t);\n \t}\n \n-\tprivate <C> void testPartitionRelease(PartitionTrackerSetup<C> partitionTrackerSetup, TestAction<C> testAction) throws Exception {\n+\t@Test\n+\tpublic void testBlockingLocalPartitionReleaseDoesNotBlockTaskExecutor() throws Exception {\n+\t\tBlockerSync sync = new BlockerSync();\n+\t\tResultPartitionManager blockingResultPartitionManager = new ResultPartitionManager() {\n+\t\t\t@Override\n+\t\t\tpublic void releasePartition(ResultPartitionID partitionId, Throwable cause) {\n+\t\t\t\tsync.blockNonInterruptible();\n+\t\t\t\tsuper.releasePartition(partitionId, cause);\n+\t\t\t}\n+\t\t};\n+\n+\t\tNettyShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder()\n+\t\t\t.setResultPartitionManager(blockingResultPartitionManager)\n+\t\t\t.setIoExecutor(java.util.concurrent.Executors.newFixedThreadPool(1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc3NzE5OnYy", "diffSide": "RIGHT", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1MToxNFrOGacwAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1MToxNFrOGacwAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NzIwMA==", "bodyText": "I would suggest to use ExecutorUtils.gracefulShutdown.", "url": "https://github.com/apache/flink/pull/12264#discussion_r430387200", "createdAt": "2020-05-26T12:51:14Z", "author": {"login": "tillrohrmann"}, "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.testutils.executor;\n+\n+import org.junit.rules.ExternalResource;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Resource which starts an {@link ExecutorService} for testing purposes.\n+ */\n+public class TestExecutorServiceResource extends ExternalResource {\n+\n+\tprivate final Supplier<ExecutorService> serviceFactory;\n+\n+\tprivate ExecutorService executorService;\n+\n+\tpublic TestExecutorServiceResource(Supplier<ExecutorService> serviceFactory) {\n+\t\tthis.serviceFactory = serviceFactory;\n+\t}\n+\n+\t@Override\n+\tprotected void before() throws Throwable {\n+\t\texecutorService = serviceFactory.get();\n+\t}\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\t@Override\n+\tprotected void after() {\n+\t\tif (executorService != null) {\n+\t\t\texecutorService.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cc207a54d0adfd24c548c544f34a9ca13d145a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc4MjE2OnYy", "diffSide": "RIGHT", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1MjozN1rOGaczTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowMDozMlrOGa75VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODA0Ng==", "bodyText": "This class seems to duplicate TestingScheduledExecutor.", "url": "https://github.com/apache/flink/pull/12264#discussion_r430388046", "createdAt": "2020-05-26T12:52:37Z", "author": {"login": "tillrohrmann"}, "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.testutils.executor;\n+\n+import org.junit.rules.ExternalResource;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Resource which starts an {@link ExecutorService} for testing purposes.\n+ */\n+public class TestExecutorServiceResource extends ExternalResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5cc207a54d0adfd24c548c544f34a9ca13d145a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0ODk0NA==", "bodyText": "I wouldn't say that it is a duplicate since one works against the java ExecutorService while the other against the flink-runtime ScheduledExecutor.\nThey are ultimately similar yes, but this one is usable without depending on flink-runtime (in particular, without depending on the flink-runtime test-jar).", "url": "https://github.com/apache/flink/pull/12264#discussion_r430548944", "createdAt": "2020-05-26T16:32:21Z", "author": {"login": "zentol"}, "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.testutils.executor;\n+\n+import org.junit.rules.ExternalResource;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Resource which starts an {@link ExecutorService} for testing purposes.\n+ */\n+public class TestExecutorServiceResource extends ExternalResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODA0Ng=="}, "originalCommit": {"oid": "f5cc207a54d0adfd24c548c544f34a9ca13d145a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NzQ5Mw==", "bodyText": "Can we unify them and get rid of one of them?", "url": "https://github.com/apache/flink/pull/12264#discussion_r430897493", "createdAt": "2020-05-27T07:00:32Z", "author": {"login": "tillrohrmann"}, "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.testutils.executor;\n+\n+import org.junit.rules.ExternalResource;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Resource which starts an {@link ExecutorService} for testing purposes.\n+ */\n+public class TestExecutorServiceResource extends ExternalResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODA0Ng=="}, "originalCommit": {"oid": "f5cc207a54d0adfd24c548c544f34a9ca13d145a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDk1NDc3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowNjo0NlrOGbGLyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowNjo0NlrOGbGLyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2NjA1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration) * 4;\n          \n          \n            \n            \t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration);\n          \n      \n    \n    \n  \n\nI will update getPoolSize to return the new default value of 4 * cores as part of changing the type of the thread pool on the JM side.", "url": "https://github.com/apache/flink/pull/12264#discussion_r431066056", "createdAt": "2020-05-27T12:06:46Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java", "diffHunk": "@@ -270,7 +271,8 @@ public static TaskManagerServicesConfiguration fromConfiguration(\n \n \t\tfinal String[] alwaysParentFirstLoaderPatterns = CoreOptions.getParentFirstLoaderPatterns(configuration);\n \n-\t\tfinal int numIoThreads = configuration.get(TaskManagerOptions.NUM_IO_THREADS);\n+\t\t// multiply core-count to be on the safer side, since we used a pool with size=64 in the past\n+\t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration) * 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDk1ODk4OnYy", "diffSide": "RIGHT", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowODowMlrOGbGObQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjowODowMlrOGbGObQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2NjczMw==", "bodyText": "The name executorService could have been kept.", "url": "https://github.com/apache/flink/pull/12264#discussion_r431066733", "createdAt": "2020-05-27T12:08:02Z", "author": {"login": "tillrohrmann"}, "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorResource.java", "diffHunk": "@@ -19,35 +19,37 @@\n \n import org.junit.rules.ExternalResource;\n \n+import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n import java.util.function.Supplier;\n \n /**\n- * Resource which starts an {@link ExecutorService} for testing purposes.\n+ * Resource which starts/stops an {@link ExecutorService} for testing purposes.\n  */\n-public class TestExecutorServiceResource extends ExternalResource {\n+public class TestExecutorResource extends ExternalResource {\n \n \tprivate final Supplier<ExecutorService> serviceFactory;\n \n-\tprivate ExecutorService executorService;\n+\tprivate ExecutorService executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDk2OTQ3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjoxMToxMlrOGbGU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo1MDo1OFrOGbHwvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ==", "bodyText": "This could be moved into the fromConfiguration method. Given that the TaskManagerServices is responsible for managing the created ExecutorService, I think it is fine to move the creation into the fromConfiguration method.", "url": "https://github.com/apache/flink/pull/12264#discussion_r431068395", "createdAt": "2020-05-27T12:11:12Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -366,11 +367,15 @@ public static TaskExecutor startTaskManager(\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n+\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n+\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3MTIzMA==", "bodyText": "initially that was the plan, but the TaskExecutorLocalStateStoresManagerTest passes in a Executors.directExecutor() into TaskManagerServices.fromConfiguration.", "url": "https://github.com/apache/flink/pull/12264#discussion_r431071230", "createdAt": "2020-05-27T12:16:13Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -366,11 +367,15 @@ public static TaskExecutor startTaskManager(\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n+\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n+\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3NDYzMQ==", "bodyText": "although this doesn't seem related to the correctness of the test.", "url": "https://github.com/apache/flink/pull/12264#discussion_r431074631", "createdAt": "2020-05-27T12:22:06Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -366,11 +367,15 @@ public static TaskExecutor startTaskManager(\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n+\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n+\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MDkxNA==", "bodyText": "Jup. It is also a bit odd that TaskExecutorLocalStateStoresManagerTest.testCreationFromConfig needs to create a TaskManagerServices instance in order to test the TaskExecutorLocalStateStoresManager. I think one could test the same if one factored the creation of the TaskExecutorLocalStateStoresManager out into a separate method which is called by TaskManagerServices.fromConfiguration().", "url": "https://github.com/apache/flink/pull/12264#discussion_r431090914", "createdAt": "2020-05-27T12:49:22Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -366,11 +367,15 @@ public static TaskExecutor startTaskManager(\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n+\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n+\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MTkwMA==", "bodyText": "But we can also keep it as is. The important aspect is that everyone knows that fromConfiguration takes ownership over the passed ioExecutor.", "url": "https://github.com/apache/flink/pull/12264#discussion_r431091900", "createdAt": "2020-05-27T12:50:58Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -366,11 +367,15 @@ public static TaskExecutor startTaskManager(\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n+\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n+\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, "originalCommit": {"oid": "084e28079e239e9485c36f843348323c9a81ad6a"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4531, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}