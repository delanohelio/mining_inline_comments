{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzY1NzE4", "number": 11025, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNzozNFrODdU8iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzozMDo1NlrODdVM_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDc4NDczOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNzozNFrOFl3VDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzoxNzozNFrOFl3VDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0ODE0Mg==", "bodyText": "I'd suggest to create a separate test for this part.", "url": "https://github.com/apache/flink/pull/11025#discussion_r375248142", "createdAt": "2020-02-05T13:17:34Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java", "diffHunk": "@@ -264,6 +265,30 @@ public void testMemoryReservation() throws MemoryReservationException {\n \t\tmemoryManager.releaseAllMemory(owner, MemoryType.OFF_HEAP);\n \t}\n \n+\t@Test\n+\tpublic void testMemoryReleaseMoreThanReserved() throws MemoryReservationException {\n+\t\tObject owner = new Object();\n+\t\tObject owner2 = new Object();\n+\t\tlong totalHeapMemorySize = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\t// to prevent memory size exceeding the maximum, reserve some memory from another owner.\n+\t\tmemoryManager.reserveMemory(owner2, MemoryType.HEAP, PAGE_SIZE);\n+\n+\t\t// test reserve once and release multiple times\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tlong heapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\n+\t\t// test release more than the left reserved size\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE / 2);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\theapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\t\tmemoryManager.releaseAllMemory(owner2, MemoryType.HEAP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDgyNjg0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzozMDo1NlrOFl3ujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzozMDo1NlrOFl3ujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1NDY3MQ==", "bodyText": "I'd suggest to change this block into:\npublic void releaseMemory(Object owner, MemoryType memoryType, long size) {\n\tcheckMemoryReservationPreconditions(owner, memoryType, size);\n\tif (size == 0L) {\n\t\treturn;\n\t}\n\n\treservedMemory.compute(owner, (o, reservations) -> {\n\t\tif (reservations != null) {\n\t\t\treservations.compute(\n\t\t\t\tmemoryType,\n\t\t\t\t(mt, currentlyReserved) -> {\n\t\t\t\t\tlong newReservedMemory = 0;\n\t\t\t\t\tif (currentlyReserved != null) {\n\t\t\t\t\t\tif (currentlyReserved < size) {\n\t\t\t\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\t\t\"Trying to release more memory {} than it was reserved {} so far for the owner {}\",\n\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\tcurrentlyReserved,\n\t\t\t\t\t\t\t\towner);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewReservedMemory = releaseAndCalculateReservedMemory(size, memoryType, currentlyReserved);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn newReservedMemory == 0 ? null : newReservedMemory;\n\t\t\t\t});\n\t\t}\n\t\t//noinspection ReturnOfNull\n\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n\t});\n}\n\nprivate long releaseAndCalculateReservedMemory(long memoryToFree, MemoryType memoryType, long currentlyReserved) {\n\tfinal long effectiveMemoryToRelease = Math.min(currentlyReserved, memoryToFree);\n\tbudgetByType.releaseBudgetForKey(memoryType, effectiveMemoryToRelease);\n\n\treturn currentlyReserved - effectiveMemoryToRelease;\n}", "url": "https://github.com/apache/flink/pull/11025#discussion_r375254671", "createdAt": "2020-02-05T13:30:56Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java", "diffHunk": "@@ -501,17 +503,21 @@ public void releaseMemory(Object owner, MemoryType memoryType, long size) {\n \t\t\t\t\t\t\t\tsize,\n \t\t\t\t\t\t\t\tcurrentlyReserved == null ? 0 : currentlyReserved,\n \t\t\t\t\t\t\t\towner);\n+\t\t\t\t\t\t\tif (currentlyReserved != null) {\n+\t\t\t\t\t\t\t\treleasedSize.set(currentlyReserved);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t//noinspection ReturnOfNull\n \t\t\t\t\t\t\treturn null;\n \t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\treleasedSize.set(size);\n \t\t\t\t\t\t\treturn currentlyReserved - size;\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t\t}\n \t\t\t//noinspection ReturnOfNull\n \t\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n \t\t});\n-\t\tbudgetByType.releaseBudgetForKey(memoryType, size);\n+\t\tbudgetByType.releaseBudgetForKey(memoryType, releasedSize.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1031, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}