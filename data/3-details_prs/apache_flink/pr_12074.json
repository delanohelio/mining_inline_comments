{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1OTE3Mjg5", "number": 12074, "title": "[FLINK-17606][table] Introduce DataGenerator connector in table", "bodyText": "What is the purpose of the change\nIntroduce built-in connectors for better startup, test, production-debug, and etc...\ndatagen source:\n\neasy startup/test for streaming job\nperformance testing\n\nCREATE TABLE user (\n    id BIGINT,\n    age INT,\n    description STRING\n) WITH (\n    'connector' = 'datagen',\n    'rows-per-second'='100',\n\n    'fields.id.kind' = 'sequence',\n    'fields.id.start' = '1',\n\n    'fields.age.kind' = 'random',\n    'fields.age.min' = '0',\n    'fields.age.max' = '100',\n\n    'fields.description.kind' = 'random',\n    'fields.description.length' = '100'\n)\n-- Default is random generator.\n\nBrief change log\nIntroduce:\n\nDataGeneratorSource\nDataGenTableSourceFactory\n\nVerifying this change\n\nDataGeneratorSourceTest\nDataGenTableSourceFactoryTest\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector:no\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes)\nIf yes, how is the feature documented? JavaDocs", "createdAt": "2020-05-11T07:22:04Z", "url": "https://github.com/apache/flink/pull/12074", "merged": true, "mergeCommit": {"oid": "91557c83447444ecfbeba3e4c58297908940834a"}, "closed": true, "closedAt": "2020-05-15T05:47:48Z", "author": {"login": "JingsongLi"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchEFQugFqTQxMTQyNDQyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchYlhGgBqjMzMzkwOTAzNzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDI0NDIz", "url": "https://github.com/apache/flink/pull/12074#pullrequestreview-411424423", "createdAt": "2020-05-14T02:30:56Z", "commit": {"oid": "0fb435bee16969f02c3ebee46beee75c2b8c074a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjozMDo1N1rOGVJ9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjozMDo1N1rOGVJ9pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzNjUxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A data generator source that abstract data generator. It can used to easy startup/test\n          \n          \n            \n             * A data generator source that abstract data generator. It can be used to easy startup/test", "url": "https://github.com/apache/flink/pull/12074#discussion_r424836519", "createdAt": "2020-05-14T02:30:57Z", "author": {"login": "zjuwangg"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/datagen/DataGeneratorSource.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source.datagen;\n+\n+import org.apache.flink.annotation.Experimental;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.streaming.api.checkpoint.CheckpointedFunction;\n+import org.apache.flink.streaming.api.functions.source.RichParallelSourceFunction;\n+\n+/**\n+ * A data generator source that abstract data generator. It can used to easy startup/test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb435bee16969f02c3ebee46beee75c2b8c074a"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDMwNzY4", "url": "https://github.com/apache/flink/pull/12074#pullrequestreview-411430768", "createdAt": "2020-05-14T02:53:07Z", "commit": {"oid": "0fb435bee16969f02c3ebee46beee75c2b8c074a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo1MzowN1rOGVKS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo1MzowN1rOGVKS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MTk2Nw==", "bodyText": "Seems strange indent?", "url": "https://github.com/apache/flink/pull/12074#discussion_r424841967", "createdAt": "2020-05-14T02:53:07Z", "author": {"login": "zjuwangg"}, "path": "flink-table/flink-table-api-java-bridge/src/main/java/org/apache/flink/table/sources/datagen/DataGenTableSourceFactory.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.sources.datagen;\n+\n+import org.apache.flink.annotation.Experimental;\n+import org.apache.flink.configuration.ConfigOption;\n+import org.apache.flink.configuration.ConfigOptions.OptionBuilder;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.ReadableConfig;\n+import org.apache.flink.streaming.api.functions.source.datagen.DataGenerator;\n+import org.apache.flink.streaming.api.functions.source.datagen.RandomGenerator;\n+import org.apache.flink.streaming.api.functions.source.datagen.SequenceGenerator;\n+import org.apache.flink.table.api.TableSchema;\n+import org.apache.flink.table.api.ValidationException;\n+import org.apache.flink.table.connector.source.DynamicTableSource;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.factories.DynamicTableSourceFactory;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.utils.TableSchemaUtils;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.apache.flink.configuration.ConfigOptions.key;\n+\n+/**\n+ * Factory for creating configured instances of {@link DataGenTableSource} in a stream environment.\n+ */\n+@Experimental\n+public class DataGenTableSourceFactory implements DynamicTableSourceFactory {\n+\n+\tpublic static final String IDENTIFIER = \"datagen\";\n+\n+\tpublic static final ConfigOption<Long> ROWS_PER_SECOND =\n+\t\t\tkey(\"rows-per-second\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb435bee16969f02c3ebee46beee75c2b8c074a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDM2NTY1", "url": "https://github.com/apache/flink/pull/12074#pullrequestreview-411436565", "createdAt": "2020-05-14T03:13:29Z", "commit": {"oid": "0fb435bee16969f02c3ebee46beee75c2b8c074a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoxMzoyOVrOGVKl2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMzoxMzoyOVrOGVKl2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0NjgxMA==", "bodyText": "Will there be  a performance problem to collect all elements in advance?\nFor example, the parallelism of source is one and the totalNoOfElements is a big number", "url": "https://github.com/apache/flink/pull/12074#discussion_r424846810", "createdAt": "2020-05-14T03:13:29Z", "author": {"login": "zjuwangg"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/functions/source/datagen/SequenceGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.functions.source.datagen;\n+\n+import org.apache.flink.annotation.Experimental;\n+import org.apache.flink.api.common.functions.RuntimeContext;\n+import org.apache.flink.api.common.state.ListState;\n+import org.apache.flink.api.common.state.ListStateDescriptor;\n+import org.apache.flink.api.common.typeutils.base.LongSerializer;\n+import org.apache.flink.runtime.state.FunctionInitializationContext;\n+import org.apache.flink.runtime.state.FunctionSnapshotContext;\n+import org.apache.flink.util.Preconditions;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+\n+/**\n+ * A stateful, re-scalable {@link DataGenerator} that emits each number from a given interval\n+ * exactly once, possibly in parallel.\n+ */\n+@Experimental\n+public abstract class SequenceGenerator<T> implements DataGenerator<T> {\n+\n+\tprivate final long start;\n+\tprivate final long end;\n+\n+\tprivate transient ListState<Long> checkpointedState;\n+\tprotected transient Deque<Long> valuesToEmit;\n+\n+\t/**\n+\t * Creates a DataGenerator that emits all numbers from the given interval exactly once.\n+\t *\n+\t * @param start Start of the range of numbers to emit.\n+\t * @param end End of the range of numbers to emit.\n+\t */\n+\tpublic SequenceGenerator(long start, long end) {\n+\t\tthis.start = start;\n+\t\tthis.end = end;\n+\t}\n+\n+\t@Override\n+\tpublic void open(\n+\t\t\tString name,\n+\t\t\tFunctionInitializationContext context,\n+\t\t\tRuntimeContext runtimeContext) throws Exception {\n+\t\tPreconditions.checkState(this.checkpointedState == null,\n+\t\t\t\t\"The \" + getClass().getSimpleName() + \" has already been initialized.\");\n+\n+\t\tthis.checkpointedState = context.getOperatorStateStore().getListState(\n+\t\t\t\tnew ListStateDescriptor<>(\n+\t\t\t\t\t\tname + \"-sequence-state\",\n+\t\t\t\t\t\tLongSerializer.INSTANCE));\n+\t\tthis.valuesToEmit = new ArrayDeque<>();\n+\t\tif (context.isRestored()) {\n+\t\t\t// upon restoring\n+\n+\t\t\tfor (Long v : this.checkpointedState.get()) {\n+\t\t\t\tthis.valuesToEmit.add(v);\n+\t\t\t}\n+\t\t} else {\n+\t\t\t// the first time the job is executed\n+\t\t\tfinal int stepSize = runtimeContext.getNumberOfParallelSubtasks();\n+\t\t\tfinal int taskIdx = runtimeContext.getIndexOfThisSubtask();\n+\t\t\tfinal long congruence = start + taskIdx;\n+\n+\t\t\tlong totalNoOfElements = Math.abs(end - start + 1);\n+\t\t\tfinal int baseSize = safeDivide(totalNoOfElements, stepSize);\n+\t\t\tfinal int toCollect = (totalNoOfElements % stepSize > taskIdx) ? baseSize + 1 : baseSize;\n+\n+\t\t\tfor (long collected = 0; collected < toCollect; collected++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb435bee16969f02c3ebee46beee75c2b8c074a"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "committedDate": "2020-05-15T02:23:56Z", "message": "[FLINK-17606][table] Introduce DataGenerator connector in table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62f441198c518458511ce8b6b013e878c3e9f156", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/62f441198c518458511ce8b6b013e878c3e9f156", "committedDate": "2020-05-14T06:15:25Z", "message": "Fix comments"}, "afterCommit": {"oid": "ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "author": {"user": {"login": "JingsongLi", "name": "Jingsong Lee"}}, "url": "https://github.com/apache/flink/commit/ef7b6e2f25f330eb10dfa0d39f81daba85cddb58", "committedDate": "2020-05-15T02:23:56Z", "message": "[FLINK-17606][table] Introduce DataGenerator connector in table"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4269, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}