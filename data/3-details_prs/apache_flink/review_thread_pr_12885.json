{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjIwNTYz", "number": 12885, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzowMTo0NFrOENzraw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzowMTo0NFrOENzraw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTEzNjQzOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkITCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzowMTo0NFrOGwngYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzowMTo0NFrOGwngYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYzMjA5OQ==", "bodyText": "Use DDL for IT case.", "url": "https://github.com/apache/flink/pull/12885#discussion_r453632099", "createdAt": "2020-07-13T13:01:44Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-elasticsearch6/src/test/java/org/apache/flink/streaming/connectors/elasticsearch/table/Elasticsearch6DynamicSinkITCase.java", "diffHunk": "@@ -247,6 +247,45 @@ public void testWritingDocumentsNoPrimaryKey() throws Exception {\n \t\tassertThat(result, equalTo(expectedMap));\n \t}\n \n+\t@Test\n+\tpublic void testWritingDocumentsWithDynamicIndex() throws Exception {\n+\t\tTableSchema schema = TableSchema.builder()\n+\t\t\t.field(\"a\", DataTypes.BIGINT().notNull())\n+\t\t\t.field(\"b\", DataTypes.TIMESTAMP().notNull())\n+\t\t\t.primaryKey(\"a\")\n+\t\t\t.build();\n+\t\tGenericRowData rowData = GenericRowData.of(\n+\t\t\t1L,\n+\t\t\tTimestampData.fromLocalDateTime(LocalDateTime.parse(\"2012-12-12T12:12:12\")));\n+\n+\t\tString index = \"dynamic-index-{b|yyyy-MM-dd}\";\n+\t\tString myType = \"MyType\";\n+\t\tElasticsearch6DynamicSinkFactory sinkFactory = new Elasticsearch6DynamicSinkFactory();\n+\n+\t\tSinkFunctionProvider sinkRuntimeProvider = (SinkFunctionProvider) sinkFactory.createDynamicTableSink(\n+\t\t\tcontext()\n+\t\t\t\t.withSchema(schema)\n+\t\t\t\t.withOption(ElasticsearchOptions.INDEX_OPTION.key(), index)\n+\t\t\t\t.withOption(ElasticsearchOptions.DOCUMENT_TYPE_OPTION.key(), myType)\n+\t\t\t\t.withOption(ElasticsearchOptions.HOSTS_OPTION.key(), \"http://127.0.0.1:9200\")\n+\t\t\t\t.withOption(ElasticsearchOptions.FLUSH_ON_CHECKPOINT_OPTION.key(), \"false\")\n+\t\t\t\t.build()\n+\t\t).getSinkRuntimeProvider(new MockContext());\n+\n+\t\tSinkFunction<RowData> sinkFunction = sinkRuntimeProvider.createSinkFunction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b910e7be07e4dad715382de2ef09e5715c7cb7f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4194, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}