{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjQ1OTg0", "number": 11971, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyMTowMFrOD60x6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1MzoxNFrOD605xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA4NzQ2OnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyMTowMVrOGS31xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyMTowMVrOGS31xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MjQzOA==", "bodyText": "\u201d\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u201c \u8fd9\u53e5\u8bdd\u8bfb\u8d77\u6765\u4f18\u70b9\u62d7\u53e3\uff0c\u201d\u4ee5\u4fbf\u4e8e\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u5165\u95e8\u201c \u6216\u8005\u5176\u4ed6\u7ffb\u8bd1\u662f\u5426\u4f1a\u66f4\u597d\u4e00\u70b9\u5462", "url": "https://github.com/apache/flink/pull/11971#discussion_r422442438", "createdAt": "2020-05-09T02:21:01Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA4ODE5OnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyMjoyMVrOGS32KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyMjoyMVrOGS32KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MjUzNw==", "bodyText": "\u7b2c 5 \u884c\u7684 \u201dnav-title:\u201c \u540e\u9762\u7684\u6807\u9898\u4e5f\u9700\u8981\u7ffb\u8bd1\u3002\n\u7ffb\u8bd1\u4e4b\u540e\uff0c\u53ef\u4ee5\u5728\u672c\u5730 flink \u76ee\u5f55\u6267\u884c \"sh docs/build.sh -p\" \u7136\u540e\u6253\u5f00 localhost:4000 \u68c0\u67e5\u7ffb\u8bd1\u7684\u6548\u679c", "url": "https://github.com/apache/flink/pull/11971#discussion_r422442537", "createdAt": "2020-05-09T02:22:21Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5MTQxOnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyNjo0OFrOGS33zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjoyNjo0OFrOGS33zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0Mjk1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array\n          \n          \n            \n            - \u57fa\u672c\u7c7b\u578b\uff0c\u5373 String\u3001Long\u3001Integer\u3001Boolean\u3001Array", "url": "https://github.com/apache/flink/pull/11971#discussion_r422442956", "createdAt": "2020-05-09T02:26:48Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## What can be Streamed?\n+## \u4ec0\u4e48\u80fd\u88ab\u8f6c\u5316\u6210\u6d41\uff1f\n \n-Flink's DataStream APIs for Java and Scala will let you stream anything they can serialize. Flink's\n-own serializer is used for\n+Flink \u7684 Java \u548c Scala DataStream API \u53ef\u4ee5\u5c06\u4efb\u4f55\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u6d41\u3002Flink  \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u5668\u6709\n \n-- basic types, i.e., String, Long, Integer, Boolean, Array\n-- composite types: Tuples, POJOs, and Scala case classes\n+- \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5NDc0OnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozMTo1N1rOGS35mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNjowMjowMVrOGS4vbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzQxNg==", "bodyText": "\u201d\u800c\u4e14 Flink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u5176\u4ed6\u7c7b\u578b\u201c \u8fd9\u91cc\u662f\u8bf4\u4e0d\u5c5e\u4e8e\u4e0a\u9762\u7684\u7c7b\u578b\uff0cFlink \u4f1a\u4f7f\u7528 Kryo \u8fdb\u884c\u5e8f\u5217\u5316\uff0c\u8fd9\u91cc\u80fd\u591f\u6709\u4e00\u4e2a\u66f4\u597d\u7684\u7ffb\u8bd1\u5417\uff1f", "url": "https://github.com/apache/flink/pull/11971#discussion_r422443416", "createdAt": "2020-05-09T02:31:57Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## What can be Streamed?\n+## \u4ec0\u4e48\u80fd\u88ab\u8f6c\u5316\u6210\u6d41\uff1f\n \n-Flink's DataStream APIs for Java and Scala will let you stream anything they can serialize. Flink's\n-own serializer is used for\n+Flink \u7684 Java \u548c Scala DataStream API \u53ef\u4ee5\u5c06\u4efb\u4f55\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u6d41\u3002Flink  \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u5668\u6709\n \n-- basic types, i.e., String, Long, Integer, Boolean, Array\n-- composite types: Tuples, POJOs, and Scala case classes\n+- \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array\n+- \u590d\u5408\u7c7b\u578b\uff1aTuples\u3001POJOs \u548c Scala case classes\n \n-and Flink falls back to Kryo for other types. It is also possible to use other serializers with\n-Flink. Avro, in particular, is well supported.\n+\u800c\u4e14 Flink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u5176\u4ed6\u7c7b\u578b\u3002\u4e5f\u53ef\u4ee5\u5c06\u5176\u4ed6\u5e8f\u5217\u5316\u5668\u548c Flink \u4e00\u8d77\u4f7f\u7528\u3002\u7279\u522b\u662f\u6709\u826f\u597d\u652f\u6301\u7684 Avro\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0ODcyOQ==", "bodyText": "\u201c\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\uff0cFlink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u3002\u201d\u662f\u5426\u5408\u9002\u5462\uff1f", "url": "https://github.com/apache/flink/pull/11971#discussion_r422448729", "createdAt": "2020-05-09T03:44:11Z", "author": {"login": "XBaith"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## What can be Streamed?\n+## \u4ec0\u4e48\u80fd\u88ab\u8f6c\u5316\u6210\u6d41\uff1f\n \n-Flink's DataStream APIs for Java and Scala will let you stream anything they can serialize. Flink's\n-own serializer is used for\n+Flink \u7684 Java \u548c Scala DataStream API \u53ef\u4ee5\u5c06\u4efb\u4f55\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u6d41\u3002Flink  \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u5668\u6709\n \n-- basic types, i.e., String, Long, Integer, Boolean, Array\n-- composite types: Tuples, POJOs, and Scala case classes\n+- \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array\n+- \u590d\u5408\u7c7b\u578b\uff1aTuples\u3001POJOs \u548c Scala case classes\n \n-and Flink falls back to Kryo for other types. It is also possible to use other serializers with\n-Flink. Avro, in particular, is well supported.\n+\u800c\u4e14 Flink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u5176\u4ed6\u7c7b\u578b\u3002\u4e5f\u53ef\u4ee5\u5c06\u5176\u4ed6\u5e8f\u5217\u5316\u5668\u548c Flink \u4e00\u8d77\u4f7f\u7528\u3002\u7279\u522b\u662f\u6709\u826f\u597d\u652f\u6301\u7684 Avro\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzQxNg=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTE0Mw==", "bodyText": "\"\u5bf9\u4e8e\u5176\u4ed6\u7c7b\u578b\uff0cFlink \u4f1a\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u201c \u4f60\u89c9\u5f97\u600e\u4e48\u6837\uff1f", "url": "https://github.com/apache/flink/pull/11971#discussion_r422451143", "createdAt": "2020-05-09T04:20:37Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## What can be Streamed?\n+## \u4ec0\u4e48\u80fd\u88ab\u8f6c\u5316\u6210\u6d41\uff1f\n \n-Flink's DataStream APIs for Java and Scala will let you stream anything they can serialize. Flink's\n-own serializer is used for\n+Flink \u7684 Java \u548c Scala DataStream API \u53ef\u4ee5\u5c06\u4efb\u4f55\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u6d41\u3002Flink  \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u5668\u6709\n \n-- basic types, i.e., String, Long, Integer, Boolean, Array\n-- composite types: Tuples, POJOs, and Scala case classes\n+- \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array\n+- \u590d\u5408\u7c7b\u578b\uff1aTuples\u3001POJOs \u548c Scala case classes\n \n-and Flink falls back to Kryo for other types. It is also possible to use other serializers with\n-Flink. Avro, in particular, is well supported.\n+\u800c\u4e14 Flink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u5176\u4ed6\u7c7b\u578b\u3002\u4e5f\u53ef\u4ee5\u5c06\u5176\u4ed6\u5e8f\u5217\u5316\u5668\u548c Flink \u4e00\u8d77\u4f7f\u7528\u3002\u7279\u522b\u662f\u6709\u826f\u597d\u652f\u6301\u7684 Avro\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzQxNg=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NjQ5OQ==", "bodyText": "\u8fd9\u91cc\u6211\u5efa\u8bae\u7528 \u201d\u4f1a\u4ea4\u7ed9\u201c \u800c\u4e0d\u662f \u201d\u53ef\u4ee5\u4ea4\u7ed9\u201c \u662f\u56e0\u4e3a\uff0c\u4ece\u8bed\u4e49\u4e0a\u6765\u8bf4\uff0c\u201d\u53ef\u4ee5\u4ea4\u7ed9\u201c\uff0c\u90a3\u4e5f\u53ef\u4ee5 \u201d\u4e0d\u201c \u4ea4\u7ed9\uff0c\u662f\u4e00\u4e2a\u53ef\u9009\u9879\u3002\u4f46\u662f\u8fd9\u91cc\u7684\u610f\u601d\u4e0d\u662f\u4e00\u4e2a\u53ef\u9009\u9879\uff0c\u800c\u662f\u8bf4\uff0c\u4f1a\u76f4\u63a5\u4f7f\u7528 Kryo \u8fdb\u884c\u5e8f\u5217\u5316\u3002", "url": "https://github.com/apache/flink/pull/11971#discussion_r422456499", "createdAt": "2020-05-09T05:51:54Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## What can be Streamed?\n+## \u4ec0\u4e48\u80fd\u88ab\u8f6c\u5316\u6210\u6d41\uff1f\n \n-Flink's DataStream APIs for Java and Scala will let you stream anything they can serialize. Flink's\n-own serializer is used for\n+Flink \u7684 Java \u548c Scala DataStream API \u53ef\u4ee5\u5c06\u4efb\u4f55\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u6d41\u3002Flink  \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u5668\u6709\n \n-- basic types, i.e., String, Long, Integer, Boolean, Array\n-- composite types: Tuples, POJOs, and Scala case classes\n+- \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array\n+- \u590d\u5408\u7c7b\u578b\uff1aTuples\u3001POJOs \u548c Scala case classes\n \n-and Flink falls back to Kryo for other types. It is also possible to use other serializers with\n-Flink. Avro, in particular, is well supported.\n+\u800c\u4e14 Flink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u5176\u4ed6\u7c7b\u578b\u3002\u4e5f\u53ef\u4ee5\u5c06\u5176\u4ed6\u5e8f\u5217\u5316\u5668\u548c Flink \u4e00\u8d77\u4f7f\u7528\u3002\u7279\u522b\u662f\u6709\u826f\u597d\u652f\u6301\u7684 Avro\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzQxNg=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NzE5OA==", "bodyText": "\u597d\u7684\uff0c\u6211\u9a6c\u4e0a\u4fee\u6539", "url": "https://github.com/apache/flink/pull/11971#discussion_r422457198", "createdAt": "2020-05-09T06:02:01Z", "author": {"login": "XBaith"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -24,30 +24,27 @@ specific language governing permissions and limitations\n under the License.\n -->\n \n-The focus of this training is to broadly cover the DataStream API well enough that you will be able\n-to get started writing streaming applications.\n+\u8be5\u7ec3\u4e60\u7684\u91cd\u70b9\u662f\u5145\u5206\u5168\u9762\u5730\u4e86\u89e3 DataStream API\uff0c\u4ee5\u4fbf\u4e8e\u5165\u95e8\u7f16\u5199\u6d41\u5f0f\u5e94\u7528\u3002\n \n * This will be replaced by the TOC\n {:toc}\n \n-## What can be Streamed?\n+## \u4ec0\u4e48\u80fd\u88ab\u8f6c\u5316\u6210\u6d41\uff1f\n \n-Flink's DataStream APIs for Java and Scala will let you stream anything they can serialize. Flink's\n-own serializer is used for\n+Flink \u7684 Java \u548c Scala DataStream API \u53ef\u4ee5\u5c06\u4efb\u4f55\u53ef\u5e8f\u5217\u5316\u7684\u5bf9\u8c61\u8f6c\u5316\u4e3a\u6d41\u3002Flink  \u81ea\u5e26\u7684\u5e8f\u5217\u5316\u5668\u6709\n \n-- basic types, i.e., String, Long, Integer, Boolean, Array\n-- composite types: Tuples, POJOs, and Scala case classes\n+- \u57fa\u672c\u7c7b\u578b\uff0c\u5373String\u3001Long\u3001Integer\u3001Boolean\u3001Array\n+- \u590d\u5408\u7c7b\u578b\uff1aTuples\u3001POJOs \u548c Scala case classes\n \n-and Flink falls back to Kryo for other types. It is also possible to use other serializers with\n-Flink. Avro, in particular, is well supported.\n+\u800c\u4e14 Flink \u53ef\u4ee5\u4ea4\u7ed9 Kryo \u5e8f\u5217\u5316\u5176\u4ed6\u7c7b\u578b\u3002\u4e5f\u53ef\u4ee5\u5c06\u5176\u4ed6\u5e8f\u5217\u5316\u5668\u548c Flink \u4e00\u8d77\u4f7f\u7528\u3002\u7279\u522b\u662f\u6709\u826f\u597d\u652f\u6301\u7684 Avro\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzQxNg=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5NjMxOnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNDo1NVrOGS36ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNDo1NVrOGS36ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzYyNg==", "bodyText": "\u611f\u89c9\u8fd9\u53e5\u8bdd\u4f18\u70b9\u7a81\u5140\uff1f\u80fd\u5426\u518d\u52a0\u4e00\u4e9b\u63cf\u8ff0\uff0c\u6216\u8005\u6362\u4e00\u4e2a\u66f4\u597d\u7684\u7ffb\u8bd1\u5462\uff1f", "url": "https://github.com/apache/flink/pull/11971#discussion_r422443626", "createdAt": "2020-05-09T02:34:55Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -82,17 +77,17 @@ public class Person {\n Person person = new Person(\"Fred Flintstone\", 35);\n {% endhighlight %}\n \n-Flink's serializer [supports schema evolution for POJO types]({% link dev/stream/state/schema_evolution.zh.md %}#pojo-types).\n+Flink \u7684\u5e8f\u5217\u5316\u5668[\u652f\u6301\u7684 POJO \u7c7b\u578b\u6570\u636e\u7ed3\u6784\u5347\u7ea7]({% link dev/stream/state/schema_evolution.zh.md %}#pojo-types)\u3002\n \n-### Scala tuples and case classes\n+### Scala tuples \u548c case classes\n \n-These work just as you'd expect.\n+\u6b63\u5982\u4f60\u671f\u671b\u7684\u4e00\u6837\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5NjYyOnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNToyOFrOGS36lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNDoyOTo0N1rOGS4Z6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzY3MA==", "bodyText": "\u8fd9\u4e9b\u65e0\u5173\u7684\u4fee\u6539\uff0crevert \u6389\u5427\n\u4e0b\u9762\u7684\u4e5f\u4e00\u6837", "url": "https://github.com/apache/flink/pull/11971#discussion_r422443670", "createdAt": "2020-05-09T02:35:28Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -104,63 +99,56 @@ public class Example {\n     public static void main(String[] args) throws Exception {\n         final StreamExecutionEnvironment env =\n                 StreamExecutionEnvironment.getExecutionEnvironment();\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTY5MA==", "bodyText": "\u8fd9\u4e2a\u5e94\u8be5\u662f Typora \u7684\u95ee\u9898\uff0c\u8c22\u8c22\u63d0\u9192\u3002", "url": "https://github.com/apache/flink/pull/11971#discussion_r422451690", "createdAt": "2020-05-09T04:29:47Z", "author": {"login": "XBaith"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -104,63 +99,56 @@ public class Example {\n     public static void main(String[] args) throws Exception {\n         final StreamExecutionEnvironment env =\n                 StreamExecutionEnvironment.getExecutionEnvironment();\n-\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzY3MA=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDA5NzUyOnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNjoyNFrOGS37Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNjoyNFrOGS37Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0Mzc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \u6bcf\u4e2a Flink \u5e94\u7528\u90fd\u9700\u8981\u6709\u6267\u884c\u73af\u5883\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\u4e3a `env` \u3002\u6d41\u5f0f\u5e94\u7528\u9700\u8981\u7528\u5230 `StreamExecutionEnvironment`\u3002\n          \n          \n            \n            \u6bcf\u4e2a Flink \u5e94\u7528\u90fd\u9700\u8981\u6709\u6267\u884c\u73af\u5883\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\u4e3a `env`\u3002\u6d41\u5f0f\u5e94\u7528\u9700\u8981\u7528\u5230 `StreamExecutionEnvironment`\u3002", "url": "https://github.com/apache/flink/pull/11971#discussion_r422443783", "createdAt": "2020-05-09T02:36:24Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -104,63 +99,56 @@ public class Example {\n     public static void main(String[] args) throws Exception {\n         final StreamExecutionEnvironment env =\n                 StreamExecutionEnvironment.getExecutionEnvironment();\n-\n+    \n         DataStream<Person> flintstones = env.fromElements(\n                 new Person(\"Fred\", 35),\n                 new Person(\"Wilma\", 35),\n                 new Person(\"Pebbles\", 2));\n-\n+    \n         DataStream<Person> adults = flintstones.filter(new FilterFunction<Person>() {\n             @Override\n             public boolean filter(Person person) throws Exception {\n                 return person.age >= 18;\n             }\n         });\n-\n+    \n         adults.print();\n-\n+    \n         env.execute();\n     }\n-\n+    \n     public static class Person {\n         public String name;\n         public Integer age;\n         public Person() {};\n-\n+    \n         public Person(String name, Integer age) {\n             this.name = name;\n             this.age = age;\n         };\n-\n+    \n         public String toString() {\n             return this.name.toString() + \": age \" + this.age.toString();\n         };\n     }\n }\n {% endhighlight %}\n \n-### Stream execution environment\n+### Stream \u6267\u884c\u73af\u5883\n \n-Every Flink application needs an execution environment, `env` in this example. Streaming\n-applications need to use a `StreamExecutionEnvironment`.\n+\u6bcf\u4e2a Flink \u5e94\u7528\u90fd\u9700\u8981\u6709\u6267\u884c\u73af\u5883\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\u4e3a `env` \u3002\u6d41\u5f0f\u5e94\u7528\u9700\u8981\u7528\u5230 `StreamExecutionEnvironment`\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDEwMzA5OnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo0NToyNVrOGS3-Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwNTo0OTo1NlrOGS4sKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NDU0Nw==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u6211\u7406\u89e3 \u201djob graph \u5e76\u4e0d\u662f StreamExecutionEnvironment \u751f\u6210\u7684\uff0c\u4ec5\u4ec5\u662f attach \u5230 StreamExecutionEnvironment\n\u8fd9\u91cc \u201c\u5c06\u5176\u5207\u7247\u201d \u4e2d\u7684 \u201c\u5207\u7247\u201d\u6709\u66f4\u597d\u7684\u7ffb\u8bd1\u5417\uff1f\u8fd9\u91cc\u76f8\u5f53\u4e8e\u628a\u4e00\u4e2a\u7b97\u5b50\u7ed9\u5206\u6210\u591a\u4e2a subtask\uff0c\u7136\u540e\u5e76\u884c\u5904\u7406", "url": "https://github.com/apache/flink/pull/11971#discussion_r422444547", "createdAt": "2020-05-09T02:45:25Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -104,63 +99,56 @@ public class Example {\n     public static void main(String[] args) throws Exception {\n         final StreamExecutionEnvironment env =\n                 StreamExecutionEnvironment.getExecutionEnvironment();\n-\n+    \n         DataStream<Person> flintstones = env.fromElements(\n                 new Person(\"Fred\", 35),\n                 new Person(\"Wilma\", 35),\n                 new Person(\"Pebbles\", 2));\n-\n+    \n         DataStream<Person> adults = flintstones.filter(new FilterFunction<Person>() {\n             @Override\n             public boolean filter(Person person) throws Exception {\n                 return person.age >= 18;\n             }\n         });\n-\n+    \n         adults.print();\n-\n+    \n         env.execute();\n     }\n-\n+    \n     public static class Person {\n         public String name;\n         public Integer age;\n         public Person() {};\n-\n+    \n         public Person(String name, Integer age) {\n             this.name = name;\n             this.age = age;\n         };\n-\n+    \n         public String toString() {\n             return this.name.toString() + \": age \" + this.age.toString();\n         };\n     }\n }\n {% endhighlight %}\n \n-### Stream execution environment\n+### Stream \u6267\u884c\u73af\u5883\n \n-Every Flink application needs an execution environment, `env` in this example. Streaming\n-applications need to use a `StreamExecutionEnvironment`.\n+\u6bcf\u4e2a Flink \u5e94\u7528\u90fd\u9700\u8981\u6709\u6267\u884c\u73af\u5883\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\u4e3a `env` \u3002\u6d41\u5f0f\u5e94\u7528\u9700\u8981\u7528\u5230 `StreamExecutionEnvironment`\u3002\n \n-The DataStream API calls made in your application build a job graph that is attached to the\n-`StreamExecutionEnvironment`. When `env.execute()` is called this graph is packaged up and sent to\n-the Flink Master, which parallelizes the job and distributes slices of it to the Task Managers for\n-execution. Each parallel slice of your job will be executed in a *task slot*.\n+DataStream API \u5c06\u4f60\u7684\u5e94\u7528\u6784\u5efa\u4e3a\u4e00\u4e2a\u7531 `StreamExecutionEnvironment` \u751f\u6210\u7684 job graph\u3002\u5f53\u8c03\u7528 `env.execute()` \u65f6\u6b64 graph \u5c31\u88ab\u6253\u5305\u5e76\u53d1\u9001\u5230 Flink Master \u4e0a\uff0c\u540e\u8005\u5bf9\u4f5c\u4e1a\u5e76\u884c\u5904\u7406\u5e76\u5c06\u5176\u5207\u7247\u5206\u53d1\u7ed9 Task Manager \u6765\u6267\u884c\u3002\u6bcf\u4e2a\u4f5c\u4e1a\u5e76\u884c\u5207\u7247\u5c06\u5728 *task slot* \u4e2d\u6267\u884c\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1MTcyMQ==", "bodyText": "\u6211\u5c06\u5176\u7ffb\u8bd1\u4e3a\u201c\u5b50\u4efb\u52a1\u201d\uff0c\u662f\u5426\u5408\u9002\u5462\uff1f", "url": "https://github.com/apache/flink/pull/11971#discussion_r422451721", "createdAt": "2020-05-09T04:30:34Z", "author": {"login": "XBaith"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -104,63 +99,56 @@ public class Example {\n     public static void main(String[] args) throws Exception {\n         final StreamExecutionEnvironment env =\n                 StreamExecutionEnvironment.getExecutionEnvironment();\n-\n+    \n         DataStream<Person> flintstones = env.fromElements(\n                 new Person(\"Fred\", 35),\n                 new Person(\"Wilma\", 35),\n                 new Person(\"Pebbles\", 2));\n-\n+    \n         DataStream<Person> adults = flintstones.filter(new FilterFunction<Person>() {\n             @Override\n             public boolean filter(Person person) throws Exception {\n                 return person.age >= 18;\n             }\n         });\n-\n+    \n         adults.print();\n-\n+    \n         env.execute();\n     }\n-\n+    \n     public static class Person {\n         public String name;\n         public Integer age;\n         public Person() {};\n-\n+    \n         public Person(String name, Integer age) {\n             this.name = name;\n             this.age = age;\n         };\n-\n+    \n         public String toString() {\n             return this.name.toString() + \": age \" + this.age.toString();\n         };\n     }\n }\n {% endhighlight %}\n \n-### Stream execution environment\n+### Stream \u6267\u884c\u73af\u5883\n \n-Every Flink application needs an execution environment, `env` in this example. Streaming\n-applications need to use a `StreamExecutionEnvironment`.\n+\u6bcf\u4e2a Flink \u5e94\u7528\u90fd\u9700\u8981\u6709\u6267\u884c\u73af\u5883\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\u4e3a `env` \u3002\u6d41\u5f0f\u5e94\u7528\u9700\u8981\u7528\u5230 `StreamExecutionEnvironment`\u3002\n \n-The DataStream API calls made in your application build a job graph that is attached to the\n-`StreamExecutionEnvironment`. When `env.execute()` is called this graph is packaged up and sent to\n-the Flink Master, which parallelizes the job and distributes slices of it to the Task Managers for\n-execution. Each parallel slice of your job will be executed in a *task slot*.\n+DataStream API \u5c06\u4f60\u7684\u5e94\u7528\u6784\u5efa\u4e3a\u4e00\u4e2a\u7531 `StreamExecutionEnvironment` \u751f\u6210\u7684 job graph\u3002\u5f53\u8c03\u7528 `env.execute()` \u65f6\u6b64 graph \u5c31\u88ab\u6253\u5305\u5e76\u53d1\u9001\u5230 Flink Master \u4e0a\uff0c\u540e\u8005\u5bf9\u4f5c\u4e1a\u5e76\u884c\u5904\u7406\u5e76\u5c06\u5176\u5207\u7247\u5206\u53d1\u7ed9 Task Manager \u6765\u6267\u884c\u3002\u6bcf\u4e2a\u4f5c\u4e1a\u5e76\u884c\u5207\u7247\u5c06\u5728 *task slot* \u4e2d\u6267\u884c\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NDU0Nw=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ1NjM2MQ==", "bodyText": "\u6211\u6682\u65f6\u6ca1\u6709\u66f4\u597d\u7684\u5efa\u8bae\uff0c\u201c\u5b50\u4efb\u52a1\u201d\u6211\u53ef\u4ee5\uff0c\u770b\u5176\u4ed6\u4eba\u662f\u5426\u6709\u4ec0\u4e48\u66f4\u597d\u7684\u5efa\u8bae", "url": "https://github.com/apache/flink/pull/11971#discussion_r422456361", "createdAt": "2020-05-09T05:49:56Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -104,63 +99,56 @@ public class Example {\n     public static void main(String[] args) throws Exception {\n         final StreamExecutionEnvironment env =\n                 StreamExecutionEnvironment.getExecutionEnvironment();\n-\n+    \n         DataStream<Person> flintstones = env.fromElements(\n                 new Person(\"Fred\", 35),\n                 new Person(\"Wilma\", 35),\n                 new Person(\"Pebbles\", 2));\n-\n+    \n         DataStream<Person> adults = flintstones.filter(new FilterFunction<Person>() {\n             @Override\n             public boolean filter(Person person) throws Exception {\n                 return person.age >= 18;\n             }\n         });\n-\n+    \n         adults.print();\n-\n+    \n         env.execute();\n     }\n-\n+    \n     public static class Person {\n         public String name;\n         public Integer age;\n         public Person() {};\n-\n+    \n         public Person(String name, Integer age) {\n             this.name = name;\n             this.age = age;\n         };\n-\n+    \n         public String toString() {\n             return this.name.toString() + \": age \" + this.age.toString();\n         };\n     }\n }\n {% endhighlight %}\n \n-### Stream execution environment\n+### Stream \u6267\u884c\u73af\u5883\n \n-Every Flink application needs an execution environment, `env` in this example. Streaming\n-applications need to use a `StreamExecutionEnvironment`.\n+\u6bcf\u4e2a Flink \u5e94\u7528\u90fd\u9700\u8981\u6709\u6267\u884c\u73af\u5883\uff0c\u5728\u8be5\u793a\u4f8b\u4e2d\u4e3a `env` \u3002\u6d41\u5f0f\u5e94\u7528\u9700\u8981\u7528\u5230 `StreamExecutionEnvironment`\u3002\n \n-The DataStream API calls made in your application build a job graph that is attached to the\n-`StreamExecutionEnvironment`. When `env.execute()` is called this graph is packaged up and sent to\n-the Flink Master, which parallelizes the job and distributes slices of it to the Task Managers for\n-execution. Each parallel slice of your job will be executed in a *task slot*.\n+DataStream API \u5c06\u4f60\u7684\u5e94\u7528\u6784\u5efa\u4e3a\u4e00\u4e2a\u7531 `StreamExecutionEnvironment` \u751f\u6210\u7684 job graph\u3002\u5f53\u8c03\u7528 `env.execute()` \u65f6\u6b64 graph \u5c31\u88ab\u6253\u5305\u5e76\u53d1\u9001\u5230 Flink Master \u4e0a\uff0c\u540e\u8005\u5bf9\u4f5c\u4e1a\u5e76\u884c\u5904\u7406\u5e76\u5c06\u5176\u5207\u7247\u5206\u53d1\u7ed9 Task Manager \u6765\u6267\u884c\u3002\u6bcf\u4e2a\u4f5c\u4e1a\u5e76\u884c\u5207\u7247\u5c06\u5728 *task slot* \u4e2d\u6267\u884c\u3002", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NDU0Nw=="}, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDEwNjczOnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1MTo1MVrOGS3_8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1MTo1MVrOGS3_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTA0MA==", "bodyText": "\u201c\u5012\u5e26\u548c\u91cd\u653e\u201d \u662f\u5426\u6539\u6210\u201c\u91cd\u590d\u201d \u5c31\u884c\u5462\uff1f\n\u8fd9\u91cc\u7684 \u201cstream enrichment\u201d \u662f \u201c\u6d41\u5904\u7406\u7684\u589e\u5f3a\u201d -- \u4e5f\u5c31\u662f\u8bf4\u4e5f\u4f1a\u4ece REST \u6216\u8005\u6570\u636e\u5e93\u8bfb\u53d6\u6570\u636e\uff0c\u589e\u5f3a\u6d41\u5904\u7406\u7684\u80fd\u529b\uff1f", "url": "https://github.com/apache/flink/pull/11971#discussion_r422445040", "createdAt": "2020-05-09T02:51:51Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -172,60 +160,49 @@ people.add(new Person(\"Pebbles\", 2));\n DataStream<Person> flintstones = env.fromCollection(people);\n {% endhighlight %}\n \n-Another convenient way to get some data into a stream while prototyping is to use a socket\n+\u53e6\u4e00\u4e2a\u83b7\u53d6\u6570\u636e\u5230\u6d41\u4e2d\u7684\u4fbf\u6377\u65b9\u6cd5\u662f\u7528 socket\n \n {% highlight java %}\n DataStream<String> lines = env.socketTextStream(\"localhost\", 9999)\n {% endhighlight %}\n \n-or a file\n+\u6216\u8bfb\u53d6\u6587\u4ef6\n \n {% highlight java %}\n DataStream<String> lines = env.readTextFile(\"file:///path\");\n {% endhighlight %}\n \n-In real applications the most commonly used data sources are those that support low-latency, high\n-throughput parallel reads in combination with rewind and replay -- the prerequisites for high\n-performance and fault tolerance -- such as Apache Kafka, Kinesis, and various filesystems. REST APIs\n-and databases are also frequently used for stream enrichment.\n+\u5728\u771f\u5b9e\u7684\u5e94\u7528\u4e2d\uff0c\u6700\u5e38\u7528\u7684\u6570\u636e\u6e90\u662f\u90a3\u4e9b\u652f\u6301\u4f4e\u5ef6\u8fdf\uff0c\u9ad8\u541e\u5410\u5e76\u884c\u8bfb\u53d6\u4ee5\u53ca\u5012\u5e26\u548c\u91cd\u653e\uff08\u9ad8\u6027\u80fd\u548c\u5bb9\u9519\u80fd\u529b\u4e3a\u5148\u51b3\u6761\u4ef6\uff09\u7684\u6570\u636e\u6e90\uff0c\u4f8b\u5982 Apache Kafka\uff0cKinesis \u548c\u5404\u79cd\u6587\u4ef6\u7cfb\u7edf\u3002REST API \u548c\u6570\u636e\u5e93\u4e5f\u7ecf\u5e38\u7528\u4e8e\u6d41\u5bcc\u96c6\uff08stream enrichment\uff09\u3002", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDEwNzU2OnYy", "diffSide": "RIGHT", "path": "docs/training/datastream_api.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1MzoxNFrOGS4AVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjo1MzoxNFrOGS4AVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NTE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1> \u548c 2> \u6307\u51fa\u8f93\u51fa\u6765\u81ea\u54ea\u4e2a sub-task\uff08\u5373thread\uff09\n          \n          \n            \n            1> \u548c 2> \u6307\u51fa\u8f93\u51fa\u6765\u81ea\u54ea\u4e2a sub-task\uff08\u5373 thread\uff09", "url": "https://github.com/apache/flink/pull/11971#discussion_r422445142", "createdAt": "2020-05-09T02:53:14Z", "author": {"login": "klion26"}, "path": "docs/training/datastream_api.zh.md", "diffHunk": "@@ -172,60 +160,49 @@ people.add(new Person(\"Pebbles\", 2));\n DataStream<Person> flintstones = env.fromCollection(people);\n {% endhighlight %}\n \n-Another convenient way to get some data into a stream while prototyping is to use a socket\n+\u53e6\u4e00\u4e2a\u83b7\u53d6\u6570\u636e\u5230\u6d41\u4e2d\u7684\u4fbf\u6377\u65b9\u6cd5\u662f\u7528 socket\n \n {% highlight java %}\n DataStream<String> lines = env.socketTextStream(\"localhost\", 9999)\n {% endhighlight %}\n \n-or a file\n+\u6216\u8bfb\u53d6\u6587\u4ef6\n \n {% highlight java %}\n DataStream<String> lines = env.readTextFile(\"file:///path\");\n {% endhighlight %}\n \n-In real applications the most commonly used data sources are those that support low-latency, high\n-throughput parallel reads in combination with rewind and replay -- the prerequisites for high\n-performance and fault tolerance -- such as Apache Kafka, Kinesis, and various filesystems. REST APIs\n-and databases are also frequently used for stream enrichment.\n+\u5728\u771f\u5b9e\u7684\u5e94\u7528\u4e2d\uff0c\u6700\u5e38\u7528\u7684\u6570\u636e\u6e90\u662f\u90a3\u4e9b\u652f\u6301\u4f4e\u5ef6\u8fdf\uff0c\u9ad8\u541e\u5410\u5e76\u884c\u8bfb\u53d6\u4ee5\u53ca\u5012\u5e26\u548c\u91cd\u653e\uff08\u9ad8\u6027\u80fd\u548c\u5bb9\u9519\u80fd\u529b\u4e3a\u5148\u51b3\u6761\u4ef6\uff09\u7684\u6570\u636e\u6e90\uff0c\u4f8b\u5982 Apache Kafka\uff0cKinesis \u548c\u5404\u79cd\u6587\u4ef6\u7cfb\u7edf\u3002REST API \u548c\u6570\u636e\u5e93\u4e5f\u7ecf\u5e38\u7528\u4e8e\u6d41\u5bcc\u96c6\uff08stream enrichment\uff09\u3002\n \n-### Basic stream sinks\n+### \u57fa\u672c\u7684 stream sink\n \n-The example above uses `adults.print()` to print its results to the task manager logs (which will\n-appear in your IDE's console, when running in an IDE). This will call `toString()` on each element\n-of the stream.\n+\u4e0a\u8ff0\u793a\u4f8b\u7528 `adults.print()` \u6253\u5370\u5176\u7ed3\u679c\u5230 task manager \u7684\u65e5\u5fd7\u4e2d\uff08\u5982\u679c\u8fd0\u884c\u5728 IDE \u4e2d\u65f6\uff0c\u5c06\u8ffd\u52a0\u5230\u4f60\u7684 IDE \u63a7\u5236\u53f0\uff09\u3002\u5b83\u4f1a\u5bf9\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u8c03\u7528 `toString()` \u65b9\u6cd5\u3002\n \n-The output looks something like this\n+\u8f93\u51fa\u770b\u8d77\u6765\u7c7b\u4f3c\u4e8e\n \n     1> Fred: age 35\n     2> Wilma: age 35\n \n-where 1> and 2> indicate which sub-task (i.e., thread) produced the output.\n+1> \u548c 2> \u6307\u51fa\u8f93\u51fa\u6765\u81ea\u54ea\u4e2a sub-task\uff08\u5373thread\uff09", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4082786bad837955dea7f68fce466c6b7719912"}, "originalPosition": 201}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1481, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}