{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NTMyODMw", "number": 13261, "title": "[FLINK-18870][Kinesis] Update Kinesis Consumer website to document EFO Feature", "bodyText": "What is the purpose of the change\nAdded feature documentation for FlinkKinesisConsumer EFO support.\nBrief change log\nUpdated the Flink Kinesis Connector website to include:\n\nAdded section \"Using Enhanced Fanout\", including\n\nOverview\nConfiguration example\nStream consumer registration/deregistration comparison and configuration example\n\n\n\"Threading model\" updated to include EFO\n\"Internally used Kinesis APIs\" updated to include EFO\n\nVerifying this change\n(Please pick either of the following options)\nDocumentation only\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no (this change documents a new feature)\nIf yes, how is the feature documented? docs", "createdAt": "2020-08-27T08:17:11Z", "url": "https://github.com/apache/flink/pull/13261", "merged": true, "mergeCommit": {"oid": "44bcd47d878d3313837abf5fd045b59cdbe166e6"}, "closed": true, "closedAt": "2020-09-18T14:33:50Z", "author": {"login": "dannycranmer"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdC7sT-gH2gAyNDc0NTMyODMwOjY5ZTllNzlkZjcyMzU4OGFlNjMzYWJkNGNjZTcxYzIzODZjYTE1Yzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKFweWgH2gAyNDc0NTMyODMwOjlhYjhjN2VlZjE0MDMxYjZhNmIzN2U0NjlkNTE4MTFiYTVmMmQxZTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "69e9e79df723588ae633abd4cce71c2386ca15c9", "author": {"user": {"login": "dannycranmer", "name": "Danny Cranmer"}}, "url": "https://github.com/apache/flink/commit/69e9e79df723588ae633abd4cce71c2386ca15c9", "committedDate": "2020-08-27T07:57:53Z", "message": "[FLINK-18870][Kinesis] Update Kinesis Consumer website to document Kinesis Consumer EFO Feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDA0NDUw", "url": "https://github.com/apache/flink/pull/13261#pullrequestreview-491404450", "createdAt": "2020-09-18T12:06:02Z", "commit": {"oid": "69e9e79df723588ae633abd4cce71c2386ca15c9"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowNjowMlrOHUKYFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozMDoyOVrOHULHHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMzU3Mw==", "bodyText": "I'm not sure if it makes sense to place EFO at the top of the \"advanced usage sections\". It seems that this topic is not relevant for first-time users, rather for users later in the adoption processes.\nMaybe it would make sense to move it past \"Fault Tolerance for Exactly-Once User-Defined State Update Semantics\", so that first-time users have a better experience.", "url": "https://github.com/apache/flink/pull/13261#discussion_r490903573", "createdAt": "2020-09-18T12:06:02Z", "author": {"login": "rmetzger"}, "path": "docs/dev/connectors/kinesis.md", "diffHunk": "@@ -129,6 +129,181 @@ shard IDs are not consecutive (as result of dynamic re-sharding in Kinesis).\n For cases where skew in the assignment leads to significant imbalanced consumption,\n a custom implementation of `KinesisShardAssigner` can be set on the consumer.\n \n+### Using Enhanced Fan Out", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69e9e79df723588ae633abd4cce71c2386ca15c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxNTYxNA==", "bodyText": "Ha! this was a question I had when reading the text.", "url": "https://github.com/apache/flink/pull/13261#discussion_r490915614", "createdAt": "2020-09-18T12:30:29Z", "author": {"login": "rmetzger"}, "path": "docs/dev/connectors/kinesis.md", "diffHunk": "@@ -129,6 +129,181 @@ shard IDs are not consecutive (as result of dynamic re-sharding in Kinesis).\n For cases where skew in the assignment leads to significant imbalanced consumption,\n a custom implementation of `KinesisShardAssigner` can be set on the consumer.\n \n+### Using Enhanced Fan Out\n+\n+[Enhanced Fan Out (EFO)](https://aws.amazon.com/blogs/aws/kds-enhanced-fanout/) increases the maximum \n+number of concurrent consumers per Kinesis stream.\n+Without EFO, all concurrent consumers share a single read quota per shard. \n+Using EFO, each consumer gets a distinct dedicated read quota per shard, allowing read throughput to scale with the number of consumers. \n+Using EFO will [incur additional cost](https://aws.amazon.com/kinesis/data-streams/pricing/).\n+ \n+In order to enable EFO two additional configuration parameters are required:\n+\n+- `RECORD_PUBLISHER_TYPE`: Determines whether to use `EFO` or `POLLING`. The default `RecordPublisher` is `POLLING`.\n+- `EFO_CONSUMER_NAME`: A name to identify the consumer. \n+For a given Kinesis data stream, each consumer must have a unique name. \n+However, consumer names do not have to be unique across data streams. \n+Reusing a consumer name will result in existing subscriptions being terminated.\n+\n+The code snippet below shows a simple example configurating an EFO consumer.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"java\" markdown=\"1\">\n+{% highlight java %}\n+Properties consumerConfig = new Properties();\n+consumerConfig.put(AWSConfigConstants.AWS_REGION, \"us-east-1\");\n+consumerConfig.put(ConsumerConfigConstants.STREAM_INITIAL_POSITION, \"LATEST\");\n+\n+consumerConfig.put(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, \n+    ConsumerConfigConstants.RecordPublisherType.EFO.name());\n+consumerConfig.put(ConsumerConfigConstants.EFO_CONSUMER_NAME, \"my-flink-efo-consumer\");\n+\n+StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+DataStream<String> kinesis = env.addSource(new FlinkKinesisConsumer<>(\n+    \"kinesis_stream_name\", new SimpleStringSchema(), consumerConfig));\n+{% endhighlight %}\n+</div>\n+<div data-lang=\"scala\" markdown=\"1\">\n+{% highlight scala %}\n+val consumerConfig = new Properties()\n+consumerConfig.put(AWSConfigConstants.AWS_REGION, \"us-east-1\")\n+consumerConfig.put(ConsumerConfigConstants.STREAM_INITIAL_POSITION, \"LATEST\")\n+\n+consumerConfig.put(ConsumerConfigConstants.RECORD_PUBLISHER_TYPE, \n+    ConsumerConfigConstants.RecordPublisherType.EFO.name());\n+consumerConfig.put(ConsumerConfigConstants.EFO_CONSUMER_NAME, \"my-flink-efo-consumer\");\n+\n+val env = StreamExecutionEnvironment.getExecutionEnvironment()\n+\n+val kinesis = env.addSource(new FlinkKinesisConsumer[String](\n+    \"kinesis_stream_name\", new SimpleStringSchema, consumerConfig))\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+#### EFO Stream Consumer Registration/Deregistration\n+\n+In order to use EFO, a stream consumer must be registered against each stream you wish to consume.\n+By default, the `FlinkKinesisConsumer` will register the stream consumer automatically when the Flink job starts.\n+The stream consumer will be registered using the name provided by the `EFO_CONSUMER_NAME` configuration.\n+`FlinkKinesisConsumer` provides three registration strategies:\n+\n+- Registration\n+  - `LAZY` (default): Stream consumers are registered when the Flink job starts running.\n+    If the stream consumer already exists, it will be reused.\n+    This is the preferred strategy for the majority of applications.\n+    However, jobs with parallelism greater than 1 will result in tasks competing to register and acquire the stream consumer ARN.\n+    For jobs with very large parallelism this can result in an increased start-up time.\n+    The describe operation has a limit of 20 [transactions per second](https://docs.aws.amazon.com/kinesis/latest/APIReference/API_DescribeStreamConsumer.html),\n+    this means application startup time will increase by roughly `parallelism/20 seconds`.\n+  - `EAGER`: Stream consumers are registered in the `FlinkKinesisConstructor`.\n+    If the stream consumer already exists, it will be reused. \n+    This will result in registration occurring when the job is constructed, \n+    either on the Flink Job Manager or client environment submitting the job.\n+    Using this strategy results in a single thread registering and retrieving the stream consumer ARN, \n+    reducing startup time over `LAZY` (with large parallelism).\n+    However, consider that the client environment will require access to the AWS services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69e9e79df723588ae633abd4cce71c2386ca15c9"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ab8c7eef14031b6a6b37e469d51811ba5f2d1e6", "author": {"user": {"login": "dannycranmer", "name": "Danny Cranmer"}}, "url": "https://github.com/apache/flink/commit/9ab8c7eef14031b6a6b37e469d51811ba5f2d1e6", "committedDate": "2020-09-18T13:38:57Z", "message": "[FLINK-18870][Kinesis] Reorder sections after review feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4775, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}