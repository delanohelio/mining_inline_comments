{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTcyOTM5", "number": 14466, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowOTowNVrOFI3Ffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzoxMTo0NlrOFI3HHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODM1NDU1OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/AbstractJdbcOutputFormat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzowOTowNVrOILBIAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMzoxNjoxNFrOILHejw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMzY4Mw==", "bodyText": "Maybe we don't need this method anymore, we can directly invoke connectionProvider.closeConnection in close().\nThe same to establishConnection.", "url": "https://github.com/apache/flink/pull/14466#discussion_r548423683", "createdAt": "2020-12-24T07:09:05Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/AbstractJdbcOutputFormat.java", "diffHunk": "@@ -72,15 +70,7 @@ public void close() {\n \t}\n \n \tprivate void closeDbConnection() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzc1OQ==", "bodyText": "closeDbConnection and establishConnection is removed in fixup commit.", "url": "https://github.com/apache/flink/pull/14466#discussion_r548527759", "createdAt": "2020-12-24T13:16:14Z", "author": {"login": "kezhuw"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/AbstractJdbcOutputFormat.java", "diffHunk": "@@ -72,15 +70,7 @@ public void close() {\n \t}\n \n \tprivate void closeDbConnection() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyMzY4Mw=="}, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODM1NzU5OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzoxMTowM1rOILBJ9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQxMjozOToxN1rOILG8FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDE4MA==", "bodyText": "What do you think about rename this method to getOrCreateConnection to make the create/establish behavior more explicitly?", "url": "https://github.com/apache/flink/pull/14466#discussion_r548424180", "createdAt": "2020-12-24T07:11:03Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "diffHunk": "@@ -20,13 +20,40 @@\n import org.apache.flink.annotation.Internal;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * JDBC connection provider.\n  */\n @Internal\n public interface JdbcConnectionProvider {\n-\tConnection getConnection() throws Exception;\n+\t/**\n+\t * Get existing connection.\n+\t *\n+\t * @return existing connection\n+\t */\n+\tConnection getExistingConnection();\n \n-\tConnection reestablishConnection() throws Exception;\n+\t/**\n+\t * Get existing connection or establish an new one if there is none.\n+\t *\n+\t * @return existing connection or newly established connection\n+\t * @throws SQLException sql exception\n+\t * @throws ClassNotFoundException driver class not found\n+\t */\n+\tConnection getConnection() throws SQLException, ClassNotFoundException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUxODkzMg==", "bodyText": "I had this tendence too and already had a fixup commit in local, I will push that commit soon.", "url": "https://github.com/apache/flink/pull/14466#discussion_r548518932", "createdAt": "2020-12-24T12:39:17Z", "author": {"login": "kezhuw"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "diffHunk": "@@ -20,13 +20,40 @@\n import org.apache.flink.annotation.Internal;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * JDBC connection provider.\n  */\n @Internal\n public interface JdbcConnectionProvider {\n-\tConnection getConnection() throws Exception;\n+\t/**\n+\t * Get existing connection.\n+\t *\n+\t * @return existing connection\n+\t */\n+\tConnection getExistingConnection();\n \n-\tConnection reestablishConnection() throws Exception;\n+\t/**\n+\t * Get existing connection or establish an new one if there is none.\n+\t *\n+\t * @return existing connection or newly established connection\n+\t * @throws SQLException sql exception\n+\t * @throws ClassNotFoundException driver class not found\n+\t */\n+\tConnection getConnection() throws SQLException, ClassNotFoundException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDE4MA=="}, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODM1ODcxOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNzoxMTo0NlrOILBKog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMzoyNjozOVrOILchRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDM1NA==", "bodyText": "Is this method necessary? Can users use getConnection instead?", "url": "https://github.com/apache/flink/pull/14466#discussion_r548424354", "createdAt": "2020-12-24T07:11:46Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "diffHunk": "@@ -20,13 +20,40 @@\n import org.apache.flink.annotation.Internal;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * JDBC connection provider.\n  */\n @Internal\n public interface JdbcConnectionProvider {\n-\tConnection getConnection() throws Exception;\n+\t/**\n+\t * Get existing connection.\n+\t *\n+\t * @return existing connection\n+\t */\n+\tConnection getExistingConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUyNzI1NQ==", "bodyText": "This method currently exist for reasons:\n\nBypass java checked exception restriction and serve as drop-in replacement for old connection field in migrating classes.\nTest access with no side effect to wrapped connection in JdbcInputFormat.getDbConn, AbstractJdbcOutputFormat.getConnection, JdbcLookupFunction.getDbConnection and JdbcRowDataLookupFunction.getDbConnection without resort to cast or additional VisibleForTesting.", "url": "https://github.com/apache/flink/pull/14466#discussion_r548527255", "createdAt": "2020-12-24T13:14:23Z", "author": {"login": "kezhuw"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "diffHunk": "@@ -20,13 +20,40 @@\n import org.apache.flink.annotation.Internal;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * JDBC connection provider.\n  */\n @Internal\n public interface JdbcConnectionProvider {\n-\tConnection getConnection() throws Exception;\n+\t/**\n+\t * Get existing connection.\n+\t *\n+\t * @return existing connection\n+\t */\n+\tConnection getExistingConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDM1NA=="}, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc3OTc5Mw==", "bodyText": "That makes sense. Then I would suggest to add @Nullable annotation on the return type or check null in the implementation.", "url": "https://github.com/apache/flink/pull/14466#discussion_r548779793", "createdAt": "2020-12-25T02:13:46Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "diffHunk": "@@ -20,13 +20,40 @@\n import org.apache.flink.annotation.Internal;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * JDBC connection provider.\n  */\n @Internal\n public interface JdbcConnectionProvider {\n-\tConnection getConnection() throws Exception;\n+\t/**\n+\t * Get existing connection.\n+\t *\n+\t * @return existing connection\n+\t */\n+\tConnection getExistingConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDM1NA=="}, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg3MjUxNg==", "bodyText": "@Nullable added.", "url": "https://github.com/apache/flink/pull/14466#discussion_r548872516", "createdAt": "2020-12-25T13:26:39Z", "author": {"login": "kezhuw"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/internal/connection/JdbcConnectionProvider.java", "diffHunk": "@@ -20,13 +20,40 @@\n import org.apache.flink.annotation.Internal;\n \n import java.sql.Connection;\n+import java.sql.SQLException;\n \n /**\n  * JDBC connection provider.\n  */\n @Internal\n public interface JdbcConnectionProvider {\n-\tConnection getConnection() throws Exception;\n+\t/**\n+\t * Get existing connection.\n+\t *\n+\t * @return existing connection\n+\t */\n+\tConnection getExistingConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQyNDM1NA=="}, "originalCommit": {"oid": "cdb692019548197320d8e058c386e177fa180495"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4573, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}