{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjQ1MzE3", "number": 12571, "title": "[FLINK-18132][doc] Add documentation for the new CSV format", "bodyText": "What is the purpose of the change\nAdd document for new CSV row data format.\nBrief change log\n\nAdd csv.md and csv.zh.md\n\nVerifying this change\nBuild locally and validate it works.", "createdAt": "2020-06-10T07:01:38Z", "url": "https://github.com/apache/flink/pull/12571", "merged": true, "mergeCommit": {"oid": "600ace21aad941367db82539dce993c444c0a1d7"}, "closed": true, "closedAt": "2020-06-11T08:04:39Z", "author": {"login": "danny0405"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp0F0oAH2gAyNDMyMjQ1MzE3OjI5Njk1NDQ5MjIwOGJlNjZhNTVmYTRkZDA2NDkyMmM3ZTQwOTUxYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqIhsugFqTQyODYzMzc3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "296954492208be66a55fa4dd064922c7e40951c0", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/296954492208be66a55fa4dd064922c7e40951c0", "committedDate": "2020-06-10T06:58:24Z", "message": "[FLINK-18132][doc] Add documentation for the new CSV format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b66da99d35cfa52dc29cd021d165546344d75c", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/89b66da99d35cfa52dc29cd021d165546344d75c", "committedDate": "2020-06-10T09:43:42Z", "message": "Fix the index link"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc4NTg3", "url": "https://github.com/apache/flink/pull/12571#pullrequestreview-428578587", "createdAt": "2020-06-11T04:07:49Z", "commit": {"oid": "89b66da99d35cfa52dc29cd021d165546344d75c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNzo1MFrOGiN0sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNzo1MFrOGiN0sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMTI1MQ==", "bodyText": "I think we can copy the data type mapping of JSON to here. They are almost the same (except CSV doesn't some types, e.g. MAP).", "url": "https://github.com/apache/flink/pull/12571#discussion_r438531251", "createdAt": "2020-06-11T04:07:50Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/csv.zh.md", "diffHunk": "@@ -0,0 +1,330 @@\n+---\n+title: \"CSV Format\"\n+nav-title: CSV\n+nav-parent_id: sql-formats\n+nav-pos: 1\n+---\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<span class=\"label label-info\">Format: Serialization Schema</span>\n+<span class=\"label label-info\">Format: Deserialization Schema</span>\n+\n+* This will be replaced by the TOC\n+{:toc}\n+\n+The [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) format allows to read and write CSV data based on an CSV schema. Currently, the CSV schema is derived from table schema.\n+\n+Dependencies\n+------------\n+\n+In order to setup the CSV format, the following table provides dependency information for both projects using a build automation tool (such as Maven or SBT) and SQL Client with SQL JAR bundles.\n+\n+| Maven dependency   | SQL Client JAR         |\n+| :----------------- | :----------------------|\n+| `flink-csv`        | The `flink-csv-{{site.version}}.jar` is a built-in jar of SQL-CLI. |\n+\n+How to create a table with CSV format\n+----------------\n+\n+Here is an example to create a table using Kafka connector and CSV format.\n+\n+<div class=\"codetabs\" markdown=\"1\">\n+<div data-lang=\"SQL\" markdown=\"1\">\n+{% highlight sql %}\n+CREATE TABLE user_behavior (\n+  user_id BIGINT,\n+  item_id BIGINT,\n+  category_id BIGINT,\n+  behavior STRING,\n+  ts TIMESTAMP(3)\n+) WITH (\n+ 'connector' = 'kafka',\n+ 'topic' = 'user_behavior',\n+ 'properties.bootstrap.servers' = 'localhost:9092',\n+ 'properties.group.id' = 'testGroup',\n+ 'format' = 'csv'\n+)\n+{% endhighlight %}\n+</div>\n+</div>\n+\n+Format Options\n+----------------\n+\n+<table class=\"table table-bordered\">\n+    <thead>\n+      <tr>\n+        <th class=\"text-left\" style=\"width: 25%\">Option</th>\n+        <th class=\"text-center\" style=\"width: 8%\">Required</th>\n+        <th class=\"text-center\" style=\"width: 7%\">Default</th>\n+        <th class=\"text-center\" style=\"width: 10%\">Type</th>\n+        <th class=\"text-center\" style=\"width: 50%\">Description</th>\n+      </tr>\n+    </thead>\n+    <tbody>\n+    <tr>\n+      <td><h5>format</h5></td>\n+      <td>required</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Specify what format to use, here should be 'csv'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>field-delimiter</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\"><code>,</code></td>\n+      <td>String</td>\n+      <td>Field delimiter character (',' by default).</td>\n+    </tr>\n+    <tr>\n+      <td><h5>line-delimiter</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\"><code>\\n</code></td>\n+      <td>String</td>\n+      <td>Line delimiter ('\\n' by default, otherwise\n+      '\\r' or '\\r\\n' are allowed), unicode is supported if\n+      the delimiter is an invisible special character,\n+      e.g. U&'\\\\000D' is the unicode representation of carriage return '\\r'\n+      e.g. U&'\\\\000A' is the unicode representation of line feed '\\n'.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>disable-quote-character</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to disabled quote character for enclosing field values (false by default)\n+      if true, quote-character can not be set.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>quote-character</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\"><code>\"</code></td>\n+      <td>String</td>\n+      <td>Quote character for enclosing field values ('\"' by default).</td>\n+    </tr>\n+    <tr>\n+      <td><h5>allow-comments</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to ignore comment lines that start with '#'\n+      (disabled by default);\n+      if enabled, make sure to also ignore parse errors to allow empty rows.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>ignore-parse-errors</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">false</td>\n+      <td>Boolean</td>\n+      <td>Flag to skip fields and rows with parse errors instead of failing;\n+      fields are set to null in case of errors.</td>\n+    </tr>\n+    <tr>\n+      <td><h5>array-element-delimiter</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\"><code>;</code></td>\n+      <td>String</td>\n+      <td>Array element delimiter string for separating\n+      array and row element values (';' by default).</td>\n+    </tr>\n+    <tr>\n+      <td><h5>escape-character</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Escape character for escaping values (disabled by default).</td>\n+    </tr>\n+    <tr>\n+      <td><h5>null-literal</h5></td>\n+      <td>optional</td>\n+      <td style=\"word-wrap: break-word;\">(none)</td>\n+      <td>String</td>\n+      <td>Null literal string that is interpreted as a\n+      null value (disabled by default).</td>\n+    </tr>\n+    </tbody>\n+</table>\n+\n+Data Type Mapping\n+----------------\n+\n+Currently, the CSV schema is always derived from table schema. Explicitly defining an CSV schema is not supported yet.\n+\n+Flink CSV format uses utility class `com.fasterxml.jackson.databind.node.ObjectNode` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from CSV text.\n+\n+The following table lists the type mapping from Flink type to CSV type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89b66da99d35cfa52dc29cd021d165546344d75c"}, "originalPosition": 172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba77421459da92ba3f7587ffdb430e5f6a1b3ed", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/aba77421459da92ba3f7587ffdb430e5f6a1b3ed", "committedDate": "2020-06-11T04:28:22Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjAzMDY1", "url": "https://github.com/apache/flink/pull/12571#pullrequestreview-428603065", "createdAt": "2020-06-11T05:31:27Z", "commit": {"oid": "aba77421459da92ba3f7587ffdb430e5f6a1b3ed"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTozMToyN1rOGiPCyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNTozMToyOVrOGiPC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MTI0Mw==", "bodyText": "Both are supported?", "url": "https://github.com/apache/flink/pull/12571#discussion_r438551243", "createdAt": "2020-06-11T05:31:27Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/csv.md", "diffHunk": "@@ -167,159 +169,81 @@ Data Type Mapping\n \n Currently, the CSV schema is always derived from table schema. Explicitly defining an CSV schema is not supported yet.\n \n-Flink CSV format uses utility class `com.fasterxml.jackson.databind.node.ObjectNode` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from CSV text.\n+Flink CSV format uses [jackson databind API](https://github.com/FasterXML/jackson-databind) to parse and generate CSV string.\n \n The following table lists the type mapping from Flink type to CSV type.\n \n <table class=\"table table-bordered\">\n     <thead>\n       <tr>\n         <th class=\"text-left\">Flink Data Type</th>\n-        <th class=\"text-center\">CSV conversion</th>\n+        <th class=\"text-center\">CSV Data Type</th>\n       </tr>\n     </thead>\n     <tbody>\n-    <tr>\n-      <td>NULL</td>\n-      <td>\n-      {% highlight java %}\n-      NullNode nullNode()\n-      null\n-    {% endhighlight %}\n-    </td>\n-    </tr>\n     <tr>\n       <td>CHAR / VARCHAR / STRING</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String text)\n-      String asText()\n-      {% endhighlight %}\n-      </td>\n+      <td>string</td>\n     </tr>\n     <tr>\n       <td>BOOLEAN</td>\n-      <td>\n-      {% highlight java %}\n-      BooleanNode booleanNode(boolean v)\n-      boolean asBoolean()\n-      {% endhighlight %}\n-      </td>\n+      <td>boolean</td>\n     </tr>\n     <tr>\n       <td>BINARY / VARBINARY</td>\n-      <td>\n-      {% highlight java %}\n-      BinaryNode binaryNode(byte[] data)\n-      byte[] binaryValue()\n-      {% endhighlight %}\n-      </td>\n+      <td>string with encoding: base64</td>\n     </tr>\n     <tr>\n       <td>DECIMAL</td>\n-      <td>\n-      {% highlight java %}\n-      ValueNode numberNode(BigDecimal v)\n-      BigDecimal decimalValue()\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>TINYINT</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(byte v)\n-      byte Byte.parseByte(String s)\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>SMALLINT</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(short v)\n-      short Short.parseShort(String s)\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n-      <td>INT/INTERVAL_YEAR_MONTH</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(int v)\n-      int asInt()\n-      {% endhighlight %}\n-      </td>\n+      <td>INT</td>\n+      <td>number</td>\n     </tr>\n     <tr>\n-      <td>BIGINT/INTERVAL_DAY_TIME</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(long v)\n-      long asLong()\n-      {% endhighlight %}\n-      </td>\n+      <td>BIGINT</td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>FLOAT</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(float v)\n-      (float) double asDouble()\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>DOUBLE</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(double v)\n-      double asDouble()\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>DATE</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String isoLocalDate)\n-      (int) Date.valueOf(String isoLocalDate)\n-      {% endhighlight %}\n-      </td>\n+      <td>string with format: date</td>\n     </tr>\n     <tr>\n       <td>TIME</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String isoLocalTime)\n-      LocalTime Time.valueOf(String isoLocalTime)\n-      {% endhighlight %}\n-      </td>\n+      <td>string with format: time</td>\n     </tr>\n     <tr>\n       <td>TIMESTAMP</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String isoLocalDateTime)\n-      Timestamp Timestamp.valueOf(String isoLocalDateTime)\n-      {% endhighlight %}\n-      </td>\n+      <td>string with format: date-time</td>\n+    </tr>\n+    <tr>\n+      <td>INTERVAL</td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>ARRAY</td>\n-      <td>\n-      {% highlight java %}\n-      JsonNode get(int index) // For each array item, only deserialization supported.\n-      {% endhighlight %}\n-      </td>\n+      <td>array <span class=\"label label-danger\">Note</span> only deserialization is supported.</td>\n     </tr>\n     <tr>\n       <td>ROW</td>\n-      <td>\n-      {% highlight java %}\n-      JsonNode get(String fieldName) // For each field, only deserialization supported.\n-      {% endhighlight %}\n-      </td>\n+      <td>object <span class=\"label label-danger\">Note</span> only deserialization is supported.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba77421459da92ba3f7587ffdb430e5f6a1b3ed"}, "originalPosition": 277}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1MTI1Mg==", "bodyText": "Both are supported?", "url": "https://github.com/apache/flink/pull/12571#discussion_r438551252", "createdAt": "2020-06-11T05:31:29Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/formats/csv.md", "diffHunk": "@@ -167,159 +169,81 @@ Data Type Mapping\n \n Currently, the CSV schema is always derived from table schema. Explicitly defining an CSV schema is not supported yet.\n \n-Flink CSV format uses utility class `com.fasterxml.jackson.databind.node.ObjectNode` (for serialization) and `com.fasterxml.jackson.databind.JsonNode` (for deserialization) provided by `jackson` to convert Flink Data Types to and from CSV text.\n+Flink CSV format uses [jackson databind API](https://github.com/FasterXML/jackson-databind) to parse and generate CSV string.\n \n The following table lists the type mapping from Flink type to CSV type.\n \n <table class=\"table table-bordered\">\n     <thead>\n       <tr>\n         <th class=\"text-left\">Flink Data Type</th>\n-        <th class=\"text-center\">CSV conversion</th>\n+        <th class=\"text-center\">CSV Data Type</th>\n       </tr>\n     </thead>\n     <tbody>\n-    <tr>\n-      <td>NULL</td>\n-      <td>\n-      {% highlight java %}\n-      NullNode nullNode()\n-      null\n-    {% endhighlight %}\n-    </td>\n-    </tr>\n     <tr>\n       <td>CHAR / VARCHAR / STRING</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String text)\n-      String asText()\n-      {% endhighlight %}\n-      </td>\n+      <td>string</td>\n     </tr>\n     <tr>\n       <td>BOOLEAN</td>\n-      <td>\n-      {% highlight java %}\n-      BooleanNode booleanNode(boolean v)\n-      boolean asBoolean()\n-      {% endhighlight %}\n-      </td>\n+      <td>boolean</td>\n     </tr>\n     <tr>\n       <td>BINARY / VARBINARY</td>\n-      <td>\n-      {% highlight java %}\n-      BinaryNode binaryNode(byte[] data)\n-      byte[] binaryValue()\n-      {% endhighlight %}\n-      </td>\n+      <td>string with encoding: base64</td>\n     </tr>\n     <tr>\n       <td>DECIMAL</td>\n-      <td>\n-      {% highlight java %}\n-      ValueNode numberNode(BigDecimal v)\n-      BigDecimal decimalValue()\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>TINYINT</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(byte v)\n-      byte Byte.parseByte(String s)\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>SMALLINT</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(short v)\n-      short Short.parseShort(String s)\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n-      <td>INT/INTERVAL_YEAR_MONTH</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(int v)\n-      int asInt()\n-      {% endhighlight %}\n-      </td>\n+      <td>INT</td>\n+      <td>number</td>\n     </tr>\n     <tr>\n-      <td>BIGINT/INTERVAL_DAY_TIME</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(long v)\n-      long asLong()\n-      {% endhighlight %}\n-      </td>\n+      <td>BIGINT</td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>FLOAT</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(float v)\n-      (float) double asDouble()\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>DOUBLE</td>\n-      <td>\n-      {% highlight java %}\n-      NumericNode numberNode(double v)\n-      double asDouble()\n-      {% endhighlight %}\n-      </td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>DATE</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String isoLocalDate)\n-      (int) Date.valueOf(String isoLocalDate)\n-      {% endhighlight %}\n-      </td>\n+      <td>string with format: date</td>\n     </tr>\n     <tr>\n       <td>TIME</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String isoLocalTime)\n-      LocalTime Time.valueOf(String isoLocalTime)\n-      {% endhighlight %}\n-      </td>\n+      <td>string with format: time</td>\n     </tr>\n     <tr>\n       <td>TIMESTAMP</td>\n-      <td>\n-      {% highlight java %}\n-      TextNode textNode(String isoLocalDateTime)\n-      Timestamp Timestamp.valueOf(String isoLocalDateTime)\n-      {% endhighlight %}\n-      </td>\n+      <td>string with format: date-time</td>\n+    </tr>\n+    <tr>\n+      <td>INTERVAL</td>\n+      <td>number</td>\n     </tr>\n     <tr>\n       <td>ARRAY</td>\n-      <td>\n-      {% highlight java %}\n-      JsonNode get(int index) // For each array item, only deserialization supported.\n-      {% endhighlight %}\n-      </td>\n+      <td>array <span class=\"label label-danger\">Note</span> only deserialization is supported.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba77421459da92ba3f7587ffdb430e5f6a1b3ed"}, "originalPosition": 268}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c8d167385bb5bb0a30f0c2ca2074ca959e552f3", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/6c8d167385bb5bb0a30f0c2ca2074ca959e552f3", "committedDate": "2020-06-11T05:50:37Z", "message": "Fix review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjMzNzcx", "url": "https://github.com/apache/flink/pull/12571#pullrequestreview-428633771", "createdAt": "2020-06-11T06:46:57Z", "commit": {"oid": "6c8d167385bb5bb0a30f0c2ca2074ca959e552f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3970, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}