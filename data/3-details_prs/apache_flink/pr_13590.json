{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNDMyODA4", "number": 13590, "title": "[FLINK-19570][tests] Avoid directly creating ExecutionJobVertex and ExecutionVertex via constructors in tests", "bodyText": "What is the purpose of the change\nThis PR is to fix the tests which encounters unexpected failures due to improperly creating ExecutionJobVertex and ExecutionVertex and registering duplicated ExecutionAttemptID.\nBrief change log\nSee commits.\nVerifying this change\nThis change is already covered by existing tests.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-10-12T09:02:58Z", "url": "https://github.com/apache/flink/pull/13590", "merged": true, "mergeCommit": {"oid": "0c373822e31562c6f0d65505c0b95ea1b166c093"}, "closed": true, "closedAt": "2020-10-13T12:36:06Z", "author": {"login": "zhuzhurk"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRyDmaABqjM4NjYxMjM3NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSEUwlAFqTUwNzE5MjEwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f2525d34a6b7e7be903f2b9444b26e134d9417a", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/7f2525d34a6b7e7be903f2b9444b26e134d9417a", "committedDate": "2020-10-12T08:57:17Z", "message": "[FLINK-19570][tests] Avoid directly creating ExecutionJobVertex and ExecutionVertex via constructors in tests\n\nThis is to avoid re-registering duplicated ExecutionAttemptID and causing global failure.\nTesting constructors of  ExecutionJobVertex and ExecutionVertex are removed.\nSubclasses of ExecutionVertex are also removed and related tests are reworked."}, "afterCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/6b1f237058c155dfea2ba5afc56fdaf072d5fb73", "committedDate": "2020-10-12T11:12:21Z", "message": "[FLINK-19570][tests] Avoid directly creating ExecutionJobVertex and ExecutionVertex via constructors in tests\n\nThis is to avoid re-registering duplicated ExecutionAttemptID and causing global failure.\nTesting constructors of  ExecutionJobVertex and ExecutionVertex are removed.\nSubclasses of ExecutionVertex are also removed and related tests are reworked."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTY3MzI5", "url": "https://github.com/apache/flink/pull/13590#pullrequestreview-506567329", "createdAt": "2020-10-12T12:18:43Z", "commit": {"oid": "002a6217192f9fdc66735858b228a856a6e80cb8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoxODo0M1rOHf8TZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo0ODoyOVrOHf9Tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1NTkwOA==", "bodyText": "Just to confirm: We can remove these tests because we no longer use LocationPreferenceConstraint.ANY in the new scheduler, right?", "url": "https://github.com/apache/flink/pull/13590#discussion_r503255908", "createdAt": "2020-10-12T12:18:43Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/executiongraph/ExecutionTest.java", "diffHunk": "@@ -282,61 +278,6 @@ public void testSlotAllocationCancellationWhenExecutionCancelled() throws Except\n \t\tassertThat(canceledSlotRequests, equalTo(slotRequests));\n \t}\n \n-\t/**\n-\t * Tests that all preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAllPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation2 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = new CompletableFuture<>();\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ALL);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture3.complete(taskManagerLocation3);\n-\n-\t\tassertFalse(preferredLocationsFuture.isDone());\n-\n-\t\tlocationFuture2.complete(taskManagerLocation2);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation2, taskManagerLocation3));\n-\t}\n-\n-\t/**\n-\t * Tests that any preferred locations are calculated.\n-\t */\n-\t@Test\n-\tpublic void testAnyPreferredLocationCalculation() throws Exception {\n-\t\tfinal TaskManagerLocation taskManagerLocation1 = new LocalTaskManagerLocation();\n-\t\tfinal TaskManagerLocation taskManagerLocation3 = new LocalTaskManagerLocation();\n-\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture1 = CompletableFuture.completedFuture(taskManagerLocation1);\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture2 = new CompletableFuture<>();\n-\t\tfinal CompletableFuture<TaskManagerLocation> locationFuture3 = CompletableFuture.completedFuture(taskManagerLocation3);\n-\n-\t\tfinal Execution execution = getExecution(Arrays.asList(locationFuture1, locationFuture2, locationFuture3));\n-\n-\t\tCompletableFuture<Collection<TaskManagerLocation>> preferredLocationsFuture = execution.calculatePreferredLocations(LocationPreferenceConstraint.ANY);\n-\n-\t\tassertTrue(preferredLocationsFuture.isDone());\n-\n-\t\tfinal Collection<TaskManagerLocation> preferredLocations = preferredLocationsFuture.get();\n-\n-\t\tassertThat(preferredLocations, containsInAnyOrder(taskManagerLocation1, taskManagerLocation3));\n-\t}\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "002a6217192f9fdc66735858b228a856a6e80cb8"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3MjM4Mw==", "bodyText": "Aren't we changing the semantics of this test by saying that we don't have any preferred location preferences?", "url": "https://github.com/apache/flink/pull/13590#discussion_r503272383", "createdAt": "2020-10-12T12:48:29Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmanager/scheduler/ScheduleWithCoLocationHintTest.java", "diffHunk": "@@ -306,25 +306,25 @@ public void testGetsNonLocalFromSharingGroupFirst() throws Exception {\n \n \t\t// schedule something into the shared group so that both instances are in the sharing group\n \t\tLogicalSlot s1 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s2 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid1, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId()), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule one locally to instance 1\n \t\tLogicalSlot s3 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule with co location constraint (yet unassigned) and a preference for\n \t\t// instance 1, but it can only get instance 2\n \t\tLogicalSlot s4 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid2, 1, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();\n \n \t\t// schedule something into the assigned co-location constraints and check that they override the\n \t\t// other preferences\n \t\tLogicalSlot s5 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup, loc2), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n+\t\t\t\tnew ScheduledUnit(getExecution(jid3, 0, 2, sharingGroup), sharingGroup.getSlotSharingGroupId(), cc1), slotProfileForLocation(loc2), TestingUtils.infiniteTime()).get();\n \t\tLogicalSlot s6 = testingSlotProvider.allocateSlot(\n-\t\t\t\tnew ScheduledUnit(getExecution(jid3, 1, 2, sharingGroup, loc1), sharingGroup.getSlotSharingGroupId(), cc2), slotProfileForLocation(loc1), TestingUtils.infiniteTime()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a33e6bf123be444f186826c03165a1eef08ce3", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/28a33e6bf123be444f186826c03165a1eef08ce3", "committedDate": "2020-10-13T06:32:44Z", "message": "[FLINK-19570][tests] Remove preferred location tests from ExecutionTest\n\nThese tests relies on the problematic TestingExecutionVertex and blocks us from getting rid of it.\nWe can safely remove these tests because they only test the behavior of legacy scheduler which will be removed soon."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c48511704b335dcdaa09e536e4e7282c5de2bb6", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/4c48511704b335dcdaa09e536e4e7282c5de2bb6", "committedDate": "2020-10-13T06:32:45Z", "message": "[FLINK-19570][tests] Avoid directly creating ExecutionJobVertex and ExecutionVertex via constructors in tests\n\nThis is to avoid re-registering duplicated ExecutionAttemptID and causing global failure.\nTesting constructors of  ExecutionJobVertex and ExecutionVertex are removed.\nSubclasses of ExecutionVertex are also removed and related tests are reworked."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b1f237058c155dfea2ba5afc56fdaf072d5fb73", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/6b1f237058c155dfea2ba5afc56fdaf072d5fb73", "committedDate": "2020-10-12T11:12:21Z", "message": "[FLINK-19570][tests] Avoid directly creating ExecutionJobVertex and ExecutionVertex via constructors in tests\n\nThis is to avoid re-registering duplicated ExecutionAttemptID and causing global failure.\nTesting constructors of  ExecutionJobVertex and ExecutionVertex are removed.\nSubclasses of ExecutionVertex are also removed and related tests are reworked."}, "afterCommit": {"oid": "4c48511704b335dcdaa09e536e4e7282c5de2bb6", "author": {"user": {"login": "zhuzhurk", "name": "Zhu Zhu"}}, "url": "https://github.com/apache/flink/commit/4c48511704b335dcdaa09e536e4e7282c5de2bb6", "committedDate": "2020-10-13T06:32:45Z", "message": "[FLINK-19570][tests] Avoid directly creating ExecutionJobVertex and ExecutionVertex via constructors in tests\n\nThis is to avoid re-registering duplicated ExecutionAttemptID and causing global failure.\nTesting constructors of  ExecutionJobVertex and ExecutionVertex are removed.\nSubclasses of ExecutionVertex are also removed and related tests are reworked."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MTkyMTAz", "url": "https://github.com/apache/flink/pull/13590#pullrequestreview-507192103", "createdAt": "2020-10-13T08:30:10Z", "commit": {"oid": "4c48511704b335dcdaa09e536e4e7282c5de2bb6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3141, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}