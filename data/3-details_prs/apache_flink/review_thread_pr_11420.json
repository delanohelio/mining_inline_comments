{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Mjk3Nzgw", "number": 11420, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNDoyNVrODoySRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1MDo0M1rODo-hZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDkzNTEwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/ml/api/base.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNDoyNVrOF3jJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNDoyNVrOF3jJBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MTc1MA==", "bodyText": "nit: makes error message more verbose, express which stage is problematic\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Unexpected Java PipelineStage. It should be a %s, \"\n          \n          \n            \n                                    \"Unexpected Java PipelineStage: %s. Class should be a %s, \"", "url": "https://github.com/apache/flink/pull/11420#discussion_r393791750", "createdAt": "2020-03-17T16:04:25Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/api/base.py", "diffHunk": "@@ -265,11 +266,56 @@ def transform(self, t_env: TableEnvironment, input: Table) -> Table:\n         return input\n \n     def to_json(self) -> str:\n-        import jsonpickle\n-        return str(jsonpickle.encode(self, keys=True))\n+        \"\"\"\n+        If all PipelineStages in this Pipeline are Java ones, this method will return a\n+        Java json string, which can be loaded either from a Python Pipeline or a Java Pipeline,\n+        otherwise, it returns a Python json string which can only be loaded from a Python Pipeline.\n+        \"\"\"\n+        # if all PipelineStages are Java ones, we use Java toJson() to generate Json string\n+        # so that the string can also be loaded from Java side.\n+        if all([type(stage) in [JavaTransformer, JavaEstimator, JavaModel]\n+                for stage in self.get_stages()]):\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            for stage in self.get_stages():\n+                stage._convert_params_to_java(stage._j_obj)\n+                j_pipeline.appendStage(stage._j_obj)\n+            return j_pipeline.toJson()\n+        else:\n+            import jsonpickle\n+            return str(jsonpickle.encode(self, keys=True))\n \n     def load_json(self, json: str) -> None:\n-        import jsonpickle\n-        pipeline = jsonpickle.decode(json, keys=True)\n-        for stage in pipeline.get_stages():\n-            self.append_stage(stage)\n+        \"\"\"\n+        This method can either load from a Java Pipeline json or a Python Pipeline json.\n+        \"\"\"\n+        # noinspection PyBroadException\n+        try:\n+            # try to load json with Python method\n+            import jsonpickle\n+            pipeline = jsonpickle.decode(json, keys=True)\n+            for stage in pipeline.get_stages():\n+                self.append_stage(stage)\n+        except Exception:\n+            # if can't load json with Python method, try to load with Java method\n+            gw = get_gateway()\n+            j_pipeline = gw.jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.loadJson(json)\n+\n+            for j_stage in j_pipeline.getStages():\n+                j_stage_class = j_stage.getClass()\n+                j_transformer_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Transformer)\n+                j_estimator_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Estimator)\n+                j_model_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Model)\n+                if j_transformer_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaTransformer(j_stage))\n+                elif j_estimator_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaEstimator(j_stage))\n+                elif j_model_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaModel(j_stage))\n+                else:\n+                    raise TypeError(\n+                        \"Unexpected Java PipelineStage. It should be a %s, \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDkzNjgzOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/ml/api/base.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNDo1MVrOF3jKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjowNDo1MVrOF3jKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5MjAzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    (j_transformer_class.getCanonicalName(),\n          \n          \n            \n                                    (j_stage_class.getCanonicalName(),\n          \n          \n            \n                                     j_transformer_class.getCanonicalName(),", "url": "https://github.com/apache/flink/pull/11420#discussion_r393792036", "createdAt": "2020-03-17T16:04:51Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/api/base.py", "diffHunk": "@@ -265,11 +266,56 @@ def transform(self, t_env: TableEnvironment, input: Table) -> Table:\n         return input\n \n     def to_json(self) -> str:\n-        import jsonpickle\n-        return str(jsonpickle.encode(self, keys=True))\n+        \"\"\"\n+        If all PipelineStages in this Pipeline are Java ones, this method will return a\n+        Java json string, which can be loaded either from a Python Pipeline or a Java Pipeline,\n+        otherwise, it returns a Python json string which can only be loaded from a Python Pipeline.\n+        \"\"\"\n+        # if all PipelineStages are Java ones, we use Java toJson() to generate Json string\n+        # so that the string can also be loaded from Java side.\n+        if all([type(stage) in [JavaTransformer, JavaEstimator, JavaModel]\n+                for stage in self.get_stages()]):\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            for stage in self.get_stages():\n+                stage._convert_params_to_java(stage._j_obj)\n+                j_pipeline.appendStage(stage._j_obj)\n+            return j_pipeline.toJson()\n+        else:\n+            import jsonpickle\n+            return str(jsonpickle.encode(self, keys=True))\n \n     def load_json(self, json: str) -> None:\n-        import jsonpickle\n-        pipeline = jsonpickle.decode(json, keys=True)\n-        for stage in pipeline.get_stages():\n-            self.append_stage(stage)\n+        \"\"\"\n+        This method can either load from a Java Pipeline json or a Python Pipeline json.\n+        \"\"\"\n+        # noinspection PyBroadException\n+        try:\n+            # try to load json with Python method\n+            import jsonpickle\n+            pipeline = jsonpickle.decode(json, keys=True)\n+            for stage in pipeline.get_stages():\n+                self.append_stage(stage)\n+        except Exception:\n+            # if can't load json with Python method, try to load with Java method\n+            gw = get_gateway()\n+            j_pipeline = gw.jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.loadJson(json)\n+\n+            for j_stage in j_pipeline.getStages():\n+                j_stage_class = j_stage.getClass()\n+                j_transformer_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Transformer)\n+                j_estimator_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Estimator)\n+                j_model_class = java_class(gw.jvm.org.apache.flink.ml.api.core.Model)\n+                if j_transformer_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaTransformer(j_stage))\n+                elif j_estimator_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaEstimator(j_stage))\n+                elif j_model_class.isAssignableFrom(j_stage_class):\n+                    self.append_stage(JavaModel(j_stage))\n+                else:\n+                    raise TypeError(\n+                        \"Unexpected Java PipelineStage. It should be a %s, \"\n+                        \"%s or a %s.\" %\n+                        (j_transformer_class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk3Mjc1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/ml/tests/test_pipeline_it_case.py", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxMjo0OFrOF3jg-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMjowMToxN1rOF3z7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5Nzg4Mw==", "bodyText": "this piece of code replicates most of the logic in Pipeline.to_json() except for the hard-coded pipeline stage \"select_cols\". was wondering if there's a better way of making the test, e.g. use a json string literal here?", "url": "https://github.com/apache/flink/pull/11420#discussion_r393797883", "createdAt": "2020-03-17T16:12:48Z", "author": {"login": "walterddr"}, "path": "flink-python/pyflink/ml/tests/test_pipeline_it_case.py", "diffHunk": "@@ -169,3 +169,39 @@ def test_pipeline(self):\n         # the first input is false since 0 + 0 is smaller than the max_sum 14.\n         # the second input is true since 12 + 3 is bigger than the max_sum 14.\n         self.assert_equals(actual, [\"false\", \"true\"])\n+\n+    def test_pipeline_from_and_to_java_json(self):\n+\n+        def get_java_pipeline_json():\n+            wrapper = WrapperTransformer(selected_cols=[\"a\", \"b\"])\n+            wrapper._convert_params_to_java(wrapper._j_obj)\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.appendStage(wrapper._j_obj)\n+            return j_pipeline.toJson()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA2NjY5Mg==", "bodyText": "A json string literal sounds good for me.", "url": "https://github.com/apache/flink/pull/11420#discussion_r394066692", "createdAt": "2020-03-18T02:01:17Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/ml/tests/test_pipeline_it_case.py", "diffHunk": "@@ -169,3 +169,39 @@ def test_pipeline(self):\n         # the first input is false since 0 + 0 is smaller than the max_sum 14.\n         # the second input is true since 12 + 3 is bigger than the max_sum 14.\n         self.assert_equals(actual, [\"false\", \"true\"])\n+\n+    def test_pipeline_from_and_to_java_json(self):\n+\n+        def get_java_pipeline_json():\n+            wrapper = WrapperTransformer(selected_cols=[\"a\", \"b\"])\n+            wrapper._convert_params_to_java(wrapper._j_obj)\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            j_pipeline.appendStage(wrapper._j_obj)\n+            return j_pipeline.toJson()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5Nzg4Mw=="}, "originalCommit": {"oid": "d6eea92060da3afdf541e2fcc90e103c34cef259"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjkzOTkwOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/ml/api/base.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1MDo0M1rOF33Hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNTo1MDo0M1rOF33Hfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExOTAzOA==", "bodyText": "Do we know the exact exception type here? It would good to not naively catch all the exception if possible. If we don't know the exact exception, we should probably remember the exception and raise it when the Java Pipeline load also failed. The error message would then be something like:\n\"Cannot load the JSON as either a Java Pipeline or a Python Pipeline. Python Pipeline load failed due to THIS_EXCEPTION. Java Pipeline load failed due to ANOTHER_EXCEPTION.\"", "url": "https://github.com/apache/flink/pull/11420#discussion_r394119038", "createdAt": "2020-03-18T05:50:43Z", "author": {"login": "becketqin"}, "path": "flink-python/pyflink/ml/api/base.py", "diffHunk": "@@ -265,11 +266,57 @@ def transform(self, t_env: TableEnvironment, input: Table) -> Table:\n         return input\n \n     def to_json(self) -> str:\n-        import jsonpickle\n-        return str(jsonpickle.encode(self, keys=True))\n+        \"\"\"\n+        If all PipelineStages in this Pipeline are Java ones, this method will return a\n+        Java json string, which can be loaded either from a Python Pipeline or a Java Pipeline,\n+        otherwise, it returns a Python json string which can only be loaded from a Python Pipeline.\n+        \"\"\"\n+        # if all PipelineStages are Java ones, we use Java toJson() to generate Json string\n+        # so that the string can also be loaded from Java side.\n+        if all([type(stage) in [JavaTransformer, JavaEstimator, JavaModel]\n+                for stage in self.get_stages()]):\n+            j_pipeline = get_gateway().jvm.org.apache.flink.ml.api.core.Pipeline()\n+            for stage in self.get_stages():\n+                stage._convert_params_to_java(stage._j_obj)\n+                j_pipeline.appendStage(stage._j_obj)\n+            return j_pipeline.toJson()\n+        else:\n+            import jsonpickle\n+            return str(jsonpickle.encode(self, keys=True))\n \n     def load_json(self, json: str) -> None:\n-        import jsonpickle\n-        pipeline = jsonpickle.decode(json, keys=True)\n-        for stage in pipeline.get_stages():\n-            self.append_stage(stage)\n+        \"\"\"\n+        This method can either load from a Java Pipeline json or a Python Pipeline json.\n+        \"\"\"\n+        # noinspection PyBroadException\n+        try:\n+            # try to load json with Python method\n+            import jsonpickle\n+            pipeline = jsonpickle.decode(json, keys=True)\n+            for stage in pipeline.get_stages():\n+                self.append_stage(stage)\n+        except Exception:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acf17c53b9dd8dad8d8e2286c2140f96dca488b3"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}