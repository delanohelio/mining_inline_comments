{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMDQzMzM3", "number": 13050, "title": "[FLINK-18750][table] SqlValidatorException thrown when select from a \u2026", "bodyText": "\u2026view which contains a UDTF call\nWhat is the purpose of the change\nThis patch fix the problem that a table function can not reference the JOIN left items for CREATE VIEW query.\nBrief change log\n\nFix the issue in blink planner\nAdd UT\n\nVerifying this change\nAdded UT.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no", "createdAt": "2020-08-03T08:55:02Z", "url": "https://github.com/apache/flink/pull/13050", "merged": true, "mergeCommit": {"oid": "69fa07ec5c11c59499fc79a03323228e373ca0a9"}, "closed": true, "closedAt": "2020-08-25T08:52:59Z", "author": {"login": "danny0405"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7coDJABqjM2MTgxODQwNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCNjlXgBqjM2ODc4ODk1NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a2f39a71a931295f82a9bdbd36f2707f42298dd", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/1a2f39a71a931295f82a9bdbd36f2707f42298dd", "committedDate": "2020-08-03T08:51:55Z", "message": "[FLINK-18750][table] SqlValidatorException thrown when select from a view which contains a UDTF call"}, "afterCommit": {"oid": "e274e166aed3ffacc4ac58409aaf3384c937cb66", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/e274e166aed3ffacc4ac58409aaf3384c937cb66", "committedDate": "2020-08-04T01:48:10Z", "message": "[FLINK-18750][table] SqlValidatorException thrown when select from a view which contains a UDTF call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ede13fd5e8ebef37e5d963f613a3e745c9ff085", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/6ede13fd5e8ebef37e5d963f613a3e745c9ff085", "committedDate": "2020-08-06T04:19:19Z", "message": "Add a component named Expander for sql identifier expanding"}, "afterCommit": {"oid": "128e47f58b081d6273e3c6c57ad0da76c990595f", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/128e47f58b081d6273e3c6c57ad0da76c990595f", "committedDate": "2020-08-06T04:33:02Z", "message": "Add a component named Expander for sql identifier expanding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "128e47f58b081d6273e3c6c57ad0da76c990595f", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/128e47f58b081d6273e3c6c57ad0da76c990595f", "committedDate": "2020-08-06T04:33:02Z", "message": "Add a component named Expander for sql identifier expanding"}, "afterCommit": {"oid": "6e9b5b711ca81e18366d521f564b9ed64113bf94", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/6e9b5b711ca81e18366d521f564b9ed64113bf94", "committedDate": "2020-08-06T06:25:32Z", "message": "Add a component named Expander for sql identifier expanding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e9b5b711ca81e18366d521f564b9ed64113bf94", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/6e9b5b711ca81e18366d521f564b9ed64113bf94", "committedDate": "2020-08-06T06:25:32Z", "message": "Add a component named Expander for sql identifier expanding"}, "afterCommit": {"oid": "8559c87345749d7a627fd4ae4d4d58141a53639e", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/8559c87345749d7a627fd4ae4d4d58141a53639e", "committedDate": "2020-08-06T08:33:20Z", "message": "Add a component named Expander for sql identifier expanding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8559c87345749d7a627fd4ae4d4d58141a53639e", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/8559c87345749d7a627fd4ae4d4d58141a53639e", "committedDate": "2020-08-06T08:33:20Z", "message": "Add a component named Expander for sql identifier expanding"}, "afterCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/c44b190d9e1350fa8853fe95b9f0284090f4d0fc", "committedDate": "2020-08-07T07:02:56Z", "message": "Add a component named Expander for sql identifier expanding\n\nThe select STAR(*) pattern may still keep the same."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Mzg5Njc0", "url": "https://github.com/apache/flink/pull/13050#pullrequestreview-467389674", "createdAt": "2020-08-14T08:16:51Z", "commit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNjo1MVrOHArvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0MjoyNFrOHAuaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3ODczMg==", "bodyText": "Can we extract the logic from alter view and create view to a common helper method? The code is nearly identical. I am pretty sure we can extract the majority of the logic to a method like:\nCatalogView catalogView = transformToCatalogView(SqlNode query, String comment, List<String> aliases);\n\nRight now we need to modify the code in two different places and the comments differ significantly between the two locations, even though they should be exactly the same.", "url": "https://github.com/apache/flink/pull/13050#discussion_r470478732", "createdAt": "2020-08-14T08:16:51Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/operations/SqlToOperationConverter.java", "diffHunk": "@@ -676,15 +680,20 @@ private Operation convertCreateView(SqlCreateView sqlCreateView) {\n \t\tfinal SqlNode query = sqlCreateView.getQuery();\n \t\tfinal SqlNodeList fieldList = sqlCreateView.getFieldList();\n \n-\t\tSqlNode validateQuery = flinkPlanner.validate(query);\n \t\t// Put the sql string unparse (getQuotedSqlString()) in front of\n \t\t// the node conversion (toQueryOperation()),\n \t\t// because before Calcite 1.22.0, during sql-to-rel conversion, the SqlWindow\n \t\t// bounds state would be mutated as default when they are null (not specified).\n \n \t\t// This bug is fixed in CALCITE-3877 of Calcite 1.23.0.\n \t\tString originalQuery = getQuotedSqlString(query);\n-\t\tString expandedQuery = getQuotedSqlString(validateQuery);\n+\t\tSqlNode validateQuery = flinkPlanner.validate(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3ODg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Utility that expand SQL identifiers from a SQL query.\n          \n          \n            \n             * Utility that expands SQL identifiers in a SQL query.", "url": "https://github.com/apache/flink/pull/13050#discussion_r470478884", "createdAt": "2020-08-14T08:17:13Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTI0NA==", "bodyText": "nit: inline assignment", "url": "https://github.com/apache/flink/pull/13050#discussion_r470511244", "createdAt": "2020-08-14T09:20:00Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTMzMQ==", "bodyText": "nit: inline assignment", "url": "https://github.com/apache/flink/pull/13050#discussion_r470511331", "createdAt": "2020-08-14T09:20:09Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);\n+\t\t// parse again because validation is stateful, that means the node tree was probably\n+\t\t// mutated.\n+\t\tvalidated = planner.validate(planner.parser().parse(ori));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMTEyMg==", "bodyText": "Shouldn't this be rather:\nif (toReplace == null || id.names.size() >= toReplace.names.size()) {\n\n?", "url": "https://github.com/apache/flink/pull/13050#discussion_r470521122", "createdAt": "2020-08-14T09:39:41Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);\n+\t\t// parse again because validation is stateful, that means the node tree was probably\n+\t\t// mutated.\n+\t\tvalidated = planner.validate(planner.parser().parse(ori));\n+\t\tvalidated.accept(new SqlBasicVisitor<Void>() {\n+\t\t\t@Override public Void visit(SqlIdentifier identifier) {\n+\t\t\t\tidentifiers.putIfAbsent(identifier.getParserPosition(), identifier);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t});\n+\t\treturn new Expanded(planner.config().getParserConfig(), oriNode, identifiers);\n+\t}\n+\n+\t/** Result of expanding. */\n+\tpublic static class Expanded {\n+\t\tpublic final SqlParser.Config parserConf;\n+\t\tpublic final SqlNode oriNode;\n+\t\tpublic final Map<SqlParserPos, SqlIdentifier> identifiersMap;\n+\n+\t\tExpanded(SqlParser.Config parserConf, SqlNode oriNode,\n+\t\t\t\tMap<SqlParserPos, SqlIdentifier> identifiers) {\n+\t\t\tthis.oriNode = oriNode;\n+\t\t\tthis.parserConf = parserConf;\n+\t\t\tthis.identifiersMap = ImmutableMap.copyOf(identifiers);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn substitute(SqlNode::toString);\n+\t\t}\n+\n+\t\t/** Returns the SQL string with identifiers replaced according to the\n+\t\t * given unparse function. */\n+\t\tpublic String substitute(Function<SqlNode, String> fn) {\n+\t\t\tfinal SqlShuttle shuttle = new SqlShuttle() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic SqlNode visit(SqlIdentifier id) {\n+\t\t\t\t\tif (id.isStar()) {\n+\t\t\t\t\t\treturn id;\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal SqlIdentifier toReplace = identifiersMap.get(id.getParserPosition());\n+\t\t\t\t\tif (toReplace != null && id.names.size() >= toReplace.names.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ==", "bodyText": "Will it expand function identifiers as well? Can we have a test for that case?", "url": "https://github.com/apache/flink/pull/13050#discussion_r470522441", "createdAt": "2020-08-14T09:42:24Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/c44b190d9e1350fa8853fe95b9f0284090f4d0fc", "committedDate": "2020-08-07T07:02:56Z", "message": "Add a component named Expander for sql identifier expanding\n\nThe select STAR(*) pattern may still keep the same."}, "afterCommit": {"oid": "bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b", "committedDate": "2020-08-17T07:28:15Z", "message": "fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MzA2MTY2", "url": "https://github.com/apache/flink/pull/13050#pullrequestreview-468306166", "createdAt": "2020-08-17T09:26:38Z", "commit": {"oid": "bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjozOFrOHBhLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjozOFrOHBhLDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDEyNQ==", "bodyText": "unrelated change", "url": "https://github.com/apache/flink/pull/13050#discussion_r471354125", "createdAt": "2020-08-17T09:26:38Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/program/FlinkChainedProgram.scala", "diffHunk": "@@ -62,8 +62,8 @@ class FlinkChainedProgram[OC <: FlinkOptimizeContext]\n         val result = program.optimize(input, context)\n         val end = System.currentTimeMillis()\n \n-        if (LOG.isDebugEnabled) {\n-          LOG.debug(s\"optimize $name cost ${end - start} ms.\\n\" +\n+        if (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b", "committedDate": "2020-08-17T07:28:15Z", "message": "fix comments"}, "afterCommit": {"oid": "44ba50fd578d65572ddfea8b09e0e001f9ea530b", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/44ba50fd578d65572ddfea8b09e0e001f9ea530b", "committedDate": "2020-08-17T09:38:00Z", "message": "fix comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44ba50fd578d65572ddfea8b09e0e001f9ea530b", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/44ba50fd578d65572ddfea8b09e0e001f9ea530b", "committedDate": "2020-08-17T09:38:00Z", "message": "fix comments"}, "afterCommit": {"oid": "0358a12e3524d251396cca950c7403eee205f0d6", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/0358a12e3524d251396cca950c7403eee205f0d6", "committedDate": "2020-08-18T01:59:43Z", "message": "[FLINK-18750][table] SqlValidatorException thrown when select from a view which contains a UDTF call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dc232b1abb2f19b489d6025c4af3a9d7a0637940", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/dc232b1abb2f19b489d6025c4af3a9d7a0637940", "committedDate": "2020-08-20T14:03:30Z", "message": "fix the BridgingSqlFunction expanding"}, "afterCommit": {"oid": "870f73394bfc42e740891a6262e1bfd97efdba56", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/870f73394bfc42e740891a6262e1bfd97efdba56", "committedDate": "2020-08-20T14:07:18Z", "message": "fix the BridgingSqlFunction expanding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "870f73394bfc42e740891a6262e1bfd97efdba56", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/870f73394bfc42e740891a6262e1bfd97efdba56", "committedDate": "2020-08-20T14:07:18Z", "message": "fix the BridgingSqlFunction expanding"}, "afterCommit": {"oid": "da58a528949de503a38c69aca6ea4d1e29b2beea", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/da58a528949de503a38c69aca6ea4d1e29b2beea", "committedDate": "2020-08-21T01:53:15Z", "message": "fix the BridgingSqlFunction expanding"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da58a528949de503a38c69aca6ea4d1e29b2beea", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/da58a528949de503a38c69aca6ea4d1e29b2beea", "committedDate": "2020-08-21T01:53:15Z", "message": "fix the BridgingSqlFunction expanding"}, "afterCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/efe2b4b092cbce31dee74b4261ca7a20904b2000", "committedDate": "2020-08-21T08:19:28Z", "message": "fix the BridgingSqlFunction expanding"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTg5MzE2", "url": "https://github.com/apache/flink/pull/13050#pullrequestreview-473189316", "createdAt": "2020-08-24T07:40:30Z", "commit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MDozMFrOHFYFmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MDozMFrOHFYFmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5OTU3Ng==", "bodyText": "Why did you decide to use a different key for functions? Can't we use the SqlParserPos as well?", "url": "https://github.com/apache/flink/pull/13050#discussion_r475399576", "createdAt": "2020-08-24T07:40:30Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -70,30 +75,43 @@ public static Expander create(FlinkPlannerImpl planner) {\n \t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n \tpublic Expanded expanded(String ori) {\n \t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal Map<String, SqlIdentifier> funcNameToId = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTkwNzI0", "url": "https://github.com/apache/flink/pull/13050#pullrequestreview-473190724", "createdAt": "2020-08-24T07:42:27Z", "commit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MjoyN1rOHFYJwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MjoyN1rOHFYJwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMDY0Mg==", "bodyText": "Let's not import the PrimitiveScalarFunction. I don't think it makes sense to introduce a cross dependency between the tests. I think it is easy enough to add a simple function in this class.", "url": "https://github.com/apache/flink/pull/13050#discussion_r475400642", "createdAt": "2020-08-24T07:42:27Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/common/ViewsExpandingTest.scala", "diffHunk": "@@ -20,9 +20,12 @@ package org.apache.flink.table.planner.plan.common\n \n import org.apache.flink.api.scala._\n import org.apache.flink.table.api._\n-import org.apache.flink.table.catalog.{CatalogView, CatalogViewImpl, ObjectPath}\n-import org.apache.flink.table.planner.utils.{TableTestBase, TableTestUtil, TableTestUtilBase}\n+import org.apache.flink.table.catalog.{CatalogBaseTable, CatalogView, CatalogViewImpl, ObjectIdentifier, ObjectPath}\n+import org.apache.flink.table.planner.runtime.stream.sql.FunctionITCase.PrimitiveScalarFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa2e599db47cf035f6d7cf0389e7caa273b5880", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/0aa2e599db47cf035f6d7cf0389e7caa273b5880", "committedDate": "2020-08-25T02:12:23Z", "message": "[FLINK-18750][table] SqlValidatorException thrown when select from a view which contains a UDTF call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/efe2b4b092cbce31dee74b4261ca7a20904b2000", "committedDate": "2020-08-21T08:19:28Z", "message": "fix the BridgingSqlFunction expanding"}, "afterCommit": {"oid": "0aa2e599db47cf035f6d7cf0389e7caa273b5880", "author": {"user": {"login": "danny0405", "name": "Danny Chan"}}, "url": "https://github.com/apache/flink/commit/0aa2e599db47cf035f6d7cf0389e7caa273b5880", "committedDate": "2020-08-25T02:12:23Z", "message": "[FLINK-18750][table] SqlValidatorException thrown when select from a view which contains a UDTF call"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4927, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}