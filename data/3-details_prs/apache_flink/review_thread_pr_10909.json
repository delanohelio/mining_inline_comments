{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODc2MTc1", "number": 10909, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjo0MDo1NlrODZXJ4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjo0MDo1NlrODZXJ4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTIwMzUzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/CollectStreamTableSink.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjo0MDo1NlrOFftFUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwODo0OToyNFrOFfyK0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4ODgxNw==", "bodyText": "Can we override getTableSchema directly:\n    @Override\n\tpublic TableSchema getTableSchema() {\n\t\t// We use the old type system here to be consistent with getRecordType.\n\t\treturn new TableSchema(tableSchema.getFieldNames(), tableSchema.getFieldTypes());\n\t}\n\nI think getFieldNames and getFieldTypes is not so intuitive.", "url": "https://github.com/apache/flink/pull/10909#discussion_r368788817", "createdAt": "2020-01-21T02:40:56Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/CollectStreamTableSink.java", "diffHunk": "@@ -43,21 +43,32 @@\n \tprivate final TypeSerializer<Tuple2<Boolean, Row>> serializer;\n \tprivate final TableSchema tableSchema;\n \n-\tpublic CollectStreamTableSink(InetAddress targetAddress, int targetPort, TypeSerializer<Tuple2<Boolean, Row>> serializer, TableSchema tableSchema) {\n+\tpublic CollectStreamTableSink(\n+\t\t\tInetAddress targetAddress,\n+\t\t\tint targetPort,\n+\t\t\tTypeSerializer<Tuple2<Boolean, Row>> serializer,\n+\t\t\tTableSchema tableSchema) {\n \t\tthis.targetAddress = targetAddress;\n \t\tthis.targetPort = targetPort;\n \t\tthis.serializer = serializer;\n \t\tthis.tableSchema = TableSchemaUtils.checkNoGeneratedColumns(tableSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd83c10a8fd98e21c6982b3ae2e0bd1d597e8ea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg2NDYwNw==", "bodyText": "I could not decide on those two options myself.\nI went for the getFieldNames and getFieldTypes methods because I thought it will be easier to track it back when fixing the Upsert/RetractTableSink interfaces. I thought it will be more visible that we need to fix it here as well when removing those methods. I am afraid the old type system in TableSchema might stick around for a bit longer than these methods. Moreover it is also how we do it e.g. in Elasticsearch retract stream.\nBut I am fine with switching over to TableSchema if you think it would be better that way.", "url": "https://github.com/apache/flink/pull/10909#discussion_r368864607", "createdAt": "2020-01-21T08:31:15Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/CollectStreamTableSink.java", "diffHunk": "@@ -43,21 +43,32 @@\n \tprivate final TypeSerializer<Tuple2<Boolean, Row>> serializer;\n \tprivate final TableSchema tableSchema;\n \n-\tpublic CollectStreamTableSink(InetAddress targetAddress, int targetPort, TypeSerializer<Tuple2<Boolean, Row>> serializer, TableSchema tableSchema) {\n+\tpublic CollectStreamTableSink(\n+\t\t\tInetAddress targetAddress,\n+\t\t\tint targetPort,\n+\t\t\tTypeSerializer<Tuple2<Boolean, Row>> serializer,\n+\t\t\tTableSchema tableSchema) {\n \t\tthis.targetAddress = targetAddress;\n \t\tthis.targetPort = targetPort;\n \t\tthis.serializer = serializer;\n \t\tthis.tableSchema = TableSchemaUtils.checkNoGeneratedColumns(tableSchema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4ODgxNw=="}, "originalCommit": {"oid": "7dd83c10a8fd98e21c6982b3ae2e0bd1d597e8ea"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3MjE0Nw==", "bodyText": "Sounds reasonable to me. I don't have a strong tendency.", "url": "https://github.com/apache/flink/pull/10909#discussion_r368872147", "createdAt": "2020-01-21T08:49:24Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-sql-client/src/main/java/org/apache/flink/table/client/gateway/local/CollectStreamTableSink.java", "diffHunk": "@@ -43,21 +43,32 @@\n \tprivate final TypeSerializer<Tuple2<Boolean, Row>> serializer;\n \tprivate final TableSchema tableSchema;\n \n-\tpublic CollectStreamTableSink(InetAddress targetAddress, int targetPort, TypeSerializer<Tuple2<Boolean, Row>> serializer, TableSchema tableSchema) {\n+\tpublic CollectStreamTableSink(\n+\t\t\tInetAddress targetAddress,\n+\t\t\tint targetPort,\n+\t\t\tTypeSerializer<Tuple2<Boolean, Row>> serializer,\n+\t\t\tTableSchema tableSchema) {\n \t\tthis.targetAddress = targetAddress;\n \t\tthis.targetPort = targetPort;\n \t\tthis.serializer = serializer;\n \t\tthis.tableSchema = TableSchemaUtils.checkNoGeneratedColumns(tableSchema);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4ODgxNw=="}, "originalCommit": {"oid": "7dd83c10a8fd98e21c6982b3ae2e0bd1d597e8ea"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1255, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}