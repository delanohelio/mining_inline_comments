{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMTg1NTYw", "number": 11275, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxMzo0OFrODkMNSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozMDozM1rODkMiRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjc1MzM2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapIntVector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxMzo0OFrOFwYG1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTo0MjoyOFrOFwcm6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ==", "bodyText": "Add a meaningful message, or throw an index-out-of-bound exception?", "url": "https://github.com/apache/flink/pull/11275#discussion_r386270935", "createdAt": "2020-03-02T09:13:48Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapIntVector.java", "diffHunk": "@@ -47,4 +49,45 @@ public int getInt(int i) {\n \t\t\treturn dictionary.decodeToInt(dictionaryIds.vector[i]);\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic void setInt(int i, int value) {\n+\t\tif (i >= vector.length) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\tvector[i] = value;\n+\t}\n+\n+\t@Override\n+\tpublic void setIntsFromBinary(int rowId, int count, byte[] src, int srcIndex) {\n+\t\tif (LITTLE_ENDIAN) {\n+\t\t\tUNSAFE.copyMemory(src, BYTE_ARRAY_OFFSET + srcIndex, vector,\n+\t\t\t\t\tINT_ARRAY_OFFSET + rowId * 4L, count * 4L);\n+\t\t} else {\n+\t\t\tlong srcOffset = srcIndex + BYTE_ARRAY_OFFSET;\n+\t\t\tfor (int i = 0; i < count; ++i, srcOffset += 4) {\n+\t\t\t\tvector[i + rowId] = Integer.reverseBytes(UNSAFE.getInt(src, srcOffset));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setInts(int rowId, int count, int value) {\n+\t\tif (rowId + count - 1 >= vector.length) {\n+\t\t\tthrow new RuntimeException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MTM3NQ==", "bodyText": "Nice catch!", "url": "https://github.com/apache/flink/pull/11275#discussion_r386341375", "createdAt": "2020-03-02T11:34:12Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapIntVector.java", "diffHunk": "@@ -47,4 +49,45 @@ public int getInt(int i) {\n \t\t\treturn dictionary.decodeToInt(dictionaryIds.vector[i]);\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic void setInt(int i, int value) {\n+\t\tif (i >= vector.length) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\tvector[i] = value;\n+\t}\n+\n+\t@Override\n+\tpublic void setIntsFromBinary(int rowId, int count, byte[] src, int srcIndex) {\n+\t\tif (LITTLE_ENDIAN) {\n+\t\t\tUNSAFE.copyMemory(src, BYTE_ARRAY_OFFSET + srcIndex, vector,\n+\t\t\t\t\tINT_ARRAY_OFFSET + rowId * 4L, count * 4L);\n+\t\t} else {\n+\t\t\tlong srcOffset = srcIndex + BYTE_ARRAY_OFFSET;\n+\t\t\tfor (int i = 0; i < count; ++i, srcOffset += 4) {\n+\t\t\t\tvector[i + rowId] = Integer.reverseBytes(UNSAFE.getInt(src, srcOffset));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setInts(int rowId, int count, int value) {\n+\t\tif (rowId + count - 1 >= vector.length) {\n+\t\t\tthrow new RuntimeException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ=="}, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0NDY4Mg==", "bodyText": "I think we can remove this check, leave the exception produced by Java array.", "url": "https://github.com/apache/flink/pull/11275#discussion_r386344682", "createdAt": "2020-03-02T11:42:28Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapIntVector.java", "diffHunk": "@@ -47,4 +49,45 @@ public int getInt(int i) {\n \t\t\treturn dictionary.decodeToInt(dictionaryIds.vector[i]);\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic void setInt(int i, int value) {\n+\t\tif (i >= vector.length) {\n+\t\t\tthrow new RuntimeException();\n+\t\t}\n+\t\tvector[i] = value;\n+\t}\n+\n+\t@Override\n+\tpublic void setIntsFromBinary(int rowId, int count, byte[] src, int srcIndex) {\n+\t\tif (LITTLE_ENDIAN) {\n+\t\t\tUNSAFE.copyMemory(src, BYTE_ARRAY_OFFSET + srcIndex, vector,\n+\t\t\t\t\tINT_ARRAY_OFFSET + rowId * 4L, count * 4L);\n+\t\t} else {\n+\t\t\tlong srcOffset = srcIndex + BYTE_ARRAY_OFFSET;\n+\t\t\tfor (int i = 0; i < count; ++i, srcOffset += 4) {\n+\t\t\t\tvector[i + rowId] = Integer.reverseBytes(UNSAFE.getInt(src, srcOffset));\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void setInts(int rowId, int count, int value) {\n+\t\tif (rowId + count - 1 >= vector.length) {\n+\t\t\tthrow new RuntimeException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MDkzNQ=="}, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjc2MzA4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapTimestampVector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOToxNjo0M1rOFwYMng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTo0MDozM1rOFwcjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MjQxNA==", "bodyText": "Why do we need the precision parameter?", "url": "https://github.com/apache/flink/pull/11275#discussion_r386272414", "createdAt": "2020-03-02T09:16:43Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapTimestampVector.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.heap;\n+\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.dataformat.vector.writable.WritableTimestampVector;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.dataformat.SqlTimestamp.fromEpochMillis;\n+\n+/**\n+ * This class represents a nullable byte column vector.\n+ */\n+public class HeapTimestampVector extends AbstractHeapVector implements WritableTimestampVector {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final long[] milliseconds;\n+\tprivate final int[] nanoOfMilliseconds;\n+\n+\tpublic HeapTimestampVector(int len) {\n+\t\tsuper(len);\n+\t\tthis.milliseconds = new long[len];\n+\t\tthis.nanoOfMilliseconds = new int[len];\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int i, int precision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0Mzg4NQ==", "bodyText": "We can give the opportunity to optimize nanoOfMilliseconds.", "url": "https://github.com/apache/flink/pull/11275#discussion_r386343885", "createdAt": "2020-03-02T11:40:33Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/heap/HeapTimestampVector.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.heap;\n+\n+import org.apache.flink.table.dataformat.SqlTimestamp;\n+import org.apache.flink.table.dataformat.vector.writable.WritableTimestampVector;\n+\n+import java.util.Arrays;\n+\n+import static org.apache.flink.table.dataformat.SqlTimestamp.fromEpochMillis;\n+\n+/**\n+ * This class represents a nullable byte column vector.\n+ */\n+public class HeapTimestampVector extends AbstractHeapVector implements WritableTimestampVector {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final long[] milliseconds;\n+\tprivate final int[] nanoOfMilliseconds;\n+\n+\tpublic HeapTimestampVector(int len) {\n+\t\tsuper(len);\n+\t\tthis.milliseconds = new long[len];\n+\t\tthis.nanoOfMilliseconds = new int[len];\n+\t}\n+\n+\t@Override\n+\tpublic SqlTimestamp getTimestamp(int i, int precision) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3MjQxNA=="}, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjgwNzA4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/writable/WritableBytesVector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwOTozMDozM1rOFwYnQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMTozOToyMFrOFwciAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTIzMw==", "bodyText": "Rename to setBytes?", "url": "https://github.com/apache/flink/pull/11275#discussion_r386279233", "createdAt": "2020-03-02T09:30:33Z", "author": {"login": "lirui-apache"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/writable/WritableBytesVector.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.writable;\n+\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+\n+/**\n+ * Writable {@link BytesColumnVector}.\n+ */\n+public interface WritableBytesVector extends WritableColumnVector, BytesColumnVector {\n+\n+\t/**\n+\t * Set byte[] at rowId with the provided value.\n+\t */\n+\tvoid appendBytes(int rowId, byte[] value, int offset, int length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0MzQyNg==", "bodyText": "I'll add comment.\nNote: Must append values according to the order of rowId, can not random append.", "url": "https://github.com/apache/flink/pull/11275#discussion_r386343426", "createdAt": "2020-03-02T11:39:20Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/dataformat/vector/writable/WritableBytesVector.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.dataformat.vector.writable;\n+\n+import org.apache.flink.table.dataformat.vector.BytesColumnVector;\n+\n+/**\n+ * Writable {@link BytesColumnVector}.\n+ */\n+public interface WritableBytesVector extends WritableColumnVector, BytesColumnVector {\n+\n+\t/**\n+\t * Set byte[] at rowId with the provided value.\n+\t */\n+\tvoid appendBytes(int rowId, byte[] value, int offset, int length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI3OTIzMw=="}, "originalCommit": {"oid": "2df6f64a7d1a62836521bd02ec0ce77fe2b14efb"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 827, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}