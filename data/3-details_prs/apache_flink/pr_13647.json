{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzOTc4MzYw", "number": 13647, "title": "[FLINK-19640] Enable sorting inputs for batch", "bodyText": "What is the purpose of the change\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode.\nVerifying this change\nAdded tests in StreamGraphGeneratorBatchExecutionTest\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented) -> will be documented along with the RuntimeExecutionMode", "createdAt": "2020-10-15T09:59:16Z", "url": "https://github.com/apache/flink/pull/13647", "merged": true, "mergeCommit": {"oid": "2ff3b771cbb091e1f43686dd8e176cea6d435501"}, "closed": true, "closedAt": "2020-10-16T13:55:32Z", "author": {"login": "dawidwys"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSu2h8ABqjM4ODA2NzIwODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTCj6dABqjM4ODUzNDc1MzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b72a8e18f9a4419b43a5bfbaa7b65d4eed3c62a7", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/b72a8e18f9a4419b43a5bfbaa7b65d4eed3c62a7", "committedDate": "2020-10-15T09:54:40Z", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode."}, "afterCommit": {"oid": "d85a53422831da189f70548103872742f65b9a8d", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/d85a53422831da189f70548103872742f65b9a8d", "committedDate": "2020-10-15T10:02:53Z", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MjM2MDU4", "url": "https://github.com/apache/flink/pull/13647#pullrequestreview-509236058", "createdAt": "2020-10-15T10:28:18Z", "commit": {"oid": "d85a53422831da189f70548103872742f65b9a8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyODoxOFrOHiBQ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMDoyODoxOFrOHiBQ0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzNDMyMQ==", "bodyText": "I would probably call this an ITCase since we test the interplay of a lot of parts. But I'm also ok to leave it as is because we currently don't have unit tests for individual TransformTranslators, which could be used to test this behaviour.", "url": "https://github.com/apache/flink/pull/13647#discussion_r505434321", "createdAt": "2020-10-15T10:28:18Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamGraphGeneratorBatchExecutionTest.java", "diffHunk": "@@ -0,0 +1,506 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.graph;\n+\n+import org.apache.flink.api.common.typeinfo.BasicTypeInfo;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.ExecutionOptions;\n+import org.apache.flink.streaming.api.RuntimeExecutionMode;\n+import org.apache.flink.streaming.api.datastream.DataStreamSink;\n+import org.apache.flink.streaming.api.datastream.DataStreamSource;\n+import org.apache.flink.streaming.api.datastream.MultipleConnectedStreams;\n+import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.api.functions.KeyedProcessFunction;\n+import org.apache.flink.streaming.api.functions.co.KeyedCoProcessFunction;\n+import org.apache.flink.streaming.api.functions.sink.DiscardingSink;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperator;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorFactory;\n+import org.apache.flink.streaming.api.operators.AbstractStreamOperatorV2;\n+import org.apache.flink.streaming.api.operators.ChainingStrategy;\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.operators.sorted.state.BatchExecutionStateBackend;\n+import org.apache.flink.streaming.api.transformations.KeyedMultipleInputTransformation;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.util.Collector;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for generating correct properties for sorting inputs in {@link RuntimeExecutionMode#BATCH} runtime mode.\n+ */\n+public class StreamGraphGeneratorBatchExecutionTest extends TestLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85a53422831da189f70548103872742f65b9a8d"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b53de2187eb33ab41f625d318673d9cc0d101c59", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/b53de2187eb33ab41f625d318673d9cc0d101c59", "committedDate": "2020-10-15T13:12:55Z", "message": "Add logs and fix adjusting chaining strategy"}, "afterCommit": {"oid": "d7b0469116070f12c0c2c3c15fb034978250e4b1", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/d7b0469116070f12c0c2c3c15fb034978250e4b1", "committedDate": "2020-10-15T13:27:52Z", "message": "Add logs and fix adjusting chaining strategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NDA4OTc1", "url": "https://github.com/apache/flink/pull/13647#pullrequestreview-509408975", "createdAt": "2020-10-15T13:57:52Z", "commit": {"oid": "d7b0469116070f12c0c2c3c15fb034978250e4b1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzo1Nzo1MlrOHiJNmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNDowMjoyOVrOHiJcZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2NDU2OQ==", "bodyText": "Why not making the following like:\nCollection<Integer> ids = translateInternal(transformation, context);\nif (isKeyed && !isInputSelectable) {\n\t\ttransformation.setChainingStrategy(ChainingStrategy.HEAD);\n\t\tBatchExecutionUtils.applySortingInputs(transformation.getId(), context);\n\t}\n\nThis will make the if () ... check being checked once. The same for the other translators.", "url": "https://github.com/apache/flink/pull/13647#discussion_r505564569", "createdAt": "2020-10-15T13:57:52Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java", "diffHunk": "@@ -51,7 +54,26 @@\n \tprotected Collection<Integer> translateForBatchInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n \t\t\tfinal Context context) {\n-\t\treturn translateInternal(transformation, context);\n+\t\tboolean isKeyed = transformation instanceof KeyedMultipleInputTransformation;\n+\t\tboolean isInputSelectable = isInputSelectable(transformation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b0469116070f12c0c2c3c15fb034978250e4b1"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU2ODM1Nw==", "bodyText": "From what I understand, the flow is that we set the batch StateBackend and the timerService in the translator to the StreamNode so that the StreamJobGraphGenerator can pick it up. Why not setting the state backend and the timer service at the StreamGraph level (e.g. in. the StreamGraphGenerator.configureStreamGraph()) from where the StreamJobGraphGenerator can pick it up.\nThis seems to be able to reduce the changes in the StreamNode and the StreamJobGraphGenerator.\nWDYT @dawidwys ?", "url": "https://github.com/apache/flink/pull/13647#discussion_r505568357", "createdAt": "2020-10-15T14:02:29Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java", "diffHunk": "@@ -336,15 +341,30 @@ public void setUserHash(String userHash) {\n \t\tthis.userHash = userHash;\n \t}\n \n-\t@VisibleForTesting\n \tpublic void setSortedInputs(boolean sortedInputs) {\n \t\tthis.sortedInputs = sortedInputs;\n \t}\n \n-\tboolean getSortedInputs() {\n+\tpublic boolean getSortedInputs() {\n \t\treturn sortedInputs;\n \t}\n \n+\tpublic void setStateBackend(StateBackend stateBackend) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b0469116070f12c0c2c3c15fb034978250e4b1"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7b0469116070f12c0c2c3c15fb034978250e4b1", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/d7b0469116070f12c0c2c3c15fb034978250e4b1", "committedDate": "2020-10-15T13:27:52Z", "message": "Add logs and fix adjusting chaining strategy"}, "afterCommit": {"oid": "c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "committedDate": "2020-10-15T14:56:09Z", "message": "Revert setting state backend per streamNode & combine setting chaining with sorting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/c4626c3bb479f5d57e904ee6953c3c3c1369fcd3", "committedDate": "2020-10-15T14:56:09Z", "message": "Revert setting state backend per streamNode & combine setting chaining with sorting"}, "afterCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07", "committedDate": "2020-10-15T14:59:43Z", "message": "Revert setting state backend per streamNode & combine setting chaining with sorting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjI2MzI3", "url": "https://github.com/apache/flink/pull/13647#pullrequestreview-510226327", "createdAt": "2020-10-16T07:42:49Z", "commit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo0Mjo0OVrOHir2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo0Njo1NlrOHisCkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjAwMw==", "bodyText": "Do we want to expose these to the user? Even if it is a power user. I lean more towards these being set depending on the selected execution mode in the StreamGraphGenerator (see #13656). This will also remove the need of passing the configuration to the generator", "url": "https://github.com/apache/flink/pull/13647#discussion_r506132003", "createdAt": "2020-10-16T07:42:49Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/StreamExecutionEnvironment.java", "diffHunk": "@@ -792,6 +792,12 @@ public void configure(ReadableConfig configuration, ClassLoader classLoader) {\n \t\t\t});\n \t\tconfig.configure(configuration, classLoader);\n \t\tcheckpointCfg.configure(configuration);\n+\t\tconfiguration.getOptional(ExecutionOptions.SORT_INPUTS).ifPresent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMjU2Ng==", "bodyText": "I think this change is not needed anymore.", "url": "https://github.com/apache/flink/pull/13647#discussion_r506132566", "createdAt": "2020-10-16T07:43:31Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamNode.java", "diffHunk": "@@ -336,12 +336,11 @@ public void setUserHash(String userHash) {\n \t\tthis.userHash = userHash;\n \t}\n \n-\t@VisibleForTesting\n \tpublic void setSortedInputs(boolean sortedInputs) {\n \t\tthis.sortedInputs = sortedInputs;\n \t}\n \n-\tboolean getSortedInputs() {\n+\tpublic boolean getSortedInputs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMzI5Nw==", "bodyText": "What about leaving some empty lines above and below?", "url": "https://github.com/apache/flink/pull/13647#discussion_r506133297", "createdAt": "2020-10-16T07:44:19Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -112,7 +117,7 @@\n \tprivate final ExecutionConfig executionConfig;\n \n \tprivate final CheckpointConfig checkpointConfig;\n-\n+\tprivate final ReadableConfig configuration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzMzc5NA==", "bodyText": "What about \"Setting chaining strategy to HEAD for operator {}, because of the BATCH execution mode.\"?", "url": "https://github.com/apache/flink/pull/13647#discussion_r506133794", "createdAt": "2020-10-16T07:44:55Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/BatchExecutionUtils.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.translators;\n+\n+import org.apache.flink.configuration.ExecutionOptions;\n+import org.apache.flink.core.memory.ManagedMemoryUseCase;\n+import org.apache.flink.streaming.api.graph.StreamNode;\n+import org.apache.flink.streaming.api.graph.TransformationTranslator;\n+import org.apache.flink.streaming.api.operators.ChainingStrategy;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.StreamOperator;\n+import org.apache.flink.streaming.api.operators.StreamOperatorFactory;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A utility class for applying sorting inputs.\n+ */\n+class BatchExecutionUtils {\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(BatchExecutionUtils.class);\n+\n+\tstatic void applySortingInputs(\n+\t\t\tint transformationId,\n+\t\t\tTransformationTranslator.Context context) {\n+\t\tStreamNode node = context.getStreamGraph().getStreamNode(transformationId);\n+\t\tboolean sortInputs = context.getGraphGeneratorConfig().get(ExecutionOptions.SORT_INPUTS);\n+\t\tboolean isInputSelectable = isInputSelectable(node);\n+\n+\t\tadjustChainingStrategy(node);\n+\n+\t\tcheckState(\n+\t\t\t!isInputSelectable || !sortInputs,\n+\t\t\t\"Batch state backend and sorting inputs are not supported in graphs with an InputSelectable operator.\"\n+\t\t);\n+\n+\t\tif (sortInputs) {\n+\t\t\tLOG.debug(\"Enabling sorting inputs for an operator {}.\", node);\n+\t\t\tnode.setSortedInputs(true);\n+\t\t\tMap<ManagedMemoryUseCase, Integer> operatorScopeUseCaseWeights = new HashMap<>();\n+\t\t\toperatorScopeUseCaseWeights.put(ManagedMemoryUseCase.BATCH_OP, 1);\n+\t\t\tnode.setManagedMemoryUseCaseWeights(\n+\t\t\t\toperatorScopeUseCaseWeights,\n+\t\t\t\tCollections.emptySet()\n+\t\t\t);\n+\t\t}\n+\t}\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static boolean isInputSelectable(StreamNode node) {\n+\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+\t\tClass<? extends StreamOperator> operatorClass = node.getOperatorFactory()\n+\t\t\t.getStreamOperatorClass(classLoader);\n+\t\treturn InputSelectable.class.isAssignableFrom(operatorClass);\n+\t}\n+\n+\tprivate static void adjustChainingStrategy(StreamNode node) {\n+\t\tStreamOperatorFactory<?> operatorFactory = node.getOperatorFactory();\n+\t\tChainingStrategy currentChainingStrategy = operatorFactory.getChainingStrategy();\n+\t\tswitch (currentChainingStrategy) {\n+\t\t\tcase ALWAYS:\n+\t\t\tcase HEAD_WITH_SOURCES:\n+\t\t\t\tLOG.debug(\n+\t\t\t\t\t\"Setting chaining strategy for an operator {}, because of the BATCH execution mode.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzNDYzMA==", "bodyText": "In some places you use the name ids and in other translators nodeIds. What about make them uniform?", "url": "https://github.com/apache/flink/pull/13647#discussion_r506134630", "createdAt": "2020-10-16T07:46:07Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/translators/MultiInputTransformationTranslator.java", "diffHunk": "@@ -51,7 +51,12 @@\n \tprotected Collection<Integer> translateForBatchInternal(\n \t\t\tfinal AbstractMultipleInputTransformation<OUT> transformation,\n \t\t\tfinal Context context) {\n-\t\treturn translateInternal(transformation, context);\n+\t\tCollection<Integer> ids = translateInternal(transformation, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEzNTE4NQ==", "bodyText": "Given that we also set the timerService, maybe give a more descriptive name?", "url": "https://github.com/apache/flink/pull/13647#discussion_r506135185", "createdAt": "2020-10-16T07:46:56Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -239,13 +259,28 @@ private void configureStreamGraph(final StreamGraph graph) {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n+\t\t\tsetBatchStateBackend(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.EAGER);\n \t\t}\n \t}\n \n+\tprivate void setBatchStateBackend(StreamGraph graph) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe46fe2aa40e2b29e0c68aa37e9c99fe9f713e07"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjY5OTc3", "url": "https://github.com/apache/flink/pull/13647#pullrequestreview-510269977", "createdAt": "2020-10-16T08:44:01Z", "commit": {"oid": "c25c53d285406037a409fc0c95fba9eaff59b98a"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODo0NDowMlrOHiuynQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODo0NjowN1rOHiu4Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MDI1Mw==", "bodyText": "\"Using BATCH execution state backend and timer service.\"", "url": "https://github.com/apache/flink/pull/13647#discussion_r506180253", "createdAt": "2020-10-16T08:44:02Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -239,13 +261,28 @@ private void configureStreamGraph(final StreamGraph graph) {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n+\t\t\tsetBatchStateBackendAndTimerService(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.EAGER);\n \t\t}\n \t}\n \n+\tprivate void setBatchStateBackendAndTimerService(StreamGraph graph) {\n+\t\tboolean useStateBackend = configuration.get(ExecutionOptions.USE_BATCH_STATE_BACKEND);\n+\t\tboolean sortInputs = configuration.get(ExecutionOptions.SORT_INPUTS);\n+\t\tcheckState(\n+\t\t\t!useStateBackend || sortInputs,\n+\t\t\t\"Batch state backend requires the sorted inputs to be enabled!\");\n+\n+\t\tif (useStateBackend) {\n+\t\t\tLOG.debug(\"Using BATCH execution state backend.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c25c53d285406037a409fc0c95fba9eaff59b98a"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MTcxOA==", "bodyText": "Nit: Can't we move https://github.com/apache/flink/pull/13647/files#diff-54c8fe1971ffb5aa55b3f829f43aa02c7765b62c397f0c943b4049a4fd1e3a62R253 to the else{} block in lines 266...? I find it more clear than write and then overwrite.", "url": "https://github.com/apache/flink/pull/13647#discussion_r506181718", "createdAt": "2020-10-16T08:46:07Z", "author": {"login": "kl0u"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamGraphGenerator.java", "diffHunk": "@@ -239,13 +261,28 @@ private void configureStreamGraph(final StreamGraph graph) {\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.LAZY_FROM_SOURCES_WITH_BATCH_SLOT_REQUEST);\n \t\t\tsetDefaultBufferTimeout(-1);\n+\t\t\tsetBatchStateBackendAndTimerService(graph);\n \t\t} else {\n \t\t\tgraph.setAllVerticesInSameSlotSharingGroupByDefault(true);\n \t\t\tgraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n \t\t\tgraph.setScheduleMode(ScheduleMode.EAGER);\n \t\t}\n \t}\n \n+\tprivate void setBatchStateBackendAndTimerService(StreamGraph graph) {\n+\t\tboolean useStateBackend = configuration.get(ExecutionOptions.USE_BATCH_STATE_BACKEND);\n+\t\tboolean sortInputs = configuration.get(ExecutionOptions.SORT_INPUTS);\n+\t\tcheckState(\n+\t\t\t!useStateBackend || sortInputs,\n+\t\t\t\"Batch state backend requires the sorted inputs to be enabled!\");\n+\n+\t\tif (useStateBackend) {\n+\t\t\tLOG.debug(\"Using BATCH execution state backend.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE4MDI1Mw=="}, "originalCommit": {"oid": "c25c53d285406037a409fc0c95fba9eaff59b98a"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/35cf6029b7ca1bb7ab8b94ded23891c92a224dda", "committedDate": "2020-10-16T08:53:55Z", "message": "[hotfix] Fixes in CEP operator\n\nThe commit fixes two issues in the CEP operator:\n1. It tries to migrate the old state only in case when the state was\nrestored. The problem here was that it uses applyToAllKeys for restore\nwhich might not be available e.g. in the BATCH runtime mode.\n2. It does not cache the last seen watermark any longer, but depends on\nthe result of TimerService#currentWatermark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "committedDate": "2020-10-16T09:00:23Z", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c25c53d285406037a409fc0c95fba9eaff59b98a", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/c25c53d285406037a409fc0c95fba9eaff59b98a", "committedDate": "2020-10-16T08:03:34Z", "message": "Comments addressed"}, "afterCommit": {"oid": "bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "author": {"user": {"login": "dawidwys", "name": "Dawid Wysakowicz"}}, "url": "https://github.com/apache/flink/commit/bf5fdddb8d47ae1379a6a472d67496dae9f031a8", "committedDate": "2020-10-16T09:00:23Z", "message": "[FLINK-19640] Enable sorting inputs for batch\n\nThis PR adds feature flags for enabling/disabling the sorting inputs and\nspecial types of a state backend and a timer service for BATCH execution\nruntime. Those options are enabled by default for BATCH runtime\nexecution mode."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3297, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}