{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MTgxNzMy", "number": 12037, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0NToyNFrOD7Dzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NjowMFrOD8MkUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU0OTQyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0NToyNFrOGTKrNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0NToyNFrOGTKrNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTAzMQ==", "bodyText": "add a test for scenario: \"operator id not found\"", "url": "https://github.com/apache/flink/pull/12037#discussion_r422751031", "createdAt": "2020-05-11T02:45:24Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +163,36 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationResponser.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationResponser.Request<String> request =\n+\t\t\tnew TestingCoordinationResponser.Request<>(payload);\n+\t\tfinal TestingCoordinationResponser.Response<String> response =\n+\t\t\t(TestingCoordinationResponser.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationResponser.Request<String> request =\n+\t\t\tnew TestingCoordinationResponser.Request<>(payload);\n+\t\tfinal CompletableFuture<CoordinationResponse> future =\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\n+\t\tassertThat(future, futureFailedWith(IllegalArgumentException.class));\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU1NDEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0ODo0NFrOGTKtyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo0ODo0NFrOGTKtyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MTY4OQ==", "bodyText": "I think we should throw FlinkException, this situation is the same as the operation does not exist", "url": "https://github.com/apache/flink/pull/12037#discussion_r422751689", "createdAt": "2020-05-11T02:48:44Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SchedulerBase.java", "diffHunk": "@@ -933,6 +941,22 @@ public void deliverOperatorEventToCoordinator(\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(\n+\t\t\tOperatorID operator,\n+\t\t\tCoordinationRequest request) throws FlinkException {\n+\t\tOperatorCoordinator coordinator = coordinatorMap.get(operator);\n+\t\tif (coordinator instanceof CoordinationResponser) {\n+\t\t\treturn CompletableFuture.completedFuture(\n+\t\t\t\t((CoordinationResponser) coordinator).handleCoordinationRequest(request));\n+\t\t} else if (coordinator != null) {\n+\t\t\treturn FutureUtils.completedExceptionally(\n+\t\t\t\tnew IllegalArgumentException(\"Coordinator of operator \" + operator + \" cannot handle client event\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU2MjY2OnYy", "diffSide": "RIGHT", "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo1NDo0N1rOGTKyoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo1NDo0N1rOGTKyoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MjkyOA==", "bodyText": "throw CompletionException like getAccumulators method", "url": "https://github.com/apache/flink/pull/12037#discussion_r422752928", "createdAt": "2020-05-11T02:54:47Z", "author": {"login": "godfreyhe"}, "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "diffHunk": "@@ -411,6 +418,36 @@ public void close() {\n \t\treturn triggerSavepoint(jobId, savepointDirectory, false);\n \t}\n \n+\t@Override\n+\tpublic CompletableFuture<CoordinationResponse> sendCoordinationRequest(\n+\t\t\tJobID jobId,\n+\t\t\tOperatorID operatorId,\n+\t\t\tCoordinationRequest request) {\n+\t\tClientCoordinationHeaders headers = ClientCoordinationHeaders.getInstance();\n+\t\tClientCoordinationMessageParameters params = new ClientCoordinationMessageParameters();\n+\t\tparams.jobPathParameter.resolve(jobId);\n+\t\tparams.operatorPathParameter.resolve(operatorId);\n+\n+\t\tSerializedValue<CoordinationRequest> serializedRequest;\n+\t\ttry {\n+\t\t\tserializedRequest = new SerializedValue<>(request);\n+\t\t} catch (IOException e) {\n+\t\t\treturn FutureUtils.completedExceptionally(e);\n+\t\t}\n+\n+\t\tClientCoordinationRequestBody requestBody = new ClientCoordinationRequestBody(serializedRequest);\n+\t\treturn sendRequest(headers, params, requestBody).thenApply(\n+\t\t\tresponseBody -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn responseBody\n+\t\t\t\t\t\t.getSerializedCoordinationResponse()\n+\t\t\t\t\t\t.deserializeValue(getClass().getClassLoader());\n+\t\t\t\t} catch (IOException | ClassNotFoundException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to deserialize coordination response\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU3MjAyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationResponser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowMTo1NFrOGTK4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzoxNzoyNVrOGTLEzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDQwMw==", "bodyText": "rename to CoordinationHandler ? similar to OperatorEventHandler", "url": "https://github.com/apache/flink/pull/12037#discussion_r422754403", "createdAt": "2020-05-11T03:01:54Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationResponser.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+/**\n+ * Coordinator interface which can handle {@link CoordinationRequest}s\n+ * and response with {@link CoordinationResponse}s to the client.\n+ */\n+public interface CoordinationResponser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NzU4MA==", "bodyText": "CoordinationRequestHandler seems to be better", "url": "https://github.com/apache/flink/pull/12037#discussion_r422757580", "createdAt": "2020-05-11T03:17:25Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationResponser.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+/**\n+ * Coordinator interface which can handle {@link CoordinationRequest}s\n+ * and response with {@link CoordinationResponse}s to the client.\n+ */\n+public interface CoordinationResponser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NDQwMw=="}, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjU3OTE2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequester.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowNjozM1rOGTK8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMzowNjozM1rOGTK8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1NTQxMw==", "bodyText": "rename to CoordinationRequestGateway? similar to OperatorEventGateway", "url": "https://github.com/apache/flink/pull/12037#discussion_r422755413", "createdAt": "2020-05-11T03:06:33Z", "author": {"login": "godfreyhe"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequester.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06e5db9e64a2b39d857babff53d401697b87262"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjk4MDc4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequestGateway.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDowNDoyOVrOGT1Rog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDozMjowM1rOGT1r0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODk5NA==", "bodyText": "I'm not sure this interface is necessary, it seems we can add the method to JobClient. You can see almost each time when a class implements JobClient, it will also implement this interface", "url": "https://github.com/apache/flink/pull/12037#discussion_r423448994", "createdAt": "2020-05-12T04:04:29Z", "author": {"login": "KurtYoung"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequestGateway.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequestGateway {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NTY5OA==", "bodyText": "Coordinators are used internally so we do not want to expose this to the users. As JobClient is a public interface, we prefer not to modify it.", "url": "https://github.com/apache/flink/pull/12037#discussion_r423455698", "createdAt": "2020-05-12T04:32:03Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/operators/coordination/CoordinationRequestGateway.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.operators.coordination;\n+\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Client interface which sends out a {@link CoordinationRequest} and\n+ * expects for a {@link CoordinationResponse} from a {@link OperatorCoordinator}.\n+ */\n+public interface CoordinationRequestGateway {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ0ODk5NA=="}, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzAwMjM0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNDoxODozNVrOGT1enQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzoxNjowOVrOGT5J3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw==", "bodyText": "throw RestHandlerException instead? Will the RuntimeException crash the rest server?", "url": "https://github.com/apache/flink/pull/12037#discussion_r423452317", "createdAt": "2020-05-12T04:18:35Z", "author": {"login": "KurtYoung"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to construct response body\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1NTc3NQ==", "bodyText": "It won't. See JobAccumulatorsHandler for similar behaviors.", "url": "https://github.com/apache/flink/pull/12037#discussion_r423455775", "createdAt": "2020-05-12T04:32:21Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to construct response body\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw=="}, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxMjU0Mg==", "bodyText": "Throwing RuntimeExceptions is an implementation error. REST handlers should always throw a RestHandlerException, as only then a proper error is returned to the user, instead of a generic 500 Internal Server Error.", "url": "https://github.com/apache/flink/pull/12037#discussion_r423512542", "createdAt": "2020-05-12T07:16:09Z", "author": {"login": "zentol"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));\n+\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\tthrow new RuntimeException(\"Failed to construct response body\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ1MjMxNw=="}, "originalCommit": {"oid": "8317107cba32a7102c19e920b2a9932e40bbc5a7"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTMwMDU5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterGateway.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzowOTozNFrOGUf86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzowNDoyMVrOGUkDHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODIwMw==", "bodyText": "I think this should add to JobMasterOperatorEventGateway", "url": "https://github.com/apache/flink/pull/12037#discussion_r424148203", "createdAt": "2020-05-13T03:09:34Z", "author": {"login": "KurtYoung"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterGateway.java", "diffHunk": "@@ -271,4 +275,19 @@ void heartbeatFromTaskManager(\n \t * @return The updated aggregate\n \t */\n \tCompletableFuture<Object> updateGlobalAggregate(String aggregateName, Object aggregand, byte[] serializedAggregationFunction);\n+\n+\t/**\n+\t * Deliver a coordination request to a specified coordinator and return the response.\n+\t *\n+\t * @param operatorId identifying the coordinator to receive the request\n+\t * @param serializedRequest serialized request to deliver\n+\t * @return A future containing the response.\n+\t *         The response will fail with a {@link org.apache.flink.util.FlinkException}\n+\t *         if the task is not running, or no operator/coordinator exists for the given ID,\n+\t *         or the coordinator cannot handle client events.\n+\t */\n+\tCompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77942bf5fcfee886d9dfd16633c41be3ca8d0f7d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNTMyNg==", "bodyText": "No. JobMasterOperatorEventGateway is for OperatorEvents. CoordinationRequest and CoordinationResponse are different from OperatorEvent.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424215326", "createdAt": "2020-05-13T07:04:21Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/JobMasterGateway.java", "diffHunk": "@@ -271,4 +275,19 @@ void heartbeatFromTaskManager(\n \t * @return The updated aggregate\n \t */\n \tCompletableFuture<Object> updateGlobalAggregate(String aggregateName, Object aggregand, byte[] serializedAggregationFunction);\n+\n+\t/**\n+\t * Deliver a coordination request to a specified coordinator and return the response.\n+\t *\n+\t * @param operatorId identifying the coordinator to receive the request\n+\t * @param serializedRequest serialized request to deliver\n+\t * @return A future containing the response.\n+\t *         The response will fail with a {@link org.apache.flink.util.FlinkException}\n+\t *         if the task is not running, or no operator/coordinator exists for the given ID,\n+\t *         or the coordinator cannot handle client events.\n+\t */\n+\tCompletableFuture<CoordinationResponse> deliverCoordinationRequestToCoordinator(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0ODIwMw=="}, "originalCommit": {"oid": "77942bf5fcfee886d9dfd16633c41be3ca8d0f7d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY2ODcxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozMDoyOVrOGU3S_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzowNjoyMlrOGVOuiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw==", "bodyText": "Why are we wrapping coordinationResponse into a SerializedValue here? If it is in order to support user code classes, then it should not work because ClientCoordinationHandler should not have access to the user code class loader.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424530687", "createdAt": "2020-05-13T15:30:29Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2NDAxMQ==", "bodyText": "The wrapping would have to happen on a component which has access to the user code classes.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424664011", "createdAt": "2020-05-13T18:59:48Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMjcwNQ==", "bodyText": "Because CoordinationResponse is an object and should be serialized in order to be passed back to the client through the REST API. Is there a more proper way to achieve this?", "url": "https://github.com/apache/flink/pull/12037#discussion_r424832705", "createdAt": "2020-05-14T02:16:03Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkxNDU2OQ==", "bodyText": "Makes sense. I guess we will use another layer of SerializedValue if the user requests a user code object from the OperatorCoordinator which is then initialized on the JM.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424914569", "createdAt": "2020-05-14T07:06:22Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/handler/job/coordination/ClientCoordinationHandler.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.rest.handler.job.coordination;\n+\n+import org.apache.flink.api.common.JobID;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.runtime.jobgraph.OperatorID;\n+import org.apache.flink.runtime.operators.coordination.CoordinationRequest;\n+import org.apache.flink.runtime.operators.coordination.CoordinationResponse;\n+import org.apache.flink.runtime.rest.handler.AbstractRestHandler;\n+import org.apache.flink.runtime.rest.handler.HandlerRequest;\n+import org.apache.flink.runtime.rest.handler.RestHandlerException;\n+import org.apache.flink.runtime.rest.messages.JobIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.MessageHeaders;\n+import org.apache.flink.runtime.rest.messages.OperatorIDPathParameter;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationMessageParameters;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationRequestBody;\n+import org.apache.flink.runtime.rest.messages.job.coordination.ClientCoordinationResponseBody;\n+import org.apache.flink.runtime.webmonitor.RestfulGateway;\n+import org.apache.flink.runtime.webmonitor.retriever.GatewayRetriever;\n+import org.apache.flink.util.SerializedValue;\n+\n+import org.apache.flink.shaded.netty4.io.netty.handler.codec.http.HttpResponseStatus;\n+\n+import javax.annotation.Nonnull;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Handler that receives the coordination requests from the client and returns the response from the coordinator.\n+ */\n+public class ClientCoordinationHandler extends AbstractRestHandler<RestfulGateway, ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> {\n+\n+\tpublic ClientCoordinationHandler(\n+\t\t\tGatewayRetriever<? extends RestfulGateway> leaderRetriever,\n+\t\t\tTime timeout,\n+\t\t\tMap<String, String> responseHeaders,\n+\t\t\tMessageHeaders<ClientCoordinationRequestBody, ClientCoordinationResponseBody, ClientCoordinationMessageParameters> messageHeaders) {\n+\t\tsuper(leaderRetriever, timeout, responseHeaders, messageHeaders);\n+\t}\n+\n+\t@Override\n+\tprotected CompletableFuture<ClientCoordinationResponseBody> handleRequest(\n+\t\t\t@Nonnull HandlerRequest<ClientCoordinationRequestBody, ClientCoordinationMessageParameters> request,\n+\t\t\t@Nonnull RestfulGateway gateway) throws RestHandlerException {\n+\t\tJobID jobId = request.getPathParameter(JobIDPathParameter.class);\n+\t\tOperatorID operatorId = request.getPathParameter(OperatorIDPathParameter.class);\n+\t\tSerializedValue<CoordinationRequest> serializedRequest =\n+\t\t\trequest.getRequestBody().getSerializedCoordinationRequest();\n+\t\tCompletableFuture<CoordinationResponse> responseFuture =\n+\t\t\tgateway.deliverCoordinationRequestToCoordinator(jobId, operatorId, serializedRequest, timeout);\n+\t\treturn responseFuture.thenApply(\n+\t\t\tcoordinationResponse -> {\n+\t\t\t\ttry {\n+\t\t\t\t\treturn new ClientCoordinationResponseBody(new SerializedValue<>(coordinationResponse));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzMDY4Nw=="}, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY5MzIwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozNTo1NVrOGU3igQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjowOTowOFrOGVJnxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDY1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testDeliveringClientRequestToResponser() throws Exception {\n          \n          \n            \n            \tpublic void testDeliveringClientRequestToResponder() throws Exception {", "url": "https://github.com/apache/flink/pull/12037#discussion_r424534657", "createdAt": "2020-05-13T15:35:55Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMDkxOQ==", "bodyText": "This should be testDeliveringClientRequestToRequestHandler now as the name of the interface is changed to CoordinationRequestHandler.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424830919", "createdAt": "2020-05-14T02:09:08Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDY1Nw=="}, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzY5NDU5OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTozNjoxOFrOGU3jdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjowOTozMVrOGVJoHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDkwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n          \n          \n            \n            \tpublic void testDeliveringClientRequestToNonResponder() throws Exception {", "url": "https://github.com/apache/flink/pull/12037#discussion_r424534900", "createdAt": "2020-05-13T15:36:18Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDgzMTAwNA==", "bodyText": "This should be testDeliveringClientRequestToNonRequestHandler now as the name of the interface is changed to CoordinationRequestHandler.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424831004", "createdAt": "2020-05-14T02:09:31Z", "author": {"login": "tsreaper"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzNDkwMA=="}, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ2ODkxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NTozM1rOGU_Shg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NTozM1rOGU_Shg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTYzOA==", "bodyText": "I think we could use CommonTestUtils.assertThrows here.", "url": "https://github.com/apache/flink/pull/12037#discussion_r424661638", "createdAt": "2020-05-13T18:55:33Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"cannot handle client event\"));\n+\t\t\tthrow e;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDQ3MDU2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NjowMFrOGU_Tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxODo1NjowMFrOGU_Tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY2MTkwNw==", "bodyText": "same here with CommonTestUtils.assertThrows", "url": "https://github.com/apache/flink/pull/12037#discussion_r424661907", "createdAt": "2020-05-13T18:56:00Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/operators/coordination/OperatorCoordinatorSchedulerTest.java", "diffHunk": "@@ -163,6 +165,56 @@ public void taskTaskManagerFailuresAreReportedBack() throws Exception {\n \t\tassertThat(result, futureFailedWith(TestException.class));\n \t}\n \n+\t@Test\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic void testDeliveringClientRequestToResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingCoordinationRequestHandler.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\t\tfinal TestingCoordinationRequestHandler.Response<String> response =\n+\t\t\t(TestingCoordinationRequestHandler.Response<String>)\n+\t\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request).get();\n+\n+\t\tassertEquals(payload, response.getPayload());\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonResponser() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(testOperatorId, request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"cannot handle client event\"));\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n+\t@Test(expected = FlinkException.class)\n+\tpublic void testDeliveringClientRequestToNonExistingCoordinator() throws Exception {\n+\t\tfinal OperatorCoordinator.Provider provider = new TestingOperatorCoordinator.Provider(testOperatorId);\n+\t\tfinal DefaultScheduler scheduler = createScheduler(provider);\n+\n+\t\tfinal String payload = \"testing payload\";\n+\t\tfinal TestingCoordinationRequestHandler.Request<String> request =\n+\t\t\tnew TestingCoordinationRequestHandler.Request<>(payload);\n+\n+\t\ttry {\n+\t\t\tscheduler.deliverCoordinationRequestToCoordinator(new OperatorID(), request);\n+\t\t} catch (FlinkException e) {\n+\t\t\tAssert.assertTrue(e.getMessage().contains(\"does not exist\"));\n+\t\t\tthrow e;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dcc0c0f63898b3b1ab8f230257165c1b9497130"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1373, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}