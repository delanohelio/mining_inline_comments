{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODE3NzMz", "number": 11670, "title": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment", "bodyText": "What is the purpose of the change\nThis pull request will return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment.\nBrief change log\n\nAdd JobExecutionResult for return result of method execute in Python ExecutionEnvironment and TableEnvironment.\n\nVerifying this change\n\nAdded test_execute method to verify JobExecutionResult for return result of execute in Python ExecutionEnvironment.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-04-08T12:27:00Z", "url": "https://github.com/apache/flink/pull/11670", "merged": true, "mergeCommit": {"oid": "86156259e774bf3f3b29ac3ed1007ea97501de55"}, "closed": true, "closedAt": "2020-04-11T02:19:54Z", "author": {"login": "SteNicholas"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV2o5RAFqTM5MDUwNjYzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWRPA0ABqjMyMjE4NzQ5MTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTA2NjM0", "url": "https://github.com/apache/flink/pull/11670#pullrequestreview-390506634", "createdAt": "2020-04-09T05:50:47Z", "commit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1MDo0N1rOGDKdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyNzoxMFrOGDLJ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MDIyMQ==", "bodyText": "Also add this class in the __init__.py file under common folder.", "url": "https://github.com/apache/flink/pull/11670#discussion_r405970221", "createdAt": "2020-04-09T05:50:47Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MzQ1Nw==", "bodyText": "Add to_string method.", "url": "https://github.com/apache/flink/pull/11670#discussion_r405973457", "createdAt": "2020-04-09T06:01:45Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NTM4OA==", "bodyText": "It is strange to pass a java desired_unit here. I think it's ok to remove the desired_unit in Python and always return the net execution time in milliseconds. What do you think?", "url": "https://github.com/apache/flink/pull/11670#discussion_r405975388", "createdAt": "2020-04-09T06:08:04Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDQ1Mg==", "bodyText": "_j_job_execution_result.get_all_accumulator_results() => _j_job_execution_result.getAllAccumulatorResults().\nIt's better to add tests to verify all the methods in this class.", "url": "https://github.com/apache/flink/pull/11670#discussion_r405980452", "createdAt": "2020-04-09T06:23:46Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):\n+        \"\"\"\n+        Gets the net execution time of the job, i.e., the execution time in the parallel system,\n+        without the pre-flight steps like the optimizer in a desired time unit.\n+\n+        :param desired_unit: the unit of the NetRuntime, optional.\n+        :return: The net execution time in the desired unit.\n+        \"\"\"\n+        if desired_unit is None:\n+            return self._j_job_execution_result.getNetRuntime()\n+        else:\n+            return self._j_job_execution_result.getNetRuntime(desired_unit)\n+\n+    def get_accumulator_result(self, accumulator_name):\n+        \"\"\"\n+        Gets the accumulator with the given name. Returns {@code null}, if no accumulator with\n+        that name was produced.\n+\n+        :param accumulator_name: The name of the accumulator.\n+        :return: The value of the accumulator with the given name.\n+        \"\"\"\n+        return self._j_job_execution_result.getAccumulatorResult(accumulator_name)\n+\n+    def get_all_accumulator_results(self):\n+        \"\"\"\n+        Gets all accumulators produced by the job. The map contains the accumulators as\n+        mappings from the accumulator name to the accumulator value.\n+\n+        :return: The dict which the keys are names of the accumulator and the values\n+                 are values of the accumulator produced by the job.\n+        \"\"\"\n+        j_result_map = self._j_job_execution_result.get_all_accumulator_results()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTY3Mw==", "bodyText": "There is no null type in Python, return None instead if accumulatorName does not exist in the accumulatorResults", "url": "https://github.com/apache/flink/pull/11670#discussion_r405981673", "createdAt": "2020-04-09T06:27:10Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):\n+        \"\"\"\n+        Gets the net execution time of the job, i.e., the execution time in the parallel system,\n+        without the pre-flight steps like the optimizer in a desired time unit.\n+\n+        :param desired_unit: the unit of the NetRuntime, optional.\n+        :return: The net execution time in the desired unit.\n+        \"\"\"\n+        if desired_unit is None:\n+            return self._j_job_execution_result.getNetRuntime()\n+        else:\n+            return self._j_job_execution_result.getNetRuntime(desired_unit)\n+\n+    def get_accumulator_result(self, accumulator_name):\n+        \"\"\"\n+        Gets the accumulator with the given name. Returns {@code null}, if no accumulator with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ec312f46976fe77216fd43010f8b21f81b6551b", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/3ec312f46976fe77216fd43010f8b21f81b6551b", "committedDate": "2020-04-10T06:31:40Z", "message": "job execution result"}, "afterCommit": {"oid": "67026e1df0e3c6d4805f66d9e8152e14d5483968", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/67026e1df0e3c6d4805f66d9e8152e14d5483968", "committedDate": "2020-04-10T06:54:48Z", "message": "[FLINK-16761][python] Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "67026e1df0e3c6d4805f66d9e8152e14d5483968", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/67026e1df0e3c6d4805f66d9e8152e14d5483968", "committedDate": "2020-04-10T06:54:48Z", "message": "[FLINK-16761][python] Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment"}, "afterCommit": {"oid": "75f42f5ac29f8742a61d18bc5560764a61d958ed", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/75f42f5ac29f8742a61d18bc5560764a61d958ed", "committedDate": "2020-04-10T06:59:11Z", "message": "[FLINK-16761][python] Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75f42f5ac29f8742a61d18bc5560764a61d958ed", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/75f42f5ac29f8742a61d18bc5560764a61d958ed", "committedDate": "2020-04-10T06:59:11Z", "message": "[FLINK-16761][python] Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment"}, "afterCommit": {"oid": "6e737ceac139b698fd57719068ec9640d1ec78a7", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/6e737ceac139b698fd57719068ec9640d1ec78a7", "committedDate": "2020-04-10T07:01:12Z", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c12d282f260effdc59c56089664f2e5c12aba16a", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/c12d282f260effdc59c56089664f2e5c12aba16a", "committedDate": "2020-04-10T13:35:33Z", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment#"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e737ceac139b698fd57719068ec9640d1ec78a7", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/6e737ceac139b698fd57719068ec9640d1ec78a7", "committedDate": "2020-04-10T07:01:12Z", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment"}, "afterCommit": {"oid": "c12d282f260effdc59c56089664f2e5c12aba16a", "author": {"user": {"login": "SteNicholas", "name": "SteNicholas"}}, "url": "https://github.com/apache/flink/commit/c12d282f260effdc59c56089664f2e5c12aba16a", "committedDate": "2020-04-10T13:35:33Z", "message": "[FLINK-16761][python]Return JobExecutionResult for Python ExecutionEnvironment and TableEnvironment#"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1978, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}