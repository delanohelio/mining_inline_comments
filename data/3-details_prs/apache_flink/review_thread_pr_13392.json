{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MTA4NjE5", "number": 13392, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0OToxOVrOEkdOQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjo0NDoyOFrOElfIew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjYyOTc5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0OToxOVrOHTaTEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0OToxOVrOHTaTEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNTg1OQ==", "bodyText": "The default value is 0ms now. It would be better to mention the meaning of default value, otherwise it's confusing.\n\nDefault value is 0, which means detecting source idleness is not enabled.", "url": "https://github.com/apache/flink/pull/13392#discussion_r490115859", "createdAt": "2020-09-17T09:49:19Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "diffHunk": "@@ -60,9 +60,10 @@\n \t// ------------------------------------------------------------------------\n \n \t@Documentation.TableOption(execMode = Documentation.ExecMode.STREAMING)\n-\tpublic static final ConfigOption<String> TABLE_EXEC_SOURCE_IDLE_TIMEOUT =\n+\tpublic static final ConfigOption<Duration> TABLE_EXEC_SOURCE_IDLE_TIMEOUT =\n \t\tkey(\"table.exec.source.idle-timeout\")\n-\t\t\t.defaultValue(\"-1 ms\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofMillis(0))\n \t\t\t.withDescription(\"When a source do not receive any elements for the timeout time, \" +\n \t\t\t\t\"it will be marked as temporarily idle. This allows downstream \" +\n \t\t\t\t\"tasks to advance their watermarks without the need to wait for \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3af04d02472f93c5d49e0262ce7957cdd910707"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjYzNTg5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/StreamCommonSubGraphBasedOptimizer.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1MDo1NVrOHTaW1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1MDo1NVrOHTaW1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNjgyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    val miniBatchLatency =config.getConfiguration.get(\n          \n          \n            \n                    val miniBatchLatency = config.getConfiguration.get(", "url": "https://github.com/apache/flink/pull/13392#discussion_r490116821", "createdAt": "2020-09-17T09:50:55Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/StreamCommonSubGraphBasedOptimizer.scala", "diffHunk": "@@ -61,8 +60,8 @@ class StreamCommonSubGraphBasedOptimizer(planner: StreamPlanner)\n \n       val miniBatchInterval: MiniBatchInterval = if (config.getConfiguration.getBoolean(\n         ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ENABLED)) {\n-        val miniBatchLatency = getMillisecondFromConfigDuration(config,\n-          ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ALLOW_LATENCY)\n+        val miniBatchLatency =config.getConfiguration.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3af04d02472f93c5d49e0262ce7957cdd910707"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjY0MzQ0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1Mjo1M1rOHTabRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1Mjo1M1rOHTabRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNzk1OQ==", "bodyText": "It's not allowed to use -1ms for Duration type. We can use .noDefaultValue() to keep the same behavior as before. You can use tableConfig.getConfiguration.getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).isPresent to check whether it is set.", "url": "https://github.com/apache/flink/pull/13392#discussion_r490117959", "createdAt": "2020-09-17T09:52:53Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "diffHunk": "@@ -179,9 +178,10 @@ object WindowEmitStrategy {\n \n   // It is a experimental config, will may be removed later.\n   @Experimental\n-  val TABLE_EXEC_EMIT_EARLY_FIRE_DELAY: ConfigOption[String] =\n+  val TABLE_EXEC_EMIT_EARLY_FIRE_DELAY: ConfigOption[Duration] =\n   key(\"table.exec.emit.early-fire.delay\")\n-      .noDefaultValue\n+      .durationType()\n+      .defaultValue(Duration.ofMillis(-1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3af04d02472f93c5d49e0262ce7957cdd910707"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjY0MzY1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1Mjo1NlrOHTabbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1Mjo1NlrOHTabbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNzk5OA==", "bodyText": "We can use .noDefaultValue() to keep the same behavior as before.", "url": "https://github.com/apache/flink/pull/13392#discussion_r490117998", "createdAt": "2020-09-17T09:52:56Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "diffHunk": "@@ -198,9 +198,10 @@ object WindowEmitStrategy {\n \n   // It is a experimental config, will may be removed later.\n   @Experimental\n-  val TABLE_EXEC_EMIT_LATE_FIRE_DELAY: ConfigOption[String] =\n+  val TABLE_EXEC_EMIT_LATE_FIRE_DELAY: ConfigOption[Duration] =\n   key(\"table.exec.emit.late-fire.delay\")\n-      .noDefaultValue\n+      .durationType()\n+      .defaultValue(Duration.ofMillis(-1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3af04d02472f93c5d49e0262ce7957cdd910707"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTEzMjQ2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToxNjowMlrOHUE6KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMTo0OTozNFrOHU5_rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzk5Mg==", "bodyText": "What about refactoring the earlyFireDelay to Duration type? Then we can simplify the above code to\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                val earlyFireDelay: JLong = if (tableConfig.getConfiguration\n          \n          \n            \n                  .getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).isPresent) {\n          \n          \n            \n                  tableConfig.getConfiguration\n          \n          \n            \n                    .get(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).toMillis\n          \n          \n            \n                } else {\n          \n          \n            \n                  null\n          \n          \n            \n                }\n          \n          \n            \n            val earlyFireDelay: Duration = tableConfig.getConfiguration\n          \n          \n            \n                  .getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY)\n          \n          \n            \n                  .orElse(null)\n          \n      \n    \n    \n  \n\nI think Duration is more concise than Long.", "url": "https://github.com/apache/flink/pull/13392#discussion_r490813992", "createdAt": "2020-09-18T09:16:02Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "diffHunk": "@@ -153,12 +152,22 @@ object WindowEmitStrategy {\n     }\n     val enableEarlyFireDelay = tableConfig.getConfiguration.getBoolean(\n       TABLE_EXEC_EMIT_EARLY_FIRE_ENABLED)\n-    val earlyFireDelay = getMillisecondFromConfigDuration(\n-      tableConfig, TABLE_EXEC_EMIT_EARLY_FIRE_DELAY)\n+    val earlyFireDelay: JLong = if (tableConfig.getConfiguration\n+      .getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).isPresent) {\n+      tableConfig.getConfiguration\n+        .get(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).toMillis\n+    } else {\n+      null\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4edfc577e0d1d20203de931dbbab1ac4ab2d621"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY4Mzc1OA==", "bodyText": "Yes, Duration type for earlyFireDelay and lateFireDelay will be more reasonable.\nI have updated, thanks for reviewing again.", "url": "https://github.com/apache/flink/pull/13392#discussion_r491683758", "createdAt": "2020-09-20T11:49:34Z", "author": {"login": "wangxlong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/utils/WindowEmitStrategy.scala", "diffHunk": "@@ -153,12 +152,22 @@ object WindowEmitStrategy {\n     }\n     val enableEarlyFireDelay = tableConfig.getConfiguration.getBoolean(\n       TABLE_EXEC_EMIT_EARLY_FIRE_ENABLED)\n-    val earlyFireDelay = getMillisecondFromConfigDuration(\n-      tableConfig, TABLE_EXEC_EMIT_EARLY_FIRE_DELAY)\n+    val earlyFireDelay: JLong = if (tableConfig.getConfiguration\n+      .getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).isPresent) {\n+      tableConfig.getConfiguration\n+        .get(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).toMillis\n+    } else {\n+      null\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzk5Mg=="}, "originalCommit": {"oid": "b4edfc577e0d1d20203de931dbbab1ac4ab2d621"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzQyNzA3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/WindowAggregateITCase.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjo0MzowMFrOHU_X5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo1NjoyN1rOHVRRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MTg3OQ==", "bodyText": "Please update this too.", "url": "https://github.com/apache/flink/pull/13392#discussion_r491771879", "createdAt": "2020-09-21T02:43:00Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/WindowAggregateITCase.scala", "diffHunk": "@@ -349,15 +349,20 @@ class WindowAggregateITCase(mode: StateBackendMode)\n \n   private def withLateFireDelay(tableConfig: TableConfig, interval: Time): Unit = {\n     val intervalInMillis = interval.toMilliseconds\n-    val preLateFireInterval = getMillisecondFromConfigDuration(tableConfig,\n-      TABLE_EXEC_EMIT_LATE_FIRE_DELAY)\n+    val preLateFireInterval = if (tableConfig.getConfiguration\n+      .getOptional(TABLE_EXEC_EMIT_LATE_FIRE_DELAY).isPresent) {\n+      tableConfig.getConfiguration.get(\n+        TABLE_EXEC_EMIT_LATE_FIRE_DELAY).toMillis\n+    } else {\n+      null\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ae80979b126523815401a76c4dac86a06d9e23c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA2NTA1Mg==", "bodyText": "Updated.", "url": "https://github.com/apache/flink/pull/13392#discussion_r492065052", "createdAt": "2020-09-21T13:56:27Z", "author": {"login": "wangxlong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/sql/WindowAggregateITCase.scala", "diffHunk": "@@ -349,15 +349,20 @@ class WindowAggregateITCase(mode: StateBackendMode)\n \n   private def withLateFireDelay(tableConfig: TableConfig, interval: Time): Unit = {\n     val intervalInMillis = interval.toMilliseconds\n-    val preLateFireInterval = getMillisecondFromConfigDuration(tableConfig,\n-      TABLE_EXEC_EMIT_LATE_FIRE_DELAY)\n+    val preLateFireInterval = if (tableConfig.getConfiguration\n+      .getOptional(TABLE_EXEC_EMIT_LATE_FIRE_DELAY).isPresent) {\n+      tableConfig.getConfiguration.get(\n+        TABLE_EXEC_EMIT_LATE_FIRE_DELAY).toMillis\n+    } else {\n+      null\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MTg3OQ=="}, "originalCommit": {"oid": "0ae80979b126523815401a76c4dac86a06d9e23c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzQyODQzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/MiniBatchIntervalInferTest.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjo0NDoyOFrOHU_Yrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMzo1NjoxM1rOHVRQXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MjA3OA==", "bodyText": "Pleaes update this too.", "url": "https://github.com/apache/flink/pull/13392#discussion_r491772078", "createdAt": "2020-09-21T02:44:28Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/MiniBatchIntervalInferTest.scala", "diffHunk": "@@ -426,15 +428,20 @@ class MiniBatchIntervalInferTest extends TableTestBase {\n \n   private def withEarlyFireDelay(tableConfig: TableConfig, interval: Time): Unit = {\n     val intervalInMillis = interval.toMilliseconds\n-    val preEarlyFireInterval = TableConfigUtils.getMillisecondFromConfigDuration(\n-      tableConfig, TABLE_EXEC_EMIT_EARLY_FIRE_DELAY)\n+    val preEarlyFireInterval = if (tableConfig.getConfiguration\n+      .getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).isPresent) {\n+      tableConfig.getConfiguration\n+        .get(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).toMillis\n+    } else {\n+      null\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ae80979b126523815401a76c4dac86a06d9e23c"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA2NDg2MQ==", "bodyText": "Updated.", "url": "https://github.com/apache/flink/pull/13392#discussion_r492064861", "createdAt": "2020-09-21T13:56:13Z", "author": {"login": "wangxlong"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/MiniBatchIntervalInferTest.scala", "diffHunk": "@@ -426,15 +428,20 @@ class MiniBatchIntervalInferTest extends TableTestBase {\n \n   private def withEarlyFireDelay(tableConfig: TableConfig, interval: Time): Unit = {\n     val intervalInMillis = interval.toMilliseconds\n-    val preEarlyFireInterval = TableConfigUtils.getMillisecondFromConfigDuration(\n-      tableConfig, TABLE_EXEC_EMIT_EARLY_FIRE_DELAY)\n+    val preEarlyFireInterval = if (tableConfig.getConfiguration\n+      .getOptional(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).isPresent) {\n+      tableConfig.getConfiguration\n+        .get(TABLE_EXEC_EMIT_EARLY_FIRE_DELAY).toMillis\n+    } else {\n+      null\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc3MjA3OA=="}, "originalCommit": {"oid": "0ae80979b126523815401a76c4dac86a06d9e23c"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 277, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}