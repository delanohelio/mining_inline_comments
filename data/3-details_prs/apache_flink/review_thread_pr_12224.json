{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NDE5MTgy", "number": 12224, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjowODozOVrOD9dhYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjowODozOVrOD9dhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzczNDA5OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-hadoop-bulk/src/main/java/org/apache/flink/formats/hadoop/bulk/committer/HadoopRenameFileCommitter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjowODozOVrOGW-D_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDo1MzozNFrOGXMJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczODY4Ng==", "bodyText": "commit should throw exception.\ncommitAfterRecovery should keep silently.\n\nDo I understand correctly? Can you add tests?\nMaybe I provided a bad example before. checkFileExists should be assertFileExists.", "url": "https://github.com/apache/flink/pull/12224#discussion_r426738686", "createdAt": "2020-05-18T16:08:39Z", "author": {"login": "JingsongLi"}, "path": "flink-formats/flink-hadoop-bulk/src/main/java/org/apache/flink/formats/hadoop/bulk/committer/HadoopRenameFileCommitter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.hadoop.bulk.committer;\n+\n+import org.apache.flink.formats.hadoop.bulk.HadoopFileCommitter;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.io.IOException;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * The Hadoop file committer that directly rename the in-progress file\n+ * to the target file. For FileSystem like S3, renaming may lead to\n+ * additional copies.\n+ */\n+public class HadoopRenameFileCommitter implements HadoopFileCommitter {\n+\n+\tprivate final Configuration configuration;\n+\n+\tprivate final Path targetFilePath;\n+\n+\tprivate final Path inProgressFilePath;\n+\n+\tpublic HadoopRenameFileCommitter(Configuration configuration, Path targetFilePath) {\n+\t\tthis.configuration = configuration;\n+\t\tthis.targetFilePath = targetFilePath;\n+\t\tthis.inProgressFilePath = generateInProgressFilePath();\n+\t}\n+\n+\t@Override\n+\tpublic Path getTargetFilePath() {\n+\t\treturn targetFilePath;\n+\t}\n+\n+\t@Override\n+\tpublic Path getInProgressFilePath() {\n+\t\treturn inProgressFilePath;\n+\t}\n+\n+\t@Override\n+\tpublic void preCommit() {\n+\t\t// Do nothing.\n+\t}\n+\n+\t@Override\n+\tpublic void commit() throws IOException {\n+\t\trename(false);\n+\t}\n+\n+\t@Override\n+\tpublic void commitAfterRecovery() throws IOException {\n+\t\trename(true);\n+\t}\n+\n+\tprivate void rename(boolean checkFileExists) throws IOException {\n+\t\tFileSystem fileSystem = FileSystem.get(targetFilePath.toUri(), configuration);\n+\n+\t\tif (checkFileExists && !fileSystem.exists(inProgressFilePath)) {\n+\t\t\tthrow new IOException(String.format(\"In progress file(%s) not exists.\", inProgressFilePath));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f7289627bf6830b87866e75fb0cb270e064956"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk2OTM4MQ==", "bodyText": "I have fixed the check & added the tests", "url": "https://github.com/apache/flink/pull/12224#discussion_r426969381", "createdAt": "2020-05-19T00:53:34Z", "author": {"login": "gaoyunhaii"}, "path": "flink-formats/flink-hadoop-bulk/src/main/java/org/apache/flink/formats/hadoop/bulk/committer/HadoopRenameFileCommitter.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.hadoop.bulk.committer;\n+\n+import org.apache.flink.formats.hadoop.bulk.HadoopFileCommitter;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+\n+import java.io.IOException;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * The Hadoop file committer that directly rename the in-progress file\n+ * to the target file. For FileSystem like S3, renaming may lead to\n+ * additional copies.\n+ */\n+public class HadoopRenameFileCommitter implements HadoopFileCommitter {\n+\n+\tprivate final Configuration configuration;\n+\n+\tprivate final Path targetFilePath;\n+\n+\tprivate final Path inProgressFilePath;\n+\n+\tpublic HadoopRenameFileCommitter(Configuration configuration, Path targetFilePath) {\n+\t\tthis.configuration = configuration;\n+\t\tthis.targetFilePath = targetFilePath;\n+\t\tthis.inProgressFilePath = generateInProgressFilePath();\n+\t}\n+\n+\t@Override\n+\tpublic Path getTargetFilePath() {\n+\t\treturn targetFilePath;\n+\t}\n+\n+\t@Override\n+\tpublic Path getInProgressFilePath() {\n+\t\treturn inProgressFilePath;\n+\t}\n+\n+\t@Override\n+\tpublic void preCommit() {\n+\t\t// Do nothing.\n+\t}\n+\n+\t@Override\n+\tpublic void commit() throws IOException {\n+\t\trename(false);\n+\t}\n+\n+\t@Override\n+\tpublic void commitAfterRecovery() throws IOException {\n+\t\trename(true);\n+\t}\n+\n+\tprivate void rename(boolean checkFileExists) throws IOException {\n+\t\tFileSystem fileSystem = FileSystem.get(targetFilePath.toUri(), configuration);\n+\n+\t\tif (checkFileExists && !fileSystem.exists(inProgressFilePath)) {\n+\t\t\tthrow new IOException(String.format(\"In progress file(%s) not exists.\", inProgressFilePath));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjczODY4Ng=="}, "originalCommit": {"oid": "c4f7289627bf6830b87866e75fb0cb270e064956"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1362, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}