{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NDIyNDcw", "number": 12945, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMTo0MVrOERcj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMTo0MVrOERcj1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzI5MTcyOnYy", "diffSide": "RIGHT", "path": "flink-streaming-scala/src/main/scala/org/apache/flink/streaming/api/scala/ConnectedStreams.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMTo0MVrOG2KOSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzoxNToxN1rOG2UAyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0Mzc4Ng==", "bodyText": "nit: I like the simplicity of the code but I think stacktraces are harder to parse with anonymous classes thrown in the mix. Just a thought, though.", "url": "https://github.com/apache/flink/pull/12945#discussion_r459443786", "createdAt": "2020-07-23T13:21:41Z", "author": {"login": "aljoscha"}, "path": "flink-streaming-scala/src/main/scala/org/apache/flink/streaming/api/scala/ConnectedStreams.scala", "diffHunk": "@@ -300,19 +300,22 @@ class ConnectedStreams[IN1, IN2](javaStream: JavaCStream[IN1, IN2]) {\n    * @param fun2 The second stream's key function\n    * @return The key-grouped connected streams\n    */\n-  def keyBy[K1: TypeInformation, K2: TypeInformation](fun1: IN1 => K1, fun2: IN2 => K2):\n+  def keyBy[KEY: TypeInformation](fun1: IN1 => KEY, fun2: IN2 => KEY):\n       ConnectedStreams[IN1, IN2] = {\n \n-    val keyType1 = implicitly[TypeInformation[K1]]\n-    val keyType2 = implicitly[TypeInformation[K2]]\n-    \n+    val keyType = implicitly[TypeInformation[KEY]]\n+\n     val cleanFun1 = clean(fun1)\n     val cleanFun2 = clean(fun2)\n-    \n-    val keyExtractor1 = new KeySelectorWithType[IN1, K1](cleanFun1, keyType1)\n-    val keyExtractor2 = new KeySelectorWithType[IN2, K2](cleanFun2, keyType2)\n-    \n-    asScalaStream(javaStream.keyBy(keyExtractor1, keyExtractor2))\n+\n+    val keyExtractor1 = new KeySelector[IN1, KEY] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "996f5157c9bbf1c48989fe92187038549df0e0fd"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNDE2OA==", "bodyText": "I reverted the internal class.\nMy main goal here was to pass the key type explicitly rather than through the ResultTypeQueryable, which requires running TypeExtractor.", "url": "https://github.com/apache/flink/pull/12945#discussion_r459604168", "createdAt": "2020-07-23T17:15:17Z", "author": {"login": "dawidwys"}, "path": "flink-streaming-scala/src/main/scala/org/apache/flink/streaming/api/scala/ConnectedStreams.scala", "diffHunk": "@@ -300,19 +300,22 @@ class ConnectedStreams[IN1, IN2](javaStream: JavaCStream[IN1, IN2]) {\n    * @param fun2 The second stream's key function\n    * @return The key-grouped connected streams\n    */\n-  def keyBy[K1: TypeInformation, K2: TypeInformation](fun1: IN1 => K1, fun2: IN2 => K2):\n+  def keyBy[KEY: TypeInformation](fun1: IN1 => KEY, fun2: IN2 => KEY):\n       ConnectedStreams[IN1, IN2] = {\n \n-    val keyType1 = implicitly[TypeInformation[K1]]\n-    val keyType2 = implicitly[TypeInformation[K2]]\n-    \n+    val keyType = implicitly[TypeInformation[KEY]]\n+\n     val cleanFun1 = clean(fun1)\n     val cleanFun2 = clean(fun2)\n-    \n-    val keyExtractor1 = new KeySelectorWithType[IN1, K1](cleanFun1, keyType1)\n-    val keyExtractor2 = new KeySelectorWithType[IN2, K2](cleanFun2, keyType2)\n-    \n-    asScalaStream(javaStream.keyBy(keyExtractor1, keyExtractor2))\n+\n+    val keyExtractor1 = new KeySelector[IN1, KEY] {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0Mzc4Ng=="}, "originalCommit": {"oid": "996f5157c9bbf1c48989fe92187038549df0e0fd"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4971, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}