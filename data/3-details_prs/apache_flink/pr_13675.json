{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NDI0NzA0", "number": 13675, "title": "[FLINK-19655][flink-table-runtime-blink]  add super.open() and write unit test for temporal process join", "bodyText": "What is the purpose of the change\nThe ultimate goal of this PR is to fix a bug where NPE is thrown when using blink planner and TemporalTableFunction after setting IdleStateRetentionTime .TemporalProcessTimeJoinOperator should initialize timer service for processing time.\nSee #FLINK-19655\nBrief change log\n\nAdd super.open() in LegacyTemporalProcessTimeJoinOperator#open() to solve NPE\nWrite two unit test for LegacyTemporalProcessTimeJoinOperator to verify the code worked fine\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded test that validates that:\n\n1.test proctime temporal join when non state clear.\n2.test proctime temporal join when set state clear.\n\n\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving):  no\nThe serializers:   no\nThe runtime per-record code paths (performance sensitive):  no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper:  no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature?  no\nIf yes, how is the feature documented?  not documented", "createdAt": "2020-10-18T06:57:15Z", "url": "https://github.com/apache/flink/pull/13675", "merged": true, "mergeCommit": {"oid": "daeda68edf3466a3f9347c25bdf866ef4f620396"}, "closed": true, "closedAt": "2020-10-22T03:18:07Z", "author": {"login": "seunjjs"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdT6CsdAFqTUxMTM2MjI5Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU5O0rAFqTUxNDMzMDkyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMzYyMjk2", "url": "https://github.com/apache/flink/pull/13675#pullrequestreview-511362296", "createdAt": "2020-10-19T01:29:34Z", "commit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMToyOTozNFrOHj0kfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMTozOTowNlrOHj08fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyMzUxOQ==", "bodyText": "single blank line", "url": "https://github.com/apache/flink/pull/13675#discussion_r507323519", "createdAt": "2020-10-19T01:29:34Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join.temporal;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.util.KeyedTwoInputStreamOperatorTestHarness;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.generated.GeneratedJoinCondition;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.runtime.util.BinaryRowDataKeySelector;\n+import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.VarCharType;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDAxNw==", "bodyText": "move function call of super to the beginning", "url": "https://github.com/apache/flink/pull/13675#discussion_r507324017", "createdAt": "2020-10-19T01:30:21Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java", "diffHunk": "@@ -73,6 +73,7 @@ public void open() throws Exception {\n \t\tthis.outRow = new JoinedRowData();\n \t\t// consider watermark from left stream only.\n \t\tsuper.processWatermark2(Watermark.MAX_WATERMARK);\n+\t\tsuper.open();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDg1MA==", "bodyText": "final int maxRententionTime = minRetentionTime * 3 / 2\nwe can reuse  maxRententionTime in following code", "url": "https://github.com/apache/flink/pull/13675#discussion_r507324850", "createdAt": "2020-10-19T01:31:44Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join.temporal;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.util.KeyedTwoInputStreamOperatorTestHarness;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.generated.GeneratedJoinCondition;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.runtime.util.BinaryRowDataKeySelector;\n+import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.VarCharType;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+\n+\n+/**\n+ * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n+ */\n+public class LegacyTemporalProcessTimeJoinOperatorTest {\n+\n+\tprivate int keyIdx = 0;\n+\tprivate InternalTypeInfo<RowData> rowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate TypeInformation<RowData> keyType = InternalTypeInfo.ofFields();\n+\tprivate BinaryRowDataKeySelector keySelector = new BinaryRowDataKeySelector(\n+\t\t\tnew int[]{keyIdx},\n+\t\t\trowType.toRowFieldTypes());\n+\tprivate InternalTypeInfo<RowData> outputRowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(outputRowType.toRowFieldTypes());\n+\tprivate String funcCode =\n+\t\t\t\"public class ProcTimeTemporalJoinCondition extends org.apache.flink.api.common.functions.AbstractRichFunction implements org.apache.flink.table.runtime.generated.JoinCondition {\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    public ProcTimeTemporalJoinCondition(Object[] reference) {\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    @Override\\n\"\n+\t\t\t\t\t+ \"    public boolean apply(org.apache.flink.table.data.RowData in1, org.apache.flink.table.data.RowData in2) {\\n\"\n+\t\t\t\t\t+ \"        return true;\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"}\\n\";\n+\n+\tprivate GeneratedJoinCondition joinCondition = new GeneratedJoinCondition(\n+\t\t\t\"ProcTimeTemporalJoinCondition\",\n+\t\t\tfuncCode,\n+\t\t\tnew Object[0]);\n+\n+\t/** test proctime temporal join when non state clear. **/\n+\t@Test\n+\tpublic void testProcTimeTemporalJoin() throws Exception {\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\t0,\n+\t\t\t\t0);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(4);\n+\t\ttestHarness.processElement2(insertRecord(1L, \"1a4\"));\n+\n+\t\ttestHarness.setProcessingTime(5);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\t\texpectedOutput.add(insertRecord(1L, \"1a5\", 1L, \"1a4\"));\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\t/** test proctime temporal join when set state clear. **/\n+\t@Test\n+\tpublic void testStateCleanUp() throws Exception {\n+\t\tfinal int minRetentionTime = 10;\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\tminRetentionTime,\n+\t\t\t\tminRetentionTime * 3 / 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNjU4Mg==", "bodyText": "and I believe TemporalRowTimeJoinOperator.java exists same problem, could you help fix?", "url": "https://github.com/apache/flink/pull/13675#discussion_r507326582", "createdAt": "2020-10-19T01:34:27Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperator.java", "diffHunk": "@@ -73,6 +73,7 @@ public void open() throws Exception {\n \t\tthis.outRow = new JoinedRowData();\n \t\t// consider watermark from left stream only.\n \t\tsuper.processWatermark2(Watermark.MAX_WATERMARK);\n+\t\tsuper.open();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyNDAxNw=="}, "originalCommit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMyOTY2Mg==", "bodyText": "checkstyle: one blank line at the end of file", "url": "https://github.com/apache/flink/pull/13675#discussion_r507329662", "createdAt": "2020-10-19T01:39:06Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/join/temporal/LegacyTemporalProcessTimeJoinOperatorTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.join.temporal;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.streaming.util.KeyedTwoInputStreamOperatorTestHarness;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.generated.GeneratedJoinCondition;\n+import org.apache.flink.table.runtime.typeutils.InternalTypeInfo;\n+import org.apache.flink.table.runtime.util.BinaryRowDataKeySelector;\n+import org.apache.flink.table.runtime.util.RowDataHarnessAssertor;\n+import org.apache.flink.table.types.logical.BigIntType;\n+import org.apache.flink.table.types.logical.VarCharType;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.apache.flink.table.runtime.util.StreamRecordUtils.insertRecord;\n+\n+\n+/**\n+ * Test for {@link LegacyTemporalProcessTimeJoinOperator}.\n+ */\n+public class LegacyTemporalProcessTimeJoinOperatorTest {\n+\n+\tprivate int keyIdx = 0;\n+\tprivate InternalTypeInfo<RowData> rowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate TypeInformation<RowData> keyType = InternalTypeInfo.ofFields();\n+\tprivate BinaryRowDataKeySelector keySelector = new BinaryRowDataKeySelector(\n+\t\t\tnew int[]{keyIdx},\n+\t\t\trowType.toRowFieldTypes());\n+\tprivate InternalTypeInfo<RowData> outputRowType = InternalTypeInfo.ofFields(\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH),\n+\t\t\tnew BigIntType(),\n+\t\t\tnew VarCharType(VarCharType.MAX_LENGTH));\n+\tprivate RowDataHarnessAssertor assertor = new RowDataHarnessAssertor(outputRowType.toRowFieldTypes());\n+\tprivate String funcCode =\n+\t\t\t\"public class ProcTimeTemporalJoinCondition extends org.apache.flink.api.common.functions.AbstractRichFunction implements org.apache.flink.table.runtime.generated.JoinCondition {\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    public ProcTimeTemporalJoinCondition(Object[] reference) {\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"\\n\"\n+\t\t\t\t\t+ \"    @Override\\n\"\n+\t\t\t\t\t+ \"    public boolean apply(org.apache.flink.table.data.RowData in1, org.apache.flink.table.data.RowData in2) {\\n\"\n+\t\t\t\t\t+ \"        return true;\\n\"\n+\t\t\t\t\t+ \"    }\\n\"\n+\t\t\t\t\t+ \"}\\n\";\n+\n+\tprivate GeneratedJoinCondition joinCondition = new GeneratedJoinCondition(\n+\t\t\t\"ProcTimeTemporalJoinCondition\",\n+\t\t\tfuncCode,\n+\t\t\tnew Object[0]);\n+\n+\t/** test proctime temporal join when non state clear. **/\n+\t@Test\n+\tpublic void testProcTimeTemporalJoin() throws Exception {\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\t0,\n+\t\t\t\t0);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(4);\n+\t\ttestHarness.processElement2(insertRecord(1L, \"1a4\"));\n+\n+\t\ttestHarness.setProcessingTime(5);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\t\texpectedOutput.add(insertRecord(1L, \"1a5\", 1L, \"1a4\"));\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\t/** test proctime temporal join when set state clear. **/\n+\t@Test\n+\tpublic void testStateCleanUp() throws Exception {\n+\t\tfinal int minRetentionTime = 10;\n+\t\tLegacyTemporalProcessTimeJoinOperator joinOperator = new LegacyTemporalProcessTimeJoinOperator(\n+\t\t\t\trowType,\n+\t\t\t\tjoinCondition,\n+\t\t\t\tminRetentionTime,\n+\t\t\t\tminRetentionTime * 3 / 2);\n+\t\tKeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> testHarness = createTestHarness(\n+\t\t\t\tjoinOperator);\n+\t\ttestHarness.open();\n+\t\ttestHarness.setProcessingTime(1);\n+\t\ttestHarness.processElement1(insertRecord(1L, \"1a1\"));\n+\n+\t\ttestHarness.setProcessingTime(2);\n+\t\ttestHarness.processElement2(insertRecord(2L, \"2a2\"));\n+\n+\t\ttestHarness.setProcessingTime(3);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"2a3\"));\n+\n+\t\ttestHarness.setProcessingTime(3 + minRetentionTime * 3 / 2);\n+\t\ttestHarness.processElement1(insertRecord(2L, \"1a5\"));\n+\n+\t\tList<Object> expectedOutput = new ArrayList<>();\n+\t\texpectedOutput.add(insertRecord(2L, \"2a3\", 2L, \"2a2\"));\n+\n+\t\tassertor.assertOutputEquals(\"output wrong.\", expectedOutput, testHarness.getOutput());\n+\t\ttestHarness.close();\n+\t}\n+\n+\tprivate KeyedTwoInputStreamOperatorTestHarness<RowData, RowData, RowData, RowData> createTestHarness(\n+\t\t\tLegacyTemporalProcessTimeJoinOperator temporalJoinOperator)\n+\t\t\tthrows Exception {\n+\n+\t\treturn new KeyedTwoInputStreamOperatorTestHarness<>(\n+\t\t\t\ttemporalJoinOperator,\n+\t\t\t\tkeySelector,\n+\t\t\t\tkeySelector,\n+\t\t\t\tkeyType);\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a"}, "originalPosition": 150}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "448ec948b7aed52ae72d0229acfbc70f39eacd1a", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/448ec948b7aed52ae72d0229acfbc70f39eacd1a", "committedDate": "2020-10-18T06:25:10Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporal process join"}, "afterCommit": {"oid": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "committedDate": "2020-10-19T15:37:05Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporal process join"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/ecab94cd14e004566cd5b4f4a212123dd2ba7c78", "committedDate": "2020-10-19T15:37:05Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporal process join"}, "afterCommit": {"oid": "3ba11b505818c2672d0c58c200c01fb587576ae2", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/3ba11b505818c2672d0c58c200c01fb587576ae2", "committedDate": "2020-10-20T14:31:05Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73572634efa485ad88df75ba50d3b6ff0755ec8a", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/73572634efa485ad88df75ba50d3b6ff0755ec8a", "committedDate": "2020-10-20T14:43:41Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ba11b505818c2672d0c58c200c01fb587576ae2", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/3ba11b505818c2672d0c58c200c01fb587576ae2", "committedDate": "2020-10-20T14:31:05Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin"}, "afterCommit": {"oid": "73572634efa485ad88df75ba50d3b6ff0755ec8a", "author": {"user": {"login": "seunjjs", "name": null}}, "url": "https://github.com/apache/flink/commit/73572634efa485ad88df75ba50d3b6ff0755ec8a", "committedDate": "2020-10-20T14:43:41Z", "message": "[FLINK-19655][flink-table-runtime-blink] add super.open() and write unit test for temporalProcessTimeJoin and temporalRowTimeJoin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a519bdb797522fb8fa35fa54ff6572a56ef5596f", "author": {"user": {"login": "leonardBang", "name": "Leonard Xu"}}, "url": "https://github.com/apache/flink/commit/a519bdb797522fb8fa35fa54ff6572a56ef5596f", "committedDate": "2020-10-21T14:16:06Z", "message": "[FLINK-19655][table-runtime-blink] format code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MzIwOTI2", "url": "https://github.com/apache/flink/pull/13675#pullrequestreview-514320926", "createdAt": "2020-10-22T02:43:52Z", "commit": {"oid": "a519bdb797522fb8fa35fa54ff6572a56ef5596f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MzMwOTIz", "url": "https://github.com/apache/flink/pull/13675#pullrequestreview-514330923", "createdAt": "2020-10-22T03:16:30Z", "commit": {"oid": "a519bdb797522fb8fa35fa54ff6572a56ef5596f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2858, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}