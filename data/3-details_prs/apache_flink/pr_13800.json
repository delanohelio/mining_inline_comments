{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNDQzOTQw", "number": 13800, "title": "[FLINK-19650][connectors jdbc]Support the limit push down for the Jdb\u2026", "bodyText": "\u2026c connector\n\nWhat is the purpose of the change\nSupport the limit push down for the jdbc connectors\nBrief change log\n\nThe jdbc connector extends the SupportsLimitPushDown interface\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nAdded IT case to verify the results.\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (yes / no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (yes / no)\nThe serializers: (yes / no / don't know)\nThe runtime per-record code paths (performance sensitive): (yes / no / don't know)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (yes / no / don't know)\nThe S3 file system connector: (yes / no / don't know)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (yes / no)\nIf yes, how is the feature documented? (not applicable / docs / JavaDocs / not documented)", "createdAt": "2020-10-27T03:40:39Z", "url": "https://github.com/apache/flink/pull/13800", "merged": true, "mergeCommit": {"oid": "a859e2cca7961cc966cf0a3990e821a62fb52654"}, "closed": true, "closedAt": "2020-12-27T05:41:23Z", "author": {"login": "fsk119"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWjsKYgFqTUxNzQwMDMzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpnTGAgBqjQxNDg5NjI1OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NDAwMzM3", "url": "https://github.com/apache/flink/pull/13800#pullrequestreview-517400337", "createdAt": "2020-10-27T07:12:55Z", "commit": {"oid": "d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoxMjo1NVrOHot_5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNzoxODowOVrOHouITA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1ODcyNQ==", "bodyText": "We don't need to adapt fetch size, it is a best effort read size.", "url": "https://github.com/apache/flink/pull/13800#discussion_r512458725", "createdAt": "2020-10-27T07:12:55Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSource.java", "diffHunk": "@@ -92,8 +99,14 @@ public ScanRuntimeProvider getScanRuntimeProvider(ScanContext runtimeProviderCon\n \t\t\t.setPassword(options.getPassword().orElse(null))\n \t\t\t.setAutoCommit(readOptions.getAutoCommit());\n \n-\t\tif (readOptions.getFetchSize() != 0) {\n-\t\t\tbuilder.setFetchSize(readOptions.getFetchSize());\n+\t\tif (readOptions.getFetchSize() != 0 || this.limit >= 0) {\n+\t\t\tint fetchsize = readOptions.getFetchSize();\n+\t\t\tif (fetchsize == 0) {\n+\t\t\t\tfetchsize = limit;\n+\t\t\t} else if (limit != -1) {\n+\t\t\t\tfetchsize = Integer.min(fetchsize, limit);\n+\t\t\t}\n+\t\t\tbuilder.setFetchSize(fetchsize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1OTgyMg==", "bodyText": "This doesn't break the test?", "url": "https://github.com/apache/flink/pull/13800#discussion_r512459822", "createdAt": "2020-10-27T07:15:28Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java", "diffHunk": "@@ -154,7 +155,7 @@ public void testProject() throws Exception {\n \t\t\t\t\")\"\n \t\t);\n \n-\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE).collect();\n+\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id,timestamp6_col,decimal_col FROM \" + INPUT_TABLE + \" LIMIT 1\").collect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2MDIxNA==", "bodyText": "Please select all the fields.", "url": "https://github.com/apache/flink/pull/13800#discussion_r512460214", "createdAt": "2020-10-27T07:16:22Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java", "diffHunk": "@@ -166,4 +167,38 @@ public void testProject() throws Exception {\n \t\t\t\t.sorted().collect(Collectors.toList());\n \t\tassertEquals(expected, result);\n \t}\n+\n+\t@Test\n+\tpublic void testLimit() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n+\t\t\t\t.useBlinkPlanner()\n+\t\t\t\t.inStreamingMode()\n+\t\t\t\t.build();\n+\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n+\n+\t\ttEnv.executeSql(\n+\t\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n+\t\t\t\t\t\t\"id BIGINT,\" +\n+\t\t\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n+\t\t\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n+\t\t\t\t\t\t\"time_col TIME,\" +\n+\t\t\t\t\t\t\"real_col FLOAT,\" +\n+\t\t\t\t\t\t\"double_col DOUBLE,\" +\n+\t\t\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n+\t\t\t\t\t\t\") WITH (\" +\n+\t\t\t\t\t\t\"  'connector'='jdbc',\" +\n+\t\t\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n+\t\t\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n+\t\t\t\t\t\t\")\"\n+\t\t);\n+\n+\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id FROM \" + INPUT_TABLE + \" LIMIT 1\").collect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ2MDg3Ng==", "bodyText": "We don't need to cast to int.", "url": "https://github.com/apache/flink/pull/13800#discussion_r512460876", "createdAt": "2020-10-27T07:18:09Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSource.java", "diffHunk": "@@ -156,11 +169,25 @@ public boolean equals(Object o) {\n \t\t\tObjects.equals(readOptions, that.readOptions) &&\n \t\t\tObjects.equals(lookupOptions, that.lookupOptions) &&\n \t\t\tObjects.equals(physicalSchema, that.physicalSchema) &&\n-\t\t\tObjects.equals(dialectName, that.dialectName);\n+\t\t\tObjects.equals(dialectName, that.dialectName) &&\n+\t\t\tObjects.equals(limit, that.limit);\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n \t\treturn Objects.hash(options, readOptions, lookupOptions, physicalSchema, dialectName);\n \t}\n+\n+\t/**\n+\t * {@link java.sql.Statement#setFetchSize(int)} only accepts int value.\n+\t */\n+\t@Override\n+\tpublic void applyLimit(long limit) {\n+\t\tif (limit > Integer.MAX_VALUE) {\n+\t\t\tthrow new TableException(\n+\t\t\t\t\tString.format(\"The maximum limit value is %d for jdbc connector. Get %d.\",\n+\t\t\t\t\t\t\tInteger.MAX_VALUE, limit));\n+\t\t}\n+\t\tthis.limit = Math.toIntExact(limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/d03e417c4b828ffb3e3b8061d0a9b5dd9a38b018", "committedDate": "2020-10-27T03:34:50Z", "message": "[FLINK-19650][connectors jdbc]Support the limit push down for the Jdbc connector"}, "afterCommit": {"oid": "6e7748ddea8ff84587d15a1c8050b14b51cf1fcb", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/6e7748ddea8ff84587d15a1c8050b14b51cf1fcb", "committedDate": "2020-11-30T04:19:35Z", "message": "[FLINK-19650][connectors jdbc]Support the limit push down for the Jdbc connector\n\n1. add getLimit method in dialects\n2. expand getSelectFromStatement parameters to include limit\n3. use dialect to get query with query in jdbc source"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e7748ddea8ff84587d15a1c8050b14b51cf1fcb", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/6e7748ddea8ff84587d15a1c8050b14b51cf1fcb", "committedDate": "2020-11-30T04:19:35Z", "message": "[FLINK-19650][connectors jdbc]Support the limit push down for the Jdbc connector\n\n1. add getLimit method in dialects\n2. expand getSelectFromStatement parameters to include limit\n3. use dialect to get query with query in jdbc source"}, "afterCommit": {"oid": "e7a4ae2ed2de185200b562bb882af275a49e972e", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/e7a4ae2ed2de185200b562bb882af275a49e972e", "committedDate": "2020-11-30T04:30:33Z", "message": "[FLINK-19650][connectors jdbc]Support the limit push down for the Jdbc connector\n\n1. add getLimit method in dialects\n2. expand getSelectFromStatement parameters to include limit\n3. use dialect to get query with query in jdbc source"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODU5NzMx", "url": "https://github.com/apache/flink/pull/13800#pullrequestreview-556859731", "createdAt": "2020-12-22T07:01:42Z", "commit": {"oid": "e7a4ae2ed2de185200b562bb882af275a49e972e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzowMTo0MlrOIJwidg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoxNTo1NlrOIJw1UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMzM1MA==", "bodyText": "how about move limit >= 0 ? \" \" + getLimit(limit) : \"\" to  getLimit(long limit) internal?", "url": "https://github.com/apache/flink/pull/13800#discussion_r547103350", "createdAt": "2020-12-22T07:01:42Z", "author": {"login": "leonardBang"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/JdbcDialect.java", "diffHunk": "@@ -148,14 +150,15 @@ default String getDeleteStatement(String tableName, String[] conditionFields) {\n \t/**\n \t * Get select fields statement by condition fields. Default use SELECT.\n \t */\n-\tdefault String getSelectFromStatement(String tableName, String[] selectFields, String[] conditionFields) {\n+\tdefault String getSelectFromStatement(String tableName, String[] selectFields, String[] conditionFields, long limit) {\n \t\tString selectExpressions = Arrays.stream(selectFields)\n \t\t\t\t.map(this::quoteIdentifier)\n \t\t\t\t.collect(Collectors.joining(\", \"));\n \t\tString fieldExpressions = Arrays.stream(conditionFields)\n \t\t\t\t.map(f -> format(\"%s = :%s\", quoteIdentifier(f), f))\n \t\t\t\t.collect(Collectors.joining(\" AND \"));\n \t\treturn \"SELECT \" + selectExpressions + \" FROM \" +\n-\t\t\t\tquoteIdentifier(tableName) + (conditionFields.length > 0 ? \" WHERE \" + fieldExpressions : \"\");\n+\t\t\t\tquoteIdentifier(tableName) + (conditionFields.length > 0 ? \" WHERE \" + fieldExpressions : \"\") +\n+\t\t\t\t(limit >= 0 ? \" \" + getLimit(limit) : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a4ae2ed2de185200b562bb882af275a49e972e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwMzg0OA==", "bodyText": "please also add missed limit", "url": "https://github.com/apache/flink/pull/13800#discussion_r547103848", "createdAt": "2020-12-22T07:03:10Z", "author": {"login": "leonardBang"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSource.java", "diffHunk": "@@ -156,11 +163,17 @@ public boolean equals(Object o) {\n \t\t\tObjects.equals(readOptions, that.readOptions) &&\n \t\t\tObjects.equals(lookupOptions, that.lookupOptions) &&\n \t\t\tObjects.equals(physicalSchema, that.physicalSchema) &&\n-\t\t\tObjects.equals(dialectName, that.dialectName);\n+\t\t\tObjects.equals(dialectName, that.dialectName) &&\n+\t\t\tObjects.equals(limit, that.limit);\n \t}\n \n \t@Override\n \tpublic int hashCode() {\n \t\treturn Objects.hash(options, readOptions, lookupOptions, physicalSchema, dialectName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a4ae2ed2de185200b562bb882af275a49e972e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwODE3Ng==", "bodyText": "I think this rule should have been existed after support limit pushdown in planner, why we add it util now?", "url": "https://github.com/apache/flink/pull/13800#discussion_r547108176", "createdAt": "2020-12-22T07:15:56Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/rules/FlinkStreamRuleSets.scala", "diffHunk": "@@ -244,6 +244,7 @@ object FlinkStreamRuleSets {\n     PushProjectIntoLegacyTableSourceScanRule.INSTANCE,\n     PushFilterIntoTableSourceScanRule.INSTANCE,\n     PushFilterIntoLegacyTableSourceScanRule.INSTANCE,\n+    PushLimitIntoTableSourceScanRule.INSTANCE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a4ae2ed2de185200b562bb882af275a49e972e"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e7a4ae2ed2de185200b562bb882af275a49e972e", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/e7a4ae2ed2de185200b562bb882af275a49e972e", "committedDate": "2020-11-30T04:30:33Z", "message": "[FLINK-19650][connectors jdbc]Support the limit push down for the Jdbc connector\n\n1. add getLimit method in dialects\n2. expand getSelectFromStatement parameters to include limit\n3. use dialect to get query with query in jdbc source"}, "afterCommit": {"oid": "62897544138e2bececa6a3f53c63289150864495", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/62897544138e2bececa6a3f53c63289150864495", "committedDate": "2020-12-22T13:15:31Z", "message": "[FLINK-19650][jdbc] support limit push down for jdbc connector"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NDg0NjU4", "url": "https://github.com/apache/flink/pull/13800#pullrequestreview-557484658", "createdAt": "2020-12-23T03:09:02Z", "commit": {"oid": "71a5140cb517517feb3a0dea17c4e274f3ed7fcb"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowOTowMlrOIKPxjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzoxNToxNVrOIKP3Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNTExOQ==", "bodyText": "for what ? ^_^", "url": "https://github.com/apache/flink/pull/13800#discussion_r547615119", "createdAt": "2020-12-23T03:09:02Z", "author": {"login": "leonardBang"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/stream/sql/LimitableSourceTest.scala", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.stream.sql\n+\n+import org.junit.Before\n+\n+/**\n+ * Test for.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a5140cb517517feb3a0dea17c4e274f3ed7fcb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxNjU4Nw==", "bodyText": "how about rename to getLimitStatement to make the function definition more clear?", "url": "https://github.com/apache/flink/pull/13800#discussion_r547616587", "createdAt": "2020-12-23T03:15:15Z", "author": {"login": "leonardBang"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/MySQLDialect.java", "diffHunk": "@@ -55,6 +55,15 @@ public JdbcRowConverter getRowConverter(RowType rowType) {\n \t\treturn new MySQLRowConverter(rowType);\n \t}\n \n+\t@Override\n+\tpublic String getLimit(long limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a5140cb517517feb3a0dea17c4e274f3ed7fcb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3Njc0ODYz", "url": "https://github.com/apache/flink/pull/13800#pullrequestreview-557674863", "createdAt": "2020-12-23T06:54:07Z", "commit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzE3MTIy", "url": "https://github.com/apache/flink/pull/13800#pullrequestreview-558317122", "createdAt": "2020-12-24T03:16:52Z", "commit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzoxNjo1MlrOIK9eNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNDoxNjoxNFrOIK-JhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2MzgzMQ==", "bodyText": "Could you remove the the begging space? The space should be handled by framework. It's easy to forget to add the space for new dialects.\nPlease use upper case for the SQL keywords.", "url": "https://github.com/apache/flink/pull/13800#discussion_r548363831", "createdAt": "2020-12-24T03:16:52Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/DerbyDialect.java", "diffHunk": "@@ -66,6 +66,15 @@ public String dialectName() {\n \t\treturn \"Derby\";\n \t}\n \n+\t@Override\n+\tpublic String getLimitStatement(long limit) {\n+\t\tif (limit >= 0) {\n+\t\t\treturn String.format(\" fetch first %d rows only\", limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NDE4OQ==", "bodyText": "The else branch should also handled by framework. The limit parameter should always be a valid limit.", "url": "https://github.com/apache/flink/pull/13800#discussion_r548364189", "createdAt": "2020-12-24T03:18:34Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/DerbyDialect.java", "diffHunk": "@@ -66,6 +66,15 @@ public String dialectName() {\n \t\treturn \"Derby\";\n \t}\n \n+\t@Override\n+\tpublic String getLimitStatement(long limit) {\n+\t\tif (limit >= 0) {\n+\t\t\treturn String.format(\" fetch first %d rows only\", limit);\n+\t\t} else {\n+\t\t\treturn \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NDE5Mg==", "bodyText": "The else branch should also handled by framework. The limit parameter should always be a valid limit.", "url": "https://github.com/apache/flink/pull/13800#discussion_r548364192", "createdAt": "2020-12-24T03:18:35Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/DerbyDialect.java", "diffHunk": "@@ -66,6 +66,15 @@ public String dialectName() {\n \t\treturn \"Derby\";\n \t}\n \n+\t@Override\n+\tpublic String getLimitStatement(long limit) {\n+\t\tif (limit >= 0) {\n+\t\t\treturn String.format(\" fetch first %d rows only\", limit);\n+\t\t} else {\n+\t\t\treturn \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NTI2Mw==", "bodyText": "Why separate the initialization into another line?", "url": "https://github.com/apache/flink/pull/13800#discussion_r548365263", "createdAt": "2020-12-24T03:24:18Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSource.java", "diffHunk": "@@ -96,8 +102,9 @@ public ScanRuntimeProvider getScanRuntimeProvider(ScanContext runtimeProviderCon\n \t\t\tbuilder.setFetchSize(readOptions.getFetchSize());\n \t\t}\n \t\tfinal JdbcDialect dialect = options.getDialect();\n-\t\tString query = dialect.getSelectFromStatement(\n-\t\t\toptions.getTableName(), physicalSchema.getFieldNames(), new String[0]);\n+\t\tString query;\n+\t\tquery = dialect.getSelectFromStatement(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2NTcxNQ==", "bodyText": "Could you add a test that the source is configured with partition columns and submit a select query with limit clause. I'm wondering currently they can't work together well.", "url": "https://github.com/apache/flink/pull/13800#discussion_r548365715", "createdAt": "2020-12-24T03:26:15Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSource.java", "diffHunk": "@@ -96,8 +102,9 @@ public ScanRuntimeProvider getScanRuntimeProvider(ScanContext runtimeProviderCon\n \t\t\tbuilder.setFetchSize(readOptions.getFetchSize());\n \t\t}\n \t\tfinal JdbcDialect dialect = options.getDialect();\n-\t\tString query = dialect.getSelectFromStatement(\n-\t\t\toptions.getTableName(), physicalSchema.getFieldNames(), new String[0]);\n+\t\tString query;\n+\t\tquery = dialect.getSelectFromStatement(\n+\t\t\t\toptions.getTableName(), physicalSchema.getFieldNames(), new String[0], limit);\n \t\tif (readOptions.getPartitionColumnName().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3NDc0NA==", "bodyText": "Personally, I don't like the current design of the new interface.\n\nit couples the limit to the select statement which makes it impossible to inject additional where clause.\ndialects need to implement/take care 2 interfaces about limit.\nmany invokers have to pass an invalid limit.\n\nIn my opinion, a better solution would be separate them, by having a new interface for limit:\nString getLimitClause(long limit);\nAnd concat the limit caluse with the select statement where needs the limit clause.", "url": "https://github.com/apache/flink/pull/13800#discussion_r548374744", "createdAt": "2020-12-24T04:15:25Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/JdbcDialect.java", "diffHunk": "@@ -148,14 +150,15 @@ default String getDeleteStatement(String tableName, String[] conditionFields) {\n \t/**\n \t * Get select fields statement by condition fields. Default use SELECT.\n \t */\n-\tdefault String getSelectFromStatement(String tableName, String[] selectFields, String[] conditionFields) {\n+\tdefault String getSelectFromStatement(String tableName, String[] selectFields, String[] conditionFields, long limit) {\n \t\tString selectExpressions = Arrays.stream(selectFields)\n \t\t\t\t.map(this::quoteIdentifier)\n \t\t\t\t.collect(Collectors.joining(\", \"));\n \t\tString fieldExpressions = Arrays.stream(conditionFields)\n \t\t\t\t.map(f -> format(\"%s = :%s\", quoteIdentifier(f), f))\n \t\t\t\t.collect(Collectors.joining(\" AND \"));\n \t\treturn \"SELECT \" + selectExpressions + \" FROM \" +\n-\t\t\t\tquoteIdentifier(tableName) + (conditionFields.length > 0 ? \" WHERE \" + fieldExpressions : \"\");\n+\t\t\t\tquoteIdentifier(tableName) + (conditionFields.length > 0 ? \" WHERE \" + fieldExpressions : \"\") +\n+\t\t\t\tgetLimitStatement(limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM3NDkxNg==", "bodyText": "Please add javadoc on the method, including the description for limit parameter, e.g. the value range.", "url": "https://github.com/apache/flink/pull/13800#discussion_r548374916", "createdAt": "2020-12-24T04:16:14Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/dialect/JdbcDialect.java", "diffHunk": "@@ -57,6 +57,8 @@\n \t */\n \tJdbcRowConverter getRowConverter(RowType rowType);\n \n+\tString getLimitStatement(long limit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f408d4cb2758fe350988e815b93b1c48d15497aa"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4NzQ2NTkz", "url": "https://github.com/apache/flink/pull/13800#pullrequestreview-558746593", "createdAt": "2020-12-25T03:36:13Z", "commit": {"oid": "f5e7891cc45eba2d0d8f28dabdf596834faf0f0a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba4c6121faa50f3aa26b8c05bf7ea36b85d82642", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/ba4c6121faa50f3aa26b8c05bf7ea36b85d82642", "committedDate": "2020-12-25T12:14:32Z", "message": "[FLINK-19650][planner] add PushLimitIntoTableSourceScanRule into StreamRuleSet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5ee9b57baaef312efba7080bb279dd85cda21ed", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/c5ee9b57baaef312efba7080bb279dd85cda21ed", "committedDate": "2020-12-25T12:14:32Z", "message": "[FLINK-19650][jdbc] support limit push down for jdbc connector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e9c706b2e0ee94e0242ecfc491969df563aaf14", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/6e9c706b2e0ee94e0242ecfc491969df563aaf14", "committedDate": "2020-12-25T12:14:32Z", "message": "fix plan test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe59ee44fb269934215d4569f65bd0eff2de17a5", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/fe59ee44fb269934215d4569f65bd0eff2de17a5", "committedDate": "2020-12-25T12:14:33Z", "message": "address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfbae787e414d2cd1c9dec08f5bbfb3a9b91e6ce", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/bfbae787e414d2cd1c9dec08f5bbfb3a9b91e6ce", "committedDate": "2020-12-25T12:14:33Z", "message": "address comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5e7891cc45eba2d0d8f28dabdf596834faf0f0a", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/f5e7891cc45eba2d0d8f28dabdf596834faf0f0a", "committedDate": "2020-12-25T02:54:42Z", "message": "address comments"}, "afterCommit": {"oid": "bfbae787e414d2cd1c9dec08f5bbfb3a9b91e6ce", "author": {"user": {"login": "fsk119", "name": "Shengkai "}}, "url": "https://github.com/apache/flink/commit/bfbae787e414d2cd1c9dec08f5bbfb3a9b91e6ce", "committedDate": "2020-12-25T12:14:33Z", "message": "address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4868, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}