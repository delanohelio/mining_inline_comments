{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDE2NzEw", "number": 13000, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzoxOTo1NVrOETIHdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzoxOTo1NVrOETIHdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDkxMzgxOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzoxOTo1NVrOG4rwCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoxNjo1N1rOG46n2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDI0OQ==", "bodyText": "Two questions:\n\nShould we not ignore the exception? Just in case of some unexpected exceptions/bugs/problems? I guess the expected exception is InterruptedException?\nShouldn't this be in a while (true) loop with ignoring interruptions?", "url": "https://github.com/apache/flink/pull/13000#discussion_r462090249", "createdAt": "2020-07-29T07:19:55Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -562,6 +567,7 @@ private void runMailboxLoop() throws Exception {\n \n \tprotected void afterInvoke() throws Exception {\n \t\tLOG.debug(\"Finished task {}\", getName());\n+\t\tgetCompletionFuture().exceptionally(unused -> null).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d946d97789255f15c8821dbdb9961dcbe325edf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5ODYxNg==", "bodyText": "Good questions,\n\nI think this future resulting exception shouldn't be reported here. It's already reported in SourceStreamTask.processInput using mailboxProcessor.reportThrowable\nCompletableFuture.join is not interruptible, so shouldn't be a problem.", "url": "https://github.com/apache/flink/pull/13000#discussion_r462098616", "createdAt": "2020-07-29T07:35:59Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -562,6 +567,7 @@ private void runMailboxLoop() throws Exception {\n \n \tprotected void afterInvoke() throws Exception {\n \t\tLOG.debug(\"Finished task {}\", getName());\n+\t\tgetCompletionFuture().exceptionally(unused -> null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDI0OQ=="}, "originalCommit": {"oid": "4d946d97789255f15c8821dbdb9961dcbe325edf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4OTM3Mw==", "bodyText": "It's already reported in SourceStreamTask.processInput using mailboxProcessor.reportThrowable\n\nI think you are right, it should be correct now.\nBut I would just rephrase it that \"it SHOULD be reported in...\". what about handling our bugs, when it won't be reported? Could we make it more error prone? For example make sure that no exceptions should ever reach StreamTask#getCompletionFuture().join()? And if something would reach it here, it would be equivalent of an IllegalStateException?\nMaybe SourceStreamTask#getCompletionFuture() could wrap the future somehow? SourceStreamTask is the owner of logic handling/forwarding the exceptions, so it would be a slightly better place to ignore exceptions compared to StreamTask?", "url": "https://github.com/apache/flink/pull/13000#discussion_r462289373", "createdAt": "2020-07-29T13:16:32Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -562,6 +567,7 @@ private void runMailboxLoop() throws Exception {\n \n \tprotected void afterInvoke() throws Exception {\n \t\tLOG.debug(\"Finished task {}\", getName());\n+\t\tgetCompletionFuture().exceptionally(unused -> null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDI0OQ=="}, "originalCommit": {"oid": "4d946d97789255f15c8821dbdb9961dcbe325edf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNDUzNw==", "bodyText": "So you suggest to\n\nmove .exceptionally(unused -> null) from StreamTask to SourceStreamTask (or wrap in some other way)\nin StreamTask, propagate failure as a programming error\n\nDid I get you right?\nIf so, I think it introduces an unnecessary contract that getCompletionFuture never completes exceptionally and actually makes the code less error-prone (think of other StreamTask subclasses).", "url": "https://github.com/apache/flink/pull/13000#discussion_r462304537", "createdAt": "2020-07-29T13:38:08Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -562,6 +567,7 @@ private void runMailboxLoop() throws Exception {\n \n \tprotected void afterInvoke() throws Exception {\n \t\tLOG.debug(\"Finished task {}\", getName());\n+\t\tgetCompletionFuture().exceptionally(unused -> null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDI0OQ=="}, "originalCommit": {"oid": "4d946d97789255f15c8821dbdb9961dcbe325edf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzMzkxNA==", "bodyText": "ok, let's keep it as it is.", "url": "https://github.com/apache/flink/pull/13000#discussion_r462333914", "createdAt": "2020-07-29T14:16:57Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -562,6 +567,7 @@ private void runMailboxLoop() throws Exception {\n \n \tprotected void afterInvoke() throws Exception {\n \t\tLOG.debug(\"Finished task {}\", getName());\n+\t\tgetCompletionFuture().exceptionally(unused -> null).join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA5MDI0OQ=="}, "originalCommit": {"oid": "4d946d97789255f15c8821dbdb9961dcbe325edf"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4994, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}