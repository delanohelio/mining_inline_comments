{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0NTE1MjEz", "number": 13897, "title": "[FLINK-19939][table-planner-blink] Remove redundant union from multiple input node", "bodyText": "What is the purpose of the change\nConsider the following SQL and the execution plan.\nWITH\n  T1 AS (SELECT COUNT(*) AS cnt FROM x GROUP BY a),\n  T2 AS (SELECT COUNT(*) AS cnt FROM y GROUP BY d),\n  T3 AS (SELECT b AS cnt FROM x INNER JOIN y ON x.b = y.e)\nSELECT cnt FROM\n  (SELECT cnt FROM T1)\n  UNION ALL\n  (SELECT cnt FROM T2)\n  UNION ALL\n  (SELECT cnt FROM T3)\nMultipleInputNode(readOrder=[1,0,0,0], members=[\\nUnion(all=[true], union=[cnt])\\n:- Union(all=[true], union=[cnt])\\n:  :- Calc(select=[CAST(cnt) AS cnt])\\n:  :  +- HashAggregate(isMerge=[true], groupBy=[a], select=[a, Final_COUNT(count1$0) AS cnt])\\n:  :     +- [#3] Exchange(distribution=[hash[a]])\\n:  +- Calc(select=[CAST(cnt) AS cnt])\\n:     +- HashAggregate(isMerge=[true], groupBy=[d], select=[d, Final_COUNT(count1$0) AS cnt])\\n:        +- [#4] Exchange(distribution=[hash[d]])\\n+- Calc(select=[b AS cnt])\\n   +- HashJoin(joinType=[InnerJoin], where=[=(b, e)], select=[b, e], build=[right])\\n      :- [#1] Exchange(distribution=[hash[b]])\\n      +- [#2] Exchange(distribution=[hash[e]])\\n])\n:- Exchange(distribution=[hash[b]])\n:  +- Calc(select=[b])\n:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])\n:- Exchange(distribution=[hash[e]])\n:  +- Calc(select=[e])\n:     +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])\n:- Exchange(distribution=[hash[a]])\n:  +- LocalHashAggregate(groupBy=[a], select=[a, Partial_COUNT(*) AS count1$0])\n:     +- Calc(select=[a])\n:        +- LegacyTableSourceScan(table=[[default_catalog, default_database, x, source: [TestTableSource(a, b, c, nx)]]], fields=[a, b, c, nx])\n+- Exchange(distribution=[hash[d]])\n   +- LocalHashAggregate(groupBy=[d], select=[d, Partial_COUNT(*) AS count1$0])\n      +- Calc(select=[d])\n         +- LegacyTableSourceScan(table=[[default_catalog, default_database, y, source: [TestTableSource(d, e, f, ny)]]], fields=[d, e, f, ny])\n\nThe two unions here in multiple input here is actually redundant, as the amount of data shuffled will not change even if they're moved out of the multiple input node. We should remove such redundant union from multiple input nodes.\nBrief change log\n\nRemove redundant union from multiple input node\n\nVerifying this change\nThis change added tests and can be verified by running the added tests.\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? not applicable", "createdAt": "2020-11-03T06:29:40Z", "url": "https://github.com/apache/flink/pull/13897", "merged": true, "mergeCommit": {"oid": "6cad089f5fafaf3d4ccb02dec6e3b8dd4f4428d1"}, "closed": true, "closedAt": "2020-11-06T11:35:40Z", "author": {"login": "tsreaper"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZeC2AAFqTUyMzk5NjE4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZzlG_AFqTUyNDk4NzU5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTk2MTg5", "url": "https://github.com/apache/flink/pull/13897#pullrequestreview-523996189", "createdAt": "2020-11-05T07:51:28Z", "commit": {"oid": "458abd54a7cfa9a7a71bdf2f304db0ab65ca2e1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo1MToyOFrOHt3CbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzo1MToyOFrOHt3CbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0OTcwOA==", "bodyText": "a wrapper is the output node if the wrapper is the root of its group ?", "url": "https://github.com/apache/flink/pull/13897#discussion_r517849708", "createdAt": "2020-11-05T07:51:28Z", "author": {"login": "godfreyhe"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/processors/MultipleInputNodeCreationProcessor.java", "diffHunk": "@@ -283,6 +283,102 @@ private void optimizeMultipleInputGroups(List<ExecNodeWrapper> orderedWrappers)\n \t\t\t\twrapper.removeFromGroup();\n \t\t\t}\n \t\t}\n+\n+\t\t// wrappers are checked in topological order from sinks to sources\n+\t\tfor (ExecNodeWrapper wrapper : orderedWrappers) {\n+\t\t\tMultipleInputGroup group = wrapper.group;\n+\t\t\tif (group == null) {\n+\t\t\t\t// we only consider nodes currently in a multiple input group\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tif (isOutputOfMultipleInputGroup(wrapper) && wrapper.execNode instanceof Union) {\n+\t\t\t\t// optimization 5. this optimization remove redundant union at the output of a\n+\t\t\t\t// multiple input, consider the following graph:\n+\t\t\t\t//\n+\t\t\t\t// source -> exchange -> agg ---\\\n+\t\t\t\t// source -> exchange -> agg --> union ->\n+\t\t\t\t// source -> exchange -> join --/\n+\t\t\t\t// source -> exchange --/\n+\t\t\t\t//\n+\t\t\t\t// we'll initially put aggs, the join and the union into a multiple input, while\n+\t\t\t\t// the union here is actually redundant.\n+\t\t\t\tint numberOfUsefulInputs = 0;\n+\t\t\t\tList<Integer> uselessBranches = new ArrayList<>();\n+\t\t\t\tList<List<ExecNodeWrapper>> sameGroupWrappersList = new ArrayList<>();\n+\n+\t\t\t\t// an input branch is useful if it contains a node with two or more inputs other\n+\t\t\t\t// than union. we shall keep the union if it has two or more useful input branches,\n+\t\t\t\t// as this may benefit source chaining. consider the following example:\n+\t\t\t\t//\n+\t\t\t\t// chainable source -> join -\\\n+\t\t\t\t//                     /      \\\n+\t\t\t\t// chainable source --<        union\n+\t\t\t\t//                     \\      /\n+\t\t\t\t// chainable source -> join -/\n+\t\t\t\tfor (int i = 0; i < wrapper.inputs.size(); i++) {\n+\t\t\t\t\tExecNodeWrapper inputWrapper = wrapper.inputs.get(i);\n+\t\t\t\t\tList<ExecNodeWrapper> sameGroupWrappers = getInputWrappersInSameGroup(inputWrapper, wrapper.group);\n+\t\t\t\t\tsameGroupWrappersList.add(sameGroupWrappers);\n+\t\t\t\t\tlong numberOfValuableNodes = sameGroupWrappers.stream()\n+\t\t\t\t\t\t.filter(w -> w.inputs.size() >= 2 && !(w.execNode instanceof Union))\n+\t\t\t\t\t\t.count();\n+\t\t\t\t\tif (numberOfValuableNodes > 0) {\n+\t\t\t\t\t\tnumberOfUsefulInputs++;\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tuselessBranches.add(i);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tif (numberOfUsefulInputs < 2) {\n+\t\t\t\t\t// remove this union and its useless branches from multiple input\n+\t\t\t\t\tfor (int branch : uselessBranches) {\n+\t\t\t\t\t\tList<ExecNodeWrapper> sameGroupWrappers = sameGroupWrappersList.get(branch);\n+\t\t\t\t\t\tfor (ExecNodeWrapper w : sameGroupWrappers) {\n+\t\t\t\t\t\t\tif (w.group != null) {\n+\t\t\t\t\t\t\t\tw.removeFromGroup();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\twrapper.removeFromGroup();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate List<ExecNodeWrapper> getInputWrappersInSameGroup(ExecNodeWrapper wrapper, MultipleInputGroup group) {\n+\t\tList<ExecNodeWrapper> ret = new ArrayList<>();\n+\t\tQueue<ExecNodeWrapper> queue = new LinkedList<>();\n+\t\tSet<ExecNodeWrapper> visited = new HashSet<>();\n+\t\tqueue.add(wrapper);\n+\t\tvisited.add(wrapper);\n+\n+\t\twhile (!queue.isEmpty()) {\n+\t\t\tExecNodeWrapper w = queue.poll();\n+\t\t\tif (w.group != group) {\n+\t\t\t\t// if a wrapper is not in the required group than its inputs will\n+\t\t\t\t// also not be in the group, so we can just skip it\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tret.add(w);\n+\n+\t\t\tfor (ExecNodeWrapper inputWrapper : w.inputs) {\n+\t\t\t\tif (visited.contains(inputWrapper)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tqueue.add(inputWrapper);\n+\t\t\t\tvisited.add(inputWrapper);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn ret;\n+\t}\n+\n+\tprivate boolean isOutputOfMultipleInputGroup(ExecNodeWrapper wrapper) {\n+\t\tPreconditions.checkNotNull(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "458abd54a7cfa9a7a71bdf2f304db0ab65ca2e1f"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7e980618fb2fc2efa4f098b90c50b2530849843", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/f7e980618fb2fc2efa4f098b90c50b2530849843", "committedDate": "2020-11-06T05:15:55Z", "message": "[FLINK-19939][table-planner-blink] Remove redundant union from multiple input node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35c3c55c0dc376027cc9a4a89001d13e0620a8ed", "author": {"user": {"login": "tsreaper", "name": null}}, "url": "https://github.com/apache/flink/commit/35c3c55c0dc376027cc9a4a89001d13e0620a8ed", "committedDate": "2020-11-06T05:58:13Z", "message": "[fix] Rebase and remove one input operators from the output of multiple input node"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0OTg3NTk0", "url": "https://github.com/apache/flink/pull/13897#pullrequestreview-524987594", "createdAt": "2020-11-06T09:31:02Z", "commit": {"oid": "35c3c55c0dc376027cc9a4a89001d13e0620a8ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4704, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}