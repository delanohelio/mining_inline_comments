{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTE0MzAy", "number": 10898, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDoxNjo0MFrODZCdeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1Nzo1MFrODZM54w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTgxMzA2OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDoxNjo0MFrOFfOKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjozMzoyNFrOFfOqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MjI0Ng==", "bodyText": "It's better to add a private constructor for this util class", "url": "https://github.com/apache/flink/pull/10898#discussion_r368282246", "createdAt": "2020-01-19T10:16:40Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.kubernetes.entrypoint;\n+\n+import org.apache.flink.configuration.ConfigConstants;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.kubernetes.utils.Constants;\n+import org.apache.flink.runtime.jobmanager.HighAvailabilityMode;\n+import org.apache.flink.util.Preconditions;\n+\n+/**\n+ * This class contains utility methods for the {@link KubernetesSessionClusterEntrypoint}.\n+ */\n+class KubernetesEntrypointUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MDQxNw==", "bodyText": "Nice suggestion. I will fix it.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368290417", "createdAt": "2020-01-19T12:33:24Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.kubernetes.entrypoint;\n+\n+import org.apache.flink.configuration.ConfigConstants;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.kubernetes.utils.Constants;\n+import org.apache.flink.runtime.jobmanager.HighAvailabilityMode;\n+import org.apache.flink.util.Preconditions;\n+\n+/**\n+ * This class contains utility methods for the {@link KubernetesSessionClusterEntrypoint}.\n+ */\n+class KubernetesEntrypointUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MjI0Ng=="}, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTgxNDA5OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDoxODoxOVrOFfOLCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDoxODoxOVrOFfOLCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MjM3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tfinal String ipAddress =  System.getenv().get(Constants.ENV_FLINK_POD_IP_ADDRESS);\n          \n          \n            \n            \t\t\tfinal String ipAddress = System.getenv().get(Constants.ENV_FLINK_POD_IP_ADDRESS);", "url": "https://github.com/apache/flink/pull/10898#discussion_r368282379", "createdAt": "2020-01-19T10:18:19Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.kubernetes.entrypoint;\n+\n+import org.apache.flink.configuration.ConfigConstants;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.kubernetes.utils.Constants;\n+import org.apache.flink.runtime.jobmanager.HighAvailabilityMode;\n+import org.apache.flink.util.Preconditions;\n+\n+/**\n+ * This class contains utility methods for the {@link KubernetesSessionClusterEntrypoint}.\n+ */\n+class KubernetesEntrypointUtils {\n+\n+\t/**\n+\t * For non-HA cluster, jobmanager rpc address has be set to Kubernetes service name on client side. So the TaskManager\n+\t * will use service address to connect with jobmanager.\n+\t * For HA cluster, jobmanager rpc address will be set to ip address. The TaskManager use Zookeeper or other\n+\t * high-availability service to find the address of jobmanager. The Kubernetes DNS creates A and SRV records only for\n+\t * Services. It doesn't generate pods' A records. So the ip address, not hostname, will be used as jobmanager address.\n+\t *\n+\t * @return Updated configuration\n+\t */\n+\tstatic Configuration loadConfiguration() {\n+\t\tfinal String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);\n+\t\tPreconditions.checkNotNull(\n+\t\t\tconfigDir,\n+\t\t\t\"Flink configuration directory (%s) in environment should not be null!\",\n+\t\t\tConfigConstants.ENV_FLINK_CONF_DIR);\n+\n+\t\tfinal Configuration configuration = GlobalConfiguration.loadConfiguration(configDir);\n+\n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(configuration)) {\n+\t\t\tfinal String ipAddress =  System.getenv().get(Constants.ENV_FLINK_POD_IP_ADDRESS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTgxNTQwOnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkMasterDeploymentDecorator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDoyMTozN1rOFfOLvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjozNDozOVrOFfOqqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MjU1Ng==", "bodyText": "useless withEnvFrom?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368282556", "createdAt": "2020-01-19T10:21:37Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkMasterDeploymentDecorator.java", "diffHunk": "@@ -138,13 +144,21 @@ private Container createJobManagerContainer(\n \t\t\t\tnew ContainerPortBuilder().withContainerPort(flinkConfig.getInteger(RestOptions.PORT)).build(),\n \t\t\t\tnew ContainerPortBuilder().withContainerPort(flinkConfig.getInteger(JobManagerOptions.PORT)).build(),\n \t\t\t\tnew ContainerPortBuilder().withContainerPort(blobServerPort).build()))\n-\t\t\t.withEnv(\n-\t\t\t\tBootstrapTools.getEnvironmentVariables(ResourceManagerOptions.CONTAINERIZED_MASTER_ENV_PREFIX, flinkConfig)\n-\t\t\t\t\t.entrySet()\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(kv -> new EnvVar(kv.getKey(), kv.getValue(), null))\n-\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t.withEnv(buildEnvForContainer(flinkConfig)).withEnvFrom()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MDQ3NQ==", "bodyText": "Aha, i forget to remove it and will fix it.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368290475", "createdAt": "2020-01-19T12:34:39Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/kubeclient/decorators/FlinkMasterDeploymentDecorator.java", "diffHunk": "@@ -138,13 +144,21 @@ private Container createJobManagerContainer(\n \t\t\t\tnew ContainerPortBuilder().withContainerPort(flinkConfig.getInteger(RestOptions.PORT)).build(),\n \t\t\t\tnew ContainerPortBuilder().withContainerPort(flinkConfig.getInteger(JobManagerOptions.PORT)).build(),\n \t\t\t\tnew ContainerPortBuilder().withContainerPort(blobServerPort).build()))\n-\t\t\t.withEnv(\n-\t\t\t\tBootstrapTools.getEnvironmentVariables(ResourceManagerOptions.CONTAINERIZED_MASTER_ENV_PREFIX, flinkConfig)\n-\t\t\t\t\t.entrySet()\n-\t\t\t\t\t.stream()\n-\t\t\t\t\t.map(kv -> new EnvVar(kv.getKey(), kv.getValue(), null))\n-\t\t\t\t\t.collect(Collectors.toList()))\n+\t\t\t.withEnv(buildEnvForContainer(flinkConfig)).withEnvFrom()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MjU1Ng=="}, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTgxNzk5OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8ClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDoyNjo1MVrOFfONBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjozNTowMFrOFfOqtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mjg4NQ==", "bodyText": "This change seems to be unrelated? How about to do it in a separate commit?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368282885", "createdAt": "2020-01-19T10:26:51Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8ClientTest.java", "diffHunk": "@@ -189,7 +190,10 @@ public void testCreateFlinkMasterDeployment() {\n \t\t\tjmContainer.getVolumeMounts().get(0).getMountPath());\n \t\tassertEquals(FLINK_CONF_FILENAME, jmContainer.getVolumeMounts().get(0).getSubPath());\n \n-\t\tassertThat(jmContainer.getEnv(), Matchers.contains(new EnvVar(FLINK_MASTER_ENV_KEY, FLINK_MASTER_ENV_VALUE, null)));\n+\t\tEnvVar masterEnv = new EnvVar(FLINK_MASTER_ENV_KEY, FLINK_MASTER_ENV_VALUE, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MDQ4Nw==", "bodyText": "Make sense. I will put it into a separate commit.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368290487", "createdAt": "2020-01-19T12:35:00Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/test/java/org/apache/flink/kubernetes/kubeclient/Fabric8ClientTest.java", "diffHunk": "@@ -189,7 +190,10 @@ public void testCreateFlinkMasterDeployment() {\n \t\t\tjmContainer.getVolumeMounts().get(0).getMountPath());\n \t\tassertEquals(FLINK_CONF_FILENAME, jmContainer.getVolumeMounts().get(0).getSubPath());\n \n-\t\tassertThat(jmContainer.getEnv(), Matchers.contains(new EnvVar(FLINK_MASTER_ENV_KEY, FLINK_MASTER_ENV_VALUE, null)));\n+\t\tEnvVar masterEnv = new EnvVar(FLINK_MASTER_ENV_KEY, FLINK_MASTER_ENV_VALUE, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4Mjg4NQ=="}, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTgyMTI1OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDozMjoxNlrOFfOOgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMjozOTo0NlrOFfOrvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzI2NA==", "bodyText": "How about to set it to IP in all cases to avoid confusion, namely, change how we set JobManagerOptions.ADDRESS in KubernetesClusterDescriptor#deployClusterInternal()?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368283264", "createdAt": "2020-01-19T10:32:16Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.kubernetes.entrypoint;\n+\n+import org.apache.flink.configuration.ConfigConstants;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.kubernetes.utils.Constants;\n+import org.apache.flink.runtime.jobmanager.HighAvailabilityMode;\n+import org.apache.flink.util.Preconditions;\n+\n+/**\n+ * This class contains utility methods for the {@link KubernetesSessionClusterEntrypoint}.\n+ */\n+class KubernetesEntrypointUtils {\n+\n+\t/**\n+\t * For non-HA cluster, jobmanager rpc address has be set to Kubernetes service name on client side. So the TaskManager\n+\t * will use service address to connect with jobmanager.\n+\t * For HA cluster, jobmanager rpc address will be set to ip address. The TaskManager use Zookeeper or other\n+\t * high-availability service to find the address of jobmanager. The Kubernetes DNS creates A and SRV records only for\n+\t * Services. It doesn't generate pods' A records. So the ip address, not hostname, will be used as jobmanager address.\n+\t *\n+\t * @return Updated configuration\n+\t */\n+\tstatic Configuration loadConfiguration() {\n+\t\tfinal String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);\n+\t\tPreconditions.checkNotNull(\n+\t\t\tconfigDir,\n+\t\t\t\"Flink configuration directory (%s) in environment should not be null!\",\n+\t\t\tConfigConstants.ENV_FLINK_CONF_DIR);\n+\n+\t\tfinal Configuration configuration = GlobalConfiguration.loadConfiguration(configDir);\n+\n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(configuration)) {\n+\t\t\tfinal String ipAddress =  System.getenv().get(Constants.ENV_FLINK_POD_IP_ADDRESS);\n+\t\t\tPreconditions.checkState(\n+\t\t\t\tipAddress != null,\n+\t\t\t\t\"JobManager ip address environment variable %s not set\",\n+\t\t\t\tConstants.ENV_FLINK_POD_IP_ADDRESS);\n+\t\t\tconfiguration.setString(JobManagerOptions.ADDRESS, ipAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MDc0OQ==", "bodyText": "In non-HA mode, we need to set the jobmanager rpc address to service name. So when the jobmanager failover, the taskmanager could register again.\nIn HA mode, the taskmanager uses zookeeper to retrieve the jobmanager address. And there will be multiple jobmanagers in the future. So we set the ip address instead of jobmanager rpc address.\nSo i think we could not always set JobManagerOptions.ADDRESS to ip address.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368290749", "createdAt": "2020-01-19T12:39:46Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/entrypoint/KubernetesEntrypointUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.kubernetes.entrypoint;\n+\n+import org.apache.flink.configuration.ConfigConstants;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.JobManagerOptions;\n+import org.apache.flink.configuration.RestOptions;\n+import org.apache.flink.kubernetes.utils.Constants;\n+import org.apache.flink.runtime.jobmanager.HighAvailabilityMode;\n+import org.apache.flink.util.Preconditions;\n+\n+/**\n+ * This class contains utility methods for the {@link KubernetesSessionClusterEntrypoint}.\n+ */\n+class KubernetesEntrypointUtils {\n+\n+\t/**\n+\t * For non-HA cluster, jobmanager rpc address has be set to Kubernetes service name on client side. So the TaskManager\n+\t * will use service address to connect with jobmanager.\n+\t * For HA cluster, jobmanager rpc address will be set to ip address. The TaskManager use Zookeeper or other\n+\t * high-availability service to find the address of jobmanager. The Kubernetes DNS creates A and SRV records only for\n+\t * Services. It doesn't generate pods' A records. So the ip address, not hostname, will be used as jobmanager address.\n+\t *\n+\t * @return Updated configuration\n+\t */\n+\tstatic Configuration loadConfiguration() {\n+\t\tfinal String configDir = System.getenv(ConfigConstants.ENV_FLINK_CONF_DIR);\n+\t\tPreconditions.checkNotNull(\n+\t\t\tconfigDir,\n+\t\t\t\"Flink configuration directory (%s) in environment should not be null!\",\n+\t\t\tConfigConstants.ENV_FLINK_CONF_DIR);\n+\n+\t\tfinal Configuration configuration = GlobalConfiguration.loadConfiguration(configDir);\n+\n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(configuration)) {\n+\t\t\tfinal String ipAddress =  System.getenv().get(Constants.ENV_FLINK_POD_IP_ADDRESS);\n+\t\t\tPreconditions.checkState(\n+\t\t\t\tipAddress != null,\n+\t\t\t\t\"JobManager ip address environment variable %s not set\",\n+\t\t\t\tConstants.ENV_FLINK_POD_IP_ADDRESS);\n+\t\t\tconfiguration.setString(JobManagerOptions.ADDRESS, ipAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzI2NA=="}, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTgyNDU4OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxMDozODowMVrOFfOQKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwMjo0Mjo0MFrOFfSYPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzY4OA==", "bodyText": "This might work. However, the way is a bit hack and add some dependency/assumption to the behavior of non-HA mode.\nIs there a clean way we let the client retrieve jobmanager address from k8s service no matter what the HA mode is?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368283688", "createdAt": "2020-01-19T10:38:01Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -84,6 +86,11 @@ public String getClusterDescription() {\n \t\t\tif (restEndpoint != null) {\n \t\t\t\tconfiguration.setString(RestOptions.ADDRESS, restEndpoint.getAddress());\n \t\t\t\tconfiguration.setInteger(RestOptions.PORT, restEndpoint.getPort());\n+\t\t\t\t// Flink client will not use HA service to retrieve address of jobmanager. Instead, it always use Kubernetes\n+\t\t\t\t// service to contact with jobmanager via rest client.\n+\t\t\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI5MzY5NA==", "bodyText": "I do not think it is a temporary hack.\nIn Kubernetes deployment, when we want to get a ClusterClient, we should not retrieve it from the ClientHAService. Instead, we retrieve the rest endpoint from Kubernetes service by FlinkKubeClient.getRestEndpoint(clusterId).\nMaybe removing the condition if (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) will look better.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368293694", "createdAt": "2020-01-19T13:24:00Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -84,6 +86,11 @@ public String getClusterDescription() {\n \t\t\tif (restEndpoint != null) {\n \t\t\t\tconfiguration.setString(RestOptions.ADDRESS, restEndpoint.getAddress());\n \t\t\t\tconfiguration.setInteger(RestOptions.PORT, restEndpoint.getPort());\n+\t\t\t\t// Flink client will not use HA service to retrieve address of jobmanager. Instead, it always use Kubernetes\n+\t\t\t\t// service to contact with jobmanager via rest client.\n+\t\t\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzY4OA=="}, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODM1MTI5Mw==", "bodyText": "I have a serious consideration and will find a more clean way. Maybe adding a new construct method for RestClusterClient could work.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368351293", "createdAt": "2020-01-20T02:42:40Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -84,6 +86,11 @@ public String getClusterDescription() {\n \t\t\tif (restEndpoint != null) {\n \t\t\t\tconfiguration.setString(RestOptions.ADDRESS, restEndpoint.getAddress());\n \t\t\t\tconfiguration.setInteger(RestOptions.PORT, restEndpoint.getPort());\n+\t\t\t\t// Flink client will not use HA service to retrieve address of jobmanager. Instead, it always use Kubernetes\n+\t\t\t\t// service to contact with jobmanager via rest client.\n+\t\t\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI4MzY4OA=="}, "originalCommit": {"oid": "93fe86fa5b20c9ab53afc0fd3f664ac8af0383ac"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzQ2OTk0OnYy", "diffSide": "RIGHT", "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjozNzowM1rOFfdCHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzo0NTowN1rOFfex7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNTg1Mg==", "bodyText": "better to checkNotNull", "url": "https://github.com/apache/flink/pull/10898#discussion_r368525852", "createdAt": "2020-01-20T12:37:03Z", "author": {"login": "zhuzhurk"}, "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "diffHunk": "@@ -182,7 +206,7 @@ public RestClusterClient(Configuration config, T clusterId) throws Exception {\n \t\tthis.waitStrategy = checkNotNull(waitStrategy);\n \t\tthis.clusterId = checkNotNull(clusterId);\n \n-\t\tthis.clientHAServices = HighAvailabilityServicesUtils.createClientHAService(configuration);\n+\t\tthis.clientHAServices = clientHAServices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e510779736a390f71ac42f8294c81b6cbaa51c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1NDQ3OA==", "bodyText": "Make sense.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368554478", "createdAt": "2020-01-20T13:45:07Z", "author": {"login": "wangyang0918"}, "path": "flink-clients/src/main/java/org/apache/flink/client/program/rest/RestClusterClient.java", "diffHunk": "@@ -182,7 +206,7 @@ public RestClusterClient(Configuration config, T clusterId) throws Exception {\n \t\tthis.waitStrategy = checkNotNull(waitStrategy);\n \t\tthis.clusterId = checkNotNull(clusterId);\n \n-\t\tthis.clientHAServices = HighAvailabilityServicesUtils.createClientHAService(configuration);\n+\t\tthis.clientHAServices = clientHAServices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNTg1Mg=="}, "originalCommit": {"oid": "46e510779736a390f71ac42f8294c81b6cbaa51c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzQ5MjcyOnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo0NTo0MFrOFfdPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMjo1MzowNlrOFftOQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTE5Nw==", "bodyText": "What's the config overriding for?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368529197", "createdAt": "2020-01-20T12:45:40Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -168,6 +185,13 @@ public String getClusterDescription() {\n \t\tfinal String nameSpace = flinkConfig.getString(KubernetesConfigOptions.NAMESPACE);\n \t\tflinkConfig.setString(JobManagerOptions.ADDRESS, clusterId + \".\" + nameSpace);\n \n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {\n+\t\t\tflinkConfig.setString(HighAvailabilityOptions.HA_CLUSTER_ID, clusterId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9447fa3992503fa0248804f23538087a18660c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1NjUzOA==", "bodyText": "We should update the HA_CLUSTER_ID since it will be used to contruct the zk path and ha storage path for the Flink cluster.\nYarn has the similar behavior in FlinkYarnSessionCli#applyCommandLineOptionsToConfiguration.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368556538", "createdAt": "2020-01-20T13:49:35Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -168,6 +185,13 @@ public String getClusterDescription() {\n \t\tfinal String nameSpace = flinkConfig.getString(KubernetesConfigOptions.NAMESPACE);\n \t\tflinkConfig.setString(JobManagerOptions.ADDRESS, clusterId + \".\" + nameSpace);\n \n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {\n+\t\t\tflinkConfig.setString(HighAvailabilityOptions.HA_CLUSTER_ID, clusterId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTE5Nw=="}, "originalCommit": {"oid": "c9447fa3992503fa0248804f23538087a18660c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4Mzk5NQ==", "bodyText": "So this change is not related to this commit?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368783995", "createdAt": "2020-01-21T02:13:48Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -168,6 +185,13 @@ public String getClusterDescription() {\n \t\tfinal String nameSpace = flinkConfig.getString(KubernetesConfigOptions.NAMESPACE);\n \t\tflinkConfig.setString(JobManagerOptions.ADDRESS, clusterId + \".\" + nameSpace);\n \n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {\n+\t\t\tflinkConfig.setString(HighAvailabilityOptions.HA_CLUSTER_ID, clusterId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTE5Nw=="}, "originalCommit": {"oid": "c9447fa3992503fa0248804f23538087a18660c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc4NDk5Ng==", "bodyText": "It is necessary when high-availability enabled. So do you mean to separate it to another commit?", "url": "https://github.com/apache/flink/pull/10898#discussion_r368784996", "createdAt": "2020-01-21T02:19:15Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -168,6 +185,13 @@ public String getClusterDescription() {\n \t\tfinal String nameSpace = flinkConfig.getString(KubernetesConfigOptions.NAMESPACE);\n \t\tflinkConfig.setString(JobManagerOptions.ADDRESS, clusterId + \".\" + nameSpace);\n \n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {\n+\t\t\tflinkConfig.setString(HighAvailabilityOptions.HA_CLUSTER_ID, clusterId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTE5Nw=="}, "originalCommit": {"oid": "c9447fa3992503fa0248804f23538087a18660c2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc5MTEwNQ==", "bodyText": "Yes. If it fixes another issue, we should make it a different commit.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368791105", "createdAt": "2020-01-21T02:53:06Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -168,6 +185,13 @@ public String getClusterDescription() {\n \t\tfinal String nameSpace = flinkConfig.getString(KubernetesConfigOptions.NAMESPACE);\n \t\tflinkConfig.setString(JobManagerOptions.ADDRESS, clusterId + \".\" + nameSpace);\n \n+\t\tif (HighAvailabilityMode.isHighAvailabilityModeActivated(flinkConfig)) {\n+\t\t\tflinkConfig.setString(HighAvailabilityOptions.HA_CLUSTER_ID, clusterId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyOTE5Nw=="}, "originalCommit": {"oid": "c9447fa3992503fa0248804f23538087a18660c2"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzUyNDE5OnYy", "diffSide": "RIGHT", "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo1Nzo1MFrOFfdh9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMzo0OTo1OFrOFfe6oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNDAwNQ==", "bodyText": "It would be better to leave a comment here for why we use StandaloneClientHAServices for k8s client.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368534005", "createdAt": "2020-01-20T12:57:50Z", "author": {"login": "zhuzhurk"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -91,7 +104,11 @@ public String getClusterDescription() {\n \t\t\t}\n \n \t\t\ttry {\n-\t\t\t\treturn new RestClusterClient<>(configuration, clusterId);\n+\t\t\t\treturn new RestClusterClient<>(\n+\t\t\t\t\tconfiguration,\n+\t\t\t\t\tclusterId,\n+\t\t\t\t\tnew StandaloneClientHAServices(HighAvailabilityServicesUtils.getWebMonitorAddress(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46e510779736a390f71ac42f8294c81b6cbaa51c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1NjcwNQ==", "bodyText": "I will add some comments here.", "url": "https://github.com/apache/flink/pull/10898#discussion_r368556705", "createdAt": "2020-01-20T13:49:58Z", "author": {"login": "wangyang0918"}, "path": "flink-kubernetes/src/main/java/org/apache/flink/kubernetes/KubernetesClusterDescriptor.java", "diffHunk": "@@ -91,7 +104,11 @@ public String getClusterDescription() {\n \t\t\t}\n \n \t\t\ttry {\n-\t\t\t\treturn new RestClusterClient<>(configuration, clusterId);\n+\t\t\t\treturn new RestClusterClient<>(\n+\t\t\t\t\tconfiguration,\n+\t\t\t\t\tclusterId,\n+\t\t\t\t\tnew StandaloneClientHAServices(HighAvailabilityServicesUtils.getWebMonitorAddress(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzNDAwNQ=="}, "originalCommit": {"oid": "46e510779736a390f71ac42f8294c81b6cbaa51c"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1249, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}