{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDk2NDEy", "number": 14246, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyNDo0OFrOFBp2Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo0Njo1OFrOFBqabA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjc4NTM4OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODoyNDo0OFrOIAa-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwOToyNzowNlrOIAdZCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxMjc3OA==", "bodyText": "We should still need to check the partitioner is in the allowed enums.", "url": "https://github.com/apache/flink/pull/14246#discussion_r537312778", "createdAt": "2020-12-07T08:24:48Z", "author": {"login": "wuchong"}, "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaOptions.java", "diffHunk": "@@ -314,12 +317,12 @@ private static void validateScanStartupMode(ReadableConfig tableOptions) {\n \tprivate static void validateSinkPartitioner(ReadableConfig tableOptions) {\n \t\ttableOptions.getOptional(SINK_PARTITIONER)\n \t\t\t\t.ifPresent(partitioner -> {\n-\t\t\t\t\tif (!SINK_PARTITIONER_ENUMS.contains(partitioner.toLowerCase())) {\n-\t\t\t\t\t\tif (partitioner.isEmpty()) {\n-\t\t\t\t\t\t\tthrow new ValidationException(\n-\t\t\t\t\t\t\t\t\tString.format(\"Option '%s' should be a non-empty string.\",\n-\t\t\t\t\t\t\t\t\t\t\tSINK_PARTITIONER.key()));\n-\t\t\t\t\t\t}\n+\t\t\t\t\tif (partitioner.equals(SINK_PARTITIONER_VALUE_ROUND_ROBIN) && tableOptions.getOptional(KEY_FIELDS).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d856871e79c3bbe65054c145c51e410f83d5c65"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM1MjQ1Ng==", "bodyText": "It's hard to check here because users may input the class name as user-defined partitioner.", "url": "https://github.com/apache/flink/pull/14246#discussion_r537352456", "createdAt": "2020-12-07T09:27:06Z", "author": {"login": "fsk119"}, "path": "flink-connectors/flink-connector-kafka/src/main/java/org/apache/flink/streaming/connectors/kafka/table/KafkaOptions.java", "diffHunk": "@@ -314,12 +317,12 @@ private static void validateScanStartupMode(ReadableConfig tableOptions) {\n \tprivate static void validateSinkPartitioner(ReadableConfig tableOptions) {\n \t\ttableOptions.getOptional(SINK_PARTITIONER)\n \t\t\t\t.ifPresent(partitioner -> {\n-\t\t\t\t\tif (!SINK_PARTITIONER_ENUMS.contains(partitioner.toLowerCase())) {\n-\t\t\t\t\t\tif (partitioner.isEmpty()) {\n-\t\t\t\t\t\t\tthrow new ValidationException(\n-\t\t\t\t\t\t\t\t\tString.format(\"Option '%s' should be a non-empty string.\",\n-\t\t\t\t\t\t\t\t\t\t\tSINK_PARTITIONER.key()));\n-\t\t\t\t\t\t}\n+\t\t\t\t\tif (partitioner.equals(SINK_PARTITIONER_VALUE_ROUND_ROBIN) && tableOptions.getOptional(KEY_FIELDS).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxMjc3OA=="}, "originalCommit": {"oid": "9d856871e79c3bbe65054c145c51e410f83d5c65"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjg3NTIxOnYy", "diffSide": "RIGHT", "path": "docs/dev/table/connectors/kafka.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo0NjoyM1rOIAbxcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo0NjoyM1rOIAbxcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNTkzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, Flink uses the [Kafka default partitioner](https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java) to parititon records.\n          \n          \n            \n            It uses the [sticky partition strategy](https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/) for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n          \n          \n            \n            In order to control the routing of rows into partitions, a custom sink partitioner can be provided. The 'fixed' partitioner will write the records in the same Flink partition into the same partition, which could reduce the cost of the network connections.\n          \n          \n            \n            By default, Flink uses the [Kafka default partitioner](https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java) to parititon records. It uses the [sticky partition strategy](https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/) for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n          \n          \n            \n            \n          \n          \n            \n            In order to control the routing of rows into partitions, a custom sink partitioner can be provided. The 'fixed' partitioner will write the records in the same Flink partition into the same Kafka partition, which could reduce the cost of the network connections.", "url": "https://github.com/apache/flink/pull/14246#discussion_r537325938", "createdAt": "2020-12-07T08:46:23Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/kafka.md", "diffHunk": "@@ -525,9 +527,9 @@ See more about how to use the CDC formats in [debezium-json]({% link dev/table/c\n ### Sink Partitioning\n \n The config option `sink.partitioner` specifies output partitioning from Flink's partitions into Kafka's partitions.\n-By default, a Kafka sink writes to at most as many partitions as its own parallelism (each parallel instance of the sink writes to exactly one partition).\n-In order to distribute the writes to more partitions or control the routing of rows into partitions, a custom sink partitioner can be provided. The `round-robin` partitioner is useful to avoid an unbalanced partitioning.\n-However, it will cause a lot of network connections between all the Flink instances and all the Kafka brokers.\n+By default, Flink uses the [Kafka default partitioner](https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java) to parititon records.\n+It uses the [sticky partition strategy](https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/) for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n+In order to control the routing of rows into partitions, a custom sink partitioner can be provided. The 'fixed' partitioner will write the records in the same Flink partition into the same partition, which could reduce the cost of the network connections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d856871e79c3bbe65054c145c51e410f83d5c65"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Mjg3Nzg4OnYy", "diffSide": "RIGHT", "path": "docs/dev/table/connectors/kafka.zh.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo0Njo1OFrOIAby-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODo0Njo1OFrOIAby-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyNjMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, Flink uses the [Kafka default partitioner](https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java) to parititon records.\n          \n          \n            \n            It uses the [sticky partition strategy](https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/) for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n          \n          \n            \n            In order to control the routing of rows into partitions, a custom sink partitioner can be provided. The 'fixed' partitioner will write the records in the same Flink partition into the same partition, which could reduce the cost of the network connections.\n          \n          \n            \n            By default, Flink uses the [Kafka default partitioner](https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java) to parititon records. It uses the [sticky partition strategy](https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/) for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n          \n          \n            \n            \n          \n          \n            \n            In order to control the routing of rows into partitions, a custom sink partitioner can be provided. The 'fixed' partitioner will write the records in the same Flink partition into the same partition, which could reduce the cost of the network connections.", "url": "https://github.com/apache/flink/pull/14246#discussion_r537326329", "createdAt": "2020-12-07T08:46:58Z", "author": {"login": "wuchong"}, "path": "docs/dev/table/connectors/kafka.zh.md", "diffHunk": "@@ -526,9 +528,9 @@ See more about how to use the CDC formats in [debezium-json]({% link dev/table/c\n ### Sink Partitioning\n \n The config option `sink.partitioner` specifies output partitioning from Flink's partitions into Kafka's partitions.\n-By default, a Kafka sink writes to at most as many partitions as its own parallelism (each parallel instance of the sink writes to exactly one partition).\n-In order to distribute the writes to more partitions or control the routing of rows into partitions, a custom sink partitioner can be provided. The `round-robin` partitioner is useful to avoid an unbalanced partitioning.\n-However, it will cause a lot of network connections between all the Flink instances and all the Kafka brokers.\n+By default, Flink uses the [Kafka default partitioner](https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/clients/producer/internals/DefaultPartitioner.java) to parititon records.\n+It uses the [sticky partition strategy](https://www.confluent.io/blog/apache-kafka-producer-improvements-sticky-partitioner/) for records with null keys and uses a murmur2 hash to compute the partition for a record with the key defined.\n+In order to control the routing of rows into partitions, a custom sink partitioner can be provided. The 'fixed' partitioner will write the records in the same Flink partition into the same partition, which could reduce the cost of the network connections.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d856871e79c3bbe65054c145c51e410f83d5c65"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}