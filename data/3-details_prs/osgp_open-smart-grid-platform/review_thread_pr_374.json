{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODY2ODk0", "number": 374, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowNzozNVrOERfh6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0NTowMlrOERxzyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Nzc3ODM1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowNzozNVrOG2O9vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowNzozNVrOG2O9vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyMTQ2OA==", "bodyText": "Reduce this anonymous class number of lines from 164 to at most 20, or make it a named class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459521468", "createdAt": "2020-07-23T15:07:35Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -77,7 +82,7 @@ public void setScheduleOnDevice(final Iec61850Client iec61850Client, final Devic\n         try {\n             // Creating a list of all Schedule entries, grouped by relay index.\n             final Map<Integer, List<ScheduleEntry>> relaySchedulesEntries = this.createScheduleEntries(scheduleList,\n-                    ssld, relayType, ssldDataService);\n+                    ssld, relayType);\n \n             final Function<Void> function = new Function<Void>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDA3NzYyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNjozNjowNFrOG2kjBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyMzo0N1rOG2zqjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTA3Ng==", "bodyText": "I think this should be a private method.\nFurthermore, the parameter could be an int, nothing is done with the Configuration object in this method besides using the getLongTermHistoryInterval.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459875076", "createdAt": "2020-07-24T06:36:04Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java", "diffHunk": "@@ -27,33 +27,34 @@ public boolean isValid(final Configuration value, final ConstraintValidatorConte\n             return true;\n         }\n         // If LongTermHistoryInterval or LongTermHistoryIntervalType is not\n-        // present,\n-        // the other must be not present as well.\n+        // present, the other must be not present as well.\n         if (value.getLongTermHistoryInterval() == null && value.getLongTermHistoryIntervalType() == null) {\n             return true;\n         }\n-        // If LongTermHistoryInterval or LongTermHistoryIntervalType is present,\n-        // the other must be as well.\n-        if (value.getLongTermHistoryInterval() != null && value.getLongTermHistoryIntervalType() != null) {\n-            // And, the value of long term history interval must be among the\n-            // permitted values, defined by the ranges:\n-            // - from 1 to 30 for long term history interval type DAYS.\n-            // - from 1 to 12 for long term history interval type MONTHS.\n-            switch (value.getLongTermHistoryIntervalType()) {\n-            case DAYS:\n-                if (value.getLongTermHistoryInterval() >= 1 && value.getLongTermHistoryInterval() <= 30) {\n-                    return true;\n-                }\n-                break;\n-            case MONTHS:\n-                if (value.getLongTermHistoryInterval() >= 1 && value.getLongTermHistoryInterval() <= 12) {\n-                    return true;\n-                }\n-                break;\n-            default:\n-                throw new ValidationException(\"unknown LongTermHistoryIntervalType\");\n+        // And, the value of long term history interval must be among the\n+        // permitted values, defined by the ranges:\n+        // - from 1 to 30 for long term history interval type DAYS.\n+        // - from 1 to 12 for long term history interval type MONTHS.\n+        return this.checkRanges(value);\n+    }\n+\n+    protected boolean checkRanges(final Configuration value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMjc2Nw==", "bodyText": "Changed method to private and added arguments for the interval value and type.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460122767", "createdAt": "2020-07-24T15:23:47Z", "author": {"login": "kevinsmeets"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/validation/LongTermIntervalAndLongTermIntervalTypeValidator.java", "diffHunk": "@@ -27,33 +27,34 @@ public boolean isValid(final Configuration value, final ConstraintValidatorConte\n             return true;\n         }\n         // If LongTermHistoryInterval or LongTermHistoryIntervalType is not\n-        // present,\n-        // the other must be not present as well.\n+        // present, the other must be not present as well.\n         if (value.getLongTermHistoryInterval() == null && value.getLongTermHistoryIntervalType() == null) {\n             return true;\n         }\n-        // If LongTermHistoryInterval or LongTermHistoryIntervalType is present,\n-        // the other must be as well.\n-        if (value.getLongTermHistoryInterval() != null && value.getLongTermHistoryIntervalType() != null) {\n-            // And, the value of long term history interval must be among the\n-            // permitted values, defined by the ranges:\n-            // - from 1 to 30 for long term history interval type DAYS.\n-            // - from 1 to 12 for long term history interval type MONTHS.\n-            switch (value.getLongTermHistoryIntervalType()) {\n-            case DAYS:\n-                if (value.getLongTermHistoryInterval() >= 1 && value.getLongTermHistoryInterval() <= 30) {\n-                    return true;\n-                }\n-                break;\n-            case MONTHS:\n-                if (value.getLongTermHistoryInterval() >= 1 && value.getLongTermHistoryInterval() <= 12) {\n-                    return true;\n-                }\n-                break;\n-            default:\n-                throw new ValidationException(\"unknown LongTermHistoryIntervalType\");\n+        // And, the value of long term history interval must be among the\n+        // permitted values, defined by the ranges:\n+        // - from 1 to 30 for long term history interval type DAYS.\n+        // - from 1 to 12 for long term history interval type MONTHS.\n+        return this.checkRanges(value);\n+    }\n+\n+    protected boolean checkRanges(final Configuration value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg3NTA3Ng=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDE4MjAwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzoyMTowNVrOG2ldmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNDoxMVrOG2zrpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5MDA3Mw==", "bodyText": "by not checking for the value of validRange here, the following test fails, while it should pass:\n@test\npublic void testDayOfWeekOfMonthTransitionValidationExceedsMaxMonth() {\nassertThat(DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH.isValid(\"M13.5.0\")).isFalse();\n}", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459890073", "createdAt": "2020-07-24T07:21:05Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java", "diffHunk": "@@ -207,16 +207,24 @@ public boolean isValid(final String transition) {\n                 } catch (final NumberFormatException nfe) {\n                     return false;\n                 }\n-                if (m < 1 || m > 12 || w < 1 || w > 5 || d < 0 || d > 6) {\n-                    return false;\n-                }\n+                final boolean validRange = this.checkRange(m, w, d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzA0NA==", "bodyText": "I added the test to the unit tests and refactored the method.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123044", "createdAt": "2020-07-24T15:24:11Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransition.java", "diffHunk": "@@ -207,16 +207,24 @@ public boolean isValid(final String transition) {\n                 } catch (final NumberFormatException nfe) {\n                     return false;\n                 }\n-                if (m < 1 || m > 12 || w < 1 || w > 5 || d < 0 || d > 6) {\n-                    return false;\n-                }\n+                final boolean validRange = this.checkRange(m, w, d);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg5MDA3Mw=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDI1MzU1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo0NzoyM1rOG2mHTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNDo0NFrOG2zs9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc0OA==", "bodyText": "I think the readability would be improved if the order of private methods is the same as the calling order setRelayConfiguration, setOsgpIpAddressAndPort, setAstronomicalOffsets, setClockConfiguration and setDhcpConfiguration", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459900748", "createdAt": "2020-07-24T07:47:23Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java", "diffHunk": "@@ -51,114 +53,85 @@ public void setConfigurationOnDevice(final Iec61850Client iec61850Client, final\n             @Override\n             public Void apply(final DeviceMessageLog deviceMessageLog) throws ProtocolAdapterException {\n \n-                if (configuration.getRelayConfiguration() != null\n-                        && configuration.getRelayConfiguration().getRelayMap() != null) {\n+                this.setRelayConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                    final List<RelayMapDto> relayMaps = configuration.getRelayConfiguration().getRelayMap();\n-                    for (final RelayMapDto relayMap : relayMaps) {\n-                        final Integer internalIndex = relayMap.getAddress();\n-                        final RelayTypeDto relayType = relayMap.getRelayType();\n+                this.setOsgpIpAddressAndPort(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final LogicalNode logicalNode = LogicalNode.getSwitchComponentByIndex(internalIndex);\n-                        final NodeContainer switchType = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n-                                logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO);\n-                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                                switchType.getFcmodelNode());\n+                this.setAstronomicalOffsets(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final NodeContainer operation = switchType.getChild(SubDataAttribute.OPERATION);\n-                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                                operation.getFcmodelNode());\n-                        final BdaInt8 ctlVal = operation.getByte(SubDataAttribute.CONTROL_VALUE);\n+                this.setClockConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final byte switchTypeValue = (byte) (RelayTypeDto.LIGHT.equals(relayType) ? SWITCH_TYPE_LIGHT\n-                                : SWITCH_TYPE_TARIFF);\n-                        LOGGER.info(\"Updating Switch for internal index {} to {} ({})\", internalIndex, switchTypeValue,\n-                                relayType);\n+                this.setDhcpConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        ctlVal.setValue(switchTypeValue);\n-                        operation.write();\n+                Iec61850SetConfigurationCommand.this.loggingService.logMessage(deviceMessageLog,\n+                        deviceConnection.getDeviceIdentification(), deviceConnection.getOrganisationIdentification(),\n+                        false);\n \n-                        deviceMessageLog.addVariable(logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO,\n-                                SubDataAttribute.OPERATION, SubDataAttribute.CONTROL_VALUE,\n-                                Byte.toString(switchTypeValue));\n-                    }\n-                }\n+                return null;\n+            }\n \n-                // Checking to see if all register values are null, so that we\n+            private void setDhcpConfiguration(final Iec61850Client iec61850Client,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzM4MA==", "bodyText": "Method order changed to calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123380", "createdAt": "2020-07-24T15:24:44Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetConfigurationCommand.java", "diffHunk": "@@ -51,114 +53,85 @@ public void setConfigurationOnDevice(final Iec61850Client iec61850Client, final\n             @Override\n             public Void apply(final DeviceMessageLog deviceMessageLog) throws ProtocolAdapterException {\n \n-                if (configuration.getRelayConfiguration() != null\n-                        && configuration.getRelayConfiguration().getRelayMap() != null) {\n+                this.setRelayConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                    final List<RelayMapDto> relayMaps = configuration.getRelayConfiguration().getRelayMap();\n-                    for (final RelayMapDto relayMap : relayMaps) {\n-                        final Integer internalIndex = relayMap.getAddress();\n-                        final RelayTypeDto relayType = relayMap.getRelayType();\n+                this.setOsgpIpAddressAndPort(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final LogicalNode logicalNode = LogicalNode.getSwitchComponentByIndex(internalIndex);\n-                        final NodeContainer switchType = deviceConnection.getFcModelNode(LogicalDevice.LIGHTING,\n-                                logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO);\n-                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                                switchType.getFcmodelNode());\n+                this.setAstronomicalOffsets(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final NodeContainer operation = switchType.getChild(SubDataAttribute.OPERATION);\n-                        iec61850Client.readNodeDataValues(deviceConnection.getConnection().getClientAssociation(),\n-                                operation.getFcmodelNode());\n-                        final BdaInt8 ctlVal = operation.getByte(SubDataAttribute.CONTROL_VALUE);\n+                this.setClockConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        final byte switchTypeValue = (byte) (RelayTypeDto.LIGHT.equals(relayType) ? SWITCH_TYPE_LIGHT\n-                                : SWITCH_TYPE_TARIFF);\n-                        LOGGER.info(\"Updating Switch for internal index {} to {} ({})\", internalIndex, switchTypeValue,\n-                                relayType);\n+                this.setDhcpConfiguration(iec61850Client, deviceConnection, configuration, deviceMessageLog);\n \n-                        ctlVal.setValue(switchTypeValue);\n-                        operation.write();\n+                Iec61850SetConfigurationCommand.this.loggingService.logMessage(deviceMessageLog,\n+                        deviceConnection.getDeviceIdentification(), deviceConnection.getOrganisationIdentification(),\n+                        false);\n \n-                        deviceMessageLog.addVariable(logicalNode, DataAttribute.SWITCH_TYPE, Fc.CO,\n-                                SubDataAttribute.OPERATION, SubDataAttribute.CONTROL_VALUE,\n-                                Byte.toString(switchTypeValue));\n-                    }\n-                }\n+                return null;\n+            }\n \n-                // Checking to see if all register values are null, so that we\n+            private void setDhcpConfiguration(final Iec61850Client iec61850Client,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc0OA=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDI4MzI4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo1ODoxMlrOG2mZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNTowM1rOG2zt1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTM1Mg==", "bodyText": "nice way to get rid of the ssldDataService parameter in lots of methods!", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459905352", "createdAt": "2020-07-24T07:58:12Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -61,13 +62,17 @@\n \n     private final DeviceMessageLoggingService loggingService;\n \n-    public Iec61850SetScheduleCommand(final DeviceMessageLoggingService loggingService) {\n+    private final SsldDataService ssldDataService;\n+\n+    public Iec61850SetScheduleCommand(final DeviceMessageLoggingService loggingService,\n+            final SsldDataService ssldDataService) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzYwNw==", "bodyText": "Thanks mate :)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123607", "createdAt": "2020-07-24T15:25:03Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -61,13 +62,17 @@\n \n     private final DeviceMessageLoggingService loggingService;\n \n-    public Iec61850SetScheduleCommand(final DeviceMessageLoggingService loggingService) {\n+    private final SsldDataService ssldDataService;\n+\n+    public Iec61850SetScheduleCommand(final DeviceMessageLoggingService loggingService,\n+            final SsldDataService ssldDataService) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNTM1Mg=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDI5MjQxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODowMDo1OFrOG2mefQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNTowOVrOG2zuGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNjY4NQ==", "bodyText": "It would improve readability if the order of private methods would be the same as the calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459906685", "createdAt": "2020-07-24T08:00:58Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -161,20 +166,61 @@ private void writeScheduleEntryForRelay(final DeviceMessageLog deviceMessageLog,\n                     final String scheduleEntryName = SubDataAttribute.SCHEDULE_ENTRY.getDescription() + (i + 1);\n                     final NodeContainer scheduleNode = schedule.getChild(scheduleEntryName);\n \n-                    final BdaBoolean enabled = scheduleNode.getBoolean(SubDataAttribute.SCHEDULE_ENABLE);\n-                    if (enabled.getValue() != scheduleEntry.isEnabled()) {\n-                        scheduleNode.writeBoolean(SubDataAttribute.SCHEDULE_ENABLE, scheduleEntry.isEnabled());\n+                    this.setEnabled(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setDay(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setSwitchTimes(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setMinimumTimeOn(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName,\n+                            scheduleNode);\n+\n+                    this.setTriggerWindow(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName,\n+                            scheduleNode);\n+                }\n+\n+                private void setTriggerWindow(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzY3Mg==", "bodyText": "Method order changed to calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123672", "createdAt": "2020-07-24T15:25:09Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/services/commands/Iec61850SetScheduleCommand.java", "diffHunk": "@@ -161,20 +166,61 @@ private void writeScheduleEntryForRelay(final DeviceMessageLog deviceMessageLog,\n                     final String scheduleEntryName = SubDataAttribute.SCHEDULE_ENTRY.getDescription() + (i + 1);\n                     final NodeContainer scheduleNode = schedule.getChild(scheduleEntryName);\n \n-                    final BdaBoolean enabled = scheduleNode.getBoolean(SubDataAttribute.SCHEDULE_ENABLE);\n-                    if (enabled.getValue() != scheduleEntry.isEnabled()) {\n-                        scheduleNode.writeBoolean(SubDataAttribute.SCHEDULE_ENABLE, scheduleEntry.isEnabled());\n+                    this.setEnabled(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setDay(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setSwitchTimes(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName, scheduleNode);\n+\n+                    this.setMinimumTimeOn(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName,\n+                            scheduleNode);\n+\n+                    this.setTriggerWindow(deviceMessageLog, logicalNode, scheduleEntry, scheduleEntryName,\n+                            scheduleNode);\n+                }\n+\n+                private void setTriggerWindow(final DeviceMessageLog deviceMessageLog, final LogicalNode logicalNode,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwNjY4NQ=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDMzNTEzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNToyNlrOG2m3gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNToxM1rOG2zuNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzA4OA==", "bodyText": "It would improve readability if the order of private methods would be the same as the calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459913088", "createdAt": "2020-07-24T08:15:26Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java", "diffHunk": "@@ -114,7 +88,82 @@ public ConfigurationDto convert(final Oslp.GetConfigurationResponse source,\n         configuration.setWinterTimeDetails(winterTimeDetails);\n \n         return configuration;\n-        // @formatter:on\n+    }\n+\n+    private LongTermIntervalTypeDto getLongTermHistoryIntervalType(final Oslp.GetConfigurationResponse source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzcwMA==", "bodyText": "Method order changed to calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123700", "createdAt": "2020-07-24T15:25:13Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/OslpGetConfigurationResponseToConfigurationConverter.java", "diffHunk": "@@ -114,7 +88,82 @@ public ConfigurationDto convert(final Oslp.GetConfigurationResponse source,\n         configuration.setWinterTimeDetails(winterTimeDetails);\n \n         return configuration;\n-        // @formatter:on\n+    }\n+\n+    private LongTermIntervalTypeDto getLongTermHistoryIntervalType(final Oslp.GetConfigurationResponse source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzA4OA=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDMzNzIxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNTo1NFrOG2m4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNToxOVrOG2zuZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzM3Nw==", "bodyText": "It would improve readability if the order of private methods would be the same as the calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459913377", "createdAt": "2020-07-24T08:15:54Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java", "diffHunk": "@@ -37,55 +37,111 @@ public SetConfigurationRequest convert(final ConfigurationDto source,\n \n         final Oslp.SetConfigurationRequest.Builder setConfigurationRequest = Oslp.SetConfigurationRequest.newBuilder();\n \n-        if (source.getLightType() != null) {\n-            setConfigurationRequest.setLightType(this.mapperFacade.map(source.getLightType(), Oslp.LightType.class));\n-        }\n-        if (source.getDaliConfiguration() != null) {\n-            setConfigurationRequest.setDaliConfiguration(\n-                    this.mapperFacade.map(source.getDaliConfiguration(), Oslp.DaliConfiguration.class));\n-        }\n-        if (source.getRelayConfiguration() != null) {\n-            setConfigurationRequest.setRelayConfiguration(\n-                    this.mapperFacade.map(source.getRelayConfiguration(), Oslp.RelayConfiguration.class));\n-        }\n-        if (source.getShortTermHistoryIntervalMinutes() != null) {\n-            setConfigurationRequest.setShortTermHistoryIntervalMinutes(\n-                    this.mapperFacade.map(source.getShortTermHistoryIntervalMinutes(), Integer.class));\n-        }\n-        if (source.getLongTermHistoryInterval() != null) {\n-            setConfigurationRequest.setLongTermHistoryInterval(\n-                    this.mapperFacade.map(source.getLongTermHistoryInterval(), Integer.class));\n+        this.setLightType(source, setConfigurationRequest);\n+        this.setDaliConfiguration(source, setConfigurationRequest);\n+        this.setRelayConfiguration(source, setConfigurationRequest);\n+        this.setShortTermHistoryIntervalMinutes(source, setConfigurationRequest);\n+        this.setLongTermHistoryInterval(source, setConfigurationRequest);\n+        this.setLongTermHistoryIntervalType(source, setConfigurationRequest);\n+        this.setPreferredLinkType(source, setConfigurationRequest);\n+        this.setMeterType(source, setConfigurationRequest);\n+        this.setAstroGateSunRiseOffset(source, setConfigurationRequest);\n+        this.setAstroGateSunSetOffset(source, setConfigurationRequest);\n+        this.setIsAutomaticSummerTimingEnabled(source, setConfigurationRequest);\n+        this.setCommunicationNumberOfRetries(source, setConfigurationRequest);\n+        this.setCommunicationPauseTimeBetweenConnectionTrials(source, setConfigurationRequest);\n+        this.setCommunicationTimeout(source, setConfigurationRequest);\n+        this.setFixedIpConfiguration(source, setConfigurationRequest);\n+        this.setIsDhcpEnabled(source, setConfigurationRequest);\n+        this.setOsgpPortNumber(source, setConfigurationRequest);\n+        this.setOsgpIpAddress(source, setConfigurationRequest);\n+        this.setRelayRefreshing(source, setConfigurationRequest);\n+        this.setSummerTimeDetails(source, setConfigurationRequest);\n+        this.setIsTestButtonEnabled(source, setConfigurationRequest);\n+        this.setTimeSyncFrequency(source, setConfigurationRequest);\n+        this.setWinterTimeDetails(source, setConfigurationRequest);\n+        this.setSwitchingDelays(source, setConfigurationRequest);\n+        this.setRelayLinking(source, setConfigurationRequest);\n+\n+        return setConfigurationRequest.build();\n+    }\n+\n+    private void setRelayLinking(final ConfigurationDto source,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzc0OA==", "bodyText": "Method order changed to calling order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123748", "createdAt": "2020-07-24T15:25:19Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/application/mapping/ConfigurationToOslpSetConfigurationRequestConverter.java", "diffHunk": "@@ -37,55 +37,111 @@ public SetConfigurationRequest convert(final ConfigurationDto source,\n \n         final Oslp.SetConfigurationRequest.Builder setConfigurationRequest = Oslp.SetConfigurationRequest.newBuilder();\n \n-        if (source.getLightType() != null) {\n-            setConfigurationRequest.setLightType(this.mapperFacade.map(source.getLightType(), Oslp.LightType.class));\n-        }\n-        if (source.getDaliConfiguration() != null) {\n-            setConfigurationRequest.setDaliConfiguration(\n-                    this.mapperFacade.map(source.getDaliConfiguration(), Oslp.DaliConfiguration.class));\n-        }\n-        if (source.getRelayConfiguration() != null) {\n-            setConfigurationRequest.setRelayConfiguration(\n-                    this.mapperFacade.map(source.getRelayConfiguration(), Oslp.RelayConfiguration.class));\n-        }\n-        if (source.getShortTermHistoryIntervalMinutes() != null) {\n-            setConfigurationRequest.setShortTermHistoryIntervalMinutes(\n-                    this.mapperFacade.map(source.getShortTermHistoryIntervalMinutes(), Integer.class));\n-        }\n-        if (source.getLongTermHistoryInterval() != null) {\n-            setConfigurationRequest.setLongTermHistoryInterval(\n-                    this.mapperFacade.map(source.getLongTermHistoryInterval(), Integer.class));\n+        this.setLightType(source, setConfigurationRequest);\n+        this.setDaliConfiguration(source, setConfigurationRequest);\n+        this.setRelayConfiguration(source, setConfigurationRequest);\n+        this.setShortTermHistoryIntervalMinutes(source, setConfigurationRequest);\n+        this.setLongTermHistoryInterval(source, setConfigurationRequest);\n+        this.setLongTermHistoryIntervalType(source, setConfigurationRequest);\n+        this.setPreferredLinkType(source, setConfigurationRequest);\n+        this.setMeterType(source, setConfigurationRequest);\n+        this.setAstroGateSunRiseOffset(source, setConfigurationRequest);\n+        this.setAstroGateSunSetOffset(source, setConfigurationRequest);\n+        this.setIsAutomaticSummerTimingEnabled(source, setConfigurationRequest);\n+        this.setCommunicationNumberOfRetries(source, setConfigurationRequest);\n+        this.setCommunicationPauseTimeBetweenConnectionTrials(source, setConfigurationRequest);\n+        this.setCommunicationTimeout(source, setConfigurationRequest);\n+        this.setFixedIpConfiguration(source, setConfigurationRequest);\n+        this.setIsDhcpEnabled(source, setConfigurationRequest);\n+        this.setOsgpPortNumber(source, setConfigurationRequest);\n+        this.setOsgpIpAddress(source, setConfigurationRequest);\n+        this.setRelayRefreshing(source, setConfigurationRequest);\n+        this.setSummerTimeDetails(source, setConfigurationRequest);\n+        this.setIsTestButtonEnabled(source, setConfigurationRequest);\n+        this.setTimeSyncFrequency(source, setConfigurationRequest);\n+        this.setWinterTimeDetails(source, setConfigurationRequest);\n+        this.setSwitchingDelays(source, setConfigurationRequest);\n+        this.setRelayLinking(source, setConfigurationRequest);\n+\n+        return setConfigurationRequest.build();\n+    }\n+\n+    private void setRelayLinking(final ConfigurationDto source,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxMzM3Nw=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc2MzM4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0MToxMFrOG2q3SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNTozN1rOG2zvDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODU2OA==", "bodyText": "as far as I can see the parameter response is always null here.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459978568", "createdAt": "2020-07-24T10:41:10Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzkxNw==", "bodyText": "Removed the response parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123917", "createdAt": "2020-07-24T15:25:37Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODU2OA=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc2NDM1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0MTozMlrOG2q34w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNTo0M1rOG2zvTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODcyMw==", "bodyText": "remove the parameter response", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459978723", "createdAt": "2020-07-24T10:41:32Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);\n+\n+        // Update device\n+        device.setSequenceNumber(expectedSequenceNumber);\n+        this.deviceManagementService.updateDevice(device);\n+\n+        // Write log entry for response\n+        LOGGER.debug(\"Responding: {}\", response);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"squid:MethodCyclomaticComplexity\")\n+    private Oslp.Message handleRequest(final Oslp.Message request, Oslp.Message response, final Device device)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyMzk4Mg==", "bodyText": "Removed the response parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460123982", "createdAt": "2020-07-24T15:25:43Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);\n+\n+        // Update device\n+        device.setSequenceNumber(expectedSequenceNumber);\n+        this.deviceManagementService.updateDevice(device);\n+\n+        // Write log entry for response\n+        LOGGER.debug(\"Responding: {}\", response);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"squid:MethodCyclomaticComplexity\")\n+    private Oslp.Message handleRequest(final Oslp.Message request, Oslp.Message response, final Device device)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3ODcyMw=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc3MzIyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo0NTowMlrOG2q9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyNTo1MVrOG2zvmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MDExNQ==", "bodyText": "according to https://github.com/SmartSocietyServices/Way-of-Working-Wiki/wiki/Suppression-of-SonarQube-warnings-like-FalsePositives a justification why the specific warning is being suppressed should be given", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r459980115", "createdAt": "2020-07-24T10:45:02Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);\n+\n+        // Update device\n+        device.setSequenceNumber(expectedSequenceNumber);\n+        this.deviceManagementService.updateDevice(device);\n+\n+        // Write log entry for response\n+        LOGGER.debug(\"Responding: {}\", response);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"squid:MethodCyclomaticComplexity\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNDA1OA==", "bodyText": "Added a comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/374#discussion_r460124058", "createdAt": "2020-07-24T15:25:51Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -494,6 +495,21 @@ private void sleep(final Long sleepTime) {\n             }\n         }\n \n+        response = this.handleRequest(request, response, device);\n+\n+        // Update device\n+        device.setSequenceNumber(expectedSequenceNumber);\n+        this.deviceManagementService.updateDevice(device);\n+\n+        // Write log entry for response\n+        LOGGER.debug(\"Responding: {}\", response);\n+\n+        return response;\n+    }\n+\n+    @SuppressWarnings(\"squid:MethodCyclomaticComplexity\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MDExNQ=="}, "originalCommit": {"oid": "2157d1322f9f8066a85c22299c9e1c758c4ca1dd"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3645, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}