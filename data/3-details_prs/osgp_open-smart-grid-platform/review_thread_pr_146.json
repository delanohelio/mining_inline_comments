{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTExNjk1", "number": 146, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowNzo1OFrODV9P_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowODowMVrODV9QAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzUwMjA1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/Iec61850ChannelHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowNzo1OVrOFacIPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowNzo1OVrOFacIPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI2ODE1OA==", "bodyText": "Make the \"logger\" logger private static final and rename it to comply with the format \"LOG(?:GER)?\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/146#discussion_r363268158", "createdAt": "2020-01-06T12:07:59Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/main/java/org/opensmartgridplatform/adapter/protocol/iec61850/infra/networking/Iec61850ChannelHandler.java", "diffHunk": "@@ -1,24 +1,22 @@\n /**\n- * Copyright 2014-2016 Smart Society Services B.V.\n+ * Copyright 2014 Smart Society Services B.V.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.iec61850.infra.networking;\n \n-import org.jboss.netty.channel.ChannelHandlerContext;\n-import org.jboss.netty.channel.ChannelStateEvent;\n-import org.jboss.netty.channel.ExceptionEvent;\n-import org.jboss.netty.channel.SimpleChannelHandler;\n-import org.slf4j.Logger;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n import org.opensmartgridplatform.adapter.protocol.iec61850.infra.messaging.Iec61850LogItemRequestMessage;\n import org.opensmartgridplatform.adapter.protocol.iec61850.infra.messaging.Iec61850LogItemRequestMessageSender;\n import org.opensmartgridplatform.iec61850.RegisterDeviceRequest;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n \n-public abstract class Iec61850ChannelHandler extends SimpleChannelHandler {\n+public abstract class Iec61850ChannelHandler extends SimpleChannelInboundHandler<RegisterDeviceRequest> {\n \n     private final Logger logger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da495d0fe87604a18655b80d858c51968a9d72ca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzUwMjA3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/oslp/src/main/java/org/opensmartgridplatform/oslp/OslpUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowNzo1OVrOFacIQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowNzo1OVrOFacIQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI2ODE2Mw==", "bodyText": "The Cyclomatic Complexity of this method \"isOslpResponse\" is 22 which is greater than 10 authorized.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/146#discussion_r363268163", "createdAt": "2020-01-06T12:07:59Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-oslp/oslp/src/main/java/org/opensmartgridplatform/oslp/OslpUtils.java", "diffHunk": "@@ -165,23 +166,51 @@ public static boolean validateSignature(final byte[] message, final byte[] secur\n         final Signature signatureBuilder = Signature.getInstance(signature, provider);\n         signatureBuilder.initVerify(publicKey);\n         signatureBuilder.update(message);\n-        \n+\n         int signatureLength = securityKey.length;\n-        \n+\n         if (ArrayUtils.contains(TRUNCATE_SIGNATURES, signature)) {\n             // Fix for https://bugs.openjdk.java.net/browse/JDK-8161571\n-            // Read 2nd byte as length indicator for the actual signature bytes, include 2 bytes for 1st 2 bytes\n-            // Ensure the byte (which is signed) is converted correctly to a positive int\n-            signatureLength = securityKey[1]+2 & 0xFF;\n+            // Read 2nd byte as length indicator for the actual signature bytes,\n+            // include 2 bytes for 1st 2 bytes\n+            // Ensure the byte (which is signed) is converted correctly to a\n+            // positive int\n+            signatureLength = securityKey[1] + 2 & 0xFF;\n             if (signatureLength > securityKey.length) {\n-                throw new GeneralSecurityException(\"Size indicator in ASN.1 DSA signature to large [\" + signatureLength + \"]\");\n+                throw new GeneralSecurityException(\n+                        \"Size indicator in ASN.1 DSA signature to large [\" + signatureLength + \"]\");\n             }\n         }\n         // Truncate the string to actual ASN.1 DSA length, removing padding\n-        byte[] truncated = Arrays.copyOf(securityKey, signatureLength);\n+        final byte[] truncated = Arrays.copyOf(securityKey, signatureLength);\n         return signatureBuilder.verify(truncated);\n     }\n \n+    public static boolean isOslpResponse(final OslpEnvelope envelope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da495d0fe87604a18655b80d858c51968a9d72ca"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MzUwMjA5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/oslp/src/main/java/org/opensmartgridplatform/oslp/OslpUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowODowMVrOFacISQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxMjowODowMVrOFacISQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzI2ODE2OQ==", "bodyText": "Reduce the number of conditional operators (21) used in the expression (maximum allowed 3).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/146#discussion_r363268169", "createdAt": "2020-01-06T12:08:01Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-oslp/oslp/src/main/java/org/opensmartgridplatform/oslp/OslpUtils.java", "diffHunk": "@@ -165,23 +166,51 @@ public static boolean validateSignature(final byte[] message, final byte[] secur\n         final Signature signatureBuilder = Signature.getInstance(signature, provider);\n         signatureBuilder.initVerify(publicKey);\n         signatureBuilder.update(message);\n-        \n+\n         int signatureLength = securityKey.length;\n-        \n+\n         if (ArrayUtils.contains(TRUNCATE_SIGNATURES, signature)) {\n             // Fix for https://bugs.openjdk.java.net/browse/JDK-8161571\n-            // Read 2nd byte as length indicator for the actual signature bytes, include 2 bytes for 1st 2 bytes\n-            // Ensure the byte (which is signed) is converted correctly to a positive int\n-            signatureLength = securityKey[1]+2 & 0xFF;\n+            // Read 2nd byte as length indicator for the actual signature bytes,\n+            // include 2 bytes for 1st 2 bytes\n+            // Ensure the byte (which is signed) is converted correctly to a\n+            // positive int\n+            signatureLength = securityKey[1] + 2 & 0xFF;\n             if (signatureLength > securityKey.length) {\n-                throw new GeneralSecurityException(\"Size indicator in ASN.1 DSA signature to large [\" + signatureLength + \"]\");\n+                throw new GeneralSecurityException(\n+                        \"Size indicator in ASN.1 DSA signature to large [\" + signatureLength + \"]\");\n             }\n         }\n         // Truncate the string to actual ASN.1 DSA length, removing padding\n-        byte[] truncated = Arrays.copyOf(securityKey, signatureLength);\n+        final byte[] truncated = Arrays.copyOf(securityKey, signatureLength);\n         return signatureBuilder.verify(truncated);\n     }\n \n+    public static boolean isOslpResponse(final OslpEnvelope envelope) {\n+        return envelope.getPayloadMessage().hasRegisterDeviceResponse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da495d0fe87604a18655b80d858c51968a9d72ca"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3710, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}