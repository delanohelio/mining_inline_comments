{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzI3Nzky", "number": 368, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjozNTozOFrOEM3_4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzozNjo1NlrOER01HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTM1ODQwOnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjozNTozOFrOGvPINQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjozNTozOFrOGvPINQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE4NDExNw==", "bodyText": "Don't use printStackTrace. When something should be logged, use a LOGGER object, created using \"LoggerFactory.getLogger(PutYourClassNameHere.class)\". PrintStackTrace does not log to our normal output files.\nWhen the exception occurs, the test should fail. In this case, it's therefore best to just throw the exception. Suppressing it can cause strange effects.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r452184117", "createdAt": "2020-07-09T12:35:38Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ *  Copyright 2020 Smart Society Services B.V.\n+ */\n+package org.opensmartgridplatform.cucumber.platform.common.glue.steps.ws.admin.devicemanagement;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLog;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.SortDirectionEnum;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonDefaults;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.support.ws.admin.AdminDeviceManagementClient;\n+import org.opensmartgridplatform.cucumber.platform.inputparsers.XmlGregorianCalendarInputParser;\n+import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class FilterMessageLogsSteps {\n+\n+    @Autowired\n+    private AdminDeviceManagementClient client;\n+\n+    @When(\"receiving a message log request without a filter\")\n+    public void getMessageLogNoFilter() throws WebServiceSecurityException, GeneralSecurityException, IOException {\n+        final FindMessageLogsRequest request = new FindMessageLogsRequest();\n+        ScenarioContext.current().put(PlatformCommonKeys.RESPONSE, this.client.findMessageLogs(request));\n+    }\n+\n+    @When(\"^receiving a filter message log request$\")\n+    public void getMessageLogFilter(final Map<String, String> requestParameters) throws IllegalArgumentException {\n+        final FindMessageLogsRequest request = new FindMessageLogsRequest();\n+\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION)) {\n+            request.setDeviceIdentification(getString(requestParameters, PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION,\n+                    PlatformCommonDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION)) {\n+            request.setOrganisationIdentification(\n+                    getString(requestParameters, PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION,\n+                            PlatformCommonDefaults.DEFAULT_ORGANIZATION_IDENTIFICATION));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SETPOINT_START_TIME)) {\n+            request.setStartTime(XmlGregorianCalendarInputParser.parse(getString(requestParameters,\n+                    PlatformCommonKeys.KEY_SETPOINT_START_TIME, PlatformCommonDefaults.DEFAULT_BEGIN_DATE)));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SETPOINT_END_TIME)) {\n+            request.setEndTime(XmlGregorianCalendarInputParser.parse(getString(requestParameters,\n+                    PlatformCommonKeys.KEY_SETPOINT_END_TIME, PlatformCommonDefaults.DEFAULT_END_DATE)));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SORT_DIR)) {\n+\n+            if ((requestParameters.get(PlatformCommonKeys.KEY_SORT_DIR)).equals(\"ASC\")) {\n+                request.setSortDirection(SortDirectionEnum.ASC);\n+            } else if ((requestParameters.get(PlatformCommonKeys.KEY_SORT_DIR)).equals(\"DESC\")) {\n+                request.setSortDirection(SortDirectionEnum.DESC);\n+            } else {\n+                throw new IllegalArgumentException(\"Sort direction not properly set\");\n+            }\n+\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SORTED_BY)) {\n+            request.setSortBy(requestParameters.get(PlatformCommonKeys.KEY_SORTED_BY));\n+        }\n+\n+        try {\n+            ScenarioContext.current().put(PlatformCommonKeys.RESPONSE, this.client.findMessageLogs(request));\n+        } catch (final WebServiceSecurityException e) {\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8c1256b3601adea7f2bc2a72c84fe66e0e56bb"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTM3NTU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjo0MDoxMVrOGvPS2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjo0MDoxMVrOGvPS2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE4Njg0Mg==", "bodyText": "This can be done easier using method ReadSettingsHelper.getEnum(..).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r452186842", "createdAt": "2020-07-09T12:40:11Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ *  Copyright 2020 Smart Society Services B.V.\n+ */\n+package org.opensmartgridplatform.cucumber.platform.common.glue.steps.ws.admin.devicemanagement;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLog;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.SortDirectionEnum;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonDefaults;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.support.ws.admin.AdminDeviceManagementClient;\n+import org.opensmartgridplatform.cucumber.platform.inputparsers.XmlGregorianCalendarInputParser;\n+import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class FilterMessageLogsSteps {\n+\n+    @Autowired\n+    private AdminDeviceManagementClient client;\n+\n+    @When(\"receiving a message log request without a filter\")\n+    public void getMessageLogNoFilter() throws WebServiceSecurityException, GeneralSecurityException, IOException {\n+        final FindMessageLogsRequest request = new FindMessageLogsRequest();\n+        ScenarioContext.current().put(PlatformCommonKeys.RESPONSE, this.client.findMessageLogs(request));\n+    }\n+\n+    @When(\"^receiving a filter message log request$\")\n+    public void getMessageLogFilter(final Map<String, String> requestParameters) throws IllegalArgumentException {\n+        final FindMessageLogsRequest request = new FindMessageLogsRequest();\n+\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION)) {\n+            request.setDeviceIdentification(getString(requestParameters, PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION,\n+                    PlatformCommonDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION)) {\n+            request.setOrganisationIdentification(\n+                    getString(requestParameters, PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION,\n+                            PlatformCommonDefaults.DEFAULT_ORGANIZATION_IDENTIFICATION));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SETPOINT_START_TIME)) {\n+            request.setStartTime(XmlGregorianCalendarInputParser.parse(getString(requestParameters,\n+                    PlatformCommonKeys.KEY_SETPOINT_START_TIME, PlatformCommonDefaults.DEFAULT_BEGIN_DATE)));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SETPOINT_END_TIME)) {\n+            request.setEndTime(XmlGregorianCalendarInputParser.parse(getString(requestParameters,\n+                    PlatformCommonKeys.KEY_SETPOINT_END_TIME, PlatformCommonDefaults.DEFAULT_END_DATE)));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SORT_DIR)) {\n+\n+            if ((requestParameters.get(PlatformCommonKeys.KEY_SORT_DIR)).equals(\"ASC\")) {\n+                request.setSortDirection(SortDirectionEnum.ASC);\n+            } else if ((requestParameters.get(PlatformCommonKeys.KEY_SORT_DIR)).equals(\"DESC\")) {\n+                request.setSortDirection(SortDirectionEnum.DESC);\n+            } else {\n+                throw new IllegalArgumentException(\"Sort direction not properly set\");\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8c1256b3601adea7f2bc2a72c84fe66e0e56bb"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTQxNjY0OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjo1MTowOVrOGvPr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMjo1MTowOVrOGvPr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE5MzIzMw==", "bodyText": "This doesn't guarantee the order of the ID's in messageLogs.\nFor instance: [3, 4, 5, 3, 4, 5] would result in [3, 4, 5]. The end result is ordered, but the initial list isn't.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r452193233", "createdAt": "2020-07-09T12:51:09Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ *  Copyright 2020 Smart Society Services B.V.\n+ */\n+package org.opensmartgridplatform.cucumber.platform.common.glue.steps.ws.admin.devicemanagement;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.io.IOException;\n+import java.security.GeneralSecurityException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLog;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.SortDirectionEnum;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonDefaults;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.support.ws.admin.AdminDeviceManagementClient;\n+import org.opensmartgridplatform.cucumber.platform.inputparsers.XmlGregorianCalendarInputParser;\n+import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class FilterMessageLogsSteps {\n+\n+    @Autowired\n+    private AdminDeviceManagementClient client;\n+\n+    @When(\"receiving a message log request without a filter\")\n+    public void getMessageLogNoFilter() throws WebServiceSecurityException, GeneralSecurityException, IOException {\n+        final FindMessageLogsRequest request = new FindMessageLogsRequest();\n+        ScenarioContext.current().put(PlatformCommonKeys.RESPONSE, this.client.findMessageLogs(request));\n+    }\n+\n+    @When(\"^receiving a filter message log request$\")\n+    public void getMessageLogFilter(final Map<String, String> requestParameters) throws IllegalArgumentException {\n+        final FindMessageLogsRequest request = new FindMessageLogsRequest();\n+\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION)) {\n+            request.setDeviceIdentification(getString(requestParameters, PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION,\n+                    PlatformCommonDefaults.DEFAULT_DEVICE_IDENTIFICATION));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION)) {\n+            request.setOrganisationIdentification(\n+                    getString(requestParameters, PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION,\n+                            PlatformCommonDefaults.DEFAULT_ORGANIZATION_IDENTIFICATION));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SETPOINT_START_TIME)) {\n+            request.setStartTime(XmlGregorianCalendarInputParser.parse(getString(requestParameters,\n+                    PlatformCommonKeys.KEY_SETPOINT_START_TIME, PlatformCommonDefaults.DEFAULT_BEGIN_DATE)));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SETPOINT_END_TIME)) {\n+            request.setEndTime(XmlGregorianCalendarInputParser.parse(getString(requestParameters,\n+                    PlatformCommonKeys.KEY_SETPOINT_END_TIME, PlatformCommonDefaults.DEFAULT_END_DATE)));\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SORT_DIR)) {\n+\n+            if ((requestParameters.get(PlatformCommonKeys.KEY_SORT_DIR)).equals(\"ASC\")) {\n+                request.setSortDirection(SortDirectionEnum.ASC);\n+            } else if ((requestParameters.get(PlatformCommonKeys.KEY_SORT_DIR)).equals(\"DESC\")) {\n+                request.setSortDirection(SortDirectionEnum.DESC);\n+            } else {\n+                throw new IllegalArgumentException(\"Sort direction not properly set\");\n+            }\n+\n+        }\n+        if (requestParameters.containsKey(PlatformCommonKeys.KEY_SORTED_BY)) {\n+            request.setSortBy(requestParameters.get(PlatformCommonKeys.KEY_SORTED_BY));\n+        }\n+\n+        try {\n+            ScenarioContext.current().put(PlatformCommonKeys.RESPONSE, this.client.findMessageLogs(request));\n+        } catch (final WebServiceSecurityException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Then(\"the messages response contains {int} correct messages\")\n+    public void theGetMessageLogsFilterSuccesful(final int amount, final Map<String, String> requestParameters)\n+            throws Throwable {\n+        final List<MessageLog> messageLogs = this.getMessageLogs();\n+        assertThat(messageLogs.size()).isEqualTo(amount);\n+        for (final MessageLog log : messageLogs) {\n+            if (requestParameters.containsKey(PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION)) {\n+                assertThat(log.getDeviceIdentification())\n+                        .isEqualTo(requestParameters.get(PlatformCommonKeys.KEY_DEVICE_IDENTIFICATION));\n+            }\n+            if (requestParameters.containsKey(PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION)) {\n+                assertThat(log.getOrganisationIdentification())\n+                        .isEqualTo(requestParameters.get(PlatformCommonKeys.KEY_ORGANIZATION_IDENTIFICATION));\n+            }\n+        }\n+    }\n+\n+    @Then(\"the messages response contains {int} correct messages for devices\")\n+    public void theGetMessageLogsDeviceWildcardFeatureSuccesful(final int amount, final List<String> ids) {\n+        final List<MessageLog> messageLogs = this.getMessageLogs();\n+        assertThat(messageLogs.size()).isEqualTo(amount);\n+        for (final MessageLog log : messageLogs) {\n+            assertThat(ids).contains(log.getDeviceIdentification());\n+        }\n+    }\n+\n+    @Then(\"the messages response contains {int} correct messages with date filter or no filter\")\n+    public void theGetMessageLogsDateFilterSuccessFul(final int amount) throws Throwable {\n+        final List<MessageLog> messageLogs = this.getMessageLogs();\n+        assertThat(messageLogs.size()).isEqualTo(amount);\n+    }\n+\n+    @Then(\"the messages response contains {int} correct messages with order\")\n+    public void theGetMessageLogsInOrder(final int amount, final List<String> ids) {\n+        final List<MessageLog> messageLogs = this.getMessageLogs();\n+        assertThat(messageLogs.size()).isEqualTo(amount);\n+        final List<String> actualIds = new ArrayList<>();\n+        for (final MessageLog log : messageLogs) {\n+            if (!actualIds.contains(log.getDeviceIdentification())) {\n+                actualIds.add(log.getDeviceIdentification());\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8c1256b3601adea7f2bc2a72c84fe66e0e56bb"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxOTU0NjA3OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMzoxN1rOGvQ7Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMzoyMzoxN1rOGvQ7Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjIxMzUyMg==", "bodyText": "\"SetPointStartTime\" and \"SetPointEndTime\" come from another context. We should use \"StartTime\" and \"EndTime\" as field names.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r452213522", "createdAt": "2020-07-09T13:23:17Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,141 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter DeviceLogItem\n+  As a ...\n+  I want to be filter the DeviceLogItem \n+  In order to ...\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1   |\n+      | Organization         | Liander |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2   |\n+      | Organization         | Liander |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11 |\n+      | Organization         | TEST   |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 correct messages with date filter or no filter\n+\n+  Scenario: Filter DeviceLogItem only on device identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1 |\n+    Then the messages response contains 6 correct messages\n+      | DeviceIdentification | DEV-1 |\n+\n+  Scenario: wildcard filter Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 correct messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  Scenario: wildcard filter Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Li?nder |\n+    Then the messages response contains 11 correct messages for devices\n+      | DEV-1 |\n+      | DEV-2 |\n+\n+  Scenario: Filter DeviceLogItem only on organisation identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 11 correct messages\n+      | OrganizationIdentification | Liander |\n+\n+  Scenario: Filter DeviceLogItem on organisation identification and device identification\n+    When receiving a filter message log request\n+      | DeviceIdentification       | DEV-2   |\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 5 correct messages\n+      | DeviceIdentification       | DEV-2   |\n+      | OrganizationIdentification | Liander |\n+\n+  Scenario: Sort DeviceLogItem\n+    When receiving a filter message log request\n+      | SortDir  | DESC                 |\n+      | SortedBy | deviceIdentification |\n+    Then the messages response contains 15 correct messages with order\n+      | DEV-2  |\n+      | DEV-11 |\n+      | DEV-1  |\n+\n+  Scenario Outline: Filter DeviceLogItem only on device identification within two dates\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1       |\n+      | SetPointStartTime    | <StartTime> |\n+      | SetPointEndTime      | <EndTime>   |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d8c1256b3601adea7f2bc2a72c84fe66e0e56bb"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTExOTM0OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1MzoxMFrOG2uNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODo1MTo0MFrOG3Dktg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMzM0Nw==", "bodyText": "Why is a 'date filter' mentioned here? Seems that it has nothing to do with the scenario. Furthermore, for checking the number of messages it doesn't matter if filters were set, so 'no filter' can be removed as well", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460033347", "createdAt": "2020-07-24T12:53:10Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MzQxNA==", "bodyText": "Removed text \" with date filter or no filter\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460383414", "createdAt": "2020-07-25T08:51:40Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzMzM0Nw=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTEzNDEzOnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1Nzo0MlrOG2uWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwOTowMjo1NlrOG3DoOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNTY0Mg==", "bodyText": "Normally we use the convention to name the method like the step. That would be receivingAMessageLogRequestWithoutAFilter here. Not clear why another convention was used. Goes for all methods in this class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460035642", "createdAt": "2020-07-24T12:57:42Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+*/\n+package org.opensmartgridplatform.cucumber.platform.common.glue.steps.ws.admin.devicemanagement;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getEnum;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLog;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLogFilter;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.SortDirectionEnum;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonDefaults;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.support.ws.admin.AdminDeviceManagementClient;\n+import org.opensmartgridplatform.cucumber.platform.inputparsers.XmlGregorianCalendarInputParser;\n+import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class FilterMessageLogsSteps {\n+\n+    @Autowired\n+    private AdminDeviceManagementClient client;\n+\n+    @When(\"receiving a message log request without a filter\")\n+    public void getMessageLogNoFilter() throws WebServiceSecurityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4NDMxNA==", "bodyText": "Renamed the methods.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460384314", "createdAt": "2020-07-25T09:02:56Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/admin/devicemanagement/FilterMessageLogsSteps.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+*/\n+package org.opensmartgridplatform.cucumber.platform.common.glue.steps.ws.admin.devicemanagement;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getEnum;\n+import static org.opensmartgridplatform.cucumber.core.ReadSettingsHelper.getString;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsRequest;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.FindMessageLogsResponse;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLog;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.MessageLogFilter;\n+import org.opensmartgridplatform.adapter.ws.schema.admin.devicemanagement.SortDirectionEnum;\n+import org.opensmartgridplatform.cucumber.core.ScenarioContext;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonDefaults;\n+import org.opensmartgridplatform.cucumber.platform.common.PlatformCommonKeys;\n+import org.opensmartgridplatform.cucumber.platform.common.support.ws.admin.AdminDeviceManagementClient;\n+import org.opensmartgridplatform.cucumber.platform.inputparsers.XmlGregorianCalendarInputParser;\n+import org.opensmartgridplatform.shared.exceptionhandling.WebServiceSecurityException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.java.en.Then;\n+import io.cucumber.java.en.When;\n+\n+public class FilterMessageLogsSteps {\n+\n+    @Autowired\n+    private AdminDeviceManagementClient client;\n+\n+    @When(\"receiving a message log request without a filter\")\n+    public void getMessageLogNoFilter() throws WebServiceSecurityException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNTY0Mg=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE1MjM5OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowMzozMlrOG2uhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODo0MDowNVrOG3Dg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODUxMA==", "bodyText": "Strange to use this annotation in a pull request. The test isn't run until after merging. I would suggest removing it. Maybe we can add it again later.\nGoes for all the usage of @NightlyBuildOnly", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460038510", "createdAt": "2020-07-24T13:03:32Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter\n+\n+  Scenario: Use wildcard filter for Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  @NightlyBuildOnly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MjQ1MA==", "bodyText": "Removed them.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460382450", "createdAt": "2020-07-25T08:40:05Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter\n+\n+  Scenario: Use wildcard filter for Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  @NightlyBuildOnly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODUxMA=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE2NDYwOnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNzowM1rOG2uoTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODo1MTo0OFrOG3Dkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MDI2OA==", "bodyText": "extend the step with 'for' to distinguish this step from the step where I requested to remove the filters", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460040268", "createdAt": "2020-07-24T13:07:03Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter\n+\n+  Scenario: Use wildcard filter for Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Use wildcard filter for Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Li?nder |\n+    Then the messages response contains 11 messages for devices\n+      | DEV-1 |\n+      | DEV-2 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Filter messages only on Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 11 messages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MzQyNw==", "bodyText": "Done.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460383427", "createdAt": "2020-07-25T08:51:48Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter\n+\n+  Scenario: Use wildcard filter for Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Use wildcard filter for Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Li?nder |\n+    Then the messages response contains 11 messages for devices\n+      | DEV-1 |\n+      | DEV-2 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Filter messages only on Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 11 messages", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MDI2OA=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE4MTM2OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxMjoxN1rOG2uymw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwODo1NzoyM1rOG3DmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MjkwNw==", "bodyText": "This will fail after 2025-01-01, I would suggest to use a different date like in the scenario above.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460042907", "createdAt": "2020-07-24T13:12:17Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter\n+\n+  Scenario: Use wildcard filter for Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Use wildcard filter for Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Li?nder |\n+    Then the messages response contains 11 messages for devices\n+      | DEV-1 |\n+      | DEV-2 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Filter messages only on Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 11 messages\n+      | OrganizationIdentification | Liander |\n+\n+  Scenario: Filter messages on Organisation Identification and Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification       | DEV-2   |\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 5 messages\n+      | DeviceIdentification       | DEV-2   |\n+      | OrganizationIdentification | Liander |\n+\n+  Scenario: Sort messages by Device Identification\n+    When receiving a filter message log request\n+      | SortDir  | DESC                 |\n+      | SortedBy | deviceIdentification |\n+    Then the messages response contains 15 messages ordered descending by device identification\n+\n+  Scenario Outline: Filter messages on Organisation Identification and Device Identification and within two dates\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander     |\n+      | DeviceIdentification       | DEV-2       |\n+      | StartTime                  | <StartTime> |\n+      | EndTime                    | <EndTime>   |\n+    Then the messages response contains <Amount> messages\n+      | OrganizationIdentification | Liander |\n+      | DeviceIdentification       | DEV-2   |\n+\n+    Examples: \n+      | StartTime            | EndTime              | Amount |\n+      | 2020-01-01T00:00:00Z | 2020-05-01T00:00:00Z |      0 |\n+      | 2020-01-01T00:00:00Z | 2040-01-01T00:00:00Z |      5 |\n+\n+  @NightlyBuildOnly\n+  Scenario Outline: Filter messages within two dates\n+    When receiving a filter message log request\n+      | StartTime | <StartTime> |\n+      | EndTime   | <EndTime>   |\n+    Then the messages response contains <Amount> messages with date filter or no filter\n+\n+    Examples: \n+      | StartTime            | EndTime              | Amount |\n+      | 2020-01-01T00:00:00Z | 2020-05-01T00:00:00Z |      0 |\n+      | 2020-01-01T00:00:00Z | 2025-01-01T00:00:00Z |     15 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4Mzg1Nw==", "bodyText": "Done (2025 => 2040).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460383857", "createdAt": "2020-07-25T08:57:23Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/resources/features/common/osgp-adapter-ws-admin/DeviceManagement/FilterDeviceLogItem.feature", "diffHunk": "@@ -0,0 +1,96 @@\n+@Common @Platform @AdminDeviceManagement\n+Feature: Filter device messages\n+  As an operator\n+  I want to be filter and sort the device messages \n+  In order to analyse problems and check messages\n+\n+  Background: \n+    Given I have 6 device log items\n+      | DeviceIdentification | DEV-1                |\n+      | Organization         | Liander              |\n+    And I have 5 device log items\n+      | DeviceIdentification | DEV-2                |\n+      | Organization         | Liander              |\n+    And I have 4 device log items\n+      | DeviceIdentification | DEV-11               |\n+      | Organization         | TEST                 |\n+\n+  Scenario: No filters set so getting all the messages\n+    When receiving a message log request without a filter\n+    Then the messages response contains 15 messages with date filter or no filter\n+\n+  Scenario: Use wildcard filter for Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification | DEV-1* |\n+    Then the messages response contains 10 messages for devices\n+      | DEV-1  |\n+      | DEV-11 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Use wildcard filter for Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Li?nder |\n+    Then the messages response contains 11 messages for devices\n+      | DEV-1 |\n+      | DEV-2 |\n+\n+  @NightlyBuildOnly\n+  Scenario: Filter messages only on Organisation Identification\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 11 messages\n+      | OrganizationIdentification | Liander |\n+\n+  Scenario: Filter messages on Organisation Identification and Device Identification\n+    When receiving a filter message log request\n+      | DeviceIdentification       | DEV-2   |\n+      | OrganizationIdentification | Liander |\n+    Then the messages response contains 5 messages\n+      | DeviceIdentification       | DEV-2   |\n+      | OrganizationIdentification | Liander |\n+\n+  Scenario: Sort messages by Device Identification\n+    When receiving a filter message log request\n+      | SortDir  | DESC                 |\n+      | SortedBy | deviceIdentification |\n+    Then the messages response contains 15 messages ordered descending by device identification\n+\n+  Scenario Outline: Filter messages on Organisation Identification and Device Identification and within two dates\n+    When receiving a filter message log request\n+      | OrganizationIdentification | Liander     |\n+      | DeviceIdentification       | DEV-2       |\n+      | StartTime                  | <StartTime> |\n+      | EndTime                    | <EndTime>   |\n+    Then the messages response contains <Amount> messages\n+      | OrganizationIdentification | Liander |\n+      | DeviceIdentification       | DEV-2   |\n+\n+    Examples: \n+      | StartTime            | EndTime              | Amount |\n+      | 2020-01-01T00:00:00Z | 2020-05-01T00:00:00Z |      0 |\n+      | 2020-01-01T00:00:00Z | 2040-01-01T00:00:00Z |      5 |\n+\n+  @NightlyBuildOnly\n+  Scenario Outline: Filter messages within two dates\n+    When receiving a filter message log request\n+      | StartTime | <StartTime> |\n+      | EndTime   | <EndTime>   |\n+    Then the messages response contains <Amount> messages with date filter or no filter\n+\n+    Examples: \n+      | StartTime            | EndTime              | Amount |\n+      | 2020-01-01T00:00:00Z | 2020-05-01T00:00:00Z |      0 |\n+      | 2020-01-01T00:00:00Z | 2025-01-01T00:00:00Z |     15 |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MjkwNw=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE5ODkwOnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/logging/DeviceLogItemSteps.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNzoyNVrOG2u9bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0ODoxOFrOG3Vohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTY3OA==", "bodyText": "Why do we need a native query?\nI don't think a native query should be in a steps class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460045678", "createdAt": "2020-07-24T13:17:25Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/logging/DeviceLogItemSteps.java", "diffHunk": "@@ -44,11 +55,39 @@ public void iHaveADeviceLogItem(final Map<String, String> settings) {\n         final boolean valid = true;\n \n         final DeviceLogItem deviceLogItem = new DeviceLogItem.Builder().withDeviceIdentification(deviceIdentification)\n-                .withDeviceUid(deviceUid).withDecodedMessage(decodedMessage).withEncodedMessage(encodedMessage)\n-                .withIncoming(incoming).withOrganisationIdentification(organisationIdentification)\n-                .withPayloadMessageSerializedSize(payloadMessageSerializedSize).withValid(valid).build();\n+                .withDeviceUid(deviceUid)\n+                .withDecodedMessage(decodedMessage)\n+                .withEncodedMessage(encodedMessage)\n+                .withIncoming(incoming)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withPayloadMessageSerializedSize(payloadMessageSerializedSize)\n+                .withValid(valid)\n+                .build();\n+\n+        final DeviceLogItem savedDeviceLogItem = this.deviceLogItemRepository.save(deviceLogItem);\n+\n+        final String modificationTimeString = getString(settings, PlatformKeys.KEY_MODIFICATION_TIME);\n+        if (modificationTimeString != null) {\n+            final ZonedDateTime modificationTime = ZonedDateTime.parse(modificationTimeString);\n+            this.updateModificationTime(savedDeviceLogItem.getId(), modificationTime);\n+        }\n+    }\n+\n+    private void updateModificationTime(final Long deviceLogItemId, final ZonedDateTime modificationTime) {\n+        if (modificationTime != null) {\n+            final EntityManager em = this.txMgrLogging.getEntityManagerFactory().createEntityManager();\n+            final EntityTransaction transaction = em.getTransaction();\n \n-        this.deviceLogItemRepository.save(deviceLogItem);\n+            transaction.begin();\n+            final String sql = \"UPDATE device_log_item SET modification_time = :modification_time WHERE id = :id\";\n+            final Query updateQuery = em.createNativeQuery(sql);\n+            updateQuery.setParameter(\"id\", deviceLogItemId);\n+            updateQuery.setParameter(\"modification_time\", modificationTime);\n+            updateQuery.executeUpdate();\n+            transaction.commit();\n+\n+            em.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4MTIwMg==", "bodyText": "How can I set the modificationTime in a cleaner way? It is normally set automatically, when an item is saved. For these test cases, I need a specific modificationTime.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460381202", "createdAt": "2020-07-25T08:24:17Z", "author": {"login": "rlemmers"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/logging/DeviceLogItemSteps.java", "diffHunk": "@@ -44,11 +55,39 @@ public void iHaveADeviceLogItem(final Map<String, String> settings) {\n         final boolean valid = true;\n \n         final DeviceLogItem deviceLogItem = new DeviceLogItem.Builder().withDeviceIdentification(deviceIdentification)\n-                .withDeviceUid(deviceUid).withDecodedMessage(decodedMessage).withEncodedMessage(encodedMessage)\n-                .withIncoming(incoming).withOrganisationIdentification(organisationIdentification)\n-                .withPayloadMessageSerializedSize(payloadMessageSerializedSize).withValid(valid).build();\n+                .withDeviceUid(deviceUid)\n+                .withDecodedMessage(decodedMessage)\n+                .withEncodedMessage(encodedMessage)\n+                .withIncoming(incoming)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withPayloadMessageSerializedSize(payloadMessageSerializedSize)\n+                .withValid(valid)\n+                .build();\n+\n+        final DeviceLogItem savedDeviceLogItem = this.deviceLogItemRepository.save(deviceLogItem);\n+\n+        final String modificationTimeString = getString(settings, PlatformKeys.KEY_MODIFICATION_TIME);\n+        if (modificationTimeString != null) {\n+            final ZonedDateTime modificationTime = ZonedDateTime.parse(modificationTimeString);\n+            this.updateModificationTime(savedDeviceLogItem.getId(), modificationTime);\n+        }\n+    }\n+\n+    private void updateModificationTime(final Long deviceLogItemId, final ZonedDateTime modificationTime) {\n+        if (modificationTime != null) {\n+            final EntityManager em = this.txMgrLogging.getEntityManagerFactory().createEntityManager();\n+            final EntityTransaction transaction = em.getTransaction();\n \n-        this.deviceLogItemRepository.save(deviceLogItem);\n+            transaction.begin();\n+            final String sql = \"UPDATE device_log_item SET modification_time = :modification_time WHERE id = :id\";\n+            final Query updateQuery = em.createNativeQuery(sql);\n+            updateQuery.setParameter(\"id\", deviceLogItemId);\n+            updateQuery.setParameter(\"modification_time\", modificationTime);\n+            updateQuery.executeUpdate();\n+            transaction.commit();\n+\n+            em.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTY3OA=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3OTMwMw==", "bodyText": "Ok, it is clear to me why you do need a native query, It would be cleaner to make it a method in a repository class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460679303", "createdAt": "2020-07-27T06:48:18Z", "author": {"login": "robindenadel"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/database/logging/DeviceLogItemSteps.java", "diffHunk": "@@ -44,11 +55,39 @@ public void iHaveADeviceLogItem(final Map<String, String> settings) {\n         final boolean valid = true;\n \n         final DeviceLogItem deviceLogItem = new DeviceLogItem.Builder().withDeviceIdentification(deviceIdentification)\n-                .withDeviceUid(deviceUid).withDecodedMessage(decodedMessage).withEncodedMessage(encodedMessage)\n-                .withIncoming(incoming).withOrganisationIdentification(organisationIdentification)\n-                .withPayloadMessageSerializedSize(payloadMessageSerializedSize).withValid(valid).build();\n+                .withDeviceUid(deviceUid)\n+                .withDecodedMessage(decodedMessage)\n+                .withEncodedMessage(encodedMessage)\n+                .withIncoming(incoming)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withPayloadMessageSerializedSize(payloadMessageSerializedSize)\n+                .withValid(valid)\n+                .build();\n+\n+        final DeviceLogItem savedDeviceLogItem = this.deviceLogItemRepository.save(deviceLogItem);\n+\n+        final String modificationTimeString = getString(settings, PlatformKeys.KEY_MODIFICATION_TIME);\n+        if (modificationTimeString != null) {\n+            final ZonedDateTime modificationTime = ZonedDateTime.parse(modificationTimeString);\n+            this.updateModificationTime(savedDeviceLogItem.getId(), modificationTime);\n+        }\n+    }\n+\n+    private void updateModificationTime(final Long deviceLogItemId, final ZonedDateTime modificationTime) {\n+        if (modificationTime != null) {\n+            final EntityManager em = this.txMgrLogging.getEntityManagerFactory().createEntityManager();\n+            final EntityTransaction transaction = em.getTransaction();\n \n-        this.deviceLogItemRepository.save(deviceLogItem);\n+            transaction.begin();\n+            final String sql = \"UPDATE device_log_item SET modification_time = :modification_time WHERE id = :id\";\n+            final Query updateQuery = em.createNativeQuery(sql);\n+            updateQuery.setParameter(\"id\", deviceLogItemId);\n+            updateQuery.setParameter(\"modification_time\", modificationTime);\n+            updateQuery.executeUpdate();\n+            transaction.commit();\n+\n+            em.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTY3OA=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTI2MjU2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzozNToyN1rOG2vkWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwOToyMzo0MFrOG3DucQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NTY0Mg==", "bodyText": "consider a package org.opensmartgridplatform.adapter.ws.admin.application.specifications", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460055642", "createdAt": "2020-07-24T13:35:27Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.admin.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4NTkwNQ==", "bodyText": "Done.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460385905", "createdAt": "2020-07-25T09:23:40Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.admin.application.services;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NTY0Mg=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTI2ODEyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzozNjo1NlrOG2vn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNjo0OTozN1rOG3Vqbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NjUzNQ==", "bodyText": "org.opensmartgridplatform.domain.core.specifications contains interfaces for specifications. Any reason why this class does not implement such an interface?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460056535", "createdAt": "2020-07-24T13:36:56Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.admin.application.services;\n+\n+import static org.opensmartgridplatform.shared.utils.SearchUtil.replaceWildcards;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.opensmartgridplatform.logging.domain.entities.DeviceLogItem;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+public final class DeviceLogItemSpecifications {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM4NTg3MQ==", "bodyText": "Made it in line with the other specification interfaces/classes. I'm not sure about the package for the implementation. I currently have:\nInterface DeviceLogItemSpecifications: org.opensmartgridplatform.adapter.ws.admin.application.specifications\nClass JpaDeviceLogItemSpecifications: org.opensmartgridplatform.adapter.ws.admin.infra.specifications", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460385871", "createdAt": "2020-07-25T09:23:24Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.admin.application.services;\n+\n+import static org.opensmartgridplatform.shared.utils.SearchUtil.replaceWildcards;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.opensmartgridplatform.logging.domain.entities.DeviceLogItem;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+public final class DeviceLogItemSpecifications {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NjUzNQ=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY3OTc5MA==", "bodyText": "OK", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/368#discussion_r460679790", "createdAt": "2020-07-27T06:49:37Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-ws-admin/src/main/java/org/opensmartgridplatform/adapter/ws/admin/application/services/DeviceLogItemSpecifications.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.admin.application.services;\n+\n+import static org.opensmartgridplatform.shared.utils.SearchUtil.replaceWildcards;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Date;\n+\n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n+import javax.persistence.criteria.Root;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.opensmartgridplatform.logging.domain.entities.DeviceLogItem;\n+import org.springframework.data.jpa.domain.Specification;\n+\n+public final class DeviceLogItemSpecifications {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NjUzNQ=="}, "originalCommit": {"oid": "0c480c007fb5165cd1ede2bebd06ec10a15aa3fd"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3637, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}