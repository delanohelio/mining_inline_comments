{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODYwNzcz", "number": 370, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1MDo1MFrOENNu0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDowNVrOEQNkyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjkxOTIxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1MDo1MFrOGvxRIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNjo0M1rOGv1Y3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MzQ1Ng==", "bodyText": "Consider using a more specific name like GridMeasurement(PublishedEvent)KafkaProducerConfig in case we need more Kafka producers in the future", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452743456", "createdAt": "2020-07-10T09:50:50Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java", "diffHunk": "@@ -17,7 +17,7 @@\n import org.springframework.kafka.core.KafkaTemplate;\n \n @Configuration\n-public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, MeterReading> {\n+public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, GridMeasurementPublishedEvent> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDk3Mg==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452810972", "createdAt": "2020-07-10T12:26:43Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaProducerConfig.java", "diffHunk": "@@ -17,7 +17,7 @@\n import org.springframework.kafka.core.KafkaTemplate;\n \n @Configuration\n-public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, MeterReading> {\n+public class KafkaProducerConfig extends AbstractKafkaProducerConfig<String, GridMeasurementPublishedEvent> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0MzQ1Ng=="}, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjkyMjUyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1MTo1N1rOGvxTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1MTo1N1rOGvxTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0Mzk5MQ==", "bodyText": "Update comment", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452743991", "createdAt": "2020-07-10T09:51:57Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjkyNjUyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1MzoyMFrOGvxVrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNjoyNlrOGv1YRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDYyMQ==", "bodyText": "Do we receive the data as a MeasurementReport or as a String? Shouldn't we convert the semicolon separated string received from the MQTT protocol adapter here?\nConsider renaming to GridMeasurementPublishedEventConverter to make it more consistent with other converters in GXF/OSGP.\nAlso consider adding a unit test for this converter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452744621", "createdAt": "2020-07-10T09:53:20Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDgyMQ==", "bodyText": "removed this converter, added one to convert a string to a GridMeasurementPublishedEvent and added a test for it.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452810821", "createdAt": "2020-07-10T12:26:26Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NDYyMQ=="}, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjkzNzQzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTo1Njo0M1rOGvxcYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMToxNzoxOFrOG2GJqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ==", "bodyText": "What's the purpose of this randomUUID? Does it only have any value for the recipient? Or do we need to keep track of this in GXF/OSGP as well (for example for audit logging)?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452746339", "createdAt": "2020-07-10T09:56:43Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping\n+        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n+\n+        final List<Analog> measurements = new ArrayList<>();\n+        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n+            final List<AnalogValue> values = new ArrayList<>();\n+\n+            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n+                    .stream()\n+                    .map(Measurement::getMeasurementElements)\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList());\n+            for (final MeasurementElement element : measurementElements) {\n+                if (element instanceof TimestampMeasurementElement) {\n+                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n+                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n+                }\n+                if (element instanceof FloatMeasurementElement) {\n+                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n+                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n+                }\n+            }\n+\n+            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2NzI0Mg==", "bodyText": "Part of the schema is:\nThe mRID is unique within an exchange context. Global uniqueness is easily achieved by using a UUID", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452767242", "createdAt": "2020-07-10T10:41:39Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping\n+        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n+\n+        final List<Analog> measurements = new ArrayList<>();\n+        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n+            final List<AnalogValue> values = new ArrayList<>();\n+\n+            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n+                    .stream()\n+                    .map(Measurement::getMeasurementElements)\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList());\n+            for (final MeasurementElement element : measurementElements) {\n+                if (element instanceof TimestampMeasurementElement) {\n+                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n+                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n+                }\n+                if (element instanceof FloatMeasurementElement) {\n+                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n+                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n+                }\n+            }\n+\n+            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ=="}, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxNzI3Mw==", "bodyText": "I am thinking about the part of the mRID definition in the Avro schema that you did not copy:\n\nMaster resource identifier issued by a model authority.\n\nI don't know what a \"model authority\" or an \"exchange context\" is in this context, and therefore am a bit doubtful whether we can assume this role and determine the mRID ourselves. As it appears to be nullable a better way to deal with this might be to leave it unset, but I cannot say what is the correct way to handle this, due to lack of knowledge.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457417273", "createdAt": "2020-07-20T14:06:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping\n+        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n+\n+        final List<Analog> measurements = new ArrayList<>();\n+        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n+            final List<AnalogValue> values = new ArrayList<>();\n+\n+            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n+                    .stream()\n+                    .map(Measurement::getMeasurementElements)\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList());\n+            for (final MeasurementElement element : measurementElements) {\n+                if (element instanceof TimestampMeasurementElement) {\n+                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n+                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n+                }\n+                if (element instanceof FloatMeasurementElement) {\n+                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n+                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n+                }\n+            }\n+\n+            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ=="}, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3NzA2Ng==", "bodyText": "Joep van Genuchten (the creator of the AVRO schema) confirmed we can generate random UUIDs ourselves as values for the mRID.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r459377066", "createdAt": "2020-07-23T11:17:18Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventMapping.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping MeasurementReport to MeterReading\n+ */\n+public class GridMeasurementPublishedEventMapping\n+        extends CustomConverter<MeasurementReport, GridMeasurementPublishedEvent> {\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final MeasurementReport source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String identification = source.getMeasurementGroups().get(0).getIdentification();\n+\n+        final List<Analog> measurements = new ArrayList<>();\n+        for (final MeasurementGroup measurementGroup : source.getMeasurementGroups()) {\n+            final List<AnalogValue> values = new ArrayList<>();\n+\n+            final List<MeasurementElement> measurementElements = measurementGroup.getMeasurements()\n+                    .stream()\n+                    .map(Measurement::getMeasurementElements)\n+                    .flatMap(List::stream)\n+                    .collect(Collectors.toList());\n+            for (final MeasurementElement element : measurementElements) {\n+                if (element instanceof TimestampMeasurementElement) {\n+                    final TimestampMeasurementElement timestampElement = (TimestampMeasurementElement) element;\n+                    values.add(new AnalogValue(null, timestampElement.getValue(), null));\n+                }\n+                if (element instanceof FloatMeasurementElement) {\n+                    final FloatMeasurementElement floatMeasurementElement = (FloatMeasurementElement) element;\n+                    values.add(new AnalogValue(floatMeasurementElement.getValue(), null, null));\n+                }\n+            }\n+\n+            measurements.add(new Analog(measurementGroup.getIdentification(), UUID.randomUUID().toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc0NjMzOQ=="}, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMjk2NDQxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDowNToyMlrOGvxtKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjoyNTo0MVrOGv1W-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1MDYzMg==", "bodyText": "Consider renaming to GridMeasurementPublishedEventKafkaConsumerConfig", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452750632", "createdAt": "2020-07-10T10:05:22Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.logging.config;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.shared.application.config.kafka.AbstractKafkaConsumerConfig;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.core.ConsumerFactory;\n+\n+@Configuration\n+@Conditional(PeakShavingLoggingEnabled.class)\n+public class GridMeasurementPublishedEventConsumerConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxMDQ4OA==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452810488", "createdAt": "2020-07-10T12:25:41Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventConsumerConfig.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.logging.config;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.shared.application.config.kafka.AbstractKafkaConsumerConfig;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.core.ConsumerFactory;\n+\n+@Configuration\n+@Conditional(PeakShavingLoggingEnabled.class)\n+public class GridMeasurementPublishedEventConsumerConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1MDYzMg=="}, "originalCommit": {"oid": "44fc355cd299316f0f2fefe0eac33f5ed642fe9c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzkyNTc3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTowNToxMlrOGv668w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMTo1NFrOGz78_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMTYxOQ==", "bodyText": "Congestion would probably not be needed, as they, as far as I know, go in the opposite direction.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452901619", "createdAt": "2020-07-10T15:05:12Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjgyOA==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457112828", "createdAt": "2020-07-20T07:01:54Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwMTYxOQ=="}, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzk3MTYxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToxNzo1M1rOGv7YNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMjowMlrOGz79QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwOTExMA==", "bodyText": "Probably only check on length 10 needed here.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452909110", "createdAt": "2020-07-10T15:17:53Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */\n+public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final String source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String[] values = source.split(\";\");\n+        if (values.length != 7 && values.length != 10) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjg5Nw==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457112897", "createdAt": "2020-07-20T07:02:02Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */\n+public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final String source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String[] values = source.split(\";\");\n+        if (values.length != 7 && values.length != 10) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwOTExMA=="}, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzk5MjYxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyMzo0MlrOGv7lZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMjowOVrOGz79gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMjQ4Ng==", "bodyText": "This code could probably be simplified, when congestion message would not be needed to process here.\nNevertheless I think it could be made a bit clearer by defining startIndexVoltage and endIndexVoltage variables (or even better constants?) as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452912486", "createdAt": "2020-07-10T15:23:42Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */\n+public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final String source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String[] values = source.split(\";\");\n+        if (values.length != 7 && values.length != 10) {\n+            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+            return null;\n+        }\n+        final List<Analog> measurements = new ArrayList<>();\n+\n+        int startIndexCurrent = 1;\n+        int endIndexCurrent = 7;\n+        final String eanCode = values[0];\n+        if (values.length == 10) {\n+            for (int index = 1; index < 4; index++) {\n+                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n+                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                        new ArrayList<Name>(),\n+                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+            }\n+            startIndexCurrent = 4;\n+            endIndexCurrent = 10;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjk2MQ==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457112961", "createdAt": "2020-07-20T07:02:09Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */\n+public class GridMeasurementPublishedEventConverter extends CustomConverter<String, GridMeasurementPublishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n+\n+    @Override\n+    public GridMeasurementPublishedEvent convert(final String source,\n+            final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n+\n+        final String[] values = source.split(\";\");\n+        if (values.length != 7 && values.length != 10) {\n+            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+            return null;\n+        }\n+        final List<Analog> measurements = new ArrayList<>();\n+\n+        int startIndexCurrent = 1;\n+        int endIndexCurrent = 7;\n+        final String eanCode = values[0];\n+        if (values.length == 10) {\n+            for (int index = 1; index < 4; index++) {\n+                measurements.add(new Analog(eanCode, UUID.randomUUID().toString(), AccumulationKind.none,\n+                        MeasuringPeriodKind.none, PhaseCode.none, UnitMultiplier.none, UnitSymbol.V,\n+                        new ArrayList<Name>(),\n+                        Arrays.asList(new AnalogValue(Float.valueOf(values[index]), null, null))));\n+            }\n+            startIndexCurrent = 4;\n+            endIndexCurrent = 10;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMjQ4Ng=="}, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDAwMTAzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyNTo1M1rOGv7qlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyNTo1M1rOGv7qlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzgxMw==", "bodyText": "Consider renaming measurementReport to measurement.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452913813", "createdAt": "2020-07-10T15:25:53Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java", "diffHunk": "@@ -30,7 +29,7 @@ public GridMeasurementPublishedEventProducer(\n         this.mapper = mapper;\n     }\n \n-    public void send(final MeasurementReport measurementReport) {\n+    public void send(final String measurementReport) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDAwNDI0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNToyNjo0NlrOGv7soA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMjoyN1rOGz7-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDMzNg==", "bodyText": "Could probably be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452914336", "createdAt": "2020-07-10T15:26:46Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+class GridMeasurementPublishedEventConverterTest {\n+\n+    private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n+\n+    @Test\n+    void testConvertMeasurement() {\n+        final String measurement = \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n+    }\n+\n+    @Test\n+    void testConvertCongestion() {\n+        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(this.expectedCurrentMeasurements());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMzE0Mg==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457113142", "createdAt": "2020-07-20T07:02:27Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+class GridMeasurementPublishedEventConverterTest {\n+\n+    private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n+\n+    @Test\n+    void testConvertMeasurement() {\n+        final String measurement = \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n+    }\n+\n+    @Test\n+    void testConvertCongestion() {\n+        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(this.expectedCurrentMeasurements());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDMzNg=="}, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDAyMzMzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozMjoxNFrOGv746A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMjo0N1rOGz7_BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNzQ4MA==", "bodyText": "Consider extracting a method for expectedVoltageMeasurements as well in order to improve readability.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452917480", "createdAt": "2020-07-10T15:32:14Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+class GridMeasurementPublishedEventConverterTest {\n+\n+    private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n+\n+    @Test\n+    void testConvertMeasurement() {\n+        final String measurement = \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n+    }\n+\n+    @Test\n+    void testConvertCongestion() {\n+        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(this.expectedCurrentMeasurements());\n+    }\n+\n+    @Test\n+    void testSomeOtherString() {\n+        final String someOtherString = \"TST-01\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(someOtherString,\n+                GridMeasurementPublishedEvent.class);\n+\n+        assertThat(event).isNull();\n+\n+    }\n+\n+    private List<Analog> expectedMeasurements() {\n+        final List<Analog> measurements = new ArrayList<>();\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.1f, null, null))));\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.2f, null, null))));\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.3f, null, null))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMzM0OQ==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457113349", "createdAt": "2020-07-20T07:02:47Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+\n+class GridMeasurementPublishedEventConverterTest {\n+\n+    private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n+\n+    @Test\n+    void testConvertMeasurement() {\n+        final String measurement = \"TST-01; 220.1; 220.2; 220.3; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\").isEqualTo(this.expectedMeasurements());\n+    }\n+\n+    @Test\n+    void testConvertCongestion() {\n+        final String measurement = \"TST-01; 5.1; 5.2; 5.3; 7.1; 7.2; 7.3;\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(measurement, GridMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(this.expectedCurrentMeasurements());\n+    }\n+\n+    @Test\n+    void testSomeOtherString() {\n+        final String someOtherString = \"TST-01\";\n+        final GridMeasurementPublishedEvent event = this.mapper.map(someOtherString,\n+                GridMeasurementPublishedEvent.class);\n+\n+        assertThat(event).isNull();\n+\n+    }\n+\n+    private List<Analog> expectedMeasurements() {\n+        final List<Analog> measurements = new ArrayList<>();\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.1f, null, null))));\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.2f, null, null))));\n+        measurements.add(new Analog(\"TST-01\", null, AccumulationKind.none, MeasuringPeriodKind.none, PhaseCode.none,\n+                UnitMultiplier.none, UnitSymbol.V, new ArrayList<Name>(),\n+                Arrays.asList(new AnalogValue(220.3f, null, null))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNzQ4MA=="}, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDAzMzA4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNTozNToxM1rOGv7_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNDo0MVrOGz8Dcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTA3OQ==", "bodyText": "Could probably be deleted.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r452919079", "createdAt": "2020-07-10T15:35:13Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDQ4Mg==", "bodyText": "done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457114482", "createdAt": "2020-07-20T07:04:41Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement or congestion\n+ * to GridMeasurementPublishedEvent\n+ */\n+/**\n+ * measurement: ean_code; voltage_L1; voltage_L2; voltage_L3; current_in_L1;\n+ * current_in_L2; current_in_L3; current_returned_L1; current_returned_L2;\n+ * current_returned_L3;\n+ */\n+/**\n+ * congestion: ean_code; current_in_L1; current_in_L2; current_in_L3;\n+ * current_returned_L1; current_returned_L2; current_returned_L3;\n+ *\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxOTA3OQ=="}, "originalCommit": {"oid": "69956ea3b270a854a28636249475d2703b25d86c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzU0NjQ0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMTo1NjozMFrOG0IWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNToxMFrOG0PmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNTg2MA==", "bodyText": "Closing the javadoc and opening a new one looses the text from the first in the result.\nUse something like  * <p> instead if you want to keep all text and have some white space.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457315860", "createdAt": "2020-07-20T11:56:30Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n+ */\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926dfdd044f2563462b205c68b986c2d7ea48c7a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDc2NA==", "bodyText": "done so", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457434764", "createdAt": "2020-07-20T14:25:10Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AccumulationKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Analog;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.AnalogValue;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeasuringPeriodKind;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.Name;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PhaseCode;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.PowerSystemResource;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitMultiplier;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UnitSymbol;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+/**\n+ * Class for mapping String containing a measurement to GridMeasurementPublishedEvent\n+ */\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMxNTg2MA=="}, "originalCommit": {"oid": "926dfdd044f2563462b205c68b986c2d7ea48c7a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDMyNjUwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyMDozMFrOG0PUXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyMDozMFrOG0PUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMDExMA==", "bodyText": "Should probably be a conditional on the GridMeasurementPublishedEventLoggingEnabled.class instead.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457430110", "createdAt": "2020-07-20T14:20:30Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-logging/src/main/java/org/opensmartgridplatform/adapter/kafka/logging/config/GridMeasurementPublishedEventKafkaConsumerConfig.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.logging.config;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n+import org.opensmartgridplatform.shared.application.config.kafka.AbstractKafkaConsumerConfig;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+import org.springframework.kafka.core.ConsumerFactory;\n+\n+@Configuration\n+@Conditional(PeakShavingLoggingEnabled.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926dfdd044f2563462b205c68b986c2d7ea48c7a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDM1MDgwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDowNVrOG0PiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDowNVrOG0PiNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzMzY1NQ==", "bodyText": "With the refactoring of the type from MeterReading to GridMeasurementPublishedEvent, the name of variable meterReading does not look a very good fit anymore.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/370#discussion_r457433655", "createdAt": "2020-07-20T14:24:05Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/GridMeasurementPublishedEventProducer.java", "diffHunk": "@@ -8,34 +8,31 @@\n package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n \n import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n-import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n-import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.GridMeasurementPublishedEvent;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.kafka.core.KafkaTemplate;\n import org.springframework.stereotype.Service;\n \n-// TODO - Rename class once AVRO message format is known\n @Service\n-public class MeterReadingProducer {\n+public class GridMeasurementPublishedEventProducer {\n \n-    private final KafkaTemplate<String, MeterReading> kafkaTemplate;\n+    private final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate;\n \n     private final DistributionAutomationMapper mapper;\n \n     @Autowired\n-    public MeterReadingProducer(\n-            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, MeterReading> kafkaTemplate,\n+    public GridMeasurementPublishedEventProducer(\n+            @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, GridMeasurementPublishedEvent> kafkaTemplate,\n             final DistributionAutomationMapper mapper) {\n         this.kafkaTemplate = kafkaTemplate;\n         this.mapper = mapper;\n     }\n \n-    public void send(final MeasurementReport measurementReport) {\n+    public void send(final String measurement) {\n \n-        // TODO - Map measurementReport to correct Avro message format and\n-        // send...\n-        final MeterReading meterReading = this.mapper.map(measurementReport, MeterReading.class);\n+        final GridMeasurementPublishedEvent meterReading = this.mapper.map(measurement,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "926dfdd044f2563462b205c68b986c2d7ea48c7a"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3641, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}