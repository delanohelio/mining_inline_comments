{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTY0MTk3", "number": 363, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOToxNlrOELkugw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOTo0OFrOELkvSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTcxNTIzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/DeviceConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOToxNlrOGtMItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOToxNlrOGtMItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNzk0Mw==", "bodyText": "I think we should set the alias to null instead of \"\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/363#discussion_r450037943", "createdAt": "2020-07-06T07:39:16Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/DeviceConverter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.publiclighting.application.mapping.converters;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class DeviceConverter\n+        extends BidirectionalConverter<org.opensmartgridplatform.domain.core.entities.Device, Device> {\n+\n+    @Override\n+    public Device convertTo(final org.opensmartgridplatform.domain.core.entities.Device source,\n+            final Type<Device> destinationType, final MappingContext mappingContext) {\n+        final Device device = new Device();\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        device.setDeviceUid(Base64.encodeBase64String(deviceIdentification.getBytes(StandardCharsets.US_ASCII)));\n+        device.setDeviceIdentification(deviceIdentification);\n+        final Address containerAddress = source.getContainerAddress();\n+        if (containerAddress != null) {\n+            device.setContainerPostalCode(containerAddress.getPostalCode());\n+            device.setContainerCity(containerAddress.getCity());\n+            device.setContainerStreet(containerAddress.getStreet());\n+            device.setContainerNumber(containerAddress.getNumber().toString());\n+        }\n+        final GpsCoordinates gpsCoordinates = source.getGpsCoordinates();\n+        if (gpsCoordinates != null) {\n+            device.setGpsLatitude(gpsCoordinates.getLatitude());\n+            device.setGpsLongitude(gpsCoordinates.getLongitude());\n+        }\n+        device.setDeviceType(source.getDeviceType());\n+        device.setActivated(source.isActivated());\n+\n+        return device;\n+    }\n+\n+    @Override\n+    public org.opensmartgridplatform.domain.core.entities.Device convertFrom(final Device source,\n+            final Type<org.opensmartgridplatform.domain.core.entities.Device> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        final Address containerAddress = new Address(source.getContainerCity(), source.getContainerPostalCode(),\n+                source.getContainerStreet(), Integer.valueOf(source.getContainerNumber()), \"\", \"\");\n+        final GpsCoordinates gpsCoordinates = new GpsCoordinates(source.getGpsLatitude(), source.getGpsLongitude());\n+        final org.opensmartgridplatform.domain.core.entities.Device device = new org.opensmartgridplatform.domain.core.entities.Device(\n+                deviceIdentification, \"\", containerAddress, gpsCoordinates, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bdd80006180d62212b67bf0735ec8c4f9e7ae53"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTcxNzIxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/DeviceConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOTo0OFrOGtMJ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzozOTo0OFrOGtMJ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODIzNg==", "bodyText": "I think we should set the municipality and number addition to null instead of \"\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/363#discussion_r450038236", "createdAt": "2020-07-06T07:39:48Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-ws-publiclighting/src/main/java/org/opensmartgridplatform/adapter/ws/publiclighting/application/mapping/converters/DeviceConverter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.ws.publiclighting.application.mapping.converters;\n+\n+import java.nio.charset.StandardCharsets;\n+\n+import org.apache.commons.codec.binary.Base64;\n+import org.opensmartgridplatform.adapter.ws.schema.publiclighting.adhocmanagement.Device;\n+import org.opensmartgridplatform.domain.core.valueobjects.Address;\n+import org.opensmartgridplatform.domain.core.valueobjects.GpsCoordinates;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class DeviceConverter\n+        extends BidirectionalConverter<org.opensmartgridplatform.domain.core.entities.Device, Device> {\n+\n+    @Override\n+    public Device convertTo(final org.opensmartgridplatform.domain.core.entities.Device source,\n+            final Type<Device> destinationType, final MappingContext mappingContext) {\n+        final Device device = new Device();\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        device.setDeviceUid(Base64.encodeBase64String(deviceIdentification.getBytes(StandardCharsets.US_ASCII)));\n+        device.setDeviceIdentification(deviceIdentification);\n+        final Address containerAddress = source.getContainerAddress();\n+        if (containerAddress != null) {\n+            device.setContainerPostalCode(containerAddress.getPostalCode());\n+            device.setContainerCity(containerAddress.getCity());\n+            device.setContainerStreet(containerAddress.getStreet());\n+            device.setContainerNumber(containerAddress.getNumber().toString());\n+        }\n+        final GpsCoordinates gpsCoordinates = source.getGpsCoordinates();\n+        if (gpsCoordinates != null) {\n+            device.setGpsLatitude(gpsCoordinates.getLatitude());\n+            device.setGpsLongitude(gpsCoordinates.getLongitude());\n+        }\n+        device.setDeviceType(source.getDeviceType());\n+        device.setActivated(source.isActivated());\n+\n+        return device;\n+    }\n+\n+    @Override\n+    public org.opensmartgridplatform.domain.core.entities.Device convertFrom(final Device source,\n+            final Type<org.opensmartgridplatform.domain.core.entities.Device> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final String deviceIdentification = source.getDeviceIdentification();\n+        final Address containerAddress = new Address(source.getContainerCity(), source.getContainerPostalCode(),\n+                source.getContainerStreet(), Integer.valueOf(source.getContainerNumber()), \"\", \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bdd80006180d62212b67bf0735ec8c4f9e7ae53"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3628, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}