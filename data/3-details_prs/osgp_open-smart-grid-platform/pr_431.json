{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMjMzODE5", "number": 431, "title": "Flex 5492 ensure elster firmware version is retrieved within 15 minutes", "bodyText": "", "createdAt": "2020-09-24T07:04:10Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431", "merged": true, "mergeCommit": {"oid": "a42f92d9b441d1790b9ebd7055077b9f9b798071"}, "closed": true, "closedAt": "2020-10-01T07:38:24Z", "author": {"login": "joostknapen"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLo513gH2gAyNDkyMjMzODE5OjA3NWQ1NWQ3YzdkNzU1ZThhY2Q4ODkyOWM3MzgzMDEyZTcwNDIwYWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOMYv2AFqTUwMDA4MDY3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "075d55d7c7d755e8acd88929c7383012e70420af", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/075d55d7c7d755e8acd88929c7383012e70420af", "committedDate": "2020-09-23T09:09:47Z", "message": "Mock server adapted to send register/confirm_register and notification event after firmware update;\\n Send the getFirmwareversionRequest after the confirm_register instead of after the register message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486b2e137e7ca77e4e13055fef3bddeab2022678", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/486b2e137e7ca77e4e13055fef3bddeab2022678", "committedDate": "2020-09-24T07:02:06Z", "message": "Added the registerDevicerequestMessageProcessor again, just to pick up the REGISTER_DEVICE message, and to do nothing with it. Added the confirmRegisterDeviceRequest message to the PendingFirmwareUpdate feature test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c2b291bf63269d10f6d5cb54870a601a2a920fd", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4c2b291bf63269d10f6d5cb54870a601a2a920fd", "committedDate": "2020-09-24T07:17:44Z", "message": "FLEX-5492: removed 'set static' from save actions.."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ecc36b3ab96b98c68431aa1e1019f1f0b81f93", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e4ecc36b3ab96b98c68431aa1e1019f1f0b81f93", "committedDate": "2020-09-24T07:29:05Z", "message": "FLEX-5492: Removed unused variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59f5053bb722ae5928507caf161b069d00e5aac2", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/59f5053bb722ae5928507caf161b069d00e5aac2", "committedDate": "2020-09-28T09:24:31Z", "message": "FLEX-5492: Fixed bug in 61850 channelhandlerserver where a confirm_register_device message was sent with identifing type register_device"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9", "author": {"user": {"login": "kevinsmeets", "name": "Kevin Smeets"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9", "committedDate": "2020-09-29T12:06:54Z", "message": "FLEX-5492 ~ Adds missing message processor and uses constants.\n\n- The message processor class added in this commit prevents a 'no\nmessage processor found for message type' exception. There is some\ndefault error handling in that case, which sends the message along to\nthe domain component. To prevent exceptions in the logging and depending\non some kind of default error handling behavior, is it better to\nexplicitly handle the message type with a message process class.\n- Instead of using some hard coded string, use the enumeration members\nof the MessageType enumeration. This will make refactoring of the code\nin the future less error prone."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDI4OTYx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#pullrequestreview-498428961", "createdAt": "2020-09-29T12:46:19Z", "commit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0NjoyMFrOHZrXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0NjoyMFrOHZrXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4NzAxNg==", "bodyText": "The step code as defined org.opensmartgridplatform.cucumber.platform.publiclighting.glue.steps.mocks.OslpDeviceSteps.theDeviceSendsAConfirmRegisterDeviceRequestToThePlatform(String, Map<String, String>) only uses the DeviceIdentification and DeviceUid. Therefore, I think IpAddress and DeviceType can be removed from the data table.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r496687016", "createdAt": "2020-09-29T12:46:20Z", "author": {"login": "kevinsmeets"}, "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/resources/features/publiclighting/osgp-adapter-ws-core/Firmwaremanagement/PendingFirmwareUpdate.feature", "diffHunk": "@@ -36,13 +36,19 @@ Feature: FirmwareManagement pending firmware update\n       | OrganizationIdentification | TestOrganization   |\n     When the device sends a register device request to the platform over \"<Protocol>\"\n       | DeviceIdentification | TEST1024010101010 |\n-      | Protocol             | <Protocol>        |\n       | DeviceUid            | eHW0eEFzN0R2Okd5  |\n       | IpAddress            | 127.0.0.2         |\n       | DeviceType           | SSLD              |\n       | HasSchedule          | false             |\n     Then the register device response contains\n       | Status | OK |\n+    When the device sends a confirm register device request to the platform over \"<Protocol>\"\n+      | DeviceIdentification | TEST1024010101010 |\n+      | DeviceUid            | eHW0eEFzN0R2Okd5  |\n+      | IpAddress            | 127.0.0.2         |\n+      | DeviceType           | SSLD              |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDMxOTU3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#pullrequestreview-498431957", "createdAt": "2020-09-29T12:49:59Z", "commit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0OTo1OVrOHZrgig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo0OTo1OVrOHZrgig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4OTI5MA==", "bodyText": "If we choose to keep the message sent from osgp-core to domain-core, this logging can be set to debug in my opinion. Or we could remove this message processor altogether, and remove the sending of the message in osgp-core.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r496689290", "createdAt": "2020-09-29T12:49:59Z", "author": {"login": "kevinsmeets"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/infra/jms/core/messageprocessors/CommonRegisterDeviceRequestMessageProcessor.java", "diffHunk": "@@ -7,42 +7,26 @@\n  */\n package org.opensmartgridplatform.adapter.domain.core.infra.jms.core.messageprocessors;\n \n-import javax.jms.JMSException;\n import javax.jms.ObjectMessage;\n \n-import org.opensmartgridplatform.adapter.domain.core.application.services.FirmwareManagementService;\n import org.opensmartgridplatform.adapter.domain.core.infra.jms.DomainCoreDeviceRequestMessageProcessor;\n-import org.opensmartgridplatform.shared.infra.jms.MessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class CommonRegisterDeviceRequestMessageProcessor extends DomainCoreDeviceRequestMessageProcessor {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonRegisterDeviceRequestMessageProcessor.class);\n \n-    @Autowired\n-    private FirmwareManagementService firmwareManagementService;\n-\n     public CommonRegisterDeviceRequestMessageProcessor() {\n         super(MessageType.REGISTER_DEVICE);\n     }\n \n     @Override\n-    public void processMessage(final ObjectMessage message) throws JMSException {\n-\n-        MessageMetadata messageMetadata;\n-        try {\n-            messageMetadata = MessageMetadata.fromMessage(message);\n-        } catch (final JMSException e) {\n-            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n-            return;\n-        }\n-\n-        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(messageMetadata.getDeviceIdentification());\n+    public void processMessage(final ObjectMessage message) {\n+        LOGGER.info(\"REGISTER_DEVICE message received. Ignore, since we act on CONFIRM_REGISTER_DEVICE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDM1NzAz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#pullrequestreview-498435703", "createdAt": "2020-09-29T12:54:19Z", "commit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NDoxOVrOHZrryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NDoxOVrOHZrryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5MjE3MA==", "bodyText": "These additional steps for handleUpdateFirmwareRequest() are the only real update for the OslpChannelHandler class.  All other changes seem formatting related.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r496692170", "createdAt": "2020-09-29T12:54:19Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -1200,8 +1117,14 @@ private void handleSetEventNotificationsRequest(final Device device, final SetEv\n     private void handleUpdateFirmwareRequest(final Device device, final UpdateFirmwareRequest request) {\n         LOGGER.debug(\"handle UpdateFirmwareRequest for device: {}, with serialized size of {}\",\n                 device.getDeviceIdentification(), request.getSerializedSize());\n-        // For now, do nothing, perhaps store firmware version, so that it can\n-        // be displayed ???\n+\n+        this.sendDelayedDeviceRegistration(device);\n+\n+        // Send a firmware activation event after the device registration has\n+        // (likely) been finished\n+        final Oslp.Event event = Oslp.Event.FIRMWARE_EVENTS_ACTIVATING;\n+        final String description = \"A new firmware is activated\";\n+        this.sendEventWithCustomDelay(device, event, description, 7000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 913}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NDM2NzAz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#pullrequestreview-498436703", "createdAt": "2020-09-29T12:55:28Z", "commit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyOFrOHZru7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjo1NToyOFrOHZru7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5Mjk3NQ==", "bodyText": "I don't know if this new class is useful. Sending the device type along with some other data doesn't seem to offer any benefit.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r496692975", "createdAt": "2020-09-29T12:55:28Z", "author": {"login": "kevinsmeets"}, "path": "osgp/shared/osgp-dto/src/main/java/org/opensmartgridplatform/dto/valueobjects/ConfirmDeviceRegistrationDataDto.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright 2015 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.dto.valueobjects;\n+\n+import java.io.Serializable;\n+\n+public class ConfirmDeviceRegistrationDataDto implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MTQxMzc4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#pullrequestreview-499141378", "createdAt": "2020-09-30T07:11:22Z", "commit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzoxMToyMlrOHaQFtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo1MTo1NlrOHaenuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4ODYzMA==", "bodyText": "Copyright statement should be for Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497288630", "createdAt": "2020-09-30T07:11:22Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/infra/jms/core/messageprocessors/CommonConfirmRegisterDeviceRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4ODgxOQ==", "bodyText": "Copyright statement should be for Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497288819", "createdAt": "2020-09-30T07:11:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/ConfirmRegisterDeviceMessageProcessor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4ODkzMw==", "bodyText": "Copyright statement should be for Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497288933", "createdAt": "2020-09-30T07:12:03Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/osgp-dto/src/main/java/org/opensmartgridplatform/dto/valueobjects/ConfirmDeviceRegistrationDataDto.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright 2015 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NDUxOA==", "bodyText": "What's the reason to make this method static?\nIt probably works if the tests run fine, but why deviate from the common way step methods are defined?\nIf there is no reason it looks sloppy just mixing instance and static methods randomly.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497294518", "createdAt": "2020-09-30T07:23:06Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/firmwaremanagement/GetFirmwareVersionSteps.java", "diffHunk": "@@ -74,10 +74,9 @@ public void receivingAGetFirmwareVersionRequest(final Map<String, String> reques\n      *            The table with the expected fields in the response.\n      * @apiNote The response will contain the correlation uid, so store that in\n      *          the current scenario context for later use.\n-     * @throws Throwable\n      */\n     @Then(\"^the get firmware version async response contains$\")\n-    public void theGetFirmwareVersionResponseContains(final Map<String, String> expectedResponseData) throws Throwable {\n+    public static void theGetFirmwareVersionResponseContains(final Map<String, String> expectedResponseData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI5NDY2Nw==", "bodyText": "What's the reason to make this method static?\nIt probably works if the tests run fine, but why deviate from the common way step methods are defined?\nIf there is no reason it looks sloppy just mixing instance and static methods randomly.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497294667", "createdAt": "2020-09-30T07:23:25Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-common/src/test/java/org/opensmartgridplatform/cucumber/platform/common/glue/steps/ws/core/firmwaremanagement/GetFirmwareVersionSteps.java", "diffHunk": "@@ -124,8 +123,7 @@ public void thePlatformBuffersAGetFirmwareVersionResponseMessage(final String de\n     }\n \n     @Then(\"^the get firmware version response contains soap fault$\")\n-    public void theGetFirmwareVersionResponseContainsSoapFault(final Map<String, String> expectedResponseData)\n-            throws Throwable {\n+    public static void theGetFirmwareVersionResponseContainsSoapFault(final Map<String, String> expectedResponseData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwMTczMg==", "bodyText": "I am having some doubts about the usefulness of adding the requireNonNull here.\nMy least important objection, but this may be a matter of taste, is that the message from Objects.requireNonNull (which throws a NullPointerException for null) is not significantly more clear than the NullPointerException that would be thrown otherwise by the switch, while it does add some extra code.\nThe other reason is that the check looks pointless. Given the if condition (receivedConfiguration.getLightType() != null) and the earlier assertion (assertThat(receivedConfiguration.getLightType()).isEqualTo(expectedLightType)) I would say that expectedLightType cannot be null at this point in the code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497301732", "createdAt": "2020-09-30T07:36:12Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -246,7 +248,7 @@ public void aSetConfigurationOSLPMessageIsSentToDevice(final String protocol, fi\n                     LightType.class);\n             assertThat(receivedConfiguration.getLightType()).isEqualTo(expectedLightType);\n \n-            switch (expectedLightType) {\n+            switch (Objects.requireNonNull(expectedLightType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxMDY5MQ==", "bodyText": "Not from this change, but the addition of final makes it even more obvious that meterType won't be reassigned.\nIt does not look very nice to have the declaration and assignment split in two without need.\nPragmatically speaking, this may best be ignored, since the meter type is being removed as part of FLEX-3787 (assuming the story gets finished as planned).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497310691", "createdAt": "2020-09-30T07:52:04Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -336,7 +338,7 @@ public void aSetConfigurationOSLPMessageIsSentToDevice(final String protocol, fi\n \n         if (!StringUtils.isEmpty(expectedResponseData.get(PlatformKeys.METER_TYPE))\n                 && receivedConfiguration.getMeterType() != null) {\n-            MeterType meterType;\n+            final MeterType meterType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4MTgyMQ==", "bodyText": "Any reason for the two line gap between the methods?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497381821", "createdAt": "2020-09-30T09:47:05Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -1151,7 +1152,25 @@ public void theRegisterDeviceResponseContains(final Map<String, String> expected\n         } else {\n             assertThat(e.getMessage()).isEqualTo(getString(expectedResponse, PlatformPubliclightingKeys.MESSAGE));\n         }\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NzYzNw==", "bodyText": "This is just fine, but may I advocate making use of the assertj assertions for more specialised cases?\nSemantically and message-wise you often can get a nicer result when you make use of these less basic options.\nIf you begin with assertThat(e) you get a ThrowableAssert instead of a StringAssert like with the current code.\nThis ThrowableAssert has a hasMessage(String) that would do the same check as done here, and offers a whole number of other options as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497387637", "createdAt": "2020-09-30T09:56:18Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -1151,7 +1152,25 @@ public void theRegisterDeviceResponseContains(final Map<String, String> expected\n         } else {\n             assertThat(e.getMessage()).isEqualTo(getString(expectedResponse, PlatformPubliclightingKeys.MESSAGE));\n         }\n+    }\n+\n+\n+    /**\n+     * Verify that we have received a confirm register device response over OSLP/OSLP ELSTER\n+     */\n+    @Then(\"^the confirm register device response contains$\")\n+    public void theConfirmRegisterDeviceResponseContains(final Map<String, String> expectedResponse) {\n+        final Exception e = (Exception) ScenarioContext.current().get(\"Error\");\n+        if (e == null || getString(expectedResponse, PlatformPubliclightingKeys.MESSAGE) == null) {\n+            final Message responseMessage = this.oslpMockServer.waitForResponse();\n \n+            final Oslp.ConfirmRegisterDeviceResponse response = responseMessage.getConfirmRegisterDeviceResponse();\n+            Assert.assertNotNull(response);\n+            assertThat(response.getStatus().name())\n+                    .isEqualTo(getString(expectedResponse, PlatformPubliclightingKeys.KEY_STATUS));\n+        } else {\n+            assertThat(e.getMessage()).isEqualTo(getString(expectedResponse, PlatformPubliclightingKeys.MESSAGE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5NDkxMg==", "bodyText": "I wouldn't have done this myself, and can imagine someone changing it back with other changes.\nAs we don't have any explicit agreement on how to handle this, this is not a request for change per se, but more taking the opportunity to discuss it a bit.\nLanguage-wise there is nothing wrong with the change and it just works.\nStylisticly I am not to big a fan of static methods, as these can make testing harder in some cases.\nA more puristic way of looking may be that this method belongs in an IpAddressConverter or something like that (don't know if it is really pragmatic to go as far and move it, for the nicer design and possible re-use).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497394912", "createdAt": "2020-09-30T10:08:52Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-publiclighting/src/test/java/org/opensmartgridplatform/cucumber/platform/publiclighting/glue/steps/mocks/OslpDeviceSteps.java", "diffHunk": "@@ -1203,7 +1222,7 @@ public void anUpdateFirmwareOSLPMessageIsSentToTheDevice(final String protocol,\n                 PlatformPubliclightingKeys.FIRMWARE_URL, PlatformPubliclightingDefaults.FIRMWARE_URL));\n     }\n \n-    private String convertIpAddress(final ByteString byteString) {\n+    private static String convertIpAddress(final ByteString byteString) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQzNzA0OA==", "bodyText": "As discussed earlier, probably the best solution is to not send the message from core to domain if it is not going to be handled in any meaningful way.\nHandling pending firmware updates has (presumably after Joost's comment) been added in processMessage of the CommonConfirmRegisterDeviceRequestMessageProcessor (which could probably use a name reflecting its meaning in the platform more than the interaction in the OSLP protocol).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497437048", "createdAt": "2020-09-30T11:30:25Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/infra/jms/core/messageprocessors/CommonRegisterDeviceRequestMessageProcessor.java", "diffHunk": "@@ -7,42 +7,26 @@\n  */\n package org.opensmartgridplatform.adapter.domain.core.infra.jms.core.messageprocessors;\n \n-import javax.jms.JMSException;\n import javax.jms.ObjectMessage;\n \n-import org.opensmartgridplatform.adapter.domain.core.application.services.FirmwareManagementService;\n import org.opensmartgridplatform.adapter.domain.core.infra.jms.DomainCoreDeviceRequestMessageProcessor;\n-import org.opensmartgridplatform.shared.infra.jms.MessageMetadata;\n import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class CommonRegisterDeviceRequestMessageProcessor extends DomainCoreDeviceRequestMessageProcessor {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(CommonRegisterDeviceRequestMessageProcessor.class);\n \n-    @Autowired\n-    private FirmwareManagementService firmwareManagementService;\n-\n     public CommonRegisterDeviceRequestMessageProcessor() {\n         super(MessageType.REGISTER_DEVICE);\n     }\n \n     @Override\n-    public void processMessage(final ObjectMessage message) throws JMSException {\n-\n-        MessageMetadata messageMetadata;\n-        try {\n-            messageMetadata = MessageMetadata.fromMessage(message);\n-        } catch (final JMSException e) {\n-            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n-            return;\n-        }\n-\n-        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(messageMetadata.getDeviceIdentification());\n+    public void processMessage(final ObjectMessage message) {\n+        LOGGER.info(\"REGISTER_DEVICE message received. Ignore, since we act on CONFIRM_REGISTER_DEVICE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY4OTI5MA=="}, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1Mjc1Nw==", "bodyText": "Maybe this should be renamed. We had a discussion whether the current name is too OSLP-protocol-related, and should rather be more platform oriented.\nAfter the rename, there may still be another issue (depending on the final name) and that can be explained by scrolling down the enums in this MessageType until you see the following comment:\n// keep MessageType in alphabetical order.\nAs far as I can tell this order would be important because of the way we have a number of different enums - DeviceFunction is an example - containing essentially the same list of values (I know, it ain't pretty, but that is for another time).\nThis could be because we have/had some code in message processors (or elsewhere) that depends on the ordinal of the enums resolved by name.\nWe may need to look into it better to see if it is still valid and so, if it can be changed so that it no longer applies.\nFor now my advice would be to keep things in alphabetical order, as the comment says.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497452757", "createdAt": "2020-09-30T12:00:28Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/infra/jms/MessageType.java", "diffHunk": "@@ -52,6 +52,7 @@\n     PUSH_NOTIFICATION_SMS,\n     READ_ALARM_REGISTER,\n     REGISTER_DEVICE,\n+    CONFIRM_REGISTER_DEVICE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwNDY4Mw==", "bodyText": "If the value 2000 makes sense in all kinds of scenarios it is probably good enough for now.\nIf we can already foresee that it would come in handy to set this to smaller or larger values for local cucumber tests, general test environment use and something like nightly tests for instance, it may be good to make it configurable, for example through the properties file.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497504683", "createdAt": "2020-09-30T13:22:45Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -569,307 +778,65 @@ private void sleep(final Long sleepTime) {\n         } else if (request.hasGetPowerUsageHistoryRequest()) {\n             this.handleGetPowerUsageHistoryRequest(device, request.getGetPowerUsageHistoryRequest());\n \n-            response = createGetPowerUsageHistoryWithDatesResponse(request.getGetPowerUsageHistoryRequest());\n-        } else if (request.hasGetStatusRequest()) {\n-            response = this.createGetStatusResponse(device);\n-        } else if (request.hasResumeScheduleRequest()) {\n-            response = createResumeScheduleResponse();\n-        } else if (request.hasSetRebootRequest()) {\n-            response = createSetRebootResponse();\n-\n-            this.sendDelayedDeviceRegistration(device);\n-        } else if (request.hasSetTransitionRequest()) {\n-            this.handleSetTransitionRequest(device, request.getSetTransitionRequest());\n-\n-            response = createSetTransitionResponse();\n-        } else if (request.hasConfirmRegisterDeviceRequest()) {\n-            response = createConfirmRegisterDeviceResponse(request.getConfirmRegisterDeviceRequest().getRandomDevice(),\n-                    request.getConfirmRegisterDeviceRequest().getRandomPlatform());\n-        } else {\n-            // Handle errors by logging\n-            LOGGER.error(\"Did not expect request, ignoring: {}\", request);\n-        }\n-\n-        return response;\n-    }\n-\n-    private void sendDelayedDeviceRegistration(final Device device) {\n-        if (device == null) {\n-            return;\n-        }\n-\n-        final String deviceIdentification = device.getDeviceIdentification();\n-        if (StringUtils.isEmpty(deviceIdentification)) {\n-            return;\n-        }\n-\n-        new Timer().schedule(new TimerTask() {\n-\n-            @Override\n-            public void run() {\n-                try {\n-                    LOGGER.info(\"Sending DeviceRegistrationRequest for device: {}\", deviceIdentification);\n-                    final DeviceMessageStatus deviceMessageStatus = OslpChannelHandler.this.registerDevice\n-                            .sendRegisterDeviceCommand(device.getId(), true);\n-                    if (DeviceMessageStatus.OK.equals(deviceMessageStatus)) {\n-                        LOGGER.info(\"Sending ConfirmDeviceRegistrationRequest for device: {}\", deviceIdentification);\n-                        OslpChannelHandler.this.registerDevice.sendConfirmDeviceRegistrationCommand(device.getId());\n-                    }\n-                } catch (final Exception e) {\n-                    LOGGER.error(\"Caught exception during sendDelayedDeviceRegistration() for device : \"\n-                            + deviceIdentification, e);\n-                }\n-            }\n-\n-        }, 2000);\n-    }\n-\n-    private static Message createConfirmRegisterDeviceResponse(final int randomDevice, final int randomPlatform) {\n-        return Oslp.Message.newBuilder()\n-                .setConfirmRegisterDeviceResponse(ConfirmRegisterDeviceResponse.newBuilder()\n-                        .setRandomDevice(randomDevice)\n-                        .setRandomPlatform(randomPlatform)\n-                        .setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private void handleSetScheduleRequest(final Device device, final SetScheduleRequest setScheduleRequest) {\n-        // Not yet implemented.\n-        LOGGER.info(\"handleSetScheduleRequest not yet implemented. Device: {}, number of schedule entries: {}\",\n-                device.getDeviceIdentification(), setScheduleRequest.getSchedulesCount());\n-    }\n-\n-    private static Message createStartSelfTestResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setStartSelfTestResponse(StartSelfTestResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createStopSelfTestResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setStopSelfTestResponse(StopSelfTestResponse.newBuilder()\n-                        .setStatus(Oslp.Status.OK)\n-                        .setSelfTestResult(ByteString.copyFrom(new byte[] { 0 })))\n-                .build();\n-    }\n-\n-    private static Message createSetLightResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setSetLightResponse(SetLightResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createSetEventNotificationsResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setSetEventNotificationsResponse(SetEventNotificationsResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createUpdateFirmwareResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setUpdateFirmwareResponse(UpdateFirmwareResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createGetFirmwareVersionResponse(final String firmwareVersion) {\n-        return Oslp.Message.newBuilder()\n-                .setGetFirmwareVersionResponse(\n-                        GetFirmwareVersionResponse.newBuilder().setFirmwareVersion(firmwareVersion))\n-                .build();\n-    }\n-\n-    private static Message createSwitchFirmwareResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setSwitchFirmwareResponse(Oslp.SwitchFirmwareResponse.newBuilder().setStatus(Oslp.Status.FAILURE))\n-                .build();\n-    }\n-\n-    private static Message createSetDeviceVerificationKeyResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setSetDeviceVerificationKeyResponse(\n-                        Oslp.SetDeviceVerificationKeyResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createUpdateDeviceSslCertificationResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setUpdateDeviceSslCertificationResponse(\n-                        Oslp.UpdateDeviceSslCertificationResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createSetScheduleResponse() {\n-        return Oslp.Message.newBuilder()\n-                .setSetScheduleResponse(SetScheduleResponse.newBuilder().setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createGetActualPowerUsageResponse() {\n-        // yyyyMMddhhmmss z\n-        final SimpleDateFormat utcTimeFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n-        utcTimeFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n-\n-        final Date currentDateTime = new Date();\n-        final String utcTimestamp = utcTimeFormat.format(currentDateTime);\n-\n-        @SuppressWarnings(\"deprecation\")\n-        final int actualConsumedPower = currentDateTime.getMinutes();\n-\n-        return Oslp.Message.newBuilder()\n-                .setGetActualPowerUsageResponse(GetActualPowerUsageResponse.newBuilder()\n-                        .setPowerUsageData(PowerUsageData.newBuilder()\n-                                .setRecordTime(utcTimestamp)\n-                                .setMeterType(MeterType.P1)\n-                                .setTotalConsumedEnergy(actualConsumedPower * 2L)\n-                                .setActualConsumedPower(actualConsumedPower)\n-                                .setPsldData(PsldData.newBuilder().setTotalLightingHours(actualConsumedPower * 3))\n-                                .setSsldData(SsldData.newBuilder()\n-                                        .setActualCurrent1(1)\n-                                        .setActualCurrent2(2)\n-                                        .setActualCurrent3(3)\n-                                        .setActualPower1(1)\n-                                        .setActualPower2(2)\n-                                        .setActualPower3(3)\n-                                        .setAveragePowerFactor1(1)\n-                                        .setAveragePowerFactor2(2)\n-                                        .setAveragePowerFactor3(3)\n-                                        .addRelayData(Oslp.RelayData.newBuilder()\n-                                                .setIndex(ByteString.copyFrom(new byte[] { 2 }))\n-                                                .setTotalLightingMinutes(480))\n-                                        .addRelayData(Oslp.RelayData.newBuilder()\n-                                                .setIndex(ByteString.copyFrom(new byte[] { 3 }))\n-                                                .setTotalLightingMinutes(480))\n-                                        .addRelayData(Oslp.RelayData.newBuilder()\n-                                                .setIndex(ByteString.copyFrom(new byte[] { 4 }))\n-                                                .setTotalLightingMinutes(480))))\n-                        .setStatus(Oslp.Status.OK))\n-                .build();\n-    }\n-\n-    private static Message createGetPowerUsageHistoryWithDatesResponse(\n-            final GetPowerUsageHistoryRequest powerUsageHistoryRequest) throws ParseException {\n-\n-        final DateTimeFormatter formatter = DateTimeFormat.forPattern(\"yyyyMMddHHmmss\").withZoneUTC();\n-\n-        // 20140405 220000\n-        final DateTime now = new DateTime();\n-        final DateTime dateTimeFrom = formatter.parseDateTime(powerUsageHistoryRequest.getTimePeriod().getStartTime());\n-        DateTime dateTimeUntil = formatter.parseDateTime(powerUsageHistoryRequest.getTimePeriod().getEndTime());\n-\n-        final int itemsPerPage = 2;\n-        final int intervalMinutes = powerUsageHistoryRequest.getTermType() == HistoryTermType.Short ? 60 : 1440;\n-        final int usagePerItem = powerUsageHistoryRequest.getTermType() == HistoryTermType.Short ? 2400 : 57600;\n-\n-        // If from in the future, return emtpy list\n-        final List<PowerUsageData> powerUsageDataList = new ArrayList<>();\n-        if (dateTimeFrom.isAfter(now)) {\n-            return createUsageMessage(1, itemsPerPage, 1, powerUsageDataList);\n-        }\n-\n-        // Ensure until date is not in future\n-        dateTimeUntil = correctUsageUntilDate(dateTimeUntil, powerUsageHistoryRequest.getTermType());\n-\n-        final int queryInterval = Minutes.minutesBetween(dateTimeFrom, dateTimeUntil).getMinutes();\n-        final int totalNumberOfItems = queryInterval / intervalMinutes;\n-        int numberOfPages = (int) Math.ceil((double) totalNumberOfItems / (double) itemsPerPage);\n-        if (numberOfPages == 0) {\n-            numberOfPages = 1;\n-        }\n-\n-        // Determine page number\n-        int currentPageNumber;\n-        if (powerUsageHistoryRequest.getPage() == 0) {\n-            currentPageNumber = 1;\n-        } else {\n-            currentPageNumber = powerUsageHistoryRequest.getPage();\n-        }\n-\n-        int page = 1;\n-        int itemsToSkip = 0;\n-        while (currentPageNumber != page) {\n-            itemsToSkip += itemsPerPage;\n-            page++;\n-        }\n-\n-        // Advance time to correct page starting point, last to first (like real\n-        // device)\n-        DateTime pageStartTime = dateTimeUntil.minusMinutes(intervalMinutes * itemsToSkip)\n-                .minusMinutes(intervalMinutes);\n-        final int itemsOnPage = Math.min(Math.abs(totalNumberOfItems - itemsToSkip), itemsPerPage);\n-\n-        // Advance usage to start of page\n-        int totalUsage = (totalNumberOfItems * usagePerItem) - (usagePerItem * itemsToSkip);\n+            response = createGetPowerUsageHistoryWithDatesResponse(request.getGetPowerUsageHistoryRequest());\n+        } else if (request.hasGetStatusRequest()) {\n+            response = this.createGetStatusResponse(device);\n+        } else if (request.hasResumeScheduleRequest()) {\n+            response = createResumeScheduleResponse();\n+        } else if (request.hasSetRebootRequest()) {\n+            response = createSetRebootResponse();\n \n-        // Fill page with items\n-        for (int i = 0; i < itemsOnPage; i++) {\n-            final int range = (100) + 1;\n-            final int randomCumulativeMinutes = new Random().nextInt(range) + 100;\n+            this.sendDelayedDeviceRegistration(device);\n+        } else if (request.hasSetTransitionRequest()) {\n+            this.handleSetTransitionRequest(device, request.getSetTransitionRequest());\n \n-            // Increase the meter\n-            final double random = usagePerItem - (usagePerItem / 50d * Math.random());\n-            totalUsage -= random;\n-            // Add power usage item to response\n-            final PowerUsageData powerUsageData = PowerUsageData.newBuilder()\n-                    .setRecordTime(pageStartTime.toString(formatter))\n-                    .setMeterType(MeterType.P1)\n-                    .setTotalConsumedEnergy(totalUsage)\n-                    .setActualConsumedPower((int) random)\n-                    .setPsldData(PsldData.newBuilder().setTotalLightingHours((int) random * 3))\n-                    .setSsldData(SsldData.newBuilder()\n-                            .setActualCurrent1(10)\n-                            .setActualCurrent2(20)\n-                            .setActualCurrent3(30)\n-                            .setActualPower1(10)\n-                            .setActualPower2(20)\n-                            .setActualPower3(30)\n-                            .setAveragePowerFactor1(10)\n-                            .setAveragePowerFactor2(20)\n-                            .setAveragePowerFactor3(30)\n-                            .addRelayData(Oslp.RelayData.newBuilder()\n-                                    .setIndex(ByteString.copyFrom(new byte[] { 2 }))\n-                                    .setTotalLightingMinutes(burningMinutes - randomCumulativeMinutes))\n-                            .addRelayData(Oslp.RelayData.newBuilder()\n-                                    .setIndex(ByteString.copyFrom(new byte[] { 3 }))\n-                                    .setTotalLightingMinutes(burningMinutes - randomCumulativeMinutes))\n-                            .addRelayData(Oslp.RelayData.newBuilder()\n-                                    .setIndex(ByteString.copyFrom(new byte[] { 4 }))\n-                                    .setTotalLightingMinutes(burningMinutes - randomCumulativeMinutes)))\n-                    .build();\n+            response = createSetTransitionResponse();\n+        } else if (request.hasConfirmRegisterDeviceRequest()) {\n+            response = createConfirmRegisterDeviceResponse(request.getConfirmRegisterDeviceRequest().getRandomDevice(),\n+                    request.getConfirmRegisterDeviceRequest().getRandomPlatform());\n+        } else {\n+            // Handle errors by logging\n+            LOGGER.error(\"Did not expect request, ignoring: {}\", request);\n+        }\n \n-            powerUsageDataList.add(powerUsageData);\n-            pageStartTime = pageStartTime.minusMinutes(intervalMinutes);\n+        return response;\n+    }\n \n-            burningMinutes -= CUMULATIVE_BURNING_MINUTES;\n+    private void sendDelayedDeviceRegistration(final Device device) {\n+        if (device == null) {\n+            return;\n         }\n \n-        return createUsageMessage(currentPageNumber, itemsPerPage, numberOfPages, powerUsageDataList);\n-    }\n+        final String deviceIdentification = device.getDeviceIdentification();\n+        if (StringUtils.isEmpty(deviceIdentification)) {\n+            return;\n+        }\n \n-    private static DateTime correctUsageUntilDate(final DateTime dateTimeUntil, final HistoryTermType termType) {\n-        final DateTime now = new DateTime();\n-        if (dateTimeUntil.isAfter(now)) {\n-            if (termType == HistoryTermType.Short) {\n-                return now.hourOfDay().roundCeilingCopy();\n-            } else {\n-                return now.withZone(localTimeZone).dayOfWeek().roundCeilingCopy().withZone(DateTimeZone.UTC);\n+        new Timer().schedule(new TimerTask() {\n+\n+            @Override\n+            public void run() {\n+                try {\n+                    LOGGER.info(\"Sending DeviceRegistrationRequest for device: {}\", deviceIdentification);\n+                    final DeviceMessageStatus deviceMessageStatus = OslpChannelHandler.this.registerDevice\n+                            .sendRegisterDeviceCommand(device.getId(), true);\n+                    if (DeviceMessageStatus.OK.equals(deviceMessageStatus)) {\n+                        LOGGER.info(\"Sending ConfirmDeviceRegistrationRequest for device: {}\", deviceIdentification);\n+                        OslpChannelHandler.this.registerDevice.sendConfirmDeviceRegistrationCommand(device.getId());\n+                    }\n+                } catch (final Exception e) {\n+                    LOGGER.error(\"Caught exception during sendDelayedDeviceRegistration() for device : \"\n+                            + deviceIdentification, e);\n+                }\n             }\n-        }\n \n-        return dateTimeUntil;\n+        }, 2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 760}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUwNzkyMQ==", "bodyText": "Similar as with the device registration delay. If we can already imagine a realistic chance that variation across environments of the specific delay will come in handy, it could be better to make it configurable.\nIf this is deemed OK in different use cases, I think it might be good enough as it is.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497507921", "createdAt": "2020-09-30T13:27:17Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -1122,6 +1039,25 @@ private void handleSetTransitionRequest(final Device device, final SetTransition\n         }\n     }\n \n+    private void sendEvent(final Device device, final Oslp.Event event, final String description) {\n+        this.sendEventWithCustomDelay(device, event, description, 3000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 851}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUxMTEyNg==", "bodyText": "Opinions may differ, so I won't go on about this if it is left in, but I am no fan of comments that don't add anything that isn't already obvious from method names or other things in the code.\nFor me this looks like the category of comments to be avoided like: x = x + 1; // increment x by 1.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497511126", "createdAt": "2020-09-30T13:31:28Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -1122,6 +1039,25 @@ private void handleSetTransitionRequest(final Device device, final SetTransition\n         }\n     }\n \n+    private void sendEvent(final Device device, final Oslp.Event event, final String description) {\n+        this.sendEventWithCustomDelay(device, event, description, 3000);\n+    }\n+\n+    private void sendEventWithCustomDelay(final Device device, final Oslp.Event event, final String description,\n+            final int delay) {\n+        // Send an event.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 856}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjUwMA==", "bodyText": "The \"likely\" here looks a little suspicious. Could it be made somewhat safer if the delay sending the device registration were included as a method parameter of sendDelayedDeviceRegistration just above here?\nFurther, like before, if the delays are likely suitable for different environments it is OK as it is, but if we already think there is a realistic chance we would like to vary this between different uses, it might be an idea to make them configurable.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497522500", "createdAt": "2020-09-30T13:46:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -1200,8 +1117,14 @@ private void handleSetEventNotificationsRequest(final Device device, final SetEv\n     private void handleUpdateFirmwareRequest(final Device device, final UpdateFirmwareRequest request) {\n         LOGGER.debug(\"handle UpdateFirmwareRequest for device: {}, with serialized size of {}\",\n                 device.getDeviceIdentification(), request.getSerializedSize());\n-        // For now, do nothing, perhaps store firmware version, so that it can\n-        // be displayed ???\n+\n+        this.sendDelayedDeviceRegistration(device);\n+\n+        // Send a firmware activation event after the device registration has\n+        // (likely) been finished", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 910}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMjcxMg==", "bodyText": "Ha, the answer to something I already noticed. I left some comments in other parts of the code as well.\nSince they apparently only concern changes due to reformatting, doing something about them can be considered optional (use your own judgement).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497522712", "createdAt": "2020-09-30T13:46:51Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-oslp/web-device-simulator/src/main/java/org/opensmartgridplatform/webdevicesimulator/service/OslpChannelHandler.java", "diffHunk": "@@ -1200,8 +1117,14 @@ private void handleSetEventNotificationsRequest(final Device device, final SetEv\n     private void handleUpdateFirmwareRequest(final Device device, final UpdateFirmwareRequest request) {\n         LOGGER.debug(\"handle UpdateFirmwareRequest for device: {}, with serialized size of {}\",\n                 device.getDeviceIdentification(), request.getSerializedSize());\n-        // For now, do nothing, perhaps store firmware version, so that it can\n-        // be displayed ???\n+\n+        this.sendDelayedDeviceRegistration(device);\n+\n+        // Send a firmware activation event after the device registration has\n+        // (likely) been finished\n+        final Oslp.Event event = Oslp.Event.FIRMWARE_EVENTS_ACTIVATING;\n+        final String description = \"A new firmware is activated\";\n+        this.sendEventWithCustomDelay(device, event, description, 7000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5MjE3MA=="}, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 913}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyNjcxMg==", "bodyText": "If there is information in the DTO that is needed (and not already available in the message metadata through the queues), it would be a reason to keep it.\nWe have other messages going through the layers without a Serializable message object, but only the message type and metadata.\nIt looks like the device type is included here. Is that something of interest that needs to be transferred as it was known where the DTO is created, to where it ends up?\nIf not, it may be better to drop this class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#discussion_r497526712", "createdAt": "2020-09-30T13:51:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/osgp-dto/src/main/java/org/opensmartgridplatform/dto/valueobjects/ConfirmDeviceRegistrationDataDto.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright 2015 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.dto.valueobjects;\n+\n+import java.io.Serializable;\n+\n+public class ConfirmDeviceRegistrationDataDto implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY5Mjk3NQ=="}, "originalCommit": {"oid": "33d0f5ccd9052fbd5c71c635cbd1238fa52d51a9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d1ee9b311350d0b214d3de3487c6259ea014be", "author": {"user": {"login": "kevinsmeets", "name": "Kevin Smeets"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b9d1ee9b311350d0b214d3de3487c6259ea014be", "committedDate": "2020-09-30T21:16:10Z", "message": "FLEX-5492 ~ Processes review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMDgwNjcz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/431#pullrequestreview-500080673", "createdAt": "2020-10-01T07:38:04Z", "commit": {"oid": "b9d1ee9b311350d0b214d3de3487c6259ea014be"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3632, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}