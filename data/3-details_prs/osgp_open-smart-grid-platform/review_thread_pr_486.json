{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjM2MzA2", "number": 486, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoxMzowNVrOE0rjfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyODoyMVrOE0yOJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjc1MDA3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/resources/logback.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoxMzowNVrOHsiRGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoxMzowNVrOHsiRGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2MDgyNQ==", "bodyText": "will remove this", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516460825", "createdAt": "2020-11-03T07:13:05Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/resources/logback.xml", "diffHunk": "@@ -37,4 +37,6 @@\n     <!--<appender-ref ref=\"DB\"/>-->\n   </root>\n \n+  <logger name=\"org.springframework.ws.server.MessageTracing\" level=\"TRACE\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjc1Nzg0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/resources/logback.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoxNjozNVrOHsiVcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyMzoxOFrOHskBYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2MTkzOA==", "bodyText": "Is dit bewust gedaan?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516461938", "createdAt": "2020-11-03T07:16:35Z", "author": {"login": "kroesctrl"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/resources/logback.xml", "diffHunk": "@@ -37,4 +37,6 @@\n     <!--<appender-ref ref=\"DB\"/>-->\n   </root>\n \n+  <logger name=\"org.springframework.ws.server.MessageTracing\" level=\"TRACE\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4OTU2OA==", "bodyText": "ja die moet nog weg, net als die er boven; dit zorgt ervoor dat de SOAP messages gelogd worden door Spring", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516489568", "createdAt": "2020-11-03T08:23:18Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/resources/logback.xml", "diffHunk": "@@ -37,4 +37,6 @@\n     <!--<appender-ref ref=\"DB\"/>-->\n   </root>\n \n+  <logger name=\"org.springframework.ws.server.MessageTracing\" level=\"TRACE\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2MTkzOA=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjc2Njc5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzoyMDoyMlrOHsiaUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODowMDoyNFrOHsjW-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2MzE4Ng==", "bodyText": "Bij beide formats zijn er 6 argumenten en in het format staan er 4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516463186", "createdAt": "2020-11-03T07:20:22Z", "author": {"login": "kroesctrl"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return String.format(\"Event[startTime, endTime=%s, duration=%s, category=%s, type=%s%s]\", this.startTime,\n+                    this.timestamp, this.duration, this.eventLogCategory.name(),\n+                    this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n+                    this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        } else {\n+            return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n+                    this.eventLogCategory.name(),\n+                    this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n+                    this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3ODcxMw==", "bodyText": "Het zijn er beide 5 volgens mij", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516478713", "createdAt": "2020-11-03T08:00:24Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return String.format(\"Event[startTime, endTime=%s, duration=%s, category=%s, type=%s%s]\", this.startTime,\n+                    this.timestamp, this.duration, this.eventLogCategory.name(),\n+                    this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n+                    this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        } else {\n+            return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n+                    this.eventLogCategory.name(),\n+                    this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n+                    this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2MzE4Ng=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjgwMDU3OnYy", "diffSide": "RIGHT", "path": "osgp/shared/osgp-dto/src/main/java/org/opensmartgridplatform/dto/valueobjects/smartmetering/EventDto.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzozNToxMFrOHsit_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzozNToxMFrOHsit_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ2ODIyMA==", "bodyText": "Lombok FTW", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516468220", "createdAt": "2020-11-03T07:35:10Z", "author": {"login": "jandik"}, "path": "osgp/shared/osgp-dto/src/main/java/org/opensmartgridplatform/dto/valueobjects/smartmetering/EventDto.java", "diffHunk": "@@ -10,40 +10,39 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjgzOTc1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/EventsConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MDoyOVrOHsjFSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1NzowN1rOHsrlLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NDE4Ng==", "bodyText": "why not make one constructor and let the startTime and Duration be null? In that case you can skip the IF statement", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516474186", "createdAt": "2020-11-03T07:50:29Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/EventsConverter.java", "diffHunk": "@@ -34,7 +39,12 @@ public EventDto convertFrom(final Event source, final Type<EventDto> destination\n             return null;\n         }\n \n-        return new EventDto(source.getTimestamp(), source.getEventCode(), source.getEventCounter(),\n-                source.getEventLogCategory().name());\n+        if (source.getEventLogCategory() == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return new EventDto(source.getTimestamp(), source.getEventCode(), source.getEventLogCategory().name(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3OTE0NA==", "bodyText": "Dat is niet zo netjes", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516479144", "createdAt": "2020-11-03T08:01:16Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/EventsConverter.java", "diffHunk": "@@ -34,7 +39,12 @@ public EventDto convertFrom(final Event source, final Type<EventDto> destination\n             return null;\n         }\n \n-        return new EventDto(source.getTimestamp(), source.getEventCode(), source.getEventCounter(),\n-                source.getEventLogCategory().name());\n+        if (source.getEventLogCategory() == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return new EventDto(source.getTimestamp(), source.getEventCode(), source.getEventLogCategory().name(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NDE4Ng=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxMzQyMw==", "bodyText": "done it", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516613423", "createdAt": "2020-11-03T11:57:07Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-adapter-domain-smartmetering/src/main/java/org/opensmartgridplatform/adapter/domain/smartmetering/application/mapping/customconverters/EventsConverter.java", "diffHunk": "@@ -34,7 +39,12 @@ public EventDto convertFrom(final Event source, final Type<EventDto> destination\n             return null;\n         }\n \n-        return new EventDto(source.getTimestamp(), source.getEventCode(), source.getEventCounter(),\n-                source.getEventLogCategory().name());\n+        if (source.getEventLogCategory() == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return new EventDto(source.getTimestamp(), source.getEventCode(), source.getEventLogCategory().name(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NDE4Ng=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg0NTIzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MjoyMVrOHsjIhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODowMzoyOVrOHsjcnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTAxMg==", "bodyText": "if the source would already be an XmlGregorianCalender field you would not need this conversion", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516475012", "createdAt": "2020-11-03T07:52:21Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "diffHunk": "@@ -47,6 +47,11 @@\n             event.setTimestamp(timestamp);\n             event.setEventCounter(source.getEventCounter());\n             event.setEventLogCategory(EventLogCategory.fromValue(source.getEventLogCategory().name()));\n+            event.setEventDuration(source.getDuration());\n+            if (source.getStartTime() != null) {\n+                event.setStartTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4MDE1Nw==", "bodyText": "The conversion is necessary, also see the existing timestamp.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516480157", "createdAt": "2020-11-03T08:03:29Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "diffHunk": "@@ -47,6 +47,11 @@\n             event.setTimestamp(timestamp);\n             event.setEventCounter(source.getEventCounter());\n             event.setEventLogCategory(EventLogCategory.fromValue(source.getEventLogCategory().name()));\n+            event.setEventDuration(source.getDuration());\n+            if (source.getStartTime() != null) {\n+                event.setStartTime(DatatypeFactory.newInstance().newXMLGregorianCalendar(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTAxMg=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg0NjQzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1Mjo1M1rOHsjJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1Mjo1M1rOHsjJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTE5Nw==", "bodyText": "use one constructor with possible null values.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516475197", "createdAt": "2020-11-03T07:52:53Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "diffHunk": "@@ -68,6 +73,13 @@ public Event convertFrom(final org.opensmartgridplatform.adapter.ws.schema.smart\n         final org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventLogCategory eventLogCategory =\n                 org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventLogCategory.fromValue(\n                 source.getEventLogCategory().value());\n-        return new Event(timestamp, eventCode, source.getEventCounter(), eventLogCategory);\n+\n+        if (eventLogCategory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg1MDkwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1NDoyMVrOHsjL4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODowNTozNVrOHsjgng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTg3NA==", "bodyText": "this is very ugly. as stated earlier you can just make the power_failure items optional,", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516475874", "createdAt": "2020-11-03T07:54:21Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ4MTE4Mg==", "bodyText": "I totally agree, but passing null values to a constructor isn't that nice either.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516481182", "createdAt": "2020-11-03T08:05:35Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTg3NA=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg1MjE3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1NDo0MVrOHsjMnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1ODo0OVrOHsromg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjA2MA==", "bodyText": "startTime=%s     ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516476060", "createdAt": "2020-11-03T07:54:41Z", "author": {"login": "harrymiddelburgetall"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return String.format(\"Event[startTime, endTime=%s, duration=%s, category=%s, type=%s%s]\", this.startTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxNDI5OA==", "bodyText": "good one", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516614298", "createdAt": "2020-11-03T11:58:49Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return String.format(\"Event[startTime, endTime=%s, duration=%s, category=%s, type=%s%s]\", this.startTime,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjA2MA=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg1NDcyOnYy", "diffSide": "RIGHT", "path": "osgp/shared/osgp-dto/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1NTozMFrOHsjOGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1NTozMFrOHsjOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NjQ0MA==", "bodyText": "+1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516476440", "createdAt": "2020-11-03T07:55:30Z", "author": {"login": "coendamen"}, "path": "osgp/shared/osgp-dto/pom.xml", "diffHunk": "@@ -42,6 +42,10 @@\n       <groupId>joda-time</groupId>\n       <artifactId>joda-time</artifactId>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg1ODMxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1Njo0MlrOHsjQJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjowMzoxN1rOHsryJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3Njk2NQ==", "bodyText": "Moet er echt 'type=null' in de string worden opgenomen als er geen eventCode is?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516476965", "createdAt": "2020-11-03T07:56:42Z", "author": {"login": "harrymiddelburgetall"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return String.format(\"Event[startTime, endTime=%s, duration=%s, category=%s, type=%s%s]\", this.startTime,\n+                    this.timestamp, this.duration, this.eventLogCategory.name(),\n+                    this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxNjc0MQ==", "bodyText": "It should not be null, but will cause an IllegalArgumentException if it is. I think you want to prevent this, but it is debatable.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516616741", "createdAt": "2020-11-03T12:03:17Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;\n+    }\n+\n+    public Event(final DateTime endTime, final Integer eventCode, final EventLogCategory eventLogCategory,\n+            final DateTime startTime, final Long duration) {\n+        this.timestamp = endTime;\n+        this.eventCode = eventCode;\n+        this.eventCounter = null;\n+        this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n-                this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+        if (eventLogCategory == EventLogCategory.POWER_FAILURE_EVENT_LOG) {\n+            return String.format(\"Event[startTime, endTime=%s, duration=%s, category=%s, type=%s%s]\", this.startTime,\n+                    this.timestamp, this.duration, this.eventLogCategory.name(),\n+                    this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3Njk2NQ=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzI2MDc1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTo0OTo0NFrOHsnElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjowNDowOFrOHsrz2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzOTU0MA==", "bodyText": "Replace this code with this(...)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516539540", "createdAt": "2020-11-03T09:49:44Z", "author": {"login": "jandik"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxNzE3Nw==", "bodyText": "I removed the extra constructor and have agreed to calling the constructor with null-values.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516617177", "createdAt": "2020-11-03T12:04:08Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,53 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n             final EventLogCategory eventLogCategory) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = null;\n+        this.duration = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUzOTU0MA=="}, "originalCommit": {"oid": "8af281c45f05aaf615057c6d0a2ee08166fb1bfa"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzgzMjIwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyNToyNVrOHssf6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyNToyNVrOHssf6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyODQ1OQ==", "bodyText": "you could move this to a separate method and do the call in the constructor call to make the code more compact.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516628459", "createdAt": "2020-11-03T12:25:25Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-adapter-ws-smartmetering/src/main/java/org/opensmartgridplatform/adapter/ws/smartmetering/application/mapping/EventConverter.java", "diffHunk": "@@ -68,6 +73,12 @@ public Event convertFrom(final org.opensmartgridplatform.adapter.ws.schema.smart\n         final org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventLogCategory eventLogCategory =\n                 org.opensmartgridplatform.domain.core.valueobjects.smartmetering.EventLogCategory.fromValue(\n                 source.getEventLogCategory().value());\n-        return new Event(timestamp, eventCode, source.getEventCounter(), eventLogCategory);\n+        DateTime startTime = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzgzNTM4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyNjoxN1rOHssh5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjozNDowMlrOHssyaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyODk2NA==", "bodyText": "for my info, why not just show null in the toString if it is null ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516628964", "createdAt": "2020-11-03T12:26:17Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,37 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n-            final EventLogCategory eventLogCategory) {\n+            final EventLogCategory eventLogCategory, final DateTime startTime, final Long duration) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n+        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s%s%s]\", this.timestamp, this.eventCode,\n                 this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzMzE5Mw==", "bodyText": "I followed the setup actually, eventCounter was already formatted this way.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516633193", "createdAt": "2020-11-03T12:34:02Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-domain-core/src/main/java/org/opensmartgridplatform/domain/core/valueobjects/smartmetering/Event.java", "diffHunk": "@@ -10,32 +10,37 @@\n \n import java.io.Serializable;\n \n+import lombok.Getter;\n import org.joda.time.DateTime;\n \n+@Getter\n public class Event implements Serializable {\n \n-    /**\n-     * Serial Version UID.\n-     */\n     private static final long serialVersionUID = 4482313912422705642L;\n     private final DateTime timestamp;\n     private final Integer eventCode;\n-    private final Integer eventCounter;\n     private final EventLogCategory eventLogCategory;\n+    private final Integer eventCounter;\n+    private final DateTime startTime;\n+    private final Long duration;\n \n     public Event(final DateTime timestamp, final Integer eventCode, final Integer eventCounter,\n-            final EventLogCategory eventLogCategory) {\n+            final EventLogCategory eventLogCategory, final DateTime startTime, final Long duration) {\n         this.timestamp = timestamp;\n         this.eventCode = eventCode;\n         this.eventCounter = eventCounter;\n         this.eventLogCategory = eventLogCategory;\n+        this.startTime = startTime;\n+        this.duration = duration;\n     }\n \n     @Override\n     public String toString() {\n-        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s]\", this.timestamp, this.eventCode,\n+        return String.format(\"Event[time=%s, code=%s, category=%s, type=%s%s%s%s]\", this.timestamp, this.eventCode,\n                 this.eventLogCategory.name(), this.eventCode == null ? null : EventType.getByEventCode(this.eventCode),\n-                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter);\n+                this.eventCounter == null ? \"\" : \", counter=\" + this.eventCounter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyODk2NA=="}, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzgzOTUzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DataObjectToEventListConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyNzoyOFrOHsskaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjozODo1OFrOHss8ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyOTYwOA==", "bodyText": "could be simplified as an event.toString method", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516629608", "createdAt": "2020-11-03T12:27:28Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DataObjectToEventListConverter.java", "diffHunk": "@@ -64,32 +63,68 @@ private EventDto getEvent(final DataObject eventDataObject, final EventLogCatego\n                     \"eventData size should be \" + eventLogCategory.getNumberOfEventElements());\n         }\n \n+        if (eventLogCategory == EventLogCategoryDto.POWER_FAILURE_EVENT_LOG) {\n+            return getPowerFailureEvent(eventData, eventLogCategory);\n+        } else {\n+            return getDefaultEvent(eventData, eventLogCategory);\n+        }\n+    }\n+\n+    private EventDto getDefaultEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n         // extract values from List<DataObject> eventData.\n         final DateTime dateTime = this.extractDateTime(eventData);\n         final Short code = this.extractCode(eventData);\n         final Integer eventCounter = this.extractEventCounter(eventLogCategory, eventData);\n         final String eventLogCategoryName = eventLogCategory.name();\n \n-        LOGGER.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n+        log.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n                 eventLogCategoryName, eventCounter);\n \n         // build a new EventDto with those values.\n-        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName);\n+        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName, null, null);\n     }\n \n-    private DateTime extractDateTime(final List<DataObject> eventData) throws ProtocolAdapterException {\n+    private EventDto getPowerFailureEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n+        final DateTime endTime = this.extractDateTime(eventData);\n+        final Long duration = this.extractEventDuration(eventData);\n+        final String eventLogCategoryName = eventLogCategory.name();\n+        final DateTime startTime = calculatePowerFailureStartTime(endTime, duration);\n+\n+        log.info(\"PowerFailureEvent startTime is {}, endTime is {}, event duration is {} and event category is {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzNTgzNA==", "bodyText": "There is no event and the DTO doesn't have a toString. Are you suggesting to implement one in the DTO and log the toString before returning the object?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516635834", "createdAt": "2020-11-03T12:38:58Z", "author": {"login": "jboon"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DataObjectToEventListConverter.java", "diffHunk": "@@ -64,32 +63,68 @@ private EventDto getEvent(final DataObject eventDataObject, final EventLogCatego\n                     \"eventData size should be \" + eventLogCategory.getNumberOfEventElements());\n         }\n \n+        if (eventLogCategory == EventLogCategoryDto.POWER_FAILURE_EVENT_LOG) {\n+            return getPowerFailureEvent(eventData, eventLogCategory);\n+        } else {\n+            return getDefaultEvent(eventData, eventLogCategory);\n+        }\n+    }\n+\n+    private EventDto getDefaultEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n         // extract values from List<DataObject> eventData.\n         final DateTime dateTime = this.extractDateTime(eventData);\n         final Short code = this.extractCode(eventData);\n         final Integer eventCounter = this.extractEventCounter(eventLogCategory, eventData);\n         final String eventLogCategoryName = eventLogCategory.name();\n \n-        LOGGER.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n+        log.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n                 eventLogCategoryName, eventCounter);\n \n         // build a new EventDto with those values.\n-        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName);\n+        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName, null, null);\n     }\n \n-    private DateTime extractDateTime(final List<DataObject> eventData) throws ProtocolAdapterException {\n+    private EventDto getPowerFailureEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n+        final DateTime endTime = this.extractDateTime(eventData);\n+        final Long duration = this.extractEventDuration(eventData);\n+        final String eventLogCategoryName = eventLogCategory.name();\n+        final DateTime startTime = calculatePowerFailureStartTime(endTime, duration);\n+\n+        log.info(\"PowerFailureEvent startTime is {}, endTime is {}, event duration is {} and event category is {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyOTYwOA=="}, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzg0MjI4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DataObjectToEventListConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyODoyMVrOHssmGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjo0MTozMlrOHstCdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzMDA0Mw==", "bodyText": "possible NPE ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516630043", "createdAt": "2020-11-03T12:28:21Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DataObjectToEventListConverter.java", "diffHunk": "@@ -64,32 +63,68 @@ private EventDto getEvent(final DataObject eventDataObject, final EventLogCatego\n                     \"eventData size should be \" + eventLogCategory.getNumberOfEventElements());\n         }\n \n+        if (eventLogCategory == EventLogCategoryDto.POWER_FAILURE_EVENT_LOG) {\n+            return getPowerFailureEvent(eventData, eventLogCategory);\n+        } else {\n+            return getDefaultEvent(eventData, eventLogCategory);\n+        }\n+    }\n+\n+    private EventDto getDefaultEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n         // extract values from List<DataObject> eventData.\n         final DateTime dateTime = this.extractDateTime(eventData);\n         final Short code = this.extractCode(eventData);\n         final Integer eventCounter = this.extractEventCounter(eventLogCategory, eventData);\n         final String eventLogCategoryName = eventLogCategory.name();\n \n-        LOGGER.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n+        log.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n                 eventLogCategoryName, eventCounter);\n \n         // build a new EventDto with those values.\n-        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName);\n+        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName, null, null);\n     }\n \n-    private DateTime extractDateTime(final List<DataObject> eventData) throws ProtocolAdapterException {\n+    private EventDto getPowerFailureEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n+        final DateTime endTime = this.extractDateTime(eventData);\n+        final Long duration = this.extractEventDuration(eventData);\n+        final String eventLogCategoryName = eventLogCategory.name();\n+        final DateTime startTime = calculatePowerFailureStartTime(endTime, duration);\n+\n+        log.info(\"PowerFailureEvent startTime is {}, endTime is {}, event duration is {} and event category is {}\",\n+                startTime,\n+                endTime, duration, eventLogCategoryName);\n \n+        return new EventDto(endTime, 1, null, eventLogCategoryName, startTime, duration);\n+    }\n+\n+    private DateTime extractDateTime(final List<DataObject> eventData) throws ProtocolAdapterException {\n         final DateTime dateTime = this.dlmsHelper.convertDataObjectToDateTime(eventData.get(0)).asDateTime();\n+\n         if (dateTime == null) {\n             throw new ProtocolAdapterException(\"eventData time is null/unspecified\");\n         }\n+\n         return dateTime;\n     }\n \n-    private Short extractCode(final List<DataObject> eventData) throws ProtocolAdapterException {\n+    private Long extractEventDuration(List<DataObject> eventData)\n+            throws ProtocolAdapterException {\n+        if (!eventData.get(1).isNumber()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzNzMwMg==", "bodyText": "In case of PowerFailureLog there are alway 2 elements. The same is true for al events, minimal of 2.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/486#discussion_r516637302", "createdAt": "2020-11-03T12:41:32Z", "author": {"login": "jboon"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/mapping/DataObjectToEventListConverter.java", "diffHunk": "@@ -64,32 +63,68 @@ private EventDto getEvent(final DataObject eventDataObject, final EventLogCatego\n                     \"eventData size should be \" + eventLogCategory.getNumberOfEventElements());\n         }\n \n+        if (eventLogCategory == EventLogCategoryDto.POWER_FAILURE_EVENT_LOG) {\n+            return getPowerFailureEvent(eventData, eventLogCategory);\n+        } else {\n+            return getDefaultEvent(eventData, eventLogCategory);\n+        }\n+    }\n+\n+    private EventDto getDefaultEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n         // extract values from List<DataObject> eventData.\n         final DateTime dateTime = this.extractDateTime(eventData);\n         final Short code = this.extractCode(eventData);\n         final Integer eventCounter = this.extractEventCounter(eventLogCategory, eventData);\n         final String eventLogCategoryName = eventLogCategory.name();\n \n-        LOGGER.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n+        log.info(\"Event time is {}, event code is {}, event category is {} and event counter is {}\", dateTime, code,\n                 eventLogCategoryName, eventCounter);\n \n         // build a new EventDto with those values.\n-        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName);\n+        return new EventDto(dateTime, code.intValue(), eventCounter, eventLogCategoryName, null, null);\n     }\n \n-    private DateTime extractDateTime(final List<DataObject> eventData) throws ProtocolAdapterException {\n+    private EventDto getPowerFailureEvent(List<DataObject> eventData, final EventLogCategoryDto eventLogCategory)\n+            throws ProtocolAdapterException {\n+        final DateTime endTime = this.extractDateTime(eventData);\n+        final Long duration = this.extractEventDuration(eventData);\n+        final String eventLogCategoryName = eventLogCategory.name();\n+        final DateTime startTime = calculatePowerFailureStartTime(endTime, duration);\n+\n+        log.info(\"PowerFailureEvent startTime is {}, endTime is {}, event duration is {} and event category is {}\",\n+                startTime,\n+                endTime, duration, eventLogCategoryName);\n \n+        return new EventDto(endTime, 1, null, eventLogCategoryName, startTime, duration);\n+    }\n+\n+    private DateTime extractDateTime(final List<DataObject> eventData) throws ProtocolAdapterException {\n         final DateTime dateTime = this.dlmsHelper.convertDataObjectToDateTime(eventData.get(0)).asDateTime();\n+\n         if (dateTime == null) {\n             throw new ProtocolAdapterException(\"eventData time is null/unspecified\");\n         }\n+\n         return dateTime;\n     }\n \n-    private Short extractCode(final List<DataObject> eventData) throws ProtocolAdapterException {\n+    private Long extractEventDuration(List<DataObject> eventData)\n+            throws ProtocolAdapterException {\n+        if (!eventData.get(1).isNumber()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzMDA0Mw=="}, "originalCommit": {"oid": "b0c90b30ec0737c32b07d1fd764ce1c41e6d7881"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3566, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}