{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTMzNjMz", "number": 419, "title": "FLEX-5453 Prevent error getting firmware version with multiple pending firmware updates", "bodyText": "Returns a list of SsldPendingFirmwareUpdates searching by device\nidentification and deals with multiple values being returned.", "createdAt": "2020-09-16T17:21:42Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419", "merged": true, "mergeCommit": {"oid": "9f5e5228aa3e1381bfacab39a9a2ef7e08ee5cec"}, "closed": true, "closedAt": "2020-09-21T11:49:20Z", "author": {"login": "bvdzwet"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJfoRgAH2gAyNDg4MTMzNjMzOmMwYjYxZmRjMzE5Y2MwMzg3MGZmNGIwZTVkMjQ3YzM4NmNmOTRlYzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdK_sFdgFqTQ5MjQwNDU1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c0b61fdc319cc03870ff4b0e5d247c386cf94ec2", "author": {"user": {"login": "bvdzwet", "name": "Bart van der Zwet"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c0b61fdc319cc03870ff4b0e5d247c386cf94ec2", "committedDate": "2020-09-16T17:13:36Z", "message": "FLEX-5453 ~ Deals with multiple SSLD pending firmware updates\n\nReturns a list of SsldPendingFirmwareUpdates searching by device\nidentification and deals with multiple values being returned."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1", "author": {"user": {"login": "bvdzwet", "name": "Bart van der Zwet"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5c64180a6f6e35b9411c49c42e8598406cf5d0e1", "committedDate": "2020-09-17T15:13:45Z", "message": "FLEX-5453 ~ Adds unit test for handling the lists of pending updates\n\nAdds unit tests for the code that worked with a single\nSsldPendingFirmwareUpdate for a given device identification, that has\nbeen changed to deal with lists of pending updates instead."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMzAxNTQ1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#pullrequestreview-491301545", "createdAt": "2020-09-18T09:30:32Z", "commit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTozMDozMlrOHUFZeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNDoyN1rOHUG4bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMjAxMA==", "bodyText": "I assume this method needs a @Test annotation?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490822010", "createdAt": "2020-09-18T09:30:32Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -177,4 +209,184 @@ public void testTryToAddFirmwareVersionToHistoryWhenFileIsNotAvailable() throws\n         verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n     }\n \n+    @Test\n+    void handlesZeroSsldPendingFirmwareUpdatesDoingNothing() {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        verifyNoInteractions(this.osgpCoreRequestMessageSender);\n+    }\n+\n+    @Test\n+    void handlesOneSsldPendingFirmwareUpdateRetrievingFirmwareVersion() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUid = \"correlation-uid-pending-firmware-update\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(1L, new Date(),\n+                deviceIdentification, correlationUid);\n+        final Organisation organisation = new Organisation(ssldPendingFirmwareUpdate.getOrganisationIdentification(),\n+                \"Organisation\", \"ORG\", PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(ssldPendingFirmwareUpdate));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(ssldPendingFirmwareUpdate);\n+\n+        /*\n+         * Verify the firmware version request is made for the device with the\n+         * SsldPendingFirmwareUpdate and that it uses the correlation UID from\n+         * SsldPendingFirmwareUpdate, as this is important for the way the\n+         * firmware version response will be treated later-on in a more complete\n+         * firmware update scenario than the fragment seen here in this unit\n+         * test.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUid);\n+    }\n+\n+    @Test\n+    void handlesMultipleSsldPendingFirmwareUpdatesWithoutFailure() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUidMostRecentPendingFirmwareUpdate = \"correlation-uid-most-recent\";\n+        final long mostRecentCreationMillis = System.currentTimeMillis();\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate1 = this.anSsldPendingFirmwareUpdate(134562345L,\n+                new Date(mostRecentCreationMillis - 3_000_000_000L), deviceIdentification, \"correlation-uid-1\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate2 = this.anSsldPendingFirmwareUpdate(227587L,\n+                new Date(mostRecentCreationMillis - 604_800_000L), deviceIdentification, \"correlation-uid-2\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate3 = this.anSsldPendingFirmwareUpdate(308943152L,\n+                new Date(mostRecentCreationMillis - 123L), deviceIdentification, \"correlation-uid-3\");\n+        final SsldPendingFirmwareUpdate mostRecentPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(4459483L,\n+                new Date(mostRecentCreationMillis), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+        final Organisation organisation = new Organisation(\n+                mostRecentPendingFirmwareUpdate.getOrganisationIdentification(), \"Organisation\", \"ORG\",\n+                PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Arrays.asList(olderPendingFirmwareUpdate1, olderPendingFirmwareUpdate2,\n+                        mostRecentPendingFirmwareUpdate, olderPendingFirmwareUpdate3));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        /*\n+         * Verify the older pending firmware updates are deleted. This appears\n+         * to be a reasonable way to deal with multiple records being present.\n+         * The most recent pending update should not be deleted at this point,\n+         * as it is important for the way the firmware version response will be\n+         * treated later-on in a more complete firmware update scenario than the\n+         * fragment seen here in this unit test.\n+         *\n+         * The check is here to confirm the code works as it was meant to be\n+         * implemented. Not so much as a definitive specification as how it\n+         * should work.\n+         */\n+        final ArgumentCaptor<SsldPendingFirmwareUpdate> pendingUpdateCaptor = ArgumentCaptor\n+                .forClass(SsldPendingFirmwareUpdate.class);\n+        verify(this.ssldPendingFirmwareUpdateRepository, atLeastOnce()).delete(pendingUpdateCaptor.capture());\n+        final List<SsldPendingFirmwareUpdate> deletedPendingUpdates = pendingUpdateCaptor.getAllValues();\n+        assertThat(deletedPendingUpdates).containsExactlyInAnyOrder(olderPendingFirmwareUpdate1,\n+                olderPendingFirmwareUpdate2, olderPendingFirmwareUpdate3);\n+\n+        /*\n+         * Check that a get firmware version message is sent for the most recent\n+         * pending firmware update.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+    }\n+\n+    private void assertFirmwareVersionRequested(final String organisationIdentification,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final ArgumentCaptor<RequestMessage> requestMessageCaptor = ArgumentCaptor.forClass(RequestMessage.class);\n+        verify(this.osgpCoreRequestMessageSender).sendWithDelay(requestMessageCaptor.capture(),\n+                eq(MessageType.GET_FIRMWARE_VERSION.name()), anyInt(), any(), any());\n+\n+        final RequestMessage actualRequestMessage = requestMessageCaptor.getValue();\n+        assertThat(actualRequestMessage.getCorrelationUid()).isEqualTo(correlationUid);\n+        assertThat(actualRequestMessage.getDeviceIdentification()).isEqualTo(deviceIdentification);\n+        assertThat(actualRequestMessage.getOrganisationIdentification()).isEqualTo(organisationIdentification);\n+    }\n+\n+    private SsldPendingFirmwareUpdate anSsldPendingFirmwareUpdate(final Long id, final Date creationTime,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final FirmwareModuleType firmwareModuleType = FirmwareModuleType.FUNCTIONAL;\n+        final String firmwareVersion = \"test-version\";\n+        final String organisationIdentification = \"test-org\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(deviceIdentification,\n+                firmwareModuleType, firmwareVersion, organisationIdentification, correlationUid);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"id\", id, Long.class);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"creationTime\", creationTime, Date.class);\n+        return ssldPendingFirmwareUpdate;\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfThereAreNoPendingUpdates() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMjA3NA==", "bodyText": "I assume this method needs a @Test annotation?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490822074", "createdAt": "2020-09-18T09:30:39Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -177,4 +209,184 @@ public void testTryToAddFirmwareVersionToHistoryWhenFileIsNotAvailable() throws\n         verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n     }\n \n+    @Test\n+    void handlesZeroSsldPendingFirmwareUpdatesDoingNothing() {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        verifyNoInteractions(this.osgpCoreRequestMessageSender);\n+    }\n+\n+    @Test\n+    void handlesOneSsldPendingFirmwareUpdateRetrievingFirmwareVersion() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUid = \"correlation-uid-pending-firmware-update\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(1L, new Date(),\n+                deviceIdentification, correlationUid);\n+        final Organisation organisation = new Organisation(ssldPendingFirmwareUpdate.getOrganisationIdentification(),\n+                \"Organisation\", \"ORG\", PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(ssldPendingFirmwareUpdate));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(ssldPendingFirmwareUpdate);\n+\n+        /*\n+         * Verify the firmware version request is made for the device with the\n+         * SsldPendingFirmwareUpdate and that it uses the correlation UID from\n+         * SsldPendingFirmwareUpdate, as this is important for the way the\n+         * firmware version response will be treated later-on in a more complete\n+         * firmware update scenario than the fragment seen here in this unit\n+         * test.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUid);\n+    }\n+\n+    @Test\n+    void handlesMultipleSsldPendingFirmwareUpdatesWithoutFailure() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUidMostRecentPendingFirmwareUpdate = \"correlation-uid-most-recent\";\n+        final long mostRecentCreationMillis = System.currentTimeMillis();\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate1 = this.anSsldPendingFirmwareUpdate(134562345L,\n+                new Date(mostRecentCreationMillis - 3_000_000_000L), deviceIdentification, \"correlation-uid-1\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate2 = this.anSsldPendingFirmwareUpdate(227587L,\n+                new Date(mostRecentCreationMillis - 604_800_000L), deviceIdentification, \"correlation-uid-2\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate3 = this.anSsldPendingFirmwareUpdate(308943152L,\n+                new Date(mostRecentCreationMillis - 123L), deviceIdentification, \"correlation-uid-3\");\n+        final SsldPendingFirmwareUpdate mostRecentPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(4459483L,\n+                new Date(mostRecentCreationMillis), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+        final Organisation organisation = new Organisation(\n+                mostRecentPendingFirmwareUpdate.getOrganisationIdentification(), \"Organisation\", \"ORG\",\n+                PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Arrays.asList(olderPendingFirmwareUpdate1, olderPendingFirmwareUpdate2,\n+                        mostRecentPendingFirmwareUpdate, olderPendingFirmwareUpdate3));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        /*\n+         * Verify the older pending firmware updates are deleted. This appears\n+         * to be a reasonable way to deal with multiple records being present.\n+         * The most recent pending update should not be deleted at this point,\n+         * as it is important for the way the firmware version response will be\n+         * treated later-on in a more complete firmware update scenario than the\n+         * fragment seen here in this unit test.\n+         *\n+         * The check is here to confirm the code works as it was meant to be\n+         * implemented. Not so much as a definitive specification as how it\n+         * should work.\n+         */\n+        final ArgumentCaptor<SsldPendingFirmwareUpdate> pendingUpdateCaptor = ArgumentCaptor\n+                .forClass(SsldPendingFirmwareUpdate.class);\n+        verify(this.ssldPendingFirmwareUpdateRepository, atLeastOnce()).delete(pendingUpdateCaptor.capture());\n+        final List<SsldPendingFirmwareUpdate> deletedPendingUpdates = pendingUpdateCaptor.getAllValues();\n+        assertThat(deletedPendingUpdates).containsExactlyInAnyOrder(olderPendingFirmwareUpdate1,\n+                olderPendingFirmwareUpdate2, olderPendingFirmwareUpdate3);\n+\n+        /*\n+         * Check that a get firmware version message is sent for the most recent\n+         * pending firmware update.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+    }\n+\n+    private void assertFirmwareVersionRequested(final String organisationIdentification,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final ArgumentCaptor<RequestMessage> requestMessageCaptor = ArgumentCaptor.forClass(RequestMessage.class);\n+        verify(this.osgpCoreRequestMessageSender).sendWithDelay(requestMessageCaptor.capture(),\n+                eq(MessageType.GET_FIRMWARE_VERSION.name()), anyInt(), any(), any());\n+\n+        final RequestMessage actualRequestMessage = requestMessageCaptor.getValue();\n+        assertThat(actualRequestMessage.getCorrelationUid()).isEqualTo(correlationUid);\n+        assertThat(actualRequestMessage.getDeviceIdentification()).isEqualTo(deviceIdentification);\n+        assertThat(actualRequestMessage.getOrganisationIdentification()).isEqualTo(organisationIdentification);\n+    }\n+\n+    private SsldPendingFirmwareUpdate anSsldPendingFirmwareUpdate(final Long id, final Date creationTime,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final FirmwareModuleType firmwareModuleType = FirmwareModuleType.FUNCTIONAL;\n+        final String firmwareVersion = \"test-version\";\n+        final String organisationIdentification = \"test-org\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(deviceIdentification,\n+                firmwareModuleType, firmwareVersion, organisationIdentification, correlationUid);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"id\", id, Long.class);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"creationTime\", creationTime, Date.class);\n+        return ssldPendingFirmwareUpdate;\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfThereAreNoPendingUpdates() {\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid-no-pending-updates\";\n+        final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        final List<FirmwareVersion> firmwareVersions = Collections\n+                .singletonList(new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3));\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfPendingUpdatesAreForDifferentCorrelationUids() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMjE3MA==", "bodyText": "I assume this method needs a @Test annotation?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490822170", "createdAt": "2020-09-18T09:30:51Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -177,4 +209,184 @@ public void testTryToAddFirmwareVersionToHistoryWhenFileIsNotAvailable() throws\n         verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n     }\n \n+    @Test\n+    void handlesZeroSsldPendingFirmwareUpdatesDoingNothing() {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        verifyNoInteractions(this.osgpCoreRequestMessageSender);\n+    }\n+\n+    @Test\n+    void handlesOneSsldPendingFirmwareUpdateRetrievingFirmwareVersion() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUid = \"correlation-uid-pending-firmware-update\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(1L, new Date(),\n+                deviceIdentification, correlationUid);\n+        final Organisation organisation = new Organisation(ssldPendingFirmwareUpdate.getOrganisationIdentification(),\n+                \"Organisation\", \"ORG\", PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(ssldPendingFirmwareUpdate));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(ssldPendingFirmwareUpdate);\n+\n+        /*\n+         * Verify the firmware version request is made for the device with the\n+         * SsldPendingFirmwareUpdate and that it uses the correlation UID from\n+         * SsldPendingFirmwareUpdate, as this is important for the way the\n+         * firmware version response will be treated later-on in a more complete\n+         * firmware update scenario than the fragment seen here in this unit\n+         * test.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUid);\n+    }\n+\n+    @Test\n+    void handlesMultipleSsldPendingFirmwareUpdatesWithoutFailure() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUidMostRecentPendingFirmwareUpdate = \"correlation-uid-most-recent\";\n+        final long mostRecentCreationMillis = System.currentTimeMillis();\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate1 = this.anSsldPendingFirmwareUpdate(134562345L,\n+                new Date(mostRecentCreationMillis - 3_000_000_000L), deviceIdentification, \"correlation-uid-1\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate2 = this.anSsldPendingFirmwareUpdate(227587L,\n+                new Date(mostRecentCreationMillis - 604_800_000L), deviceIdentification, \"correlation-uid-2\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate3 = this.anSsldPendingFirmwareUpdate(308943152L,\n+                new Date(mostRecentCreationMillis - 123L), deviceIdentification, \"correlation-uid-3\");\n+        final SsldPendingFirmwareUpdate mostRecentPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(4459483L,\n+                new Date(mostRecentCreationMillis), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+        final Organisation organisation = new Organisation(\n+                mostRecentPendingFirmwareUpdate.getOrganisationIdentification(), \"Organisation\", \"ORG\",\n+                PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Arrays.asList(olderPendingFirmwareUpdate1, olderPendingFirmwareUpdate2,\n+                        mostRecentPendingFirmwareUpdate, olderPendingFirmwareUpdate3));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        /*\n+         * Verify the older pending firmware updates are deleted. This appears\n+         * to be a reasonable way to deal with multiple records being present.\n+         * The most recent pending update should not be deleted at this point,\n+         * as it is important for the way the firmware version response will be\n+         * treated later-on in a more complete firmware update scenario than the\n+         * fragment seen here in this unit test.\n+         *\n+         * The check is here to confirm the code works as it was meant to be\n+         * implemented. Not so much as a definitive specification as how it\n+         * should work.\n+         */\n+        final ArgumentCaptor<SsldPendingFirmwareUpdate> pendingUpdateCaptor = ArgumentCaptor\n+                .forClass(SsldPendingFirmwareUpdate.class);\n+        verify(this.ssldPendingFirmwareUpdateRepository, atLeastOnce()).delete(pendingUpdateCaptor.capture());\n+        final List<SsldPendingFirmwareUpdate> deletedPendingUpdates = pendingUpdateCaptor.getAllValues();\n+        assertThat(deletedPendingUpdates).containsExactlyInAnyOrder(olderPendingFirmwareUpdate1,\n+                olderPendingFirmwareUpdate2, olderPendingFirmwareUpdate3);\n+\n+        /*\n+         * Check that a get firmware version message is sent for the most recent\n+         * pending firmware update.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+    }\n+\n+    private void assertFirmwareVersionRequested(final String organisationIdentification,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final ArgumentCaptor<RequestMessage> requestMessageCaptor = ArgumentCaptor.forClass(RequestMessage.class);\n+        verify(this.osgpCoreRequestMessageSender).sendWithDelay(requestMessageCaptor.capture(),\n+                eq(MessageType.GET_FIRMWARE_VERSION.name()), anyInt(), any(), any());\n+\n+        final RequestMessage actualRequestMessage = requestMessageCaptor.getValue();\n+        assertThat(actualRequestMessage.getCorrelationUid()).isEqualTo(correlationUid);\n+        assertThat(actualRequestMessage.getDeviceIdentification()).isEqualTo(deviceIdentification);\n+        assertThat(actualRequestMessage.getOrganisationIdentification()).isEqualTo(organisationIdentification);\n+    }\n+\n+    private SsldPendingFirmwareUpdate anSsldPendingFirmwareUpdate(final Long id, final Date creationTime,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final FirmwareModuleType firmwareModuleType = FirmwareModuleType.FUNCTIONAL;\n+        final String firmwareVersion = \"test-version\";\n+        final String organisationIdentification = \"test-org\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(deviceIdentification,\n+                firmwareModuleType, firmwareVersion, organisationIdentification, correlationUid);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"id\", id, Long.class);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"creationTime\", creationTime, Date.class);\n+        return ssldPendingFirmwareUpdate;\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfThereAreNoPendingUpdates() {\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid-no-pending-updates\";\n+        final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        final List<FirmwareVersion> firmwareVersions = Collections\n+                .singletonList(new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3));\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfPendingUpdatesAreForDifferentCorrelationUids() {\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid-not-with-pending-updates\";\n+        final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        final List<FirmwareVersion> firmwareVersions = Arrays.asList(\n+                new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_2),\n+                new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_1));\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(this.anSsldPendingFirmwareUpdate(4579L, new Date(),\n+                        deviceIdentification, \"some-other-correlation-uid\")));\n+\n+        assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchingCorrelationUid() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 292}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNDU0MQ==", "bodyText": "As discussed this morning, I'm wondering if we might introduce new issues by using the most recent pending firmware update record and removing the others (in case of multiple pending update records).\nPerhaps a slightly better approach could be to use a new correlation uid and to delete pending update records after retrieving the firmware version?\nAs you mentioned, it would probably be even better to have some status field in the device_firmware_file table and keep track of the latest versions in the device_firmware_module table, but this along with a broader analysis should be investigated in a new issue...\nFor now we could probably leave this as is, as it seems to fix the error.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490834541", "createdAt": "2020-09-18T09:51:04Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -153,27 +155,69 @@ private static String getFirmwareFilename(final String firmwareUrl) {\n \n     public void handleSsldPendingFirmwareUpdate(final String deviceIdentification) {\n \n-        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.ssldPendingFirmwareUpdateRepository\n+        final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = this.ssldPendingFirmwareUpdateRepository\n                 .findByDeviceIdentification(deviceIdentification);\n \n-        if (ssldPendingFirmwareUpdate != null) {\n-            final String organisationIdentification = ssldPendingFirmwareUpdate.getOrganisationIdentification();\n-            final String correlationUid = ssldPendingFirmwareUpdate.getCorrelationUid();\n+        if (CollectionUtils.isEmpty(ssldPendingFirmwareUpdates)) {\n+            return;\n+        }\n+        /*\n+         * A pending firmware update record was stored for this device earlier.\n+         * This means this method is probably called following a firmware\n+         * update. Retrieve the firmware version from the device to have the\n+         * current version that is installed available.\n+         *\n+         * If multiple pending update records exist, it is not really clear what\n+         * to do. The following approach assumes the most recently created one\n+         * is relevant, and other pending records are out-dated.\n+         */\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgzNjQ2MA==", "bodyText": "This method seems to be doing multiple things (hence needing a long method name). Would it make the code cleaner if this method is refactored by splitting this up into 2 methods on for retrieving the most recent and one for deleting outdated?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490836460", "createdAt": "2020-09-18T09:54:45Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -153,27 +155,69 @@ private static String getFirmwareFilename(final String firmwareUrl) {\n \n     public void handleSsldPendingFirmwareUpdate(final String deviceIdentification) {\n \n-        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.ssldPendingFirmwareUpdateRepository\n+        final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = this.ssldPendingFirmwareUpdateRepository\n                 .findByDeviceIdentification(deviceIdentification);\n \n-        if (ssldPendingFirmwareUpdate != null) {\n-            final String organisationIdentification = ssldPendingFirmwareUpdate.getOrganisationIdentification();\n-            final String correlationUid = ssldPendingFirmwareUpdate.getCorrelationUid();\n+        if (CollectionUtils.isEmpty(ssldPendingFirmwareUpdates)) {\n+            return;\n+        }\n+        /*\n+         * A pending firmware update record was stored for this device earlier.\n+         * This means this method is probably called following a firmware\n+         * update. Retrieve the firmware version from the device to have the\n+         * current version that is installed available.\n+         *\n+         * If multiple pending update records exist, it is not really clear what\n+         * to do. The following approach assumes the most recently created one\n+         * is relevant, and other pending records are out-dated.\n+         */\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this\n+                .getMostRecentDeletingOutdatedPendingFirmwareUpdates(ssldPendingFirmwareUpdates);\n+\n+        final String organisationIdentification = ssldPendingFirmwareUpdate.getOrganisationIdentification();\n+        final String correlationUid = ssldPendingFirmwareUpdate.getCorrelationUid();\n+\n+        LOGGER.info(\n+                \"Handling SSLD pending firmware update for device identification: {}, organisation identification: {} and correlation UID: {}.\",\n+                deviceIdentification, organisationIdentification, correlationUid);\n \n-            LOGGER.info(\n-                    \"Handling SSLD pending firmware update for device identification: {}, organisation identification: {} and correlation UID: {}.\",\n-                    deviceIdentification, organisationIdentification, correlationUid);\n-\n-            try {\n-                final int messagePriority = MessagePriorityEnum.DEFAULT.getPriority();\n-                this.getFirmwareVersion(organisationIdentification, deviceIdentification, correlationUid,\n-                        DeviceFunction.GET_FIRMWARE_VERSION.name(), messagePriority, this.getFirmwareVersionDelay);\n-            } catch (final FunctionalException e) {\n-                LOGGER.error(\"Caught exception when calling get firmware version\", e);\n-            }\n+        try {\n+            final int messagePriority = MessagePriorityEnum.DEFAULT.getPriority();\n+            this.getFirmwareVersion(organisationIdentification, deviceIdentification, correlationUid,\n+                    DeviceFunction.GET_FIRMWARE_VERSION.name(), messagePriority, this.getFirmwareVersionDelay);\n+        } catch (final FunctionalException e) {\n+            LOGGER.error(\"Caught exception when calling get firmware version\", e);\n         }\n     }\n \n+    private SsldPendingFirmwareUpdate getMostRecentDeletingOutdatedPendingFirmwareUpdates(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NDgyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();\n          \n          \n            \n                    // act\n          \n          \n            \n                    boolean hasPendingFirmwareUpdate = this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions);\n          \n          \n            \n            \n          \n          \n            \n                    // assert\n          \n          \n            \n                    assertThat(hasPendingFirmwareUpdate).isFalse();", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490844828", "createdAt": "2020-09-18T10:11:25Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -177,4 +209,184 @@ public void testTryToAddFirmwareVersionToHistoryWhenFileIsNotAvailable() throws\n         verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n     }\n \n+    @Test\n+    void handlesZeroSsldPendingFirmwareUpdatesDoingNothing() {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        verifyNoInteractions(this.osgpCoreRequestMessageSender);\n+    }\n+\n+    @Test\n+    void handlesOneSsldPendingFirmwareUpdateRetrievingFirmwareVersion() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUid = \"correlation-uid-pending-firmware-update\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(1L, new Date(),\n+                deviceIdentification, correlationUid);\n+        final Organisation organisation = new Organisation(ssldPendingFirmwareUpdate.getOrganisationIdentification(),\n+                \"Organisation\", \"ORG\", PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(ssldPendingFirmwareUpdate));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(ssldPendingFirmwareUpdate);\n+\n+        /*\n+         * Verify the firmware version request is made for the device with the\n+         * SsldPendingFirmwareUpdate and that it uses the correlation UID from\n+         * SsldPendingFirmwareUpdate, as this is important for the way the\n+         * firmware version response will be treated later-on in a more complete\n+         * firmware update scenario than the fragment seen here in this unit\n+         * test.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUid);\n+    }\n+\n+    @Test\n+    void handlesMultipleSsldPendingFirmwareUpdatesWithoutFailure() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUidMostRecentPendingFirmwareUpdate = \"correlation-uid-most-recent\";\n+        final long mostRecentCreationMillis = System.currentTimeMillis();\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate1 = this.anSsldPendingFirmwareUpdate(134562345L,\n+                new Date(mostRecentCreationMillis - 3_000_000_000L), deviceIdentification, \"correlation-uid-1\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate2 = this.anSsldPendingFirmwareUpdate(227587L,\n+                new Date(mostRecentCreationMillis - 604_800_000L), deviceIdentification, \"correlation-uid-2\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate3 = this.anSsldPendingFirmwareUpdate(308943152L,\n+                new Date(mostRecentCreationMillis - 123L), deviceIdentification, \"correlation-uid-3\");\n+        final SsldPendingFirmwareUpdate mostRecentPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(4459483L,\n+                new Date(mostRecentCreationMillis), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+        final Organisation organisation = new Organisation(\n+                mostRecentPendingFirmwareUpdate.getOrganisationIdentification(), \"Organisation\", \"ORG\",\n+                PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Arrays.asList(olderPendingFirmwareUpdate1, olderPendingFirmwareUpdate2,\n+                        mostRecentPendingFirmwareUpdate, olderPendingFirmwareUpdate3));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        /*\n+         * Verify the older pending firmware updates are deleted. This appears\n+         * to be a reasonable way to deal with multiple records being present.\n+         * The most recent pending update should not be deleted at this point,\n+         * as it is important for the way the firmware version response will be\n+         * treated later-on in a more complete firmware update scenario than the\n+         * fragment seen here in this unit test.\n+         *\n+         * The check is here to confirm the code works as it was meant to be\n+         * implemented. Not so much as a definitive specification as how it\n+         * should work.\n+         */\n+        final ArgumentCaptor<SsldPendingFirmwareUpdate> pendingUpdateCaptor = ArgumentCaptor\n+                .forClass(SsldPendingFirmwareUpdate.class);\n+        verify(this.ssldPendingFirmwareUpdateRepository, atLeastOnce()).delete(pendingUpdateCaptor.capture());\n+        final List<SsldPendingFirmwareUpdate> deletedPendingUpdates = pendingUpdateCaptor.getAllValues();\n+        assertThat(deletedPendingUpdates).containsExactlyInAnyOrder(olderPendingFirmwareUpdate1,\n+                olderPendingFirmwareUpdate2, olderPendingFirmwareUpdate3);\n+\n+        /*\n+         * Check that a get firmware version message is sent for the most recent\n+         * pending firmware update.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+    }\n+\n+    private void assertFirmwareVersionRequested(final String organisationIdentification,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final ArgumentCaptor<RequestMessage> requestMessageCaptor = ArgumentCaptor.forClass(RequestMessage.class);\n+        verify(this.osgpCoreRequestMessageSender).sendWithDelay(requestMessageCaptor.capture(),\n+                eq(MessageType.GET_FIRMWARE_VERSION.name()), anyInt(), any(), any());\n+\n+        final RequestMessage actualRequestMessage = requestMessageCaptor.getValue();\n+        assertThat(actualRequestMessage.getCorrelationUid()).isEqualTo(correlationUid);\n+        assertThat(actualRequestMessage.getDeviceIdentification()).isEqualTo(deviceIdentification);\n+        assertThat(actualRequestMessage.getOrganisationIdentification()).isEqualTo(organisationIdentification);\n+    }\n+\n+    private SsldPendingFirmwareUpdate anSsldPendingFirmwareUpdate(final Long id, final Date creationTime,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final FirmwareModuleType firmwareModuleType = FirmwareModuleType.FUNCTIONAL;\n+        final String firmwareVersion = \"test-version\";\n+        final String organisationIdentification = \"test-org\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(deviceIdentification,\n+                firmwareModuleType, firmwareVersion, organisationIdentification, correlationUid);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"id\", id, Long.class);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"creationTime\", creationTime, Date.class);\n+        return ssldPendingFirmwareUpdate;\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfThereAreNoPendingUpdates() {\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid-no-pending-updates\";\n+        final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        final List<FirmwareVersion> firmwareVersions = Collections\n+                .singletonList(new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3));\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NjMxNw==", "bodyText": "In my opinion the suggestion would lead to a cleaner separation of steps in arrange-act-assert approach.\n(Same applies to other tests below)\nAlthough this is probably a matter of opinion...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r490846317", "createdAt": "2020-09-18T10:14:27Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -177,4 +209,184 @@ public void testTryToAddFirmwareVersionToHistoryWhenFileIsNotAvailable() throws\n         verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n     }\n \n+    @Test\n+    void handlesZeroSsldPendingFirmwareUpdatesDoingNothing() {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        verifyNoInteractions(this.osgpCoreRequestMessageSender);\n+    }\n+\n+    @Test\n+    void handlesOneSsldPendingFirmwareUpdateRetrievingFirmwareVersion() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUid = \"correlation-uid-pending-firmware-update\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(1L, new Date(),\n+                deviceIdentification, correlationUid);\n+        final Organisation organisation = new Organisation(ssldPendingFirmwareUpdate.getOrganisationIdentification(),\n+                \"Organisation\", \"ORG\", PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(ssldPendingFirmwareUpdate));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(ssldPendingFirmwareUpdate);\n+\n+        /*\n+         * Verify the firmware version request is made for the device with the\n+         * SsldPendingFirmwareUpdate and that it uses the correlation UID from\n+         * SsldPendingFirmwareUpdate, as this is important for the way the\n+         * firmware version response will be treated later-on in a more complete\n+         * firmware update scenario than the fragment seen here in this unit\n+         * test.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUid);\n+    }\n+\n+    @Test\n+    void handlesMultipleSsldPendingFirmwareUpdatesWithoutFailure() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUidMostRecentPendingFirmwareUpdate = \"correlation-uid-most-recent\";\n+        final long mostRecentCreationMillis = System.currentTimeMillis();\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate1 = this.anSsldPendingFirmwareUpdate(134562345L,\n+                new Date(mostRecentCreationMillis - 3_000_000_000L), deviceIdentification, \"correlation-uid-1\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate2 = this.anSsldPendingFirmwareUpdate(227587L,\n+                new Date(mostRecentCreationMillis - 604_800_000L), deviceIdentification, \"correlation-uid-2\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate3 = this.anSsldPendingFirmwareUpdate(308943152L,\n+                new Date(mostRecentCreationMillis - 123L), deviceIdentification, \"correlation-uid-3\");\n+        final SsldPendingFirmwareUpdate mostRecentPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(4459483L,\n+                new Date(mostRecentCreationMillis), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+        final Organisation organisation = new Organisation(\n+                mostRecentPendingFirmwareUpdate.getOrganisationIdentification(), \"Organisation\", \"ORG\",\n+                PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Arrays.asList(olderPendingFirmwareUpdate1, olderPendingFirmwareUpdate2,\n+                        mostRecentPendingFirmwareUpdate, olderPendingFirmwareUpdate3));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        /*\n+         * Verify the older pending firmware updates are deleted. This appears\n+         * to be a reasonable way to deal with multiple records being present.\n+         * The most recent pending update should not be deleted at this point,\n+         * as it is important for the way the firmware version response will be\n+         * treated later-on in a more complete firmware update scenario than the\n+         * fragment seen here in this unit test.\n+         *\n+         * The check is here to confirm the code works as it was meant to be\n+         * implemented. Not so much as a definitive specification as how it\n+         * should work.\n+         */\n+        final ArgumentCaptor<SsldPendingFirmwareUpdate> pendingUpdateCaptor = ArgumentCaptor\n+                .forClass(SsldPendingFirmwareUpdate.class);\n+        verify(this.ssldPendingFirmwareUpdateRepository, atLeastOnce()).delete(pendingUpdateCaptor.capture());\n+        final List<SsldPendingFirmwareUpdate> deletedPendingUpdates = pendingUpdateCaptor.getAllValues();\n+        assertThat(deletedPendingUpdates).containsExactlyInAnyOrder(olderPendingFirmwareUpdate1,\n+                olderPendingFirmwareUpdate2, olderPendingFirmwareUpdate3);\n+\n+        /*\n+         * Check that a get firmware version message is sent for the most recent\n+         * pending firmware update.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+    }\n+\n+    private void assertFirmwareVersionRequested(final String organisationIdentification,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final ArgumentCaptor<RequestMessage> requestMessageCaptor = ArgumentCaptor.forClass(RequestMessage.class);\n+        verify(this.osgpCoreRequestMessageSender).sendWithDelay(requestMessageCaptor.capture(),\n+                eq(MessageType.GET_FIRMWARE_VERSION.name()), anyInt(), any(), any());\n+\n+        final RequestMessage actualRequestMessage = requestMessageCaptor.getValue();\n+        assertThat(actualRequestMessage.getCorrelationUid()).isEqualTo(correlationUid);\n+        assertThat(actualRequestMessage.getDeviceIdentification()).isEqualTo(deviceIdentification);\n+        assertThat(actualRequestMessage.getOrganisationIdentification()).isEqualTo(organisationIdentification);\n+    }\n+\n+    private SsldPendingFirmwareUpdate anSsldPendingFirmwareUpdate(final Long id, final Date creationTime,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final FirmwareModuleType firmwareModuleType = FirmwareModuleType.FUNCTIONAL;\n+        final String firmwareVersion = \"test-version\";\n+        final String organisationIdentification = \"test-org\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(deviceIdentification,\n+                firmwareModuleType, firmwareVersion, organisationIdentification, correlationUid);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"id\", id, Long.class);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"creationTime\", creationTime, Date.class);\n+        return ssldPendingFirmwareUpdate;\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfThereAreNoPendingUpdates() {\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid-no-pending-updates\";\n+        final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        final List<FirmwareVersion> firmwareVersions = Collections\n+                .singletonList(new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3));\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NDgyOA=="}, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 268}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33153843b9fea81f6c5316718921ff7846ae515f", "author": {"user": {"login": "bvdzwet", "name": "Bart van der Zwet"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/33153843b9fea81f6c5316718921ff7846ae515f", "committedDate": "2020-09-18T11:53:25Z", "message": "FLEX-5453 ~ Adds test annotations and splits method in two\n\nSome of the unit test methods supposed to test functionality missed the\nTest annotation, which has been added to have them executed.\n\nThe method getMostRecentDeletingOutdatedPendingFirmwareUpdates has a\nlong name, revealing that it does multiple things. This is refactored\ninto two more specialized methods\n(getMostRecentSsldPendingFirmwareUpdate and\ndeleteOutdatedSsldPendingFirmareUpdates).\n\nThe id of the SsldPendingFirmareUpdate is a Long object value. Therefore\nthe use of \"!=\" has been replaced by \"!Objects.equals\"."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNTg0ODQz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#pullrequestreview-491584843", "createdAt": "2020-09-18T15:48:46Z", "commit": {"oid": "33153843b9fea81f6c5316718921ff7846ae515f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo0ODo0NlrOHUSnzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo1NzoxM1rOHUS7cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAzODY3MA==", "bodyText": "Fix typo (missing \"w\" in firmware):\ndeleteOutdatedSsldPendingFirmareUpdates -> deleteOutdatedSsldPendingFirmwareUpdates", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r491038670", "createdAt": "2020-09-18T15:48:46Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -190,32 +201,23 @@ public void handleSsldPendingFirmwareUpdate(final String deviceIdentification) {\n         }\n     }\n \n-    private SsldPendingFirmwareUpdate getMostRecentDeletingOutdatedPendingFirmwareUpdates(\n+    private Optional<SsldPendingFirmwareUpdate> getMostRecentSsldPendingFirmwareUpdate(\n             final List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates) {\n \n-        if (CollectionUtils.isEmpty(ssldPendingFirmwareUpdates)) {\n-            throw new IllegalArgumentException(\"ssldPendingFirmwareUpdates must not be empty\");\n-        }\n-        if (ssldPendingFirmwareUpdates.size() == 1) {\n-            return ssldPendingFirmwareUpdates.get(0);\n-        }\n-\n-        LOGGER.warn(\"Found multiple pending firmware update records for SSLD: {}\", ssldPendingFirmwareUpdates);\n-\n-        final SsldPendingFirmwareUpdate mostRecentSsldPendingFirmwareUpdate = ssldPendingFirmwareUpdates.stream()\n+        return ssldPendingFirmwareUpdates.stream()\n                 .max(Comparator.comparing(SsldPendingFirmwareUpdate::getCreationTime)\n-                        .thenComparing(Comparator.comparing(SsldPendingFirmwareUpdate::getId)))\n-                .orElseThrow(() -> new AssertionError(\"No most recent pending firmware update from a non-empty list\"));\n+                        .thenComparing(Comparator.comparing(SsldPendingFirmwareUpdate::getId)));\n+    }\n \n-        ssldPendingFirmwareUpdates.forEach(pendingUpdate -> {\n-            if (mostRecentSsldPendingFirmwareUpdate.getId() != pendingUpdate.getId()) {\n-                LOGGER.warn(\"Deleting pending firmware update assumed outdated: {}\", pendingUpdate);\n-                this.ssldPendingFirmwareUpdateRepository.delete(pendingUpdate);\n-            }\n-        });\n+    private void deleteOutdatedSsldPendingFirmareUpdates(final List<SsldPendingFirmwareUpdate> updatesToDelete,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33153843b9fea81f6c5316718921ff7846ae515f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0MzY5Nw==", "bodyText": "As discussed, the suggestion was not as much about adding the comments, but more about splitting up the act-assert steps that are currently on one line to have a cleaner separation between the arrange-act-assert steps.\nStill matter of opinion, no deal-breaker...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#discussion_r491043697", "createdAt": "2020-09-18T15:57:13Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -177,4 +209,184 @@ public void testTryToAddFirmwareVersionToHistoryWhenFileIsNotAvailable() throws\n         verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n     }\n \n+    @Test\n+    void handlesZeroSsldPendingFirmwareUpdatesDoingNothing() {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository).findByDeviceIdentification(deviceIdentification);\n+        verifyNoMoreInteractions(this.ssldPendingFirmwareUpdateRepository);\n+        verifyNoInteractions(this.osgpCoreRequestMessageSender);\n+    }\n+\n+    @Test\n+    void handlesOneSsldPendingFirmwareUpdateRetrievingFirmwareVersion() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUid = \"correlation-uid-pending-firmware-update\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(1L, new Date(),\n+                deviceIdentification, correlationUid);\n+        final Organisation organisation = new Organisation(ssldPendingFirmwareUpdate.getOrganisationIdentification(),\n+                \"Organisation\", \"ORG\", PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.singletonList(ssldPendingFirmwareUpdate));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(ssldPendingFirmwareUpdate);\n+\n+        /*\n+         * Verify the firmware version request is made for the device with the\n+         * SsldPendingFirmwareUpdate and that it uses the correlation UID from\n+         * SsldPendingFirmwareUpdate, as this is important for the way the\n+         * firmware version response will be treated later-on in a more complete\n+         * firmware update scenario than the fragment seen here in this unit\n+         * test.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUid);\n+    }\n+\n+    @Test\n+    void handlesMultipleSsldPendingFirmwareUpdatesWithoutFailure() throws Exception {\n+        final String deviceIdentification = \"Test-SSLD-1\";\n+        final Ssld ssld = new Ssld(deviceIdentification);\n+        final String correlationUidMostRecentPendingFirmwareUpdate = \"correlation-uid-most-recent\";\n+        final long mostRecentCreationMillis = System.currentTimeMillis();\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate1 = this.anSsldPendingFirmwareUpdate(134562345L,\n+                new Date(mostRecentCreationMillis - 3_000_000_000L), deviceIdentification, \"correlation-uid-1\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate2 = this.anSsldPendingFirmwareUpdate(227587L,\n+                new Date(mostRecentCreationMillis - 604_800_000L), deviceIdentification, \"correlation-uid-2\");\n+        final SsldPendingFirmwareUpdate olderPendingFirmwareUpdate3 = this.anSsldPendingFirmwareUpdate(308943152L,\n+                new Date(mostRecentCreationMillis - 123L), deviceIdentification, \"correlation-uid-3\");\n+        final SsldPendingFirmwareUpdate mostRecentPendingFirmwareUpdate = this.anSsldPendingFirmwareUpdate(4459483L,\n+                new Date(mostRecentCreationMillis), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+        final Organisation organisation = new Organisation(\n+                mostRecentPendingFirmwareUpdate.getOrganisationIdentification(), \"Organisation\", \"ORG\",\n+                PlatformFunctionGroup.USER);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Arrays.asList(olderPendingFirmwareUpdate1, olderPendingFirmwareUpdate2,\n+                        mostRecentPendingFirmwareUpdate, olderPendingFirmwareUpdate3));\n+        when(this.deviceDomainService.searchActiveDevice(eq(deviceIdentification), any(ComponentType.class)))\n+                .thenReturn(ssld);\n+        when(this.organisationDomainService.searchOrganisation(organisation.getOrganisationIdentification()))\n+                .thenReturn(organisation);\n+\n+        this.firmwareManagementService.handleSsldPendingFirmwareUpdate(deviceIdentification);\n+\n+        /*\n+         * Verify the older pending firmware updates are deleted. This appears\n+         * to be a reasonable way to deal with multiple records being present.\n+         * The most recent pending update should not be deleted at this point,\n+         * as it is important for the way the firmware version response will be\n+         * treated later-on in a more complete firmware update scenario than the\n+         * fragment seen here in this unit test.\n+         *\n+         * The check is here to confirm the code works as it was meant to be\n+         * implemented. Not so much as a definitive specification as how it\n+         * should work.\n+         */\n+        final ArgumentCaptor<SsldPendingFirmwareUpdate> pendingUpdateCaptor = ArgumentCaptor\n+                .forClass(SsldPendingFirmwareUpdate.class);\n+        verify(this.ssldPendingFirmwareUpdateRepository, atLeastOnce()).delete(pendingUpdateCaptor.capture());\n+        final List<SsldPendingFirmwareUpdate> deletedPendingUpdates = pendingUpdateCaptor.getAllValues();\n+        assertThat(deletedPendingUpdates).containsExactlyInAnyOrder(olderPendingFirmwareUpdate1,\n+                olderPendingFirmwareUpdate2, olderPendingFirmwareUpdate3);\n+\n+        /*\n+         * Check that a get firmware version message is sent for the most recent\n+         * pending firmware update.\n+         */\n+        this.assertFirmwareVersionRequested(organisation.getOrganisationIdentification(), deviceIdentification,\n+                correlationUidMostRecentPendingFirmwareUpdate);\n+    }\n+\n+    private void assertFirmwareVersionRequested(final String organisationIdentification,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final ArgumentCaptor<RequestMessage> requestMessageCaptor = ArgumentCaptor.forClass(RequestMessage.class);\n+        verify(this.osgpCoreRequestMessageSender).sendWithDelay(requestMessageCaptor.capture(),\n+                eq(MessageType.GET_FIRMWARE_VERSION.name()), anyInt(), any(), any());\n+\n+        final RequestMessage actualRequestMessage = requestMessageCaptor.getValue();\n+        assertThat(actualRequestMessage.getCorrelationUid()).isEqualTo(correlationUid);\n+        assertThat(actualRequestMessage.getDeviceIdentification()).isEqualTo(deviceIdentification);\n+        assertThat(actualRequestMessage.getOrganisationIdentification()).isEqualTo(organisationIdentification);\n+    }\n+\n+    private SsldPendingFirmwareUpdate anSsldPendingFirmwareUpdate(final Long id, final Date creationTime,\n+            final String deviceIdentification, final String correlationUid) {\n+\n+        final FirmwareModuleType firmwareModuleType = FirmwareModuleType.FUNCTIONAL;\n+        final String firmwareVersion = \"test-version\";\n+        final String organisationIdentification = \"test-org\";\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(deviceIdentification,\n+                firmwareModuleType, firmwareVersion, organisationIdentification, correlationUid);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"id\", id, Long.class);\n+        ReflectionTestUtils.setField(ssldPendingFirmwareUpdate, \"creationTime\", creationTime, Date.class);\n+        return ssldPendingFirmwareUpdate;\n+    }\n+\n+    void checkSsldPendingFirmwareUpdateReturnsFalseIfThereAreNoPendingUpdates() {\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid-no-pending-updates\";\n+        final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        final List<FirmwareVersion> firmwareVersions = Collections\n+                .singletonList(new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3));\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Collections.emptyList());\n+\n+        assertThat(this.firmwareManagementService.checkSsldPendingFirmwareUpdate(ids, firmwareVersions)).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NDgyOA=="}, "originalCommit": {"oid": "5c64180a6f6e35b9411c49c42e8598406cf5d0e1"}, "originalPosition": 268}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50985829ccd54e25037c2935cd912b1f8a4e0f76", "author": {"user": {"login": "bvdzwet", "name": "Bart van der Zwet"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/50985829ccd54e25037c2935cd912b1f8a4e0f76", "committedDate": "2020-09-18T16:19:55Z", "message": "FLEX-5453 ~ Fixes spelling mistake and splits act and assert statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247d6e0baa7472fbbfbd4d66912f1e36c694817d", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/247d6e0baa7472fbbfbd4d66912f1e36c694817d", "committedDate": "2020-09-21T09:06:51Z", "message": "FLEX-5453 ~ Splits act-assert line in two lines in two methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNDA0NTUy", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/419#pullrequestreview-492404552", "createdAt": "2020-09-21T09:08:39Z", "commit": {"oid": "247d6e0baa7472fbbfbd4d66912f1e36c694817d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3823, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}