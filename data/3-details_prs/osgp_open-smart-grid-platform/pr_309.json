{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMzU3NDI0", "number": 309, "title": "Feature/flex 5174 kafka tests", "bodyText": "", "createdAt": "2020-05-05T07:46:44Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309", "merged": true, "mergeCommit": {"oid": "5bc4253a56f59df133ce48b65e1dca3ee83200b6"}, "closed": true, "closedAt": "2020-05-06T20:12:27Z", "author": {"login": "robindenadel"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcePG9JgH2gAyNDEzMzU3NDI0OmI4MTc3NjgzMTQ3MzQ3OTNlYjU3MTFjNzA0NmU3NjU5YzViYTY3NWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcelXeGAFqTQwNjQ0OTI4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b817768314734793eb5711c7046e7659c5ba675a", "author": {"user": {"login": "robindenadel", "name": "Robin den Adel"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b817768314734793eb5711c7046e7659c5ba675a", "committedDate": "2020-05-05T07:39:59Z", "message": "FLEX-5174: Adds a producer test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31", "author": {"user": {"login": "robindenadel", "name": "Robin den Adel"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bb9d29807a3308e84d810cb2e61df932b9491b31", "committedDate": "2020-05-05T07:44:26Z", "message": "FLEX-5174: Adds license header; removes unnecessary call."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTY3NDkx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#pullrequestreview-405567491", "createdAt": "2020-05-05T07:59:35Z", "commit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1OTozNVrOGQeaAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzo1OTozNVrOGQeaAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkyODU3Ng==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r419928576", "createdAt": "2020-05-05T07:59:35Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -11,12 +11,18 @@\n // TODO - Rename class once AVRO message format is known", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzQ2MjA3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#pullrequestreview-405746207", "createdAt": "2020-05-05T12:39:26Z", "commit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjozOToyNlrOGQna5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzoxMzoxM1rOGQouEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3NjI2Mw==", "bodyText": "Shouldn't this be moved to the \"Testing dependencies\"?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420076263", "createdAt": "2020-05-05T12:39:26Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/pom.xml", "diffHunk": "@@ -172,6 +172,10 @@\n       <groupId>org.springframework.kafka</groupId>\n       <artifactId>spring-kafka</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.springframework.kafka</groupId>\n+      <artifactId>spring-kafka-test</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3Nzc5MA==", "bodyText": "I'm always forgetting this injection functionality of Spring. Better then injecting the properties! \ud83d\udc4d", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420077790", "createdAt": "2020-05-05T12:41:58Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -11,12 +11,18 @@\n // TODO - Rename class once AVRO message format is known\n @Service\n public class MeterReadingProducer {\n-    @Autowired\n-    @Qualifier(\"distributionAutomationKafkaTemplate\")\n-    private KafkaTemplate<String, MeterReading> kafkaTemplate;\n+\n+    private final KafkaTemplate<String, MeterReading> kafkaTemplate;\n+\n+    private final DistributionAutomationMapper mapper;\n \n     @Autowired\n-    private DistributionAutomationMapper mapper;\n+    public MeterReadingProducer(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA3OTEzNA==", "bodyText": "Can we throw a runtime exception instead? It will help to end the test right away, instead of proceeding with corrupt data.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420079134", "createdAt": "2020-05-05T12:44:12Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingDeserializer.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+\n+public class MeterReadingDeserializer implements Deserializer<MeterReading> {\n+\n+    @Override\n+    public MeterReading deserialize(final String topic, final byte[] data) {\n+        try {\n+            return MeterReading.fromByteBuffer(ByteBuffer.wrap(data));\n+        } catch (final IOException e) {\n+            e.printStackTrace();\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4MjMxNA==", "bodyText": "What folder is ../kafka-logs/ on my local system or on a test server?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420082314", "createdAt": "2020-05-05T12:49:21Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NTM4Mg==", "bodyText": "Most of these properties don't seem to be used by the code yet.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420085382", "createdAt": "2020-05-05T12:54:25Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/resources/osgp-adapter-kafka-distributionautomation-test.properties", "diffHunk": "@@ -0,0 +1,11 @@\n+# =========================================================\n+# KAFKA CONFIG\n+# =========================================================\n+distributionautomation.kafka.common.properties.prefix=distributionautomation.kafka\n+\n+# Example configuration of multiple servers for use in acceptance or production environments\n+distributionautomation.kafka.bootstrap.servers=localhost:9092\n+\n+distributionautomation.kafka.producer.topic=da_monitoring\n+distributionautomation.kafka.producer.key.serializer=org.apache.kafka.common.serialization.StringSerializer\n+distributionautomation.kafka.producer.value.serializer=org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingSerializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NjQwNg==", "bodyText": "Isn't it possible to leave out the listeners property somehow? It would be nice if the embedded broker could find a free port on its own.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420086406", "createdAt": "2020-05-05T12:56:02Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4ODIyMA==", "bodyText": "Do we need this property, when having \"auto.create.topics.enable=true\"?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420088220", "createdAt": "2020-05-05T12:58:54Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4ODUxMQ==", "bodyText": "Remove this empty line.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420088511", "createdAt": "2020-05-05T12:59:17Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",\n+                \"auto.create.topics.enable=true\" })\n+class MeterReadingProducerTest {\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker embeddedKafka;\n+\n+    @Mock\n+    private DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> template;\n+\n+    private MeterReadingProducer producer;\n+    private MeterReading message;\n+\n+    @BeforeEach\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.message = this.createMessage();\n+        when(this.mapper.map(any(MeasurementReport.class), any(Class.class))).thenReturn(this.message);\n+        this.producer = new MeterReadingProducer(this.template, this.mapper);\n+    }\n+\n+    @Test\n+    void sendTest() {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5MTUzMg==", "bodyText": "Sander uses Arrange / Act / Assert as parts in a test. I think it's a good approach to structure a test.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420091532", "createdAt": "2020-05-05T13:04:08Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",\n+                \"auto.create.topics.enable=true\" })\n+class MeterReadingProducerTest {\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker embeddedKafka;\n+\n+    @Mock\n+    private DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> template;\n+\n+    private MeterReadingProducer producer;\n+    private MeterReading message;\n+\n+    @BeforeEach\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.message = this.createMessage();\n+        when(this.mapper.map(any(MeasurementReport.class), any(Class.class))).thenReturn(this.message);\n+        this.producer = new MeterReadingProducer(this.template, this.mapper);\n+    }\n+\n+    @Test\n+    void sendTest() {\n+\n+        // send a message to the kafka bus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NzU1NA==", "bodyText": "When we receive a message, it is always mapped to the result of createMessage(), regardless of the message sent by the producer. Was this intended by this test?\nWith some more work, we could construct a specific MeasurementReport, which maps to the result of createMessage().", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#discussion_r420097554", "createdAt": "2020-05-05T13:13:13Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducerTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+import static org.springframework.kafka.test.assertj.KafkaConditions.value;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.kafka.da.application.config.KafkaProducerConfig;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.da.avro.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.core.ConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.kafka.test.EmbeddedKafkaBroker;\n+import org.springframework.kafka.test.context.EmbeddedKafka;\n+import org.springframework.kafka.test.utils.KafkaTestUtils;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;\n+\n+@SpringJUnitConfig(KafkaProducerConfig.class)\n+@TestPropertySource(\"classpath:osgp-adapter-kafka-distributionautomation-test.properties\")\n+@ExtendWith(MockitoExtension.class)\n+@EmbeddedKafka(partitions = 1,\n+        topics = { \"${distributionautomation.kafka.producer.topic}\" },\n+        brokerProperties = { \"listeners=PLAINTEXT://localhost:9092\", \"log.dirs=../kafka-logs/\",\n+                \"auto.create.topics.enable=true\" })\n+class MeterReadingProducerTest {\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topic;\n+\n+    @Autowired\n+    private EmbeddedKafkaBroker embeddedKafka;\n+\n+    @Mock\n+    private DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> template;\n+\n+    private MeterReadingProducer producer;\n+    private MeterReading message;\n+\n+    @BeforeEach\n+    @SuppressWarnings(\"unchecked\")\n+    public void setup() {\n+        this.message = this.createMessage();\n+        when(this.mapper.map(any(MeasurementReport.class), any(Class.class))).thenReturn(this.message);\n+        this.producer = new MeterReadingProducer(this.template, this.mapper);\n+    }\n+\n+    @Test\n+    void sendTest() {\n+\n+        // send a message to the kafka bus\n+        this.producer.send(new MeasurementReport.Builder().build());\n+\n+        // consume the message with embeddedKafka\n+        final Map<String, Object> consumerProps = KafkaTestUtils.consumerProps(\"testGroup\", \"true\", this.embeddedKafka);\n+        consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        final ConsumerFactory<String, MeterReading> consumerFactory = new DefaultKafkaConsumerFactory<>(consumerProps,\n+                new StringDeserializer(), new MeterReadingDeserializer());\n+        final Consumer<String, MeterReading> consumer = consumerFactory.createConsumer();\n+        this.embeddedKafka.consumeFromAnEmbeddedTopic(consumer, this.topic);\n+        final ConsumerRecord<String, MeterReading> received = KafkaTestUtils.getSingleRecord(consumer, this.topic);\n+\n+        // check the consumed message\n+        assertThat(received).has(value(this.message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb9d29807a3308e84d810cb2e61df932b9491b31"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4372357940674ebde2dfb701f2aa9f96568fc451", "author": {"user": {"login": "robindenadel", "name": "Robin den Adel"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4372357940674ebde2dfb701f2aa9f96568fc451", "committedDate": "2020-05-05T13:39:17Z", "message": "FLEX-5174: Addresses review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDQ5Mjgy", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/309#pullrequestreview-406449282", "createdAt": "2020-05-06T09:35:56Z", "commit": {"oid": "4372357940674ebde2dfb701f2aa9f96568fc451"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3864, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}