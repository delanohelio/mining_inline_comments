{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MTgwMTk5", "number": 493, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjoyNzo0OFrOE2ETbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDowNDozM1rOE2GUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTI5MDcwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMeasurementType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjoyNzo0OFrOHusKbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo1NDo0NFrOHvikow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMDEwOA==", "bodyText": "Copyright on new files should mention Alliander N.V. instead of Smart Society Services B.V.\nLooking further-on in this pull request it seems this is not a new file, but a renamed one (from LsPeakShavingMeasurementType).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518720108", "createdAt": "2020-11-06T12:27:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMeasurementType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMTU1NQ==", "bodyText": "changed it", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519611555", "createdAt": "2020-11-09T07:54:44Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMeasurementType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMDEwOA=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTMwOTE1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMeasurementType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjozNDowMVrOHusViQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowMjozM1rOHvizpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMjk1Mw==", "bodyText": "The current harmonic enum names end in a part starting with an 'L' where the description starts with an 'I'.\nIs this intentional, or would it be better to make these letters the same?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518722953", "createdAt": "2020-11-06T12:34:01Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMeasurementType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+\n+public enum LowVoltageMeasurementType {\n+    VOLTAGE_L1(0, \"U-L1-E\", UnitSymbol.V),\n+    VOLTAGE_L2(1, \"U-L2-E\", UnitSymbol.V),\n+    VOLTAGE_L3(2, \"U-L3-E\", UnitSymbol.V),\n+    CURRENT_L1(3, \"I-L1\", UnitSymbol.A),\n+    CURRENT_L2(4, \"I-L2\", UnitSymbol.A),\n+    CURRENT_L3(5, \"I-L3\", UnitSymbol.A),\n+    TOTAL_ACTIVE_POWER(6, \"SomP\", UnitSymbol.W, UnitMultiplier.k),\n+    TOTAL_REACTIVE_POWER(7, \"SomQ\", UnitSymbol.VAr, UnitMultiplier.k),\n+    ACTIVE_POWER_L1(8, \"P-L1\", UnitSymbol.W, UnitMultiplier.k),\n+    ACTIVE_POWER_L2(9, \"P-L2\", UnitSymbol.W, UnitMultiplier.k),\n+    ACTIVE_POWER_L3(10, \"P-L3\", UnitSymbol.W, UnitMultiplier.k),\n+    REACTIVE_POWER_L1(11, \"Q-L1\", UnitSymbol.VAr, UnitMultiplier.k),\n+    REACTIVE_POWER_L2(12, \"Q-L2\", UnitSymbol.VAr, UnitMultiplier.k),\n+    REACTIVE_POWER_L3(13, \"Q-L3\", UnitSymbol.VAr, UnitMultiplier.k),\n+    POWER_FACTOR_L1(14, \"PF-L1\", UnitSymbol.none),\n+    POWER_FACTOR_L2(15, \"PF-L2\", UnitSymbol.none),\n+    POWER_FACTOR_L3(16, \"PF-L3\", UnitSymbol.none),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L1(17, \"THDi-L1\", UnitSymbol.PerCent),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L2(18, \"THDi-L2\", UnitSymbol.PerCent),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L3(19, \"THDi-L3\", UnitSymbol.PerCent),\n+    CURRENT_HARMONIC_L1_H3(20, \"I1-H3\", UnitSymbol.A),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNTM5OA==", "bodyText": "replaced L with I", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519615398", "createdAt": "2020-11-09T08:02:33Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMeasurementType.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+\n+public enum LowVoltageMeasurementType {\n+    VOLTAGE_L1(0, \"U-L1-E\", UnitSymbol.V),\n+    VOLTAGE_L2(1, \"U-L2-E\", UnitSymbol.V),\n+    VOLTAGE_L3(2, \"U-L3-E\", UnitSymbol.V),\n+    CURRENT_L1(3, \"I-L1\", UnitSymbol.A),\n+    CURRENT_L2(4, \"I-L2\", UnitSymbol.A),\n+    CURRENT_L3(5, \"I-L3\", UnitSymbol.A),\n+    TOTAL_ACTIVE_POWER(6, \"SomP\", UnitSymbol.W, UnitMultiplier.k),\n+    TOTAL_REACTIVE_POWER(7, \"SomQ\", UnitSymbol.VAr, UnitMultiplier.k),\n+    ACTIVE_POWER_L1(8, \"P-L1\", UnitSymbol.W, UnitMultiplier.k),\n+    ACTIVE_POWER_L2(9, \"P-L2\", UnitSymbol.W, UnitMultiplier.k),\n+    ACTIVE_POWER_L3(10, \"P-L3\", UnitSymbol.W, UnitMultiplier.k),\n+    REACTIVE_POWER_L1(11, \"Q-L1\", UnitSymbol.VAr, UnitMultiplier.k),\n+    REACTIVE_POWER_L2(12, \"Q-L2\", UnitSymbol.VAr, UnitMultiplier.k),\n+    REACTIVE_POWER_L3(13, \"Q-L3\", UnitSymbol.VAr, UnitMultiplier.k),\n+    POWER_FACTOR_L1(14, \"PF-L1\", UnitSymbol.none),\n+    POWER_FACTOR_L2(15, \"PF-L2\", UnitSymbol.none),\n+    POWER_FACTOR_L3(16, \"PF-L3\", UnitSymbol.none),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L1(17, \"THDi-L1\", UnitSymbol.PerCent),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L2(18, \"THDi-L2\", UnitSymbol.PerCent),\n+    CURRENT_TOTAL_HARMONIC_DISTORTION_L3(19, \"THDi-L3\", UnitSymbol.PerCent),\n+    CURRENT_HARMONIC_L1_H3(20, \"I1-H3\", UnitSymbol.A),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyMjk1Mw=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTM0NTE1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMetaMeasurementToAnalogList.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo0NTozM1rOHusrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODowMzozOFrOHvi1lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyODU0NQ==", "bodyText": "Copyright on new files should mention Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518728545", "createdAt": "2020-11-06T12:45:33Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMetaMeasurementToAnalogList.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxNTg5NA==", "bodyText": "file was deleted", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519615894", "createdAt": "2020-11-09T08:03:38Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMetaMeasurementToAnalogList.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcyODU0NQ=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTM2ODUzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMetaMeasurementType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMjo1MzoxN1rOHus50Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyMzowOFrOHvjalQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczMjI0MQ==", "bodyText": "Copyright on new files should mention Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518732241", "createdAt": "2020-11-06T12:53:17Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMetaMeasurementType.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNTM2NQ==", "bodyText": "changed it", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519625365", "createdAt": "2020-11-09T08:23:08Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LowVoltageMetaMeasurementType.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczMjI0MQ=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQxNDQ2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzowNzoyNFrOHutVRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyNDo0MFrOHvjd4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczOTI3MA==", "bodyText": "Would it be nicer to include \"source.getData().length == 0\" in the check for no measurement values, or is it nicer to have this logged as the error with the unexpected number of fields.\nBoth log an error and return null, so it wouldn't make any difference for how the functionality is implemented.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518739270", "createdAt": "2020-11-06T13:07:24Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "diffHunk": "@@ -12,125 +12,68 @@\n import java.util.Arrays;\n import java.util.UUID;\n \n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alliander.data.scadameasurementpublishedevent.BaseVoltage;\n import com.alliander.data.scadameasurementpublishedevent.ConductingEquipment;\n import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n-import com.fasterxml.jackson.annotation.JsonAlias;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+import com.alliander.data.scadameasurementpublishedevent.Voltage;\n \n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n-/**\n- * Class for mapping String containing a simple measurement or ls peak shaving\n- * measurement to ScadaMeasurementPublishedEvent\n- * <p>\n- * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n- * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n- * current_returned_L2; current_returned_L3;\n- * <p>\n- * ls peak shaving measurement: ean_code + the values of\n- * LsPeakShavingMeasurementType separated by semicolons.\n- */\n-public class ScadaMeasurementPublishedEventConverter extends CustomConverter<String, ScadaMeasurementPublishedEvent> {\n+public class ScadaMeasurementPublishedEventConverter\n+        extends CustomConverter<ScadaMeasurementPayload, ScadaMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ScadaMeasurementPublishedEventConverter.class);\n \n-    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private static final float LOW_VOLTAGE_NOMINAL = 0.4f;\n \n     @Override\n-    public ScadaMeasurementPublishedEvent convert(final String source,\n+    public ScadaMeasurementPublishedEvent convert(final ScadaMeasurementPayload source,\n             final Type<? extends ScadaMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.debug(\"Source string: {}\", source);\n-\n-        try {\n-            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads.length == 0 || payloads[0] == null) {\n-                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n-                return null;\n-            }\n-            final Payload payload = payloads[0];\n-\n-            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n-                    Arrays.toString(measurementValues));\n-\n-            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-            } else {\n-                LOGGER.error(\n-                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n-                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n-                return null;\n-            }\n-\n-            final String eanCode = measurementValues[0];\n-            final ConductingEquipment powerSystemResource = new ConductingEquipment(new BaseVoltage(eanCode, null),\n-                    new ArrayList<Name>());\n-            return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n-                    powerSystemResource, payload.createdUtcSeconds * 1000l, eanCode, UUID.randomUUID().toString());\n-        } catch (final JsonMappingException e) {\n-            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+        if (source == null || source.getData() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNjIwOQ==", "bodyText": "included extra check", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519626209", "createdAt": "2020-11-09T08:24:40Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "diffHunk": "@@ -12,125 +12,68 @@\n import java.util.Arrays;\n import java.util.UUID;\n \n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alliander.data.scadameasurementpublishedevent.BaseVoltage;\n import com.alliander.data.scadameasurementpublishedevent.ConductingEquipment;\n import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n-import com.fasterxml.jackson.annotation.JsonAlias;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+import com.alliander.data.scadameasurementpublishedevent.Voltage;\n \n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n-/**\n- * Class for mapping String containing a simple measurement or ls peak shaving\n- * measurement to ScadaMeasurementPublishedEvent\n- * <p>\n- * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n- * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n- * current_returned_L2; current_returned_L3;\n- * <p>\n- * ls peak shaving measurement: ean_code + the values of\n- * LsPeakShavingMeasurementType separated by semicolons.\n- */\n-public class ScadaMeasurementPublishedEventConverter extends CustomConverter<String, ScadaMeasurementPublishedEvent> {\n+public class ScadaMeasurementPublishedEventConverter\n+        extends CustomConverter<ScadaMeasurementPayload, ScadaMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ScadaMeasurementPublishedEventConverter.class);\n \n-    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private static final float LOW_VOLTAGE_NOMINAL = 0.4f;\n \n     @Override\n-    public ScadaMeasurementPublishedEvent convert(final String source,\n+    public ScadaMeasurementPublishedEvent convert(final ScadaMeasurementPayload source,\n             final Type<? extends ScadaMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.debug(\"Source string: {}\", source);\n-\n-        try {\n-            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads.length == 0 || payloads[0] == null) {\n-                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n-                return null;\n-            }\n-            final Payload payload = payloads[0];\n-\n-            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n-                    Arrays.toString(measurementValues));\n-\n-            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-            } else {\n-                LOGGER.error(\n-                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n-                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n-                return null;\n-            }\n-\n-            final String eanCode = measurementValues[0];\n-            final ConductingEquipment powerSystemResource = new ConductingEquipment(new BaseVoltage(eanCode, null),\n-                    new ArrayList<Name>());\n-            return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n-                    powerSystemResource, payload.createdUtcSeconds * 1000l, eanCode, UUID.randomUUID().toString());\n-        } catch (final JsonMappingException e) {\n-            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+        if (source == null || source.getData() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODczOTI3MA=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQyNTQyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxMDo0NlrOHutb-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyNToxMFrOHvje7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0MDk4Nw==", "bodyText": "Maybe it would be nicer to either just state the actual length and saying it is not one of the expected values, or mention the number of elements of both enums explicitly as expected.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518740987", "createdAt": "2020-11-06T13:10:46Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "diffHunk": "@@ -12,125 +12,68 @@\n import java.util.Arrays;\n import java.util.UUID;\n \n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alliander.data.scadameasurementpublishedevent.BaseVoltage;\n import com.alliander.data.scadameasurementpublishedevent.ConductingEquipment;\n import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n-import com.fasterxml.jackson.annotation.JsonAlias;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+import com.alliander.data.scadameasurementpublishedevent.Voltage;\n \n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n-/**\n- * Class for mapping String containing a simple measurement or ls peak shaving\n- * measurement to ScadaMeasurementPublishedEvent\n- * <p>\n- * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n- * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n- * current_returned_L2; current_returned_L3;\n- * <p>\n- * ls peak shaving measurement: ean_code + the values of\n- * LsPeakShavingMeasurementType separated by semicolons.\n- */\n-public class ScadaMeasurementPublishedEventConverter extends CustomConverter<String, ScadaMeasurementPublishedEvent> {\n+public class ScadaMeasurementPublishedEventConverter\n+        extends CustomConverter<ScadaMeasurementPayload, ScadaMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ScadaMeasurementPublishedEventConverter.class);\n \n-    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private static final float LOW_VOLTAGE_NOMINAL = 0.4f;\n \n     @Override\n-    public ScadaMeasurementPublishedEvent convert(final String source,\n+    public ScadaMeasurementPublishedEvent convert(final ScadaMeasurementPayload source,\n             final Type<? extends ScadaMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.debug(\"Source string: {}\", source);\n-\n-        try {\n-            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads.length == 0 || payloads[0] == null) {\n-                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n-                return null;\n-            }\n-            final Payload payload = payloads[0];\n-\n-            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n-                    Arrays.toString(measurementValues));\n-\n-            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-            } else {\n-                LOGGER.error(\n-                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n-                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n-                return null;\n-            }\n-\n-            final String eanCode = measurementValues[0];\n-            final ConductingEquipment powerSystemResource = new ConductingEquipment(new BaseVoltage(eanCode, null),\n-                    new ArrayList<Name>());\n-            return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n-                    powerSystemResource, payload.createdUtcSeconds * 1000l, eanCode, UUID.randomUUID().toString());\n-        } catch (final JsonMappingException e) {\n-            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+        if (source == null || source.getData() == null) {\n+            LOGGER.error(\"The payload is null or has no measurement values\");\n             return null;\n-        } catch (final JsonProcessingException e) {\n-            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n-            return null;\n-        }\n-    }\n-\n-    private static class Payload {\n-\n-        private String gisnr;\n-        private String feeder;\n-        @JsonAlias({ \"D\" })\n-        private String date;\n-        @JsonAlias({ \"uts\" })\n-        private long createdUtcSeconds;\n-        private String[] data;\n-\n-        // Super is needed to map the String to the Payload object by the\n-        // objectmapper.\n-        @SuppressWarnings(\"unused\")\n-        public Payload() {\n-            super();\n         }\n-\n-        public Payload(final String gisnr, final String feeder, final String date, final long createdUtcSeconds,\n-                final String[] data) {\n-            this.gisnr = gisnr;\n-            this.feeder = feeder;\n-            this.date = date;\n-            this.createdUtcSeconds = createdUtcSeconds;\n-            this.data = data;\n-        }\n-\n-        public String getGisnr() {\n-            return this.gisnr;\n+        StringArrayToAnalogList stringArrayToAnalogList = null;\n+\n+        final String[] measurementValues = source.getData();\n+\n+        if (measurementValues.length == LowVoltageMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMeasurementToAnalogList();\n+        } else if (measurementValues.length == LowVoltageMetaMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMetaMeasurementToAnalogList();\n+        } else {\n+            LOGGER.error(\n+                    \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                    LowVoltageMeasurementType.getNumberOfElements(), measurementValues.length, source);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNjQ3OA==", "bodyText": "you already done that :)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519626478", "createdAt": "2020-11-09T08:25:10Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "diffHunk": "@@ -12,125 +12,68 @@\n import java.util.Arrays;\n import java.util.UUID;\n \n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alliander.data.scadameasurementpublishedevent.BaseVoltage;\n import com.alliander.data.scadameasurementpublishedevent.ConductingEquipment;\n import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n-import com.fasterxml.jackson.annotation.JsonAlias;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+import com.alliander.data.scadameasurementpublishedevent.Voltage;\n \n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n-/**\n- * Class for mapping String containing a simple measurement or ls peak shaving\n- * measurement to ScadaMeasurementPublishedEvent\n- * <p>\n- * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n- * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n- * current_returned_L2; current_returned_L3;\n- * <p>\n- * ls peak shaving measurement: ean_code + the values of\n- * LsPeakShavingMeasurementType separated by semicolons.\n- */\n-public class ScadaMeasurementPublishedEventConverter extends CustomConverter<String, ScadaMeasurementPublishedEvent> {\n+public class ScadaMeasurementPublishedEventConverter\n+        extends CustomConverter<ScadaMeasurementPayload, ScadaMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ScadaMeasurementPublishedEventConverter.class);\n \n-    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private static final float LOW_VOLTAGE_NOMINAL = 0.4f;\n \n     @Override\n-    public ScadaMeasurementPublishedEvent convert(final String source,\n+    public ScadaMeasurementPublishedEvent convert(final ScadaMeasurementPayload source,\n             final Type<? extends ScadaMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.debug(\"Source string: {}\", source);\n-\n-        try {\n-            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads.length == 0 || payloads[0] == null) {\n-                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n-                return null;\n-            }\n-            final Payload payload = payloads[0];\n-\n-            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n-                    Arrays.toString(measurementValues));\n-\n-            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-            } else {\n-                LOGGER.error(\n-                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n-                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n-                return null;\n-            }\n-\n-            final String eanCode = measurementValues[0];\n-            final ConductingEquipment powerSystemResource = new ConductingEquipment(new BaseVoltage(eanCode, null),\n-                    new ArrayList<Name>());\n-            return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n-                    powerSystemResource, payload.createdUtcSeconds * 1000l, eanCode, UUID.randomUUID().toString());\n-        } catch (final JsonMappingException e) {\n-            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+        if (source == null || source.getData() == null) {\n+            LOGGER.error(\"The payload is null or has no measurement values\");\n             return null;\n-        } catch (final JsonProcessingException e) {\n-            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n-            return null;\n-        }\n-    }\n-\n-    private static class Payload {\n-\n-        private String gisnr;\n-        private String feeder;\n-        @JsonAlias({ \"D\" })\n-        private String date;\n-        @JsonAlias({ \"uts\" })\n-        private long createdUtcSeconds;\n-        private String[] data;\n-\n-        // Super is needed to map the String to the Payload object by the\n-        // objectmapper.\n-        @SuppressWarnings(\"unused\")\n-        public Payload() {\n-            super();\n         }\n-\n-        public Payload(final String gisnr, final String feeder, final String date, final long createdUtcSeconds,\n-                final String[] data) {\n-            this.gisnr = gisnr;\n-            this.feeder = feeder;\n-            this.date = date;\n-            this.createdUtcSeconds = createdUtcSeconds;\n-            this.data = data;\n-        }\n-\n-        public String getGisnr() {\n-            return this.gisnr;\n+        StringArrayToAnalogList stringArrayToAnalogList = null;\n+\n+        final String[] measurementValues = source.getData();\n+\n+        if (measurementValues.length == LowVoltageMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMeasurementToAnalogList();\n+        } else if (measurementValues.length == LowVoltageMetaMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMetaMeasurementToAnalogList();\n+        } else {\n+            LOGGER.error(\n+                    \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                    LowVoltageMeasurementType.getNumberOfElements(), measurementValues.length, source);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0MDk4Nw=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTQ1NDY5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzoxOToyOVrOHuttlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODoyNjoxOFrOHvjhTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NTQ5Mw==", "bodyText": "To avoid confusion, you could use a capital L to make 1000 a long value as in some fonts 1000l may look like 10001 (or just leave it out, which would work as long as \"source.getCreatedUtcSeconds()\" remains a long and isn't ever changed to an int).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518745493", "createdAt": "2020-11-06T13:19:29Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "diffHunk": "@@ -12,125 +12,68 @@\n import java.util.Arrays;\n import java.util.UUID;\n \n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alliander.data.scadameasurementpublishedevent.BaseVoltage;\n import com.alliander.data.scadameasurementpublishedevent.ConductingEquipment;\n import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n-import com.fasterxml.jackson.annotation.JsonAlias;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+import com.alliander.data.scadameasurementpublishedevent.Voltage;\n \n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n-/**\n- * Class for mapping String containing a simple measurement or ls peak shaving\n- * measurement to ScadaMeasurementPublishedEvent\n- * <p>\n- * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n- * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n- * current_returned_L2; current_returned_L3;\n- * <p>\n- * ls peak shaving measurement: ean_code + the values of\n- * LsPeakShavingMeasurementType separated by semicolons.\n- */\n-public class ScadaMeasurementPublishedEventConverter extends CustomConverter<String, ScadaMeasurementPublishedEvent> {\n+public class ScadaMeasurementPublishedEventConverter\n+        extends CustomConverter<ScadaMeasurementPayload, ScadaMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ScadaMeasurementPublishedEventConverter.class);\n \n-    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private static final float LOW_VOLTAGE_NOMINAL = 0.4f;\n \n     @Override\n-    public ScadaMeasurementPublishedEvent convert(final String source,\n+    public ScadaMeasurementPublishedEvent convert(final ScadaMeasurementPayload source,\n             final Type<? extends ScadaMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.debug(\"Source string: {}\", source);\n-\n-        try {\n-            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads.length == 0 || payloads[0] == null) {\n-                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n-                return null;\n-            }\n-            final Payload payload = payloads[0];\n-\n-            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n-                    Arrays.toString(measurementValues));\n-\n-            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-            } else {\n-                LOGGER.error(\n-                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n-                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n-                return null;\n-            }\n-\n-            final String eanCode = measurementValues[0];\n-            final ConductingEquipment powerSystemResource = new ConductingEquipment(new BaseVoltage(eanCode, null),\n-                    new ArrayList<Name>());\n-            return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n-                    powerSystemResource, payload.createdUtcSeconds * 1000l, eanCode, UUID.randomUUID().toString());\n-        } catch (final JsonMappingException e) {\n-            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+        if (source == null || source.getData() == null) {\n+            LOGGER.error(\"The payload is null or has no measurement values\");\n             return null;\n-        } catch (final JsonProcessingException e) {\n-            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n-            return null;\n-        }\n-    }\n-\n-    private static class Payload {\n-\n-        private String gisnr;\n-        private String feeder;\n-        @JsonAlias({ \"D\" })\n-        private String date;\n-        @JsonAlias({ \"uts\" })\n-        private long createdUtcSeconds;\n-        private String[] data;\n-\n-        // Super is needed to map the String to the Payload object by the\n-        // objectmapper.\n-        @SuppressWarnings(\"unused\")\n-        public Payload() {\n-            super();\n         }\n-\n-        public Payload(final String gisnr, final String feeder, final String date, final long createdUtcSeconds,\n-                final String[] data) {\n-            this.gisnr = gisnr;\n-            this.feeder = feeder;\n-            this.date = date;\n-            this.createdUtcSeconds = createdUtcSeconds;\n-            this.data = data;\n-        }\n-\n-        public String getGisnr() {\n-            return this.gisnr;\n+        StringArrayToAnalogList stringArrayToAnalogList = null;\n+\n+        final String[] measurementValues = source.getData();\n+\n+        if (measurementValues.length == LowVoltageMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMeasurementToAnalogList();\n+        } else if (measurementValues.length == LowVoltageMetaMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMetaMeasurementToAnalogList();\n+        } else {\n+            LOGGER.error(\n+                    \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                    LowVoltageMeasurementType.getNumberOfElements(), measurementValues.length, source);\n+            return null;\n         }\n \n-        public String getFeeder() {\n-            return this.feeder;\n-        }\n+        LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length, Arrays.toString(measurementValues));\n \n-        public String getDate() {\n-            return this.date;\n-        }\n-\n-        public long getCreatedUtcSeconds() {\n-            return this.createdUtcSeconds;\n-        }\n+        return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n+                this.createPowerSystemResource(source), source.getCreatedUtcSeconds() * 1000l,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyNzA4NA==", "bodyText": "you already done that :)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519627084", "createdAt": "2020-11-09T08:26:18Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverter.java", "diffHunk": "@@ -12,125 +12,68 @@\n import java.util.Arrays;\n import java.util.UUID;\n \n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.alliander.data.scadameasurementpublishedevent.BaseVoltage;\n import com.alliander.data.scadameasurementpublishedevent.ConductingEquipment;\n import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n-import com.fasterxml.jackson.annotation.JsonAlias;\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.JsonMappingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.alliander.data.scadameasurementpublishedevent.UnitMultiplier;\n+import com.alliander.data.scadameasurementpublishedevent.UnitSymbol;\n+import com.alliander.data.scadameasurementpublishedevent.Voltage;\n \n import ma.glasnost.orika.CustomConverter;\n import ma.glasnost.orika.MappingContext;\n import ma.glasnost.orika.metadata.Type;\n \n-/**\n- * Class for mapping String containing a simple measurement or ls peak shaving\n- * measurement to ScadaMeasurementPublishedEvent\n- * <p>\n- * simple measurement: ean_code; voltage_L1; voltage_L2; voltage_L3;\n- * current_in_L1; current_in_L2; current_in_L3; current_returned_L1;\n- * current_returned_L2; current_returned_L3;\n- * <p>\n- * ls peak shaving measurement: ean_code + the values of\n- * LsPeakShavingMeasurementType separated by semicolons.\n- */\n-public class ScadaMeasurementPublishedEventConverter extends CustomConverter<String, ScadaMeasurementPublishedEvent> {\n+public class ScadaMeasurementPublishedEventConverter\n+        extends CustomConverter<ScadaMeasurementPayload, ScadaMeasurementPublishedEvent> {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ScadaMeasurementPublishedEventConverter.class);\n \n-    private final ObjectMapper objectMapper = new ObjectMapper();\n+    private static final float LOW_VOLTAGE_NOMINAL = 0.4f;\n \n     @Override\n-    public ScadaMeasurementPublishedEvent convert(final String source,\n+    public ScadaMeasurementPublishedEvent convert(final ScadaMeasurementPayload source,\n             final Type<? extends ScadaMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n-        LOGGER.debug(\"Source string: {}\", source);\n-\n-        try {\n-            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n-            if (payloads.length == 0 || payloads[0] == null) {\n-                LOGGER.error(\"Source does not include the correct data fields. Source {}\", source);\n-                return null;\n-            }\n-            final Payload payload = payloads[0];\n-\n-            final String[] measurementValues = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n-            LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length,\n-                    Arrays.toString(measurementValues));\n-\n-            if (measurementValues.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-            } else {\n-                LOGGER.error(\n-                        \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n-                        LsPeakShavingMeasurementType.getNumberOfElements() + 1, measurementValues.length, source);\n-                return null;\n-            }\n-\n-            final String eanCode = measurementValues[0];\n-            final ConductingEquipment powerSystemResource = new ConductingEquipment(new BaseVoltage(eanCode, null),\n-                    new ArrayList<Name>());\n-            return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n-                    powerSystemResource, payload.createdUtcSeconds * 1000l, eanCode, UUID.randomUUID().toString());\n-        } catch (final JsonMappingException e) {\n-            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+        if (source == null || source.getData() == null) {\n+            LOGGER.error(\"The payload is null or has no measurement values\");\n             return null;\n-        } catch (final JsonProcessingException e) {\n-            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n-            return null;\n-        }\n-    }\n-\n-    private static class Payload {\n-\n-        private String gisnr;\n-        private String feeder;\n-        @JsonAlias({ \"D\" })\n-        private String date;\n-        @JsonAlias({ \"uts\" })\n-        private long createdUtcSeconds;\n-        private String[] data;\n-\n-        // Super is needed to map the String to the Payload object by the\n-        // objectmapper.\n-        @SuppressWarnings(\"unused\")\n-        public Payload() {\n-            super();\n         }\n-\n-        public Payload(final String gisnr, final String feeder, final String date, final long createdUtcSeconds,\n-                final String[] data) {\n-            this.gisnr = gisnr;\n-            this.feeder = feeder;\n-            this.date = date;\n-            this.createdUtcSeconds = createdUtcSeconds;\n-            this.data = data;\n-        }\n-\n-        public String getGisnr() {\n-            return this.gisnr;\n+        StringArrayToAnalogList stringArrayToAnalogList = null;\n+\n+        final String[] measurementValues = source.getData();\n+\n+        if (measurementValues.length == LowVoltageMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMeasurementToAnalogList();\n+        } else if (measurementValues.length == LowVoltageMetaMeasurementType.getNumberOfElements()) {\n+            stringArrayToAnalogList = new LowVoltageMetaMeasurementToAnalogList();\n+        } else {\n+            LOGGER.error(\n+                    \"Measurement values does not have the expected amount of fields. Expecting: {}, actual: {}. Payload: {}.\",\n+                    LowVoltageMeasurementType.getNumberOfElements(), measurementValues.length, source);\n+            return null;\n         }\n \n-        public String getFeeder() {\n-            return this.feeder;\n-        }\n+        LOGGER.debug(\"Values length: {} and values: {}\", measurementValues.length, Arrays.toString(measurementValues));\n \n-        public String getDate() {\n-            return this.date;\n-        }\n-\n-        public long getCreatedUtcSeconds() {\n-            return this.createdUtcSeconds;\n-        }\n+        return new ScadaMeasurementPublishedEvent(stringArrayToAnalogList.convertToAnalogList(measurementValues),\n+                this.createPowerSystemResource(source), source.getCreatedUtcSeconds() * 1000l,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0NTQ5Mw=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTUxNDIwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzozNjoyMFrOHuuRdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozMToyNVrOHvjsiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1NDY3Ng==", "bodyText": "I can't easily see why the mapping to the measurement was changed from mapping to a ScadaMeasurementPayload to mapping to an array of ScadaMeasurementPayload elements, but I'll believe there was a valid reason.\nWhen this array is processed by addLocationData only the first element is used.\nIs there an assumption there will ever be a single element, or are later elements to be discarded?\nIf there should ever be a single element it may be nice to assert that (and at least log an error and possibly even return like with zero elements or a null array). If there may be more elements, but these are intentionally ignored, a comment about this may make this clear for anyone looking into this code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518754676", "createdAt": "2020-11-06T13:36:20Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducer.java", "diffHunk": "@@ -31,32 +36,66 @@\n \n     private final DistributionAutomationMapper mapper;\n \n+    private final LocationConfig locationConfig;\n+\n     @Autowired\n     public ScadaMeasurementPublishedEventProducer(\n             @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, Message> kafkaTemplate,\n-            final DistributionAutomationMapper mapper) {\n+            final DistributionAutomationMapper mapper, final LocationConfig locationConfig) {\n         this.kafkaTemplate = kafkaTemplate;\n         this.mapper = mapper;\n+        this.locationConfig = locationConfig;\n     }\n \n     public void send(final String measurement) {\n \n         LOGGER.info(\"ScadaMeasurementPublishedEventProducer.send is called with measurement {}\", measurement);\n \n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        try {\n+            final ScadaMeasurementPayload[] payloads = objectMapper.readValue(measurement,\n+                    ScadaMeasurementPayload[].class);\n+            if (payloads.length == 0 || payloads[0] == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYyOTk2MQ==", "bodyText": "added a comment and log line", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519629961", "createdAt": "2020-11-09T08:31:25Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducer.java", "diffHunk": "@@ -31,32 +36,66 @@\n \n     private final DistributionAutomationMapper mapper;\n \n+    private final LocationConfig locationConfig;\n+\n     @Autowired\n     public ScadaMeasurementPublishedEventProducer(\n             @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, Message> kafkaTemplate,\n-            final DistributionAutomationMapper mapper) {\n+            final DistributionAutomationMapper mapper, final LocationConfig locationConfig) {\n         this.kafkaTemplate = kafkaTemplate;\n         this.mapper = mapper;\n+        this.locationConfig = locationConfig;\n     }\n \n     public void send(final String measurement) {\n \n         LOGGER.info(\"ScadaMeasurementPublishedEventProducer.send is called with measurement {}\", measurement);\n \n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        try {\n+            final ScadaMeasurementPayload[] payloads = objectMapper.readValue(measurement,\n+                    ScadaMeasurementPayload[].class);\n+            if (payloads.length == 0 || payloads[0] == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1NDY3Ng=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTU0NTc5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo0NDo1OVrOHuulEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozMzowMVrOHvjv6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1OTY5OA==", "bodyText": "Something seems to be special with the value 100 for feeder. It might be nice to extract this into a method with a name that clarifies what is so special about it and/or add a comment to provide some more info.\nIt may be that this is just a random number bigger than any feeder value would be, but then it might be nicer to just determine the int value and possibly change the signature of getBayIdentification to accept a numerical feeder value instead of a String.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518759698", "createdAt": "2020-11-06T13:44:59Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducer.java", "diffHunk": "@@ -31,32 +36,66 @@\n \n     private final DistributionAutomationMapper mapper;\n \n+    private final LocationConfig locationConfig;\n+\n     @Autowired\n     public ScadaMeasurementPublishedEventProducer(\n             @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, Message> kafkaTemplate,\n-            final DistributionAutomationMapper mapper) {\n+            final DistributionAutomationMapper mapper, final LocationConfig locationConfig) {\n         this.kafkaTemplate = kafkaTemplate;\n         this.mapper = mapper;\n+        this.locationConfig = locationConfig;\n     }\n \n     public void send(final String measurement) {\n \n         LOGGER.info(\"ScadaMeasurementPublishedEventProducer.send is called with measurement {}\", measurement);\n \n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        try {\n+            final ScadaMeasurementPayload[] payloads = objectMapper.readValue(measurement,\n+                    ScadaMeasurementPayload[].class);\n+            if (payloads.length == 0 || payloads[0] == null) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", measurement);\n+                return;\n+            }\n+\n+            final ScadaMeasurementPayload payload = this.addLocationData(payloads);\n+\n+            final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n \n-        LOGGER.debug(\"Trying to send ScadaMeasurementPublishedEventProducer {}\", event);\n+            LOGGER.debug(\"Trying to send ScadaMeasurementPublishedEventProducer {}\", event);\n+\n+            if (event != null) {\n+                final MessageId messageId = new MessageId(getBytesFromUUID(UUID.randomUUID()));\n+                final Message message = new Message(messageId, System.currentTimeMillis(), \"GXF\", null, event);\n+                /*\n+                 * No need for callback functionality now; by default, the\n+                 * template is configured with a LoggingProducerListener, which\n+                 * logs errors and does nothing when the send is successful.\n+                 */\n+                this.kafkaTemplate.sendDefault(message);\n+            }\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Error while converting measurement to Json\", e);\n+        }\n+    }\n \n-        if (event != null) {\n-            final MessageId messageId = new MessageId(getBytesFromUUID(UUID.randomUUID()));\n-            final Message message = new Message(messageId, System.currentTimeMillis(), \"GXF\", null, event);\n-            /*\n-             * No need for callback functionality now; by default, the template\n-             * is configured with a LoggingProducerListener, which logs errors\n-             * and does nothing when the send is successful.\n-             */\n-            this.kafkaTemplate.sendDefault(message);\n+    private ScadaMeasurementPayload addLocationData(final ScadaMeasurementPayload[] payloads) {\n+        final ScadaMeasurementPayload payload = payloads[0];\n+        final String substationIdentification = payload.getSubstationIdentification();\n+        payload.setSubstationName(this.locationConfig.getSubstationLocation(substationIdentification));\n+        final String feeder = payload.getFeeder();\n+        try {\n+            if (Integer.valueOf(feeder) != 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMDgyNA==", "bodyText": "refactored it into a constant META_MEASUREMENT_FEEDER", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519630824", "createdAt": "2020-11-09T08:33:01Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducer.java", "diffHunk": "@@ -31,32 +36,66 @@\n \n     private final DistributionAutomationMapper mapper;\n \n+    private final LocationConfig locationConfig;\n+\n     @Autowired\n     public ScadaMeasurementPublishedEventProducer(\n             @Qualifier(\"distributionAutomationKafkaTemplate\") final KafkaTemplate<String, Message> kafkaTemplate,\n-            final DistributionAutomationMapper mapper) {\n+            final DistributionAutomationMapper mapper, final LocationConfig locationConfig) {\n         this.kafkaTemplate = kafkaTemplate;\n         this.mapper = mapper;\n+        this.locationConfig = locationConfig;\n     }\n \n     public void send(final String measurement) {\n \n         LOGGER.info(\"ScadaMeasurementPublishedEventProducer.send is called with measurement {}\", measurement);\n \n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+        try {\n+            final ScadaMeasurementPayload[] payloads = objectMapper.readValue(measurement,\n+                    ScadaMeasurementPayload[].class);\n+            if (payloads.length == 0 || payloads[0] == null) {\n+                LOGGER.error(\"Source does not include the correct data fields. Source {}\", measurement);\n+                return;\n+            }\n+\n+            final ScadaMeasurementPayload payload = this.addLocationData(payloads);\n+\n+            final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n \n-        LOGGER.debug(\"Trying to send ScadaMeasurementPublishedEventProducer {}\", event);\n+            LOGGER.debug(\"Trying to send ScadaMeasurementPublishedEventProducer {}\", event);\n+\n+            if (event != null) {\n+                final MessageId messageId = new MessageId(getBytesFromUUID(UUID.randomUUID()));\n+                final Message message = new Message(messageId, System.currentTimeMillis(), \"GXF\", null, event);\n+                /*\n+                 * No need for callback functionality now; by default, the\n+                 * template is configured with a LoggingProducerListener, which\n+                 * logs errors and does nothing when the send is successful.\n+                 */\n+                this.kafkaTemplate.sendDefault(message);\n+            }\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Error while converting measurement to Json\", e);\n+        }\n+    }\n \n-        if (event != null) {\n-            final MessageId messageId = new MessageId(getBytesFromUUID(UUID.randomUUID()));\n-            final Message message = new Message(messageId, System.currentTimeMillis(), \"GXF\", null, event);\n-            /*\n-             * No need for callback functionality now; by default, the template\n-             * is configured with a LoggingProducerListener, which logs errors\n-             * and does nothing when the send is successful.\n-             */\n-            this.kafkaTemplate.sendDefault(message);\n+    private ScadaMeasurementPayload addLocationData(final ScadaMeasurementPayload[] payloads) {\n+        final ScadaMeasurementPayload payload = payloads[0];\n+        final String substationIdentification = payload.getSubstationIdentification();\n+        payload.setSubstationName(this.locationConfig.getSubstationLocation(substationIdentification));\n+        final String feeder = payload.getFeeder();\n+        try {\n+            if (Integer.valueOf(feeder) != 100) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc1OTY5OA=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTU1Nzc4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/location-info.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo0ODoxMFrOHuusgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozMzoyNVrOHvjwrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2MTYwMQ==", "bodyText": "It looks like this file contains data that had better be kept in a database. I think you mentioned something about this as being out of scope for now. (Just checking if it was about this file.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518761601", "createdAt": "2020-11-06T13:48:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/location-info.properties", "diffHunk": "@@ -0,0 +1,38 @@\n+9005762.location=Balkon Zuid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMTAyMQ==", "bodyText": "you are correct, it was about this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519631021", "createdAt": "2020-11-09T08:33:25Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/location-info.properties", "diffHunk": "@@ -0,0 +1,38 @@\n+9005762.location=Balkon Zuid", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2MTYwMQ=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTU3MTU1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo1MTo0NlrOHuu0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozNDo1MVrOHvjzsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2MzcwOQ==", "bodyText": "A number of other classes have been renamed from LsPeakShaving-something to LowVoltage-something.\nWould it be better if this one was changed as well, or is there a reason this could stay as it was?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518763709", "createdAt": "2020-11-06T13:51:46Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java", "diffHunk": "@@ -17,47 +17,56 @@\n public class LsPeakShavingMessageFactory extends MessageFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMTc5NQ==", "bodyText": "done so", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519631795", "createdAt": "2020-11-09T08:34:51Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/LsPeakShavingMessageFactory.java", "diffHunk": "@@ -17,47 +17,56 @@\n public class LsPeakShavingMessageFactory extends MessageFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2MzcwOQ=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTU5MzM2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMzo1NzozNlrOHuvCMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozNTozMVrOHvj1WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2NzE1Mw==", "bodyText": "Lower case l might be confusing, upper case L for long value would make it stand out a little more clear.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518767153", "createdAt": "2020-11-06T13:57:36Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -9,34 +9,87 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n \n import com.alliander.data.scadameasurementpublishedevent.Analog;\n+import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n \n class ScadaMeasurementPublishedEventConverterTest {\n \n     private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n \n+    private static final String SUBSTATION_IDENTIFICATION = \"TST-01-L-1V1\";\n+    private static final String SUBSTATION_NAME = \"Test location\";\n+    private static final String BAY_IDENTIFICATION = \"03FQ03\";\n+\n     @Test\n     void testConvertScadaMeasurementPublishedEvent() {\n-        final String measurement = \"[{\\\"gisnr\\\":\\\"TST-01-L-1V1\\\", \\\"feeder\\\":\\\"8\\\", \\\"D\\\": \\\"2020-08-29 09:00:00\\\", \\\"uts\\\":\\\"1598684400\\\", \"\n-                + \"\\\"data\\\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n-                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1]}]\";\n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final String data = \"0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n+                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1\";\n+        final int feeder = 8;\n+        final long utcSeconds = 1598684400;\n+        final ScadaMeasurementPayload payload = ScadaMeasurementPayload.builder()\n+                .substationIdentification(SUBSTATION_IDENTIFICATION)\n+                .substationName(SUBSTATION_NAME)\n+                .feeder(String.valueOf(feeder))\n+                .bayIdentification(BAY_IDENTIFICATION)\n+                .createdUtcSeconds(utcSeconds)\n+                .data(data.split(\",\"))\n+                .build();\n+        final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n         final List<Analog> measurements = event.getMeasurements();\n \n-        assertThat(event.getCreatedDateTime()).isEqualTo(1598684400l * 1000l);\n+        assertThat(event.getCreatedDateTime()).isEqualTo(utcSeconds * 1000l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMjIxNg==", "bodyText": "done so", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519632216", "createdAt": "2020-11-09T08:35:31Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -9,34 +9,87 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n \n import com.alliander.data.scadameasurementpublishedevent.Analog;\n+import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n \n class ScadaMeasurementPublishedEventConverterTest {\n \n     private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n \n+    private static final String SUBSTATION_IDENTIFICATION = \"TST-01-L-1V1\";\n+    private static final String SUBSTATION_NAME = \"Test location\";\n+    private static final String BAY_IDENTIFICATION = \"03FQ03\";\n+\n     @Test\n     void testConvertScadaMeasurementPublishedEvent() {\n-        final String measurement = \"[{\\\"gisnr\\\":\\\"TST-01-L-1V1\\\", \\\"feeder\\\":\\\"8\\\", \\\"D\\\": \\\"2020-08-29 09:00:00\\\", \\\"uts\\\":\\\"1598684400\\\", \"\n-                + \"\\\"data\\\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n-                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1]}]\";\n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final String data = \"0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n+                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1\";\n+        final int feeder = 8;\n+        final long utcSeconds = 1598684400;\n+        final ScadaMeasurementPayload payload = ScadaMeasurementPayload.builder()\n+                .substationIdentification(SUBSTATION_IDENTIFICATION)\n+                .substationName(SUBSTATION_NAME)\n+                .feeder(String.valueOf(feeder))\n+                .bayIdentification(BAY_IDENTIFICATION)\n+                .createdUtcSeconds(utcSeconds)\n+                .data(data.split(\",\"))\n+                .build();\n+        final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n         final List<Analog> measurements = event.getMeasurements();\n \n-        assertThat(event.getCreatedDateTime()).isEqualTo(1598684400l * 1000l);\n+        assertThat(event.getCreatedDateTime()).isEqualTo(utcSeconds * 1000l);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2NzE1Mw=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTYxMTM0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDowMjoxMFrOHuvNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozNjozNFrOHvj3iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2OTk0Mw==", "bodyText": "Maybe this test could have a better name than \"testSomeOtherPayload\".\nIt looks like it is not just some other payload, but one that leads to a null value for the event, suggesting an incomplete or invalid payload instead of just some other one.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518769943", "createdAt": "2020-11-06T14:02:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -9,34 +9,87 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n \n import com.alliander.data.scadameasurementpublishedevent.Analog;\n+import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n \n class ScadaMeasurementPublishedEventConverterTest {\n \n     private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n \n+    private static final String SUBSTATION_IDENTIFICATION = \"TST-01-L-1V1\";\n+    private static final String SUBSTATION_NAME = \"Test location\";\n+    private static final String BAY_IDENTIFICATION = \"03FQ03\";\n+\n     @Test\n     void testConvertScadaMeasurementPublishedEvent() {\n-        final String measurement = \"[{\\\"gisnr\\\":\\\"TST-01-L-1V1\\\", \\\"feeder\\\":\\\"8\\\", \\\"D\\\": \\\"2020-08-29 09:00:00\\\", \\\"uts\\\":\\\"1598684400\\\", \"\n-                + \"\\\"data\\\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n-                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1]}]\";\n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final String data = \"0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n+                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1\";\n+        final int feeder = 8;\n+        final long utcSeconds = 1598684400;\n+        final ScadaMeasurementPayload payload = ScadaMeasurementPayload.builder()\n+                .substationIdentification(SUBSTATION_IDENTIFICATION)\n+                .substationName(SUBSTATION_NAME)\n+                .feeder(String.valueOf(feeder))\n+                .bayIdentification(BAY_IDENTIFICATION)\n+                .createdUtcSeconds(utcSeconds)\n+                .data(data.split(\",\"))\n+                .build();\n+        final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n         final List<Analog> measurements = event.getMeasurements();\n \n-        assertThat(event.getCreatedDateTime()).isEqualTo(1598684400l * 1000l);\n+        assertThat(event.getCreatedDateTime()).isEqualTo(utcSeconds * 1000l);\n         assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n                 .isEqualTo(LsPeakShavingMessageFactory.expectedMeasurements());\n+\n+        final List<Name> names = event.getPowerSystemResource().getNames();\n+        assertThat(names).containsAll(this.expectedNames(feeder));\n+    }\n+\n+    private List<Name> expectedNames(final int feeder) {\n+        final ArrayList<Name> names = new ArrayList<>();\n+        names.add(new Name(new NameType(\"gisbehuizingnummer\"), SUBSTATION_IDENTIFICATION));\n+        names.add(new Name(new NameType(\"msr naam\"), SUBSTATION_NAME));\n+        names.add(new Name(new NameType(\"bay positie\"), String.valueOf(feeder)));\n+        if (feeder != 100) {\n+            names.add(new Name(new NameType(\"bay identificatie\"), BAY_IDENTIFICATION));\n+        }\n+        return names;\n+    }\n+\n+    @Test\n+    void testConvertScadaMetaMeasurementPublishedEvent() {\n+        final String data = \"49.98,12.0,0.11\";\n+        final int feeder = 100;\n+        final long utcSeconds = 1598684400;\n+        final ScadaMeasurementPayload payload = ScadaMeasurementPayload.builder()\n+                .substationIdentification(SUBSTATION_IDENTIFICATION)\n+                .substationName(SUBSTATION_NAME)\n+                .feeder(String.valueOf(feeder))\n+                .createdUtcSeconds(utcSeconds)\n+                .data(data.split(\",\"))\n+                .build();\n+        final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(event.getCreatedDateTime()).isEqualTo(utcSeconds * 1000l);\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(LsPeakShavingMessageFactory.expectedMetaMeasurements());\n+\n+        final List<Name> names = event.getPowerSystemResource().getNames();\n+        assertThat(names).containsAll(this.expectedNames(feeder));\n     }\n \n     @Test\n-    void testSomeOtherString() {\n-        final String someOtherString = \"TST-01-L-1V1\";\n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(someOtherString,\n+    void testSomeOtherPayload() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMjc3Nw==", "bodyText": "changed it", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519632777", "createdAt": "2020-11-09T08:36:34Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/ScadaMeasurementPublishedEventConverterTest.java", "diffHunk": "@@ -9,34 +9,87 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n+import java.util.ArrayList;\n import java.util.List;\n \n import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.mqtt.in.ScadaMeasurementPayload;\n \n import com.alliander.data.scadameasurementpublishedevent.Analog;\n+import com.alliander.data.scadameasurementpublishedevent.Name;\n+import com.alliander.data.scadameasurementpublishedevent.NameType;\n import com.alliander.data.scadameasurementpublishedevent.ScadaMeasurementPublishedEvent;\n \n class ScadaMeasurementPublishedEventConverterTest {\n \n     private final DistributionAutomationMapper mapper = new DistributionAutomationMapper();\n \n+    private static final String SUBSTATION_IDENTIFICATION = \"TST-01-L-1V1\";\n+    private static final String SUBSTATION_NAME = \"Test location\";\n+    private static final String BAY_IDENTIFICATION = \"03FQ03\";\n+\n     @Test\n     void testConvertScadaMeasurementPublishedEvent() {\n-        final String measurement = \"[{\\\"gisnr\\\":\\\"TST-01-L-1V1\\\", \\\"feeder\\\":\\\"8\\\", \\\"D\\\": \\\"2020-08-29 09:00:00\\\", \\\"uts\\\":\\\"1598684400\\\", \"\n-                + \"\\\"data\\\": [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n-                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1]}]\";\n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(measurement, ScadaMeasurementPublishedEvent.class);\n+        final String data = \"0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,\"\n+                + \"2.4,2.5,2.6,2.7,2.8,2.9,3.0,3.1,3.2,3.3,3.4,3.5,3.6,3.7,3.8,3.9,4.0,4.1\";\n+        final int feeder = 8;\n+        final long utcSeconds = 1598684400;\n+        final ScadaMeasurementPayload payload = ScadaMeasurementPayload.builder()\n+                .substationIdentification(SUBSTATION_IDENTIFICATION)\n+                .substationName(SUBSTATION_NAME)\n+                .feeder(String.valueOf(feeder))\n+                .bayIdentification(BAY_IDENTIFICATION)\n+                .createdUtcSeconds(utcSeconds)\n+                .data(data.split(\",\"))\n+                .build();\n+        final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n         final List<Analog> measurements = event.getMeasurements();\n \n-        assertThat(event.getCreatedDateTime()).isEqualTo(1598684400l * 1000l);\n+        assertThat(event.getCreatedDateTime()).isEqualTo(utcSeconds * 1000l);\n         assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n                 .isEqualTo(LsPeakShavingMessageFactory.expectedMeasurements());\n+\n+        final List<Name> names = event.getPowerSystemResource().getNames();\n+        assertThat(names).containsAll(this.expectedNames(feeder));\n+    }\n+\n+    private List<Name> expectedNames(final int feeder) {\n+        final ArrayList<Name> names = new ArrayList<>();\n+        names.add(new Name(new NameType(\"gisbehuizingnummer\"), SUBSTATION_IDENTIFICATION));\n+        names.add(new Name(new NameType(\"msr naam\"), SUBSTATION_NAME));\n+        names.add(new Name(new NameType(\"bay positie\"), String.valueOf(feeder)));\n+        if (feeder != 100) {\n+            names.add(new Name(new NameType(\"bay identificatie\"), BAY_IDENTIFICATION));\n+        }\n+        return names;\n+    }\n+\n+    @Test\n+    void testConvertScadaMetaMeasurementPublishedEvent() {\n+        final String data = \"49.98,12.0,0.11\";\n+        final int feeder = 100;\n+        final long utcSeconds = 1598684400;\n+        final ScadaMeasurementPayload payload = ScadaMeasurementPayload.builder()\n+                .substationIdentification(SUBSTATION_IDENTIFICATION)\n+                .substationName(SUBSTATION_NAME)\n+                .feeder(String.valueOf(feeder))\n+                .createdUtcSeconds(utcSeconds)\n+                .data(data.split(\",\"))\n+                .build();\n+        final ScadaMeasurementPublishedEvent event = this.mapper.map(payload, ScadaMeasurementPublishedEvent.class);\n+        final List<Analog> measurements = event.getMeasurements();\n+\n+        assertThat(event.getCreatedDateTime()).isEqualTo(utcSeconds * 1000l);\n+        assertThat(measurements).usingElementComparatorIgnoringFields(\"mRID\")\n+                .isEqualTo(LsPeakShavingMessageFactory.expectedMetaMeasurements());\n+\n+        final List<Name> names = event.getPowerSystemResource().getNames();\n+        assertThat(names).containsAll(this.expectedNames(feeder));\n     }\n \n     @Test\n-    void testSomeOtherString() {\n-        final String someOtherString = \"TST-01-L-1V1\";\n-        final ScadaMeasurementPublishedEvent event = this.mapper.map(someOtherString,\n+    void testSomeOtherPayload() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc2OTk0Mw=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTYyMDQxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNDowNDozM1rOHuvSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODozNzoyMlrOHvj5LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3MTMyMw==", "bodyText": "Upper case C in the name would look a bit nicer.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r518771323", "createdAt": "2020-11-06T14:04:33Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducerTest.java", "diffHunk": "@@ -61,6 +62,9 @@\n     @Autowired\n     private EmbeddedKafkaBroker embeddedKafka;\n \n+    @Mock\n+    private LocationConfig locationconfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYzMzE5Ng==", "bodyText": "changed it", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/493#discussion_r519633196", "createdAt": "2020-11-09T08:37:22Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/ScadaMeasurementPublishedEventProducerTest.java", "diffHunk": "@@ -61,6 +62,9 @@\n     @Autowired\n     private EmbeddedKafkaBroker embeddedKafka;\n \n+    @Mock\n+    private LocationConfig locationconfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc3MTMyMw=="}, "originalCommit": {"oid": "6ccf308002ae56a3da86c606270b02afeba61347"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3579, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}