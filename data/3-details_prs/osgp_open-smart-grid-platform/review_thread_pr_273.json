{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODQ2MDg1", "number": 273, "reviewThreads": {"totalCount": 66, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1MDo1NFrODwGbnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxNTo0MFrODy5YdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzYzNjEyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/TestContextConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1MDo1NFrOGC6UVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1MDo1NFrOGC6UVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNTgxMw==", "bodyText": "Any reason this is not private, like the other fields?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r405705813", "createdAt": "2020-04-08T17:50:54Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/TestContextConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests;\n+\n+import static org.mockito.Mockito.reset;\n+\n+import org.openmuc.j60870.Connection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.DeviceResponseMessageSender;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.LogItemRequestMessageSender;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config.InboundRequestsTestConfiguration;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config.LogItemTestConfiguration;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config.OutboundResponsesTestConfiguration;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config.TestConfiguration;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import io.cucumber.java.Before;\n+\n+@ContextConfiguration(classes = { TestConfiguration.class, InboundRequestsTestConfiguration.class,\n+        OutboundResponsesTestConfiguration.class, LogItemTestConfiguration.class })\n+public class TestContextConfiguration {\n+\n+    @Autowired\n+    LogItemRequestMessageSender logItemRequestMessageSenderMock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY2NTI1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/config/InboundRequestsTestConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1ODo1NlrOGC6m8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyOTowOFrOGGoJAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDU3OQ==", "bodyText": "I know it would not look very nice, but wouldn't it be more logical if this was named getGetHealthStatusRequestMessageProcessor? (Same for the GetLightSensorStatusRequestMessageProcessor bean below.)\nIf it was a conscious decision not to use getGet, you can leave it as is I guess.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r405710579", "createdAt": "2020-04-08T17:58:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/config/InboundRequestsTestConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import javax.jms.ConnectionFactory;\n+\n+import org.apache.activemq.jms.pool.PooledConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.DeviceRequestMessageListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.ConnectRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.GetHealthStatusRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.GetLightSensorStatusRequestMessageProcessor;\n+import org.opensmartgridplatform.shared.infra.jms.BaseMessageProcessorMap;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class InboundRequestsTestConfiguration {\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsConnectionFactory\")\n+    public ConnectionFactory iec60870RequestsConnectionFactory() {\n+        return mock(PooledConnectionFactory.class);\n+    }\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsMessageListener\")\n+    public DeviceRequestMessageListener iec60870RequestsMessageListener() {\n+        return new DeviceRequestMessageListener();\n+    }\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsMessageProcessorMap\")\n+    public MessageProcessorMap iec60870RequestMessageProcessorMap() {\n+        return new BaseMessageProcessorMap(\"protocolIec60870InboundOsgpCoreRequestsMessageProcessorMap\");\n+    }\n+\n+    @Bean\n+    public ConnectRequestMessageProcessor connectRequestMessageProcessor() {\n+        return new ConnectRequestMessageProcessor();\n+    }\n+\n+    @Bean\n+    public GetHealthStatusRequestMessageProcessor getHealthStatusRequestMessageProcessor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5MzYwNQ==", "bodyText": "Why? It is the message processor for GetHealthStatus requests not for getGetHealthStatus requests? Furthermore I believe we never add an additonal \"get\" for bean definitions?\nMaybe you're confused with something like a getGetStatusResponse method used for getting the GetStatusResponse?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409593605", "createdAt": "2020-04-16T14:18:14Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/config/InboundRequestsTestConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import javax.jms.ConnectionFactory;\n+\n+import org.apache.activemq.jms.pool.PooledConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.DeviceRequestMessageListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.ConnectRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.GetHealthStatusRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.GetLightSensorStatusRequestMessageProcessor;\n+import org.opensmartgridplatform.shared.infra.jms.BaseMessageProcessorMap;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class InboundRequestsTestConfiguration {\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsConnectionFactory\")\n+    public ConnectionFactory iec60870RequestsConnectionFactory() {\n+        return mock(PooledConnectionFactory.class);\n+    }\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsMessageListener\")\n+    public DeviceRequestMessageListener iec60870RequestsMessageListener() {\n+        return new DeviceRequestMessageListener();\n+    }\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsMessageProcessorMap\")\n+    public MessageProcessorMap iec60870RequestMessageProcessorMap() {\n+        return new BaseMessageProcessorMap(\"protocolIec60870InboundOsgpCoreRequestsMessageProcessorMap\");\n+    }\n+\n+    @Bean\n+    public ConnectRequestMessageProcessor connectRequestMessageProcessor() {\n+        return new ConnectRequestMessageProcessor();\n+    }\n+\n+    @Bean\n+    public GetHealthStatusRequestMessageProcessor getHealthStatusRequestMessageProcessor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDU3OQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMjMwNg==", "bodyText": "I agree, if get is not used with the beans it should not be duplicated here, my bad.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409602306", "createdAt": "2020-04-16T14:29:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/config/InboundRequestsTestConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.config;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import javax.jms.ConnectionFactory;\n+\n+import org.apache.activemq.jms.pool.PooledConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.DeviceRequestMessageListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.ConnectRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.GetHealthStatusRequestMessageProcessor;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors.GetLightSensorStatusRequestMessageProcessor;\n+import org.opensmartgridplatform.shared.infra.jms.BaseMessageProcessorMap;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessorMap;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class InboundRequestsTestConfiguration {\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsConnectionFactory\")\n+    public ConnectionFactory iec60870RequestsConnectionFactory() {\n+        return mock(PooledConnectionFactory.class);\n+    }\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsMessageListener\")\n+    public DeviceRequestMessageListener iec60870RequestsMessageListener() {\n+        return new DeviceRequestMessageListener();\n+    }\n+\n+    @Bean(name = \"protocolIec60870InboundOsgpCoreRequestsMessageProcessorMap\")\n+    public MessageProcessorMap iec60870RequestMessageProcessorMap() {\n+        return new BaseMessageProcessorMap(\"protocolIec60870InboundOsgpCoreRequestsMessageProcessorMap\");\n+    }\n+\n+    @Bean\n+    public ConnectRequestMessageProcessor connectRequestMessageProcessor() {\n+        return new ConnectRequestMessageProcessor();\n+    }\n+\n+    @Bean\n+    public GetHealthStatusRequestMessageProcessor getHealthStatusRequestMessageProcessor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMDU3OQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzcxNzMyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/AsduSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxMzozNVrOGC7ITQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoxOToyOVrOGGnq4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxOTExNw==", "bodyText": "This works fine, but given this class already uses Cucumber expressions, I'd favor those over regex configuration unless there is a clear advantage to using the regex.\nYou could consider dropping the ^, $ and replacing the part after device with {string} like in the whenIReceiveAduOfType step.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r405719117", "createdAt": "2020-04-08T18:13:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/AsduSteps.java", "diffHunk": "@@ -30,4 +43,16 @@ public void whenIReceiveAsduOfType(final String asduType) {\n         final ASdu asdu = AsduFactory.ofType(ASduType.valueOf(asduType));\n         this.connectionSteps.getConnectionEventListener().newASdu(asdu);\n     }\n+\n+    @Then(\"^I should send a general interrogation command to device \\\"([^\\\"]*)\\\"$\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NDU5NA==", "bodyText": "I think I might have used the proposed definition as given by Cucumber. Not sure why it has not used {string}.\nUpdated the code to use a Cucumber expression.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409594594", "createdAt": "2020-04-16T14:19:29Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/AsduSteps.java", "diffHunk": "@@ -30,4 +43,16 @@ public void whenIReceiveAsduOfType(final String asduType) {\n         final ASdu asdu = AsduFactory.ofType(ASduType.valueOf(asduType));\n         this.connectionSteps.getConnectionEventListener().newASdu(asdu);\n     }\n+\n+    @Then(\"^I should send a general interrogation command to device \\\"([^\\\"]*)\\\"$\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxOTExNw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzc3NTQ4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/AsduSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyOToxNVrOGC7sqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyOToxNVrOGC7sqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODQyNQ==", "bodyText": "I am not to fond of the duplication of the step description and debug logging it by default in every step.\nIt looks like just extra maintenance, adding it, and keeping it in sync when the step is refactored (or going out of sync and appearing sloppy).\nIf we deem it valuable to debug log every step in this kind of manner, it might be more opportune to look into Cucumber reporting, which allows creation of reporting plugins where you can intercept events (which include step related events, see for instance io.cucumber.plugin.EventListener, io.cucumber.plugin.event,TestStepStarted and the data it gives access to).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r405728425", "createdAt": "2020-04-08T18:29:15Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/AsduSteps.java", "diffHunk": "@@ -30,4 +43,16 @@ public void whenIReceiveAsduOfType(final String asduType) {\n         final ASdu asdu = AsduFactory.ofType(ASduType.valueOf(asduType));\n         this.connectionSteps.getConnectionEventListener().newASdu(asdu);\n     }\n+\n+    @Then(\"^I should send a general interrogation command to device \\\"([^\\\"]*)\\\"$\")\n+    public void thenIShouldSendAGeneralInterrogationCommandToDevice(final String deviceIdentification)\n+            throws Exception {\n+        LOGGER.debug(\"Then I should send a general interrogation command to device {}\", deviceIdentification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDkwNjc0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0NzowMVrOGDZeNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyMToxMVrOGGnv5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNjI0Ng==", "bodyText": "This certainly works, and if it is the only place a DeviceType is created from a step argument it is OK.\nI was wondering if it would not be nicer to use a Cucumber custom parameter type in such cases (documented somewhere under Cucumber expressions, and under Configuration with the type registry in the documentation for Cucumber).\nNo need to change the code, but I wanted to make sure you know the alternative mentioned here is available.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406216246", "createdAt": "2020-04-09T13:47:01Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -82,26 +84,43 @@ public void givenIec60870DeviceIsNotConnected() throws ConnectionFailureExceptio\n                 .thenReturn(deviceConnection);\n     }\n \n-    @Given(\"an existing connection with an IEC60870 device\")\n-    public void givenIec60870DeviceIsConnected() throws ClientConnectionAlreadyInCacheException {\n-        LOGGER.debug(\"Given IEC60870 device is connected\");\n-\n+    @Given(\"an existing connection with IEC60870 device {string} of type {string}\")\n+    public void givenIec60870DeviceIsConnected(final String deviceIdentification, final String typeOfDevice)\n+            throws Exception {\n+        LOGGER.debug(\"Given an existing connection with IEC60870 device {} of type {}\", deviceIdentification,\n+                typeOfDevice);\n+        final DeviceType deviceType = DeviceType.valueOf(typeOfDevice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NTg3OA==", "bodyText": "Added a DeviceType custom parameter type, although my Cucumber plugin doesn't seem to like it, as the step definition is now marked as missing from within the feature file...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409595878", "createdAt": "2020-04-16T14:21:11Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -82,26 +84,43 @@ public void givenIec60870DeviceIsNotConnected() throws ConnectionFailureExceptio\n                 .thenReturn(deviceConnection);\n     }\n \n-    @Given(\"an existing connection with an IEC60870 device\")\n-    public void givenIec60870DeviceIsConnected() throws ClientConnectionAlreadyInCacheException {\n-        LOGGER.debug(\"Given IEC60870 device is connected\");\n-\n+    @Given(\"an existing connection with IEC60870 device {string} of type {string}\")\n+    public void givenIec60870DeviceIsConnected(final String deviceIdentification, final String typeOfDevice)\n+            throws Exception {\n+        LOGGER.debug(\"Given an existing connection with IEC60870 device {} of type {}\", deviceIdentification,\n+                typeOfDevice);\n+        final DeviceType deviceType = DeviceType.valueOf(typeOfDevice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNjI0Ng=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDk0NzYyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo1NjoxN1rOGDZ3oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODowOTo1M1rOGFuimQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMjc1Mg==", "bodyText": "I was confused a bit between device and identification in the code that follows with connectionDevice and getGatewayDeviceIndentification().\nIt seems clearer to use something like connectionDeviceIdentification (or maybe even better, gatewayDeviceIdentification) to indicate this is not a device, but just the identification.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406222752", "createdAt": "2020-04-09T13:56:17Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -82,26 +84,43 @@ public void givenIec60870DeviceIsNotConnected() throws ConnectionFailureExceptio\n                 .thenReturn(deviceConnection);\n     }\n \n-    @Given(\"an existing connection with an IEC60870 device\")\n-    public void givenIec60870DeviceIsConnected() throws ClientConnectionAlreadyInCacheException {\n-        LOGGER.debug(\"Given IEC60870 device is connected\");\n-\n+    @Given(\"an existing connection with IEC60870 device {string} of type {string}\")\n+    public void givenIec60870DeviceIsConnected(final String deviceIdentification, final String typeOfDevice)\n+            throws Exception {\n+        LOGGER.debug(\"Given an existing connection with IEC60870 device {} of type {}\", deviceIdentification,\n+                typeOfDevice);\n+        final DeviceType deviceType = DeviceType.valueOf(typeOfDevice);\n         // Make sure the connection event listener works as expected\n-        final ResponseMetadata responseMetadata = new ResponseMetadata.Builder()\n-                .withDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)\n-                .withOrganisationIdentification(DEFAULT_ORGANISATION_IDENTIFICATION)\n-                .withDomainInfo(new DomainInfo(DEFAULT_DOMAIN, DEFAULT_DOMAIN_VERSION))\n-                .withMessageType(DEFAULT_MESSAGE_TYPE)\n-                .build();\n+        this.connectionParameters = this.initConnectionParameters(deviceIdentification);\n+        final ResponseMetadata responseMetadata = this.initResponseMetadata(deviceIdentification, deviceType);\n         this.connectionEventListener = new ClientConnectionEventListener(\n                 this.connectionParameters.getDeviceIdentification(), this.connectionCacheSpy,\n                 this.clientAsduHandlerRegistry, responseMetadata);\n \n         // Make sure a connection could be retrieved from the cache\n         // Only needed for scenarios sending requests to a device\n-        final Connection connection = mock(Connection.class);\n-        this.connectionCacheSpy.addConnection(DEFAULT_DEVICE_IDENTIFICATION,\n-                new DeviceConnection(connection, this.connectionParameters));\n+        // final Connection connection = mock(Connection.class);\n+        this.connectionCacheSpy.addConnection(deviceIdentification,\n+                new DeviceConnection(this.connection, this.connectionParameters));\n+    }\n+\n+    @When(\"I connect to IEC60870 device {string}\")\n+    public void whenIConnectToIEC60870Device(final String deviceIdentification) throws Exception {\n+        LOGGER.debug(\"When I connect to IEC60870 device {}\", deviceIdentification);\n+        final Iec60870Device device = this.iec60870DeviceSteps.getDevice(deviceIdentification)\n+                .orElseThrow(() -> new Exception(\"Device not found\"));\n+        final DeviceType deviceType = device.getDeviceType();\n+        String connectionDevice = deviceIdentification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1ODU4NQ==", "bodyText": "In this case I'd chosen to use connectionDevice as not all devices will have a gatewayDevice?\nExtended the name with \"Identification\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408658585", "createdAt": "2020-04-15T08:09:53Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -82,26 +84,43 @@ public void givenIec60870DeviceIsNotConnected() throws ConnectionFailureExceptio\n                 .thenReturn(deviceConnection);\n     }\n \n-    @Given(\"an existing connection with an IEC60870 device\")\n-    public void givenIec60870DeviceIsConnected() throws ClientConnectionAlreadyInCacheException {\n-        LOGGER.debug(\"Given IEC60870 device is connected\");\n-\n+    @Given(\"an existing connection with IEC60870 device {string} of type {string}\")\n+    public void givenIec60870DeviceIsConnected(final String deviceIdentification, final String typeOfDevice)\n+            throws Exception {\n+        LOGGER.debug(\"Given an existing connection with IEC60870 device {} of type {}\", deviceIdentification,\n+                typeOfDevice);\n+        final DeviceType deviceType = DeviceType.valueOf(typeOfDevice);\n         // Make sure the connection event listener works as expected\n-        final ResponseMetadata responseMetadata = new ResponseMetadata.Builder()\n-                .withDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)\n-                .withOrganisationIdentification(DEFAULT_ORGANISATION_IDENTIFICATION)\n-                .withDomainInfo(new DomainInfo(DEFAULT_DOMAIN, DEFAULT_DOMAIN_VERSION))\n-                .withMessageType(DEFAULT_MESSAGE_TYPE)\n-                .build();\n+        this.connectionParameters = this.initConnectionParameters(deviceIdentification);\n+        final ResponseMetadata responseMetadata = this.initResponseMetadata(deviceIdentification, deviceType);\n         this.connectionEventListener = new ClientConnectionEventListener(\n                 this.connectionParameters.getDeviceIdentification(), this.connectionCacheSpy,\n                 this.clientAsduHandlerRegistry, responseMetadata);\n \n         // Make sure a connection could be retrieved from the cache\n         // Only needed for scenarios sending requests to a device\n-        final Connection connection = mock(Connection.class);\n-        this.connectionCacheSpy.addConnection(DEFAULT_DEVICE_IDENTIFICATION,\n-                new DeviceConnection(connection, this.connectionParameters));\n+        // final Connection connection = mock(Connection.class);\n+        this.connectionCacheSpy.addConnection(deviceIdentification,\n+                new DeviceConnection(this.connection, this.connectionParameters));\n+    }\n+\n+    @When(\"I connect to IEC60870 device {string}\")\n+    public void whenIConnectToIEC60870Device(final String deviceIdentification) throws Exception {\n+        LOGGER.debug(\"When I connect to IEC60870 device {}\", deviceIdentification);\n+        final Iec60870Device device = this.iec60870DeviceSteps.getDevice(deviceIdentification)\n+                .orElseThrow(() -> new Exception(\"Device not found\"));\n+        final DeviceType deviceType = device.getDeviceType();\n+        String connectionDevice = deviceIdentification;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIyMjc1Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTAwMjY0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDowOToxMFrOGDaa4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxMjowNFrOGFum-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMTc3Ng==", "bodyText": "The common address, IP address and the port appear not to be important information for understanding the test, as they are tucked away here. Besides that, they are the default values in the ConnectionParameters Builder.\nDefaults in the Builder are fine, but I think they should not be repeated elsewhere unless there is a good reason to do so.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406231776", "createdAt": "2020-04-09T14:09:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -117,4 +136,30 @@ public void thenIShouldCacheConnection() throws ClientConnectionAlreadyInCacheEx\n     public ConnectionEventListener getConnectionEventListener() {\n         return this.connectionEventListener;\n     }\n+\n+    private ConnectionParameters initConnectionParameters(final String deviceIdentification) {\n+        return new ConnectionParameters.Builder().commonAddress(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1OTcwNw==", "bodyText": "You're right, I probably forgot to clean this code after adding the defaults to the builder...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408659707", "createdAt": "2020-04-15T08:12:04Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -117,4 +136,30 @@ public void thenIShouldCacheConnection() throws ClientConnectionAlreadyInCacheEx\n     public ConnectionEventListener getConnectionEventListener() {\n         return this.connectionEventListener;\n     }\n+\n+    private ConnectionParameters initConnectionParameters(final String deviceIdentification) {\n+        return new ConnectionParameters.Builder().commonAddress(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzMTc3Ng=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTAyMDU5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/TestContextConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMzoyOFrOGDampQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoxMzoyOFrOGDampQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIzNDc4OQ==", "bodyText": "Initially I thought why 2019? But then I saw this is moved here from ContextConfigurationSteps.\nIt looks like it has landed in a better place here.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406234789", "createdAt": "2020-04-09T14:13:28Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/TestContextConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA2MTIzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/Iec60870DeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyMjo1MVrOGDbAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyODo0MVrOGGoHdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTM0Mg==", "bodyText": "Is it necessary to use a DataTable argument and call asMaps?\nWith a simple List it is not, and I would expect things to work if the parameter was something like List<Map<String, String>> deviceRows instead.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406241342", "createdAt": "2020-04-09T14:22:51Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/Iec60870DeviceSteps.java", "diffHunk": "@@ -25,6 +33,37 @@\n     @Given(\"an IEC60870 device\")\n     public void givenIec60870Device() {\n         final Iec60870Device device = Iec60870DeviceFactory.createDefaultWith(DEFAULT_DEVICE_IDENTIFICATION);\n-        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)).thenReturn(device);\n+        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION))\n+                .thenReturn(Optional.of(device));\n+    }\n+\n+    @Given(\"IEC60870 devices\")\n+    public void givenIec60870Devices(final DataTable dataTable) {\n+\n+        final List<Map<String, String>> rows = dataTable.asMaps();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwMTkwOQ==", "bodyText": "I would prefer the use of DataTable as it looks cleaner to me.\nRefactored some of the code:\n\nrenamed the parameter to deviceTable\nmoved the asMaps() call to the for loop", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409601909", "createdAt": "2020-04-16T14:28:41Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/Iec60870DeviceSteps.java", "diffHunk": "@@ -25,6 +33,37 @@\n     @Given(\"an IEC60870 device\")\n     public void givenIec60870Device() {\n         final Iec60870Device device = Iec60870DeviceFactory.createDefaultWith(DEFAULT_DEVICE_IDENTIFICATION);\n-        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)).thenReturn(device);\n+        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION))\n+                .thenReturn(Optional.of(device));\n+    }\n+\n+    @Given(\"IEC60870 devices\")\n+    public void givenIec60870Devices(final DataTable dataTable) {\n+\n+        final List<Map<String, String>> rows = dataTable.asMaps();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0MTM0Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA3ODc3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/Iec60870DeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDoyNjo0NVrOGDbLbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoxOToyMlrOGFu38g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NDIwNQ==", "bodyText": "I wouldn't use i here instead of invocation. The latter is clearer, and the single character is mostly used for integer index values.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406244205", "createdAt": "2020-04-09T14:26:45Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/Iec60870DeviceSteps.java", "diffHunk": "@@ -25,6 +33,37 @@\n     @Given(\"an IEC60870 device\")\n     public void givenIec60870Device() {\n         final Iec60870Device device = Iec60870DeviceFactory.createDefaultWith(DEFAULT_DEVICE_IDENTIFICATION);\n-        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)).thenReturn(device);\n+        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION))\n+                .thenReturn(Optional.of(device));\n+    }\n+\n+    @Given(\"IEC60870 devices\")\n+    public void givenIec60870Devices(final DataTable dataTable) {\n+\n+        final List<Map<String, String>> rows = dataTable.asMaps();\n+\n+        final List<Iec60870Device> devices = new ArrayList<>();\n+\n+        for (final Map<String, String> colums : rows) {\n+            final Iec60870Device device = Iec60870DeviceFactory.fromSettings(colums);\n+            when(this.repositoryMock.findByDeviceIdentification(device.getDeviceIdentification()))\n+                    .thenReturn(Optional.of(device));\n+            devices.add(device);\n+        }\n+\n+        when(this.repositoryMock.findByGatewayDeviceIdentification(anyString()))\n+                .thenAnswer(i -> this.getDevicesForGateway(i.getArgument(0), devices));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NDA1MA==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408664050", "createdAt": "2020-04-15T08:19:22Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/Iec60870DeviceSteps.java", "diffHunk": "@@ -25,6 +33,37 @@\n     @Given(\"an IEC60870 device\")\n     public void givenIec60870Device() {\n         final Iec60870Device device = Iec60870DeviceFactory.createDefaultWith(DEFAULT_DEVICE_IDENTIFICATION);\n-        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)).thenReturn(device);\n+        when(this.repositoryMock.findByDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION))\n+                .thenReturn(Optional.of(device));\n+    }\n+\n+    @Given(\"IEC60870 devices\")\n+    public void givenIec60870Devices(final DataTable dataTable) {\n+\n+        final List<Map<String, String>> rows = dataTable.asMaps();\n+\n+        final List<Iec60870Device> devices = new ArrayList<>();\n+\n+        for (final Map<String, String> colums : rows) {\n+            final Iec60870Device device = Iec60870DeviceFactory.fromSettings(colums);\n+            when(this.repositoryMock.findByDeviceIdentification(device.getDeviceIdentification()))\n+                    .thenReturn(Optional.of(device));\n+            devices.add(device);\n+        }\n+\n+        when(this.repositoryMock.findByGatewayDeviceIdentification(anyString()))\n+                .thenAnswer(i -> this.getDevicesForGateway(i.getArgument(0), devices));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NDIwNQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTEyMzExOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNjo0MFrOGDbnlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNjo0MFrOGDbnlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTQxMw==", "bodyText": "Missing license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406251413", "createdAt": "2020-04-09T14:36:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTE0NTMyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo0MTo0M1rOGDb1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODoyMTo1N1rOGFu97g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NTA0NA==", "bodyText": "I think I am not so happy with this name. Mocking is a technique in the implementation of the tests and should not be essential to a step class, in that it is included in its name.\nI am guessing based on what I see in this class, and suspect something like ControlledStationSteps or Iec60870ServerSteps better fits what these steps have to offer.\nJust let me know if this is indeed the case, or if I am missing something.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406255044", "createdAt": "2020-04-09T14:41:43Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY2NTU4Mg==", "bodyText": "Renamed", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408665582", "createdAt": "2020-04-15T08:21:57Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NTA0NA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTIwMTU0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MzozOFrOGDcYtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo1NDo1N1rOGF0YGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2Mzk5MA==", "bodyText": "I have some questions here. Mostly for my own understanding. Only cause for change (now or later) if it makes sense.\nIs the ProcessImage here a class that represents all/some of the information stored on a device.\nIf so, then maybe not now, but very soon it will possibly be convenient to have it accessible broader than here.\nSomething else I was thinking about (if my earlier assumptions are correct) is if it would make sense to split this method up, where givenAProcessImageOnTheControlledStation sets up the data for a controlled station and other methods determine what happens when some or all of this information is requested (something like a when step whenAGeneralInterrogationCommandIsReceived).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406263990", "createdAt": "2020-04-09T14:53:38Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NDIwMA==", "bodyText": "The Process Image should represent the actual status of all objects for a device. I agree with you that it would be convenient to have this class accessible broader than here. It could probably be moved to the osgp-iec60870 component.\nI am not sure though about splitting up the method, at least not in this context.\nIn this case it is intended to mock a device to return a specific set of values when receiving a GI request. If splitting up, in my opinion it would be to another given step: givenTheDeviceRespondsToGeneralInterrogationWith or something like that, as I think the when step should be a trigger on the system/component under test (in this case the protocol adapter)?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408754200", "createdAt": "2020-04-15T10:54:57Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2Mzk5MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTIyMjMxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1ODowOFrOGDcmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozMjoyNlrOGGoTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NzQwNQ==", "bodyText": "Now this helper method is tied to mockito by the invocation parameter. It could be easier to allow forms of reuse if the mockito stuff was kept together inside the step method. It feels cleaner if the commonAddress and qualifer were arguments of a method like this one instead of the invocation.\nThe method now only makes sense and can only be properly understood when looked at in combination with the method it is called from.\nJust see how you feel about this, to judge whether to leave it as is, or refactor it.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406267405", "createdAt": "2020-04-09T14:58:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {\n+\n+        final ProcessImage processImage = ProcessImage.fromDataTable(datatable);\n+\n+        doAnswer(invocation -> this.sendInterrogationResponse(invocation, processImage)).when(this.connection)\n+                .interrogation(any(Integer.class), eq(CauseOfTransmission.ACTIVATION),\n+                        any(IeQualifierOfInterrogation.class));\n+    }\n+\n+    private Object sendInterrogationResponse(final InvocationOnMock invocation, final ProcessImage processImage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNDg2NA==", "bodyText": "Agreed and updated...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409604864", "createdAt": "2020-04-16T14:32:26Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {\n+\n+        final ProcessImage processImage = ProcessImage.fromDataTable(datatable);\n+\n+        doAnswer(invocation -> this.sendInterrogationResponse(invocation, processImage)).when(this.connection)\n+                .interrogation(any(Integer.class), eq(CauseOfTransmission.ACTIVATION),\n+                        any(IeQualifierOfInterrogation.class));\n+    }\n+\n+    private Object sendInterrogationResponse(final InvocationOnMock invocation, final ProcessImage processImage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NzQwNQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTI4Mjc5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxMjoyOFrOGDdMsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDozNTo0MVrOGGoczw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NzI5Nw==", "bodyText": "Same as earlier, I wonder if it would not be cleaner to put some more distance between the Cucumber DataTable and the ProcessImage. If I was correct earlier the step parameter could be changed from DataTable to a list of maps, breaking this dependency, and avoiding the code to explicitly go from data table to list of maps.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406277297", "createdAt": "2020-04-09T15:12:28Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {\n+\n+        final ProcessImage processImage = ProcessImage.fromDataTable(datatable);\n+\n+        doAnswer(invocation -> this.sendInterrogationResponse(invocation, processImage)).when(this.connection)\n+                .interrogation(any(Integer.class), eq(CauseOfTransmission.ACTIVATION),\n+                        any(IeQualifierOfInterrogation.class));\n+    }\n+\n+    private Object sendInterrogationResponse(final InvocationOnMock invocation, final ProcessImage processImage) {\n+        final int commonAddress = invocation.getArgument(0);\n+        final IeQualifierOfInterrogation qualifier = invocation.getArgument(2);\n+\n+        final ConnectionEventListener listener = this.connectionSteps.getConnectionEventListener();\n+        listener.newASdu(this.interrogationActivationConfirmationAsdu(commonAddress, qualifier));\n+        for (final ASdu asdu : processImage.toInterrogationAsdus(commonAddress, qualifier)) {\n+            listener.newASdu(asdu);\n+        }\n+        listener.newASdu(this.interrogationActivationTerminationAsdu(commonAddress, qualifier));\n+        return null;\n+    }\n+\n+    private ASdu interrogationActivationConfirmationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_CON, qualifier);\n+    }\n+\n+    private ASdu interrogationActivationTerminationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_TERMINATION, qualifier);\n+    }\n+\n+    private ASdu interrogationAsdu(final int commonAddress, final CauseOfTransmission cot,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return new ASdu(ASduType.C_IC_NA_1, false, cot, false, false, 0, commonAddress,\n+                new InformationObject(0, qualifier));\n+    }\n+\n+    private static class ProcessImage {\n+        private final List<InformationObject> image;\n+\n+        private ProcessImage(final List<InformationObject> image) {\n+            this.image = image;\n+        }\n+\n+        public static ProcessImage fromDataTable(final DataTable datatable) {\n+\n+            final List<Map<String, String>> rows = datatable.asMaps();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYwNzM3NQ==", "bodyText": "I would prefer the DataTable, refactored the code in a similar way as earlier.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409607375", "createdAt": "2020-04-16T14:35:41Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {\n+\n+        final ProcessImage processImage = ProcessImage.fromDataTable(datatable);\n+\n+        doAnswer(invocation -> this.sendInterrogationResponse(invocation, processImage)).when(this.connection)\n+                .interrogation(any(Integer.class), eq(CauseOfTransmission.ACTIVATION),\n+                        any(IeQualifierOfInterrogation.class));\n+    }\n+\n+    private Object sendInterrogationResponse(final InvocationOnMock invocation, final ProcessImage processImage) {\n+        final int commonAddress = invocation.getArgument(0);\n+        final IeQualifierOfInterrogation qualifier = invocation.getArgument(2);\n+\n+        final ConnectionEventListener listener = this.connectionSteps.getConnectionEventListener();\n+        listener.newASdu(this.interrogationActivationConfirmationAsdu(commonAddress, qualifier));\n+        for (final ASdu asdu : processImage.toInterrogationAsdus(commonAddress, qualifier)) {\n+            listener.newASdu(asdu);\n+        }\n+        listener.newASdu(this.interrogationActivationTerminationAsdu(commonAddress, qualifier));\n+        return null;\n+    }\n+\n+    private ASdu interrogationActivationConfirmationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_CON, qualifier);\n+    }\n+\n+    private ASdu interrogationActivationTerminationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_TERMINATION, qualifier);\n+    }\n+\n+    private ASdu interrogationAsdu(final int commonAddress, final CauseOfTransmission cot,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return new ASdu(ASduType.C_IC_NA_1, false, cot, false, false, 0, commonAddress,\n+                new InformationObject(0, qualifier));\n+    }\n+\n+    private static class ProcessImage {\n+        private final List<InformationObject> image;\n+\n+        private ProcessImage(final List<InformationObject> image) {\n+            this.image = image;\n+        }\n+\n+        public static ProcessImage fromDataTable(final DataTable datatable) {\n+\n+            final List<Map<String, String>> rows = datatable.asMaps();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3NzI5Nw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTI5MTYwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxNDozM1rOGDdSag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo1NjozNFrOGF0bCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3ODc2Mg==", "bodyText": "This should either be un-commented and used, or removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406278762", "createdAt": "2020-04-09T15:14:33Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {\n+\n+        final ProcessImage processImage = ProcessImage.fromDataTable(datatable);\n+\n+        doAnswer(invocation -> this.sendInterrogationResponse(invocation, processImage)).when(this.connection)\n+                .interrogation(any(Integer.class), eq(CauseOfTransmission.ACTIVATION),\n+                        any(IeQualifierOfInterrogation.class));\n+    }\n+\n+    private Object sendInterrogationResponse(final InvocationOnMock invocation, final ProcessImage processImage) {\n+        final int commonAddress = invocation.getArgument(0);\n+        final IeQualifierOfInterrogation qualifier = invocation.getArgument(2);\n+\n+        final ConnectionEventListener listener = this.connectionSteps.getConnectionEventListener();\n+        listener.newASdu(this.interrogationActivationConfirmationAsdu(commonAddress, qualifier));\n+        for (final ASdu asdu : processImage.toInterrogationAsdus(commonAddress, qualifier)) {\n+            listener.newASdu(asdu);\n+        }\n+        listener.newASdu(this.interrogationActivationTerminationAsdu(commonAddress, qualifier));\n+        return null;\n+    }\n+\n+    private ASdu interrogationActivationConfirmationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_CON, qualifier);\n+    }\n+\n+    private ASdu interrogationActivationTerminationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_TERMINATION, qualifier);\n+    }\n+\n+    private ASdu interrogationAsdu(final int commonAddress, final CauseOfTransmission cot,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return new ASdu(ASduType.C_IC_NA_1, false, cot, false, false, 0, commonAddress,\n+                new InformationObject(0, qualifier));\n+    }\n+\n+    private static class ProcessImage {\n+        private final List<InformationObject> image;\n+\n+        private ProcessImage(final List<InformationObject> image) {\n+            this.image = image;\n+        }\n+\n+        public static ProcessImage fromDataTable(final DataTable datatable) {\n+\n+            final List<Map<String, String>> rows = datatable.asMaps();\n+\n+            final List<InformationObject> informationObjects = rows.stream()\n+                    .map(ProcessImage::informationObject)\n+                    .collect(Collectors.toList());\n+            return new ProcessImage(informationObjects);\n+        }\n+\n+        public List<ASdu> toInterrogationAsdus(final int commonAddress, final IeQualifierOfInterrogation qualifier) {\n+            final CauseOfTransmission cot = CauseOfTransmission.causeFor(qualifier.getValue());\n+            final List<ASdu> asdus = new ArrayList<>();\n+            asdus.add(new ASdu(ASduType.M_SP_NA_1, true, cot, false, false, 0, commonAddress,\n+                    this.image.toArray(new InformationObject[0])));\n+            return asdus;\n+        }\n+\n+        public static InformationObject informationObject(final Map<String, String> map) {\n+            final int informationObjectAddress = Integer.parseInt(map.getOrDefault(\"information_object_address\", \"0\"));\n+            // final String informationObjectType =\n+            // map.get(\"information_object_type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NDk1Mg==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408754952", "createdAt": "2020-04-15T10:56:34Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/MockedDeviceSteps.java", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.integrationtests.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.mockito.invocation.InvocationOnMock;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.Connection;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import io.cucumber.datatable.DataTable;\n+import io.cucumber.java.en.Given;\n+\n+public class MockedDeviceSteps {\n+    @Autowired\n+    private ConnectionSteps connectionSteps;\n+\n+    @Autowired\n+    private Connection connection;\n+\n+    @Given(\"a process image on the controlled station\")\n+    public void givenAProcessImageOnTheControlledStation(final DataTable datatable) throws Throwable {\n+\n+        final ProcessImage processImage = ProcessImage.fromDataTable(datatable);\n+\n+        doAnswer(invocation -> this.sendInterrogationResponse(invocation, processImage)).when(this.connection)\n+                .interrogation(any(Integer.class), eq(CauseOfTransmission.ACTIVATION),\n+                        any(IeQualifierOfInterrogation.class));\n+    }\n+\n+    private Object sendInterrogationResponse(final InvocationOnMock invocation, final ProcessImage processImage) {\n+        final int commonAddress = invocation.getArgument(0);\n+        final IeQualifierOfInterrogation qualifier = invocation.getArgument(2);\n+\n+        final ConnectionEventListener listener = this.connectionSteps.getConnectionEventListener();\n+        listener.newASdu(this.interrogationActivationConfirmationAsdu(commonAddress, qualifier));\n+        for (final ASdu asdu : processImage.toInterrogationAsdus(commonAddress, qualifier)) {\n+            listener.newASdu(asdu);\n+        }\n+        listener.newASdu(this.interrogationActivationTerminationAsdu(commonAddress, qualifier));\n+        return null;\n+    }\n+\n+    private ASdu interrogationActivationConfirmationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_CON, qualifier);\n+    }\n+\n+    private ASdu interrogationActivationTerminationAsdu(final int commonAddress,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return this.interrogationAsdu(commonAddress, CauseOfTransmission.ACTIVATION_TERMINATION, qualifier);\n+    }\n+\n+    private ASdu interrogationAsdu(final int commonAddress, final CauseOfTransmission cot,\n+            final IeQualifierOfInterrogation qualifier) {\n+        return new ASdu(ASduType.C_IC_NA_1, false, cot, false, false, 0, commonAddress,\n+                new InformationObject(0, qualifier));\n+    }\n+\n+    private static class ProcessImage {\n+        private final List<InformationObject> image;\n+\n+        private ProcessImage(final List<InformationObject> image) {\n+            this.image = image;\n+        }\n+\n+        public static ProcessImage fromDataTable(final DataTable datatable) {\n+\n+            final List<Map<String, String>> rows = datatable.asMaps();\n+\n+            final List<InformationObject> informationObjects = rows.stream()\n+                    .map(ProcessImage::informationObject)\n+                    .collect(Collectors.toList());\n+            return new ProcessImage(informationObjects);\n+        }\n+\n+        public List<ASdu> toInterrogationAsdus(final int commonAddress, final IeQualifierOfInterrogation qualifier) {\n+            final CauseOfTransmission cot = CauseOfTransmission.causeFor(qualifier.getValue());\n+            final List<ASdu> asdus = new ArrayList<>();\n+            asdus.add(new ASdu(ASduType.M_SP_NA_1, true, cot, false, false, 0, commonAddress,\n+                    this.image.toArray(new InformationObject[0])));\n+            return asdus;\n+        }\n+\n+        public static InformationObject informationObject(final Map<String, String> map) {\n+            final int informationObjectAddress = Integer.parseInt(map.getOrDefault(\"information_object_address\", \"0\"));\n+            // final String informationObjectType =\n+            // map.get(\"information_object_type\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3ODc2Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTMzMzQ2OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/RequestSteps.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyNDo1NVrOGDdtvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo0MjoyNFrOGF125A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTc1Nw==", "bodyText": "Not regarding the changes from this pull request, but the name request steps had me confused until I looked more into the code. Request is so general it could have just as well been a request to a device. Perhaps the longer name OsgpCoreRequestSteps is a clearer alternative. (Something similar could be said for the ResponseSteps I suppose.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406285757", "createdAt": "2020-04-09T15:24:55Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/RequestSteps.java", "diffHunk": "@@ -14,13 +14,18 @@\n import javax.jms.ObjectMessage;\n \n import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.DeviceRequestMessageListener;\n+import org.opensmartgridplatform.dto.da.ConnectRequestDto;\n import org.opensmartgridplatform.dto.da.GetHealthStatusRequestDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.opensmartgridplatform.shared.infra.jms.ObjectMessageBuilder;\n import org.springframework.beans.factory.annotation.Autowired;\n \n import io.cucumber.java.en.When;\n \n public class RequestSteps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3ODQ2OA==", "bodyText": "Renamed the classes to OsgpCoreRequestSteps and OsgpCoreResponseSteps. (Renaming to InboundRequestSteps and OutboundResponseSteps also crossed my mind)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408778468", "createdAt": "2020-04-15T11:42:24Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/RequestSteps.java", "diffHunk": "@@ -14,13 +14,18 @@\n import javax.jms.ObjectMessage;\n \n import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.DeviceRequestMessageListener;\n+import org.opensmartgridplatform.dto.da.ConnectRequestDto;\n import org.opensmartgridplatform.dto.da.GetHealthStatusRequestDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n import org.opensmartgridplatform.shared.infra.jms.ObjectMessageBuilder;\n import org.springframework.beans.factory.annotation.Autowired;\n \n import io.cucumber.java.en.When;\n \n public class RequestSteps {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NTc1Nw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTQ4Mzk3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/resources/features/GeneralInterrogation.feature", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowMToxOVrOGDfN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjowMToxOVrOGDfN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxMDM5OQ==", "bodyText": "Indent with spaces.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406310399", "createdAt": "2020-04-09T16:01:19Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/resources/features/GeneralInterrogation.feature", "diffHunk": "@@ -0,0 +1,31 @@\n+Feature: General Interrogation\n+  As controlling station\n+  I want to send general interrogation requests to controlled stations\n+  So that I am able to return the actual statuses of the controlled stations\n+\n+\tBackground:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTUzMjU0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/resources/features/GeneralInterrogation.feature", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoxNDo0MVrOGDftqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1Mzo0N1rOGF2OLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODUwNA==", "bodyText": "Just for my understanding, is the scenario that a connect request occurs for the gateway, and that the gateway will send responses for all devices behind it, which are transferred to OSGP core by the protocol adapter?\nThis is somewhat different from the scenario I would expect based on other value streams (for instance a request is made for gas readings which are read from a gas meter behind a smart meter gateway device).\nTranslated to this case, I would expect the interrogation to be for LMD_1 for instance, where the command is passed through GATEWAY_1 with some identication of the targeted light measurement device that the gateway understands.\nThis would be followed by a response for just the targeted light measurement device.\nJust let me know if my interpretation is wrong, and how this will work instead.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406318504", "createdAt": "2020-04-09T16:14:41Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/resources/features/GeneralInterrogation.feature", "diffHunk": "@@ -0,0 +1,31 @@\n+Feature: General Interrogation\n+  As controlling station\n+  I want to send general interrogation requests to controlled stations\n+  So that I am able to return the actual statuses of the controlled stations\n+\n+\tBackground:\n+    Given IEC60870 devices\n+      | device_identification | device_type               | gateway_device_identification | device_address |\n+      | GATEWAY_1             | LIGHT_MEASUREMENT_GATEWAY |                               |                |\n+      | LMD_1                 | LIGHT_MEASUREMENT_DEVICE  | GATEWAY_1                     |              1 |\n+      | LMD_2                 | LIGHT_MEASUREMENT_DEVICE  | GATEWAY_1                     |              2 |\n+    And a process image on the controlled station\n+      | information_object_address | information_object_type | information_element_value |\n+      |                          1 | SIQ                     | OFF                       |\n+      |                          2 | SIQ                     | ON                        |\n+\n+  Scenario: send general interrogation command after connecting to a controlled station\n+    When I receive a connect request for IEC60870 device \"GATEWAY_1\" from osgp core", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NDQzMA==", "bodyText": "In the case of smart metering the smart meter is offline, and only when a request is received a connection is established and data is read, either for the e-meter or g-meter or both. In this case the controlled station should always be connected, and only when for example osgp or the device is restarted, or due to some other technical interruptions, a connect request will be sent to the controlled station, after which a general interrogation should take place. This general interrogation will read all objects from the controlled station, which will be sent to osgp-core as light sensor status objects for the individual light measurement devices defined for the controlled station.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408784430", "createdAt": "2020-04-15T11:53:47Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/resources/features/GeneralInterrogation.feature", "diffHunk": "@@ -0,0 +1,31 @@\n+Feature: General Interrogation\n+  As controlling station\n+  I want to send general interrogation requests to controlled stations\n+  So that I am able to return the actual statuses of the controlled stations\n+\n+\tBackground:\n+    Given IEC60870 devices\n+      | device_identification | device_type               | gateway_device_identification | device_address |\n+      | GATEWAY_1             | LIGHT_MEASUREMENT_GATEWAY |                               |                |\n+      | LMD_1                 | LIGHT_MEASUREMENT_DEVICE  | GATEWAY_1                     |              1 |\n+      | LMD_2                 | LIGHT_MEASUREMENT_DEVICE  | GATEWAY_1                     |              2 |\n+    And a process image on the controlled station\n+      | information_object_address | information_object_type | information_element_value |\n+      |                          1 | SIQ                     | OFF                       |\n+      |                          2 | SIQ                     | ON                        |\n+\n+  Scenario: send general interrogation command after connecting to a controlled station\n+    When I receive a connect request for IEC60870 device \"GATEWAY_1\" from osgp core", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMxODUwNA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzY5MTA5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/DistributionAutomationDeviceResponseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzo1Nzo1N1rOGDz62Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1NTo0NFrOGF2SdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTU2MQ==", "bodyText": "Should this log statement say \"for light measurement gateway\"?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406649561", "createdAt": "2020-04-10T07:57:57Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/DistributionAutomationDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.MeasurementReportingService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DistributionAutomationDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DistributionAutomationDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.DA_DEVICE;\n+\n+    @Autowired\n+    private MeasurementReportingService measurementReportingService;\n+\n+    public DistributionAutomationDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata) {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NTUyNA==", "bodyText": "No, changed it.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408785524", "createdAt": "2020-04-15T11:55:44Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/DistributionAutomationDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.MeasurementReportingService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DistributionAutomationDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DistributionAutomationDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.DA_DEVICE;\n+\n+    @Autowired\n+    private MeasurementReportingService measurementReportingService;\n+\n+    public DistributionAutomationDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata) {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTU2MQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzczMzkwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxNjo0NFrOGD0T6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0NDozOVrOGGo4UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NTk3Ng==", "bodyText": "To me it is not immediately obvious why the response meta data is being replaced with a new correlation UID.\nIs there some reason that the one in the current response meta data should not be used? (Maybe because it is not related to earlier actions/events like a request that could be traced?)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406655976", "createdAt": "2020-04-10T08:16:44Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LightMeasurementService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LightMeasurementDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LightMeasurementDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_DEVICE;\n+\n+    @Autowired\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Autowired\n+    private ResponseMetadataFactory responseMetadataFactory;\n+\n+    @Autowired\n+    private LightMeasurementService lightMeasurementService;\n+\n+    public LightMeasurementDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata)\n+            throws AsduHandlerException {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+                responseMetadata.getDeviceIdentification());\n+\n+        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNDQxNw==", "bodyText": "New correlation uids are already created in asdu handlers, so no need to recreate here and thus removed...\nAs discussed earlier we still might need a mechanism to relate correlation uids from requests to responses...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409614417", "createdAt": "2020-04-16T14:44:39Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LightMeasurementService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LightMeasurementDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LightMeasurementDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_DEVICE;\n+\n+    @Autowired\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Autowired\n+    private ResponseMetadataFactory responseMetadataFactory;\n+\n+    @Autowired\n+    private LightMeasurementService lightMeasurementService;\n+\n+    public LightMeasurementDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata)\n+            throws AsduHandlerException {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+                responseMetadata.getDeviceIdentification());\n+\n+        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NTk3Ng=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzczODgyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwODoxOTowM1rOGD0WuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1NzowMFrOGGj8xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NjY5Nw==", "bodyText": "It looks out of place that the methods here throw an AsduHandlerException.\nNot finding a device does not appear to be related to handling of ASDUs.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406656697", "createdAt": "2020-04-10T08:19:03Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LightMeasurementService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LightMeasurementDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LightMeasurementDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_DEVICE;\n+\n+    @Autowired\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Autowired\n+    private ResponseMetadataFactory responseMetadataFactory;\n+\n+    @Autowired\n+    private LightMeasurementService lightMeasurementService;\n+\n+    public LightMeasurementDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata)\n+            throws AsduHandlerException {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+                responseMetadata.getDeviceIdentification());\n+\n+        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n+                .createWithNewCorrelationUid(responseMetadata);\n+\n+        final Iec60870Device device = this.iec60870DeviceRepository\n+                .findByDeviceIdentification(responseMetadata.getDeviceIdentification())\n+                .orElseThrow(AsduHandlerException.withMessage(\"Device not found.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzMzYzOQ==", "bodyText": "Refactored code, errors will be logged instead of throwing exceptions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409533639", "createdAt": "2020-04-16T12:57:00Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LightMeasurementService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LightMeasurementDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LightMeasurementDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_DEVICE;\n+\n+    @Autowired\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Autowired\n+    private ResponseMetadataFactory responseMetadataFactory;\n+\n+    @Autowired\n+    private LightMeasurementService lightMeasurementService;\n+\n+    public LightMeasurementDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata)\n+            throws AsduHandlerException {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+                responseMetadata.getDeviceIdentification());\n+\n+        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n+                .createWithNewCorrelationUid(responseMetadata);\n+\n+        final Iec60870Device device = this.iec60870DeviceRepository\n+                .findByDeviceIdentification(responseMetadata.getDeviceIdentification())\n+                .orElseThrow(AsduHandlerException.withMessage(\"Device not found.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1NjY5Nw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzg1MzAwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementGatewayDeviceResponseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTowODowOVrOGD1a-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1ODowNlrOGGj__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NDE2OA==", "bodyText": "This code assumes at least a single element is present for measurements in the measurement group and measurement elements in the measurement.\nIs it safe to assume that these will always be present, or should a clearer exception than an IndexOutOfBoundsException be thrown?\nIs there any reason not to check if there is more than one element in these collections, and throw an exception or log a warning if this would be the case?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406674168", "createdAt": "2020-04-10T09:08:09Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementGatewayDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LightMeasurementService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LightMeasurementGatewayDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LightMeasurementGatewayDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_GATEWAY;\n+\n+    @Autowired\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Autowired\n+    private ResponseMetadataFactory responseMetadataFactory;\n+\n+    @Autowired\n+    private LightMeasurementService lightMeasurementService;\n+\n+    public LightMeasurementGatewayDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata) {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+                responseMetadata.getDeviceIdentification());\n+\n+        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n+                .createWithNewCorrelationUid(responseMetadata);\n+\n+        final List<Iec60870Device> lightMeasurementDevices = this.iec60870DeviceRepository\n+                .findByGatewayDeviceIdentification(responseMetadata.getDeviceIdentification());\n+\n+        this.sendLightSensorStatusResponses(measurementReportDto, lightMeasurementDevices, newResponseMetadata);\n+    }\n+\n+    private void sendLightSensorStatusResponses(final MeasurementReportDto measurementReportDto,\n+            final List<Iec60870Device> lightMeasurementDevices, final ResponseMetadata responseMetadata) {\n+\n+        for (final MeasurementGroupDto mg : measurementReportDto.getMeasurementGroups()) {\n+            final Optional<Iec60870Device> device = lightMeasurementDevices.stream()\n+                    .filter(d -> d.getInformationObjectAddress().toString().equals(mg.getIdentification()))\n+                    .findFirst();\n+            device.ifPresent(d -> this.sendLightSensorStatusResponse(mg, d, responseMetadata));\n+        }\n+    }\n+\n+    private void sendLightSensorStatusResponse(final MeasurementGroupDto measurementGroupDto,\n+            final Iec60870Device device, final ResponseMetadata responseMetadata) {\n+        final ResponseMetadata rm = new ResponseMetadata.Builder()\n+                .withCorrelationUid(responseMetadata.getCorrelationUid())\n+                .withDeviceIdentification(device.getDeviceIdentification())\n+                .withDomainInfo(device.getDeviceType().domainType().domainInfo())\n+                .withMessageType(MessageType.GET_LIGHT_SENSOR_STATUS.name())\n+                .withOrganisationIdentification(responseMetadata.getOrganisationIdentification())\n+                .build();\n+\n+        final boolean on = ((BitmaskMeasurementElementDto) measurementGroupDto.getMeasurements()\n+                .get(0)\n+                .getMeasurementElements()\n+                .get(0)).getValue() == 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNDQ2Mg==", "bodyText": "In the case of light measurement gateway/devices, the result of a general interrogation of the gateway device should result in information objects for each light measurement  device, which in turn is represented as a single-point information element. So for a general interrogation each light measurement device will be represented by a measurement group with a single measurement containing a single measurement element (in the form of a BitmaskMeasurementElementDto).\nFor events this will be different, as they will also contain a timestamp.\nI would expect events to be handled by the LightMeasurementDeviceResponseService though.\nRefactored the code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409534462", "createdAt": "2020-04-16T12:58:06Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementGatewayDeviceResponseService.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LightMeasurementService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LightMeasurementGatewayDeviceResponseService extends AbstractDeviceResponseService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LightMeasurementGatewayDeviceResponseService.class);\n+\n+    private static final DeviceType DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_GATEWAY;\n+\n+    @Autowired\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Autowired\n+    private ResponseMetadataFactory responseMetadataFactory;\n+\n+    @Autowired\n+    private LightMeasurementService lightMeasurementService;\n+\n+    public LightMeasurementGatewayDeviceResponseService() {\n+        super(DEVICE_TYPE);\n+    }\n+\n+    @Override\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata) {\n+        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+                responseMetadata.getDeviceIdentification());\n+\n+        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n+                .createWithNewCorrelationUid(responseMetadata);\n+\n+        final List<Iec60870Device> lightMeasurementDevices = this.iec60870DeviceRepository\n+                .findByGatewayDeviceIdentification(responseMetadata.getDeviceIdentification());\n+\n+        this.sendLightSensorStatusResponses(measurementReportDto, lightMeasurementDevices, newResponseMetadata);\n+    }\n+\n+    private void sendLightSensorStatusResponses(final MeasurementReportDto measurementReportDto,\n+            final List<Iec60870Device> lightMeasurementDevices, final ResponseMetadata responseMetadata) {\n+\n+        for (final MeasurementGroupDto mg : measurementReportDto.getMeasurementGroups()) {\n+            final Optional<Iec60870Device> device = lightMeasurementDevices.stream()\n+                    .filter(d -> d.getInformationObjectAddress().toString().equals(mg.getIdentification()))\n+                    .findFirst();\n+            device.ifPresent(d -> this.sendLightSensorStatusResponse(mg, d, responseMetadata));\n+        }\n+    }\n+\n+    private void sendLightSensorStatusResponse(final MeasurementGroupDto measurementGroupDto,\n+            final Iec60870Device device, final ResponseMetadata responseMetadata) {\n+        final ResponseMetadata rm = new ResponseMetadata.Builder()\n+                .withCorrelationUid(responseMetadata.getCorrelationUid())\n+                .withDeviceIdentification(device.getDeviceIdentification())\n+                .withDomainInfo(device.getDeviceType().domainType().domainInfo())\n+                .withMessageType(MessageType.GET_LIGHT_SENSOR_STATUS.name())\n+                .withOrganisationIdentification(responseMetadata.getOrganisationIdentification())\n+                .build();\n+\n+        final boolean on = ((BitmaskMeasurementElementDto) measurementGroupDto.getMeasurements()\n+                .get(0)\n+                .getMeasurementElements()\n+                .get(0)).getValue() == 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3NDE2OA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzkwNjU1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/entities/Iec60870Device.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTozMDo0OFrOGD16Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1Mjo1N1rOGF4Pzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjE3OQ==", "bodyText": "Is there a good reason the gateway device modelling is placed in the protocol adapter device?\nLooking at the smart metering domain the protocol adapter does not have this relation.\nThe relation between a device and its gateway device is in OSGP core, where for smart meters the details for identifying the device on the gateway are in the smart_meter table.\nI don't have a firm grasp of what the gateway device in the IEC60870 domain means, but unless there is a good reason it is different, I think it may better be more aligned across the domains.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406682179", "createdAt": "2020-04-10T09:30:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/entities/Iec60870Device.java", "diffHunk": "@@ -27,18 +31,33 @@\n     @Column(unique = true, nullable = false, length = 40)\n     private String deviceIdentification;\n \n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private DeviceType deviceType;\n+\n+    @Column\n+    private String gatewayDeviceIdentification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzYxNA==", "bodyText": "Gatewaydevice is placed here as well in order to prevent access to osgp-core database, while still being able to send light measurement device specific events to osgp-core (reusing existing osgp-core event functionality)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408817614", "createdAt": "2020-04-15T12:52:57Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/entities/Iec60870Device.java", "diffHunk": "@@ -27,18 +31,33 @@\n     @Column(unique = true, nullable = false, length = 40)\n     private String deviceIdentification;\n \n+    @Column(nullable = false)\n+    @Enumerated(EnumType.STRING)\n+    private DeviceType deviceType;\n+\n+    @Column\n+    private String gatewayDeviceIdentification;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjE3OQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMzkyNDk1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTozODo0NlrOGD2E8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOTozODo0NlrOGD2E8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NDkxNA==", "bodyText": "This check is a bit different from device.hasGatewayDevice(), it looks cleaner to use the method from the device than to replicate the logic.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406684914", "createdAt": "2020-04-10T09:38:46Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/integration-test/java/org/opensmartgridplatform/adapter/protocol/iec60870/integrationtests/steps/ConnectionSteps.java", "diffHunk": "@@ -82,26 +84,43 @@ public void givenIec60870DeviceIsNotConnected() throws ConnectionFailureExceptio\n                 .thenReturn(deviceConnection);\n     }\n \n-    @Given(\"an existing connection with an IEC60870 device\")\n-    public void givenIec60870DeviceIsConnected() throws ClientConnectionAlreadyInCacheException {\n-        LOGGER.debug(\"Given IEC60870 device is connected\");\n-\n+    @Given(\"an existing connection with IEC60870 device {string} of type {string}\")\n+    public void givenIec60870DeviceIsConnected(final String deviceIdentification, final String typeOfDevice)\n+            throws Exception {\n+        LOGGER.debug(\"Given an existing connection with IEC60870 device {} of type {}\", deviceIdentification,\n+                typeOfDevice);\n+        final DeviceType deviceType = DeviceType.valueOf(typeOfDevice);\n         // Make sure the connection event listener works as expected\n-        final ResponseMetadata responseMetadata = new ResponseMetadata.Builder()\n-                .withDeviceIdentification(DEFAULT_DEVICE_IDENTIFICATION)\n-                .withOrganisationIdentification(DEFAULT_ORGANISATION_IDENTIFICATION)\n-                .withDomainInfo(new DomainInfo(DEFAULT_DOMAIN, DEFAULT_DOMAIN_VERSION))\n-                .withMessageType(DEFAULT_MESSAGE_TYPE)\n-                .build();\n+        this.connectionParameters = this.initConnectionParameters(deviceIdentification);\n+        final ResponseMetadata responseMetadata = this.initResponseMetadata(deviceIdentification, deviceType);\n         this.connectionEventListener = new ClientConnectionEventListener(\n                 this.connectionParameters.getDeviceIdentification(), this.connectionCacheSpy,\n                 this.clientAsduHandlerRegistry, responseMetadata);\n \n         // Make sure a connection could be retrieved from the cache\n         // Only needed for scenarios sending requests to a device\n-        final Connection connection = mock(Connection.class);\n-        this.connectionCacheSpy.addConnection(DEFAULT_DEVICE_IDENTIFICATION,\n-                new DeviceConnection(connection, this.connectionParameters));\n+        // final Connection connection = mock(Connection.class);\n+        this.connectionCacheSpy.addConnection(deviceIdentification,\n+                new DeviceConnection(this.connection, this.connectionParameters));\n+    }\n+\n+    @When(\"I connect to IEC60870 device {string}\")\n+    public void whenIConnectToIEC60870Device(final String deviceIdentification) throws Exception {\n+        LOGGER.debug(\"When I connect to IEC60870 device {}\", deviceIdentification);\n+        final Iec60870Device device = this.iec60870DeviceSteps.getDevice(deviceIdentification)\n+                .orElseThrow(() -> new Exception(\"Device not found\"));\n+        final DeviceType deviceType = device.getDeviceType();\n+        String connectionDevice = deviceIdentification;\n+        if (device.getGatewayDeviceIdentification() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDEwMTk4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/exceptions/AsduHandlerException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTowNjozNFrOGD3sqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMjo1OTozNVrOGGkELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMTQ2Nw==", "bodyText": "Any reason this is a checked exception?\nThe advice of Effective Java for instance, is only to use checked exceptions if a caller can avoid the exception by proper use of the API, or if there is something useful the caller can do when the exception is caught.\nI am not sure if these conditions apply here, but I wouldn't think so by what I have seen until now.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406711467", "createdAt": "2020-04-10T11:06:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/exceptions/AsduHandlerException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions;\n+\n+import java.util.function.Supplier;\n+\n+public class AsduHandlerException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNTUzMg==", "bodyText": "Removed the exception (replaced throwing exceptions by logging errors)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409535532", "createdAt": "2020-04-16T12:59:35Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/exceptions/AsduHandlerException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions;\n+\n+import java.util.function.Supplier;\n+\n+public class AsduHandlerException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMTQ2Nw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDExNTI2OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNDoyMVrOGD30uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDowNTowOFrOGGm-zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzUzMQ==", "bodyText": "It feels a little inconsistent that closing all connections is called closeAll... while closing a single connection is called disconnect.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406713531", "createdAt": "2020-04-10T11:14:21Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "diffHunk": "@@ -21,6 +22,24 @@\n      */\n     ClientConnection getConnection(RequestMetadata requestMetadata) throws ConnectionFailureException;\n \n+    /**\n+     * Closes the {@link Connection}, sends a disconnect request and closes the\n+     * socket.\n+     *\n+     * @param deviceIdentification\n+     *            Device for which to close the connection.\n+     */\n+    void disconnect(String deviceIdentification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4NzE2OQ==", "bodyText": "Hmm, I think you disconnect a device by closing the connnection, so for a device it would be appropriate to use disconnect?\nAnyway, renamed methods to:\ncloseConnection(String deviceIdentification)\nclose(ClientConnection connection)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409387169", "createdAt": "2020-04-16T08:47:02Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "diffHunk": "@@ -21,6 +22,24 @@\n      */\n     ClientConnection getConnection(RequestMetadata requestMetadata) throws ConnectionFailureException;\n \n+    /**\n+     * Closes the {@link Connection}, sends a disconnect request and closes the\n+     * socket.\n+     *\n+     * @param deviceIdentification\n+     *            Device for which to close the connection.\n+     */\n+    void disconnect(String deviceIdentification);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzUzMQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4MzMwOQ==", "bodyText": "OK with the rename, maybe if the javadocs had looked more like your explanation, I wouldn't have commented about this.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409583309", "createdAt": "2020-04-16T14:05:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "diffHunk": "@@ -21,6 +22,24 @@\n      */\n     ClientConnection getConnection(RequestMetadata requestMetadata) throws ConnectionFailureException;\n \n+    /**\n+     * Closes the {@link Connection}, sends a disconnect request and closes the\n+     * socket.\n+     *\n+     * @param deviceIdentification\n+     *            Device for which to close the connection.\n+     */\n+    void disconnect(String deviceIdentification);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzUzMQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDExODA0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMToxNjoxMVrOGD32gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODoxMzo0NFrOGGZtLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzk4Ng==", "bodyText": "This documentation reads like implementation notes. For a service I think it may be cleaner to leave these out, or to add them under a section for implementation details that are expected from implementors.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406713986", "createdAt": "2020-04-10T11:16:11Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "diffHunk": "@@ -21,6 +22,24 @@\n      */\n     ClientConnection getConnection(RequestMetadata requestMetadata) throws ConnectionFailureException;\n \n+    /**\n+     * Closes the {@link Connection}, sends a disconnect request and closes the\n+     * socket.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM2NTgwNQ==", "bodyText": "Refactored the code, removing interfaces and renaming ...impl classes, as a result the documentation is gone...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409365805", "createdAt": "2020-04-16T08:13:44Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionService.java", "diffHunk": "@@ -21,6 +22,24 @@\n      */\n     ClientConnection getConnection(RequestMetadata requestMetadata) throws ConnectionFailureException;\n \n+    /**\n+     * Closes the {@link Connection}, sends a disconnect request and closes the\n+     * socket.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcxMzk4Ng=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDE3NTgxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTo0NDo1NVrOGD4W3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1OTo1NlrOGF4hEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMjI3MA==", "bodyText": "No need to be explicit about interface methods being abstract.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406722270", "createdAt": "2020-04-10T11:44:55Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseService.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+\n+@FunctionalInterface\n+public interface DeviceResponseService {\n+\n+    abstract void process(MeasurementReportDto measurementReportDto, ResponseMetadata responseMetadata)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMjAzNA==", "bodyText": "Probably forgot to remove this when changing from abstract class to interface...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408822034", "createdAt": "2020-04-15T12:59:56Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseService.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+\n+@FunctionalInterface\n+public interface DeviceResponseService {\n+\n+    abstract void process(MeasurementReportDto measurementReportDto, ResponseMetadata responseMetadata)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMjI3MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDE4Mjc0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTo0ODo0MFrOGD4ayw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzowMTo0M1rOGGkJZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMzI3NQ==", "bodyText": "I'd expect an AsduHandlerException with ASDU handlers, not at the level of abstraction that this service appears to be at.\nIt may be my lack of understanding, unlucky naming, or just out of place.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406723275", "createdAt": "2020-04-10T11:48:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseService.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+\n+@FunctionalInterface\n+public interface DeviceResponseService {\n+\n+    abstract void process(MeasurementReportDto measurementReportDto, ResponseMetadata responseMetadata)\n+            throws AsduHandlerException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTUzNjg3MA==", "bodyText": "Looked convenient to reuse the exception as these services are only used from within the ASDU handlers.\nRefactored code to log errors instead of throwing exceptions...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409536870", "createdAt": "2020-04-16T13:01:43Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseService.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.exceptions.AsduHandlerException;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+\n+@FunctionalInterface\n+public interface DeviceResponseService {\n+\n+    abstract void process(MeasurementReportDto measurementReportDto, ResponseMetadata responseMetadata)\n+            throws AsduHandlerException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyMzI3NQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDE4ODMwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseServiceMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMTo1MToyNVrOGD4d5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoxMDozMFrOGGnOow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNDA3MA==", "bodyText": "The name ending in map suggests map semantics (while the map here looks like it is an implementation detail). Maybe a name not tied to the collection API, but more to the general business purpose would be a bit clearer.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406724070", "createdAt": "2020-04-10T11:51:25Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseServiceMap.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DeviceResponseServiceMap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU0MjQ4MA==", "bodyText": "Would DeviceResponseServiceRegistry be ok?\nAt least it would be similar to for example the AsduHandlerRegistry.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409542480", "createdAt": "2020-04-16T13:10:00Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseServiceMap.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DeviceResponseServiceMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNDA3MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU4NzM2Mw==", "bodyText": "Something with registry seems appropriate, especially if this is used in other places in the code base as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409587363", "createdAt": "2020-04-16T14:10:30Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/DeviceResponseServiceMap.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class DeviceResponseServiceMap {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcyNDA3MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDI2NTk5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/asduhandlers/MeasurementAsduHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMjoyNzo0MlrOGD5K0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjozMDoyNFrOGGtk2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTU2OQ==", "bodyText": "Regarding the withNewCorrelationUid, I commented before about why this is done.\nBy now I have become aware of the ClientConnectionEventListener that has ResponseMetadata for a device, created when the connection was set up.\nI would suspect that it might be better to create the new correlation UID at the source of something you could follow.\nIn this case, from newASdu, when the asduHandler is called with the response metadata. It may be better to call it from there with a new correlation UID and don't mess with it later-on when the metadata passes other code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406735569", "createdAt": "2020-04-10T12:27:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/asduhandlers/MeasurementAsduHandler.java", "diffHunk": "@@ -50,13 +51,14 @@ public MeasurementAsduHandler(final ASduType asduType) {\n     }\n \n     @Override\n-    public void handleAsdu(final ASdu asdu, final ResponseMetadata responseMetadata) {\n+    public void handleAsdu(final ASdu asdu, final ResponseMetadata responseMetadata) throws AsduHandlerException {\n         LOGGER.info(\"Received measurement of type {}.\", asdu.getTypeIdentification());\n         final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n                 .createWithNewCorrelationUid(responseMetadata);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5MTM1Mw==", "bodyText": "Agreed and already updated based on your earlier comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409691353", "createdAt": "2020-04-16T16:30:24Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/asduhandlers/MeasurementAsduHandler.java", "diffHunk": "@@ -50,13 +51,14 @@ public MeasurementAsduHandler(final ASduType asduType) {\n     }\n \n     @Override\n-    public void handleAsdu(final ASdu asdu, final ResponseMetadata responseMetadata) {\n+    public void handleAsdu(final ASdu asdu, final ResponseMetadata responseMetadata) throws AsduHandlerException {\n         LOGGER.info(\"Received measurement of type {}.\", asdu.getTypeIdentification());\n         final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n                 .createWithNewCorrelationUid(responseMetadata);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjczNTU2OQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk0MDMxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/ConnectionParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjozODo1NVrOGD_ePg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzowODowMVrOGF40WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODg0Ng==", "bodyText": "This is fine, but you could consider setting these from constants in ConnectionParameters.\nThe advantage of that could be that the defaults are documented in a way and are easily available to other code if desired.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406838846", "createdAt": "2020-04-10T16:38:55Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/ConnectionParameters.java", "diffHunk": "@@ -61,10 +61,10 @@ public String toString() {\n     }\n \n     public static class Builder {\n-        private String ipAddress = null;\n+        private String ipAddress = \"localhost\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNjk2OQ==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408826969", "createdAt": "2020-04-15T13:08:01Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/ConnectionParameters.java", "diffHunk": "@@ -61,10 +61,10 @@ public String toString() {\n     }\n \n     public static class Builder {\n-        private String ipAddress = null;\n+        private String ipAddress = \"localhost\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzODg0Ng=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk0Njg4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DeviceType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjo0MToyMFrOGD_iNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMzoxMjoyMVrOGF4_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTg2Mw==", "bodyText": "This is certainly shorter than DISTRIBUTION_AUTOMATION_DEVICE.\nGiven that we usually do not use abbreviations, why do so here, or is DA such a highly established abbreviation that it is more obvious to use than the longer variation? (Would it no longer fit in the database columns where it could end up?)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406839863", "createdAt": "2020-04-10T16:41:20Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DeviceType.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+public enum DeviceType {\n+    DA_DEVICE(DomainType.DISTRIBUTION_AUTOMATION),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyOTc1OQ==", "bodyText": "Changed", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408829759", "createdAt": "2020-04-15T13:12:21Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DeviceType.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+public enum DeviceType {\n+    DA_DEVICE(DomainType.DISTRIBUTION_AUTOMATION),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzOTg2Mw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDk3NDYyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNjo1MToyMFrOGD_zDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzoyMToxN1rOGGk9zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDE3Mw==", "bodyText": "It feels odd that the protocol adapter would have to know about stuff like device type and domain.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406844173", "createdAt": "2020-04-10T16:51:20Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+public enum DomainType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU1MDI4NQ==", "bodyText": "I do partially agree, for most protocol adapters the response messages are also domain specific. For being able to send domain specific messages, some domain knowledge will be needed. Otherwise we would have to create either protocol specific response messages that will need to be understood by the domain adapters (introducing protocol knowledge in the domain adapters) or we would have to define such generic messages so that they can be understood by both protocol and domain adapters, or ???\nThe knowledge of domain was mainly introduced as a means for knowing to which domain adapter the responses should be routed to. For this routing I also added another story on the backlog (FLEX-5304, which also contains a still unanswered question about some routing options, maybe you can have a look as well?)\nIn the meantime it will probably be sufficient for now to reuse the domain info transferred from the request metadata into the response metadata, which should be available in the client connection event listener/asdu handlers...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409550285", "createdAt": "2020-04-16T13:21:17Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainType.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+public enum DomainType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0NDE3Mw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAwNjkyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowMzoyMlrOGEAHTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDoyMDo0MFrOGGnuZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0OTM1Nw==", "bodyText": "Is there some logical place where we could manage values like these as constants?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406849357", "createdAt": "2020-04-10T17:03:22Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg0OTc5Ng==", "bodyText": "Would have been nice to have an enum for these values in j60870 library.\nIt looks like a subset of the CauseOfTransmission.\nCreated an enum in osgp-iec0870, although we will probably only be using INTERROGATED_BY_STATION <20> for now.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408849796", "createdAt": "2020-04-15T13:40:41Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0OTM1Nw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU5NTQ5Mw==", "bodyText": "This brings back memories from some changes in the DLMS library where enums exist(ed) for many types, which we found useful, but they are/were deprecated by the library maintainers and may be removed any time.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409595493", "createdAt": "2020-04-16T14:20:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0OTM1Nw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAxNjc5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzowNzoxMFrOGEANQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxMTo1OFrOGF7pfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDg4MA==", "bodyText": "It would probably be a little more robust if the CauseOfTransmission would be in a local variable, like the commonAddress and the ieQualifierOfInterrogationValue. By repeating it there is always the risk these get out of sync by code modifications, making the message misleading. Same for the IeQualifierOfInterrogation.\nThen again, this creation of an object that will presumably be generated elsewhere looks dodgy. If the library changes how would you know you are logging the correct information? (Or is there some test for this?)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406850880", "createdAt": "2020-04-10T17:07:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;\n+            final int originatorAddress = 0;\n+            final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n+\n+            deviceConnection.getConnection()\n+                    .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n+                            new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue));\n+\n+            // interrogation command creates this asdu internally, however we\n+            // need it here as well for logging...\n+            final ASdu asdu = new ASdu(ASduType.C_IC_NA_1, false, CauseOfTransmission.ACTIVATION, false, false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3MzM0Mg==", "bodyText": "Created local variables and added unit test.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408873342", "createdAt": "2020-04-15T14:11:58Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;\n+            final int originatorAddress = 0;\n+            final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n+\n+            deviceConnection.getConnection()\n+                    .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n+                            new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue));\n+\n+            // interrogation command creates this asdu internally, however we\n+            // need it here as well for logging...\n+            final ASdu asdu = new ASdu(ASduType.C_IC_NA_1, false, CauseOfTransmission.ACTIVATION, false, false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1MDg4MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTAzNjU4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoxNDozOVrOGEAZaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoxMzo0MFrOGF7ubQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1Mzk5Mw==", "bodyText": "This is not about requesting the health status that failed, but the connect/interrogation.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406853993", "createdAt": "2020-04-10T17:14:39Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;\n+            final int originatorAddress = 0;\n+            final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n+\n+            deviceConnection.getConnection()\n+                    .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n+                            new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue));\n+\n+            // interrogation command creates this asdu internally, however we\n+            // need it here as well for logging...\n+            final ASdu asdu = new ASdu(ASduType.C_IC_NA_1, false, CauseOfTransmission.ACTIVATION, false, false,\n+                    originatorAddress, commonAddress,\n+                    new InformationObject(0, new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue)));\n+\n+            final LogItem logItem = new LogItem(deviceIdentification, organisationIdentification, false,\n+                    asdu.toString());\n+\n+            this.getLoggingService().log(logItem);\n+\n+        } catch (final IOException | RuntimeException e) {\n+            LOGGER.warn(\"Requesting the health status for device {} failed\", deviceIdentification, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDYwNQ==", "bodyText": "Updated message.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408874605", "createdAt": "2020-04-15T14:13:40Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/ConnectRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get health status requests.\n+ */\n+@Component\n+public class ConnectRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectRequestMessageProcessor.class);\n+\n+    public ConnectRequestMessageProcessor() {\n+        super(MessageType.CONNECT);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Connect request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+        LOGGER.info(\"Starting general interrogation for IEC60870 device {}\", deviceIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;\n+            final int originatorAddress = 0;\n+            final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n+\n+            deviceConnection.getConnection()\n+                    .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n+                            new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue));\n+\n+            // interrogation command creates this asdu internally, however we\n+            // need it here as well for logging...\n+            final ASdu asdu = new ASdu(ASduType.C_IC_NA_1, false, CauseOfTransmission.ACTIVATION, false, false,\n+                    originatorAddress, commonAddress,\n+                    new InformationObject(0, new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue)));\n+\n+            final LogItem logItem = new LogItem(deviceIdentification, organisationIdentification, false,\n+                    asdu.toString());\n+\n+            this.getLoggingService().log(logItem);\n+\n+        } catch (final IOException | RuntimeException e) {\n+            LOGGER.warn(\"Requesting the health status for device {} failed\", deviceIdentification, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1Mzk5Mw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA1NjQ1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/GetLightSensorStatusRequestMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyMjowNVrOGEAlaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODozOTozOFrOGHFLCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzA2NA==", "bodyText": "Do all processors execute a general interrogation, with CoT ACTIVATION?\nMaybe this is how it works, but it looks surprising if you don't know the protocol and see all the different processors (connect, health status, light sensor status) do the same thing.\nIf it indeed needs to be the same everywhere, shouldn't this be refactored to avoid the duplication?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406857064", "createdAt": "2020-04-10T17:22:05Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/GetLightSensorStatusRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get light sensor status requests.\n+ */\n+@Component\n+public class GetLightSensorStatusRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GetLightSensorStatusRequestMessageProcessor.class);\n+\n+    public GetLightSensorStatusRequestMessageProcessor() {\n+        super(MessageType.GET_LIGHT_SENSOR_STATUS);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Get light sensor status request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;\n+            final int originatorAddress = 0;\n+            final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n+\n+            deviceConnection.getConnection()\n+                    .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n+                            new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA3Nzk2MA==", "bodyText": "The get health status message processor could probably be removed once the connection restore mechanism uses the connect requests.\nThe get light sensor status should unfortunately use the general interrogation as well, because the read command will not be supported in the actual light measurement device implementation.\nRefactored duplicated code into a new GeneralInterrogationService class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r410077960", "createdAt": "2020-04-17T08:39:38Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/infra/messaging/processors/GetLightSensorStatusRequestMessageProcessor.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.processors;\n+\n+import java.io.IOException;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeQualifierOfInterrogation;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnection;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.infra.messaging.AbstractMessageProcessor;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class for processing get light sensor status requests.\n+ */\n+@Component\n+public class GetLightSensorStatusRequestMessageProcessor extends AbstractMessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GetLightSensorStatusRequestMessageProcessor.class);\n+\n+    public GetLightSensorStatusRequestMessageProcessor() {\n+        super(MessageType.GET_LIGHT_SENSOR_STATUS);\n+    }\n+\n+    @Override\n+    public void process(final ClientConnection deviceConnection, final RequestMetadata requestMetadata)\n+            throws ProtocolAdapterException {\n+\n+        final String deviceIdentification = requestMetadata.getDeviceIdentification();\n+        final String organisationIdentification = requestMetadata.getOrganisationIdentification();\n+\n+        LOGGER.info(\"Get light sensor status request for IEC60870 device {} for organisation {}\", deviceIdentification,\n+                organisationIdentification);\n+\n+        try {\n+            // Perform general interrogation\n+            final int ieQualifierOfInterrogationValue = 20;\n+            final int originatorAddress = 0;\n+            final int commonAddress = deviceConnection.getConnectionParameters().getCommonAddress();\n+\n+            deviceConnection.getConnection()\n+                    .interrogation(commonAddress, CauseOfTransmission.ACTIVATION,\n+                            new IeQualifierOfInterrogation(ieQualifierOfInterrogationValue));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzA2NA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTA2NzU3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/resources/db/migration/V20200408162500000__Additional_device_fields.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNzoyNjoyMFrOGEAsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMjozNlrOGGtQjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODc4MA==", "bodyText": "Should there be constraints so that either both the gateway_device_identification and information_object_address are set or neither?\nIf an information_object_address should be unique for iec60870_device per gateway device, is this enforced? (Would it be possible through constraints, or logic in the services/repositories?)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r406858780", "createdAt": "2020-04-10T17:26:20Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/resources/db/migration/V20200408162500000__Additional_device_fields.sql", "diffHunk": "@@ -0,0 +1,17 @@\n+DO $$\n+BEGIN\n+\n+  IF NOT EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = current_schema AND table_name = 'iec60870_device' AND column_name = 'device_type')\n+  THEN\n+  \tALTER TABLE iec60870_device ADD COLUMN device_type VARCHAR(255) NOT NULL DEFAULT 'DA_DEVICE';\n+  \tALTER TABLE iec60870_device ADD COLUMN gateway_device_identification VARCHAR(40);\n+  \tALTER TABLE iec60870_device ADD COLUMN information_object_address INTEGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NjE1Nw==", "bodyText": "Added additional unique and check constraints.\nWas wondering if it would make sense to include device_type as well in the check?\n(for now, only for device type 'LIGHT_MEASUREMENT_DEVICE' both gateway_device_identification and information_object_address should be set, otherwise both should be null)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409686157", "createdAt": "2020-04-16T16:22:36Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/resources/db/migration/V20200408162500000__Additional_device_fields.sql", "diffHunk": "@@ -0,0 +1,17 @@\n+DO $$\n+BEGIN\n+\n+  IF NOT EXISTS(SELECT 1 FROM information_schema.columns WHERE table_schema = current_schema AND table_name = 'iec60870_device' AND column_name = 'device_type')\n+  THEN\n+  \tALTER TABLE iec60870_device ADD COLUMN device_type VARCHAR(255) NOT NULL DEFAULT 'DA_DEVICE';\n+  \tALTER TABLE iec60870_device ADD COLUMN gateway_device_identification VARCHAR(40);\n+  \tALTER TABLE iec60870_device ADD COLUMN information_object_address INTEGER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1ODc4MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQ5NjIyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/Iec60870InformationObjectConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzozNDo1NlrOGFB0FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNTowOFrOGF8Qvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNTc4MA==", "bodyText": "Not from the changes in this pull request, but this looks like a painfully over-complicated way to do the same as could be accomplished with System.currentTimeMillis().", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r407925780", "createdAt": "2020-04-14T07:34:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/Iec60870InformationObjectConverterTest.java", "diffHunk": "@@ -31,17 +33,24 @@\n \n     private static final long TIMESTAMP_NOW = ZonedDateTime.now(ZoneOffset.UTC).toInstant().toEpochMilli();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4MzM5MQ==", "bodyText": "Updated", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408883391", "createdAt": "2020-04-15T14:25:08Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/Iec60870InformationObjectConverterTest.java", "diffHunk": "@@ -31,17 +33,24 @@\n \n     private static final long TIMESTAMP_NOW = ZonedDateTime.now(ZoneOffset.UTC).toInstant().toEpochMilli();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyNTc4MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjUyMjgyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0MjoxNVrOGFCELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyNTo0MlrOGF8SiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyOTkwMg==", "bodyText": "2020?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r407929902", "createdAt": "2020-04-14T07:42:15Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg4Mzg0OQ==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408883849", "createdAt": "2020-04-15T14:25:42Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkyOTkwMg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU0NDM3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0ODoxMFrOGFCQ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDozODo1NFrOGF86Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMzEzNg==", "bodyText": "I am fine with the bit-shifting if it is your preference, but wanted to check you have considered using binary literals instead? I personally find for small values like single bytes they are quite expressive (e.g. 0b00010000 instead of 1 << 4).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r407933136", "createdAt": "2020-04-14T07:48:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.mapping.informationelements;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+\n+public class IeSinglePointWithQualityConverterTest {\n+\n+    private static final int IE_OFF = 0;\n+    private static final int IE_ON = 1 << 0;\n+    private static final int IE_QUALITY_BLOCKED = 1 << 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NDAzNQ==", "bodyText": "I had not considered them yet, refactored the code...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408894035", "createdAt": "2020-04-15T14:38:54Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.mapping.informationelements;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+\n+public class IeSinglePointWithQualityConverterTest {\n+\n+    private static final int IE_OFF = 0;\n+    private static final int IE_ON = 1 << 0;\n+    private static final int IE_QUALITY_BLOCKED = 1 << 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMzEzNg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjU2MzgyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MzozNVrOGFCctw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0MDozMVrOGF8_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNjE4Mw==", "bodyText": "This will work, since the distinct values do not have overlapping bit values. It feels semantically more appropriate however in case of combining bit patterns, to use | (bitwise inclusive or) instead of + (addition).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r407936183", "createdAt": "2020-04-14T07:53:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.mapping.informationelements;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+\n+public class IeSinglePointWithQualityConverterTest {\n+\n+    private static final int IE_OFF = 0;\n+    private static final int IE_ON = 1 << 0;\n+    private static final int IE_QUALITY_BLOCKED = 1 << 4;\n+    private static final int IE_QUALITY_SUBSTITUTED = 1 << 5;\n+    private static final int IE_QUALITY_NOT_TOPICAL = 1 << 6;\n+    private static final int IE_QUALITY_INVALID = 1 << 7;\n+    private static final int IE_ALL = IE_ON + IE_QUALITY_BLOCKED + IE_QUALITY_SUBSTITUTED + IE_QUALITY_NOT_TOPICAL\n+            + IE_QUALITY_INVALID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5NTMyMQ==", "bodyText": "Updated", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408895321", "createdAt": "2020-04-15T14:40:31Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/mapping/informationelements/IeSinglePointWithQualityConverterTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.application.mapping.informationelements;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+\n+public class IeSinglePointWithQualityConverterTest {\n+\n+    private static final int IE_OFF = 0;\n+    private static final int IE_ON = 1 << 0;\n+    private static final int IE_QUALITY_BLOCKED = 1 << 4;\n+    private static final int IE_QUALITY_SUBSTITUTED = 1 << 5;\n+    private static final int IE_QUALITY_NOT_TOPICAL = 1 << 6;\n+    private static final int IE_QUALITY_INVALID = 1 << 7;\n+    private static final int IE_ALL = IE_ON + IE_QUALITY_BLOCKED + IE_QUALITY_SUBSTITUTED + IE_QUALITY_NOT_TOPICAL\n+            + IE_QUALITY_INVALID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNjE4Mw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjY0Mjk1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxNDoxN1rOGFDNfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NDowNFrOGF9KVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0ODY3MA==", "bodyText": "Starting test method names with test looks like a reminder of an old JUnit convention to identify test methods (for which we have the Test annotation now).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r407948670", "createdAt": "2020-04-14T08:14:17Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionWhenInCache() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5ODEzMw==", "bodyText": "Personally I prefer to start test methods with should, however Tests methods are still created starting with test when creating new JUnit test cases in Eclipse...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408898133", "createdAt": "2020-04-15T14:44:04Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionWhenInCache() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk0ODY3MA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjY1NDY1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxNzoxN1rOGFDUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1NDowMFrOGF9p_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MDQ2Mg==", "bodyText": "Are these javadocs the result of some form of automatic test generation?\nFor me it feels like some extra lines I should just try to ignore. I believe functionality being tested is better reveilled through well-picked test method names.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r407950462", "createdAt": "2020-04-14T08:17:17Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwNjIzOQ==", "bodyText": "Yes, javadocs are automatically created when creating a JUnit test case in Eclipse.\nRemoved them.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408906239", "createdAt": "2020-04-15T14:54:00Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MDQ2Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzM1NTA3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMToyMToxN1rOGFKB7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowMDoxM1rOGF99Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2MDM5Ng==", "bodyText": "CreatedConnection or NewConnection instead of CreateConnection? (Also in the other method with CreateConnection in its name?)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408060396", "createdAt": "2020-04-14T11:21:17Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"DA_DVC_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createDistributionAutomationDevice(deviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(deviceIdentification);\n+        this.connectionCache.addConnection(deviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionToGatewayDeviceWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"LM_DVC_1\";\n+        final String gatewayDeviceIdentification = \"LM_GATEWAY_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createLightMeasurementDevice(deviceIdentification,\n+                gatewayDeviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(gatewayDeviceIdentification);\n+        this.connectionCache.addConnection(gatewayDeviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnCreateConnectionWhenNotInCache() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMTIwNg==", "bodyText": "Could be I meant to create methods with ShouldCreate instead of ShouldReturnCreate...\nRenamed to ShouldReturnNew...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408911206", "createdAt": "2020-04-15T15:00:13Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"DA_DVC_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createDistributionAutomationDevice(deviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(deviceIdentification);\n+        this.connectionCache.addConnection(deviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionToGatewayDeviceWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"LM_DVC_1\";\n+        final String gatewayDeviceIdentification = \"LM_GATEWAY_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createLightMeasurementDevice(deviceIdentification,\n+                gatewayDeviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(gatewayDeviceIdentification);\n+        this.connectionCache.addConnection(gatewayDeviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnCreateConnectionWhenNotInCache() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2MDM5Ng=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDI5MDI5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTowMzo0N1rOGFTIWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowMjoyMlrOGF-D2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwOTQ5OA==", "bodyText": "I found the name with DisconnectString a bit confusing. With a general type like String, the name would be clearer if it was something like DisconnectByDeviceIdentification or so.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408209498", "createdAt": "2020-04-14T15:03:47Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"DA_DVC_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createDistributionAutomationDevice(deviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(deviceIdentification);\n+        this.connectionCache.addConnection(deviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionToGatewayDeviceWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"LM_DVC_1\";\n+        final String gatewayDeviceIdentification = \"LM_GATEWAY_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createLightMeasurementDevice(deviceIdentification,\n+                gatewayDeviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(gatewayDeviceIdentification);\n+        this.connectionCache.addConnection(gatewayDeviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnCreateConnectionWhenNotInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"DA_DVC_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createDistributionAutomationDevice(deviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(deviceIdentification);\n+        when(this.iec60870Client.connect(eq(expectedConnection.getConnectionParameters()),\n+                any(ConnectionEventListener.class))).thenReturn(expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnCreateConnectionToGatewayDeviceWhenNotInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"LM_DVC_1\";\n+        final String gatewayDeviceIdentification = \"LM_GATEWAY_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createLightMeasurementDevice(deviceIdentification,\n+                gatewayDeviceIdentification);\n+        final Iec60870Device gateway = Iec60870DeviceFactory\n+                .createLightMeasurementGatewayDevice(gatewayDeviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(gatewayDeviceIdentification))\n+                .thenReturn(Optional.of(gateway));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(gatewayDeviceIdentification);\n+        when(this.iec60870Client.connect(eq(expectedConnection.getConnectionParameters()),\n+                any(ConnectionEventListener.class))).thenReturn(expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#disconnect(java.lang.String)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testDisconnectString() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMjg1Nw==", "bodyText": "Probably auto-generated method names... Renamed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408912857", "createdAt": "2020-04-15T15:02:22Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/ClientConnectionServiceImplTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ConnectionEventListener;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.entities.Iec60870Device;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.repositories.Iec60870DeviceRepository;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.ClientConnectionFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.Iec60870DeviceFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.factories.RequestMetadataFactory;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ClientConnectionServiceImplTest {\n+\n+    @InjectMocks\n+    private ClientConnectionServiceImpl clientConnectionService;\n+\n+    @Spy\n+    private ClientConnectionCacheImpl connectionCache;\n+\n+    @Mock\n+    private Client iec60870Client;\n+\n+    @Mock\n+    private Iec60870DeviceRepository iec60870DeviceRepository;\n+\n+    @Mock\n+    private ClientAsduHandlerRegistry clientAsduHandlerRegistry;\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"DA_DVC_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createDistributionAutomationDevice(deviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(deviceIdentification);\n+        this.connectionCache.addConnection(deviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnExistingConnectionToGatewayDeviceWhenInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"LM_DVC_1\";\n+        final String gatewayDeviceIdentification = \"LM_GATEWAY_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createLightMeasurementDevice(deviceIdentification,\n+                gatewayDeviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(gatewayDeviceIdentification);\n+        this.connectionCache.addConnection(gatewayDeviceIdentification, expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnCreateConnectionWhenNotInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"DA_DVC_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createDistributionAutomationDevice(deviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(deviceIdentification);\n+        when(this.iec60870Client.connect(eq(expectedConnection.getConnectionParameters()),\n+                any(ConnectionEventListener.class))).thenReturn(expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#getConnection(org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.RequestMetadata)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testGetConnectionShouldReturnCreateConnectionToGatewayDeviceWhenNotInCache() throws Exception {\n+        // Arrange\n+        final String deviceIdentification = \"LM_DVC_1\";\n+        final String gatewayDeviceIdentification = \"LM_GATEWAY_1\";\n+        final Iec60870Device device = Iec60870DeviceFactory.createLightMeasurementDevice(deviceIdentification,\n+                gatewayDeviceIdentification);\n+        final Iec60870Device gateway = Iec60870DeviceFactory\n+                .createLightMeasurementGatewayDevice(gatewayDeviceIdentification);\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(deviceIdentification))\n+                .thenReturn(Optional.of(device));\n+        when(this.iec60870DeviceRepository.findByDeviceIdentification(gatewayDeviceIdentification))\n+                .thenReturn(Optional.of(gateway));\n+\n+        final RequestMetadata requestMetadata = RequestMetadataFactory.forDevice(deviceIdentification);\n+        final ClientConnection expectedConnection = ClientConnectionFactory.forDevice(gatewayDeviceIdentification);\n+        when(this.iec60870Client.connect(eq(expectedConnection.getConnectionParameters()),\n+                any(ConnectionEventListener.class))).thenReturn(expectedConnection);\n+\n+        // Act\n+        final ClientConnection actualConnection = this.clientConnectionService.getConnection(requestMetadata);\n+\n+        // Assert\n+        assertThat(actualConnection).isEqualTo(expectedConnection);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.ClientConnectionServiceImpl#disconnect(java.lang.String)}.\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    void testDisconnectString() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIwOTQ5OA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDM2NDcwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/asduhandlers/SinglePointWithQualityAsduHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToxOTowNlrOGFT3Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowMzoyMFrOGF-GjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMTQ2Mg==", "bodyText": "These should either be final or not follow the naming convention for constants (I'd guess the first).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408221462", "createdAt": "2020-04-14T15:19:06Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/asduhandlers/SinglePointWithQualityAsduHandlerTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.asduhandlers;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.application.services.Iec60870AsduConverterService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.application.services.LightMeasurementGatewayDeviceResponseService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.LogItemFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.DeviceResponseServiceMap;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LoggingService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.builders.AsduBuilder;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementElementDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportHeaderDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SinglePointWithQualityAsduHandlerTest {\n+\n+    private static final String GATEWAY_DEVICE_IDENTIFICATION = \"TEST-GATEWAY-1\";\n+    private static final DeviceType GATEWAY_DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_GATEWAY;\n+    private static final int LMD_1_IOA = 1;\n+    private static final boolean LMD_1_ON = true;\n+    private static final int LMD_2_IOA = 2;\n+    private static final boolean LMD_2_ON = false;\n+    private static String MEASUREMENT_TYPE = ASduType.M_SP_NA_1.name();\n+    private static String MEASUREMENT_REASON = CauseOfTransmission.INTERROGATED_BY_STATION.name();\n+    private static int MEASUREMENT_ORIGINATOR_ADDRESS = 0;\n+    private static int MEASUREMENT_COMMON_ADDRESS = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMzU0OQ==", "bodyText": "Added missing finals", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408913549", "createdAt": "2020-04-15T15:03:20Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/services/asduhandlers/SinglePointWithQualityAsduHandlerTest.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.asduhandlers;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.IeSinglePointWithQuality;\n+import org.openmuc.j60870.ie.InformationObject;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.application.services.Iec60870AsduConverterService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.application.services.LightMeasurementGatewayDeviceResponseService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.LogItemFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.factories.ResponseMetadataFactory;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.DeviceResponseServiceMap;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.services.LoggingService;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.DeviceType;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.LogItem;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects.ResponseMetadata;\n+import org.opensmartgridplatform.adapter.protocol.iec60870.testutils.builders.AsduBuilder;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementElementDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementGroupDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportDto;\n+import org.opensmartgridplatform.dto.da.measurements.MeasurementReportHeaderDto;\n+import org.opensmartgridplatform.dto.da.measurements.elements.BitmaskMeasurementElementDto;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SinglePointWithQualityAsduHandlerTest {\n+\n+    private static final String GATEWAY_DEVICE_IDENTIFICATION = \"TEST-GATEWAY-1\";\n+    private static final DeviceType GATEWAY_DEVICE_TYPE = DeviceType.LIGHT_MEASUREMENT_GATEWAY;\n+    private static final int LMD_1_IOA = 1;\n+    private static final boolean LMD_1_ON = true;\n+    private static final int LMD_2_IOA = 2;\n+    private static final boolean LMD_2_ON = false;\n+    private static String MEASUREMENT_TYPE = ASduType.M_SP_NA_1.name();\n+    private static String MEASUREMENT_REASON = CauseOfTransmission.INTERROGATED_BY_STATION.name();\n+    private static int MEASUREMENT_ORIGINATOR_ADDRESS = 0;\n+    private static int MEASUREMENT_COMMON_ADDRESS = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyMTQ2Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQwNzg5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNToyODowN1rOGFUSjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTowNzowOFrOGF-Rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODQ5NA==", "bodyText": "Any reason this has default visibility instead of public like most test classes?\nThe same could be questioned regarding the test methods, and other elements that are left with default visibility instead of being public or private.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408228494", "createdAt": "2020-04-14T15:28:07Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxNjQxMA==", "bodyText": "Auto-generated class and methods\nForgotten for constants....", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408916410", "createdAt": "2020-04-15T15:07:08Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyODQ5NA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQyMTcxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozMTowNFrOGFUbfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTozNjowOFrOGF_pRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDc4MQ==", "bodyText": "My initial thoughts were: what does this test? The actual DomainInfo is created just like the expected from the constants.\nMaybe rename the test to something with DomainInfoIsIdentifiedByDomainAndVersion.\nHmm, it appears the equality tests are already elsewhere in this class, making me doubt what this test has to offer?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408230781", "createdAt": "2020-04-14T15:31:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzODgyMQ==", "bodyText": "Removed", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408938821", "createdAt": "2020-04-15T15:36:08Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMDc4MQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQ0ODU1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozNzowNFrOGFUscQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozNzowNFrOGFUscQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNTEyMQ==", "bodyText": "Not necessarily wrong, but a bit over the top I'd say.\nIt looks like this tests that getters return what has been set in the constructor.\nIt's be clearer if the constructor was inside the test if you really want to do this, so you can see inside the test method that the expected value is what was used to create the value object.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408235121", "createdAt": "2020-04-14T15:37:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQ2OTM4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo0MTo0MlrOGFU5iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNToyNzoxOFrOGGq40A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzODQ3Mg==", "bodyText": "For equality test, I see no advantage over assertThat(this).isEqualTo(that). If anything goes wrong chances are the error message is clearer when leaning on the assertions library.\nOther than that, testing equality on identical instances looks a bit over the top.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408238472", "createdAt": "2020-04-14T15:41:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0NzMxMg==", "bodyText": "Hmm, wouldn't that mean that you rely on the underlying implementation of isEqualTo to use the equals method in the class? (Which is of course very likely, but the underlying implementation might be slightly different and not use the equals method in all cases)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409647312", "createdAt": "2020-04-16T15:27:18Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzODQ3Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQ3ODE0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo0MzozN1rOGFU_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTo0MTo1MVrOGF_5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzOTkxMw==", "bodyText": "This makes that I have to scroll and look back at the constants to understand this test.\nIt would stand out more clear if both domain info objects were created in the test I think.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408239913", "createdAt": "2020-04-14T15:43:37Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForObjectsWithSameValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MjkwNA==", "bodyText": "Updated", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408942904", "createdAt": "2020-04-15T15:41:51Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForObjectsWithSameValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzOTkxMw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQ5NTkyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo0NzoyNVrOGFVKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjo0MToxNlrOGGuANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0Mjc2OA==", "bodyText": "For clearer messages if anything should ever go wrong, I'd just use an assertThat(this).isEqualTo(that) style assertion instead of the isTrue.\nA test name with something like DomainInfoIsIdentifiedByItsValues would look nicer in my opinion, as it is more about what is important than about there being an equals method that returns true.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408242768", "createdAt": "2020-04-14T15:47:25Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForObjectsWithSameValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, DOMAIN_VERSION);\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY5ODM1Ng==", "bodyText": "I think I will probably leave this as is for now. I prefer to use the triple-A style of unit testing, with the clear separation between arrange-act-assert in the code (similar to given-when-then in the cucumber tests).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409698356", "createdAt": "2020-04-16T16:41:16Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForObjectsWithSameValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, DOMAIN_VERSION);\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0Mjc2OA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDUyMjY4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTo1MzowOFrOGFVa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozOTozN1rOGGlxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NzAzNQ==", "bodyText": "I wouldn't test the general result of the toString contents.\nIf this is a specifically formatted result that is actually expected to contain certain text, it probably would be better to include another method for that.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408247035", "createdAt": "2020-04-14T15:53:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForObjectsWithSameValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, DOMAIN_VERSION);\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsFalseForObjectsWithDifferentDomainValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, DOMAIN_VERSION);\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isFalse();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsFalseForObjectsWithDifferentDomainVersionValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, \"1.0\");\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, \"2.0\");\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isFalse();\n+    }\n+\n+    @Test\n+    void testHashCode() {\n+        // Arrange\n+        final DomainInfo domainInfo = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+        final int expected = DOMAIN_INFO_PUBLIC_LIGHTING.hashCode();\n+        // Act\n+        final int actual = domainInfo.hashCode();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testToString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MzU2NQ==", "bodyText": "Result of an overly eager attempt to reach 100% unit test coverage by checking all methods in the add JUnit Test Case dialog in Eclipse..\nThat being said, I believe we still have plenty of classes not properly implementing equals, hashCode and toString...\nFound an external library especially for unit testing toString methods:\nhttps://github.com/jparams/to-string-verifier ;-)\nFor now I guess I'll leave it as is...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r409563565", "createdAt": "2020-04-16T13:39:37Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainInfoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainInfoTest {\n+    static final String DOMAIN_DISTRIBUTION_AUTOMATION = \"DISTRIBUTION_AUTOMATION\";\n+    static final String DOMAIN_PUBLIC_LIGHTING = \"PUBLIC_LIGHTING\";\n+    static final String DOMAIN_VERSION = \"1.0\";\n+    static final DomainInfo DOMAIN_INFO_DISTRIBUTION_AUTOMATION = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION,\n+            DOMAIN_VERSION);\n+    static final DomainInfo DOMAIN_INFO_PUBLIC_LIGHTING = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+\n+    @Test\n+    void testDomainInfo() {\n+        // Arrange\n+        final DomainInfo expected = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final DomainInfo actual = new DomainInfo(\"DISTRIBUTION_AUTOMATION\", \"1.0\");\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomain() {\n+        // Arrange\n+        final String expected = DOMAIN_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomain();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testGetDomainVersion() {\n+        // Arrange\n+        final String expected = DOMAIN_VERSION;\n+        // Act\n+        final String actual = DOMAIN_INFO_DISTRIBUTION_AUTOMATION.getDomainVersion();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForSameObjects() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsTrueForObjectsWithSameValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = DOMAIN_INFO_DISTRIBUTION_AUTOMATION;\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, DOMAIN_VERSION);\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isTrue();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsFalseForObjectsWithDifferentDomainValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, DOMAIN_VERSION);\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isFalse();\n+    }\n+\n+    @Test\n+    void testEqualsReturnsFalseForObjectsWithDifferentDomainVersionValues() {\n+        // Arrange\n+        final DomainInfo thisDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, \"1.0\");\n+        final DomainInfo otherDomainInfo = new DomainInfo(DOMAIN_DISTRIBUTION_AUTOMATION, \"2.0\");\n+        // Act\n+        final boolean actual = thisDomainInfo.equals(otherDomainInfo);\n+        // Assert\n+        assertThat(actual).isFalse();\n+    }\n+\n+    @Test\n+    void testHashCode() {\n+        // Arrange\n+        final DomainInfo domainInfo = new DomainInfo(DOMAIN_PUBLIC_LIGHTING, DOMAIN_VERSION);\n+        final int expected = DOMAIN_INFO_PUBLIC_LIGHTING.hashCode();\n+        // Act\n+        final int actual = domainInfo.hashCode();\n+        // Assert\n+        assertThat(actual).isEqualTo(expected);\n+    }\n+\n+    @Test\n+    void testToString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI0NzAzNQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU2MTMzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainTypeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowMToyN1rOGFVzJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoyNzowNlrOGGBySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MzIyMA==", "bodyText": "I find it very hard to understand what this class is testing and why?\nPerhaps there is some good reason to do this, but then I feel it is perhaps not clearly expressed in the test method names.\nSame as with DomainInfoTest regarding the absence of public/private modifiers.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408253220", "createdAt": "2020-04-14T16:01:27Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainTypeTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainTypeTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk3Mzg5OA==", "bodyText": "I thought the DomainType would be a convenient class for the relation between DeviceType and DomainInfo.\nI think we could also use the domain info passed into the original connect request to route event messages to the correct domain. (With the assumption the correct domain info object is used in each connect request) Therefor I've removed the relation between DeviceType and DomainInfo (and thus the DomainType class). Added a DomainInfoFactory with a forDeviceType method only for testing.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408973898", "createdAt": "2020-04-15T16:27:06Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/domain/valueobjects/DomainTypeTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.domain.valueobjects;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class DomainTypeTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1MzIyMA=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU2OTQ4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/builders/AsduBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowMzowOFrOGFV35A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NTo0M1rOGF9PiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDQzNg==", "bodyText": "Why use an abbreviation? I think we generally just take the hit on character count and write things out.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408254436", "createdAt": "2020-04-14T16:03:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/builders/AsduBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.builders;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.InformationObject;\n+\n+public class AsduBuilder {\n+\n+    private final ASduType asduType;\n+    private CauseOfTransmission cot = CauseOfTransmission.SPONTANEOUS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTQ2NQ==", "bodyText": "Updated", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408899465", "createdAt": "2020-04-15T14:45:43Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/builders/AsduBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.builders;\n+\n+import org.openmuc.j60870.ASdu;\n+import org.openmuc.j60870.ASduType;\n+import org.openmuc.j60870.CauseOfTransmission;\n+import org.openmuc.j60870.ie.InformationObject;\n+\n+public class AsduBuilder {\n+\n+    private final ASduType asduType;\n+    private CauseOfTransmission cot = CauseOfTransmission.SPONTANEOUS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1NDQzNg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU5NDIwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/AsduMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjowODo0N1rOGFWHpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NjoxNFrOGF9RJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODQ3MQ==", "bodyText": "No license header?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408258471", "createdAt": "2020-04-14T16:08:47Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/AsduMatcher.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.matchers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5OTg3Nw==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408899877", "createdAt": "2020-04-15T14:46:14Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/AsduMatcher.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.matchers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1ODQ3MQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDU5OTU3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/GetLightSensorStatusResponseMessageMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMDowN1rOGFWLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo0NjozNVrOGF9SDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1OTM5OQ==", "bodyText": "2020?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408259399", "createdAt": "2020-04-14T16:10:07Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/GetLightSensorStatusResponseMessageMatcher.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMDExMA==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408900110", "createdAt": "2020-04-15T14:46:35Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/GetLightSensorStatusResponseMessageMatcher.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI1OTM5OQ=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDY0MjY5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/GetLightSensorStatusResponseMessageMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMDoxMFrOGFWmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNjoxOToyNVrOGGBe_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NjM1Mg==", "bodyText": "I am a bit confused why some choices are made.\nFor instance, why is there an extra field for the LightSensorStatusDto, and why are some values in the matches method hard coded, while others compare the values from argument with those from this.responseMessage.\nCouldn't all values be compared based on looking at values of argument and this.responseMessage?\nMaybe this class could even be a more generic ProtocolResponseMessageMatcher then?\nAm I missing something?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408266352", "createdAt": "2020-04-14T16:20:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/GetLightSensorStatusResponseMessageMatcher.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.matchers;\n+\n+import org.mockito.ArgumentMatcher;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.opensmartgridplatform.shared.infra.jms.ProtocolResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+public class GetLightSensorStatusResponseMessageMatcher implements ArgumentMatcher<ProtocolResponseMessage> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk2ODk1OA==", "bodyText": "I guess what happened, was that I started out with creating a matcher for LightSensorStatusDto, but later on noticed that it was contained within a protocol response message...\nAnyway, I've refactored it into a ProtocolResponseMessageMatcher.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408968958", "createdAt": "2020-04-15T16:19:25Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/GetLightSensorStatusResponseMessageMatcher.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.matchers;\n+\n+import org.mockito.ArgumentMatcher;\n+import org.opensmartgridplatform.dto.valueobjects.LightSensorStatusDto;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.opensmartgridplatform.shared.infra.jms.ProtocolResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+public class GetLightSensorStatusResponseMessageMatcher implements ArgumentMatcher<ProtocolResponseMessage> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NjM1Mg=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDY0NTU1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/asdu/InterrogationActivationAsduMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyMDo1MlrOGFWoKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDo1MTowNFrOGF9g1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2Njc5Mw==", "bodyText": "No license header?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408266793", "createdAt": "2020-04-14T16:20:52Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/asdu/InterrogationActivationAsduMatcher.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.matchers.asdu;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkwMzg5Mw==", "bodyText": "Done", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r408903893", "createdAt": "2020-04-15T14:51:04Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/test/java/org/opensmartgridplatform/adapter/protocol/iec60870/testutils/matchers/asdu/InterrogationActivationAsduMatcher.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.opensmartgridplatform.adapter.protocol.iec60870.testutils.matchers.asdu;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2Njc5Mw=="}, "originalCommit": {"oid": "fe0b7ca82a87fe498e297f0643379226e04bdc57"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjU1NTk5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-iec60870/src/main/java/org/opensmartgridplatform/iec60870/QualifierOfInterrogation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo1OTo1NFrOGHJk-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMDo1OTo1NFrOGHJk-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1MDEzOQ==", "bodyText": "License header?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r410150139", "createdAt": "2020-04-17T10:59:54Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-iec60870/src/main/java/org/opensmartgridplatform/iec60870/QualifierOfInterrogation.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.opensmartgridplatform.iec60870;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4227ff6d166e0c2bf5df18ae178ff8ff20975e48"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjYxNzI3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToyMzozMFrOGHKL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToyMzozMFrOGHKL_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2MDEyNw==", "bodyText": "I am not to fond of optionals in the code like this. There will often be difficulty in clean and precise naming. The name device, for instance, is a slight mismatch, cause it does not leave room to use device for the actual device in the optional (and optionalDevice would not make me much happier either).\nI think the combination of isPresent() + get() is a very unfortunate use of optionals and the get method should rarely to never be used. Even the optional orElse(null) followed by null check would (in my opinion) be cleaner, but preferences may differ.\nFor now leave it as is I guess, mostly because I would like to have seen the following block changed from if optional isPresent in an ifPresentOrElse construct. My preferred option however is an addition to the Optional API in Java 9, and therefore not yet ready to be applied in our code base.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r410160127", "createdAt": "2020-04-17T11:23:30Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/java/org/opensmartgridplatform/adapter/protocol/iec60870/application/services/LightMeasurementDeviceResponseService.java", "diffHunk": "@@ -48,19 +45,18 @@ public LightMeasurementDeviceResponseService() {\n     }\n \n     @Override\n-    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata)\n-            throws AsduHandlerException {\n-        LOGGER.info(\"Received measurement report {} for light measurement gateway {}.\", measurementReportDto,\n+    public void process(final MeasurementReportDto measurementReportDto, final ResponseMetadata responseMetadata) {\n+        LOGGER.info(\"Received measurement report {} for light measurement device {}.\", measurementReportDto,\n                 responseMetadata.getDeviceIdentification());\n \n-        final ResponseMetadata newResponseMetadata = this.responseMetadataFactory\n-                .createWithNewCorrelationUid(responseMetadata);\n-\n-        final Iec60870Device device = this.iec60870DeviceRepository\n-                .findByDeviceIdentification(responseMetadata.getDeviceIdentification())\n-                .orElseThrow(AsduHandlerException.withMessage(\"Device not found.\"));\n+        final Optional<Iec60870Device> device = this.iec60870DeviceRepository\n+                .findByDeviceIdentification(responseMetadata.getDeviceIdentification());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4227ff6d166e0c2bf5df18ae178ff8ff20975e48"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njc4NDM4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/resources/db/migration/V20200408162500000__Additional_device_fields.sql", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyMzozNVrOGHLz3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyMzozNVrOGHLz3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NjcxNw==", "bodyText": "Doesn't this give issues when you have more than 1 gateway device (both gateway_device_identification and information_object_address being null). This was why I wondered if the constraint could be here or would have to be enforced with repository code.\nUpdate: the unique constraint works fine. Multiple rows with NULL values are accepted. This is not an issue.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r410186717", "createdAt": "2020-04-17T12:23:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-protocol-adapter-iec60870/src/main/resources/db/migration/V20200408162500000__Additional_device_fields.sql", "diffHunk": "@@ -9,6 +9,15 @@ BEGIN\n \n   \tALTER TABLE iec60870_device ALTER COLUMN common_address SET DEFAULT 0;\n \n+    ALTER TABLE iec60870_device\n+      ADD CONSTRAINT iec60870_device_gateway_key\n+        UNIQUE (gateway_device_identification, information_object_address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4227ff6d166e0c2bf5df18ae178ff8ff20975e48"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Njk1NTQxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec60870/osgp-iec60870/src/main/java/org/opensmartgridplatform/iec60870/QualifierOfInterrogation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoxNTo0MFrOGHNe-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoyNTowOVrOGHN1SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxNDEzOA==", "bodyText": "2019?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r410214138", "createdAt": "2020-04-17T13:15:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-iec60870/osgp-iec60870/src/main/java/org/opensmartgridplatform/iec60870/QualifierOfInterrogation.java", "diffHunk": "@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63c8a737af9c44cea3b25a6e6a2b2407fbb2513"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxOTg0OA==", "bodyText": "fixed", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/273#discussion_r410219848", "createdAt": "2020-04-17T13:25:09Z", "author": {"login": "smvdheijden"}, "path": "osgp/protocol-adapter-iec60870/osgp-iec60870/src/main/java/org/opensmartgridplatform/iec60870/QualifierOfInterrogation.java", "diffHunk": "@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIxNDEzOA=="}, "originalCommit": {"oid": "a63c8a737af9c44cea3b25a6e6a2b2407fbb2513"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3693, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}