{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDEzMzUw", "number": 427, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTowMTo0N1rOEoc9eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMzoxOVrOEo5TGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODUyOTg1OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTowMTo0N1rOHZjXXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTowMTo0N1rOHZjXXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NTg3MA==", "bodyText": "change in .getLogger(MqttDeviceSteps.class)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496555870", "createdAt": "2020-09-29T09:01:47Z", "author": {"login": "joostknapen"}, "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java", "diffHunk": "@@ -51,6 +53,8 @@\n     @Autowired\n     private PeakShavingConsumer consumer;\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SimulatorSpecPublishingClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg0ODY5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMToxNlrOHZmb0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMToxNlrOHZmb0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjE2MQ==", "bodyText": "In case there is no 0'th element, a nullpointer exception will be thrown. Add a check for this.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496606161", "createdAt": "2020-09-29T10:21:16Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg1MDY5OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTo1NFrOHZmdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyMTo1NFrOHZmdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYwNjQ5Mg==", "bodyText": "change to .getLogger(MqttDeviceSteps.class);", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496606492", "createdAt": "2020-09-29T10:21:54Z", "author": {"login": "joostknapen"}, "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/steps/MqttDeviceSteps.java", "diffHunk": "@@ -51,6 +53,8 @@\n     @Autowired\n     private PeakShavingConsumer consumer;\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SimulatorSpecPublishingClient.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg3NjYxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyOToxNVrOHZmtGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDoyOToxNVrOHZmtGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMDU4Nw==", "bodyText": "I would make this a debug message instead of info, or even remove the message", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496610587", "createdAt": "2020-09-29T10:29:15Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg4NzE0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozMjoxNVrOHZmz1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo0OToxMlrOHZnXIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjMwOQ==", "bodyText": "I would make this a debug message instead of info. Also without knowing the java code the message is unclear. The only thing this messsage makes clear is that there is (or is not) a bug in the code, since  a few lines above, the Source string is already logged. In general, I think you should remove log messages that are only added to the code to make development itself easier", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496612309", "createdAt": "2020-09-29T10:32:15Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMTM0Nw==", "bodyText": "Maybe add in the error message below the number of elements of 'value' and the number of expected elements", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496621347", "createdAt": "2020-09-29T10:49:12Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjMwOQ=="}, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg5MTA0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozMzoyOFrOHZm2eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozMzoyOFrOHZm2eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxMjk4NA==", "bodyText": "In general, I prefer to return an Optional.empty, instead of null. But I noticed that many (if not all) converters are already returning null in case of a failed conversion", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496612984", "createdAt": "2020-09-29T10:33:28Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);\n             return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODg5Nzg3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNToyMVrOHZm6jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDozNToyMVrOHZm6jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxNDAzMQ==", "bodyText": "Give values a more meaningful name", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496614031", "createdAt": "2020-09-29T10:35:21Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODkzMDIyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo0NToxNlrOHZnO8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNToyMzowMlrOHZyy7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxOTI1MA==", "bodyText": "This class has no super class; remove super()", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496619250", "createdAt": "2020-09-29T10:45:16Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);\n             return null;\n         }\n-\n-        final String eanCode = values[0];\n-        final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n-                new ArrayList<Name>());\n-        final long createdDateTime = System.currentTimeMillis();\n-        return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n-                \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                stringArrayToAnalogList.convertToAnalogList(values));\n     }\n \n+    private static class Payload {\n+\n+        private String gisnr;\n+        private String feeder;\n+        @JsonAlias({ \"D\" })\n+        private String date;\n+        private String[] data;\n+\n+        public Payload() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgwODY4Nw==", "bodyText": "This super is needed because it is a private static class. The objectmapper needs the super to create/map the Payload object.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496808687", "createdAt": "2020-09-29T15:23:02Z", "author": {"login": "JelleHoffman"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);\n             return null;\n         }\n-\n-        final String eanCode = values[0];\n-        final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode, UUID.randomUUID().toString(),\n-                new ArrayList<Name>());\n-        final long createdDateTime = System.currentTimeMillis();\n-        return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n-                \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n-                stringArrayToAnalogList.convertToAnalogList(values));\n     }\n \n+    private static class Payload {\n+\n+        private String gisnr;\n+        private String feeder;\n+        @JsonAlias({ \"D\" })\n+        private String date;\n+        private String[] data;\n+\n+        public Payload() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYxOTI1MA=="}, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODk1OTkwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMDo1NDowOVrOHZnhLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNjo1Njo1MlrOHaPqzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzkxNg==", "bodyText": "typo :-)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496623916", "createdAt": "2020-09-29T10:54:09Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njc5NTEyOA==", "bodyText": "Which typo? I can't see it haha.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r496795128", "createdAt": "2020-09-29T15:06:38Z", "author": {"login": "JelleHoffman"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzkxNg=="}, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4MTc0Mg==", "bodyText": "however the provided date was not the correct format --> A date is not a format. It is formatted in a particual way. So the date was not in the correct format or the date was not formatted correctly :-)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r497281742", "createdAt": "2020-09-30T06:56:52Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +45,84 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.info(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload payload = this.objectMapper.readValue(source, Payload[].class)[0];\n+\n+            final String[] values = (payload.gisnr + \", \" + String.join(\", \", payload.data)).split(\", \");\n+            LOGGER.info(\"Values length: {} and values: {}\", values.length, Arrays.toString(values));\n+\n+            if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n+                stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n+            } else {\n+                LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+                return null;\n+            }\n+\n+            final String eanCode = values[0];\n+            final PowerSystemResource powerSystemResource = new PowerSystemResource(eanCode,\n+                    UUID.randomUUID().toString(), new ArrayList<Name>());\n+            final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-mm-dd HH:mm:ss\");\n+            final Date date = dateFormat.parse(payload.date);\n+            final long createdDateTime = date.getTime();\n+            LOGGER.info(\"CreatedDateTime: {}\", createdDateTime);\n+            return new GridMeasurementPublishedEvent(createdDateTime, eanCode, UUID.randomUUID().toString(),\n+                    \"GridMeasurementPublishedEvent\", new ArrayList<Name>(), powerSystemResource,\n+                    stringArrayToAnalogList.convertToAnalogList(values));\n+        } catch (final JsonMappingException e) {\n+            LOGGER.error(\"Caught an error mapping a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final JsonProcessingException e) {\n+            LOGGER.error(\"Caught an error processing a JSON string to Payload. {}\", source, e);\n+            return null;\n+        } catch (final ParseException e) {\n+            LOGGER.error(\"Date could not be parsed corrrectly. Date format is: yyyy-mm-dd HH:mm:ss, \"\n+                    + \"however the provided date was not the correct format. {}\", source, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjYyMzkxNg=="}, "originalCommit": {"oid": "ddad5dfedb3cf08243b1e179a12f4245dec3ee29"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzE3Mjc0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMzoxOVrOHaP2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNzowMzoxOVrOHaP2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI4NDY3OQ==", "bodyText": "I meant the case where payloads.length == 0, that would result in the null pointer. You can't call equals on an array element with a null value. Since in that case, payload[0] references to null.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/427#discussion_r497284679", "createdAt": "2020-09-30T07:03:19Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/GridMeasurementPublishedEventConverter.java", "diffHunk": "@@ -36,30 +46,95 @@\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(GridMeasurementPublishedEventConverter.class);\n \n-    private static final int SIMPLE_END_INDEX = 10;\n+    private ObjectMapper objectMapper = new ObjectMapper();\n \n     @Override\n     public GridMeasurementPublishedEvent convert(final String source,\n             final Type<? extends GridMeasurementPublishedEvent> destinationType, final MappingContext mappingContext) {\n \n-        StringArrayToAnalogList stringArrayToAnalogList = null;\n-        final String[] values = source.split(\";\");\n-        if (values.length == SIMPLE_END_INDEX) {\n-            stringArrayToAnalogList = new SimpleStringToAnalogList();\n-        } else if (values.length == LsPeakShavingMeasurementType.getNumberOfElements() + 1) {\n-            stringArrayToAnalogList = new LsMeasurementMessageToAnalogList();\n-        } else {\n-            LOGGER.error(\"String '{}' does not have the expected amount of fields, abandoning conversion\", source);\n+        LsMeasurementMessageToAnalogList stringArrayToAnalogList = null;\n+        LOGGER.debug(\"Source string: {}\", source);\n+\n+        try {\n+            final Payload[] payloads = this.objectMapper.readValue(source, Payload[].class);\n+            if (payloads[0].equals(null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35620f5cf96e573484b9052869909b7313399632"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3499, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}