{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Njk0Mjk3", "number": 439, "title": "Increased branch coverage of DaylightSavingTimeTransition", "bodyText": "", "createdAt": "2020-09-29T09:32:55Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439", "merged": true, "mergeCommit": {"oid": "a17880a66d58a9c6beca3312013a85d964bcc309"}, "closed": true, "closedAt": "2020-11-26T07:36:47Z", "author": {"login": "HighCrit"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLUMldgH2gAyNDk0Njk0Mjk3OmJmZWVjMWE2ODgzY2M1OTc5MWZjMzlhMWM4NGZhYTIwYWQ5OTkzYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgN7eAAFqTUzOTA1MzU4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bfeec1a6883cc59791fc39a1c84faa20ad9993ac", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bfeec1a6883cc59791fc39a1c84faa20ad9993ac", "committedDate": "2020-09-22T09:02:15Z", "message": "Increased branch coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff11c2dc10a483098b3450122fad6c627a033e99", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ff11c2dc10a483098b3450122fad6c627a033e99", "committedDate": "2020-09-22T11:21:39Z", "message": "Removed unnecessary condition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1459e16a96f206bb5083c98adf6442a9d3f986", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5f1459e16a96f206bb5083c98adf6442a9d3f986", "committedDate": "2020-09-22T11:28:44Z", "message": "Fixed a crash from occurring when an empty string is provided"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "256ccc7e1dfe05b02121031b053d1c715219e965", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/256ccc7e1dfe05b02121031b053d1c715219e965", "committedDate": "2020-09-29T08:53:32Z", "message": "Added tests for getNextTransitionDatetime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/96362596b2bb9501a817d9beec692773d386cc7f", "committedDate": "2020-09-29T09:31:43Z", "message": "Fixed formatting and added some comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTkwMjYz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#pullrequestreview-532190263", "createdAt": "2020-11-17T09:50:26Z", "commit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1MDoyNlrOH0svMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowMTo1MVrOH0tONg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyMDk3Nw==", "bodyText": "We should add the dependency to the super pom ass well and retrieve the version from there.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525020977", "createdAt": "2020-11-17T09:50:26Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/pom.xml", "diffHunk": "@@ -241,5 +241,17 @@\n       <artifactId>assertj-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>3.5.11</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNDc1Nw==", "bodyText": "Format is not ok, check your settings.\nSee https://documentation.gxf.lfenergy.org/Opensourcecommunity/ToolsguidelinesCI.html", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525024757", "createdAt": "2020-11-17T09:55:42Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/test/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransitionTest.java", "diffHunk": "@@ -32,172 +36,338 @@\n     public void testDaylightSavingTimeStartAmsterdam2015DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_START_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_START_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_START_MWD_AMSTERDAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNjY2Mg==", "bodyText": "Move comment above the assertion or use withFailMessage.\nGoes for other methods as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525026662", "createdAt": "2020-11-17T09:58:28Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/test/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransitionTest.java", "diffHunk": "@@ -32,172 +36,338 @@\n     public void testDaylightSavingTimeStartAmsterdam2015DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_START_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_START_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_START_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2015DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_END_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_END_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_END_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2015JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_COUNTING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_COUNTING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_COUNTING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2015JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_COUNTING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_COUNTING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_COUNTING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2015JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_IGNORING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_IGNORING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_IGNORING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2015JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_IGNORING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_IGNORING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_IGNORING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2016DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_START_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_START_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_START_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2016DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_END_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_END_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_END_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2016JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_COUNTING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_COUNTING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_COUNTING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2016JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_COUNTING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_COUNTING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_COUNTING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2016JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_IGNORING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_IGNORING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_IGNORING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2016JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_IGNORING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_IGNORING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_IGNORING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n-    public void testDayOfWeekOfMonthTransitionValidationExceedsMaxMonth() {\n+    public void testJulianIgnoringFebTransitionValidationExceedsRangeOfUnit() {\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J0\")).isFalse(); // Days aren't 0 indexed when ignoring feb 29\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J366\")).isFalse(); // A year (without feb 29) doesn't have more than 365 days\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J88/-168\")).isFalse(); // Time unit may not equal or exceed 7 days\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J88/168\")).isFalse(); // Time unit may not equal or exceed 7 days", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyODkxOA==", "bodyText": "remove this line, the version is inherited from the super", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525028918", "createdAt": "2020-11-17T10:01:51Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/pom.xml", "diffHunk": "@@ -241,5 +241,17 @@\n       <artifactId>assertj-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>3.5.11</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>3.5.11</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57cb14430b941d5cf2848655958ef81526f61a34", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/57cb14430b941d5cf2848655958ef81526f61a34", "committedDate": "2020-11-17T15:52:01Z", "message": "Applied formatting & Moved dependency to super pom\n\nAs per Robin's feedback the mockito core dependency now inherits the version of the super pom.xml. And, the mockito inline dependency has been added to the super pom.xml."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c45235f084f6bc878ba0eaf5e9783111f503fb5", "author": {"user": {"login": "HighCrit", "name": "Danny van Dortmont"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5c45235f084f6bc878ba0eaf5e9783111f503fb5", "committedDate": "2020-11-19T14:35:46Z", "message": "Increased branch coverage, removed unnecessary conditions & dependency\n\nAlso reduced convolutedness of testGetDateTime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDUzNTg1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#pullrequestreview-539053585", "createdAt": "2020-11-26T07:36:32Z", "commit": {"oid": "5c45235f084f6bc878ba0eaf5e9783111f503fb5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3650, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}