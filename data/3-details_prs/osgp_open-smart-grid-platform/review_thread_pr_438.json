{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NjEyNzQw", "number": 438, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozODoxNVrOEs59vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1OTowOVrOE2qf8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIyNDkyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozODoxNVrOHgZVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozODoxNVrOHgZVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMTQ3Nw==", "bodyText": "very good!", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503731477", "createdAt": "2020-10-13T07:38:15Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -145,7 +145,7 @@ private void createSsldPendingFirmwareUpdateRecord(final CorrelationIds ids, fin\n             LOGGER.info(\"Saved pending fimware update record for SSLD: {}, {}\", ids.getDeviceIdentification(),\n                     ssldPendingFirmwareUpdate);\n         } catch (final Exception e) {\n-            LOGGER.error(\"Caugth exception when creating pending firmware update record for SSLD: {}\",\n+            LOGGER.error(\"Caught exception when creating pending firmware update record for SSLD: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIzMDg0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzozOTo0NVrOHgZYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1NjowNFrOHvkj2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjM4OA==", "bodyText": "indentation not ok, check your IDE settings", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503732388", "createdAt": "2020-10-13T07:39:45Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NDEyMg==", "bodyText": "Formatting still not ok", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r519644122", "createdAt": "2020-11-09T08:56:04Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMjM4OA=="}, "originalCommit": {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTIzNjg0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MTowOVrOHgZcPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0MTowOVrOHgZcPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczMzMxMQ==", "bodyText": "Since we are going to check for these values in the assert part of the tests, refactor them into constants.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503733311", "createdAt": "2020-10-13T07:41:09Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI1OTQ5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0Njo1OVrOHgZp5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo0Njo1OVrOHgZp5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczNjgwNA==", "bodyText": "remove public", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503736804", "createdAt": "2020-10-13T07:46:59Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";\n+    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+    }\n+    \n+    /*\n+     * Returns device of provided class with already mocked IP address \n+     */\n+    private <T> Device getMockDevice(final Class<T> deviceClass) {\n+    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n+    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n+    \treturn device;\n+    }\n+\n+    @Test\n+    void testUpdateFirmwareForNonSsld() throws FunctionalException {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final Device device = this.getMockDevice(Device.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n+                this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n+                this.scheduledTimeCaptor.capture());\n+\n+        final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n+        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n+            \"device-identification\", null);\n+\n+        assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareForSsld() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n+                this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n+        final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n+            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+        );\n+\n+        assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+\t\t\t.thenReturn(device);\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTI3OTMzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo1MTo1MFrOHgZ12Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzo1MTo1MFrOHgZ12Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzczOTg2NQ==", "bodyText": "Check for the exception type using either .isInstanceOf in this construction or use assertThatExceptionOfType(<Exception.class>).isThrownBy(() -> {", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r503739865", "createdAt": "2020-10-13T07:51:50Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -552,4 +582,222 @@ void checkSsldPendingFirmwareUpdateReturnsTrueAndDeletesPendingUpdateWithMatchin\n \n         verify(this.ssldPendingFirmwareUpdateRepository).delete(matchingPendingFirmwareUpdate);\n     }\n+    \n+    \n+    /*\n+     * Returns basic CorrelationIds for simple tests\n+     */\n+    private CorrelationIds getCorrelationIds() {\n+    \tfinal String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device-identification\";\n+        final String correlationUid = \"correlation-uid\";\n+    \treturn new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+    }\n+    \n+    /*\n+     * Returns device of provided class with already mocked IP address \n+     */\n+    private <T> Device getMockDevice(final Class<T> deviceClass) {\n+    \tfinal Device device = (Device) Mockito.mock(deviceClass);\n+    \twhen(device.getIpAddress()).thenReturn(\"0.0.0.0\"); \n+    \treturn device;\n+    }\n+\n+    @Test\n+    void testUpdateFirmwareForNonSsld() throws FunctionalException {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final Device device = this.getMockDevice(Device.class);\n+\n+        when(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+        when(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+            .thenReturn(device);\n+\n+        this.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageCaptor.capture(),\n+                this.messageTypeCaptor.capture(), this.messagePriorityCaptor.capture(), this.ipAddressCaptor.capture(),\n+                this.scheduledTimeCaptor.capture());\n+\n+        final RequestMessage requestMessage = this.requestMessageCaptor.getValue();\n+        final RequestMessage expectedRequestMessage = new RequestMessage(\"correlation-uid\", \"test-org\",\n+            \"device-identification\", null);\n+\n+        assertThat(requestMessage).usingRecursiveComparison().ignoringFields(\"request\").isEqualTo(expectedRequestMessage);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareForSsld() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"firmware-test\").build();\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(ids.getDeviceIdentification(), ComponentType.DOMAIN_CORE))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+    \tverify(this.ssldPendingFirmwareUpdateRepository).save(this.ssldPendingFirmwareUpdateArgumentCaptor.capture());\n+\n+        final SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate =\n+                this.ssldPendingFirmwareUpdateArgumentCaptor.getValue();\n+        final SsldPendingFirmwareUpdate expectedSsldPendingFirmwareUpdate = new SsldPendingFirmwareUpdate(\n+            \"device-identification\", FirmwareModuleType.FUNCTIONAL, VERSION_1, \"test-org\", \"correlation-uid\"\n+        );\n+\n+        assertThat(ssldPendingFirmwareUpdate).isEqualTo(expectedSsldPendingFirmwareUpdate);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareFiles() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Collections.emptyList());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+\n+        verifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithNoFirmwareModuleVersions() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/firmware-test\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+    \t\t.thenReturn(device);\n+    \twhen(this.firmwareFileRepository.findByFilename(\"firmware-test\")).thenReturn(Arrays.asList(firmwareFile));\n+    \twhen(firmwareFile.getModuleVersions()).thenReturn(new HashMap<>());\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+    \n+    @Test\n+    void testUpdateFirmwareWithIncorrectFirmwareUrl() throws FunctionalException {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal Device device = this.getMockDevice(Ssld.class);\n+    \tfinal FirmwareFile firmwareFile = Mockito.mock(FirmwareFile.class);\n+    \tfirmwareFile.addFirmwareModule(new FirmwareModule(\"functional\"), VERSION_1);\n+    \t\n+    \twhen(this.firmwareUpdateMessageDataContainer.getFirmwareUrl()).thenReturn(\"/\");\n+    \twhen(this.deviceDomainService.searchActiveDevice(any(), eq(ComponentType.DOMAIN_CORE)))\n+\t\t\t.thenReturn(device);\n+    \t\n+    \tthis.firmwareManagementService.updateFirmware(ids, this.firmwareUpdateMessageDataContainer, 0L, \"\", 0);\n+    \t\n+    \tverifyNoInteractions(this.ssldPendingFirmwareUpdateRepository);\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionWithMatchingFirmwareVersion() {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal List<FirmwareVersionDto> firmwareVersionDtos = Arrays.asList();\n+    \t\n+    \tfinal SsldPendingFirmwareUpdate ssldPendingFirmwareUpdate = Mockito.mock(SsldPendingFirmwareUpdate.class);\n+    \tfinal List<SsldPendingFirmwareUpdate> ssldPendingFirmwareUpdates = Arrays.asList(ssldPendingFirmwareUpdate);\n+    \t\n+    \twhen(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any(String.class)))\n+       \t\t.thenReturn(ssldPendingFirmwareUpdates);\n+    \twhen(ssldPendingFirmwareUpdate.getCorrelationUid()).thenReturn(ids.getCorrelationUid());\n+    \twhen(ssldPendingFirmwareUpdate.getFirmwareModuleType()).thenReturn(FirmwareModuleType.SECURITY);\n+    \twhen(ssldPendingFirmwareUpdate.getFirmwareVersion()).thenReturn(VERSION_1);\n+    \twhen(this.domainCoreMapper.mapAsList(firmwareVersionDtos, FirmwareVersion.class)).thenReturn(\n+\t\t   \tArrays.asList(new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1))\n+\t\t);\n+\n+    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(firmwareVersionDtos, ids, \"messageType\", 1, \n+    \t\t\tResponseMessageResultType.OK, null);\n+\n+    \tverifyNoInteractions(this.webServiceResponseMessageSender);\n+    \tverify(this.ssldPendingFirmwareUpdateRepository).delete(any());\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseNotOk() {\n+    \tfinal CorrelationIds ids = this.getCorrelationIds();\n+    \tfinal List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n+    \t\n+    \tthis.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+    \t\t\tResponseMessageResultType.NOT_OK, null);\n+\n+    \tverify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+\n+    \tfinal ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+\n+    \tassertThat(responseMessage.getResult()).isEqualTo(ResponseMessageResultType.NOT_OK);\n+    \tassertThat(responseMessage.getOsgpException().getMessage())\n+                .isEqualTo(\"Exception occurred while getting device firmware version\");\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionErrorNotNull() {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n+\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+            ResponseMessageResultType.OK, this.defaultException);\n+\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageCaptor.capture());\n+        verify(this.ssldPendingFirmwareUpdateRepository, never()).delete(any());\n+\n+        final ResponseMessage responseMessage = this.responseMessageCaptor.getValue();\n+        final ResponseMessage expectedResponseMessage = ResponseMessage.newResponseMessageBuilder()\n+            .withIds(ids)\n+            .withResult(ResponseMessageResultType.NOT_OK)\n+            .withOsgpException(new TechnicalException(\"Exception occurred while getting device firmware version\"))\n+            .withMessagePriority(1)\n+            .build();\n+\n+        assertThat(responseMessage).usingRecursiveComparison().ignoringFields(\"dataObject\").isEqualTo(expectedResponseMessage);\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionWithPendingUpdateIsNull() {\n+        final CorrelationIds ids = this.getCorrelationIds();\n+        final List<FirmwareVersionDto> versionsOnDevice = new ArrayList<>();\n+\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(any())).thenReturn(null);\n+\n+        assertThatThrownBy(() -> {\n+            this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDevice, ids, \"messageType\", 1,\n+                    ResponseMessageResultType.OK, null);\n+        }).hasMessage(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd7e92a804876e778c991c8fd3c0f6baa66338"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzU0ODY2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1OTowOVrOHvkrAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwODo1OTowOVrOHvkrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY0NTk1Mw==", "bodyText": "constants should be static\nConstants should be all uppercase with words separated by underscores, see https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/438#discussion_r519645953", "createdAt": "2020-11-09T08:59:09Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -72,6 +82,32 @@\n     private static final String VERSION_1 = \"R01\";\n     private static final String VERSION_2 = \"R02\";\n     private static final String VERSION_3 = \"R03\";\n+\n+    private final String organisationIdentification = \"test-org\";\n+    private final String deviceIdentification = \"device-identification\";\n+    private final String correlationUid = \"correlation-uid\";\n+    private final CorrelationIds correlationIds = new CorrelationIds(this.organisationIdentification,\n+            this.deviceIdentification, this.correlationUid);\n+\n+    private final OsgpException defaultException = new OsgpException(ComponentType.DOMAIN_CORE, \"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ef02154cf24f58b72131a3a2c4c5489603df6b0"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3521, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}