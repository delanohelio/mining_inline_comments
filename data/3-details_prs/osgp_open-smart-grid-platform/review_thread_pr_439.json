{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Njk0Mjk3", "number": 439, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1MDoyNlrOE573iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowMTo1MVrOE58K-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTg1MTYzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1MDoyNlrOH0svMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1MDoyNlrOH0svMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyMDk3Nw==", "bodyText": "We should add the dependency to the super pom ass well and retrieve the version from there.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525020977", "createdAt": "2020-11-17T09:50:26Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/pom.xml", "diffHunk": "@@ -241,5 +241,17 @@\n       <artifactId>assertj-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>3.5.11</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTg3NTk4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/test/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransitionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1NTo0MlrOH0s99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1NTo0MlrOH0s99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNDc1Nw==", "bodyText": "Format is not ok, check your settings.\nSee https://documentation.gxf.lfenergy.org/Opensourcecommunity/ToolsguidelinesCI.html", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525024757", "createdAt": "2020-11-17T09:55:42Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/test/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransitionTest.java", "diffHunk": "@@ -32,172 +36,338 @@\n     public void testDaylightSavingTimeStartAmsterdam2015DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_START_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_START_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_START_MWD_AMSTERDAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTg4NzIzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/test/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransitionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1ODoyOFrOH0tFZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1ODoyOFrOH0tFZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNjY2Mg==", "bodyText": "Move comment above the assertion or use withFailMessage.\nGoes for other methods as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525026662", "createdAt": "2020-11-17T09:58:28Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/src/test/java/org/opensmartgridplatform/adapter/protocol/iec61850/domain/valueobjects/DaylightSavingTimeTransitionTest.java", "diffHunk": "@@ -32,172 +36,338 @@\n     public void testDaylightSavingTimeStartAmsterdam2015DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_START_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_START_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_START_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2015DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_END_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_END_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_END_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2015JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_COUNTING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_COUNTING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_COUNTING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2015JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_COUNTING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_COUNTING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_COUNTING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2015JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_IGNORING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_IGNORING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_IGNORING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2015JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_IGNORING_FEB29_AMSTERDAM_2015);\n-        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2015).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2015.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_IGNORING_FEB29_AMSTERDAM_2015);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2015,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_IGNORING_FEB29_AMSTERDAM_2015);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2016DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_START_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_START_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_START_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2016DayOfWeekOfMonth() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(DST_END_MWD_AMSTERDAM);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(\n-                DaylightSavingTimeTransition\n-                        .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n-                                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH)\n-                        .getTransition()).isEqualTo(DST_END_MWD_AMSTERDAM);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.DAY_OF_WEEK_OF_MONTH).getTransition()).isEqualTo(\n+                DST_END_MWD_AMSTERDAM);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2016JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_COUNTING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_COUNTING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_COUNTING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2016JulianCountingFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_COUNTING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_COUNTING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_COUNTING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_COUNTING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n     public void testDaylightSavingTimeStartAmsterdam2016JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_START_J_IGNORING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_START_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_START_J_IGNORING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_START_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_START_J_IGNORING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n     public void testDaylightSavingTimeEndAmsterdam2016JulianIgnoringFeb29() throws Exception {\n \n         final DaylightSavingTimeTransition dstTransition = new DaylightSavingTimeTransition(\n                 DST_END_J_IGNORING_FEB29_AMSTERDAM_2016);\n-        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC))\n-                .isEqualTo(DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n+        assertThat(dstTransition.getDateTimeForYear(2016).toDateTime(DateTimeZone.UTC)).isEqualTo(\n+                DST_END_DATE_TIME_AMSTERDAM_2016.toDateTime(DateTimeZone.UTC));\n \n-        assertThat(DaylightSavingTimeTransition\n-                .forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n-                        DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29)\n-                .getTransition()).isEqualTo(DST_END_J_IGNORING_FEB29_AMSTERDAM_2016);\n+        assertThat(DaylightSavingTimeTransition.forDateTimeAccordingToFormat(DST_END_DATE_TIME_AMSTERDAM_2016,\n+                DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29).getTransition()).isEqualTo(\n+                DST_END_J_IGNORING_FEB29_AMSTERDAM_2016);\n     }\n \n     @Test\n-    public void testDayOfWeekOfMonthTransitionValidationExceedsMaxMonth() {\n+    public void testJulianIgnoringFebTransitionValidationExceedsRangeOfUnit() {\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J0\")).isFalse(); // Days aren't 0 indexed when ignoring feb 29\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J366\")).isFalse(); // A year (without feb 29) doesn't have more than 365 days\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J88/-168\")).isFalse(); // Time unit may not equal or exceed 7 days\n+        assertThat(DaylightSavingTimeTransition.DstTransitionFormat.JULIAN_DAY_IGNORING_FEBRUARY_29.isValid(\n+                \"J88/168\")).isFalse(); // Time unit may not equal or exceed 7 days", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTkwMTM3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowMTo1MVrOH0tONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDowMTo1MVrOH0tONg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyODkxOA==", "bodyText": "remove this line, the version is inherited from the super", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/439#discussion_r525028918", "createdAt": "2020-11-17T10:01:51Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec61850/osgp-protocol-adapter-iec61850/pom.xml", "diffHunk": "@@ -241,5 +241,17 @@\n       <artifactId>assertj-core</artifactId>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-inline</artifactId>\n+      <version>3.5.11</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <version>3.5.11</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96362596b2bb9501a817d9beec692773d386cc7f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3523, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}