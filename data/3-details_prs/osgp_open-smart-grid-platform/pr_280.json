{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjcxOTE4", "number": 280, "title": "Feature/oc 560 kafka adapter", "bodyText": "", "createdAt": "2020-04-14T15:56:08Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280", "merged": true, "mergeCommit": {"oid": "e3a6905fe1768c8f5b1489906d6f4a6a6768b5c1"}, "closed": true, "closedAt": "2020-04-23T06:33:02Z", "author": {"login": "smvdheijden"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV74hvAH2gAyNDAzMjcxOTE4OjFmZTRjNDNhNjliOTRlYTljMWUwNjEwZGI0YTc3MmVjMjg4ZTcwMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaW9HpgFqTM5ODc5NDgzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1fe4c43a69b94ea9c1e0610db4a772ec288e7008", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1fe4c43a69b94ea9c1e0610db4a772ec288e7008", "committedDate": "2020-04-09T12:44:38Z", "message": "OC-560 ~ Adds kafka adapter from hackathon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5611629193453baac91a8d46aab69c672845a8bf", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5611629193453baac91a8d46aab69c672845a8bf", "committedDate": "2020-04-09T15:49:28Z", "message": "OC-560 ~ Pom updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec6a301a44773525df6d5be4b97b42633db0076c", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ec6a301a44773525df6d5be4b97b42633db0076c", "committedDate": "2020-04-09T15:50:13Z", "message": "OC-560 ~ Removes some SOAP related classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92c2848f54a8f2c1951704954c6cb001e22d3a7d", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/92c2848f54a8f2c1951704954c6cb001e22d3a7d", "committedDate": "2020-04-09T16:11:36Z", "message": "OC-560 ~ Pom updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ea6d4b39dff73c9c20660d7d94720c7932ab98e", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4ea6d4b39dff73c9c20660d7d94720c7932ab98e", "committedDate": "2020-04-10T07:39:34Z", "message": "OC-560 ~ Removes confluent avro serializer dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ef38d8a00d3627bd79c8c5ec8cd4a2f74e0191", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f1ef38d8a00d3627bd79c8c5ec8cd4a2f74e0191", "committedDate": "2020-04-10T08:18:53Z", "message": "OC-560 ~ Further cleanup of pom file, reordering of elements in pom\n\nReordering according to POM Code Convention as suggested by Sonar\n(squid:S3423)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f065af28da8e202729689a212a01a7b829fe082e", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f065af28da8e202729689a212a01a7b829fe082e", "committedDate": "2020-04-10T10:44:32Z", "message": "OC-560 ~ Introduces security configuration and spring kafka in da kafka adapter\n\nAnd some other refactorings:\n* Renames PersistenceConfigWs to PersistenceConfig\n* Moves messageprocessors package inside jms package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2af92973e4818b75428098f82c801e9f861bde", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6d2af92973e4818b75428098f82c801e9f861bde", "committedDate": "2020-04-10T16:18:14Z", "message": "OC-560 ~ Updates properties\n\n- Removes web service properties\n- Updates hibernate properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa62beaf13fef9fd52236430a77a1b5feb02a0d4", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fa62beaf13fef9fd52236430a77a1b5feb02a0d4", "committedDate": "2020-04-14T14:58:48Z", "message": "OC-560 ~ Adds Kafka Adapter Distribution Automation to components enum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996958d5108f8cf5bd44933f4c3b81e964a3b037", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/996958d5108f8cf5bd44933f4c3b81e964a3b037", "committedDate": "2020-04-14T15:02:41Z", "message": "OC-560 ~ Cleans up some more WS Adapter related classes and files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54477c5f9a3a4ce63c4e13cfc230b32ce8bb6b65", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/54477c5f9a3a4ce63c4e13cfc230b32ce8bb6b65", "committedDate": "2020-04-14T15:05:19Z", "message": "OC-560 ~ Renames beans from ws... to kafka..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "369dc4374203f1f74ab8adceee7c6406f21bbdb4", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/369dc4374203f1f74ab8adceee7c6406f21bbdb4", "committedDate": "2020-04-14T15:06:11Z", "message": "OC-560 ~ Updates logback xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7c08c1f30b2ccc8c437b7adcd69b3c2140782fb", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e7c08c1f30b2ccc8c437b7adcd69b3c2140782fb", "committedDate": "2020-04-14T15:10:40Z", "message": "OC-560 ~ Adds and/or updates some TODOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "349156a842d26ae3cbdac5b562124f4240d13a0a", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/349156a842d26ae3cbdac5b562124f4240d13a0a", "committedDate": "2020-04-14T15:12:16Z", "message": "OC-560 ~ Updates bean name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6d598f15afa07739ba255ae8dbda2b714cdf49a", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b6d598f15afa07739ba255ae8dbda2b714cdf49a", "committedDate": "2020-04-14T15:22:30Z", "message": "OC-560 ~ Cleans up some more..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7904d5b6bcf1197703967c702b9080097f81523c", "committedDate": "2020-04-14T15:45:43Z", "message": "OC-560 ~ Adds kafka adapter module to main pom.\n\nReorders pom files in the recommended order by sonar rule (squid:S3423)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDg0MTE4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#pullrequestreview-393084118", "createdAt": "2020-04-14T16:13:20Z", "commit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyMFrOGFWUCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyMFrOGFWUCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTY0MA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r408261640", "createdAt": "2020-04-14T16:13:20Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingSerializer.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// TODO - Rename and update for correct Avro message format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDg0MTQz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#pullrequestreview-393084143", "createdAt": "2020-04-14T16:13:21Z", "commit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyMVrOGFWUIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyMVrOGFWUIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTY2NA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r408261664", "createdAt": "2020-04-14T16:13:21Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+// TODO - Rename class once AVRO message format is known\n+@Service\n+public class MeterReadingProducer {\n+    @Autowired\n+    private KafkaTemplate<String, MeterReading> kafkaTemplate;\n+\n+    @Autowired\n+    private DistributionAutomationMapper mapper;\n+\n+    public void send(final MeasurementReport measurementReport) {\n+\n+        // TODO - Map measurementReport to correct Avro message format and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMDg0MTY0", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#pullrequestreview-393084164", "createdAt": "2020-04-14T16:13:22Z", "commit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyMlrOGFWULw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxMzoyMlrOGFWULw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2MTY3OQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r408261679", "createdAt": "2020-04-14T16:13:22Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+// TODO - Rename class once AVRO message format is known", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7904d5b6bcf1197703967c702b9080097f81523c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/110fca2b621634da50f555a4222dba0198fdee62", "committedDate": "2020-04-15T07:24:00Z", "message": "OC-560 ~ Solves some sonar issues in pom files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NDIzOTcz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#pullrequestreview-394423973", "createdAt": "2020-04-16T08:47:59Z", "commit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwODo0Nzo1OVrOGGbDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOToxODoyOFrOGGcQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4Nzc3OQ==", "bodyText": "I think we shouldn't use joda-time in new components. java-time offers all the functionality we need.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409387779", "createdAt": "2020-04-16T08:47:59Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/pom.xml", "diffHunk": "@@ -0,0 +1,265 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.opensmartgridplatform</groupId>\n+    <artifactId>parent-platform</artifactId>\n+    <version>5.1.0-SNAPSHOT</version>\n+    <relativePath>../parent-platform/pom.xml</relativePath>\n+  </parent>\n+\n+  <artifactId>osgp-adapter-kafka-distributionautomation</artifactId>\n+  <packaging>war</packaging>\n+  <name>osgp-adapter-kafka-distributionautomation</name>\n+  <!-- Description element is needed for the maven-jxr-plugin to generate\n+    a maven site -->\n+  <description>Kafka module for Distribution Automation domain.</description>\n+\n+  <properties>\n+    <display.version>${project.version}-${BUILD_TAG}</display.version>\n+  </properties>\n+\n+  <dependencies>\n+    <!-- Open Smart Grid Platform -->\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>shared</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>osgp-domain-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>osgp-domain-logging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>osgp-domain-distributionautomation</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.opensmartgridplatform</groupId>\n+      <artifactId>osgp-adapter-ws-shared</artifactId>\n+    </dependency>\n+\n+    <!-- Spring Framework -->\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-beans</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-context-support</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-jdbc</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-orm</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-tx</artifactId>\n+    </dependency>\n+\n+    <!-- Spring Data -->\n+    <dependency>\n+      <groupId>org.springframework.data</groupId>\n+      <artifactId>spring-data-jpa</artifactId>\n+    </dependency>\n+\n+    <!-- Joda Time (Date/Time util) -->\n+    <dependency>\n+      <groupId>joda-time</groupId>\n+      <artifactId>joda-time</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM4OTM4Nw==", "bodyText": "I think this comment can be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409389387", "createdAt": "2020-04-16T08:50:26Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/ApplicationContext.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import org.opensmartgridplatform.shared.application.config.AbstractConfig;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\n+import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n+\n+/**\n+ * An application context Java configuration class. The usage of Java\n+ * configuration requires Spring Framework 3.0\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTMwMg==", "bodyText": "This class seems a copy of the KafkaConfig class in the webservice client. I think we should put common code in the shared library.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409391302", "createdAt": "2020-04-16T08:53:25Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Resource;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.annotation.EnableKafka;\n+// TODO - Enable when consumer is implemented\n+//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+//import org.springframework.kafka.core.ConsumerFactory;\n+//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+\n+@EnableKafka\n+@Configuration\n+public class KafkaConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MjgwMg==", "bodyText": "For now it would make the class more easier to read without the consumer code. Instead of all the commented lines of code, you could have one comment stating the consumer part has not been implemented yet.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409392802", "createdAt": "2020-04-16T08:55:40Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Resource;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.annotation.EnableKafka;\n+// TODO - Enable when consumer is implemented\n+//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+//import org.springframework.kafka.core.ConsumerFactory;\n+//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+\n+@EnableKafka\n+@Configuration\n+public class KafkaConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MTMwMg=="}, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5MzI5Mw==", "bodyText": "I really wish you didn't use that.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409393293", "createdAt": "2020-04-16T08:56:23Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/config/KafkaConfig.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.opensmartgridplatform.adapter.kafka.da.application.config;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.annotation.Resource;\n+\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.kafka.annotation.EnableKafka;\n+// TODO - Enable when consumer is implemented\n+//import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\n+//import org.springframework.kafka.core.ConsumerFactory;\n+//import org.springframework.kafka.core.DefaultKafkaConsumerFactory;\n+import org.springframework.kafka.core.DefaultKafkaProducerFactory;\n+import org.springframework.kafka.core.KafkaTemplate;\n+\n+@EnableKafka\n+@Configuration\n+public class KafkaConfig {\n+    @Resource\n+    private Environment environment;\n+\n+    @Value(\"${distributionautomation.kafka.producer.topic}\")\n+    private String topicProducer;\n+\n+    // TODO - Enable when consumer is implemented\n+    // @Value(\"${distributionautomation.kafka.consumer.concurrency}\")\n+    // private Integer concurrency;\n+    //\n+    // @Value(\"${distributionautomation.kafka.consumer.poll.timeout}\")\n+    // private Integer pollTimeout;\n+\n+    private Map<String, Object> producerConfigs() {\n+        final Map<String, Object> properties = this.createCommonProperties();\n+        properties.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n+        properties.put(\"value.serializer\",\n+                \"org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingSerializer\");\n+        KafkaProperties.producerProperties()\n+                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka.producer\", v));\n+        return properties;\n+    }\n+\n+    private Map<String, Object> createCommonProperties() {\n+        final Map<String, Object> properties = new HashMap<>();\n+        KafkaProperties.commonProperties()\n+                .forEach((k, v) -> this.addIfExist(properties, k, \"distributionautomation.kafka\", v));\n+\n+        return properties;\n+    }\n+\n+    // TODO - Enable when consumer is implemented\n+    // @formatter:off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjMxMg==", "bodyText": "seems a leftover of the POC", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409396312", "createdAt": "2020-04-16T09:00:51Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NjQ1NQ==", "bodyText": "seems a leftover of the POC", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409396455", "createdAt": "2020-04-16T09:01:04Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));\n+        final Long end = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .max(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-16 00:00:00\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5NzE0MQ==", "bodyText": "This code was good enough for the POC. I doubt if it is good enough now.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409397141", "createdAt": "2020-04-16T09:02:11Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));\n+        final Long end = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .max(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-16 00:00:00\"));\n+        final ValuesInterval valuesInterval = new ValuesInterval(start, end);\n+\n+        final UsagePoint usagePoint = new UsagePoint(this.getUsagePoint(identification));\n+        return new MeterReading(valuesInterval, null, identification, usagePoint, Arrays.asList(intervalBlock));\n+\n+    }\n+\n+    private ReadingType getReadingType(final String identification) {\n+        if (identification.contains(\"Power\")) {\n+            return new ReadingType(\"10s\", \"energy\", \"M\", \"W\", \"Energy MW en 10s\", null);\n+        } else {\n+            return new ReadingType(\"60s\", \"temperature\", \"none\", \"degC\", \"Temperature transformateur \u00b0C en 60s\", null);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5ODI1Nw==", "bodyText": "This code was good enough for the POC. I doubt if it is good enough now.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409398257", "createdAt": "2020-04-16T09:03:55Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/mapping/MeterReadingMapping.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.mapping;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.opensmartgridplatform.adapter.kafka.IntervalBlock;\n+import org.opensmartgridplatform.adapter.kafka.IntervalReading;\n+import org.opensmartgridplatform.adapter.kafka.MeterReading;\n+import org.opensmartgridplatform.adapter.kafka.ReadingType;\n+import org.opensmartgridplatform.adapter.kafka.UsagePoint;\n+import org.opensmartgridplatform.adapter.kafka.ValuesInterval;\n+import org.opensmartgridplatform.domain.da.measurements.Measurement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementGroup;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.domain.da.measurements.elements.FloatMeasurementElement;\n+import org.opensmartgridplatform.domain.da.measurements.elements.TimestampMeasurementElement;\n+\n+import ma.glasnost.orika.CustomConverter;\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class MeterReadingMapping extends CustomConverter<MeasurementReport, MeterReading> {\n+\n+    @Override\n+    public MeterReading convert(final MeasurementReport source, final Type<? extends MeterReading> destinationType,\n+            final MappingContext mappingContext) {\n+\n+        final List<MeasurementElement> measurementElements = source.getMeasurementGroups()\n+                .stream()\n+                .map(MeasurementGroup::getMeasurements)\n+                .flatMap(List::stream)\n+                .map(Measurement::getMeasurementElements)\n+                .flatMap(List::stream)\n+                .collect(Collectors.toList());\n+\n+        final List<IntervalReading> intervalReadings = Arrays.asList(this.getIntervalReading(measurementElements));\n+\n+        final String identification = source.getMeasurementGroups()\n+                .get(0)\n+                .getIdentification();\n+        final ReadingType readingType = this.getReadingType(identification);\n+        final IntervalBlock intervalBlock = new IntervalBlock(readingType, intervalReadings);\n+\n+        final Long start = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .min(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-13 00:00:00\"));\n+        final Long end = intervalReadings.stream()\n+                .map(IntervalReading::getTimeStamp)\n+                .max(Long::compareTo)\n+                .orElse(dateStringToEpoch(\"2020-01-16 00:00:00\"));\n+        final ValuesInterval valuesInterval = new ValuesInterval(start, end);\n+\n+        final UsagePoint usagePoint = new UsagePoint(this.getUsagePoint(identification));\n+        return new MeterReading(valuesInterval, null, identification, usagePoint, Arrays.asList(intervalBlock));\n+\n+    }\n+\n+    private ReadingType getReadingType(final String identification) {\n+        if (identification.contains(\"Power\")) {\n+            return new ReadingType(\"10s\", \"energy\", \"M\", \"W\", \"Energy MW en 10s\", null);\n+        } else {\n+            return new ReadingType(\"60s\", \"temperature\", \"none\", \"degC\", \"Temperature transformateur \u00b0C en 60s\", null);\n+        }\n+    }\n+\n+    private static long dateStringToEpoch(final String dateString) {\n+        final LocalDateTime localDateTime = LocalDateTime.parse(dateString,\n+                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n+        return localDateTime.atZone(ZoneId.systemDefault())\n+                .toInstant()\n+                .toEpochMilli();\n+    }\n+\n+    private CharSequence getUsagePoint(final String identification) {\n+        String usagePoint = \"Substation 1\";\n+        if (identification.contains(\"TFR1\")) {\n+            usagePoint += \" PT 1\";\n+        }\n+        if (identification.contains(\"TFR2\")) {\n+            usagePoint += \" PT 2\";\n+        }\n+        return usagePoint;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM5OTQ1Mg==", "bodyText": "Why don't we use an optional with orElseThrow?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409399452", "createdAt": "2020-04-16T09:05:45Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/application/services/DomainHelperService.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.application.services;\n+\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.RtuDevice;\n+import org.opensmartgridplatform.domain.core.exceptions.NotAuthorizedException;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.OrganisationRepository;\n+import org.opensmartgridplatform.domain.core.repositories.RtuDeviceRepository;\n+import org.opensmartgridplatform.domain.core.services.SecurityService;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceFunction;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class DomainHelperService {\n+\n+    private static final ComponentType COMPONENT_TYPE = ComponentType.KAFKA_DISTRIBUTION_AUTOMATION;\n+\n+    @Autowired\n+    private RtuDeviceRepository rtuDeviceRepository;\n+\n+    @Autowired\n+    private OrganisationRepository organisationRepository;\n+\n+    @Autowired\n+    private SecurityService securityService;\n+\n+    public RtuDevice findDevice(final String deviceIdentification) throws FunctionalException {\n+        final RtuDevice device = this.rtuDeviceRepository.findByDeviceIdentification(deviceIdentification);\n+        if (device == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMTg1MQ==", "bodyText": "there is no param notification Type", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409401851", "createdAt": "2020-04-16T09:09:28Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.jms.messageprocessors;\n+\n+import java.io.Serializable;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.MeterReadingProducer;\n+import org.opensmartgridplatform.domain.da.measurements.MeasurementReport;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.MessageProcessor;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Class to process incoming domain responses.\n+ */\n+@Component(value = \"kafkaDistributionAutomationInboundDomainResponsesMessageProcessor\")\n+public class DomainResponseMessageProcessor implements MessageProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DomainResponseMessageProcessor.class);\n+\n+    @Autowired\n+    protected DistributionAutomationMapper mapper;\n+\n+    @Autowired\n+    private MeterReadingProducer meterReadingProducer;\n+\n+    @Override\n+    public void processMessage(final ObjectMessage message) {\n+        LOGGER.debug(\"Processing distribution automation response message\");\n+\n+        String correlationUid = null;\n+        String messageType = null;\n+        String organisationIdentification = null;\n+        String deviceIdentification = null;\n+\n+        ResponseMessageResultType resultType;\n+        String resultDescription;\n+        ResponseMessage dataObject;\n+\n+        try {\n+            correlationUid = message.getJMSCorrelationID();\n+            organisationIdentification = message.getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n+            deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n+\n+            messageType = message.getJMSType();\n+\n+            resultType = ResponseMessageResultType.valueOf(message.getStringProperty(Constants.RESULT));\n+            resultDescription = message.getStringProperty(Constants.DESCRIPTION);\n+\n+            dataObject = (ResponseMessage) message.getObject();\n+        } catch (final IllegalArgumentException e) {\n+            LOGGER.error(\"UNRECOVERABLE ERROR, received messageType {} is unknown.\", messageType, e);\n+            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n+\n+            return;\n+        } catch (final JMSException e) {\n+            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n+            logDebugInformation(messageType, correlationUid, organisationIdentification, deviceIdentification);\n+\n+            return;\n+        }\n+\n+        try {\n+            LOGGER.info(\"Calling application service function to handle response: {}\", messageType);\n+\n+            final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification,\n+                    correlationUid);\n+            this.handleMessage(ids, messageType, resultType, resultDescription, dataObject);\n+\n+        } catch (final RuntimeException e) {\n+            handleError(e, correlationUid);\n+        }\n+    }\n+\n+    private void handleMessage(final CorrelationIds ids, final String messageType,\n+            final ResponseMessageResultType resultType, final String resultDescription, final ResponseMessage message) {\n+\n+        final Serializable dataObject = message.getDataObject();\n+        if (!(dataObject instanceof MeasurementReport)) {\n+            LOGGER.error(\"For this component we only handle measurement reports\");\n+        } else {\n+            this.meterReadingProducer.send(this.mapper.map(dataObject,\n+                    org.opensmartgridplatform.domain.da.measurements.MeasurementReport.class));\n+        }\n+\n+    }\n+\n+    /**\n+     * In case of an error, this function can be used to send a response\n+     * containing the exception to the web-service-adapter.\n+     *\n+     * @param e\n+     *            The exception.\n+     * @param correlationUid\n+     *            The correlation UID.\n+     * @param notificationType\n+     *            The message type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwMzAxMw==", "bodyText": "I would expect distribution automation to be a part of the namespace", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409403013", "createdAt": "2020-04-16T09:11:22Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/meterReading.avsc", "diffHunk": "@@ -0,0 +1,89 @@\n+{\n+  \"type\" : \"record\",\n+  \"name\" : \"MeterReading\",\n+  \"namespace\" : \"org.opensmartgridplatform.adapter.kafka\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNTE3OA==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409405178", "createdAt": "2020-04-16T09:14:41Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/parent-platform/pom.xml", "diffHunk": "@@ -12,18 +12,19 @@\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n \n-  <artifactId>parent-platform</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNTU4NA==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409405584", "createdAt": "2020-04-16T09:15:20Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-iec60870/osgp-iec60870/pom.xml", "diffHunk": "@@ -28,6 +28,11 @@\n   </properties>\n \n   <dependencies>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNTY2OQ==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409405669", "createdAt": "2020-04-16T09:15:27Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-admin/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-admin</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNTc2Ng==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409405766", "createdAt": "2020-04-16T09:15:36Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-core/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-core</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNTkxNg==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409405916", "createdAt": "2020-04-16T09:15:50Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-distributionautomation/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-distributionautomation</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNTk4NA==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409405984", "createdAt": "2020-04-16T09:15:58Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-microgrids/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-microgrids</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNjA1OA==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409406058", "createdAt": "2020-04-16T09:16:05Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-publiclighting/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-publiclighting</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNjE0MQ==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409406141", "createdAt": "2020-04-16T09:16:12Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-smartmetering/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-smartmetering</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNjI0OA==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409406248", "createdAt": "2020-04-16T09:16:23Z", "author": {"login": "robindenadel"}, "path": "osgp/shared/osgp-ws-tariffswitching/pom.xml", "diffHunk": "@@ -22,6 +22,29 @@\n   <artifactId>osgp-ws-tariffswitching</artifactId>\n   <packaging>jar</packaging>\n \n+  <dependencies>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNzA4Nw==", "bodyText": "I wouldn't expect changes in this file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409407087", "createdAt": "2020-04-16T09:17:42Z", "author": {"login": "robindenadel"}, "path": "public-lighting-demo-app/web-demo-app/pom.xml", "diffHunk": "@@ -12,26 +12,25 @@\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-v4_0_0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n \n-  <artifactId>web-demo-app</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQwNzYxNw==", "bodyText": "Adapt the super pom of the applications so these values are not duplicated", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#discussion_r409407617", "createdAt": "2020-04-16T09:18:28Z", "author": {"login": "robindenadel"}, "path": "super/pom.xml", "diffHunk": "@@ -127,41 +130,12 @@\n     <cucumber.version>5.6.0</cucumber.version>\n     <sun.httpserver.version>20070405</sun.httpserver.version>\n     <postgresql.version>42.2.12</postgresql.version>\n+    <javax.xml.soap-api.version>1.4.0</javax.xml.soap-api.version>\n+    <kafka.version>2.4.0</kafka.version>\n+    <avro.version>1.9.1</avro.version>\n+    <spring.kafka.version>2.4.4.RELEASE</spring.kafka.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "110fca2b621634da50f555a4222dba0198fdee62"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/995ed2b4ef03e419c2fda65c1ce2854163af9ee2", "committedDate": "2020-04-21T08:01:10Z", "message": "OC-560 ~ Processes review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b274ea71e86a26f2776b201544e7aba1f4955e5", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5b274ea71e86a26f2776b201544e7aba1f4955e5", "committedDate": "2020-04-21T08:25:16Z", "message": "Merge branch 'development' into feature/OC-560-Kafka-adapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adebad1229c2c7083d0176209af79f6b3a53c1d3", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/adebad1229c2c7083d0176209af79f6b3a53c1d3", "committedDate": "2020-04-21T15:54:14Z", "message": "OC-560 ~ Implements kafka consumer configuration in shared\n\nAnd refactors kafka producer configuration to align with kafka consumer\nconfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ece97321bd1cfafa7f36d3b995742d6aee9f185", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1ece97321bd1cfafa7f36d3b995742d6aee9f185", "committedDate": "2020-04-21T16:42:14Z", "message": "Merge branch 'development' into feature/OC-560-Kafka-adapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92378e4ebb49c1ffb0898951d4f1030b8c55a5a0", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/92378e4ebb49c1ffb0898951d4f1030b8c55a5a0", "committedDate": "2020-04-22T13:47:50Z", "message": "OC-560 ~ Fixes unused parameter warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec3c668acbde81a1962f8189d59a88028a52236a", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ec3c668acbde81a1962f8189d59a88028a52236a", "committedDate": "2020-04-22T16:26:38Z", "message": "OC-560 ~ Updates spring-kafka dependency to scope provided\n\nAnd reorders pom elements to recommended order according to pom code\nconventions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Nzk0ODM5", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/280#pullrequestreview-398794839", "createdAt": "2020-04-23T06:32:47Z", "commit": {"oid": "ec3c668acbde81a1962f8189d59a88028a52236a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3858, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}