{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NjA4MzY1", "number": 437, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1ODoyOVrOEsfysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNzoyMFrOFFlkbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDkzNjgyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1ODoyOVrOHfxVYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1ODoyOVrOHfxVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3NjE5NQ==", "bodyText": "licence header is missing", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503076195", "createdAt": "2020-10-12T06:58:29Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk0MDg0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1OTo0OFrOHfxXvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNjo1OTo0OFrOHfxXvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3Njc5OA==", "bodyText": "Remove this line; the default strictness is better.\nFix unnecessary stubbing.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503076798", "createdAt": "2020-10-12T06:59:48Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk0ODg1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowMjozN1rOHfxcUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowMjozN1rOHfxcUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3Nzk3MA==", "bodyText": "rename the field to correlationIds", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503077970", "createdAt": "2020-10-12T07:02:37Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk1MTQ5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowMzozNlrOHfxd4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowMzozNlrOHfxd4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3ODM2OA==", "bodyText": "give this field a descriptive name like messageTypeArgumentCaptor", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503078368", "createdAt": "2020-10-12T07:03:36Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk1MjQ4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowMzo1OFrOHfxecw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowMzo1OFrOHfxecw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3ODUxNQ==", "bodyText": "give this field a descriptive name like ipAddressArgumentCaptor", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503078515", "createdAt": "2020-10-12T07:03:58Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk1Mzk5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowNDoyM1rOHfxfUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzowNDoyM1rOHfxfUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA3ODczOA==", "bodyText": "give this field a descriptive name like priorityArgumentCaptor", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503078738", "createdAt": "2020-10-12T07:04:23Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk3MjYyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxMDoxMFrOHfxp5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxMDoxMFrOHfxp5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4MTQ0NQ==", "bodyText": "give this field a descriptive name like scheduledTimeArgumentCaptor", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503081445", "createdAt": "2020-10-12T07:10:10Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk4MDU4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxMjoyOVrOHfxuTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzozOToyMFrOH6zubg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4MjU3Mw==", "bodyText": "whole file: Add some blank lines to arrange some code blocks.\nSee https://www.oracle.com/java/technologies/javase/codeconventions-indentation.html", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503082573", "createdAt": "2020-10-12T07:12:29Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5ODI1Mw==", "bodyText": "you've created the fields\nprivate final String organisationIdentification = \"a\";\nprivate final String deviceIdentification = \"b\";\nprivate final String correlationUid = \"c\"\nand still uses \"a\", \"b\" and \"c\" in the test code. This is very odd.\nRefactor the fields to constants, and use these constants in the test code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503098253", "createdAt": "2020-10-12T07:44:03Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4MjU3Mw=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5ODczNQ==", "bodyText": "reduce duplicate code by introducing some methods", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503098735", "createdAt": "2020-10-12T07:44:58Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4MjU3Mw=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3ODI2Mg==", "bodyText": "I removed some unnecessary parts, but which duplicate code needs to be reduced. I only have blocks of Mockito.when and Assertions.assertThat. These blocks very between classes and don't seem very suitable for being placed in a seperate method.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503778262", "createdAt": "2020-10-13T08:50:26Z", "author": {"login": "mvanOsch"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4MjU3Mw=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNjkyNg==", "bodyText": "For example, some when blocks could be refactored to a method\n    private void arrangeOrganisationDeviceAndIpAddress(final Organisation organisation, final Device activeDevice,\n            final String ipAddress) throws UnknownEntityException, FunctionalException {\n        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(organisation);\n        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(activeDevice);\n        when(activeDevice.getIpAddress()).thenReturn(ipAddress);\n    }\n\nand call this method like this\nthis.arrangeOrganisationDeviceAndIpAddress(new Organisation(), this.device, IP_ADDRESS);", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r531426926", "createdAt": "2020-11-27T07:39:20Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4MjU3Mw=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDk5NTgwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxNzoyMlrOHfx3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoxNzoyMlrOHfx3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NDg5OA==", "bodyText": "ids -> correlation ids", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503084898", "createdAt": "2020-10-12T07:17:22Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTAwNTgzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyMDo0NlrOHfx9kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0NDoxNlrOH6z1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NjQ4MA==", "bodyText": "remove this unnecessary code", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503086480", "createdAt": "2020-10-12T07:20:46Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3NTc2NA==", "bodyText": "This code doesn't seem to be unnecessary. Mockito's injection with the Mock annotation doesn't seem to work, possibly because the fields are actually in the parent class AbstractService rather than in ConfigurationManagementService. Simply removing the code results in nullpointer exceptions because the mock is never inserted.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503775764", "createdAt": "2020-10-13T08:46:32Z", "author": {"login": "mvanOsch"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NjQ4MA=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTY2NQ==", "bodyText": "it works without this code block", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r516471665", "createdAt": "2020-11-03T07:44:22Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NjQ4MA=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODcyMw==", "bodyText": "you really should change this", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r531428723", "createdAt": "2020-11-27T07:44:16Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4NjQ4MA=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTAxNDM4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyMzoyMFrOHfyCpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0OToxMFrOHsjDAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4Nzc4Mw==", "bodyText": "Since we are going to check for these values in the assert part of more than one test, refactor these into constants", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503087783", "createdAt": "2020-10-12T07:23:20Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MzYwMA==", "bodyText": "testOrganisation is still not a constant", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r516473600", "createdAt": "2020-11-03T07:49:10Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4Nzc4Mw=="}, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTAyNDIyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyNjoxN1rOHfyIXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyNjoxN1rOHfyIXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4OTI0Nw==", "bodyText": "you can use\nList relayMapList = Arrays.asList(relayMap);\ninstead", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503089247", "createdAt": "2020-10-12T07:26:17Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTAyNjcxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyNzowNFrOHfyJ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyNzowNFrOHfyJ5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA4OTYzNw==", "bodyText": "refactor \"333.333.1.22\" into a constant", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503089637", "createdAt": "2020-10-12T07:27:04Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTAyOTQ1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyODowMFrOHfyLlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzoyODowMFrOHfyLlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDA2OQ==", "bodyText": "this should be constants", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503090069", "createdAt": "2020-10-12T07:28:00Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTA0MDMyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzozMToyNVrOHfySMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzozMToyNVrOHfySMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MTc2MQ==", "bodyText": "replace this line with\nassertThat(this.outContent.toString()).contains(\"Configuration is empty, skip sending a request to device\");", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503091761", "createdAt": "2020-10-12T07:31:25Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testTrySetConfigurationWithNoConfiguration() throws Exception {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+\n+        this.configurationManagementService.setConfiguration(this.ids, null, scheduleTime, messageType, messagePriority);\n+\n+        assertThat(this.outContent.toString().contains(\"Configuration is empty, skip sending a request to device\")).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTA2ODI0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0MDoxN1rOHfyjNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0MDoxN1rOHfyjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5NjExOQ==", "bodyText": "this should be one line, check your format settings", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503096119", "createdAt": "2020-10-12T07:40:17Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testTrySetConfigurationWithNoConfiguration() throws Exception {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+\n+        this.configurationManagementService.setConfiguration(this.ids, null, scheduleTime, messageType, messagePriority);\n+\n+        assertThat(this.outContent.toString().contains(\"Configuration is empty, skip sending a request to device\")).isTrue();\n+    }\n+    @Test\n+    public void\n+    testTrySetConfigurationWithNullRelayConfiguration() throws UnknownEntityException, FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTA5MjIwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0Njo1MVrOHfyxmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0Njo1MVrOHfyxmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5OTgwMA==", "bodyText": "remove this unnecessary code", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503099800", "createdAt": "2020-10-12T07:46:51Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testTrySetConfigurationWithNoConfiguration() throws Exception {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+\n+        this.configurationManagementService.setConfiguration(this.ids, null, scheduleTime, messageType, messagePriority);\n+\n+        assertThat(this.outContent.toString().contains(\"Configuration is empty, skip sending a request to device\")).isTrue();\n+    }\n+    @Test\n+    public void\n+    testTrySetConfigurationWithNullRelayConfiguration() throws UnknownEntityException, FunctionalException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.configuration.getRelayConfiguration()).thenReturn(null);\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(null);\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testGetConfiguration() throws UnknownEntityException, FunctionalException {\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(new Organisation());\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.getConfiguration(this.organisationIdentification, this.deviceIdentification,\n+                this.correlationUid, messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).send(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+    }\n+    @Test\n+    public void testHandleGetConfigurationResponse() throws UnknownEntityException, FunctionalException {\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+        this.exception = null;\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(new Organisation());\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.ssldRepository.findByDeviceIdentification(\"b\")).thenReturn(new Ssld());\n+\n+        this.configurationManagementService.handleGetConfigurationResponse(this.configurationDto, this.ids,\n+                messageType, messagePriority,\n+                ResponseMessageResultType.OK, this.exception);\n+\n+        verify(this.webServiceResponseMessageSender).send(this.responseMessageArgumentCaptor.capture());\n+\n+        assertThat(this.responseMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.responseMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.responseMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.responseMessageArgumentCaptor.getValue().getResult()).isEqualTo(ResponseMessageResultType.OK);\n+    }\n+    @Test\n+    public void testHandleGetConfigurationResponseWithException() throws UnknownEntityException, FunctionalException {\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+        this.exception = new OsgpException(ComponentType.DOMAIN_ADMIN, \"a\");\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(new Organisation());\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.ssldRepository.findByDeviceIdentification(\"b\")).thenReturn(new Ssld());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTA5NzE3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0ODoyNVrOHfy0pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0ODoyNVrOHfy0pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMDU4MA==", "bodyText": "remove this line", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503100580", "createdAt": "2020-10-12T07:48:25Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testTrySetConfigurationWithNoConfiguration() throws Exception {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTEwMjA5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0OTo0MlrOHfy3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0OTo0MlrOHfy3kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEwMTMyOA==", "bodyText": "remove these lines", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r503101328", "createdAt": "2020-10-12T07:49:42Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,290 @@\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.LENIENT)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds ids;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorOne;\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptorTwo;\n+    @Captor\n+    private ArgumentCaptor<Integer> integerArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> longArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+    private final String organisationIdentification = \"a\";\n+    private final String deviceIdentification = \"b\";\n+    private final String correlationUid = \"c\";\n+    private OsgpException exception;\n+    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make ids\n+        this.ids = new CorrelationIds(this.organisationIdentification, this.deviceIdentification, this.correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(AbstractService.class, \"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(AbstractService.class, \"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(AbstractService.class, \"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(AbstractService.class, \"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final ArrayList<RelayMap> relayMapList = new ArrayList<>();\n+        relayMapList.add(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testTrySetConfigurationWithNoConfiguration() throws Exception {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+\n+        this.configurationManagementService.setConfiguration(this.ids, null, scheduleTime, messageType, messagePriority);\n+\n+        assertThat(this.outContent.toString().contains(\"Configuration is empty, skip sending a request to device\")).isTrue();\n+    }\n+    @Test\n+    public void\n+    testTrySetConfigurationWithNullRelayConfiguration() throws UnknownEntityException, FunctionalException {\n+        final long scheduleTime = 1;\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.configuration.getRelayConfiguration()).thenReturn(null);\n+\n+        this.configurationManagementService.setConfiguration(this.ids, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture(), this.longArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(null);\n+        assertThat(this.longArgumentCaptor.getValue()).isEqualTo(1);\n+    }\n+    @Test\n+    public void testGetConfiguration() throws UnknownEntityException, FunctionalException {\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(new Organisation());\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.device.getIpAddress()).thenReturn(\"333.333.1.22\");\n+\n+        this.configurationManagementService.getConfiguration(this.organisationIdentification, this.deviceIdentification,\n+                this.correlationUid, messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).send(this.requestMessageArgumentCaptor.capture(),\n+                this.stringArgumentCaptorOne.capture(), this.integerArgumentCaptor.capture(),\n+                this.stringArgumentCaptorTwo.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"c\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"a\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"b\");\n+        assertThat(this.stringArgumentCaptorOne.getValue()).isEqualTo(messageType);\n+        assertThat(this.integerArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.stringArgumentCaptorTwo.getValue()).isEqualTo(\"333.333.1.22\");\n+    }\n+    @Test\n+    public void testHandleGetConfigurationResponse() throws UnknownEntityException, FunctionalException {\n+        final String messageType = \"none\";\n+        final int messagePriority = 1;\n+        this.exception = null;\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(new Organisation());\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a185e21fa2b503ebba41b3a67df1548048198fc"}, "originalPosition": 224}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjgyNDYwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0NDo1NFrOHsi8Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0NDo1NFrOHsi8Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTkwNw==", "bodyText": "A single-line comment should be preceded by a blank line, see https://www.oracle.com/java/technologies/javase/codeconventions-comments.html#341", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r516471907", "createdAt": "2020-11-03T07:44:54Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds correlationIds;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> messageTypeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> ipAddressArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Integer> messagePriorityArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> scheduledTimeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+\n+    private static final String organisationIdentification = \"orgIdentification\";\n+    private static final String deviceIdentification = \"deviceIdentification\";\n+    private static final String correlationUid = \"correlationUid\";\n+    private static final long scheduleTime = 1;\n+    private static final String messageType = \"none\";\n+    private static final int messagePriority = 1;\n+    private static final String ipAddress = \"333.333.1.22\";\n+\n+    private OsgpException exception;\n+    private static final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make correlationIds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6c1016da1ee56f0b8843a3bcc10819a367ff3"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjgyNTk3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0NToyNlrOHsi9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0NToyNlrOHsi9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MjExMw==", "bodyText": "Constants should be all uppercase with words separated by underscores, see https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r516472113", "createdAt": "2020-11-03T07:45:26Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds correlationIds;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> messageTypeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> ipAddressArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Integer> messagePriorityArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> scheduledTimeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+\n+    private static final String organisationIdentification = \"orgIdentification\";\n+    private static final String deviceIdentification = \"deviceIdentification\";\n+    private static final String correlationUid = \"correlationUid\";\n+    private static final long scheduleTime = 1;\n+    private static final String messageType = \"none\";\n+    private static final int messagePriority = 1;\n+    private static final String ipAddress = \"333.333.1.22\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6c1016da1ee56f0b8843a3bcc10819a367ff3"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg0NzExOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MzoxMFrOHsjJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1MzoxMFrOHsjJuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTMyMQ==", "bodyText": "check to the constant messagePriority\ngoes for other tests as well", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r516475321", "createdAt": "2020-11-03T07:53:10Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds correlationIds;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> messageTypeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> ipAddressArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Integer> messagePriorityArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> scheduledTimeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+\n+    private static final String organisationIdentification = \"orgIdentification\";\n+    private static final String deviceIdentification = \"deviceIdentification\";\n+    private static final String correlationUid = \"correlationUid\";\n+    private static final long scheduleTime = 1;\n+    private static final String messageType = \"none\";\n+    private static final int messagePriority = 1;\n+    private static final String ipAddress = \"333.333.1.22\";\n+\n+    private OsgpException exception;\n+    private static final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make correlationIds\n+        this.correlationIds = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(\"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(\"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(\"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(\"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(\"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(\"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final List<RelayMap> relayMapList = Arrays.asList(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(ipAddress);\n+\n+        this.configurationManagementService.setConfiguration(this.correlationIds, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.messageTypeArgumentCaptor.capture(), this.messagePriorityArgumentCaptor.capture(),\n+                this.ipAddressArgumentCaptor.capture(), this.scheduledTimeArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"correlationUid\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"orgIdentification\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"deviceIdentification\");\n+        assertThat(this.messageTypeArgumentCaptor.getValue()).isEqualTo(messageType);\n+        assertThat(this.messagePriorityArgumentCaptor.getValue()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6c1016da1ee56f0b8843a3bcc10819a367ff3"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjg0ODcwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1Mzo0M1rOHsjKrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo1Mzo0M1rOHsjKrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3NTU2Nw==", "bodyText": "check to the constant scheduleTime\ngoes for other tests as well", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r516475567", "createdAt": "2020-11-03T07:53:43Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds correlationIds;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> messageTypeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> ipAddressArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Integer> messagePriorityArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> scheduledTimeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+\n+    private static final String organisationIdentification = \"orgIdentification\";\n+    private static final String deviceIdentification = \"deviceIdentification\";\n+    private static final String correlationUid = \"correlationUid\";\n+    private static final long scheduleTime = 1;\n+    private static final String messageType = \"none\";\n+    private static final int messagePriority = 1;\n+    private static final String ipAddress = \"333.333.1.22\";\n+\n+    private OsgpException exception;\n+    private static final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n+\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+        // make correlationIds\n+        this.correlationIds = new CorrelationIds(organisationIdentification, deviceIdentification, correlationUid);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(\"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(\"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(\"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(\"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(\"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(\"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.outContent));\n+    }\n+\n+    @Test\n+    public void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final Organisation testOrganisation = new Organisation();\n+\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final List<RelayMap> relayMapList = Arrays.asList(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(ipAddress);\n+\n+        this.configurationManagementService.setConfiguration(this.correlationIds, this.configuration, scheduleTime,\n+                messageType, messagePriority);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.messageTypeArgumentCaptor.capture(), this.messagePriorityArgumentCaptor.capture(),\n+                this.ipAddressArgumentCaptor.capture(), this.scheduledTimeArgumentCaptor.capture());\n+\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getCorrelationUid()).isEqualTo(\"correlationUid\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getOrganisationIdentification()).isEqualTo(\"orgIdentification\");\n+        assertThat(this.requestMessageArgumentCaptor.getValue().getDeviceIdentification()).isEqualTo(\"deviceIdentification\");\n+        assertThat(this.messageTypeArgumentCaptor.getValue()).isEqualTo(messageType);\n+        assertThat(this.messagePriorityArgumentCaptor.getValue()).isEqualTo(1);\n+        assertThat(this.ipAddressArgumentCaptor.getValue()).isEqualTo(ipAddress);\n+        assertThat(this.scheduledTimeArgumentCaptor.getValue()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa6c1016da1ee56f0b8843a3bcc10819a367ff3"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzMxNDQ3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0Nzo0MFrOH6z60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwNzo0Nzo0MFrOH6z60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzMDA5Ng==", "bodyText": "The static field ConfigurationManagementServiceTest.OUT_CONTENT should be accessed in a static way.\nSo replace this.OUT_CONTENT with OUT_CONTENT\ngoes for all the occurences of this.OUT_CONTENT", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r531430096", "createdAt": "2020-11-27T07:47:40Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Field;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds correlationIds;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> messageTypeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> ipAddressArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Integer> messagePriorityArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> scheduledTimeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+\n+    private static final String ORG_IDENTIFICATION = \"orgIdentification\";\n+    private static final String DEVICE_IDENTIFICATION = \"deviceIdentification\";\n+    private static final String CORRELATION_UID = \"correlationUid\";\n+    private static final long SCHEDULE_TIME = 1;\n+    private static final String MESSAGE_TYPE = \"none\";\n+    private static final int MESSAGE_PRIORITY = 1;\n+    private static final String IP_ADDRESS = \"333.333.1.22\";\n+\n+    private OsgpException exception;\n+    private static final ByteArrayOutputStream OUT_CONTENT = new ByteArrayOutputStream();\n+    private static final Organisation TEST_ORGANISATION = new Organisation();\n+\n+    @BeforeEach\n+    public void setUp() throws NoSuchFieldException,\n+            SecurityException, IllegalArgumentException, IllegalAccessException {\n+\n+        // make correlationIds\n+        this.correlationIds = new CorrelationIds(ORG_IDENTIFICATION, DEVICE_IDENTIFICATION, CORRELATION_UID);\n+        this.configurationManagementService = new ConfigurationManagementService();\n+\n+        // do injection using reflection\n+        // Inject Mocks doesn't inject these mocks, possibly because they are in the parent class of\n+        // ConfigurationManagementService\n+        this.injectionUsingReflection(\"organisationDomainService\",\n+                this.configurationManagementService, this.organisationDomainService);\n+        this.injectionUsingReflection(\"deviceDomainService\", this.configurationManagementService,\n+                this.deviceDomainService);\n+        this.injectionUsingReflection(\"domainCoreMapper\", this.configurationManagementService,\n+                this.domainCoreMapper);\n+        this.injectionUsingReflection(\"osgpCoreRequestMessageSender\",\n+                this.configurationManagementService, this.osgpCoreRequestMessageSender);\n+        this.injectionUsingReflection(\"webServiceResponseMessageSender\",\n+                this.configurationManagementService, this.webServiceResponseMessageSender);\n+        this.injectionUsingReflection(\"ssldRepository\", this.configurationManagementService,\n+                this.ssldRepository);\n+\n+        System.setOut(new PrintStream(this.OUT_CONTENT));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a4943f9e4395617e25ea6df3fa711bfb748ec11"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDAyNzM1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNzoyMFrOIGKz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzoyNzoyMFrOIGKz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzOTQ3Mw==", "bodyText": "Formatting not OK, check your settings", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/437#discussion_r543339473", "createdAt": "2020-12-15T13:27:20Z", "author": {"login": "robindenadel"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/ConfigurationManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.core.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doNothing;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.domain.core.application.mapping.DomainCoreMapper;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.core.OsgpCoreRequestMessageSender;\n+import org.opensmartgridplatform.adapter.domain.core.infra.jms.ws.WebServiceResponseMessageSender;\n+import org.opensmartgridplatform.domain.core.entities.Device;\n+import org.opensmartgridplatform.domain.core.entities.Organisation;\n+import org.opensmartgridplatform.domain.core.entities.Ssld;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.repositories.SsldRepository;\n+import org.opensmartgridplatform.domain.core.services.DeviceDomainService;\n+import org.opensmartgridplatform.domain.core.services.OrganisationDomainService;\n+import org.opensmartgridplatform.domain.core.valueobjects.Configuration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayConfiguration;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayMap;\n+import org.opensmartgridplatform.domain.core.valueobjects.RelayType;\n+import org.opensmartgridplatform.dto.valueobjects.ConfigurationDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.infra.jms.CorrelationIds;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+@ExtendWith(MockitoExtension.class)\n+class ConfigurationManagementServiceTest {\n+    @Mock\n+    private WebServiceResponseMessageSender webServiceResponseMessageSender;\n+    @Mock\n+    private SsldRepository ssldRepository;\n+    @Mock\n+    private ConfigurationDto configurationDto;\n+    @Mock\n+    private DomainCoreMapper domainCoreMapper;\n+    @Mock\n+    private OrganisationDomainService organisationDomainService;\n+    @Mock\n+    private DeviceDomainService deviceDomainService;\n+    @Mock\n+    private CorrelationIds correlationIds;\n+    @Mock\n+    private Configuration configuration;\n+    @Mock\n+    private OsgpCoreRequestMessageSender osgpCoreRequestMessageSender;\n+    @Mock\n+    private Ssld ssld;\n+    @Mock\n+    private Device device;\n+    @Captor\n+    private ArgumentCaptor<RequestMessage> requestMessageArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> messageTypeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<String> ipAddressArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Integer> messagePriorityArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<Long> scheduledTimeArgumentCaptor;\n+    @Captor\n+    private ArgumentCaptor<ResponseMessage> responseMessageArgumentCaptor;\n+    @InjectMocks\n+    @Qualifier(\"organisationDomainService\")\n+    private ConfigurationManagementService configurationManagementService;\n+\n+    private static final String ORG_IDENTIFICATION = \"orgIdentification\";\n+    private static final String DEVICE_IDENTIFICATION = \"deviceIdentification\";\n+    private static final String CORRELATION_UID = \"correlationUid\";\n+    private static final long SCHEDULE_TIME = 1;\n+    private static final String MESSAGE_TYPE = \"none\";\n+    private static final int MESSAGE_PRIORITY = 1;\n+    private static final String IP_ADDRESS = \"333.333.1.22\";\n+\n+    private OsgpException exception;\n+    private static final Organisation TEST_ORGANISATION = new Organisation();\n+\n+    @BeforeEach\n+    public void setUp() throws SecurityException, IllegalArgumentException {\n+\n+        // make correlationIds\n+        this.correlationIds = new CorrelationIds(ORG_IDENTIFICATION, DEVICE_IDENTIFICATION, CORRELATION_UID);\n+    }\n+\n+    @Test\n+    void testTrySetConfiguration() throws FunctionalException, UnknownEntityException {\n+        final RelayMap relayMap = new RelayMap(1, 1, RelayType.LIGHT, \"1\");\n+        final List<RelayMap> relayMapList = Collections.singletonList(relayMap);\n+\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(TEST_ORGANISATION);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(this.device);\n+        when(this.configuration.getRelayConfiguration()).thenReturn(new RelayConfiguration(relayMapList));\n+        when(this.ssldRepository.findById(any())).thenReturn(java.util.Optional.of(this.ssld));\n+        when(this.domainCoreMapper.map(any(), any())).thenReturn(this.configurationDto);\n+        doNothing().when(this.ssld).updateOutputSettings(any());\n+        when(this.device.getIpAddress()).thenReturn(IP_ADDRESS);\n+\n+        this.configurationManagementService.setConfiguration(this.correlationIds, this.configuration, SCHEDULE_TIME,\n+                MESSAGE_TYPE, MESSAGE_PRIORITY);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.messageTypeArgumentCaptor.capture(), this.messagePriorityArgumentCaptor.capture(),\n+                this.ipAddressArgumentCaptor.capture(), this.scheduledTimeArgumentCaptor.capture());\n+\n+        this.checkRequestMessageArgumentCaptor();\n+        assertThat(this.messageTypeArgumentCaptor.getValue()).isEqualTo(MESSAGE_TYPE);\n+        assertThat(this.messagePriorityArgumentCaptor.getValue()).isEqualTo(MESSAGE_PRIORITY);\n+        assertThat(this.ipAddressArgumentCaptor.getValue()).isEqualTo(IP_ADDRESS);\n+        assertThat(this.scheduledTimeArgumentCaptor.getValue()).isEqualTo(SCHEDULE_TIME);\n+    }\n+\n+    @Test\n+    void testTrySetConfigurationWithNoConfiguration() throws Exception {\n+        this.configurationManagementService.setConfiguration(this.correlationIds, null, SCHEDULE_TIME, MESSAGE_TYPE,\n+                MESSAGE_PRIORITY);\n+\n+        verify(this.domainCoreMapper, never()).map(any(), any());\n+    }\n+\n+    @Test\n+    void testTrySetConfigurationWithNullRelayConfiguration() throws UnknownEntityException, FunctionalException {\n+        final Organisation testOrganisation = new Organisation();\n+        when(this.organisationDomainService.searchOrganisation(any(String.class))).thenReturn(testOrganisation);\n+        when(this.deviceDomainService.searchActiveDevice(any(), any())).thenReturn(new Device());\n+        when(this.configuration.getRelayConfiguration()).thenReturn(null);\n+\n+        this.configurationManagementService.setConfiguration(this.correlationIds, this.configuration, SCHEDULE_TIME,\n+                MESSAGE_TYPE, MESSAGE_PRIORITY);\n+\n+        verify(this.osgpCoreRequestMessageSender).sendWithScheduledTime(this.requestMessageArgumentCaptor.capture(),\n+                this.messageTypeArgumentCaptor.capture(), this.messagePriorityArgumentCaptor.capture(),\n+                this.ipAddressArgumentCaptor.capture(), this.scheduledTimeArgumentCaptor.capture());\n+\n+        this.checkRequestMessageArgumentCaptor();\n+        assertThat(this.messageTypeArgumentCaptor.getValue()).isEqualTo(MESSAGE_TYPE);\n+        assertThat(this.messagePriorityArgumentCaptor.getValue()).isEqualTo(MESSAGE_PRIORITY);\n+        assertThat(this.ipAddressArgumentCaptor.getValue()).isNull();\n+        assertThat(this.scheduledTimeArgumentCaptor.getValue()).isEqualTo(SCHEDULE_TIME);    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c12413769ab430df9e66bfd0b02122f60acdeec"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3518, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}