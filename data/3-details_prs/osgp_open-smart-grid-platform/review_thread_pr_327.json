{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MTM3NjI1", "number": 327, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0NzozMlrOD9eZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNjoyMFrOD9sN1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzg3OTAxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo0NzozMlrOGW_glQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToyMjo0M1rOGbA3zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2MjM4OQ==", "bodyText": "Any reason to hard-code the message type instead of using response.getMessageType()?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r426762389", "createdAt": "2020-05-18T16:47:32Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessor.java", "diffHunk": "@@ -42,65 +40,31 @@\n     protected GetDataResponseMessageProcessor(\n             @Qualifier(\"domainDistributionAutomationOutboundResponseMessageRouter\") final NotificationResponseMessageSender responseMessageSender,\n             @Qualifier(\"domainDistributionAutomationInboundOsgpCoreResponsesMessageProcessorMap\") final MessageProcessorMap messageProcessorMap) {\n-        super(responseMessageSender, messageProcessorMap, MessageType.GET_DATA);\n+        super(responseMessageSender, messageProcessorMap, GET_DATA);\n     }\n \n     @Override\n-    public void processMessage(final ObjectMessage message) throws JMSException {\n+    public void processMessage(final ObjectMessage message) {\n         LOGGER.debug(\"Processing DA GET_DATA response message\");\n         this.getResponseValues(message).ifPresent(this::processResponseValues);\n     }\n \n-    private Optional<ResponseValues> getResponseValues(final ObjectMessage message) {\n-        final ResponseValues responseValues = new ResponseValues();\n+    private Optional<ResponseMessage> getResponseValues(final ObjectMessage message) {\n         try {\n-            responseValues.correlationUid = message.getJMSCorrelationID();\n-            responseValues.messageType = message.getJMSType();\n-            responseValues.organisationIdentification = message\n-                    .getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n-            responseValues.deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n-            responseValues.responseMessage = (ResponseMessage) message.getObject();\n-            responseValues.responseMessageResultType = responseValues.responseMessage.getResult();\n-            responseValues.osgpException = responseValues.responseMessage.getOsgpException();\n-            responseValues.payload = (String) responseValues.responseMessage.getDataObject();\n+            return Optional.of((ResponseMessage) message.getObject());\n         } catch (final JMSException e) {\n-            this.logJmsException(responseValues, e);\n+            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n             return Optional.empty();\n         }\n-        return Optional.of(responseValues);\n     }\n \n-    private void processResponseValues(final ResponseValues responseValues) {\n+    private void processResponseValues(final ResponseMessage response) {\n         try {\n-            LOGGER.info(\"Calling application service function to handle response: {}\", responseValues.messageType);\n-            this.adHocManagementService.handleGetDataResponse(responseValues.payload,\n-                    responseValues.deviceIdentification);\n-        } catch (final Exception e) {\n-            this.handleError(e, responseValues.correlationUid, responseValues.organisationIdentification,\n-                    responseValues.deviceIdentification, responseValues.messageType);\n+            this.adHocManagementService.handleGetDataResponse(response);\n+        } catch (final RuntimeException e) {\n+            this.handleError(e, response.getCorrelationUid(), response.getOrganisationIdentification(),\n+                    response.getDeviceIdentification(), GET_DATA.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3OTAyMg==", "bodyText": "response.getMessageType() is null in this case. I used the hardcoded value, because it's the only message type handled by the class. We could improve this, but I'll wait for the architectural discussion on how we want to pass payload and metadata through the components.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r430979022", "createdAt": "2020-05-27T09:22:43Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessor.java", "diffHunk": "@@ -42,65 +40,31 @@\n     protected GetDataResponseMessageProcessor(\n             @Qualifier(\"domainDistributionAutomationOutboundResponseMessageRouter\") final NotificationResponseMessageSender responseMessageSender,\n             @Qualifier(\"domainDistributionAutomationInboundOsgpCoreResponsesMessageProcessorMap\") final MessageProcessorMap messageProcessorMap) {\n-        super(responseMessageSender, messageProcessorMap, MessageType.GET_DATA);\n+        super(responseMessageSender, messageProcessorMap, GET_DATA);\n     }\n \n     @Override\n-    public void processMessage(final ObjectMessage message) throws JMSException {\n+    public void processMessage(final ObjectMessage message) {\n         LOGGER.debug(\"Processing DA GET_DATA response message\");\n         this.getResponseValues(message).ifPresent(this::processResponseValues);\n     }\n \n-    private Optional<ResponseValues> getResponseValues(final ObjectMessage message) {\n-        final ResponseValues responseValues = new ResponseValues();\n+    private Optional<ResponseMessage> getResponseValues(final ObjectMessage message) {\n         try {\n-            responseValues.correlationUid = message.getJMSCorrelationID();\n-            responseValues.messageType = message.getJMSType();\n-            responseValues.organisationIdentification = message\n-                    .getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n-            responseValues.deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n-            responseValues.responseMessage = (ResponseMessage) message.getObject();\n-            responseValues.responseMessageResultType = responseValues.responseMessage.getResult();\n-            responseValues.osgpException = responseValues.responseMessage.getOsgpException();\n-            responseValues.payload = (String) responseValues.responseMessage.getDataObject();\n+            return Optional.of((ResponseMessage) message.getObject());\n         } catch (final JMSException e) {\n-            this.logJmsException(responseValues, e);\n+            LOGGER.error(\"UNRECOVERABLE ERROR, unable to read ObjectMessage instance, giving up.\", e);\n             return Optional.empty();\n         }\n-        return Optional.of(responseValues);\n     }\n \n-    private void processResponseValues(final ResponseValues responseValues) {\n+    private void processResponseValues(final ResponseMessage response) {\n         try {\n-            LOGGER.info(\"Calling application service function to handle response: {}\", responseValues.messageType);\n-            this.adHocManagementService.handleGetDataResponse(responseValues.payload,\n-                    responseValues.deviceIdentification);\n-        } catch (final Exception e) {\n-            this.handleError(e, responseValues.correlationUid, responseValues.organisationIdentification,\n-                    responseValues.deviceIdentification, responseValues.messageType);\n+            this.adHocManagementService.handleGetDataResponse(response);\n+        } catch (final RuntimeException e) {\n+            this.handleError(e, response.getCorrelationUid(), response.getOrganisationIdentification(),\n+                    response.getDeviceIdentification(), GET_DATA.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2MjM4OQ=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzg5MzQ3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/services/AdHocManagementService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo1MToyNVrOGW_pWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyMTowMVrOGbMh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NDYzNA==", "bodyText": "Would it be OK or intended to sometimes have another message type than the one in response?\nIf not, what is the point of having a separate parameter with a hard-coded message type?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r426764634", "createdAt": "2020-05-18T16:51:25Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/services/AdHocManagementService.java", "diffHunk": "@@ -100,9 +100,9 @@ public void handleGetDeviceModelResponse(final GetDeviceModelResponseDto getDevi\n         this.responseMessageRouter.send(responseMessage, messageType);\n     }\n \n-    public void handleGetDataResponse(final String payload, final String deviceIdentification) {\n-        LOGGER.info(\"Handle GET_DATA response for device: {} payload: {}\", deviceIdentification, payload);\n-        // TODO: further implement handling of GET_DATA messages\n+    public void handleGetDataResponse(final ResponseMessage response) {\n+        LOGGER.info(\"Forward GET_DATA response {} for device: {}\", response, response.getDeviceIdentification());\n+        this.responseMessageRouter.send(response, \"GET_DATA\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MDAyOA==", "bodyText": "We currently need a second parameter, because the response message does not contain the message type.\nUsing another message type than the one in the response sounds as a design or coding flaw. Perhaps we need it for edge cases.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r431170028", "createdAt": "2020-05-27T14:21:01Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/services/AdHocManagementService.java", "diffHunk": "@@ -100,9 +100,9 @@ public void handleGetDeviceModelResponse(final GetDeviceModelResponseDto getDevi\n         this.responseMessageRouter.send(responseMessage, messageType);\n     }\n \n-    public void handleGetDataResponse(final String payload, final String deviceIdentification) {\n-        LOGGER.info(\"Handle GET_DATA response for device: {} payload: {}\", deviceIdentification, payload);\n-        // TODO: further implement handling of GET_DATA messages\n+    public void handleGetDataResponse(final ResponseMessage response) {\n+        LOGGER.info(\"Forward GET_DATA response {} for device: {}\", response, response.getDeviceIdentification());\n+        this.responseMessageRouter.send(response, \"GET_DATA\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NDYzNA=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzkwMDc0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjo1MzoyM1rOGW_txQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0NjozOVrOGbBvQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NTc2NQ==", "bodyText": "No modifier on the class? I think we commonly use public access.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r426765765", "createdAt": "2020-05-18T16:53:23Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.infra.jms.core.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.domain.da.application.services.AdHocManagementService;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class GetDataResponseMessageProcessorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MzIxNg==", "bodyText": "Made it public.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r430993216", "createdAt": "2020-05-27T09:46:39Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.infra.jms.core.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.domain.da.application.services.AdHocManagementService;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class GetDataResponseMessageProcessorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc2NTc2NQ=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzk5NzIzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyMTo1NVrOGXAq-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0NzoxNFrOGbBwfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MTQzNA==", "bodyText": "This setup appears not to be necessary, since the only thing used from the ObjectMessage is the ResponseMessage from its object.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r426781434", "createdAt": "2020-05-18T17:21:55Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.infra.jms.core.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.domain.da.application.services.AdHocManagementService;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class GetDataResponseMessageProcessorTest {\n+\n+    @InjectMocks\n+    private GetDataResponseMessageProcessor getDataResponseMessageProcessor;\n+\n+    @Mock\n+    private AdHocManagementService adHocManagementService;\n+\n+    @Mock\n+    private ObjectMessage receivedMessage;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.getDataResponseMessageProcessor = new GetDataResponseMessageProcessor(null, null);\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void handlesResponseMessageValuesTest() throws JMSException {\n+        // Arrange\n+        final String correlationUid = \"CorrelationID-1\";\n+        final String messageType = \"GET_DATA\";\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device1\";\n+\n+        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n+                .withMessageType(messageType)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withDeviceIdentification(deviceIdentification)\n+                .withResult(ResponseMessageResultType.OK)\n+                .withDataObject(\"the payload\")\n+                .build();\n+\n+        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n+        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n+        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n+                .thenReturn(organisationIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MzUzMg==", "bodyText": "Agree. Removed the code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r430993532", "createdAt": "2020-05-27T09:47:14Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.infra.jms.core.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.domain.da.application.services.AdHocManagementService;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class GetDataResponseMessageProcessorTest {\n+\n+    @InjectMocks\n+    private GetDataResponseMessageProcessor getDataResponseMessageProcessor;\n+\n+    @Mock\n+    private AdHocManagementService adHocManagementService;\n+\n+    @Mock\n+    private ObjectMessage receivedMessage;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.getDataResponseMessageProcessor = new GetDataResponseMessageProcessor(null, null);\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void handlesResponseMessageValuesTest() throws JMSException {\n+        // Arrange\n+        final String correlationUid = \"CorrelationID-1\";\n+        final String messageType = \"GET_DATA\";\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device1\";\n+\n+        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n+                .withMessageType(messageType)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withDeviceIdentification(deviceIdentification)\n+                .withResult(ResponseMessageResultType.OK)\n+                .withDataObject(\"the payload\")\n+                .build();\n+\n+        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n+        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n+        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n+                .thenReturn(organisationIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MTQzNA=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAwOTE1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzoyNToxNlrOGXAyoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo0NzozMVrOGbBxHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzM5Mw==", "bodyText": "It looks like a simpler solution is to leave out all argument captor related stuff and just check with verify(this.adHocManagementService, times(1)).handleGetDataResponse(responseMessage);.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r426783393", "createdAt": "2020-05-18T17:25:16Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.infra.jms.core.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.domain.da.application.services.AdHocManagementService;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class GetDataResponseMessageProcessorTest {\n+\n+    @InjectMocks\n+    private GetDataResponseMessageProcessor getDataResponseMessageProcessor;\n+\n+    @Mock\n+    private AdHocManagementService adHocManagementService;\n+\n+    @Mock\n+    private ObjectMessage receivedMessage;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.getDataResponseMessageProcessor = new GetDataResponseMessageProcessor(null, null);\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void handlesResponseMessageValuesTest() throws JMSException {\n+        // Arrange\n+        final String correlationUid = \"CorrelationID-1\";\n+        final String messageType = \"GET_DATA\";\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device1\";\n+\n+        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n+                .withMessageType(messageType)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withDeviceIdentification(deviceIdentification)\n+                .withResult(ResponseMessageResultType.OK)\n+                .withDataObject(\"the payload\")\n+                .build();\n+\n+        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n+        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n+        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n+                .thenReturn(organisationIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);\n+        when(this.receivedMessage.getObject()).thenReturn(responseMessage);\n+\n+        final ArgumentCaptor<ResponseMessage> argumentCaptor = ArgumentCaptor.forClass(ResponseMessage.class);\n+\n+        // Act\n+        this.getDataResponseMessageProcessor.processMessage(this.receivedMessage);\n+\n+        // Assert\n+        verify(this.adHocManagementService, times(1)).handleGetDataResponse(argumentCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5MzY5NQ==", "bodyText": "Agree. Updated it.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r430993695", "createdAt": "2020-05-27T09:47:31Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.infra.jms.core.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.domain.da.application.services.AdHocManagementService;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class GetDataResponseMessageProcessorTest {\n+\n+    @InjectMocks\n+    private GetDataResponseMessageProcessor getDataResponseMessageProcessor;\n+\n+    @Mock\n+    private AdHocManagementService adHocManagementService;\n+\n+    @Mock\n+    private ObjectMessage receivedMessage;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.getDataResponseMessageProcessor = new GetDataResponseMessageProcessor(null, null);\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void handlesResponseMessageValuesTest() throws JMSException {\n+        // Arrange\n+        final String correlationUid = \"CorrelationID-1\";\n+        final String messageType = \"GET_DATA\";\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device1\";\n+\n+        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n+                .withMessageType(messageType)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withDeviceIdentification(deviceIdentification)\n+                .withResult(ResponseMessageResultType.OK)\n+                .withDataObject(\"the payload\")\n+                .build();\n+\n+        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n+        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n+        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n+                .thenReturn(organisationIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);\n+        when(this.receivedMessage.getObject()).thenReturn(responseMessage);\n+\n+        final ArgumentCaptor<ResponseMessage> argumentCaptor = ArgumentCaptor.forClass(ResponseMessage.class);\n+\n+        // Act\n+        this.getDataResponseMessageProcessor.processMessage(this.receivedMessage);\n+\n+        // Assert\n+        verify(this.adHocManagementService, times(1)).handleGetDataResponse(argumentCaptor.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4MzM5Mw=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODAyNjA4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzozMDoyM1rOGXA9iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOTo1NzoxMlrOGbCHxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjE4NQ==", "bodyText": "What should happen if the object contains something that cannot be cast to ResponseMessage?\nIs it OK to have the exception being thrown and handled elsewhere, or should it be treated more like the way the JMSException is handled. It would certainly be an unrecoverable error, like in the message where the JMSException is handled.\nWhat if the object in the ObjectMessage is null?\nIt might be good to deal with this explicitly, by either handling it as unrecoverable error or just returning the empty Optional using Optional.ofNullable.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r426786185", "createdAt": "2020-05-18T17:30:23Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessor.java", "diffHunk": "@@ -42,65 +40,31 @@\n     protected GetDataResponseMessageProcessor(\n             @Qualifier(\"domainDistributionAutomationOutboundResponseMessageRouter\") final NotificationResponseMessageSender responseMessageSender,\n             @Qualifier(\"domainDistributionAutomationInboundOsgpCoreResponsesMessageProcessorMap\") final MessageProcessorMap messageProcessorMap) {\n-        super(responseMessageSender, messageProcessorMap, MessageType.GET_DATA);\n+        super(responseMessageSender, messageProcessorMap, GET_DATA);\n     }\n \n     @Override\n-    public void processMessage(final ObjectMessage message) throws JMSException {\n+    public void processMessage(final ObjectMessage message) {\n         LOGGER.debug(\"Processing DA GET_DATA response message\");\n         this.getResponseValues(message).ifPresent(this::processResponseValues);\n     }\n \n-    private Optional<ResponseValues> getResponseValues(final ObjectMessage message) {\n-        final ResponseValues responseValues = new ResponseValues();\n+    private Optional<ResponseMessage> getResponseValues(final ObjectMessage message) {\n         try {\n-            responseValues.correlationUid = message.getJMSCorrelationID();\n-            responseValues.messageType = message.getJMSType();\n-            responseValues.organisationIdentification = message\n-                    .getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n-            responseValues.deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n-            responseValues.responseMessage = (ResponseMessage) message.getObject();\n-            responseValues.responseMessageResultType = responseValues.responseMessage.getResult();\n-            responseValues.osgpException = responseValues.responseMessage.getOsgpException();\n-            responseValues.payload = (String) responseValues.responseMessage.getDataObject();\n+            return Optional.of((ResponseMessage) message.getObject());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk5OTQ5Mw==", "bodyText": "It's indeed better to check. Added additional checks for null and \"not instanceof ResponseMessage\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r430999493", "createdAt": "2020-05-27T09:57:12Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/infra/jms/core/messageprocessors/GetDataResponseMessageProcessor.java", "diffHunk": "@@ -42,65 +40,31 @@\n     protected GetDataResponseMessageProcessor(\n             @Qualifier(\"domainDistributionAutomationOutboundResponseMessageRouter\") final NotificationResponseMessageSender responseMessageSender,\n             @Qualifier(\"domainDistributionAutomationInboundOsgpCoreResponsesMessageProcessorMap\") final MessageProcessorMap messageProcessorMap) {\n-        super(responseMessageSender, messageProcessorMap, MessageType.GET_DATA);\n+        super(responseMessageSender, messageProcessorMap, GET_DATA);\n     }\n \n     @Override\n-    public void processMessage(final ObjectMessage message) throws JMSException {\n+    public void processMessage(final ObjectMessage message) {\n         LOGGER.debug(\"Processing DA GET_DATA response message\");\n         this.getResponseValues(message).ifPresent(this::processResponseValues);\n     }\n \n-    private Optional<ResponseValues> getResponseValues(final ObjectMessage message) {\n-        final ResponseValues responseValues = new ResponseValues();\n+    private Optional<ResponseMessage> getResponseValues(final ObjectMessage message) {\n         try {\n-            responseValues.correlationUid = message.getJMSCorrelationID();\n-            responseValues.messageType = message.getJMSType();\n-            responseValues.organisationIdentification = message\n-                    .getStringProperty(Constants.ORGANISATION_IDENTIFICATION);\n-            responseValues.deviceIdentification = message.getStringProperty(Constants.DEVICE_IDENTIFICATION);\n-            responseValues.responseMessage = (ResponseMessage) message.getObject();\n-            responseValues.responseMessageResultType = responseValues.responseMessage.getResult();\n-            responseValues.osgpException = responseValues.responseMessage.getOsgpException();\n-            responseValues.payload = (String) responseValues.responseMessage.getDataObject();\n+            return Optional.of((ResponseMessage) message.getObject());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4NjE4NQ=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTk2OTE2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/osgp-adapter-kafka-distributionautomation.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzo0MDoyOFrOGXTqrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyNjo0NVrOGbDHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5MjY1Mg==", "bodyText": "In PeakShavingProducerConfig I noticed the topic was kept apart from the producer properties.\nI was thinking that probably means that either it is not logical to have the topic as a separate constructor argument, or (more likely) that the topic is not an exclusive producer or consumer property, and it would be nicer to remove producer from the property name.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r427092652", "createdAt": "2020-05-19T07:40:28Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/osgp-adapter-kafka-distributionautomation.properties", "diffHunk": "@@ -64,6 +64,15 @@ distributionautomation.kafka.producer.value.serializer=org.opensmartgridplatform\n #distributionautomation.kafka.ssl.key.password=confluent\n #distributionautomation.kafka.ssl.endpoint.identification.algorithm=\n \n+peakshaving.kafka.common.properties.prefix=peakshaving.kafka\n+\n+peakshaving.kafka.bootstrap.servers=localhost:9092\n+\n+peakshaving.kafka.producer.topic=g_osgp_distributionautomation_peakshaving_dev", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxNTY5OA==", "bodyText": "Agree. The topic is a property (the \"default topic\") of the KafkaTemplate used by the producer. I removed \".producer\" from the property name. Also did this for the other producer (MeterReadingProducer).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r431015698", "createdAt": "2020-05-27T10:26:45Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/resources/osgp-adapter-kafka-distributionautomation.properties", "diffHunk": "@@ -64,6 +64,15 @@ distributionautomation.kafka.producer.value.serializer=org.opensmartgridplatform\n #distributionautomation.kafka.ssl.key.password=confluent\n #distributionautomation.kafka.ssl.endpoint.identification.algorithm=\n \n+peakshaving.kafka.common.properties.prefix=peakshaving.kafka\n+\n+peakshaving.kafka.bootstrap.servers=localhost:9092\n+\n+peakshaving.kafka.producer.topic=g_osgp_distributionautomation_peakshaving_dev", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA5MjY1Mg=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDAzMzEyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNzo1Nzo1MVrOGXUSTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1ODozM1rOGbLfmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwMjc5OQ==", "bodyText": "The way the DomainResponseMessageProcessor is handling things looks like that for now it does what it needs to do, but this way of special casing to determine what to do with a message could get quite messy as the number of messages grows.\nIn other parts of the code there is a message processor per message type giving a way to deal with one form of selection how to process messages that allows adding types without modifying the selection how to handle a specific one.\nPerhaps the MeasurementReport is also for GET_DATA, in which case the method described before is not sophisticated enough. This may need some attention, in order to get a way of dealing with message types versus producer choice without using an ever growing block of code trying to figure out how to handle the input.\nIf an easy cleaner way is somehow simple to reach, you could consider it now. If this somewhat more complicated, we may need to prepare for some deeper thoughts when the time comes that more types of messages need to be dealt with.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r427102799", "createdAt": "2020-05-19T07:57:51Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java", "diffHunk": "@@ -80,28 +84,31 @@ public void processMessage(final ObjectMessage message) {\n \n             final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification,\n                     correlationUid);\n-            this.handleMessage(ids, messageType, resultType, resultDescription, dataObject);\n \n+            LOGGER.info(\"Handle message of type {} for device {} with result: type {}, description {}.\", messageType,\n+                    ids.getDeviceIdentification(), resultType, resultDescription);\n+            this.handleMessage(messageType, dataObject);\n         } catch (final RuntimeException e) {\n             handleError(e, correlationUid);\n         }\n     }\n \n-    private void handleMessage(final CorrelationIds ids, final String messageType,\n-            final ResponseMessageResultType resultType, final String resultDescription, final ResponseMessage message) {\n-        LOGGER.debug(\"Handling message of type {} for device {} with result: type {}, description {}.\", messageType,\n-                ids.getDeviceIdentification(), resultType, resultDescription);\n+    private void handleMessage(final String messageType, final ResponseMessage message) {\n \n         final Serializable dataObject = message.getDataObject();\n-        if (!(dataObject instanceof MeasurementReport)) {\n-            LOGGER.error(\"For this component we only handle measurement reports\");\n-        } else {\n+        if (dataObject instanceof MeasurementReport) {\n             this.meterReadingProducer.send(this.mapper.map(dataObject, MeasurementReport.class));\n+        } else if (dataObject instanceof String && \"GET_DATA\".equals(messageType)) {\n+            this.peakShavingProducer.send((String) dataObject);\n+        } else {\n+            LOGGER.warn(\n+                    \"For this component we only handle measurement reports and MQTT GET_DATA responses. Received message type: {}, message {}\",\n+                    messageType, dataObject);\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MzA1MA==", "bodyText": "The MeasurementReport processing was only used for the hackathon. I have removed that code. We now only process the GET_DATA for peak shaving. Because we don't handle anything else yet, I'm leaving out the \"message processor per message type\" stuff, which we have elsewhere. When we get additional messages to handle, we will make it more generic. An if - else if - else if - else if... construction should be avoided.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r431153050", "createdAt": "2020-05-27T13:58:33Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessor.java", "diffHunk": "@@ -80,28 +84,31 @@ public void processMessage(final ObjectMessage message) {\n \n             final CorrelationIds ids = new CorrelationIds(organisationIdentification, deviceIdentification,\n                     correlationUid);\n-            this.handleMessage(ids, messageType, resultType, resultDescription, dataObject);\n \n+            LOGGER.info(\"Handle message of type {} for device {} with result: type {}, description {}.\", messageType,\n+                    ids.getDeviceIdentification(), resultType, resultDescription);\n+            this.handleMessage(messageType, dataObject);\n         } catch (final RuntimeException e) {\n             handleError(e, correlationUid);\n         }\n     }\n \n-    private void handleMessage(final CorrelationIds ids, final String messageType,\n-            final ResponseMessageResultType resultType, final String resultDescription, final ResponseMessage message) {\n-        LOGGER.debug(\"Handling message of type {} for device {} with result: type {}, description {}.\", messageType,\n-                ids.getDeviceIdentification(), resultType, resultDescription);\n+    private void handleMessage(final String messageType, final ResponseMessage message) {\n \n         final Serializable dataObject = message.getDataObject();\n-        if (!(dataObject instanceof MeasurementReport)) {\n-            LOGGER.error(\"For this component we only handle measurement reports\");\n-        } else {\n+        if (dataObject instanceof MeasurementReport) {\n             this.meterReadingProducer.send(this.mapper.map(dataObject, MeasurementReport.class));\n+        } else if (dataObject instanceof String && \"GET_DATA\".equals(messageType)) {\n+            this.peakShavingProducer.send((String) dataObject);\n+        } else {\n+            LOGGER.warn(\n+                    \"For this component we only handle measurement reports and MQTT GET_DATA responses. Received message type: {}, message {}\",\n+                    messageType, dataObject);\n         }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwMjc5OQ=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA1MjI5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowMjo1M1rOGXUeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0Mjo0N1rOGbFbTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNTg4OA==", "bodyText": "Good catch.\nDid you look at the other issues this class has as well?\nI see a couple of TODOs, of which I wonder if they are still applicable, or could just be removed.\nIf you think it's a simple judgment call that they no longer apply (I'm not entirely sure) it might be nice to delete them and be done with them.\nThe reason I'm not sure is that I don't know if the AVRO MeterReading is the AVRO message format that was unknown when the TODOs were written, or that it is a temporary substitute awaiting a better type.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r427105888", "createdAt": "2020-05-19T08:02:53Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MzY0NA==", "bodyText": "Discussed this with @smvdheijden. We should actually remove this and some other classes, because they are left overs from the hackathon. That would also involve adapting some tests. To prevent scope screep, I will log a separate issue for removing the hackathon left overs.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r431053644", "createdAt": "2020-05-27T11:42:47Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/MeterReadingProducer.java", "diffHunk": "@@ -1,3 +1,10 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNTg4OA=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDA3MjE2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/PeakShavingProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowODoyMVrOGXUq3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowODoyMVrOGXUq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTA4NA==", "bodyText": "Why is the mapper here? It does not appear to be used anywhere.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r427109084", "createdAt": "2020-05-19T08:08:21Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/kafka/da/infra/kafka/out/PeakShavingProducer.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out;\n+\n+import org.opensmartgridplatform.adapter.kafka.da.application.mapping.DistributionAutomationMapper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.kafka.core.KafkaTemplate;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class PeakShavingProducer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PeakShavingProducer.class);\n+\n+    private final KafkaTemplate<String, String> kafkaTemplate;\n+\n+    @Autowired\n+    public PeakShavingProducer(@Qualifier(\"peakShavingKafkaTemplate\") final KafkaTemplate<String, String> kafkaTemplate,\n+            final DistributionAutomationMapper mapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE0MTY3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyNjoyMFrOGXVW9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjoyOTo0NFrOGbG9_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDM3NA==", "bodyText": "I'd drop all the argument capture stuff, and change the verification to verify(this.peakShavingProducer, times(1)).send(payload);.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r427120374", "createdAt": "2020-05-19T08:26:20Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.jms.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.PeakShavingProducer;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class DomainResponseMessageProcessorTest {\n+\n+    @InjectMocks\n+    DomainResponseMessageProcessor domainResponseMessageProcessor;\n+\n+    @Mock\n+    private PeakShavingProducer peakShavingProducer;\n+\n+    @Mock\n+    private ObjectMessage receivedMessage;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.domainResponseMessageProcessor = new DomainResponseMessageProcessor();\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void processMessageTest() throws JMSException {\n+        // Arrange\n+        final String correlationUid = \"CorrelationID-1\";\n+        final String messageType = \"GET_DATA\";\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device1\";\n+        final ResponseMessageResultType resultType = ResponseMessageResultType.OK;\n+        final String payload = \"the payload\";\n+\n+        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n+                .withMessageType(messageType)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withDeviceIdentification(deviceIdentification)\n+                .withResult(resultType)\n+                .withDataObject(payload)\n+                .build();\n+\n+        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n+        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n+        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n+                .thenReturn(organisationIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.RESULT)).thenReturn(resultType.toString());\n+        when(this.receivedMessage.getObject()).thenReturn(responseMessage);\n+\n+        final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        // Act\n+        this.domainResponseMessageProcessor.processMessage(this.receivedMessage);\n+\n+        // Assert\n+        verify(this.peakShavingProducer, times(1)).send(argumentCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3ODkxMA==", "bodyText": "Removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/327#discussion_r431078910", "createdAt": "2020-05-27T12:29:44Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-adapter-kafka-distributionautomation/src/test/java/org/opensmartgridplatform/adapter/kafka/da/infra/jms/messageprocessors/DomainResponseMessageProcessorTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.kafka.da.infra.jms.messageprocessors;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import javax.jms.JMSException;\n+import javax.jms.ObjectMessage;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.opensmartgridplatform.adapter.kafka.da.infra.kafka.out.PeakShavingProducer;\n+import org.opensmartgridplatform.shared.infra.jms.Constants;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessage;\n+import org.opensmartgridplatform.shared.infra.jms.ResponseMessageResultType;\n+\n+class DomainResponseMessageProcessorTest {\n+\n+    @InjectMocks\n+    DomainResponseMessageProcessor domainResponseMessageProcessor;\n+\n+    @Mock\n+    private PeakShavingProducer peakShavingProducer;\n+\n+    @Mock\n+    private ObjectMessage receivedMessage;\n+\n+    @BeforeEach\n+    public void setup() {\n+        this.domainResponseMessageProcessor = new DomainResponseMessageProcessor();\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void processMessageTest() throws JMSException {\n+        // Arrange\n+        final String correlationUid = \"CorrelationID-1\";\n+        final String messageType = \"GET_DATA\";\n+        final String organisationIdentification = \"test-org\";\n+        final String deviceIdentification = \"device1\";\n+        final ResponseMessageResultType resultType = ResponseMessageResultType.OK;\n+        final String payload = \"the payload\";\n+\n+        final ResponseMessage responseMessage = new ResponseMessage.Builder().withCorrelationUid(correlationUid)\n+                .withMessageType(messageType)\n+                .withOrganisationIdentification(organisationIdentification)\n+                .withDeviceIdentification(deviceIdentification)\n+                .withResult(resultType)\n+                .withDataObject(payload)\n+                .build();\n+\n+        when(this.receivedMessage.getJMSCorrelationID()).thenReturn(correlationUid);\n+        when(this.receivedMessage.getJMSType()).thenReturn(messageType);\n+        when(this.receivedMessage.getStringProperty(Constants.ORGANISATION_IDENTIFICATION))\n+                .thenReturn(organisationIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.DEVICE_IDENTIFICATION)).thenReturn(deviceIdentification);\n+        when(this.receivedMessage.getStringProperty(Constants.RESULT)).thenReturn(resultType.toString());\n+        when(this.receivedMessage.getObject()).thenReturn(responseMessage);\n+\n+        final ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n+\n+        // Act\n+        this.domainResponseMessageProcessor.processMessage(this.receivedMessage);\n+\n+        // Assert\n+        verify(this.peakShavingProducer, times(1)).send(argumentCaptor.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDM3NA=="}, "originalCommit": {"oid": "c260b2ae010a6c599f09d3b588e91d78e7017b13"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3600, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}