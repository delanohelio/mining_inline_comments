{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzOTg5MTMx", "number": 484, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo1MjowNlrOE05QHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMzo1OVrOE3JqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzODk5NDIzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo1MjowNlrOHs3zXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo1MjowNlrOHs3zXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxMzY2Mg==", "bodyText": "Why is it necessary to send the full dataContainer for each of the events?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r516813662", "createdAt": "2020-11-03T16:52:06Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageService.java", "diffHunk": "@@ -275,8 +273,8 @@ private void handleLightMeasurementDeviceEvents(final Device device,\n \n         try {\n             final EventMessageDataContainer dataContainer = new EventMessageDataContainer(lightMeasurementDeviceEvents);\n-            this.sendRequestMessageToDomainPublicLighting(DeviceFunction.SET_TRANSITION.name(),\n-                    device.getDeviceIdentification(), dataContainer);\n+            lightMeasurementDeviceEvents.forEach(lightMeasurementDeviceEvent -> this.sendRequestMessageToDomainPublicLighting(lightMeasurementDeviceEvent.getEventType().name(),\n+                    device.getDeviceIdentification(), dataContainer));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ebb761622a986c1219b7dd49769c3d934f8e6ce"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1ODIyNjAwOnYy", "diffSide": "LEFT", "path": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/EventNotificationMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMTo1MToyNlrOHvrFhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzowNDowOVrOHwOsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1MTA0NQ==", "bodyText": "Doesn't removing this @SuppressWarnings annotation cause a new issue in Sonar?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r519751045", "createdAt": "2020-11-09T11:51:26Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/EventNotificationMessageProcessor.java", "diffHunk": "@@ -56,15 +56,12 @@ public void processMessage(final ObjectMessage message) throws JMSException {\n                 this.eventNotificationMessageService.handleEvent(metadata.getDeviceIdentification(), eventNotification);\n \n             } else if (dataObject instanceof List) {\n-\n-                @SuppressWarnings(\"unchecked\") final List<EventNotificationDto> eventNotifications =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMzNDQwMg==", "bodyText": "No, at least not on my machine (that should have the same ruleset)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r520334402", "createdAt": "2020-11-10T07:04:09Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-core/src/main/java/org/opensmartgridplatform/core/infra/jms/protocol/inbound/messageprocessors/EventNotificationMessageProcessor.java", "diffHunk": "@@ -56,15 +56,12 @@ public void processMessage(final ObjectMessage message) throws JMSException {\n                 this.eventNotificationMessageService.handleEvent(metadata.getDeviceIdentification(), eventNotification);\n \n             } else if (dataObject instanceof List) {\n-\n-                @SuppressWarnings(\"unchecked\") final List<EventNotificationDto> eventNotifications =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc1MTA0NQ=="}, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTMyNTkyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTo1OTo1MFrOHv1m-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjo1MzozMlrOHwOc2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMzQ0OA==", "bodyText": "What we test isn't obvious to me by reading the title. I would name it something like \"sendsLightSensorEventToDomain\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r519923448", "createdAt": "2020-11-09T15:59:50Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void handleLightSensorReportsLightEventTest() throws UnknownEntityException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMzMDQ1Nw==", "bodyText": "Hmm, the test should test if a LIGHT_SENSOR_REPORTS_LIGHT event is sent to domain. So maybe a combination of both is a good one.. sendsLightSensorReportsLightEventToDomain", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r520330457", "createdAt": "2020-11-10T06:53:32Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void handleLightSensorReportsLightEventTest() throws UnknownEntityException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkyMzQ0OA=="}, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTQwMjk1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoxNjo1MVrOHv2Wsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjo0OTozNlrOHwOXLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNTY2Ng==", "bodyText": "The handleEvent(String, EventNotificationDto) method calls handleEvent(String, Date, ...). Directly call that second method. You could write a separate test if you want to show handleEvent(String, EventNotificationDto) calls handleEvent(String, Date, ...) correctly.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r519935666", "createdAt": "2020-11-09T16:16:51Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void handleLightSensorReportsLightEventTest() throws UnknownEntityException {\n+        final String deviceUid = \"testUid\";\n+        final String deviceIdentification = \"testIdentification\";\n+        final DateTime dateTime = DateTime.now();\n+        final EventTypeDto eventTypeDto = EventTypeDto.LIGHT_SENSOR_REPORTS_LIGHT;\n+        final String description = \"Sensor reports light\";\n+        final Integer index = 0;\n+        final EventNotificationDto eventNotificationDto = new EventNotificationDto(deviceUid, dateTime, eventTypeDto,\n+                description, index);\n+\n+        final EventNotificationMessageService eventNotificationMessageServiceSpy = spy(\n+                this.eventNotificationMessageService);\n+        eventNotificationMessageServiceSpy.handleEvent(deviceIdentification, eventNotificationDto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyOTAwNw==", "bodyText": "But this tests results in a bit higher code coverage ;-)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r520329007", "createdAt": "2020-11-10T06:49:36Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void handleLightSensorReportsLightEventTest() throws UnknownEntityException {\n+        final String deviceUid = \"testUid\";\n+        final String deviceIdentification = \"testIdentification\";\n+        final DateTime dateTime = DateTime.now();\n+        final EventTypeDto eventTypeDto = EventTypeDto.LIGHT_SENSOR_REPORTS_LIGHT;\n+        final String description = \"Sensor reports light\";\n+        final Integer index = 0;\n+        final EventNotificationDto eventNotificationDto = new EventNotificationDto(deviceUid, dateTime, eventTypeDto,\n+                description, index);\n+\n+        final EventNotificationMessageService eventNotificationMessageServiceSpy = spy(\n+                this.eventNotificationMessageService);\n+        eventNotificationMessageServiceSpy.handleEvent(deviceIdentification, eventNotificationDto);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzNTY2Ng=="}, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTQyNTg2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjoyMTo0NVrOHv2ktw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNjo0NTozOVrOHwOR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzOTI1NQ==", "bodyText": "Test for the call \"this.domainRequestService.send(...)\", which is a call to another service instead of a private method. This would also simplify your test a bit.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r519939255", "createdAt": "2020-11-09T16:21:45Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void handleLightSensorReportsLightEventTest() throws UnknownEntityException {\n+        final String deviceUid = \"testUid\";\n+        final String deviceIdentification = \"testIdentification\";\n+        final DateTime dateTime = DateTime.now();\n+        final EventTypeDto eventTypeDto = EventTypeDto.LIGHT_SENSOR_REPORTS_LIGHT;\n+        final String description = \"Sensor reports light\";\n+        final Integer index = 0;\n+        final EventNotificationDto eventNotificationDto = new EventNotificationDto(deviceUid, dateTime, eventTypeDto,\n+                description, index);\n+\n+        final EventNotificationMessageService eventNotificationMessageServiceSpy = spy(\n+                this.eventNotificationMessageService);\n+        eventNotificationMessageServiceSpy.handleEvent(deviceIdentification, eventNotificationDto);\n+\n+        final ArgumentCaptor<String> argMessageType = ArgumentCaptor.forClass(String.class);\n+        final ArgumentCaptor<String> argDeviceIdentification = ArgumentCaptor.forClass(String.class);\n+        final ArgumentCaptor<Event> argLightMeasurementDeviceEvent = ArgumentCaptor.forClass(Event.class);\n+\n+        verify(eventNotificationMessageServiceSpy).sendRequestMessageToDomainPublicLighting(argMessageType.capture(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDMyNzY1MQ==", "bodyText": "There are 2 paths that lead to this.domainRequestService.send. Only one path is valid,  therefore I think the current solution is a better test. Although a bit more complicated.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r520327651", "createdAt": "2020-11-10T06:45:39Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void handleLightSensorReportsLightEventTest() throws UnknownEntityException {\n+        final String deviceUid = \"testUid\";\n+        final String deviceIdentification = \"testIdentification\";\n+        final DateTime dateTime = DateTime.now();\n+        final EventTypeDto eventTypeDto = EventTypeDto.LIGHT_SENSOR_REPORTS_LIGHT;\n+        final String description = \"Sensor reports light\";\n+        final Integer index = 0;\n+        final EventNotificationDto eventNotificationDto = new EventNotificationDto(deviceUid, dateTime, eventTypeDto,\n+                description, index);\n+\n+        final EventNotificationMessageService eventNotificationMessageServiceSpy = spy(\n+                this.eventNotificationMessageService);\n+        eventNotificationMessageServiceSpy.handleEvent(deviceIdentification, eventNotificationDto);\n+\n+        final ArgumentCaptor<String> argMessageType = ArgumentCaptor.forClass(String.class);\n+        final ArgumentCaptor<String> argDeviceIdentification = ArgumentCaptor.forClass(String.class);\n+        final ArgumentCaptor<Event> argLightMeasurementDeviceEvent = ArgumentCaptor.forClass(Event.class);\n+\n+        verify(eventNotificationMessageServiceSpy).sendRequestMessageToDomainPublicLighting(argMessageType.capture(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTkzOTI1NQ=="}, "originalCommit": {"oid": "ce83cceb0a87ce96fbffb9e986b236e0298e8a03"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjY1Mzk4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMzo1OVrOHwU_mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMDowMzo1OVrOHwU_mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQzNzY1OQ==", "bodyText": "This looks better indeed. thx!", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/484#discussion_r520437659", "createdAt": "2020-11-10T10:03:59Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-core/src/test/java/org/opensmartgridplatform/core/application/services/EventNotificationMessageServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.core.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+import org.joda.time.DateTime;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentMatcher;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.core.domain.model.domain.DomainRequestService;\n+import org.opensmartgridplatform.domain.core.entities.Event;\n+import org.opensmartgridplatform.domain.core.exceptions.UnknownEntityException;\n+import org.opensmartgridplatform.domain.core.valueobjects.EventType;\n+import org.opensmartgridplatform.dto.valueobjects.EventNotificationDto;\n+import org.opensmartgridplatform.dto.valueobjects.EventTypeDto;\n+import org.opensmartgridplatform.shared.domain.services.CorrelationIdProviderTimestampService;\n+import org.opensmartgridplatform.shared.infra.jms.MessageType;\n+import org.opensmartgridplatform.shared.infra.jms.RequestMessage;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class EventNotificationMessageServiceTest {\n+\n+    @Mock\n+    private CorrelationIdProviderTimestampService correlationIdProviderTimestampService;\n+\n+    @Mock\n+    private DomainRequestService domainRequestService;\n+\n+    @Mock\n+    private EventNotificationHelperService eventNotificationHelperService;\n+\n+    @InjectMocks\n+    private EventNotificationMessageService eventNotificationMessageService;\n+\n+    @Test\n+    void sendsLightSensorReportsLightEventToDomainTest() throws UnknownEntityException {\n+        final String deviceUid = \"testUid\";\n+        final String deviceIdentification = \"testIdentification\";\n+        final DateTime dateTime = DateTime.now();\n+        final EventTypeDto eventTypeDto = EventTypeDto.LIGHT_SENSOR_REPORTS_LIGHT;\n+        final String description = \"Sensor reports light\";\n+        final Integer index = 0;\n+        final EventNotificationDto eventNotificationDto = new EventNotificationDto(deviceUid, dateTime, eventTypeDto,\n+                description, index);\n+\n+        this.eventNotificationMessageService.handleEvent(deviceIdentification, eventNotificationDto);\n+\n+        final ArgumentMatcher<RequestMessage> matchesEventType = (\n+                final RequestMessage message) -> ((Event) message.getRequest())\n+                        .getEventType() == EventType.LIGHT_SENSOR_REPORTS_LIGHT;\n+\n+        verify(this.domainRequestService).send(argThat(matchesEventType), eq(MessageType.EVENT_NOTIFICATION.name()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "539eecf86fe4d7b036b6c11f22cacf86ac805b18"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3563, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}