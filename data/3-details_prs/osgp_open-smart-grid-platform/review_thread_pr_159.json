{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MjYzODA4", "number": 159, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1ODo1NFrODfJqsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1ODo1NFrODfJqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTkwODM0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/infra/messaging/processors/CommonRebootRequestMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMTo1ODo1NFrOFor9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMjo0MjoyM1rOFqjH0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzQ5OA==", "bodyText": "Immediately return this expression instead of assigning it to the temporary variable \"deviceResponseHandler\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/159#discussion_r378207498", "createdAt": "2020-02-12T11:58:54Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/infra/messaging/processors/CommonRebootRequestMessageProcessor.java", "diffHunk": "@@ -77,6 +77,22 @@ public void processSignedOslpEnvelope(final String deviceIdentification,\n         final int retryCount = unsignedOslpEnvelopeDto.getRetryCount();\n         final boolean isScheduled = unsignedOslpEnvelopeDto.isScheduled();\n \n+        final DeviceResponseHandler deviceResponseHandler = this.createSetRebootDeviceResponseHandler(domain,\n+                domainVersion, messageType, retryCount, isScheduled);\n+\n+        final DeviceRequest deviceRequest = new DeviceRequest(organisationIdentification, deviceIdentification,\n+                correlationUid, messagePriority);\n+\n+        try {\n+            this.deviceService.doSetReboot(oslpEnvelope, deviceRequest, deviceResponseHandler, ipAddress);\n+        } catch (final IOException e) {\n+            this.handleError(e, correlationUid, organisationIdentification, deviceIdentification, domain, domainVersion,\n+                    messageType, messagePriority, retryCount);\n+        }\n+    }\n+\n+    protected DeviceResponseHandler createSetRebootDeviceResponseHandler(final String domain,\n+            final String domainVersion, final String messageType, final int retryCount, final boolean isScheduled) {\n         final DeviceResponseHandler deviceResponseHandler = new DeviceResponseHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd320b687f559708525eb9c0d95798503fac237b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1OTk1NQ==", "bodyText": "I agree with Jenkins", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/159#discussion_r380159955", "createdAt": "2020-02-17T12:42:23Z", "author": {"login": "robindenadel"}, "path": "osgp/protocol-adapter-oslp/osgp-adapter-protocol-oslp-elster/src/main/java/org/opensmartgridplatform/adapter/protocol/oslp/elster/infra/messaging/processors/CommonRebootRequestMessageProcessor.java", "diffHunk": "@@ -77,6 +77,22 @@ public void processSignedOslpEnvelope(final String deviceIdentification,\n         final int retryCount = unsignedOslpEnvelopeDto.getRetryCount();\n         final boolean isScheduled = unsignedOslpEnvelopeDto.isScheduled();\n \n+        final DeviceResponseHandler deviceResponseHandler = this.createSetRebootDeviceResponseHandler(domain,\n+                domainVersion, messageType, retryCount, isScheduled);\n+\n+        final DeviceRequest deviceRequest = new DeviceRequest(organisationIdentification, deviceIdentification,\n+                correlationUid, messagePriority);\n+\n+        try {\n+            this.deviceService.doSetReboot(oslpEnvelope, deviceRequest, deviceResponseHandler, ipAddress);\n+        } catch (final IOException e) {\n+            this.handleError(e, correlationUid, organisationIdentification, deviceIdentification, domain, domainVersion,\n+                    messageType, messagePriority, retryCount);\n+        }\n+    }\n+\n+    protected DeviceResponseHandler createSetRebootDeviceResponseHandler(final String domain,\n+            final String domainVersion, final String messageType, final int retryCount, final boolean isScheduled) {\n         final DeviceResponseHandler deviceResponseHandler = new DeviceResponseHandler() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIwNzQ5OA=="}, "originalCommit": {"oid": "fd320b687f559708525eb9c0d95798503fac237b"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3723, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}