{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4Njg5ODc3", "number": 421, "title": "FLEX-5493~FirmwareVersionNotCorrectlyUpdated", "bodyText": "", "createdAt": "2020-09-17T13:59:00Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421", "merged": true, "mergeCommit": {"oid": "714d9e9fba49ec625ee9ca66a3e2d7bbc3475705"}, "closed": true, "closedAt": "2020-10-04T21:36:23Z", "author": {"login": "vsombroek"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJxat2gH2gAyNDg4Njg5ODc3OjliNGJmNTUxMDhhNmUwMGEzMWFkOGQ1MjI4Y2FmZDJiZTJlZDc2OGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOnGuUgH2gAyNDg4Njg5ODc3OmQ5NzkwMzU5ODAwMzdiMTczMzk3MTRhNzZkYTRlOWFjOTVjZDc3NmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b4bf55108a6e00a31ad8d5228cafd2be2ed768d", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9b4bf55108a6e00a31ad8d5228cafd2be2ed768d", "committedDate": "2020-09-17T13:57:05Z", "message": "FLEX-5493~NowComparingAgainsCurrentFirmware-and-search-for-FirmwareFile-with-all-Modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9d7ff0b1eff2e6b277d6fbe4d988eb3c8eb2481", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b9d7ff0b1eff2e6b277d6fbe4d988eb3c8eb2481", "committedDate": "2020-09-17T15:32:38Z", "message": "FLEX-5493~BetterLoggingAndAllTestsInOneFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08b4b9dbdf142a213f6284c144fcdb1fc3b188b8", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/08b4b9dbdf142a213f6284c144fcdb1fc3b188b8", "committedDate": "2020-09-21T12:11:25Z", "message": "FLEX-5493~Check-if-all-modules-are-in-fimware-file-and-added-extra-unittest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b9dbf9e9dcc41a3110df70682708817853a7047", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6b9dbf9e9dcc41a3110df70682708817853a7047", "committedDate": "2020-09-21T13:30:00Z", "message": "FLEX-5493~reduced-complexity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50cd8fdae466e759afad807d9fedd76c1aa0a4b2", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/50cd8fdae466e759afad807d9fedd76c1aa0a4b2", "committedDate": "2020-09-21T13:54:54Z", "message": "Merge branch 'development' into bug/FLEX-5493-Firmware-version-not-correctly-updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f6078022897d9a142cdfdaa6ab87ecccf82fc51", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2f6078022897d9a142cdfdaa6ab87ecccf82fc51", "committedDate": "2020-09-21T14:14:32Z", "message": "FLEX-5493~fixed-unit-test-after-merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "819eda68a33dd2e661b1257d1c53cf2663f61492", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/819eda68a33dd2e661b1257d1c53cf2663f61492", "committedDate": "2020-09-21T14:33:05Z", "message": "FLEX-5493~simplified-and-naming-convention-change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b1fe226f2ce78072b36b238248f8781d7c5aa2b", "author": {"user": {"login": "vsombroek", "name": "Vincent Sombroek"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5b1fe226f2ce78072b36b238248f8781d7c5aa2b", "committedDate": "2020-09-21T14:58:01Z", "message": "FLEX-5493~recified-eclipse-getters-and-setters-own-naming-convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ed27d3f841c14a88521a19068382c3af984e096", "author": {"user": {"login": "smvdheijden", "name": "Sander van der Heijden"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8ed27d3f841c14a88521a19068382c3af984e096", "committedDate": "2020-09-25T12:14:00Z", "message": "Merge branch 'development' into bug/FLEX-5493-Firmware-version-not-correctly-updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NDA1MjUw", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#pullrequestreview-499405250", "createdAt": "2020-09-30T13:03:27Z", "commit": {"oid": "8ed27d3f841c14a88521a19068382c3af984e096"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzowMzoyN1rOHacfDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzowMzoyN1rOHacfDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ5MTcyNQ==", "bodyText": "I think replacing the entry will fix the problem reported concerning a previously installed version. For example when switching back to an older firmware version.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r497491725", "createdAt": "2020-09-30T13:03:27Z", "author": {"login": "kevinsmeets"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -371,38 +368,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();\n+\n+        for (DeviceFirmwareFile firmwareFile : deviceFirmwareFiles) {\n+\n+            Map<FirmwareModule, String> fwms = firmwareFile.getFirmwareFile().getModuleVersions();\n+            Date installationDate = firmwareFile.getInstallationDate();\n+\n+            for (Map.Entry<FirmwareModule, String> entry : fwms.entrySet()) {\n+                String version = entry.getValue();\n+                FirmwareModule fwm = entry.getKey();\n+                // check if this installation of this same kind of module is\n+                // of a later date\n+                if (currentlyInstalledFirmwareVersionsPerType.containsKey(fwm.getDescription())\n+                        && currentlyInstalledFirmwareVersionsPerType.get(fwm.getDescription())\n+                                .getInstallationDate()\n+                                .before(installationDate)) {\n+                    currentlyInstalledFirmwareVersionsPerType.replace(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ed27d3f841c14a88521a19068382c3af984e096"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff", "author": {"user": {"login": "kevinsmeets", "name": "Kevin Smeets"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/95e13cdd9ed85a9403347ebfd29625ae80f2b0ff", "committedDate": "2020-10-01T08:44:49Z", "message": "Merge remote-tracking branch 'origin/development' into bug/FLEX-5493-Firmware-version-not-correctly-updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwOTE1NTU1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#pullrequestreview-500915555", "createdAt": "2020-10-02T07:34:58Z", "commit": {"oid": "8ed27d3f841c14a88521a19068382c3af984e096"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozNTo0OFrOHbjwUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwODoyMTo0N1rOHblEXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1OTQxMQ==", "bodyText": "Change HashMap<String, FirmwareVersionWithInstallationDate>() to HashMap<>()", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498659411", "createdAt": "2020-10-02T07:35:48Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NTQ5NA==", "bodyText": "Remove this setter. It is not used.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498665494", "createdAt": "2020-10-02T07:49:21Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();\n+\n+        for (DeviceFirmwareFile firmwareFile : deviceFirmwareFiles) {\n+\n+            Map<FirmwareModule, String> fwms = firmwareFile.getFirmwareFile().getModuleVersions();\n+            Date installationDate = firmwareFile.getInstallationDate();\n+\n+            for (Map.Entry<FirmwareModule, String> entry : fwms.entrySet()) {\n+                String version = entry.getValue();\n+                FirmwareModule fwm = entry.getKey();\n+                // check if this installation of this same kind of module is\n+                // of a later date\n+                if (currentlyInstalledFirmwareVersionsPerType.containsKey(fwm.getDescription())\n+                        && currentlyInstalledFirmwareVersionsPerType.get(fwm.getDescription())\n+                                .getInstallationDate()\n+                                .before(installationDate)) {\n+                    currentlyInstalledFirmwareVersionsPerType.replace(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                } else {\n+                    // no other module of this type found yet so just add it\n+                    currentlyInstalledFirmwareVersionsPerType.put(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                }\n+            }\n+        }\n+\n+        final List<FirmwareVersion> latestfirmwareVersionsOfEachModuleTypeInHistory = currentlyInstalledFirmwareVersionsPerType\n+                .values()\n+                .stream()\n+                .map(e -> new FirmwareVersion(e.getFirmwareVersion().getFirmwareModuleType(),\n+                        e.getFirmwareVersion().getVersion()))\n+                .collect(Collectors.toList());\n+\n+        // remove the latest history (module)versions from the firmwareVersions\n+        // parameter\n+        firmwareVersionsToCheck.removeAll(latestfirmwareVersionsOfEachModuleTypeInHistory);\n+\n+        return firmwareVersionsToCheck;\n+    }\n+\n+    // Helper class to keep track of InstallationDate and FirmwareVersion\n+    class FirmwareVersionWithInstallationDate {\n+        private Date installationDate;\n+        private FirmwareVersion firmwareVersion;\n+\n+        public Date getInstallationDate() {\n+            return this.installationDate;\n+        }\n+\n+        public void setInstallationDate(Date installationDate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NTU0NQ==", "bodyText": "Remove this setter. It is not used.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498665545", "createdAt": "2020-10-02T07:49:29Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();\n+\n+        for (DeviceFirmwareFile firmwareFile : deviceFirmwareFiles) {\n+\n+            Map<FirmwareModule, String> fwms = firmwareFile.getFirmwareFile().getModuleVersions();\n+            Date installationDate = firmwareFile.getInstallationDate();\n+\n+            for (Map.Entry<FirmwareModule, String> entry : fwms.entrySet()) {\n+                String version = entry.getValue();\n+                FirmwareModule fwm = entry.getKey();\n+                // check if this installation of this same kind of module is\n+                // of a later date\n+                if (currentlyInstalledFirmwareVersionsPerType.containsKey(fwm.getDescription())\n+                        && currentlyInstalledFirmwareVersionsPerType.get(fwm.getDescription())\n+                                .getInstallationDate()\n+                                .before(installationDate)) {\n+                    currentlyInstalledFirmwareVersionsPerType.replace(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                } else {\n+                    // no other module of this type found yet so just add it\n+                    currentlyInstalledFirmwareVersionsPerType.put(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                }\n+            }\n+        }\n+\n+        final List<FirmwareVersion> latestfirmwareVersionsOfEachModuleTypeInHistory = currentlyInstalledFirmwareVersionsPerType\n+                .values()\n+                .stream()\n+                .map(e -> new FirmwareVersion(e.getFirmwareVersion().getFirmwareModuleType(),\n+                        e.getFirmwareVersion().getVersion()))\n+                .collect(Collectors.toList());\n+\n+        // remove the latest history (module)versions from the firmwareVersions\n+        // parameter\n+        firmwareVersionsToCheck.removeAll(latestfirmwareVersionsOfEachModuleTypeInHistory);\n+\n+        return firmwareVersionsToCheck;\n+    }\n+\n+    // Helper class to keep track of InstallationDate and FirmwareVersion\n+    class FirmwareVersionWithInstallationDate {\n+        private Date installationDate;\n+        private FirmwareVersion firmwareVersion;\n+\n+        public Date getInstallationDate() {\n+            return this.installationDate;\n+        }\n+\n+        public void setInstallationDate(Date installationDate) {\n+            this.installationDate = installationDate;\n+        }\n+\n+        public FirmwareVersion getFirmwareVersion() {\n+            return this.firmwareVersion;\n+        }\n+\n+        public void setFirmwareVersion(FirmwareVersion firmwareVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2NjE0MQ==", "bodyText": "This class does not have to be package private. Make it's scope private static", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498666141", "createdAt": "2020-10-02T07:50:43Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();\n+\n+        for (DeviceFirmwareFile firmwareFile : deviceFirmwareFiles) {\n+\n+            Map<FirmwareModule, String> fwms = firmwareFile.getFirmwareFile().getModuleVersions();\n+            Date installationDate = firmwareFile.getInstallationDate();\n+\n+            for (Map.Entry<FirmwareModule, String> entry : fwms.entrySet()) {\n+                String version = entry.getValue();\n+                FirmwareModule fwm = entry.getKey();\n+                // check if this installation of this same kind of module is\n+                // of a later date\n+                if (currentlyInstalledFirmwareVersionsPerType.containsKey(fwm.getDescription())\n+                        && currentlyInstalledFirmwareVersionsPerType.get(fwm.getDescription())\n+                                .getInstallationDate()\n+                                .before(installationDate)) {\n+                    currentlyInstalledFirmwareVersionsPerType.replace(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                } else {\n+                    // no other module of this type found yet so just add it\n+                    currentlyInstalledFirmwareVersionsPerType.put(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                }\n+            }\n+        }\n+\n+        final List<FirmwareVersion> latestfirmwareVersionsOfEachModuleTypeInHistory = currentlyInstalledFirmwareVersionsPerType\n+                .values()\n+                .stream()\n+                .map(e -> new FirmwareVersion(e.getFirmwareVersion().getFirmwareModuleType(),\n+                        e.getFirmwareVersion().getVersion()))\n+                .collect(Collectors.toList());\n+\n+        // remove the latest history (module)versions from the firmwareVersions\n+        // parameter\n+        firmwareVersionsToCheck.removeAll(latestfirmwareVersionsOfEachModuleTypeInHistory);\n+\n+        return firmwareVersionsToCheck;\n+    }\n+\n+    // Helper class to keep track of InstallationDate and FirmwareVersion\n+    class FirmwareVersionWithInstallationDate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2OTA4Nw==", "bodyText": "Sonar: \"Preconditions\" and logging arguments should not require evaluation\nCode smell Major java:S2629", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498669087", "createdAt": "2020-10-02T07:56:51Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();\n+\n+        for (DeviceFirmwareFile firmwareFile : deviceFirmwareFiles) {\n+\n+            Map<FirmwareModule, String> fwms = firmwareFile.getFirmwareFile().getModuleVersions();\n+            Date installationDate = firmwareFile.getInstallationDate();\n+\n+            for (Map.Entry<FirmwareModule, String> entry : fwms.entrySet()) {\n+                String version = entry.getValue();\n+                FirmwareModule fwm = entry.getKey();\n+                // check if this installation of this same kind of module is\n+                // of a later date\n+                if (currentlyInstalledFirmwareVersionsPerType.containsKey(fwm.getDescription())\n+                        && currentlyInstalledFirmwareVersionsPerType.get(fwm.getDescription())\n+                                .getInstallationDate()\n+                                .before(installationDate)) {\n+                    currentlyInstalledFirmwareVersionsPerType.replace(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                } else {\n+                    // no other module of this type found yet so just add it\n+                    currentlyInstalledFirmwareVersionsPerType.put(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                }\n+            }\n+        }\n+\n+        final List<FirmwareVersion> latestfirmwareVersionsOfEachModuleTypeInHistory = currentlyInstalledFirmwareVersionsPerType\n+                .values()\n+                .stream()\n+                .map(e -> new FirmwareVersion(e.getFirmwareVersion().getFirmwareModuleType(),\n+                        e.getFirmwareVersion().getVersion()))\n+                .collect(Collectors.toList());\n+\n+        // remove the latest history (module)versions from the firmwareVersions\n+        // parameter\n+        firmwareVersionsToCheck.removeAll(latestfirmwareVersionsOfEachModuleTypeInHistory);\n+\n+        return firmwareVersionsToCheck;\n+    }\n+\n+    // Helper class to keep track of InstallationDate and FirmwareVersion\n+    class FirmwareVersionWithInstallationDate {\n+        private Date installationDate;\n+        private FirmwareVersion firmwareVersion;\n+\n+        public Date getInstallationDate() {\n+            return this.installationDate;\n+        }\n+\n+        public void setInstallationDate(Date installationDate) {\n+            this.installationDate = installationDate;\n+        }\n+\n+        public FirmwareVersion getFirmwareVersion() {\n+            return this.firmwareVersion;\n+        }\n+\n+        public void setFirmwareVersion(FirmwareVersion firmwareVersion) {\n+            this.firmwareVersion = firmwareVersion;\n+        }\n+\n+        public FirmwareVersionWithInstallationDate(Date installationDate, FirmwareVersion firmwareVersion) {\n+            this.installationDate = installationDate;\n+            this.firmwareVersion = firmwareVersion;\n+        }\n+    }\n+\n+    public void tryToAddDeviceFirmwareFile(final String deviceIdentification,\n+            final List<FirmwareVersion> firmwareVersionsNotCurrent) {\n+\n+        if (firmwareVersionsNotCurrent.isEmpty()) {\n+            LOGGER.info(\"No firmware to look for, concerning device {}, so nothing to add.\", deviceIdentification);\n+            return;\n+        }\n \n-        final FirmwareModule module = createFirmwareModule(firmwareVersion);\n         final Device device = this.deviceRepository.findByDeviceIdentification(deviceIdentification);\n-        final List<FirmwareFile> firmwareFiles = this.getAvailableFirmwareFilesForDeviceModel(device.getDeviceModel());\n \n         // check each file for the module and the version as returned by the\n-        // device\n-        boolean recordAdded = false;\n-\n-        for (final FirmwareFile file : firmwareFiles) {\n-            final Map<FirmwareModule, String> moduleVersions = file.getModuleVersions();\n-            if (moduleVersions.containsKey(module) && moduleVersions.get(module).equals(firmwareVersion.getVersion())) {\n+        // device, in theory there could be files that have partially\n+        // overlapping modules,\n+        // therefore we check if all modules are in the file\n \n+        for (final FirmwareFile file : this.getAvailableFirmwareFilesForDeviceModel(device.getDeviceModel())) {\n+            if (firmwareFileContainsAllOfTheseModules(file, firmwareVersionsNotCurrent)) {\n                 // file found, insert a record into the history\n                 final DeviceFirmwareFile deviceFirmwareFile = new DeviceFirmwareFile(device, file, new Date(),\n                         INSTALLER);\n                 this.deviceFirmwareFileRepository.save(deviceFirmwareFile);\n-                LOGGER.info(\"Firmware version {} added to device {}\", firmwareVersion.getVersion(),\n-                        deviceIdentification);\n \n-                // we only want to add one record in history\n-                recordAdded = true;\n-                break;\n+                LOGGER.info(\n+                        \"Added new record to deviceFirmwareFile for device: {} \"\n+                                + \"with following modules (ModulesType/Versions):{} \" + \", using file: {}\",\n+                        deviceIdentification, firmwareVersionsNotCurrent.toString(), file.getFilename());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY2OTIxNg==", "bodyText": "Sonar: \"Preconditions\" and logging arguments should not require evaluation\nCode smell Major java:S2629", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498669216", "createdAt": "2020-10-02T07:57:07Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,\n+            final List<FirmwareVersion> firmwareVersions) {\n+\n+        if (firmwareVersions.isEmpty()) {\n+            return firmwareVersions;\n+        }\n+        // copy input parameter\n+        final List<FirmwareVersion> firmwareVersionsToCheck = new ArrayList<>();\n+        firmwareVersionsToCheck.addAll(firmwareVersions);\n+\n+        // gets list of all historically installed modules\n+        final Device device = this.deviceRepository.findByDeviceIdentification(deviceId);\n+        final List<DeviceFirmwareFile> deviceFirmwareFiles = this.deviceFirmwareFileRepository\n+                .findByDeviceOrderByInstallationDateAsc(device);\n+\n+        // Transform this list so it contains only the latest entry for each\n+        // moduleType\n+        Map<String, FirmwareVersionWithInstallationDate> currentlyInstalledFirmwareVersionsPerType = new HashMap<String, FirmwareVersionWithInstallationDate>();\n+\n+        for (DeviceFirmwareFile firmwareFile : deviceFirmwareFiles) {\n+\n+            Map<FirmwareModule, String> fwms = firmwareFile.getFirmwareFile().getModuleVersions();\n+            Date installationDate = firmwareFile.getInstallationDate();\n+\n+            for (Map.Entry<FirmwareModule, String> entry : fwms.entrySet()) {\n+                String version = entry.getValue();\n+                FirmwareModule fwm = entry.getKey();\n+                // check if this installation of this same kind of module is\n+                // of a later date\n+                if (currentlyInstalledFirmwareVersionsPerType.containsKey(fwm.getDescription())\n+                        && currentlyInstalledFirmwareVersionsPerType.get(fwm.getDescription())\n+                                .getInstallationDate()\n+                                .before(installationDate)) {\n+                    currentlyInstalledFirmwareVersionsPerType.replace(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                } else {\n+                    // no other module of this type found yet so just add it\n+                    currentlyInstalledFirmwareVersionsPerType.put(fwm.getDescription(),\n+                            new FirmwareVersionWithInstallationDate(installationDate, new FirmwareVersion(\n+                                    FirmwareModuleType.forDescription(fwm.getDescription()), version)));\n+                }\n+            }\n+        }\n+\n+        final List<FirmwareVersion> latestfirmwareVersionsOfEachModuleTypeInHistory = currentlyInstalledFirmwareVersionsPerType\n+                .values()\n+                .stream()\n+                .map(e -> new FirmwareVersion(e.getFirmwareVersion().getFirmwareModuleType(),\n+                        e.getFirmwareVersion().getVersion()))\n+                .collect(Collectors.toList());\n+\n+        // remove the latest history (module)versions from the firmwareVersions\n+        // parameter\n+        firmwareVersionsToCheck.removeAll(latestfirmwareVersionsOfEachModuleTypeInHistory);\n+\n+        return firmwareVersionsToCheck;\n+    }\n+\n+    // Helper class to keep track of InstallationDate and FirmwareVersion\n+    class FirmwareVersionWithInstallationDate {\n+        private Date installationDate;\n+        private FirmwareVersion firmwareVersion;\n+\n+        public Date getInstallationDate() {\n+            return this.installationDate;\n+        }\n+\n+        public void setInstallationDate(Date installationDate) {\n+            this.installationDate = installationDate;\n+        }\n+\n+        public FirmwareVersion getFirmwareVersion() {\n+            return this.firmwareVersion;\n+        }\n+\n+        public void setFirmwareVersion(FirmwareVersion firmwareVersion) {\n+            this.firmwareVersion = firmwareVersion;\n+        }\n+\n+        public FirmwareVersionWithInstallationDate(Date installationDate, FirmwareVersion firmwareVersion) {\n+            this.installationDate = installationDate;\n+            this.firmwareVersion = firmwareVersion;\n+        }\n+    }\n+\n+    public void tryToAddDeviceFirmwareFile(final String deviceIdentification,\n+            final List<FirmwareVersion> firmwareVersionsNotCurrent) {\n+\n+        if (firmwareVersionsNotCurrent.isEmpty()) {\n+            LOGGER.info(\"No firmware to look for, concerning device {}, so nothing to add.\", deviceIdentification);\n+            return;\n+        }\n \n-        final FirmwareModule module = createFirmwareModule(firmwareVersion);\n         final Device device = this.deviceRepository.findByDeviceIdentification(deviceIdentification);\n-        final List<FirmwareFile> firmwareFiles = this.getAvailableFirmwareFilesForDeviceModel(device.getDeviceModel());\n \n         // check each file for the module and the version as returned by the\n-        // device\n-        boolean recordAdded = false;\n-\n-        for (final FirmwareFile file : firmwareFiles) {\n-            final Map<FirmwareModule, String> moduleVersions = file.getModuleVersions();\n-            if (moduleVersions.containsKey(module) && moduleVersions.get(module).equals(firmwareVersion.getVersion())) {\n+        // device, in theory there could be files that have partially\n+        // overlapping modules,\n+        // therefore we check if all modules are in the file\n \n+        for (final FirmwareFile file : this.getAvailableFirmwareFilesForDeviceModel(device.getDeviceModel())) {\n+            if (firmwareFileContainsAllOfTheseModules(file, firmwareVersionsNotCurrent)) {\n                 // file found, insert a record into the history\n                 final DeviceFirmwareFile deviceFirmwareFile = new DeviceFirmwareFile(device, file, new Date(),\n                         INSTALLER);\n                 this.deviceFirmwareFileRepository.save(deviceFirmwareFile);\n-                LOGGER.info(\"Firmware version {} added to device {}\", firmwareVersion.getVersion(),\n-                        deviceIdentification);\n \n-                // we only want to add one record in history\n-                recordAdded = true;\n-                break;\n+                LOGGER.info(\n+                        \"Added new record to deviceFirmwareFile for device: {} \"\n+                                + \"with following modules (ModulesType/Versions):{} \" + \", using file: {}\",\n+                        deviceIdentification, firmwareVersionsNotCurrent.toString(), file.getFilename());\n+                return;\n             }\n         }\n \n-        if (!recordAdded) {\n-            LOGGER.warn(\"No firmware file record found for: {} for device: {}\", firmwareVersion, deviceIdentification);\n-        }\n+        LOGGER.warn(\n+                \"Could not find any firmware file for device: {} \"\n+                        + \"that contains (all of) the following modules (ModulesType/Versions):{}\",\n+                deviceIdentification, firmwareVersionsNotCurrent.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MjIyMg==", "bodyText": "FunctionalException is not thrown. Just remove", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498672222", "createdAt": "2020-10-02T08:03:32Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -117,34 +114,187 @@ private FirmwareFile createFirmwareFile(final String version) {\n \n     @BeforeEach\n     void setUp() throws FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MjI2OQ==", "bodyText": "FunctionalException is not thrown. Just remove", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498672269", "createdAt": "2020-10-02T08:03:38Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -117,34 +114,187 @@ private FirmwareFile createFirmwareFile(final String version) {\n \n     @BeforeEach\n     void setUp() throws FunctionalException {\n+        // VERSION 1 and VERSION 2 have already been installed previously (in\n+        // that same order)\n         final Manufacturer manufacturer = new Manufacturer(\"code\", \"name\", false);\n         final DeviceModel deviceModel = new DeviceModel(manufacturer, \"modelCode\", \"description\", false);\n         final Device device = this.createDevice(deviceModel);\n         when(this.deviceRepository.findByDeviceIdentification(anyString())).thenReturn(device);\n         final DeviceFirmwareFile deviceFirmwareFile1 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_1), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_1), DateUtils.addDays(new Date(), -2), \"me\");\n         final DeviceFirmwareFile deviceFirmwareFile2 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_2), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_2), DateUtils.addDays(new Date(), -1), \"me\");\n         final List<DeviceFirmwareFile> deviceFirmwareFiles = Arrays.asList(deviceFirmwareFile1, deviceFirmwareFile2);\n         when(this.deviceFirmwareFileRepository.findByDeviceOrderByInstallationDateAsc(any(Device.class)))\n                 .thenReturn(deviceFirmwareFiles);\n+\n         when(this.deviceFirmwareFileRepository.save(any(DeviceFirmwareFile.class))).thenReturn(deviceFirmwareFile1);\n         when(this.manufacturerRepository.findByCode(anyString())).thenReturn(manufacturer);\n         when(this.deviceModelRepository.findByManufacturerAndModelCode(any(Manufacturer.class), anyString()))\n                 .thenReturn(deviceModel);\n     }\n \n     @Test\n-    void testCheckFirmwareHistoryForExistingVersion() throws FunctionalException {\n+    public void testHandleGetFirmwareVersionResponseVersionAlreadyInHistoryButNotLast() throws FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MjI5Nw==", "bodyText": "FunctionalException is not thrown. Just remove", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498672297", "createdAt": "2020-10-02T08:03:42Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -117,34 +114,187 @@ private FirmwareFile createFirmwareFile(final String version) {\n \n     @BeforeEach\n     void setUp() throws FunctionalException {\n+        // VERSION 1 and VERSION 2 have already been installed previously (in\n+        // that same order)\n         final Manufacturer manufacturer = new Manufacturer(\"code\", \"name\", false);\n         final DeviceModel deviceModel = new DeviceModel(manufacturer, \"modelCode\", \"description\", false);\n         final Device device = this.createDevice(deviceModel);\n         when(this.deviceRepository.findByDeviceIdentification(anyString())).thenReturn(device);\n         final DeviceFirmwareFile deviceFirmwareFile1 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_1), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_1), DateUtils.addDays(new Date(), -2), \"me\");\n         final DeviceFirmwareFile deviceFirmwareFile2 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_2), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_2), DateUtils.addDays(new Date(), -1), \"me\");\n         final List<DeviceFirmwareFile> deviceFirmwareFiles = Arrays.asList(deviceFirmwareFile1, deviceFirmwareFile2);\n         when(this.deviceFirmwareFileRepository.findByDeviceOrderByInstallationDateAsc(any(Device.class)))\n                 .thenReturn(deviceFirmwareFiles);\n+\n         when(this.deviceFirmwareFileRepository.save(any(DeviceFirmwareFile.class))).thenReturn(deviceFirmwareFile1);\n         when(this.manufacturerRepository.findByCode(anyString())).thenReturn(manufacturer);\n         when(this.deviceModelRepository.findByManufacturerAndModelCode(any(Manufacturer.class), anyString()))\n                 .thenReturn(deviceModel);\n     }\n \n     @Test\n-    void testCheckFirmwareHistoryForExistingVersion() throws FunctionalException {\n+    public void testHandleGetFirmwareVersionResponseVersionAlreadyInHistoryButNotLast() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 1 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_1);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n \n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistory() throws FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MjU1MA==", "bodyText": "FunctionalException is not thrown. Just remove", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498672550", "createdAt": "2020-10-02T08:04:14Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -117,34 +114,187 @@ private FirmwareFile createFirmwareFile(final String version) {\n \n     @BeforeEach\n     void setUp() throws FunctionalException {\n+        // VERSION 1 and VERSION 2 have already been installed previously (in\n+        // that same order)\n         final Manufacturer manufacturer = new Manufacturer(\"code\", \"name\", false);\n         final DeviceModel deviceModel = new DeviceModel(manufacturer, \"modelCode\", \"description\", false);\n         final Device device = this.createDevice(deviceModel);\n         when(this.deviceRepository.findByDeviceIdentification(anyString())).thenReturn(device);\n         final DeviceFirmwareFile deviceFirmwareFile1 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_1), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_1), DateUtils.addDays(new Date(), -2), \"me\");\n         final DeviceFirmwareFile deviceFirmwareFile2 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_2), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_2), DateUtils.addDays(new Date(), -1), \"me\");\n         final List<DeviceFirmwareFile> deviceFirmwareFiles = Arrays.asList(deviceFirmwareFile1, deviceFirmwareFile2);\n         when(this.deviceFirmwareFileRepository.findByDeviceOrderByInstallationDateAsc(any(Device.class)))\n                 .thenReturn(deviceFirmwareFiles);\n+\n         when(this.deviceFirmwareFileRepository.save(any(DeviceFirmwareFile.class))).thenReturn(deviceFirmwareFile1);\n         when(this.manufacturerRepository.findByCode(anyString())).thenReturn(manufacturer);\n         when(this.deviceModelRepository.findByManufacturerAndModelCode(any(Manufacturer.class), anyString()))\n                 .thenReturn(deviceModel);\n     }\n \n     @Test\n-    void testCheckFirmwareHistoryForExistingVersion() throws FunctionalException {\n+    public void testHandleGetFirmwareVersionResponseVersionAlreadyInHistoryButNotLast() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 1 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_1);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n \n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistory() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 3 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_3);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_3);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n+\n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistoryButNoCorrespondingFirmwareFile()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MjU4Mw==", "bodyText": "FunctionalException is not thrown. Just remove", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498672583", "createdAt": "2020-10-02T08:04:18Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -117,34 +114,187 @@ private FirmwareFile createFirmwareFile(final String version) {\n \n     @BeforeEach\n     void setUp() throws FunctionalException {\n+        // VERSION 1 and VERSION 2 have already been installed previously (in\n+        // that same order)\n         final Manufacturer manufacturer = new Manufacturer(\"code\", \"name\", false);\n         final DeviceModel deviceModel = new DeviceModel(manufacturer, \"modelCode\", \"description\", false);\n         final Device device = this.createDevice(deviceModel);\n         when(this.deviceRepository.findByDeviceIdentification(anyString())).thenReturn(device);\n         final DeviceFirmwareFile deviceFirmwareFile1 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_1), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_1), DateUtils.addDays(new Date(), -2), \"me\");\n         final DeviceFirmwareFile deviceFirmwareFile2 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_2), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_2), DateUtils.addDays(new Date(), -1), \"me\");\n         final List<DeviceFirmwareFile> deviceFirmwareFiles = Arrays.asList(deviceFirmwareFile1, deviceFirmwareFile2);\n         when(this.deviceFirmwareFileRepository.findByDeviceOrderByInstallationDateAsc(any(Device.class)))\n                 .thenReturn(deviceFirmwareFiles);\n+\n         when(this.deviceFirmwareFileRepository.save(any(DeviceFirmwareFile.class))).thenReturn(deviceFirmwareFile1);\n         when(this.manufacturerRepository.findByCode(anyString())).thenReturn(manufacturer);\n         when(this.deviceModelRepository.findByManufacturerAndModelCode(any(Manufacturer.class), anyString()))\n                 .thenReturn(deviceModel);\n     }\n \n     @Test\n-    void testCheckFirmwareHistoryForExistingVersion() throws FunctionalException {\n+    public void testHandleGetFirmwareVersionResponseVersionAlreadyInHistoryButNotLast() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 1 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_1);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n \n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistory() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 3 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_3);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_3);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n+\n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistoryButNoCorrespondingFirmwareFile()\n+            throws FunctionalException {\n+        // Arrange\n+        // Mock that FUNCTIONAL VERSION 3 and SECURTY VERSION 1 is now\n+        // installed,\n+        // no firmware file will hold this combination, so it will fail to save\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersion firmwareVersion3 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion3);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_3);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_3);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n+\n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, never()).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionAlreadyInAndLast() throws FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MzAwNA==", "bodyText": "FunctionalException is not thrown in any of the methods in this test class, so remove it everywhere", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498673004", "createdAt": "2020-10-02T08:05:11Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/test/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementServiceTest.java", "diffHunk": "@@ -117,34 +114,187 @@ private FirmwareFile createFirmwareFile(final String version) {\n \n     @BeforeEach\n     void setUp() throws FunctionalException {\n+        // VERSION 1 and VERSION 2 have already been installed previously (in\n+        // that same order)\n         final Manufacturer manufacturer = new Manufacturer(\"code\", \"name\", false);\n         final DeviceModel deviceModel = new DeviceModel(manufacturer, \"modelCode\", \"description\", false);\n         final Device device = this.createDevice(deviceModel);\n         when(this.deviceRepository.findByDeviceIdentification(anyString())).thenReturn(device);\n         final DeviceFirmwareFile deviceFirmwareFile1 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_1), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_1), DateUtils.addDays(new Date(), -2), \"me\");\n         final DeviceFirmwareFile deviceFirmwareFile2 = new DeviceFirmwareFile(device,\n-                this.createFirmwareFile(VERSION_2), new Date(), \"me\");\n+                this.createFirmwareFile(VERSION_2), DateUtils.addDays(new Date(), -1), \"me\");\n         final List<DeviceFirmwareFile> deviceFirmwareFiles = Arrays.asList(deviceFirmwareFile1, deviceFirmwareFile2);\n         when(this.deviceFirmwareFileRepository.findByDeviceOrderByInstallationDateAsc(any(Device.class)))\n                 .thenReturn(deviceFirmwareFiles);\n+\n         when(this.deviceFirmwareFileRepository.save(any(DeviceFirmwareFile.class))).thenReturn(deviceFirmwareFile1);\n         when(this.manufacturerRepository.findByCode(anyString())).thenReturn(manufacturer);\n         when(this.deviceModelRepository.findByManufacturerAndModelCode(any(Manufacturer.class), anyString()))\n                 .thenReturn(deviceModel);\n     }\n \n     @Test\n-    void testCheckFirmwareHistoryForExistingVersion() throws FunctionalException {\n+    public void testHandleGetFirmwareVersionResponseVersionAlreadyInHistoryButNotLast() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 1 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_1);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_1);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_1);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_1);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n \n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistory() throws FunctionalException {\n+        // Arrange\n+        // Mock that VERSION 3 is now installed\n+        final FirmwareVersionDto firmwareVersionDto1 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersionDto firmwareVersionDto2 = new FirmwareVersionDto(\n+                org.opensmartgridplatform.dto.valueobjects.FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersionDto> versionsOnDeviceDtos = Arrays.asList(firmwareVersionDto1, firmwareVersionDto2);\n+        final FirmwareVersion firmwareVersion1 = new FirmwareVersion(FirmwareModuleType.SECURITY, VERSION_3);\n+        final FirmwareVersion firmwareVersion2 = new FirmwareVersion(FirmwareModuleType.FUNCTIONAL, VERSION_3);\n+        final List<FirmwareVersion> versionsOnDevice = Arrays.asList(firmwareVersion1, firmwareVersion2);\n+        final FirmwareFile firmwareFile = new FirmwareFile.Builder().withFilename(\"filename\")\n+                .withDescription(\"description\")\n+                .withPushToNewDevices(false)\n+                .build();\n+        final FirmwareModule firmwareModule1 = new FirmwareModule(\n+                FirmwareModuleType.SECURITY.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule1, VERSION_3);\n+        final FirmwareModule firmwareModule2 = new FirmwareModule(\n+                FirmwareModuleType.FUNCTIONAL.getDescription().toLowerCase());\n+        firmwareFile.addFirmwareModule(firmwareModule2, VERSION_3);\n+        when(this.domainCoreMapper.mapAsList(versionsOnDeviceDtos, FirmwareVersion.class)).thenReturn(versionsOnDevice);\n+        when(this.ssldPendingFirmwareUpdateRepository.findByDeviceIdentification(\"DVC\"))\n+                .thenReturn(Collections.emptyList());\n+        when(this.firmwareFileRepository.findByDeviceModel(any(DeviceModel.class)))\n+                .thenReturn(Arrays.asList(firmwareFile));\n+        final CorrelationIds ids = new CorrelationIds(\"ORG\", \"DVC\", \"CORR\");\n+\n+        // Act\n+        this.firmwareManagementService.handleGetFirmwareVersionResponse(versionsOnDeviceDtos, ids, \"FW\", 0,\n+                ResponseMessageResultType.OK, null);\n+\n+        // Validate\n+        verify(this.deviceFirmwareFileRepository, times(1)).save(any(DeviceFirmwareFile.class));\n+    }\n+\n+    @Test\n+    public void testHandleGetFirmwareVersionResponseVersionNotInHistoryButNoCorrespondingFirmwareFile()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY3MjU1MA=="}, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY4MDkyNQ==", "bodyText": "make private. It is only called from another private method within this class", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/421#discussion_r498680925", "createdAt": "2020-10-02T08:21:47Z", "author": {"login": "joostknapen"}, "path": "osgp/platform/osgp-adapter-domain-core/src/main/java/org/opensmartgridplatform/adapter/domain/core/application/services/FirmwareManagementService.java", "diffHunk": "@@ -367,38 +364,159 @@ private void checkFirmwareHistory(final String deviceId,\n         return firmwareVersionsToCheck;\n     }\n \n-    public void tryToAddFirmwareVersionToHistory(final String deviceIdentification,\n-            final FirmwareVersion firmwareVersion) {\n+    /**\n+     * @param deviceId\n+     *            the id of the device we are checking\n+     * @param firmwareVersions\n+     *            the list of firmware modules versions (so type and version) to\n+     *            check if they are currently installed on the device, using the\n+     *            history of the devices firmware history\n+     * @return a list of firmware module versions not present in the the devices\n+     *         firmware history\n+     * @throws FunctionalException\n+     */\n+    public List<FirmwareVersion> checkFirmwareHistoryForModuleVersionsNotCurrentlyInstalled(final String deviceId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95e13cdd9ed85a9403347ebfd29625ae80f2b0ff"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96b2c15c790cbe171befccc367f8a4567d4924a2", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/96b2c15c790cbe171befccc367f8a4567d4924a2", "committedDate": "2020-10-02T14:21:38Z", "message": "FLEX-5493: Changes after review (small java optimizations)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d979035980037b17339714a76da4e9ac95cd776c", "author": {"user": {"login": "joostknapen", "name": "Joost Knapen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d979035980037b17339714a76da4e9ac95cd776c", "committedDate": "2020-10-02T14:45:49Z", "message": "FLEX-5493: Moved constructor to top of class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3827, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}