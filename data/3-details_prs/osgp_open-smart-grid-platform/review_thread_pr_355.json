{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDU1NzE1", "number": 355, "reviewThreads": {"totalCount": 151, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyODozNVrOEMDdrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTozMVrOERDxpA==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc1MTE2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyODozNVrOGt8PbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyODozNVrOGt8PbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNjA5Mw==", "bodyText": "this is a constant, is there a reason why it is a Spring @value ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450826093", "createdAt": "2020-07-07T12:28:35Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n+public class ApplicationConfig {\n+    @Value(\"${component.name}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc2NjIxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozMjo0M1rOGt8Yaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozMjo0M1rOGt8Yaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyODM5NQ==", "bodyText": "Use @value(\"${component.name:OSGP-SECRET-MANAGEMENT}\") to provide default value.\nAlso, final fields should be set through constructor only. Best to remove final and I would probably make this field private.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450828395", "createdAt": "2020-07-07T12:32:43Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n+public class ApplicationConfig {\n+    @Value(\"${component.name}\")\n+    public static final String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc3ODMzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozNjoyNFrOGt8gGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozNjoyNFrOGt8gGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMDM2MA==", "bodyText": "Global variables", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450830360", "createdAt": "2020-07-07T12:36:24Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/WebServiceConfig.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.opensmartgridplatform.secretmanagement.application.exception.DetailSoapFaultMappingExceptionResolver;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.ws.config.annotation.EnableWs;\n+import org.springframework.ws.config.annotation.WsConfigurerAdapter;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultDefinition;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;\n+import org.springframework.xml.xsd.XsdSchemaCollection;\n+import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;\n+\n+import java.util.Properties;\n+\n+@EnableWs\n+@Configuration\n+public class WebServiceConfig extends WsConfigurerAdapter {\n+\n+    public static final String SECRET_MANAGEMENT_WS_BASE_PATH = \"/ws/SecretManagement/*\";\n+    public static final String SECRET_MANAGEMENT_PORT = \"SecretManagementPort\";\n+    public static final String SECRET_MANAGEMENT_URI = \"/ws/SecretManagement\";\n+    public static final String SECRET_MANAGEMENT_NS = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+    public static final String SECRET_MANAGEMENT_SCHEMA_LOC = \"schemas/secret-management.xsd\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc4Mzc1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozNzo1OFrOGt8jiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozNzo1OFrOGt8jiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTI0MQ==", "bodyText": "Add private access modifiers", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450831241", "createdAt": "2020-07-07T12:37:58Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Encrypted secret, which should not be mutated, because modifications should result in a new version (record in the\n+ * DB). Historic entries remain in the DB table and the current secret should be determined via a query on creationTime.\n+ */\n+@Entity\n+@Table(name = \"encrypted_secret\")\n+@Getter\n+@Setter\n+public class DbEncryptedSecret {\n+    @Id\n+    @SequenceGenerator(name = \"encrypted_secret_seq_gen\", sequenceName = \"encrypted_secret_id_seq\", allocationSize = 1)\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encrypted_secret_seq_gen\")\n+    Long id;\n+    Date creationTime;\n+    String deviceIdentification;\n+    @Enumerated(EnumType.STRING)\n+    SecretType secretType;\n+    String encodedSecret;\n+    @ManyToOne\n+    DbEncryptionKeyReference encryptionKeyReference;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc4NjAyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozODozNVrOGt8k4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozODozNVrOGt8k4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTU4Ng==", "bodyText": "Add private access modifiers", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450831586", "createdAt": "2020-07-07T12:38:35Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+@Entity\n+@Table(name = \"encryption_key_reference\")\n+@Getter\n+@Setter\n+public class DbEncryptionKeyReference {\n+    @Id\n+    @SequenceGenerator(name = \"encryption_key_seq_gen\", sequenceName = \"encryption_key_reference_id_seq\",\n+            allocationSize = 1)\n+    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = \"encryption_key_seq_gen\")\n+    Long id;\n+    Date creationTime;\n+    Date modificationTime;\n+    Long version; //for optimistic locking\n+    @Enumerated(EnumType.STRING)\n+    EncryptionProviderType encryptionProviderType;\n+    String reference;\n+    Date validFrom;\n+    Date validTo;\n+    String modifiedBy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc4NzQxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozOTowMFrOGt8lxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjozOTowMFrOGt8lxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzMTgxNQ==", "bodyText": "Add private access modifiers", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450831815", "createdAt": "2020-07-07T12:39:00Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+/**\n+ * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n+ */\n+public class TypedSecret {\n+    SecretType secretType;\n+    String secret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgxNjkwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0NjoxNlrOGt83jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0NjoxNlrOGt83jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNjM2Ng==", "bodyText": "Any exception will be translated to a TechnicalException. Is this intended?\nMaybe return a SOAP Fault to communicate the problem to the caller?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450836366", "createdAt": "2020-07-07T12:46:16Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+                    secretTypeList);\n+\n+            TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgxNzk5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0NjozNFrOGt84RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0NjozNFrOGt84RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNjU0OA==", "bodyText": "See comment above", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450836548", "createdAt": "2020-07-07T12:46:34Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+                    secretTypeList);\n+\n+            TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+        } catch (Exception e) {\n+            throw new TechnicalException(ComponentType.SHARED, e.getMessage());\n+        }\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n+    @ResponsePayload\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n+        log.trace(request.toString());\n+\n+        StoreSecretsResponse response = new StoreSecretsResponse();\n+\n+        try {\n+            List<TypedSecret> typedSecretList = converter.convertToTypedSecrets(request.getTypedSecrets());\n+\n+            secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n+\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+        } catch (Exception e) {\n+            throw new TechnicalException(ComponentType.SHARED, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgyOTY3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0OTo0M1rOGt8_hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo0OTo0M1rOGt8_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzODQwNw==", "bodyText": "Make this field final", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450838407", "createdAt": "2020-07-07T12:49:43Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgzNTYwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MToxNFrOGt9DHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MToxNFrOGt9DHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzOTMyNw==", "bodyText": "You could validate this in the caller and assume valid input.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450839327", "createdAt": "2020-07-07T12:51:14Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDgzOTQ3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MjowOFrOGt9FWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1MjowOFrOGt9FWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzOTg5OQ==", "bodyText": "Validate input", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450839899", "createdAt": "2020-07-07T12:52:08Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg0ODM0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NDoyNlrOGt9Kvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NDoyNlrOGt9Kvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MTI3OQ==", "bodyText": "This could be done beautifully with the Streams API ;-)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450841279", "createdAt": "2020-07-07T12:54:26Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg1MzcwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NTo0MFrOGt9N8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjo1NTo0MFrOGt9N8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0MjA5Ng==", "bodyText": "See comments above", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450842096", "createdAt": "2020-07-07T12:55:40Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :\n+                soapSecretTypeList) {\n+            SecretType secretType = convertToSecretType(soapSecretType);\n+            secretTypeList.add(secretType);\n+        }\n+\n+        return secretTypeList;\n+    }\n+\n+    public List<TypedSecret> convertToTypedSecrets(TypedSecrets soapTypedSecrets) throws OsgpException {\n+\n+        if (soapTypedSecrets == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg3NDAxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowMDo1NVrOGt9aqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowMDo1NVrOGt9aqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0NTM1NQ==", "bodyText": "This will never be null due to the instance of check  in the above code fragment", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450845355", "createdAt": "2020-07-07T13:00:55Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            }\n+        }\n+    }\n+\n+    private TechnicalFault convert(final TechnicalException ex) {\n+        if (ex == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg5MTI4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowNToyNVrOGt9lbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowNToyNVrOGt9lbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0ODEwOQ==", "bodyText": "+1 for the exception translation", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450848109", "createdAt": "2020-07-07T13:05:25Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDg5NjQ0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowNjo1MFrOGt9opw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowNjo1MFrOGt9opw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0ODkzNQ==", "bodyText": "Is there only a generic exception?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450848935", "createdAt": "2020-07-07T13:06:50Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkwMDQxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowNzo0NFrOGt9rEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowNzo0NFrOGt9rEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0OTU1NA==", "bodyText": "I have only seen Component.SHARED be set. What is the relevance of this field?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450849554", "createdAt": "2020-07-07T13:07:44Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkwMjQ1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowODoxMlrOGt9sRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowODoxMlrOGt9sRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg0OTg2MQ==", "bodyText": "Is this relevant for the caller?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450849861", "createdAt": "2020-07-07T13:08:12Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkwMzc2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowODozMFrOGt9tDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowODozMFrOGt9tDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MDA2Mw==", "bodyText": "Is this something you want to expose?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450850063", "createdAt": "2020-07-07T13:08:30Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkwOTQ5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowOTo0M1rOGt9wbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzowOTo0M1rOGt9wbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MDkyNg==", "bodyText": "I would not expose the cause. Translate exceptions to application specific ones.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450850926", "createdAt": "2020-07-07T13:09:43Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            }\n+        }\n+    }\n+\n+    private TechnicalFault convert(final TechnicalException ex) {\n+        if (ex == null) {\n+            return null;\n+        }\n+        final TechnicalFault destination = new TechnicalFault();\n+        destination.setComponent(ex.getComponentType().name());\n+        destination.setMessage(ex.getMessage());\n+        if (ex.getCause() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkyMTUyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxMjoyNFrOGt93mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxMjoyNFrOGt93mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1Mjc2MA==", "bodyText": "+1 for using the Stream API", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450852760", "createdAt": "2020-07-07T13:12:24Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkyODkzOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNDoxOVrOGt98Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNDoxOVrOGt98Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1MzkzOQ==", "bodyText": "Global variables", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450853939", "createdAt": "2020-07-07T13:14:19Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkyOTY4OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNDoyN1rOGt98nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNDoyN1rOGt98nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NDA0NQ==", "bodyText": "Make final", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450854045", "createdAt": "2020-07-07T13:14:27Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDkzNzkxOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNjoyNVrOGt-Bww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxNjoyNVrOGt-Bww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NTM2Mw==", "bodyText": "I think I wouldn't do this in the constructor. You could create beans and inject the Key objects in here", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450855363", "createdAt": "2020-07-07T13:16:25Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk0ODI5OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxOTowMlrOGt-IPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoxOTowMlrOGt-IPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NzAyMA==", "bodyText": "?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450857020", "createdAt": "2020-07-07T13:19:02Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {\n+            KeyFactory keyFactory = KeyFactory.getInstance(ALG);\n+\n+            if (privateKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+                PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+                privateKey = keyFactory.generatePrivate(privateKeySpec);\n+                super.setKeyFile(privateKeyStoreFile);\n+            }\n+            if (publicKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+                publicKey = keyFactory.generatePublic(publicKeySpec);\n+            }\n+        } catch (Exception e) {\n+            throw new EncrypterException(\"Something went wrong during construction of \"\n+                    + \"RsaEncryptionProvider\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() throws javax.crypto.NoSuchPaddingException, NoSuchAlgorithmException {\n+        return Cipher.getInstance(ALGORITHM);\n+    }\n+\n+    protected Key getSecretEncryptionKey(String key, int cipherMode) {\n+        if (cipherMode == Cipher.ENCRYPT_MODE) {\n+            if (publicKey == null) {\n+                throw new EncrypterException(\"Cannot RSA encrypt because no public key is defined.\");\n+            }\n+            return publicKey;\n+        } else if (cipherMode == Cipher.DECRYPT_MODE) {\n+            if (privateKey == null) {\n+                throw new EncrypterException(\"Cannot RSA encrypt because no private key is defined.\");\n+            }\n+            return privateKey;\n+        }\n+        throw new EncrypterException(\"Invalid cipher mode specified.\");\n+    }\n+\n+    protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk1MjQ0OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMDowNlrOGt-Kww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMDowNlrOGt-Kww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1NzY2Nw==", "bodyText": "Global variables", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450857667", "createdAt": "2020-07-07T13:20:06Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk1NTA2OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMDozNlrOGt-MTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMDozNlrOGt-MTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1ODA2Mg==", "bodyText": "Make final", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450858062", "createdAt": "2020-07-07T13:20:36Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDk2NzM0OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMzowOVrOGt-Tcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzoyMzowOVrOGt-Tcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg1OTg5MQ==", "bodyText": "Make this private, add getter if needed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450859891", "createdAt": "2020-07-07T13:23:09Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA0MDYzOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozODo1MlrOGt-_hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozODo1MlrOGt-_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTE3NQ==", "bodyText": "return\nbytes.length > BLOCK_SIZE\n&&\nArrays.stream(Arrays.copyOfRange(bytes, 0, BLOCK_SIZE)).allMatch(b -> b == 0);\nSomething like this?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450871175", "createdAt": "2020-07-07T13:38:52Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+\n+        if (secret.getType() != this.getType()) {\n+            throw new EncrypterException(\n+                    \"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \"\n+                            + secret.getType().name());\n+        }\n+\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.DECRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n+\n+            if (this.checkNullBytesPrepended(decryptedData)) {\n+                return new Secret(Arrays.copyOfRange(decryptedData, BLOCK_SIZE, decryptedData.length));\n+            } else {\n+                return new Secret(decryptedData);\n+            }\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not decrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    private boolean checkNullBytesPrepended(final byte[] bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTA0MzMxOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozOTozMVrOGt_BRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMzozOTozMVrOGt_BRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg3MTYyMA==", "bodyText": "final", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450871620", "createdAt": "2020-07-07T13:39:31Z", "author": {"login": "jboon"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n+    private static final String PROVIDER = \"nCipherKM\";\n+    private static final String TYPE = \"ncipher.sworld\";\n+    private static final byte[] IV = new byte[16];\n+\n+    private KeyStore keyStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODg1ODgwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/integration-test/resources/logback-test.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyMDowNFrOGyDOpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyMDowNFrOGyDOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDg4NQ==", "bodyText": "Element fileNamePattern has \"test\" in its value, but element file doesn't.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455134885", "createdAt": "2020-07-15T15:20:04Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/resources/logback-test.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<configuration>\n+\n+  <appender name=\"CONSOLE\" class=\"ch.qos.logback.core.ConsoleAppender\">\n+    <encoder>\n+      <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}] [${HOSTNAME}] [%thread] %level %logger{36}@%method:%line - %msg%n</pattern>\n+    </encoder>\n+  </appender>\n+\n+  <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n+    <file>/var/log/osp/logs/osgp-secret-management.log</file>\n+    <rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\">\n+      <fileNamePattern>/var/log/osp/logs/test-osgp-secret-management.log.%d{yyyy-MM-dd}.%i.log</fileNamePattern>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODg5NDA2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyNzoyNVrOGyDk1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyNzoyNVrOGyDk1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MDU2NQ==", "bodyText": "Layout: only show one value per line for readability.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455140565", "createdAt": "2020-07-15T15:27:25Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretType.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+public enum SecretType {\n+    E_METER_MASTER_KEY, E_METER_AUTHENTICATION_KEY, E_METER_ENCRYPTION_KEY_UNICAST, E_METER_ENCRYPTION_KEY_BROADCAST,\n+    G_METER_MASTER_KEY, G_METER_ENCRYPTION_KEY, G_METER_FIRMWARE_UPDATE_AUTHENTICATION_KEY, G_METER_OPTICAL_PORT_KEY,\n+    PPP_PASSWORD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkwMDM2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyODo1NVrOGyDorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyODo1NVrOGyDorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MTU0OQ==", "bodyText": "To be consistent, use Lombok here as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455141549", "createdAt": "2020-07-15T15:28:55Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+/**\n+ * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n+ */\n+public class TypedSecret {\n+    private SecretType secretType;\n+    private String secret;\n+\n+    public String getSecret() {\n+        return this.secret;\n+    }\n+\n+    public SecretType getSecretType() {\n+        return this.secretType;\n+    }\n+\n+    public void setSecret(final String secret) {\n+        this.secret = secret;\n+    }\n+\n+    public void setSecretType(final SecretType secretType) {\n+        this.secretType = secretType;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODk5OTcyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo1NDoxMFrOGyEmJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo1NDoxMFrOGyEmJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1NzI4NA==", "bodyText": "Never use printStackTrace.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455157284", "createdAt": "2020-07-15T15:54:10Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.List;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        if (log.isTraceEnabled()) {\n+            log.trace(getSecretsRequestToString(request));\n+        }\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            SecretTypes soapSecretTypes = request.getSecretTypes();\n+\n+            if (soapSecretTypes == null) {\n+                throw new TechnicalException(\"Missing input: secret types\");\n+            }\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+                    secretTypeList);\n+\n+            TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            log.trace(response.toString());\n+\n+            return response;\n+\n+        } catch (Exception e) {\n+            if (log.isDebugEnabled()) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTAxMDc0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo1Njo1MFrOGyEs5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo1Njo1MFrOGyEs5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1OTAxNQ==", "bodyText": "The method only throws TechnicalExceptions, so why use OsgpException in the throws clause?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455159015", "createdAt": "2020-07-15T15:56:50Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.util.List;\n+\n+import javax.xml.bind.JAXBContext;\n+import javax.xml.bind.JAXBException;\n+import javax.xml.bind.Marshaller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTAyMDExOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo1OToxNFrOGyEysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTo1OToxNFrOGyEysw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MDQ5OQ==", "bodyText": "We normally use Orika for mapping.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455160499", "createdAt": "2020-07-15T15:59:14Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTAyNDA3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowMDoxOFrOGyE1Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowMDoxOFrOGyE1Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MTE1MQ==", "bodyText": "Do not use the \"Db\" prefix for repositories and entities.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455161151", "createdAt": "2020-07-15T16:00:18Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTAzOTQzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowNDo0MFrOGyE-5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowNDo0MFrOGyE-5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MzYyMg==", "bodyText": "We normally don't use the creation_time (and modification_time) in the code. And we've had some problems in the few places where we did use those columns. Consider using a separate column.\nOr would it be possible to just select \"max(es.id)\" instead of searching the highest creation_time?\nWhen searching a value, both edges (valid_from = :date and valid_to = :date) are excluded. I would expect at least one of those two to be included.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455163622", "createdAt": "2020-07-15T16:04:40Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \"\n+            + \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \"\n+            + \"WHERE es.device_identification = :deviceIdentification AND es.secret_type = :secretType \"\n+            + \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \"\n+            + \"ORDER BY es.creation_time DESC, es.id DESC LIMIT 1\", nativeQuery = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTA1NTE3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/resources/create_database.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowODo1OFrOGyFIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjowODo1OFrOGyFIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NjA0Mw==", "bodyText": "Other databases are created separately from the application code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455166043", "createdAt": "2020-07-15T16:08:58Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/create_database.sql", "diffHunk": "@@ -0,0 +1,5 @@\n+DROP DATABASE IF EXISTS osgp_secret_management;\n+CREATE DATABASE osgp_secret_management\n+    WITH\n+    OWNER = osp_admin\n+    ENCODING = 'UTF8';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTA1OTc0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjoxMDoxNlrOGyFLPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjoxMDoxNlrOGyFLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2Njc4Mw==", "bodyText": "The filename doesn't conform to the naming convention. See https://github.com/SmartSocietyServices/Way-of-Working-Wiki/wiki/FlyWay-way-of-working", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455166783", "createdAt": "2020-07-15T16:10:16Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "diffHunk": "@@ -0,0 +1,70 @@\n+DO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTA2MTc0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjoxMDo0OVrOGyFMgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNjoxMDo0OVrOGyFMgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NzEwNQ==", "bodyText": "Indentation is wrong because of using tabs. Replace all tabs by 4 spaces.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r455167105", "createdAt": "2020-07-15T16:10:49Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "diffHunk": "@@ -0,0 +1,70 @@\n+DO\n+$$\n+      BEGIN\n+\t\t IF NOT EXISTS(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27e8524ee4835a63fc556e033e0a2213932c401f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU1NDI2OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MjowN1rOGy6BKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MjowN1rOGy6BKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMjU1Mg==", "bodyText": "Header is missing for this file.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456032552", "createdAt": "2020-07-16T19:42:07Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU1NTI3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MjoyMFrOGy6B0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MjoyMFrOGy6B0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMjcyMw==", "bodyText": "Header is missing for this file.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456032723", "createdAt": "2020-07-16T19:42:20Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU1NjYxOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MjozNVrOGy6CuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MjozNVrOGy6CuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMjk1Mw==", "bodyText": "Header is missing for this file.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456032953", "createdAt": "2020-07-16T19:42:35Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU2MDk5OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MzozMlrOGy6FjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0MzozMlrOGy6FjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzMzY3Nw==", "bodyText": "Header is missing for this file.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456033677", "createdAt": "2020-07-16T19:43:32Z", "author": {"login": "kevinsmeets"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.opensmartgridplatform.shared.security.providers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDU2NTg4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NDo0OFrOGy6Iqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo0NDo0OFrOGy6Iqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNDQ3NQ==", "bodyText": "Header is missing for this file.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456034475", "createdAt": "2020-07-16T19:44:48Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecurityKeyService.java", "diffHunk": "@@ -1,503 +1,23 @@\n-/**\n- * Copyright 2017 Smart Society Services B.V.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDcyNzI1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/resources/osgp-adapter-protocol-dlms.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDozMTozNFrOGy7rwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDozMTozNFrOGy7rwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1OTg0MQ==", "bodyText": "Is this SOAP client sending messages to an HTTPD instance? Do we need some configuration for this?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456059841", "createdAt": "2020-07-16T20:31:34Z", "author": {"login": "kevinsmeets"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/resources/osgp-adapter-protocol-dlms.properties", "diffHunk": "@@ -1,3 +1,14 @@\n+soapclient.use.client.auth=true\n+#soapclient.default-uri=http://localhost:8080/osgp-secret-management/ws/SecretManagement\n+soapclient.default-uri=https://localhost:443/osgp-secret-management/ws/SecretManagement", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDc4MTU2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0Nzo0N1rOGy8New==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0Nzo0N1rOGy8New==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2ODQ3NQ==", "bodyText": "Spring Boot will override the property logging.config.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r456068475", "createdAt": "2020-07-16T20:47:47Z", "author": {"login": "kevinsmeets"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/Application.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.PropertySource;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import java.util.Properties;\n+\n+@Slf4j\n+@SpringBootApplication(exclude = { SecurityAutoConfiguration.class })\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)\n+@ComponentScan(basePackages = { \"org.opensmartgridplatform.secretmanagement\" })\n+public class Application extends SpringBootServletInitializer {\n+\n+    private static final String LOG_CONFIG = \"java:comp/env/osgp/SecretManagement/log-config\";\n+\n+    public static void main(final String[] args) {\n+        //command line startup method (not used when app is started in application server)\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+    @Override\n+    protected SpringApplicationBuilder configure(final SpringApplicationBuilder builder) {\n+        String logPropertiesLocation = this.getLogbackConfigurationLocation();\n+\n+        log.info(\"Location for properties: {}\", logPropertiesLocation);\n+\n+        Properties props = new Properties();\n+        props.setProperty(\"logging.config\", logPropertiesLocation);\n+        builder.application().setDefaultProperties(props);\n+\n+        return builder.sources(Application.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83a8dddb1f6c3ee3e5e2ae9068a20132ecbf1ca3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDY0ODY4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMToyNlrOG0SPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMToyMzo1M1rOG0zj5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODA3Mw==", "bodyText": "Avoid using the old java.util.Date class. ZonedDateTime is a better one.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r457478073", "createdAt": "2020-07-20T15:11:26Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf30f647c4161df08ef894f4e80f80be0cc9ba58"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyMzkxMA==", "bodyText": "The date is also used in the call to the \"find\" for the DB, so using java.util.Date is still necessary. I'll mark this comment as resolved.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r458023910", "createdAt": "2020-07-21T11:23:53Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODA3Mw=="}, "originalCommit": {"oid": "bf30f647c4161df08ef894f4e80f80be0cc9ba58"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDY1NTA5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMjoxNVrOG0STMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMjoxNVrOG0STMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3ODk2MA==", "bodyText": "Your IDE should be able to format this nicely automatically (the same goes for the previous \"@Formatter\" code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r457478960", "createdAt": "2020-07-20T15:12:15Z", "author": {"login": "rlemmers"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        final Optional<TypedSecret> current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+        return current.isPresent() ? current.get().getSecret().equals(secret.getSecret()) : false;\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf30f647c4161df08ef894f4e80f80be0cc9ba58"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzIzMTA4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTozMVrOG1jxNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo1OTozMVrOG1jxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgxMzc1MQ==", "bodyText": "Remove the literal \"false\" boolean value.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r458813751", "createdAt": "2020-07-22T13:59:31Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/**\n+ * Copyright 2016 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.config;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.http.conn.ssl.NoopHostnameVerifier;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+import org.springframework.ws.soap.security.support.KeyManagersFactoryBean;\n+import org.springframework.ws.soap.security.support.KeyStoreFactoryBean;\n+import org.springframework.ws.soap.security.support.TrustManagersFactoryBean;\n+import org.springframework.ws.transport.http.HttpsUrlConnectionMessageSender;\n+\n+@Configuration\n+public class SoapClientConfig {\n+\n+    private static final String XSD_SCHEMA_PACKAGE = \"org.opensmartgridplatform.ws.schema.core.secret.management\";\n+\n+    @Value(\"${soapclient.use.client.auth:false}\")\n+    private String useClientAuth;\n+\n+    @Value(\"${soapclient.use.hostname.verifier:true}\")\n+    private String useHostNameVerifier;\n+\n+    @Value(\"${soapclient.default-uri}\")\n+\n+    private String defaultUri;\n+\n+    @Value(\"${soapclient.ssl.trust-store}\")\n+    private Resource trustStore;\n+\n+    @Value(\"${soapclient.ssl.trust-store-password}\")\n+    private String trustStorePassword;\n+\n+    @Value(\"${soapclient.ssl.key-store}\")\n+    private Resource keyStore;\n+\n+    @Value(\"${soapclient.ssl.key-store-password}\")\n+    private String keyStorePassword;\n+\n+    @Value(\"${soapclient.ssl.key-password}\")\n+    private String keyPassword;\n+\n+    @Value(\"${encryption.soap.rsa.private.key.resource}\")\n+    private Resource soapRsaPrivateKeyResource;\n+\n+    @Bean\n+    Jaxb2Marshaller soapClientJaxb2Marshaller() {\n+        Jaxb2Marshaller jaxb2Marshaller = new Jaxb2Marshaller();\n+        jaxb2Marshaller.setContextPath(XSD_SCHEMA_PACKAGE);\n+        return jaxb2Marshaller;\n+    }\n+\n+    @Bean\n+    public WebServiceTemplate webServiceTemplate() throws Exception {\n+        WebServiceTemplate webServiceTemplate = new WebServiceTemplate();\n+        webServiceTemplate.setMarshaller(soapClientJaxb2Marshaller());\n+        webServiceTemplate.setUnmarshaller(soapClientJaxb2Marshaller());\n+        webServiceTemplate.setDefaultUri(defaultUri);\n+\n+        if (Boolean.parseBoolean(useClientAuth)) {\n+            webServiceTemplate.setMessageSender(httpsUrlConnectionMessageSender());\n+        }\n+\n+        return webServiceTemplate;\n+    }\n+\n+    @Bean\n+    public HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender() throws Exception {\n+        HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender =\n+                new HttpsUrlConnectionMessageSender();\n+        // set the trust store(s)\n+        httpsUrlConnectionMessageSender.setTrustManagers(trustManagersFactoryBean().getObject());\n+        // set the key store(s)\n+        httpsUrlConnectionMessageSender.setKeyManagers(keyManagersFactoryBean().getObject());\n+\n+        if (Boolean.parseBoolean(useHostNameVerifier) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d74e3b3f5af25bee0f9ceec7e7ed907f82c15def"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTAzNDA5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjowNFrOGluPsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjowNFrOGluPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwODE3Nw==", "bodyText": "use property", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442208177", "createdAt": "2020-06-18T13:02:04Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,168 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <version>5.1.0-SNAPSHOT</version>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.2.RELEASE</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTAzNTAzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjoyMVrOGluQSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjoyMVrOGluQSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwODMyOA==", "bodyText": "use property", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442208328", "createdAt": "2020-06-18T13:02:21Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,168 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <version>5.1.0-SNAPSHOT</version>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.2.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>jaxb2-maven-plugin</artifactId>\n+                <version>2.5.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTAzNTk2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjozM1rOGluQyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzowMjozM1rOGluQyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIwODQ1OQ==", "bodyText": "property etc", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442208459", "createdAt": "2020-06-18T13:02:33Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,168 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <version>5.1.0-SNAPSHOT</version>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.2.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>jaxb2-maven-plugin</artifactId>\n+                <version>2.5.0</version>\n+                <executions>\n+                    <execution>\n+                        <id>xjc</id>\n+                        <goals>\n+                            <goal>xjc</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <sources>\n+                        <source>${project.basedir}/src/main/resources/schemas/secretmgmt.xsd</source>\n+                    </sources>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>\n+                <version>3.0.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTA2NTM4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecrets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMDoyMVrOGlujhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMDoyMVrOGlujhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzI1NQ==", "bodyText": "dit is gegenereerde source code, deze zou niet moeten worden ingechecked.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442213255", "createdAt": "2020-06-18T13:10:21Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecrets.java", "diffHunk": "@@ -0,0 +1,76 @@\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTA2NzM5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/package-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMDo1MVrOGluk2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMDo1MVrOGluk2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzU5Mg==", "bodyText": "dit is gegenereerde code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442213592", "createdAt": "2020-06-18T13:10:51Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/package-info.java", "diffHunk": "@@ -0,0 +1,9 @@\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTA2ODk3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecret.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMToxNVrOGlul3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMToxNVrOGlul3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxMzg1Mw==", "bodyText": "gegenereerd.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442213853", "createdAt": "2020-06-18T13:11:15Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TypedSecret.java", "diffHunk": "@@ -0,0 +1,99 @@\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTA3MDE3OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TechnicalFault.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMTozNFrOGlumpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMTozNFrOGlumpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNDA1Mg==", "bodyText": "gegenereerd.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442214052", "createdAt": "2020-06-18T13:11:34Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/schemas/security/secretmanagement/_2020/_05/TechnicalFault.java", "diffHunk": "@@ -0,0 +1,155 @@\n+//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTA3Njk1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMzoyM1rOGlurDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxMzoyM1rOGlurDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxNTE4Mg==", "bodyText": "why is a qualifier needed ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442215182", "createdAt": "2020-06-18T13:13:23Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java", "diffHunk": "@@ -35,6 +36,7 @@\n     private ReplaceKeyCommandExecutor replaceKeyCommandExecutor;\n \n     @Autowired\n+    @Qualifier(\"secretMangementService\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTA5ODY2OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxODo1OVrOGlu5NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxODo1OVrOGlu5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxODgwNA==", "bodyText": "I would expect Spring injection here.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442218804", "createdAt": "2020-06-18T13:18:59Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * SOAP Client for SecretManagement\n+ */\n+@Component\n+public class SecretManagementClient {\n+\n+    private final WebServiceTemplate webServiceTemplate;\n+\n+    SecretManagementClient() {\n+\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        // this package must match the package in the <generatePackage> specified in\n+        // pom.xml\n+        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n+\n+        this.webServiceTemplate = new WebServiceTemplate(marshaller);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTEwMTc5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxOTo0NlrOGlu7QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoxOTo0NlrOGlu7QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIxOTMyOA==", "bodyText": "hardcoded url. on non https channel", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442219328", "createdAt": "2020-06-18T13:19:46Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * SOAP Client for SecretManagement\n+ */\n+@Component\n+public class SecretManagementClient {\n+\n+    private final WebServiceTemplate webServiceTemplate;\n+\n+    SecretManagementClient() {\n+\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+        // this package must match the package in the <generatePackage> specified in\n+        // pom.xml\n+        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n+\n+        this.webServiceTemplate = new WebServiceTemplate(marshaller);\n+    }\n+\n+    public GetSecretsResponse getSecretsRequest(GetSecretsRequest request) {\n+\n+        return (GetSecretsResponse) this.webServiceTemplate\n+                .marshalSendAndReceive(\"http://localhost:8080/osgp-secret-management/ws/SecretManagement\", request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTEwNzgyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyMToxNFrOGlu_Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1NDoyMVrOGnfxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA==", "bodyText": "value param is redundant.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442220294", "createdAt": "2020-06-18T13:21:14Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDQ5Mg==", "bodyText": "also name is misspelled.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442220492", "createdAt": "2020-06-18T13:21:32Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1OTI3Mw==", "bodyText": "Wow, eagle-eye! +1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442359273", "createdAt": "2020-06-18T16:38:25Z", "author": {"login": "jandik"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2ODIyOA==", "bodyText": "hahaha +1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444068228", "createdAt": "2020-06-23T08:54:21Z", "author": {"login": "jboon"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDI5NA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTExMTIyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyMjowN1rOGlvBZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyMjowN1rOGlvBZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMDkwMA==", "bodyText": "is qualifier needed?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442220900", "createdAt": "2020-06-18T13:22:07Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;\n+\n+    @Autowired\n+    SecretManagementClient secretManagementClient;\n+\n+    @Autowired\n+    @Qualifier(\"dlmsSecurityKeyService\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTExNDc4OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyMjo1M1rOGlvDpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozOTo0M1rOGl3hEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMTQ3Ng==", "bodyText": "a lot of NotImplementedExceptions, is the story/EPIC done?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442221476", "createdAt": "2020-06-18T13:22:53Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;\n+\n+    @Autowired\n+    SecretManagementClient secretManagementClient;\n+\n+    @Autowired\n+    @Qualifier(\"dlmsSecurityKeyService\")\n+    DlmsSecurityKeyService dlmsSecurityKeyService;\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MDA4Mw==", "bodyText": "I think this is all post-MVP work, so should be covered by other epic/story", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442360083", "createdAt": "2020-06-18T16:39:43Z", "author": {"login": "jandik"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;\n+\n+    @Autowired\n+    SecretManagementClient secretManagementClient;\n+\n+    @Autowired\n+    @Qualifier(\"dlmsSecurityKeyService\")\n+    DlmsSecurityKeyService dlmsSecurityKeyService;\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMTQ3Ng=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTEyMDcyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyNDoyNlrOGlvHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzoyNDoyNlrOGlvHrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyMjUxMQ==", "bodyText": "scope should be private I think.\nconsider using constructor injection to make testing available", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442222511", "createdAt": "2020-06-18T13:24:26Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,164 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+@Service(value = \"secretMangementService\")\n+@Transactional(value = \"transactionManager\")\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+\n+    @Autowired\n+    EncryptionService soapSecretEncryptionService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE1NTgwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozMjozNVrOGlveJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozNTowM1rOGl3WCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyODI2Mw==", "bodyText": "can be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442228263", "createdAt": "2020-06-18T13:32:35Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "diffHunk": "@@ -0,0 +1,73 @@\n+DO\n+$$\n+      BEGIN\n+\t\t IF NOT EXISTS(\n+                 SELECT 1 FROM information_schema.tables WHERE table_schema = current_schema AND table_name = 'encryption_key_reference')\n+            THEN\n+                 CREATE TABLE \"encryption_key_reference\"\n+                    (\n+                        id                  BIGINT    PRIMARY KEY,\n+                        reference           CHARACTER VARYING(32)       NOT NULL,\n+                        encryption_provider_type CHARACTER VARYING(32)  NOT NULL,\n+                        valid_from          timestamp without time zone NOT NULL,\n+                        valid_to            timestamp without time zone,\n+                        creation_time       timestamp without time zone NOT NULL,\n+                        modification_time   timestamp without time zone NOT NULL DEFAULT now(),\n+                        modified_by         CHARACTER VARYING(64)       NOT NULL,\n+                        version             BIGINT                      NOT NULL DEFAULT 0\n+                    );\n+                 ALTER TABLE \"encryption_key_reference\" OWNER TO osp_admin;\n+                 CREATE SEQUENCE encryption_key_reference_id_seq\n+                        START WITH 1\n+                        INCREMENT BY 1\n+                        NO MINVALUE\n+                        NO MAXVALUE\n+                        CACHE 1;\n+                 ALTER TABLE public.encryption_key_reference ALTER COLUMN id SET DEFAULT nextval('encryption_key_reference_id_seq');\n+  \t\t\t\t ALTER TABLE public.encryption_key_reference_id_seq OWNER TO osp_admin;\n+\t\t\t\t ALTER SEQUENCE public.encryption_key_reference_id_seq OWNED BY encryption_key_reference.id;\n+  \t\t\t\t CREATE INDEX encryption_key_reference_ix_valid_from\n+                        ON public.encryption_key_reference USING btree\n+                        (valid_from DESC)\n+                        TABLESPACE pg_default;\n+                 CREATE INDEX encryption_key_reference_ix_valid_to\n+                        ON public.encryption_key_reference USING btree\n+                        (valid_to DESC)\n+                        TABLESPACE pg_default;\n+\n+                 --INSERT INTO \"encryption_key_reference\" (id, ...)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NzI1OQ==", "bodyText": "Agreed", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442357259", "createdAt": "2020-06-18T16:35:03Z", "author": {"login": "jandik"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V2020.001__InitialVersionPostgreSQL.sql", "diffHunk": "@@ -0,0 +1,73 @@\n+DO\n+$$\n+      BEGIN\n+\t\t IF NOT EXISTS(\n+                 SELECT 1 FROM information_schema.tables WHERE table_schema = current_schema AND table_name = 'encryption_key_reference')\n+            THEN\n+                 CREATE TABLE \"encryption_key_reference\"\n+                    (\n+                        id                  BIGINT    PRIMARY KEY,\n+                        reference           CHARACTER VARYING(32)       NOT NULL,\n+                        encryption_provider_type CHARACTER VARYING(32)  NOT NULL,\n+                        valid_from          timestamp without time zone NOT NULL,\n+                        valid_to            timestamp without time zone,\n+                        creation_time       timestamp without time zone NOT NULL,\n+                        modification_time   timestamp without time zone NOT NULL DEFAULT now(),\n+                        modified_by         CHARACTER VARYING(64)       NOT NULL,\n+                        version             BIGINT                      NOT NULL DEFAULT 0\n+                    );\n+                 ALTER TABLE \"encryption_key_reference\" OWNER TO osp_admin;\n+                 CREATE SEQUENCE encryption_key_reference_id_seq\n+                        START WITH 1\n+                        INCREMENT BY 1\n+                        NO MINVALUE\n+                        NO MAXVALUE\n+                        CACHE 1;\n+                 ALTER TABLE public.encryption_key_reference ALTER COLUMN id SET DEFAULT nextval('encryption_key_reference_id_seq');\n+  \t\t\t\t ALTER TABLE public.encryption_key_reference_id_seq OWNER TO osp_admin;\n+\t\t\t\t ALTER SEQUENCE public.encryption_key_reference_id_seq OWNED BY encryption_key_reference.id;\n+  \t\t\t\t CREATE INDEX encryption_key_reference_ix_valid_from\n+                        ON public.encryption_key_reference USING btree\n+                        (valid_from DESC)\n+                        TABLESPACE pg_default;\n+                 CREATE INDEX encryption_key_reference_ix_valid_to\n+                        ON public.encryption_key_reference USING btree\n+                        (valid_to DESC)\n+                        TABLESPACE pg_default;\n+\n+                 --INSERT INTO \"encryption_key_reference\" (id, ...)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyODI2Mw=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE2NTcwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNDo1OFrOGlvkhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNDo1OFrOGlvkhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIyOTg5Mw==", "bodyText": "I would expect this to be a Spring Component.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442229893", "createdAt": "2020-06-18T13:34:58Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE2NzE3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNToxN1rOGlvlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNToxN1rOGlvlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMDEyOA==", "bodyText": "inject as Spring @resource ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442230128", "createdAt": "2020-06-18T13:35:17Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;\n+\n+    protected int getIVLength() {\n+        return IV.length;\n+    }\n+\n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n+    @Override\n+    public void setKeyFile(File keyStoreFile) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE2OTI1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNTo0N1rOGlvmuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNTo0N1rOGlvmuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMDQ1Ng==", "bodyText": "what is \"1\" , better to create a constant", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442230456", "createdAt": "2020-06-18T13:35:47Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;\n+\n+    protected int getIVLength() {\n+        return IV.length;\n+    }\n+\n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n+    @Override\n+    public void setKeyFile(File keyStoreFile) throws Exception {\n+        super.setKeyFile(keyStoreFile);\n+        this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n+    }\n+\n+    protected Key getSecretEncryptionKey(String keyReference) {\n+\n+        if (!keyReference.equals(\"1\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE3MjY0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNjozNlrOGlvo4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozNjozNlrOGlvo4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMTAwOQ==", "bodyText": "Spring component ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442231009", "createdAt": "2020-06-18T13:36:36Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTE4MDA2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozODoyNlrOGlvt5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzozODoyNlrOGlvt5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzMjI5Mg==", "bodyText": "warning or error ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442232292", "createdAt": "2020-06-18T13:38:26Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AbstractEncryptionProvider.class.getName());\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+    protected abstract Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+    protected abstract Key getSecretEncryptionKey(String keyReference) throws Exception;\n+    protected abstract int getIVLength();\n+\n+    public void setKeyFile(File keyFile) throws Exception {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) throws Exception {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference), this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException | InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            LOGGER.warning(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTIwNDI4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NDowNlrOGlv9bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NDowNlrOGlv9bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjI3MA==", "bodyText": "basically returning null is a code-smell. consider returning Optional", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442236270", "createdAt": "2020-06-18T13:44:06Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n+        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;\n+    }\n+\n+    @Override\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) throws Exception {\n+        EncryptionProviderType encType = secret.getType();\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n+        return oep.isPresent()?oep.get().decrypt(secret, keyReference):null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTIwNDg3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NDoxN1rOGlv92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NDoxN1rOGlv92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjM3Ng==", "bodyText": "basically returning null is a code-smell. consider returning Optional", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442236376", "createdAt": "2020-06-18T13:44:17Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();\n+        return oep.isPresent()?oep.get().encrypt(secret, keyReference):null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTIwODQ1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NTowN1rOGlwANA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo0NTowN1rOGlwANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjIzNjk4MA==", "bodyText": "change to Spring bean and use @resource injection", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442236980", "createdAt": "2020-06-18T13:45:07Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI3MTM2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo1ODoxNVrOGlwnyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjozMjozNFrOGl3QQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzExMw==", "bodyText": "minor: consider naming interface SecretManagementService and the impl SecretManagementServiceImpl as this is the most common way to do this.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442247113", "createdAt": "2020-06-18T13:58:15Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.opensmartgridplatform.secretmgmt.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService implements SecretManagement {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTc3OA==", "bodyText": "Agreed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442355778", "createdAt": "2020-06-18T16:32:34Z", "author": {"login": "jandik"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.opensmartgridplatform.secretmgmt.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService implements SecretManagement {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzExMw=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI3NDYwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo1ODo1OFrOGlwp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMDowNjo0NlrOGq1ZWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA==", "bodyText": "do yo need a native query per se ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442247668", "createdAt": "2020-06-18T13:58:58Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opensmartgridplatform.secretmgmt.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \" +\n+            \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \" +\n+            \"WHERE es.device_identification = :deviceIdentification \" +\n+            \"AND es.secret_type = :secretType \" +\n+            \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \" +\n+            \"ORDER BY es.creation_time DESC, es.id DESC \" +\n+            \"LIMIT 1\",\n+            nativeQuery = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM1NTQ1OA==", "bodyText": "Unfortunately, I do. Jpql doesn't support LIMIT. Alternative option (which I tried first) is to use Jpql in combination with pagination, but this resulted in an error (hibernate tries to generate a count query, but this query was incorrect SQL) and might also be less performant.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442355458", "createdAt": "2020-06-18T16:32:02Z", "author": {"login": "jandik"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opensmartgridplatform.secretmgmt.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \" +\n+            \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \" +\n+            \"WHERE es.device_identification = :deviceIdentification \" +\n+            \"AND es.secret_type = :secretType \" +\n+            \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \" +\n+            \"ORDER BY es.creation_time DESC, es.id DESC \" +\n+            \"LIMIT 1\",\n+            nativeQuery = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MDY2OQ==", "bodyText": "hmm, I think there is a setMaxResults setting on a query, maybe could be worth a try", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444050669", "createdAt": "2020-06-23T08:26:27Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opensmartgridplatform.secretmgmt.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \" +\n+            \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \" +\n+            \"WHERE es.device_identification = :deviceIdentification \" +\n+            \"AND es.secret_type = :secretType \" +\n+            \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \" +\n+            \"ORDER BY es.creation_time DESC, es.id DESC \" +\n+            \"LIMIT 1\",\n+            nativeQuery = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzU2ODIxOQ==", "bodyText": "the setMaxResults property applies to a Hibernate query, not on a Spring query annotation", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r447568219", "createdAt": "2020-06-30T10:06:46Z", "author": {"login": "jandik"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/repository/DbEncryptedSecretRepository.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package org.opensmartgridplatform.secretmgmt.application.repository;\n+\n+import java.util.Date;\n+\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+import org.springframework.stereotype.Repository;\n+\n+@Repository\n+public interface DbEncryptedSecretRepository extends JpaRepository<DbEncryptedSecret, Long> {\n+    @Query(value = \"SELECT es.id FROM encrypted_secret es \" +\n+            \"LEFT JOIN encryption_key_reference ekr ON es.encryption_key_reference_id = ekr.id \" +\n+            \"WHERE es.device_identification = :deviceIdentification \" +\n+            \"AND es.secret_type = :secretType \" +\n+            \"AND ekr.valid_from < :date AND (ekr.valid_to IS NULL OR ekr.valid_to > :date) \" +\n+            \"ORDER BY es.creation_time DESC, es.id DESC \" +\n+            \"LIMIT 1\",\n+            nativeQuery = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NzY2OA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI3OTEyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/TechnicalServiceFaultException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo1OTo1NlrOGlwsuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMzo1OTo1NlrOGlwsuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0ODM3OQ==", "bodyText": "TechnicalServiceFault seems vague. Maybe rename to SecretManagementException or something like that ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442248379", "createdAt": "2020-06-18T13:59:56Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/TechnicalServiceFaultException.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.opensmartgridplatform.secretmgmt.application.exception;\n+\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+\n+public class TechnicalServiceFaultException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI4Mjk1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMDo0M1rOGlwvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMDo0M1rOGlwvFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0ODk4Mg==", "bodyText": "add accolades as per the standard.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442248982", "createdAt": "2020-06-18T14:00:43Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.opensmartgridplatform.secretmgmt.application.exception;\n+\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+import javax.xml.namespace.QName;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalServiceFaultException) {\n+            TechnicalFault technicalFault = ((TechnicalServiceFaultException) ex).getTechnicalFault();\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTI5MzEwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/WebServiceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzowNVrOGlw1qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowMzowNVrOGlw1qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MDY2Ng==", "bodyText": "I see a lot of hardcoded strings, consider moving to properties as in the rest of OSGP", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442250666", "createdAt": "2020-06-18T14:03:05Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/WebServiceConfig.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.opensmartgridplatform.secretmgmt.application.exception.DetailSoapFaultMappingExceptionResolver;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.springframework.boot.web.servlet.ServletRegistrationBean;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.ws.config.annotation.EnableWs;\n+import org.springframework.ws.config.annotation.WsConfigurerAdapter;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultDefinition;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+import org.springframework.ws.transport.http.MessageDispatcherServlet;\n+import org.springframework.ws.wsdl.wsdl11.DefaultWsdl11Definition;\n+import org.springframework.xml.xsd.XsdSchemaCollection;\n+import org.springframework.xml.xsd.commons.CommonsXsdSchemaCollection;\n+\n+import java.util.Properties;\n+\n+@EnableWs\n+@Configuration\n+public class WebServiceConfig extends WsConfigurerAdapter {\n+    @Bean\n+    public ServletRegistrationBean messageDispatcherServlet(ApplicationContext applicationContext) {\n+        MessageDispatcherServlet servlet = new MessageDispatcherServlet();\n+        servlet.setApplicationContext(applicationContext);\n+        servlet.setTransformWsdlLocations(true);\n+        return new ServletRegistrationBean(servlet, \"/ws/SecretManagement/*\");\n+    }\n+\n+    /**\n+     * url of the WSDL by this definition is:\n+     *\n+     *    http://localhost:8080/ws/SecretManagement/secretManagement.wsdl\n+     */\n+    @Bean(name = \"secretManagement\")\n+    public DefaultWsdl11Definition defaultWsdl11Definition(XsdSchemaCollection secretManagementSchemas) {\n+        DefaultWsdl11Definition wsdl11Definition = new DefaultWsdl11Definition();\n+        wsdl11Definition.setPortTypeName(\"SecretManagementPort\");\n+        wsdl11Definition.setLocationUri(\"/ws/SecretManagement\");\n+        wsdl11Definition.setTargetNamespace(\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTMxMTI5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/SecurityConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowNjo1OVrOGlxBEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDowNjo1OVrOGlxBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI1MzU4Nw==", "bodyText": "Note that the DefaultEncryptionDelegate is not a delegate but a Delegator. The actual Delegates are the providers doing the work.\nConsider renaming.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442253587", "createdAt": "2020-06-18T14:06:59Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/SecurityConfig.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.DefaultEncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+\n+import java.util.Optional;\n+\n+@Configuration\n+public class SecurityConfig {\n+\n+    @Value(\"${soap.secret.resource}\")\n+    private Resource soapSecretResource;\n+\n+    @Value(\"${database.secret.resource}\")\n+    private Resource databaseSecretResource;\n+\n+    @Value(\"${hsm.keystore.resource:#{null}}\")\n+    private Optional<Resource> hsmKeystoreResource;\n+\n+    @Value(\"${encryption.provider.type}\")\n+    private String encryptionProviderTypeName;\n+\n+    @Bean(name = \"osgpEncryptionDelegate\")\n+    public EncryptionDelegate getDefaultEncryptionDelegate() throws Exception {\n+        EncryptionDelegate encryptionDelegate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTM3MTgxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyMDo1NFrOGlxnyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyMDo1NFrOGlxnyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2MzQ5OA==", "bodyText": "this seems a strange construct and not open to extension. Why not create a second Provider for HSM?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442263498", "createdAt": "2020-06-18T14:20:54Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTM3NjgzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyMTo1NVrOGlxq5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyMjo1N1rOGlxuDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NDI5NA==", "bodyText": "for my understanding: is it ever possible that multiple providers for the same EncryptionProviderType are registered?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442264294", "createdAt": "2020-06-18T14:21:55Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NTEwMg==", "bodyText": "consider keeping the param names equal to the Object types. EncryptionProviderType --> encType misses \"provider\" and is thus less readable.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442265102", "createdAt": "2020-06-18T14:22:57Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.HsmEncryptionProvider;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers = new ArrayList<>();\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile) throws Exception {\n+        this(jreKeyFile, null);\n+    }\n+\n+    public DefaultEncryptionDelegate(File jreKeyFile, File hsmKeyStoreFile) throws Exception {\n+        JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider();\n+        jreEncryptionProvider.setKeyFile(jreKeyFile);\n+\n+        providers.add(jreEncryptionProvider);\n+\n+        if (hsmKeyStoreFile != null) {\n+            HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider();\n+            hsmEncryptionProvider.setKeyFile(hsmKeyStoreFile);\n+            providers.add(hsmEncryptionProvider);\n+        }\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(EncryptionProviderType encType, Secret secret, String keyReference) throws Exception {\n+        Optional<EncryptionProvider> oep = providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NDI5NA=="}, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTM5MTY5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNDo1M1rOGlx0Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNDo1M1rOGlx0Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NjYyNw==", "bodyText": "use default value in annotation:\n\"${component.name:OSGP-SECRET-MANAGEMENT}\"", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442266627", "createdAt": "2020-06-18T14:24:53Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+public class ApplicationConfig {\n+\n+    @Value(\"${component.name}\")\n+    public final static String COMPONENT_NAME = \"OSGP-SECRET-MANAGEMENT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTM5NzMwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/config/WebClientConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNTo1N1rOGlx3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNDoyNTo1N1rOGlx3gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI2NzUyMw==", "bodyText": "I don't think this should be hardcoded here.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r442267523", "createdAt": "2020-06-18T14:25:57Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/config/WebClientConfig.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.opensmartgridplatform.secretmgmt.config;\n+\n+import org.opensmartgridplatform.secretmgmt.serviceclient.SoapConnector;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.oxm.jaxb.Jaxb2Marshaller;\n+\n+@Configuration\n+public class WebClientConfig {\n+\n+    @Bean\n+    public Jaxb2Marshaller marshaller() {\n+        Jaxb2Marshaller marshaller = new Jaxb2Marshaller();\n+\n+        marshaller.setContextPath(\"org.opensmartgridplatform.schemas.security.secretmanagement._2020._05\");\n+        return marshaller;\n+    }\n+\n+    @Bean\n+    public SoapConnector soapConnector(Jaxb2Marshaller marshaller) {\n+        SoapConnector client = new SoapConnector();\n+        client.setDefaultUri(\"http://localhost:8080/ws/SecretManagement\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25adddc4a129c95cb5e571f6164e19c3a9534806"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njc1NjYwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODowMjowNlrOGnd2MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODowMjowNlrOGnd2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzNjY1Nw==", "bodyText": "and another version for properties", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444036657", "createdAt": "2020-06-23T08:02:06Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,168 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <version>5.1.0-SNAPSHOT</version>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-starter-parent</artifactId>\n+        <version>2.2.2.RELEASE</version>\n+        <relativePath/> <!-- lookup parent from repository -->\n+    </parent>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>jaxb2-maven-plugin</artifactId>\n+                <version>2.5.0</version>\n+                <executions>\n+                    <execution>\n+                        <id>xjc</id>\n+                        <goals>\n+                            <goal>xjc</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <sources>\n+                        <source>${project.basedir}/src/main/resources/schemas/secretmgmt.xsd</source>\n+                    </sources>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>\n+                <version>3.0.0</version>\n+                <executions>\n+                    <execution>\n+                        <id>add-integration-test-source</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-source</goal>\n+                        </goals>\n+                        <configuration>\n+                            <sources>\n+                                <source>src/integration-test/java</source>\n+                            </sources>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>add-test-resource</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-resource</goal>\n+                        </goals>\n+                        <configuration>\n+                            <resources>\n+                                <resource>\n+                                    <directory>src/integration-test/resources</directory>\n+                                </resource>\n+                            </resources>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web-services</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>wsdl4j</groupId>\n+            <artifactId>wsdl4j</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.ws.xmlschema</groupId>\n+            <artifactId>xmlschema-core</artifactId>\n+            <version>2.0.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njc3MDkwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/application/SoapServiceSecretManagementIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODowNjoxMVrOGnd_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODowNjoxMVrOGnd_Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAzODkzNQ==", "bodyText": "remove?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444038935", "createdAt": "2020-06-23T08:06:11Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.opensmartgridplatform.secretmgmt.application;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.springframework.ws.test.server.RequestCreators.withPayload;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+\n+import javax.persistence.EntityManager;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration;\n+import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.AutoConfigureTestEntityManager;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.ws.test.server.MockWebServiceClient;\n+import org.springframework.ws.test.server.ResponseMatchers;\n+\n+@SpringBootTest\n+@Transactional\n+@EnableAutoConfiguration(exclude = FlywayAutoConfiguration.class)\n+@AutoConfigureTestDatabase\n+@AutoConfigureTestEntityManager\n+public class SoapServiceSecretManagementIT {\n+\n+    /**\n+     * The AES keys must be configured with the following values:\n+     * db key: hex:1cb340f6edab9d9b3f2912877c9ed161\n+     * soap key: hex:8ff36ab298aa8c240d1bb1185a138fe1\n+     *\n+     * The plantext secrets for meter 'E0054002019112319' are:\n+     *\n+     * hex: 72b8fc276644a60ccefdf219fbee1a49 (E_METER_AUTHENTICATION)\n+     * hex: a3d5883fe56cf12b1a7cb5a686da6064 (E_METER_ENCRYPTION_KEY_UNICAST)\n+     *\n+     * The db-encrypted secrets are: hex:35c6d2af323bd3c4a588692dfcf4235fd20c2bd39bcf8672b6e65d515940150f\n+     * (E_METER_AUTHENTICATION)\n+     * hex:7c737a402bdef7a0819f47ae9b625e2d8531e6c5d7603c4e4982c45175c4e063 (E_METER_ENCRYPTION_KEY_UNICAST)\n+     *\n+     * The soap-encrypted secrets are: hex:74efc062231e81c9e006bb56c5dec38631210c5073511606a203ba748fcdc794\n+     * (E_METER_AUTHENTICATION)\n+     * hex:3dca51832c70e372460796ca01acbab769fd330c9b936246a01d4e97f8c5bc26 (E_METER_ENCRYPTION_KEY_UNICAST)\n+     */\n+\n+    private static final String E_METER_AUTHENTICATION_KEY_ENCRYPTED_FOR_DB =\n+            \"35c6d2af323bd3c4a588692dfcf4235fd20c2bd39bcf8672b6e65d515940150f\";\n+    private static final String E_METER_ENCRYPTION_KEY_UNICAST_ENCRYPTED_FOR_DB =\n+            \"7c737a402bdef7a0819f47ae9b625e2d8531e6c5d7603c4e4982c45175c4e063\";\n+\n+    private static final String DEVICE_IDENTIFICATION = \"E0054002019112319\";\n+\n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private DbEncryptedSecretRepository secretRepository;\n+\n+    @Autowired\n+    private EntityManager testEntityManager;\n+\n+    private MockWebServiceClient mockWebServiceClient;\n+\n+    @BeforeEach\n+    public void setupTest() {\n+        this.mockWebServiceClient = MockWebServiceClient.createClient(this.applicationContext);\n+        this.createTestData();\n+    }\n+\n+    @Test\n+    public void getSecretsRequest() {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+        final Resource request = new ClassPathResource(\"test-requests/getSecrets.xml\");\n+        final Resource expectedResponse = new ClassPathResource(\"test-responses/getSecrets.xml\");\n+        try {\n+            this.mockWebServiceClient.sendRequest(withPayload(request))/*.andExpect\n+            (ResponseMatchers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njc5ODI3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoxNDowNlrOGneQiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoxNDowNlrOGneQiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0MzQwMA==", "bodyText": "These @propertysource annotations must be placed on @SpringBootApplication annotated class due to loading order problems", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444043400", "createdAt": "2020-06-23T08:14:06Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.opensmartgridplatform.secretmgmt.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgxNzc5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoxOTo0NVrOGnec6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoxOTo0NVrOGnec6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NjU3MA==", "bodyText": "@slf4j", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444046570", "createdAt": "2020-06-23T08:19:45Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.opensmartgridplatform.secretmgmt.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n+\n+@Endpoint\n+public class SecretManagementEndpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgyMTgyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMDo1M1rOGneffg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMDo1M1rOGneffg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NzIzMA==", "bodyText": "consider renaming to a more specific name", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444047230", "createdAt": "2020-06-23T08:20:53Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opensmartgridplatform.secretmgmt.serviceclient;\n+\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+public class SoapConnector extends WebServiceGatewaySupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgyMzUxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMToyMVrOGneglA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMToyMVrOGneglA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NzUwOA==", "bodyText": "callWebService could be more specific. which webservice ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444047508", "createdAt": "2020-06-23T08:21:21Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmgmt/serviceclient/SoapConnector.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.opensmartgridplatform.secretmgmt.serviceclient;\n+\n+import org.springframework.ws.client.core.support.WebServiceGatewaySupport;\n+\n+public class SoapConnector extends WebServiceGatewaySupport {\n+\n+    public Object callWebService(String url, Object request){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgyNDQ1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/integration-test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMTozOVrOGnehLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyMTozOVrOGnehLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0NzY2Mw==", "bodyText": "remove?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444047663", "createdAt": "2020-06-23T08:21:39Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/resources/application.properties", "diffHunk": "@@ -0,0 +1,11 @@\n+#Security configuration\n+component.name=osgp-secret-management\n+database.secret.resource=file:src/integration-test/resources/secret-mgmt-db.key\n+soap.secret.resource=file:src/integration-test/resources/secret-mgmt-soap.key\n+encryption.provider.type=JRE\n+#Test/debug configuration\n+spring.main.banner-mode=off\n+logging.level.org.springframework=OFF\n+#logging.level.org.springframework.ws=TRACE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgzODA3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyNDo1OFrOGnepYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyNDo1OFrOGnepYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA0OTc2Mg==", "bodyText": "for an Endpoint, this method contains too much code, consider moving this to a service for better readability, maintenance and testability", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444049762", "createdAt": "2020-06-23T08:24:58Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.opensmartgridplatform.secretmgmt.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n+\n+@Endpoint\n+public class SecretManagementEndpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+\n+    private final SecretManagementService secretManagementService;\n+    private final EncryptionProvider jreEncryptionProvider;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n+        this.secretManagementService = secretManagementService;\n+        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n+\n+        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        GetSecretsResponse response = new GetSecretsResponse();\n+\n+        try {\n+            SecretTypes soapSecretTypes = request.getSecretTypes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjgzOTk5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyNTozM1rOGneqwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODoyNTozM1rOGneqwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MDExMw==", "bodyText": "move code to separate service would improve the maintainability", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444050113", "createdAt": "2020-06-23T08:25:33Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.opensmartgridplatform.secretmgmt.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.GetSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.OsgpResultType;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretTypes;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsRequest;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.StoreSecretsResponse;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TechnicalFault;\n+import org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecrets;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.exception.TechnicalServiceFaultException;\n+import org.opensmartgridplatform.secretmgmt.application.services.SecretManagementService;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProvider;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.opensmartgridplatform.secretmgmt.application.config.ApplicationConfig.COMPONENT_NAME;\n+\n+@Endpoint\n+public class SecretManagementEndpoint {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementEndpoint.class);\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\";\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+\n+    private final SecretManagementService secretManagementService;\n+    private final EncryptionProvider jreEncryptionProvider;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService, EncryptionProvider soapSecretEncryptionProvider) {\n+        this.secretManagementService = secretManagementService;\n+        this.jreEncryptionProvider = soapSecretEncryptionProvider;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) {\n+\n+        LOGGER.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        GetSecretsResponse response = new GetSecretsResponse();\n+\n+        try {\n+            SecretTypes soapSecretTypes = request.getSecretTypes();\n+\n+            if (soapSecretTypes == null) {\n+                throw new TechnicalServiceFaultException(\"Missing input: secret types\");\n+            }\n+\n+            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType> soapSecretTypeList = soapSecretTypes.getSecretType();\n+            List<SecretType> secretTypeList = new ArrayList<>();\n+\n+            for (org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.SecretType soapSecretType: soapSecretTypeList) {\n+                SecretType secretType = convertToSecretType(soapSecretType);\n+                secretTypeList.add(secretType);\n+            }\n+\n+            List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(), secretTypeList);\n+            TypedSecrets soapTypedSecrets = new TypedSecrets();\n+\n+            List<org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret> soapTypedSecretList = soapTypedSecrets.getTypedSecret();\n+\n+            for (TypedSecret typedSecret : typedSecrets) {\n+                org.opensmartgridplatform.schemas.security.secretmanagement._2020._05.TypedSecret soapTypedSecret = encryptAndConvertSoapTypedSecret(typedSecret);\n+                soapTypedSecretList.add(soapTypedSecret);\n+            }\n+\n+            response.setTypedSecrets(soapTypedSecrets);\n+            response.setResult(OsgpResultType.OK);\n+\n+            return response;\n+        }\n+        catch (Exception e) {\n+            throw new TechnicalServiceFaultException(e.getMessage(), e, createTechnicalFaultFromException(e));\n+        }\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n+    @ResponsePayload\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) {\n+\n+        LOGGER.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        StoreSecretsResponse response = new StoreSecretsResponse();\n+\n+        try {\n+            TypedSecrets soapTypedSecrets = request.getTypedSecrets();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njg1ODg5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/resources/secret-management.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODozMDoyMVrOGne2kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODozMDoyMVrOGne2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1MzEzNg==", "bodyText": "make sure this can also be overwritten externally", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444053136", "createdAt": "2020-06-23T08:30:21Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/secret-management.properties", "diffHunk": "@@ -0,0 +1,28 @@\n+#Security configuration\n+component.name=osgp-secret-management\n+database.secret.resource=file:/etc/osp/smartmetering/keys/platform/secret-mgmt-db.key\n+soap.secret.resource=file:/etc/osp/smartmetering/keys/platform/secret-mgmt-soap.key\n+encryption.provider.type=HSM\n+\n+#hsm.keystore.resource=file:/etc/ssl/certs/houston.keystore\n+\n+#PostgreSQL\n+spring.datasource.driverclassname=org.postgresql.Driver\n+spring.datasource.url=jdbc:postgresql://127.0.0.1:5432/osgp_secret_management", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2Njg4MDkwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODozNjowMFrOGnfEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODozNjowMFrOGnfEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NjcxMw==", "bodyText": "As long as there is no presentation it's fine. Date is an epoch.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444056713", "createdAt": "2020-06-23T08:36:00Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+package org.opensmartgridplatform.secretmgmt.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmgmt.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmgmt.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmgmt.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptionDelegate;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.providers.EncryptionProviderType;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService implements SecretManagement {\n+    private final static int FIRST_PAGE = 0;\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(final EncryptionDelegate osgpEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = osgpEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    @Override\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey(s)))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey(final TypedSecret typedSecret) {\n+        final Date now = new Date(); //TODO: UTC?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjkwMTM4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo0MTozN1rOGnfR_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo0MTozN1rOGnfR_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2MDE1OQ==", "bodyText": "@slf4j", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444060159", "createdAt": "2020-06-23T08:41:37Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.EncryptedSecret;\n+import org.opensmartgridplatform.secretmgmt.application.services.encryption.Secret;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+import java.util.logging.Logger;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AbstractEncryptionProvider.class.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjkzMzU3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1MDowNFrOGnfmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwODo1MDowNFrOGnfmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA2NTQ1Ng==", "bodyText": "byte[] IV = new byte[16];", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r444065456", "createdAt": "2020-06-23T08:50:04Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmgmt/application/services/encryption/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.opensmartgridplatform.secretmgmt.application.services.encryption.providers;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n+    private static final String PROVIDER = \"nCipherKM\";\n+    private static final String TYPE = \"ncipher.sworld\";\n+    private static final byte[] IV = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0377bd4adc6c45a4de93764715961fd781a03ab"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDQ2NzExOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMToxMFrOGt5hzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMToxMFrOGt5hzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MTY0Nw==", "bodyText": "ik denk dat dit niet goed is. er zou nooit een snapshot versie hard coded in mogen staan", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450781647", "createdAt": "2020-07-07T11:01:10Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,187 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.opensmartgridplatform</groupId>\n+        <artifactId>parent-platform</artifactId>\n+        <version>5.2.0-SNAPSHOT</version>\n+        <relativePath>../parent-platform/pom.xml</relativePath>\n+    </parent>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <spring.boot.version>2.2.2.RELEASE</spring.boot.version>\n+        <jaxb.plugin.version>2.5.0</jaxb.plugin.version>\n+        <build.helper.maven.plugin.version>3.0.0</build.helper.maven.plugin.version>\n+        <apache.ws.xlmschema.version>2.0.1</apache.ws.xlmschema.version>\n+        <logback.spring.extensions.version>0.1.5</logback.spring.extensions.version>\n+        <wsdl4j.version>1.6.3</wsdl4j.version>\n+        <maven.failsafe.plugin.version>3.0.0-M4</maven.failsafe.plugin.version>\n+        <spring.boot.maven.plugin.version>2.2.2.RELEASE</spring.boot.maven.plugin.version>\n+        <failOnMissingWebXml>false</failOnMissingWebXml>\n+        <osgp-ws-secret-management-version>5.2.0-SNAPSHOT</osgp-ws-secret-management-version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDQ2ODk3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMTo0NlrOGt5i7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMTo0NlrOGt5i7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MTkzNQ==", "bodyText": "resolved maar versie staat er nog ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450781935", "createdAt": "2020-07-07T11:01:46Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,187 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.opensmartgridplatform</groupId>\n+        <artifactId>parent-platform</artifactId>\n+        <version>5.2.0-SNAPSHOT</version>\n+        <relativePath>../parent-platform/pom.xml</relativePath>\n+    </parent>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <spring.boot.version>2.2.2.RELEASE</spring.boot.version>\n+        <jaxb.plugin.version>2.5.0</jaxb.plugin.version>\n+        <build.helper.maven.plugin.version>3.0.0</build.helper.maven.plugin.version>\n+        <apache.ws.xlmschema.version>2.0.1</apache.ws.xlmschema.version>\n+        <logback.spring.extensions.version>0.1.5</logback.spring.extensions.version>\n+        <wsdl4j.version>1.6.3</wsdl4j.version>\n+        <maven.failsafe.plugin.version>3.0.0-M4</maven.failsafe.plugin.version>\n+        <spring.boot.maven.plugin.version>2.2.2.RELEASE</spring.boot.maven.plugin.version>\n+        <failOnMissingWebXml>false</failOnMissingWebXml>\n+        <osgp-ws-secret-management-version>5.2.0-SNAPSHOT</osgp-ws-secret-management-version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+                <version>${spring.boot.maven.plugin.version}</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>\n+                <version>${build.helper.maven.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>add-integration-test-source</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-source</goal>\n+                        </goals>\n+                        <configuration>\n+                            <sources>\n+                                <source>src/integration-test/java</source>\n+                            </sources>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>add-test-resource</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-resource</goal>\n+                        </goals>\n+                        <configuration>\n+                            <resources>\n+                                <resource>\n+                                    <directory>src/integration-test/resources</directory>\n+                                </resource>\n+                            </resources>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>${maven.failsafe.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+            <version>${spring.boot.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web-services</artifactId>\n+            <version>${spring.boot.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+            <version>${spring.boot.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.opensmartgridplatform</groupId>\n+            <artifactId>shared</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.opensmartgridplatform</groupId>\n+            <artifactId>osgp-ws-secret-management</artifactId>\n+            <version>${osgp-ws-secret-management-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>wsdl4j</groupId>\n+            <artifactId>wsdl4j</artifactId>\n+            <version>${wsdl4j.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.ws.xmlschema</groupId>\n+            <artifactId>xmlschema-core</artifactId>\n+            <version>${apache.ws.xlmschema.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.jms</groupId>\n+            <artifactId>javax.jms-api</artifactId>\n+            <version>2.0.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDQ2OTY1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMTo1OVrOGt5jUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTowMTo1OVrOGt5jUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4MjAzMg==", "bodyText": "version ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450782032", "createdAt": "2020-07-07T11:01:59Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/pom.xml", "diffHunk": "@@ -0,0 +1,187 @@\n+<!--\n+\n+    Copyright 2020 Smart Society Services B.V.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>osgp-secret-management</artifactId>\n+    <name>osgp-secret-management</name>\n+    <packaging>war</packaging>\n+    <description>Secret management module.</description>\n+\n+    <parent>\n+        <groupId>org.opensmartgridplatform</groupId>\n+        <artifactId>parent-platform</artifactId>\n+        <version>5.2.0-SNAPSHOT</version>\n+        <relativePath>../parent-platform/pom.xml</relativePath>\n+    </parent>\n+\n+    <properties>\n+        <java.version>1.8</java.version>\n+        <spring.boot.version>2.2.2.RELEASE</spring.boot.version>\n+        <jaxb.plugin.version>2.5.0</jaxb.plugin.version>\n+        <build.helper.maven.plugin.version>3.0.0</build.helper.maven.plugin.version>\n+        <apache.ws.xlmschema.version>2.0.1</apache.ws.xlmschema.version>\n+        <logback.spring.extensions.version>0.1.5</logback.spring.extensions.version>\n+        <wsdl4j.version>1.6.3</wsdl4j.version>\n+        <maven.failsafe.plugin.version>3.0.0-M4</maven.failsafe.plugin.version>\n+        <spring.boot.maven.plugin.version>2.2.2.RELEASE</spring.boot.maven.plugin.version>\n+        <failOnMissingWebXml>false</failOnMissingWebXml>\n+        <osgp-ws-secret-management-version>5.2.0-SNAPSHOT</osgp-ws-secret-management-version>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+                <version>${spring.boot.maven.plugin.version}</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>\n+                <version>${build.helper.maven.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <id>add-integration-test-source</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-source</goal>\n+                        </goals>\n+                        <configuration>\n+                            <sources>\n+                                <source>src/integration-test/java</source>\n+                            </sources>\n+                        </configuration>\n+                    </execution>\n+                    <execution>\n+                        <id>add-test-resource</id>\n+                        <phase>generate-test-sources</phase>\n+                        <goals>\n+                            <goal>add-test-resource</goal>\n+                        </goals>\n+                        <configuration>\n+                            <resources>\n+                                <resource>\n+                                    <directory>src/integration-test/resources</directory>\n+                                </resource>\n+                            </resources>\n+                        </configuration>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>${maven.failsafe.plugin.version}</version>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web</artifactId>\n+            <version>${spring.boot.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-web-services</artifactId>\n+            <version>${spring.boot.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-data-jpa</artifactId>\n+            <version>${spring.boot.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.opensmartgridplatform</groupId>\n+            <artifactId>shared</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.opensmartgridplatform</groupId>\n+            <artifactId>osgp-ws-secret-management</artifactId>\n+            <version>${osgp-ws-secret-management-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>wsdl4j</groupId>\n+            <artifactId>wsdl4j</artifactId>\n+            <version>${wsdl4j.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.apache.ws.xmlschema</groupId>\n+            <artifactId>xmlschema-core</artifactId>\n+            <version>${apache.ws.xlmschema.version}</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>javax.jms</groupId>\n+            <artifactId>javax.jms-api</artifactId>\n+            <version>2.0.1</version>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework.boot</groupId>\n+            <artifactId>spring-boot-starter-test</artifactId>\n+            <version>${spring.boot.version}</version>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>org.junit.vintage</groupId>\n+                    <artifactId>junit-vintage-engine</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.ws</groupId>\n+            <artifactId>spring-ws-core</artifactId>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.postgresql</groupId>\n+            <artifactId>postgresql</artifactId>\n+            <scope>runtime</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>1.4.200</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUwMjczOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxMzowMFrOGt537A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxMzowMFrOGt537A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NzMwOA==", "bodyText": "this seems confusing. Can these file ever be null?\nin case any of the files is null, the Provider does not work, correct ? RSA does not work unless both keys are in order.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450787308", "createdAt": "2020-07-07T11:13:00Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUwNDM3OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxMzozNlrOGt548g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxMzozNlrOGt548g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4NzU3MA==", "bodyText": "these can be final I think?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450787570", "createdAt": "2020-07-07T11:13:36Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUxMjA3OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNjowN1rOGt59sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNjowN1rOGt59sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4ODc4Nw==", "bodyText": "Why check on null if this would never be the case? consider rewriting the constructor.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450788787", "createdAt": "2020-07-07T11:16:07Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {\n+            KeyFactory keyFactory = KeyFactory.getInstance(ALG);\n+\n+            if (privateKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+                PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+                privateKey = keyFactory.generatePrivate(privateKeySpec);\n+                super.setKeyFile(privateKeyStoreFile);\n+            }\n+            if (publicKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+                publicKey = keyFactory.generatePublic(publicKeySpec);\n+            }\n+        } catch (Exception e) {\n+            throw new EncrypterException(\"Something went wrong during construction of \"\n+                    + \"RsaEncryptionProvider\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() throws javax.crypto.NoSuchPaddingException, NoSuchAlgorithmException {\n+        return Cipher.getInstance(ALGORITHM);\n+    }\n+\n+    protected Key getSecretEncryptionKey(String key, int cipherMode) {\n+        if (cipherMode == Cipher.ENCRYPT_MODE) {\n+            if (publicKey == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUxNTI3OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNzoxMVrOGt5_wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNzoxMVrOGt5_wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTMxMg==", "bodyText": "I would rewrite this into several methods:", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450789312", "createdAt": "2020-07-07T11:17:11Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";\n+    public static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public RsaEncryptionProvider(File privateKeyStoreFile, File publicKeyStoreFile) {\n+        try {\n+            KeyFactory keyFactory = KeyFactory.getInstance(ALG);\n+\n+            if (privateKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+                PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+                privateKey = keyFactory.generatePrivate(privateKeySpec);\n+                super.setKeyFile(privateKeyStoreFile);\n+            }\n+            if (publicKeyStoreFile != null) {\n+                byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+                X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+                publicKey = keyFactory.generatePublic(publicKeySpec);\n+            }\n+        } catch (Exception e) {\n+            throw new EncrypterException(\"Something went wrong during construction of \"\n+                    + \"RsaEncryptionProvider\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() throws javax.crypto.NoSuchPaddingException, NoSuchAlgorithmException {\n+        return Cipher.getInstance(ALGORITHM);\n+    }\n+\n+    protected Key getSecretEncryptionKey(String key, int cipherMode) {\n+        if (cipherMode == Cipher.ENCRYPT_MODE) {\n+            if (publicKey == null) {\n+                throw new EncrypterException(\"Cannot RSA encrypt because no public key is defined.\");\n+            }\n+            return publicKey;\n+        } else if (cipherMode == Cipher.DECRYPT_MODE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUxNzIwOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNzo1MFrOGt6A7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxNzo1MFrOGt6A7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc4OTYxMg==", "bodyText": "are these constants used on other classes? If not, make private", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450789612", "createdAt": "2020-07-07T11:17:50Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/RsaEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+\n+import javax.crypto.Cipher;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class RsaEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String ALG = \"RSA\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUyMDEzOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxODo0M1rOGt6Cpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxODo0M1rOGt6Cpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MDA1NA==", "bodyText": "why not create a SecretKey class with a constuctor and use Lombok ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450790054", "createdAt": "2020-07-07T11:18:43Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";\n+    public static final String ALG = \"AES\";\n+    public static final String ALGORITHM = \"AES/CBC/PKCS5PADDING\";\n+    public static final String PROVIDER = \"SunJCE\";\n+    public static final String FORMAT = \"RAW\";\n+    private static final byte[] IV = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 };\n+\n+    private byte[] key;\n+\n+    protected Cipher getCipher() throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException {\n+        return Cipher.getInstance(ALGORITHM, PROVIDER);\n+    }\n+\n+    public JreEncryptionProvider(File keyStoreFile) {\n+        try {\n+            super.setKeyFile(keyStoreFile);\n+            this.key = Files.readAllBytes(Paths.get(keyStoreFile.getAbsolutePath()));\n+        } catch (IOException e) {\n+            throw new EncrypterException(\"Could not read keystore\");\n+        }\n+    }\n+\n+    protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n+\n+        if (!keyReference.equals(DEFAULT_SINGLE_KEY_REFERENCE)) {\n+            throw new EncrypterException(\"Only keyReference '1' is valid in this implementation.\");\n+        }\n+\n+        return new SecretKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUyMjgyOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxOTozMlrOGt6ESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToxOTozMlrOGt6ESg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MDQ3NA==", "bodyText": "I think all these values can be private", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450790474", "createdAt": "2020-07-07T11:19:32Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class JreEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    public static final String DEFAULT_SINGLE_KEY_REFERENCE = \"1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUzMTQxOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMjoyNlrOGt6JpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMjoyNlrOGt6JpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MTg0NA==", "bodyText": "I would consider creating a super constructor with the Key File instead of a setter, to make the values immutable", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450791844", "createdAt": "2020-07-07T11:22:26Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.security.spec.AlgorithmParameterSpec;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+import javax.crypto.spec.IvParameterSpec;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+public class HsmEncryptionProvider extends AbstractEncryptionProvider implements EncryptionProvider {\n+\n+    private static final String ALGORITHM = \"AES/CBC/NoPadding\";\n+    private static final String PROVIDER = \"nCipherKM\";\n+    private static final String TYPE = \"ncipher.sworld\";\n+    private static final byte[] IV = new byte[16];\n+\n+    private KeyStore keyStore;\n+\n+    public HsmEncryptionProvider(File keyStoreFile) {\n+        try {\n+            super.setKeyFile(keyStoreFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUzNDM0OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMzoyOFrOGt6LeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMzoyOFrOGt6LeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MjMxMw==", "bodyText": "this else could be removed, just return false.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450792313", "createdAt": "2020-07-07T11:23:28Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+\n+        if (secret.getType() != this.getType()) {\n+            throw new EncrypterException(\n+                    \"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \"\n+                            + secret.getType().name());\n+        }\n+\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.DECRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n+\n+            if (this.checkNullBytesPrepended(decryptedData)) {\n+                return new Secret(Arrays.copyOfRange(decryptedData, BLOCK_SIZE, decryptedData.length));\n+            } else {\n+                return new Secret(decryptedData);\n+            }\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not decrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    private boolean checkNullBytesPrepended(final byte[] bytes) {\n+        if (bytes.length > BLOCK_SIZE) {\n+            for (short s = 0; s < BLOCK_SIZE; s++) {\n+                if (bytes[s] != 0) {\n+                    return false;\n+                }\n+            }\n+            return true;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUzNTg4OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMzo1N1rOGt6MaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyMzo1N1rOGt6MaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5MjU1Mg==", "bodyText": "remove?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450792552", "createdAt": "2020-07-07T11:23:57Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |\n+            // InvalidAlgorithmParameterException |\n+            //NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException\n+            throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n+        }\n+    }\n+\n+    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+\n+        if (secret.getType() != this.getType()) {\n+            throw new EncrypterException(\n+                    \"EncryptionProvider for type \" + this.getType().name() + \" cannot decrypt secrets of type \"\n+                            + secret.getType().name());\n+        }\n+\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.DECRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.DECRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            final byte[] decryptedData = cipher.doFinal(secret.getSecret());\n+\n+            if (this.checkNullBytesPrepended(decryptedData)) {\n+                return new Secret(Arrays.copyOfRange(decryptedData, BLOCK_SIZE, decryptedData.length));\n+            } else {\n+                return new Secret(decryptedData);\n+            }\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDUzODU1OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNDo0OFrOGt6OCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNDo0OFrOGt6OCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5Mjk3MA==", "bodyText": "remove ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450792970", "createdAt": "2020-07-07T11:24:48Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security.providers;\n+\n+import java.io.File;\n+import java.security.Key;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.NoSuchProviderException;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+\n+public abstract class AbstractEncryptionProvider {\n+\n+    private static final int BLOCK_SIZE=16;\n+\n+    protected File keyFile;\n+\n+    public abstract EncryptionProviderType getType();\n+\n+    protected abstract Cipher getCipher()\n+            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException;\n+\n+    protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n+\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+\n+    public void setKeyFile(File keyFile) {\n+        this.keyFile = keyFile;\n+    }\n+\n+    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n+                    this.getAlgorithmParameterSpec());\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n+        } catch (Exception e) {\n+            //InvalidKeyException | IllegalBlockSizeException | BadPaddingException |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU0NjMzOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNzoxNVrOGt6Ssw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyNzoxNVrOGt6Ssw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NDE2Mw==", "bodyText": "why not use the Secret class here? it already has the byte array", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450794163", "createdAt": "2020-07-07T11:27:15Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptedSecret.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+/**\n+ * Secret class to store any binary encrypted secret. The secret can be anything.\n+ * A secret contains the type of encryption provider that was used to encrypt it.\n+ * There is no encoding/decoding.\n+ */\n+public class EncryptedSecret {\n+    private final byte[] secret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU0OTc1OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyODoyOFrOGt6U2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyODoyOFrOGt6U2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NDcxMg==", "bodyText": "I think this line and the next can be combined into one.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450794712", "createdAt": "2020-07-07T11:28:28Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+@Component\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers;\n+\n+    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n+        this.providers = Arrays.asList(encryptionProviders);\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(\n+            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n+        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n+                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n+\n+        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);\n+    }\n+\n+    @Override\n+    public Secret decrypt(final EncryptedSecret secret, final String keyReference) {\n+        final EncryptionProviderType encType = secret.getType();\n+        final Optional<EncryptionProvider> oep = this.providers.stream().filter(ep -> ep.getType().equals(encType)).findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU1MTUwOnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyOTowNVrOGt6WBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyOTowNVrOGt6WBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NTAxMg==", "bodyText": "could be one liner", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450795012", "createdAt": "2020-07-07T11:29:05Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+@Component\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers;\n+\n+    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {\n+        this.providers = Arrays.asList(encryptionProviders);\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(\n+            final EncryptionProviderType encryptionProviderType, final Secret secret, final String keyReference) {\n+        final Optional<EncryptionProvider> oep = this.providers.stream().filter(\n+                ep -> ep.getType().equals(encryptionProviderType)).findFirst();\n+\n+        return oep.orElseThrow(()->new EncrypterException(\"Could not find a provider\")).encrypt(secret, keyReference);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU1MzI4OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyOTo0MVrOGt6XLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMToyOTo0MVrOGt6XLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NTMxMQ==", "bodyText": "why is this an array parameter and not a List ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450795311", "createdAt": "2020-07-07T11:29:41Z", "author": {"login": "coendamen"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * This class is used to encrypt/decrypt typed secrets by either the HardwareSecurityModule or by the JRE\n+ */\n+@Component\n+public class DefaultEncryptionDelegate implements EncryptionDelegate {\n+\n+    private final List<EncryptionProvider> providers;\n+\n+    public DefaultEncryptionDelegate(final EncryptionProvider[] encryptionProviders) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU1OTUzOnYy", "diffSide": "RIGHT", "path": "osgp/shared/osgp-ws-secret-management/src/main/resources/wsdl/SecretManagement.wsdl", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozMTozNVrOGt6a0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozMTozNVrOGt6a0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NjI0Mw==", "bodyText": "I would consider removing the year and month from the schema. this doesn't add anything and will only cause confusion.\nUnless of course we want to be backwards compatible with other client, but I doubt that will happen soon", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450796243", "createdAt": "2020-07-07T11:31:35Z", "author": {"login": "coendamen"}, "path": "osgp/shared/osgp-ws-secret-management/src/main/resources/wsdl/SecretManagement.wsdl", "diffHunk": "@@ -0,0 +1,66 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:sch=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\" targetNamespace=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement/2020/05\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU2NTc5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/resources/osgp-adapter-protocol-dlms.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozMzo0NVrOGt6e1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozMzo0NVrOGt6e1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NzI2OQ==", "bodyText": "remove?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450797269", "createdAt": "2020-07-07T11:33:45Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/resources/osgp-adapter-protocol-dlms.properties", "diffHunk": "@@ -109,7 +120,7 @@ schedule.retry.dlms.backoff.multiplier=2\n schedule.retry.dlms.backoff.exponential=true\n \n # device keys security\n-encryption.key.path=/etc/osp/smartmetering/keys/platform/secret.aes\n+#encryption.key.path=/etc/osp/smartmetering/keys/platform/secret.aes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU2ODQ0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNDozM1rOGt6gbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNDozM1rOGt6gbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5NzY3Ng==", "bodyText": "I don't think you need this qualifier, there is only one bean named SecretManagementService", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450797676", "createdAt": "2020-07-07T11:34:33Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java", "diffHunk": "@@ -28,12 +28,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n \n public class Lls1Connector extends SecureDlmsConnector {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(Lls1Connector.class);\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU3MDg2OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNToxNlrOGt6h2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNToxNlrOGt6h2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5ODA0Mw==", "bodyText": "move this autowired to constructor injection.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450798043", "createdAt": "2020-07-07T11:35:16Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Lls1Connector.java", "diffHunk": "@@ -28,12 +28,14 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n \n public class Lls1Connector extends SecureDlmsConnector {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(Lls1Connector.class);\n \n     @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU3NTkzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNjo0OVrOGt6k3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNjo0OVrOGt6k3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5ODgxMw==", "bodyText": "I don;t understand why the class is SecurityKeyService, why not inject the SecretManagementService ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450798813", "createdAt": "2020-07-07T11:36:49Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java", "diffHunk": "@@ -44,6 +45,7 @@\n     private final RecoverKeyProcessInitiator recoverKeyProcessInitiator;\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU3ODE1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNzozMVrOGt6mPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozNzozMVrOGt6mPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5OTE2NA==", "bodyText": "change to constructor injection", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450799164", "createdAt": "2020-07-07T11:37:31Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -57,6 +58,7 @@\n     }\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU4MDczOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozODoyMVrOGt6nsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTozODoyMVrOGt6nsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc5OTUzOQ==", "bodyText": "@slf4j", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450799539", "createdAt": "2020-07-07T11:38:21Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/wsclient/SecretManagementClient.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient;\n+\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+import org.springframework.ws.client.core.WebServiceTemplate;\n+\n+/**\n+ * SOAP Client for SecretManagement\n+ */\n+@Component\n+public class SecretManagementClient {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementClient.class);\n+\n+    private final WebServiceTemplate webServiceTemplate;\n+\n+    SecretManagementClient(WebServiceTemplate webServiceTemplate) {\n+        this.webServiceTemplate = webServiceTemplate;\n+    }\n+\n+    public GetSecretsResponse getSecretsRequest(GetSecretsRequest request) {\n+\n+        LOGGER.info(\"Calling SecretManagement.getSecretsRequest over SOAP for device {}\", request.getDeviceId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU4OTYwOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MDo0MlrOGt6suA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MDo0MlrOGt6suA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMDgyNA==", "bodyText": "dit kom meerdere keren voor. dit moet allemaal veranderen in SecretManagementService injection, die qualifier kan weg", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450800824", "createdAt": "2020-07-07T11:40:42Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "diffHunk": "@@ -39,6 +40,7 @@\n     private InstallationMapper installationMapper;\n \n     @Autowired\n+    @Qualifier(\"secretManagementService\")\n     private SecurityKeyService securityKeyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU5MjA0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MToyMFrOGt6uHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MToyMFrOGt6uHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTE4Mg==", "bodyText": "formatting not applied ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801182", "createdAt": "2020-07-07T11:41:20Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU5MjY1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MToyOVrOGt6ufQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MToyOVrOGt6ufQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTI3Nw==", "bodyText": "params kunnen final zijn", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801277", "createdAt": "2020-07-07T11:41:29Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU5MzA5OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MTozNVrOGt6usw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MTozNVrOGt6usw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTMzMQ==", "bodyText": "final ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801331", "createdAt": "2020-07-07T11:41:35Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU5NTE1OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MjowOVrOGt6v8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0MjowOVrOGt6v8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMTY0OA==", "bodyText": "dit hoeft niet, de naam is al goed. het is al secretManagementService", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450801648", "createdAt": "2020-07-07T11:42:09Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDU5OTg0OnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0Mzo0N1rOGt6y-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0Mzo0N1rOGt6y-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMjQyNg==", "bodyText": "use @slf4j", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450802426", "createdAt": "2020-07-07T11:43:47Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsMasterKey(String deviceIdentification) {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n+\n+        try {\n+            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification, SecretType.E_METER_AUTHENTICATION_KEY);\n+            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n+            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response, SecretType.E_METER_AUTHENTICATION_KEY);\n+\n+            return decryptSoapSecret(deviceIdentification,\n+                    optionalTypedSecret.orElseThrow(()->new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+        }\n+        catch(Exception e) {\n+            LOGGER.error(\"Error while retrieving authentication key\", e);\n+        }\n+        return new byte[0];\n+    }\n+\n+    @Override\n+    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n+\n+        try {\n+            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification, SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n+            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n+            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response, SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n+\n+            return decryptSoapSecret(deviceIdentification,\n+                    optionalTypedSecret.orElseThrow(()->new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+        }\n+        catch(Exception e) {\n+            LOGGER.error(\"Error while retrieving encryption key\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDYwNjMyOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0NTo0NFrOGt621w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0NTo0NFrOGt621w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMzQxNQ==", "bodyText": "dit is obscuur IMO, je gooit de optional met een elseThrow mee als parameter. Ik zou dit iets explicieter maken door een ifPresent oid te schrijven", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450803415", "createdAt": "2020-07-07T11:45:44Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,163 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.lang3.NotImplementedException;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service(value = \"secretManagementService\")\n+@Transactional\n+public class SecretManagementService implements SecurityKeyService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n+    private RsaEncryptionProvider rsaEncryptionProvider;\n+    private SecretManagementClient secretManagementClient;\n+\n+    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider, SecretManagementClient secretManagementClient)\n+    {\n+        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+        this.secretManagementClient = secretManagementClient;\n+    }\n+\n+    @Override\n+    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsMasterKey(String deviceIdentification) {\n+        throw new NotImplementedException();\n+    }\n+\n+    @Override\n+    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n+\n+        try {\n+            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification, SecretType.E_METER_AUTHENTICATION_KEY);\n+            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n+            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response, SecretType.E_METER_AUTHENTICATION_KEY);\n+\n+            return decryptSoapSecret(deviceIdentification,\n+                    optionalTypedSecret.orElseThrow(()->new IllegalStateException(\"Secret not found:\" + deviceIdentification)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDYxNzMzOnYy", "diffSide": "RIGHT", "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0OToxNFrOGt69pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0OToxNFrOGt69pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNTE1Nw==", "bodyText": "dit lijkt me niet goed. een snapshot versie opnemen in de properties file", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450805157", "createdAt": "2020-07-07T11:49:14Z", "author": {"login": "coendamen"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/pom.xml", "diffHunk": "@@ -27,6 +27,7 @@\n \n   <properties>\n     <display.version>${project.version}-${BUILD_TAG}</display.version>\n+    <osgp-ws-secret-management-version>5.2.0-SNAPSHOT</osgp-ws-secret-management-version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDYyMTkyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1MDo0NFrOGt7Aew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1MDo0NFrOGt7Aew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNTg4Mw==", "bodyText": "SOME_DEVICE zou constant kunnen zijn", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450805883", "createdAt": "2020-07-07T11:50:44Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SecretManagementServiceTest {\n+    SecretManagementService service;\n+\n+    @Mock\n+    EncryptionDelegate encryptionDelegate;\n+    @Mock\n+    DbEncryptedSecretRepository secretRepository;\n+    @Mock\n+    DbEncryptionKeyRepository keyRepository;\n+\n+    @BeforeEach\n+    public void setHsmEncryption() {\n+        this.service = new SecretManagementService(this.encryptionDelegate, EncryptionProviderType.HSM,\n+                this.secretRepository, this.keyRepository);\n+    }\n+\n+    @Test\n+    public void retrieveSecrets() throws Exception {\n+        //GIVEN\n+        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        final DbEncryptedSecret secret = new DbEncryptedSecret();\n+        secret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        secret.setEncryptionKeyReference(keyReference);\n+        final Secret decryptedSecret = new Secret(\"secret\".getBytes());\n+\n+        //WHEN\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n+        when(this.secretRepository.findById(any())).thenReturn(Optional.of(secret));\n+        when(this.encryptionDelegate.decrypt(any(), any())).thenReturn(decryptedSecret);\n+        final List<TypedSecret> typedSecrets = this.service.retrieveSecrets(\"SOME_DEVICE\",\n+                Arrays.asList(SecretType.E_METER_MASTER_KEY));\n+\n+        //THEN\n+        assertThat(typedSecrets).isNotNull();\n+        assertThat(typedSecrets.size()).isEqualTo(1);\n+        final TypedSecret typedSecret = typedSecrets.get(0);\n+        assertThat(typedSecret.getSecret()).isEqualTo(HexUtils.toHexString(\"secret\".getBytes()));\n+        assertThat(typedSecret.getSecretType()).isEqualTo(SecretType.E_METER_MASTER_KEY);\n+    }\n+\n+    @Test\n+    public void retrieveSecrets_decryptionError() {\n+        //GIVEN\n+        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        final DbEncryptedSecret secret = new DbEncryptedSecret();\n+        secret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        secret.setEncryptionKeyReference(keyReference);\n+\n+        //WHEN\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n+        when(this.secretRepository.findById(1L)).thenReturn(Optional.of(secret));\n+        when(this.encryptionDelegate.decrypt(any(), any())).thenThrow(new RuntimeException(\"Decryption error\"));\n+\n+        //THEN\n+        assertThatIllegalStateException().isThrownBy(\n+                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+    }\n+\n+    @Test\n+    public void retrieveSecrets_secretWithoutKey() {\n+        final DbEncryptedSecret secret = new DbEncryptedSecret();\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n+        when(this.secretRepository.findById(1L)).thenReturn(Optional.of(secret));\n+        assertThatIllegalStateException().isThrownBy(\n+                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+    }\n+\n+    @Test\n+    public void retrieveSecrets_noSecrets() {\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n+        assertThatIllegalStateException().isThrownBy(\n+                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+    }\n+\n+    @Test\n+    public void storeSecrets() throws Exception {\n+        //GIVEN\n+        final TypedSecret typedSecret = new TypedSecret();\n+        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        typedSecret.setSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n+        final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        keyReference.setEncryptionProviderType(EncryptionProviderType.JRE);\n+        keyReference.setReference(\"keyReferenceString\");\n+        final EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, \"$3cr3t\".getBytes());\n+        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+\n+        //WHEN\n+        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n+        when(this.keyRepository.findByTypeAndValid(any(), any(), any())).thenReturn(\n+                new PageImpl<>(Arrays.asList(keyReference)));\n+        when(this.encryptionDelegate.encrypt(any(), any(), anyString())).thenReturn(encryptedSecret);\n+        this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret));\n+        //THEN\n+        final ArgumentCaptor<DbEncryptedSecret> secretArgumentCaptor = ArgumentCaptor.forClass(DbEncryptedSecret.class);\n+        verify(this.secretRepository).save(secretArgumentCaptor.capture());\n+        final DbEncryptedSecret savedSecret = secretArgumentCaptor.getValue();\n+        assertThat(savedSecret).isNotNull();\n+        assertThat(savedSecret.getDeviceIdentification()).isEqualTo(\"SOME_DEVICE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDYyNjgzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1MjowNlrOGt7DgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1MjowNlrOGt7DgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNjY1Nw==", "bodyText": "minor: could all be private", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450806657", "createdAt": "2020-07-07T11:52:06Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n+import static org.assertj.core.api.Assertions.assertThatIllegalStateException;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SecretManagementServiceTest {\n+    SecretManagementService service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDYyOTAxOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/webapp/WEB-INF/context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1Mjo1NFrOGt7FCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1Mjo1NFrOGt7FCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNzA0OQ==", "bodyText": "we removed all context.xml files from our WAR projects. I think this needs to removed and added externally", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450807049", "createdAt": "2020-07-07T11:52:54Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/webapp/WEB-INF/context.xml", "diffHunk": "@@ -0,0 +1,41 @@\n+<?xml version='1.0' encoding='utf-8'?>\n+<!--", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY0NTUzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1ODowMVrOGt7PGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1ODowMVrOGt7PGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwOTYyNQ==", "bodyText": "what could go wrong here?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450809625", "createdAt": "2020-07-07T11:58:01Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY0NzQzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1ODozNVrOGt7QLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1ODozNVrOGt7QLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwOTkwMg==", "bodyText": "could be rewritten with Optional?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450809902", "createdAt": "2020-07-07T11:58:35Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY1MDI1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1OTozM1rOGt7R-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo1OTozM1rOGt7R-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMDM2Mw==", "bodyText": "this seems strange, why do a null check here?\nconsider doing the null check in the caller, that is much clearer.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450810363", "createdAt": "2020-07-07T11:59:33Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {\n+            throw new NoSuchElementException(\"No secret found with a valid key\");\n+        }\n+        return this.getTypedSecret(this.secretRepository.findById(secretId).get());\n+    }\n+\n+    private TypedSecret getTypedSecret(final DbEncryptedSecret dbEncryptedSecret) {\n+        if (dbEncryptedSecret != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY1NTE5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowMDo1M1rOGt7U7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowMDo1M1rOGt7U7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMTExNg==", "bodyText": "and another null check?\nconsider validating the DbEncryptedSecret  first before calling this method", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450811116", "createdAt": "2020-07-07T12:00:53Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {\n+            throw new NoSuchElementException(\"No secret found with a valid key\");\n+        }\n+        return this.getTypedSecret(this.secretRepository.findById(secretId).get());\n+    }\n+\n+    private TypedSecret getTypedSecret(final DbEncryptedSecret dbEncryptedSecret) {\n+        if (dbEncryptedSecret != null) {\n+            final DbEncryptionKeyReference keyReference = dbEncryptedSecret.getEncryptionKeyReference();\n+            if (keyReference == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY2NDc5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowMzozN1rOGt7a0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowMzozN1rOGt7a0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMjYyNw==", "bodyText": "I see many IllegalStateExceptions, although it is easy/handy to throw just a RuntimeException I would suggest to make a proper Checked Exception to make it more explicit where it can go wrong and improved exception handling.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450812627", "createdAt": "2020-07-07T12:03:37Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n+            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n+            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+            dbEncryptedSecret.setCreationTime(new Date());\n+            return dbEncryptedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n+        }\n+    }\n+\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes)\n+            throws Exception {\n+        try {\n+            //@formatter:off\n+            return secretTypes.stream()\n+                    .map(secretType -> this.retrieveSecret(deviceIdentification,secretType))\n+                    .collect(Collectors.toList());\n+            //@formatter:on\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\n+                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+        }\n+    }\n+\n+    @java.lang.SuppressWarnings(\"squid:S3655\")\n+    public TypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n+        final Date now = new Date();\n+        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n+                now);\n+        if (secretId == null) {\n+            throw new NoSuchElementException(\"No secret found with a valid key\");\n+        }\n+        return this.getTypedSecret(this.secretRepository.findById(secretId).get());\n+    }\n+\n+    private TypedSecret getTypedSecret(final DbEncryptedSecret dbEncryptedSecret) {\n+        if (dbEncryptedSecret != null) {\n+            final DbEncryptionKeyReference keyReference = dbEncryptedSecret.getEncryptionKeyReference();\n+            if (keyReference == null) {\n+                throw new IllegalStateException(\"Could not create encrypted secret: secret has no key reference\");\n+            }\n+            final byte[] secretBytes = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            final EncryptedSecret encryptedSecret = new EncryptedSecret(keyReference.getEncryptionProviderType(),\n+                    secretBytes);\n+            return this.createTypedSecret(dbEncryptedSecret, keyReference, encryptedSecret);\n+        } else {    //Should never happen because of stream mapping in retrieveSecrets()\n+            throw new IllegalStateException(\"Could not create typed secret for NULL secret\");\n+        }\n+    }\n+\n+    private TypedSecret createTypedSecret(final DbEncryptedSecret dbEncryptedSecret,\n+            final DbEncryptionKeyReference keyReference, final EncryptedSecret encryptedSecret) {\n+        try {\n+            final Secret decryptedSecret = this.encryptionDelegate.decrypt(encryptedSecret,\n+                    keyReference.getReference());\n+            final TypedSecret typedSecret = new TypedSecret();\n+            typedSecret.setSecret(HexUtils.toHexString(decryptedSecret.getSecret()));\n+            typedSecret.setSecretType(dbEncryptedSecret.getSecretType());\n+            return typedSecret;\n+        } catch (final Exception exc) {\n+            throw new IllegalStateException(\"Could not decrypt secret (id: \" + dbEncryptedSecret.getId() + \")\", exc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY3MzQ1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowNjoxMVrOGt7gIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowNjoxMVrOGt7gIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxMzk4Nw==", "bodyText": "I would rewrite this into a constructor to make data immutable.\nalso it is much less lines. just return new DbEncryptedSecret(value1, value2) etc", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450813987", "createdAt": "2020-07-07T12:06:11Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;\n+        }\n+    }\n+\n+    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final String secretString = typedSecret.getSecret();\n+        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n+        final Secret secret = new Secret(secretBytes);\n+        try {\n+            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n+                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n+            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY4MzM2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowOTozNVrOGt7meA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjowOTozNVrOGt7meA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNTYwOA==", "bodyText": "where is the NoSuchElementException exception thrown?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450815608", "createdAt": "2020-07-07T12:09:35Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY4NzU3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMDozNVrOGt7o3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMDozNVrOGt7o3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNjIyMA==", "bodyText": "I would rewrite this to make it clearer", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450816220", "createdAt": "2020-07-07T12:10:35Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired\n+    public SecretManagementService(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n+            final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n+            final DbEncryptionKeyRepository keyRepository) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+        this.encryptionProviderType = encryptionProviderType;\n+        this.secretRepository = secretRepository;\n+        this.keyRepository = keyRepository;\n+    }\n+\n+    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) throws Exception {\n+        //@formatter:off\n+        secrets.stream()\n+                .map(t -> this.validateSecret(deviceIdentification, t))\n+                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n+                .forEach(this.secretRepository::save);\n+        //@formatter:on\n+    }\n+\n+    private DbEncryptionKeyReference getKey() {\n+        final Date now = new Date();\n+        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n+                this.encryptionProviderType, Pageable.unpaged());\n+        if (keyRefsPage.getSize() > 1) {\n+            throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        }\n+        return keyRefsPage.stream().findFirst().orElseThrow(\n+                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+    }\n+\n+    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n+        if (secret.getSecret() == null) {\n+            throw new IllegalArgumentException(\"No secret string set\");\n+        } else if (secret.getSecretType() == null) {\n+            throw new IllegalArgumentException(\"No secret type set\");\n+        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n+                            secret.getSecretType().name()));\n+        }\n+        return secret;\n+    }\n+\n+    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n+        try {\n+            final TypedSecret current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n+            return current.getSecret().equals(secret.getSecret());\n+        } catch (final NoSuchElementException nsee) {\n+            //there is no current secret\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY5MjYwOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMTo1OFrOGt7r0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMTo1OFrOGt7r0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNjk3Nw==", "bodyText": "this annotation is not needed", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450816977", "createdAt": "2020-07-07T12:11:58Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+\n+package org.opensmartgridplatform.secretmanagement.application.services;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n+import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SecretManagementService {\n+    private final EncryptionDelegate encryptionDelegate;\n+    private final EncryptionProviderType encryptionProviderType;\n+    private final DbEncryptedSecretRepository secretRepository;\n+    private final DbEncryptionKeyRepository keyRepository;\n+\n+    @Autowired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDY5Nzg2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMzowN1rOGt7uug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxMzowN1rOGt7uug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxNzcyMg==", "bodyText": "possible NPE's here?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450817722", "createdAt": "2020-07-07T12:13:07Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+import javax.xml.namespace.QName;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TechnicalFault;\n+import org.springframework.ws.soap.SoapFault;\n+import org.springframework.ws.soap.SoapFaultDetail;\n+import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n+\n+public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n+\n+    private static final QName MESSAGE = new QName(\"Message\");\n+    private static final QName COMPONENT = new QName(\"Component\");\n+    private static final QName INNER_MESSAGE = new QName(\"InnerMessage\");\n+    private static final QName INNER_EXCEPTION = new QName(\"InnerException\");\n+\n+    @Override\n+    protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        if (ex instanceof TechnicalException) {\n+            TechnicalFault technicalFault = convert((TechnicalException) ex);\n+            SoapFaultDetail detail = fault.addFaultDetail();\n+            if (technicalFault.getMessage() != null) {\n+                detail.addFaultDetailElement(MESSAGE).addText(technicalFault.getMessage());\n+            }\n+            if (technicalFault.getComponent() != null) {\n+                detail.addFaultDetailElement(COMPONENT).addText(technicalFault.getComponent());\n+            }\n+            if (technicalFault.getInnerMessage() != null) {\n+                detail.addFaultDetailElement(INNER_MESSAGE).addText(technicalFault.getInnerMessage());\n+            }\n+            if (technicalFault.getInnerException() != null) {\n+                detail.addFaultDetailElement(INNER_EXCEPTION).addText(technicalFault.getInnerException());\n+            }\n+        }\n+    }\n+\n+    private TechnicalFault convert(final TechnicalException ex) {\n+        if (ex == null) {\n+            return null;\n+        }\n+        final TechnicalFault destination = new TechnicalFault();\n+        destination.setComponent(ex.getComponentType().name());\n+        destination.setMessage(ex.getMessage());\n+        if (ex.getCause() != null) {\n+            destination.setInnerException(ex.getCause().getClass().getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcwNjIyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNToxNVrOGt7zcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNToxNVrOGt7zcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxODkzMA==", "bodyText": "you could use Stream().map() here", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450818930", "createdAt": "2020-07-07T12:15:15Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcwODUyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNTo0NlrOGt70ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNTo0NlrOGt70ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgxOTI2Nw==", "bodyText": "could use Stream().map()", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450819267", "createdAt": "2020-07-07T12:15:46Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SoapEndpointDataTypeConverter.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import org.apache.tomcat.util.buf.HexUtils;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.opensmartgridplatform.shared.security.EncryptedSecret;\n+import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.Secret;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class SoapEndpointDataTypeConverter {\n+\n+    private static final String KEY_REFERENCE = \"1\"; //only one key in use\n+    private EncryptionDelegate encryptionDelegate;\n+\n+    public SoapEndpointDataTypeConverter(\n+            @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate) {\n+        this.encryptionDelegate = defaultEncryptionDelegate;\n+    }\n+\n+    public List<SecretType> convertToSecretTypes(SecretTypes soapSecretTypes) throws OsgpException {\n+\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.SecretType> soapSecretTypeList =\n+                soapSecretTypes.getSecretType();\n+        List<SecretType> secretTypeList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.SecretType soapSecretType :\n+                soapSecretTypeList) {\n+            SecretType secretType = convertToSecretType(soapSecretType);\n+            secretTypeList.add(secretType);\n+        }\n+\n+        return secretTypeList;\n+    }\n+\n+    public List<TypedSecret> convertToTypedSecrets(TypedSecrets soapTypedSecrets) throws OsgpException {\n+\n+        if (soapTypedSecrets == null) {\n+            throw new TechnicalException(\"Missing input: typed secrets\");\n+        }\n+\n+        List<org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret> soapTypedSecretsList\n+                = soapTypedSecrets.getTypedSecret();\n+        List<TypedSecret> typedSecretList = new ArrayList<>();\n+\n+        for (org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret soapTypedSecret :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcxMzM5OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNzoxNVrOGt734g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxNzoxNVrOGt734g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMDA2Ng==", "bodyText": "I would keep the endpoint as thin as possible and move away the \"secrets\"code to the service.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450820066", "createdAt": "2020-07-07T12:17:15Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.endpoints;\n+\n+import java.util.List;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n+import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.services.SecretManagementService;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.OsgpException;\n+import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n+import org.springframework.ws.server.endpoint.annotation.Endpoint;\n+import org.springframework.ws.server.endpoint.annotation.PayloadRoot;\n+import org.springframework.ws.server.endpoint.annotation.RequestPayload;\n+import org.springframework.ws.server.endpoint.annotation.ResponsePayload;\n+\n+@Endpoint\n+@Slf4j\n+public class SecretManagementEndpoint {\n+\n+    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n+            + \".org/schemas/security/secretmanagement/2020/05\";\n+\n+    private final SecretManagementService secretManagementService;\n+    private final SoapEndpointDataTypeConverter converter;\n+\n+    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n+            SoapEndpointDataTypeConverter converter) {\n+        this.secretManagementService = secretManagementService;\n+        this.converter = converter;\n+    }\n+\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n+    @ResponsePayload\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n+\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+\n+        log.trace(request.toString());\n+\n+        try {\n+            GetSecretsResponse response = new GetSecretsResponse();\n+\n+            List<SecretType> secretTypeList = converter.convertToSecretTypes(request.getSecretTypes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcyMDc2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxOTozMFrOGt78Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoxOTozMFrOGt78Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMTIxOA==", "bodyText": "why is this class prepended with Db (I understand why, but it is not standard to the rest of the app).\nConsider changing to EncryptionKeyReference, then you also do not need the name attribute of @table", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450821218", "createdAt": "2020-07-07T12:19:30Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptionKeyReference.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+\n+@Entity\n+@Table(name = \"encryption_key_reference\")\n+@Getter\n+@Setter\n+public class DbEncryptionKeyReference {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDcyNDUzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyMDozNVrOGt7-jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyMDozNVrOGt7-jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMTc3NA==", "bodyText": "remove the Db and name attributes from the annotation", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450821774", "createdAt": "2020-07-07T12:20:35Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/DbEncryptedSecret.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.domain;\n+\n+import java.util.Date;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.SequenceGenerator;\n+import javax.persistence.Table;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+\n+/**\n+ * Encrypted secret, which should not be mutated, because modifications should result in a new version (record in the\n+ * DB). Historic entries remain in the DB table and the current secret should be determined via a query on creationTime.\n+ */\n+@Entity\n+@Table(name = \"encrypted_secret\")\n+@Getter\n+@Setter\n+public class DbEncryptedSecret {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDczMzU0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyMzoyMVrOGt8EPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyMzoyMVrOGt8EPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyMzIyOA==", "bodyText": "is this possible? for RSA you need both the public key and the private key, They should never be able to be null.\nI would rewrite this to fail the deployment / startup when any of the keys is null. Or not create this Provider at all if the provider can be absent", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450823228", "createdAt": "2020-07-07T12:23:21Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.opensmartgridplatform.shared.security.DefaultEncryptionDelegate;\n+import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n+import org.opensmartgridplatform.shared.security.providers.EncryptionProvider;\n+import org.opensmartgridplatform.shared.security.providers.HsmEncryptionProvider;\n+import org.opensmartgridplatform.shared.security.providers.JreEncryptionProvider;\n+import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.io.Resource;\n+\n+@Configuration\n+public class SecurityConfig {\n+\n+    @Value(\"${soap.public.key.resource:#{null}}\")\n+    private Optional<Resource> soapPublicKeyResource;\n+\n+    @Value(\"${soap.private.key.resource:#{null}}\")\n+    private Optional<Resource> soapPrivateKeyResource;\n+\n+    @Value(\"${database.secret.resource}\")\n+    private Resource databaseSecretResource;\n+\n+    @Value(\"${hsm.keystore.resource:#{null}}\")\n+    private Optional<Resource> hsmKeystoreResource;\n+\n+    @Value(\"${encryption.provider.type}\")\n+    private String encryptionProviderTypeName;\n+\n+    @Bean(\"DefaultEncryptionDelegate\")\n+    public DefaultEncryptionDelegate getEncryptionDelegate() {\n+        return new DefaultEncryptionDelegate(getDefaultEncryptionProviders());\n+    }\n+\n+    private EncryptionProvider[] getDefaultEncryptionProviders() {\n+\n+        List<EncryptionProvider> encryptionProviderList = new ArrayList<>();\n+\n+        try {\n+            JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider(\n+                    this.databaseSecretResource.getFile());\n+\n+            encryptionProviderList.add(jreEncryptionProvider);\n+\n+            File privateKeyStoreFile = this.soapPrivateKeyResource.isPresent() ?\n+                    this.soapPrivateKeyResource.get().getFile() : null;\n+            File publicKeyStoreFile = this.soapPublicKeyResource.isPresent() ?\n+                    this.soapPublicKeyResource.get().getFile() : null;\n+\n+            RsaEncryptionProvider rsaEncryptionProvider = new RsaEncryptionProvider(privateKeyStoreFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc0ODM0OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecretManagementInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyNzo0M1rOGt8NlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyNzo0M1rOGt8NlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNTYyMQ==", "bodyText": "can you explain why is this class needed? either the logback.xml from the classpath is loaded or one is provided via the context.xml.\nIs there a reason we use JDNI here? is the log file neede by JMX ?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450825621", "createdAt": "2020-07-07T12:27:43Z", "author": {"login": "coendamen"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecretManagementInitializer.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import ch.qos.logback.core.joran.spi.JoranException;\n+import ch.qos.logback.ext.spring.LogbackConfigurer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.web.WebApplicationInitializer;\n+\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import javax.servlet.ServletContext;\n+import javax.servlet.ServletException;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+\n+public class SecretManagementInitializer implements WebApplicationInitializer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDc0ODQ1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyNzo0NVrOGt8Npw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMjoyNzo0NVrOGt8Npw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgyNTYzOQ==", "bodyText": "@propertysource annotations should be placed on Main.class. That class is annotated with @SpringBootApplication and will be loaded before @configuration annotated classes (which need those properties!)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/355#discussion_r450825639", "createdAt": "2020-07-07T12:27:45Z", "author": {"login": "jboon"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/ApplicationConfig.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.config;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n+\n+@Configuration\n+@PropertySource(\"classpath:osgp-secret-management.properties\")\n+@PropertySource(value = \"file:${osgp/Global/config}\", ignoreResourceNotFound = true)\n+@PropertySource(value = \"file:${osgp/SecretManagement/config}\", ignoreResourceNotFound = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aeca558df16a07cbffbd6a90129aac8fa0810c4"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3620, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}