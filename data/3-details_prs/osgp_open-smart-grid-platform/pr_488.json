{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1Mzk5NjEx", "number": 488, "title": "Slim 2597 implement secret management extra functionality", "bodyText": "", "createdAt": "2020-11-04T13:52:24Z", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488", "merged": true, "mergeCommit": {"oid": "c2cb29416c804798617904fa0be02db88079626a"}, "closed": true, "closedAt": "2021-01-19T13:27:02Z", "author": {"login": "jandik"}, "timelineItems": {"totalCount": 230, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnB0aTAH2gAyNTE1Mzk5NjExOjAzNTExMmZlZmNmYzgzNDJhNzlkNzUzMjVlNGZiNGI0ZmM2MzVmODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxqPGlAFqTU3MTE4MzU0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "035112fefcfc8342a79d75325e4fb4b4fc635f87", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/035112fefcfc8342a79d75325e4fb4b4fc635f87", "committedDate": "2020-12-17T11:27:26Z", "message": "SLIM-2597 test code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54415b355ab731a255e86daa3108ddd3d57d9d6c", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/54415b355ab731a255e86daa3108ddd3d57d9d6c", "committedDate": "2020-12-17T11:31:01Z", "message": "SLIM-2597 code clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77906104eaccc566de1c9e4091a0fb08e03bd2b7", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/77906104eaccc566de1c9e4091a0fb08e03bd2b7", "committedDate": "2020-12-17T13:14:36Z", "message": "Undo test tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93739d0cd252e9d56a4fcbc2908b2c457ac67845", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/93739d0cd252e9d56a4fcbc2908b2c457ac67845", "committedDate": "2020-12-17T14:42:37Z", "message": "SLIM-2587 fix broken test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3072088aedad42009113269a9509862cf39cecc", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d3072088aedad42009113269a9509862cf39cecc", "committedDate": "2020-12-17T15:22:02Z", "message": "SLIM-2587 input keys improved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "735c42a57a48983e5d621e508c18943b0246f71c", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/735c42a57a48983e5d621e508c18943b0246f71c", "committedDate": "2020-12-17T15:22:51Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4857ba651380eb139f48391b0876d4fe45d56b9a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4857ba651380eb139f48391b0876d4fe45d56b9a", "committedDate": "2020-12-18T09:52:27Z", "message": "SLIM-2597 added TODO wrt security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b4e7b18f798a744a972a22fd69b71acf8c678e", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/83b4e7b18f798a744a972a22fd69b71acf8c678e", "committedDate": "2020-12-18T09:53:13Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e19c718bf3a033a39eabdefa238082c2d781870a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e19c718bf3a033a39eabdefa238082c2d781870a", "committedDate": "2020-12-19T13:34:54Z", "message": "SLIM-2587 added logging to analyse failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb87ab899d5c1ec57832d289da05b64c8b901458", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bb87ab899d5c1ec57832d289da05b64c8b901458", "committedDate": "2020-12-19T13:35:51Z", "message": "SLIM-2587 added TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "630e03d00a3c9ba7677ac7da3885b00c701d4763", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/630e03d00a3c9ba7677ac7da3885b00c701d4763", "committedDate": "2020-12-19T16:15:16Z", "message": "SLIM-2587 added logging & TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc98c38b0abff8d26a35d709b1d419cbadb5e60", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7bc98c38b0abff8d26a35d709b1d419cbadb5e60", "committedDate": "2021-01-04T18:03:35Z", "message": "SLIM-2587 disabled failing tests; unknown how they should work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99de4328b87ddc101ed14ca9cd2e3c925f904d74", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/99de4328b87ddc101ed14ca9cd2e3c925f904d74", "committedDate": "2021-01-05T07:27:48Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd5ad6ed3167fdb988b6a49db8c56aa1cde92861", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/cd5ad6ed3167fdb988b6a49db8c56aa1cde92861", "committedDate": "2021-01-05T15:28:06Z", "message": "Run firmware tests only"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d712696f0f74a243edbad2942620bcca2372cd25", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d712696f0f74a243edbad2942620bcca2372cd25", "committedDate": "2021-01-07T07:59:48Z", "message": "Remove test tag and enable firmware tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "189c1b50ffd41bcec7a8ab4752a5bca8b4e2594d", "author": {"user": {"login": "jboon", "name": null}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/189c1b50ffd41bcec7a8ab4752a5bca8b4e2594d", "committedDate": "2021-01-07T11:19:34Z", "message": "Fixed retry of update firmware file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490b36668dd70e129bc187bdf1b45a5dcd94ac53", "author": {"user": {"login": "jboon", "name": null}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/490b36668dd70e129bc187bdf1b45a5dcd94ac53", "committedDate": "2021-01-07T11:29:40Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82675e5d4f21cb61f4cf92e6b31445595c424a73", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/82675e5d4f21cb61f4cf92e6b31445595c424a73", "committedDate": "2021-01-07T14:44:58Z", "message": "Fix asserting fault message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9949e261418959bfc6a3635533e00fca3f04ccc8", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9949e261418959bfc6a3635533e00fca3f04ccc8", "committedDate": "2021-01-14T09:37:02Z", "message": "SLIM-2597 changes resulting from PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59382be537c9b4601ef9f14d2e8a750db1e5332", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c59382be537c9b4601ef9f14d2e8a750db1e5332", "committedDate": "2021-01-14T09:43:09Z", "message": "Revert \"SLIM-2587 fix cucumber tests; changed exception handling\"\n\nThis reverts commit 6fc837b9"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad102dc23f1887d7e8309251500ff3e4ce8b28f", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2ad102dc23f1887d7e8309251500ff3e4ce8b28f", "committedDate": "2021-01-14T11:16:53Z", "message": "SLIM-2597 changes resulting from PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e260d934aeddc2fb082d9418a2ffd1b51aa9e993", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e260d934aeddc2fb082d9418a2ffd1b51aa9e993", "committedDate": "2021-01-14T11:17:34Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13", "committedDate": "2021-01-15T06:25:32Z", "message": "Merge branch 'development' into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5MDg5NTkw", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-569089590", "createdAt": "2021-01-15T09:22:19Z", "commit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQwOToyMjoxOVrOIUQZlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxNjoxODo0OFrOIUi4jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODExMTEyNw==", "bodyText": "Why are these constants commented out?\nIf they are not needed anymore, they should just be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558111127", "createdAt": "2021-01-15T09:22:19Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/PlatformSmartmeteringKeys.java", "diffHunk": "@@ -76,12 +76,12 @@\n \n     // Default keys for security_key\n     public static final String DLMS_DEVICE_ID = \"DlmsDeviceId\";\n-    public static final String SECURITY_KEY_A = \"SecurityKeyAuthentication\";\n+    /*public static final String SECURITY_KEY_A = \"SecurityKeyAuthentication\";\n     public static final String SECURITY_KEY_E = \"SecurityKeyEncryption\";\n     public static final String SECURITY_KEY_M = \"SecurityKeyMaster\";\n     public static final String SECURITY_TYPE_A = \"SecurityKeyTypeAuthentication\";\n     public static final String SECURITY_TYPE_E = \"SecurityKeyTypeEncryption\";\n-    public static final String SECURITY_TYPE_M = \"SecurityKeyTypeMaster\";\n+    public static final String SECURITY_TYPE_M = \"SecurityKeyTypeMaster\";*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE4MDk2Mw==", "bodyText": "Copyright for new files should no longer mention Smart Society Services B.V. (use Alliander N.V. instead).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558180963", "createdAt": "2021-01-15T10:07:16Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/config/SecretManagementPersistenceConfig.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5MjU5NA==", "bodyText": "If there is no longer any use for these commented lines, they should be removed,", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558192594", "createdAt": "2021-01-15T10:15:35Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -89,6 +112,53 @@\n     @Autowired\n     private DeviceFirmwareModuleSteps deviceFirmwareModuleSteps;\n \n+    @Autowired\n+    private DbEncryptedSecretRepository encryptedSecretRepository;\n+\n+    @Autowired\n+    private DbEncryptionKeyRepository encryptionKeyRepository;\n+\n+    /*private final SecretBuilder authenticationSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_AUTHENTICATION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB);\n+    private final SecretBuilder encryptionSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_ENCRYPTION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB);\n+    private final SecretBuilder masterSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_MASTER).setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB);\n+    private final SecretBuilder passwordBuilder = new SecretBuilder().setSecurityKeyType(SecurityKeyType.PASSWORD)\n+                                                                     .setKey(PlatformSmartmeteringDefaults.PASSWORD);\n+    private final SecretBuilder mbusEncryptionSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.G_METER_ENCRYPTION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION);\n+    private final SecretBuilder mbusMasterSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.G_METER_MASTER)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER);*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5NjIyOQ==", "bodyText": "Missing a final modifier according to the coding conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558196229", "createdAt": "2021-01-15T10:18:08Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -378,13 +447,18 @@ private DlmsDevice findExistingDlmsDevice(final String deviceIdentification) {\n         return dlmsDevice;\n     }\n \n-    private SecurityKey findExistingSecurityKey(final DlmsDevice dlmsDevice, final SecurityKeyType keyType,\n+    private DbEncryptedSecret findExistingSecurityKey(final DlmsDevice dlmsDevice, final SecretType secretType,\n             final String keyDescription) {\n-        final SecurityKey securityKey = dlmsDevice.getValidSecurityKey(keyType);\n-        assertThat(securityKey)\n+        List<DbEncryptedSecret> validSecrets = this.encryptedSecretRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 318}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5NjYxOQ==", "bodyText": "Missing a final modifier according to the coding conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558196619", "createdAt": "2021-01-15T10:18:23Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -378,13 +447,18 @@ private DlmsDevice findExistingDlmsDevice(final String deviceIdentification) {\n         return dlmsDevice;\n     }\n \n-    private SecurityKey findExistingSecurityKey(final DlmsDevice dlmsDevice, final SecurityKeyType keyType,\n+    private DbEncryptedSecret findExistingSecurityKey(final DlmsDevice dlmsDevice, final SecretType secretType,\n             final String keyDescription) {\n-        final SecurityKey securityKey = dlmsDevice.getValidSecurityKey(keyType);\n-        assertThat(securityKey)\n+        List<DbEncryptedSecret> validSecrets = this.encryptedSecretRepository\n+                .findSecrets(dlmsDevice.getDeviceIdentification(), secretType, SecretStatus.ACTIVE);\n+        assertThat(validSecrets.size()).isEqualTo(1)\n+                                       .as(\"Device %s should have 1 active secret of type %s, but found %s\",\n+                                               dlmsDevice.getDeviceIdentification(), secretType, validSecrets.size());\n+        DbEncryptedSecret secret = validSecrets.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODE5NzQ4Nw==", "bodyText": "Missing a final modifier according to the coding conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558197487", "createdAt": "2021-01-15T10:19:00Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,56 +520,80 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(final DlmsDevice dlmsDevice,\n+            final Map<String, String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n+        final List<SecretBuilder> secretBuilders = new ArrayList<>();\n         if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n                 .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+            secretBuilders.add(this.getAppropriateSecretBuilder(PlatformSmartmeteringKeys.PASSWORD, inputSettings));\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.getAppropriateSecretBuilder(MBUS_DEFAULT_KEY, inputSettings));\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n-            if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+            if (inputSettings.containsKey(MBUS_USER_KEY)) {\n+                secretBuilders.add(this.getAppropriateSecretBuilder(MBUS_USER_KEY, inputSettings));\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n+            secretBuilders.add(this\n+                    .getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_ENCRYPTIONKEY, inputSettings));\n+            secretBuilders.add(this\n+                    .getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_MASTERKEY, inputSettings));\n+            secretBuilders.add(this.getAppropriateSecretBuilder(PlatformSmartmeteringKeys.KEY_DEVICE_AUTHENTICATIONKEY,\n+                    inputSettings));\n         }\n+        final DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository\n+                .findByTypeAndValid(EncryptionProviderType.JRE, new Date()).iterator().next();\n+        secretBuilders.stream()\n+                      .filter(Objects::nonNull)\n+                      .map(SecretBuilder::build)\n+                      .map(key -> this.setSecretDefaultProperties(dlmsDevice.getDeviceIdentification(), encryptionKeyRef, key))\n+                      .forEach(this.encryptedSecretRepository::save);\n+    }\n \n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n+    private SecretBuilder getDefaultSecretBuilder(SecurityKeyType keyType) {\n+        return this.defaultSecretBuilders.stream().filter(sb -> sb.getSecurityKeyType().equals(keyType)).findFirst()\n+                                         .orElseThrow(() -> new IllegalArgumentException(\n+                                                 String.format(\"Unknown secret builder requested for type %s\",\n+                                                         keyType)));\n+    }\n \n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+    private SecretBuilder getAppropriateSecretBuilder(final String keyTypeInputName,\n+            final Map<String, String> inputSettings) {\n+        SecurityKeyType keyType = this.securityKeyTypesByInputName.get(keyTypeInputName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 403}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIwMjY2NQ==", "bodyText": "Use new HashMap<>() instead of a raw type HashMap.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558202665", "createdAt": "2021-01-15T10:23:01Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -89,6 +112,53 @@\n     @Autowired\n     private DeviceFirmwareModuleSteps deviceFirmwareModuleSteps;\n \n+    @Autowired\n+    private DbEncryptedSecretRepository encryptedSecretRepository;\n+\n+    @Autowired\n+    private DbEncryptionKeyRepository encryptionKeyRepository;\n+\n+    /*private final SecretBuilder authenticationSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_AUTHENTICATION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB);\n+    private final SecretBuilder encryptionSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_ENCRYPTION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB);\n+    private final SecretBuilder masterSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_MASTER).setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB);\n+    private final SecretBuilder passwordBuilder = new SecretBuilder().setSecurityKeyType(SecurityKeyType.PASSWORD)\n+                                                                     .setKey(PlatformSmartmeteringDefaults.PASSWORD);\n+    private final SecretBuilder mbusEncryptionSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.G_METER_ENCRYPTION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION);\n+    private final SecretBuilder mbusMasterSecurityKeyBuilder = new SecretBuilder()\n+            .setSecurityKeyType(SecurityKeyType.G_METER_MASTER)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER);*/\n+\n+    private final Map<String, SecurityKeyType> securityKeyTypesByInputName = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIxMjg3NA==", "bodyText": "The code where now was used has been removed, leaving this as an unused local variable.\nIf it has no purpose any longer, it should be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558212874", "createdAt": "2021-01-15T10:30:06Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -323,23 +394,21 @@ public void aValidMbusUserKeyIsStored(final Map<String, String> settings) {\n         final DlmsDevice dlmsDevice = this.dlmsDeviceRepository.findByDeviceIdentification(deviceIdentification);\n         assertThat(dlmsDevice).as(deviceDescription + \" must be in the protocol database\").isNotNull();\n \n-        final List<SecurityKey> securityKeys = dlmsDevice.getSecurityKeys();\n+        final List<DbEncryptedSecret> securityKeys = this.findAllSecretsForDevice(deviceIdentification);\n \n         int numberOfMbusDefaultKeys = 0;\n         int numberOfMbusUserKeys = 0;\n         int numberOfValidMbusUserKeys = 0;\n \n         final Date now = new Date();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNDQ3Nw==", "bodyText": "If the commented out method is no longer needed, it should be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558224477", "createdAt": "2021-01-15T10:45:13Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNTMzNA==", "bodyText": "Missing final modifiers on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558225334", "createdAt": "2021-01-15T10:46:45Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNTQxMA==", "bodyText": "Missing final modifiers on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558225410", "createdAt": "2021-01-15T10:46:56Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNTU0NA==", "bodyText": "Missing final modifiers on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558225544", "createdAt": "2021-01-15T10:47:11Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNjEwMQ==", "bodyText": "Missing final modifier on entry.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558226101", "createdAt": "2021-01-15T10:48:01Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        final Map<String,String> actualByName = new HashMap<>();\n+        for(Map.Entry<FaultDetailElement,String> entry: actual.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNjIwMQ==", "bodyText": "Missing final modifier on entry.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558226201", "createdAt": "2021-01-15T10:48:13Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        final Map<String,String> actualByName = new HashMap<>();\n+        for(Map.Entry<FaultDetailElement,String> entry: actual.entrySet()) {\n+            actualByName.put(entry.getKey().getLocalName(),entry.getValue());\n+        }\n+        final Map<String,String> expectedFaults = new HashMap<>();\n+        for(Map.Entry<String,String> entry: expected.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNjc4MA==", "bodyText": "Missing space after for.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558226780", "createdAt": "2021-01-15T10:49:09Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        final Map<String,String> actualByName = new HashMap<>();\n+        for(Map.Entry<FaultDetailElement,String> entry: actual.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNjEwMQ=="}, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNjgzNg==", "bodyText": "Missing space after for.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558226836", "createdAt": "2021-01-15T10:49:16Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        final Map<String,String> actualByName = new HashMap<>();\n+        for(Map.Entry<FaultDetailElement,String> entry: actual.entrySet()) {\n+            actualByName.put(entry.getKey().getLocalName(),entry.getValue());\n+        }\n+        final Map<String,String> expectedFaults = new HashMap<>();\n+        for(Map.Entry<String,String> entry: expected.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNjIwMQ=="}, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyNzQyNQ==", "bodyText": "Missing final modifier on local variables.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558227425", "createdAt": "2021-01-15T10:50:22Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyODMwOQ==", "bodyText": "Missing space after //.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558228309", "createdAt": "2021-01-15T10:52:11Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        final Map<String,String> actualByName = new HashMap<>();\n+        for(Map.Entry<FaultDetailElement,String> entry: actual.entrySet()) {\n+            actualByName.put(entry.getKey().getLocalName(),entry.getValue());\n+        }\n+        final Map<String,String> expectedFaults = new HashMap<>();\n+        for(Map.Entry<String,String> entry: expected.entrySet()) {\n+            if(FaultDetailElement.forLocalName(entry.getKey())!=null) {\n+                expectedFaults.put(entry.getKey(),entry.getValue());\n             }\n         }\n+        SoftAssertions soft = new SoftAssertions();\n+        soft.assertThat(actualByName.keySet()).as(\"Actual fault fields\").containsAll(expectedFaults.keySet());\n+        if(!actualByName.keySet().containsAll(expectedFaults.keySet())) {\n+            //Not all expected fields are there: fail with message containing full response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIyODgwMA==", "bodyText": "Missing space after for, missing space after comma, missing space before and after the colon and missing a final modifier on expectedEntry.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558228800", "createdAt": "2021-01-15T10:53:10Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -30,81 +33,111 @@\n  */\n public abstract class GenericResponseSteps {\n \n-    private static String faultCode;\n-    private static String faultString;\n-\n     /**\n      * Verify the soap fault in the ScenarioContext.Current().get(Keys.RESPONSE)\n      *\n-     * @param expectedResult\n-     *            The list with expected result.\n+     * @param expected\n+     *         The list with expected result.\n      */\n-    public static void verifySoapFault(final Map<String, String> expectedResult) {\n+    public static void verifySoapFault(final Map<String, String> expected) {\n         final SoapFaultClientException soapFault = (SoapFaultClientException) ScenarioContext.current()\n-                .get(PlatformKeys.RESPONSE);\n-\n-        final QName qNameFaultCode = soapFault.getFaultCode();\n-        faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n-        faultString = soapFault.getFaultStringOrReason();\n-\n-        final Object faultDetailValuesByElement = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n-\n-        assertFaultDetails(expectedResult, faultDetailValuesByElement);\n+                                                                                             .get(PlatformKeys.RESPONSE);\n+        assertThat(soapFault).isNotNull();\n+        assertFaultCodeAndString(expected, soapFault);\n+        final Object actualObj = SoapFaultHelper.getFaultDetailValuesByElement(soapFault);\n+        if (actualObj instanceof EnumMap) {\n+            @SuppressWarnings(\"unchecked\") final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement,\n+                    String>) actualObj;\n+            assertFaultDetailMap(expected, actual);\n+        } else if (actualObj instanceof ArrayList) {\n+            assertFaultDetailList(expected, actualObj);\n+        }\n     }\n \n-    private static void assertFaultDetails(final Map<String, String> expected, final Object actualObj) {\n+    private static void assertFaultCodeAndString(Map<String, String> expected, SoapFaultClientException soapFault) {\n+        final QName qNameFaultCode = soapFault.getFaultCode();\n+        String faultCode = qNameFaultCode.getPrefix() + \":\" + qNameFaultCode.getLocalPart();\n+        String faultString = soapFault.getFaultStringOrReason();\n \n         if (expected.containsKey(PlatformKeys.KEY_FAULTCODE)) {\n             assertThat(faultCode).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTCODE));\n         }\n         if (expected.containsKey(PlatformKeys.KEY_FAULTSTRING)) {\n             assertThat(faultString).isEqualTo(getString(expected, PlatformKeys.KEY_FAULTSTRING));\n         }\n+    }\n \n-        if (actualObj instanceof EnumMap) {\n-            @SuppressWarnings(\"unchecked\")\n-            final Map<FaultDetailElement, String> actual = (Map<FaultDetailElement, String>) actualObj;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n+    private static void assertFaultDetailList(Map<String, String> expected, Object actualObj) {\n+        int externCounter = 0;\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 */\n+                continue;\n+            }\n \n-                final String expectedValue = expectedEntry.getValue();\n-                final String actualValue = actual.get(faultDetailElement);\n+            if (expectedEntry.getValue().contains(\";\")) {\n+                int internCounter = 0;\n+                for (final String temp : expectedEntry.getValue().split(\";\")) {\n+                    assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n+                    internCounter++;\n+                }\n+            } else {\n+                assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n+                externCounter++;\n+            }\n+        }\n+    }\n \n-                assertThat(actualValue).as(localName).isEqualTo(expectedValue);\n+    /*private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n+            final String localName = expectedEntry.getKey();\n+            final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n+            if (faultDetailElement == null) {\n+                /*\n+                 * Specified response parameter is not a FaultDetailElement\n+                 * (e.g. DeviceIdentification), skip it for the assertions.\n+                 *\n+                continue;\n             }\n-        } else if (actualObj instanceof ArrayList) {\n-            int externCounter = 0;\n-            for (final Map.Entry<String, String> expectedEntry : expected.entrySet()) {\n-                final String localName = expectedEntry.getKey();\n-                final FaultDetailElement faultDetailElement = FaultDetailElement.forLocalName(localName);\n-                if (faultDetailElement == null) {\n-                    /*\n-                     * Specified response parameter is not a FaultDetailElement\n-                     * (e.g. DeviceIdentification), skip it for the assertions.\n-                     */\n-                    continue;\n-                }\n \n-                if (expectedEntry.getValue().contains(\";\")) {\n-                    int internCounter = 0;\n-                    for (final String temp : expectedEntry.getValue().split(\";\")) {\n-                        assertExpectedAndActualValues(localName, temp, actualObj, internCounter);\n-                        internCounter++;\n-                    }\n-                } else {\n-                    assertExpectedAndActualValues(localName, expectedEntry, actualObj, externCounter);\n-                    externCounter++;\n-                }\n+            final String expectedValue = expectedEntry.getValue();\n+            final String actualValue = actual.get(faultDetailElement);\n+\n+            assertThat(actualValue).as(localName + \"; all actual values: \" + actual.toString())\n+                                   .isEqualTo(expectedValue);\n+        }\n+    }*/\n+\n+    private static void assertFaultDetailMap(Map<String, String> expected, Map<FaultDetailElement, String> actual) {\n+        final Map<String,String> actualByName = new HashMap<>();\n+        for(Map.Entry<FaultDetailElement,String> entry: actual.entrySet()) {\n+            actualByName.put(entry.getKey().getLocalName(),entry.getValue());\n+        }\n+        final Map<String,String> expectedFaults = new HashMap<>();\n+        for(Map.Entry<String,String> entry: expected.entrySet()) {\n+            if(FaultDetailElement.forLocalName(entry.getKey())!=null) {\n+                expectedFaults.put(entry.getKey(),entry.getValue());\n             }\n         }\n+        SoftAssertions soft = new SoftAssertions();\n+        soft.assertThat(actualByName.keySet()).as(\"Actual fault fields\").containsAll(expectedFaults.keySet());\n+        if(!actualByName.keySet().containsAll(expectedFaults.keySet())) {\n+            //Not all expected fields are there: fail with message containing full response\n+            soft.fail(\"Not all expected fields are present; expectedFaults=%s, actualFaultDetailElements=%s\",\n+                    expectedFaults,\n+                    actual);\n+        }\n+        for(Map.Entry<String,String> expectedEntry:expectedFaults.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzMTgyNw==", "bodyText": "According to the code formatting guidelines, a new line is to be inserted after an annotation on a local variable.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558231827", "createdAt": "2021-01-15T10:58:42Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform/src/test/java/org/opensmartgridplatform/cucumber/platform/glue/steps/ws/GenericResponseSteps.java", "diffHunk": "@@ -118,8 +151,7 @@ private static void assertExpectedAndActualValues(final String localName, final\n             final Object actual, final int counter) {\n \n         final Pattern pattern = Pattern.compile(\"('.+\\\\d+:.+')\", Pattern.CASE_INSENSITIVE);\n-        @SuppressWarnings(\"unchecked\")\n-        final String actualValue = ((List<String>) actual).get(counter);\n+        @SuppressWarnings(\"unchecked\") final String actualValue = ((List<String>) actual).get(counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2NzQwMw==", "bodyText": "If this expectation is not used it should be removed instead of commented out.\nComments in several places in this file are missing a space after //.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558267403", "createdAt": "2021-01-15T12:12:32Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -139,7 +159,61 @@ public void storeSecretsRequest() {\n     }\n \n     @Test\n-    public void getSecretsRequest_noSecretTypes() {\n+    public void storeSecretsRequestAlreadyNewSecretPresent() throws IOException {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+\n+        final Resource storeRequest = new ClassPathResource(\"test-requests/storeSecrets.xml\");\n+        final Resource expectedStoreResponse = new ClassPathResource(\"test-responses/storeSecrets.xml\");\n+        //Store secrets\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest)).andExpect(ResponseMatchers.noFault())\n+                                 .andExpect(ResponseMatchers.payload(expectedStoreResponse));\n+        //Store secrets again, while previously stored secret still have status NEW\n+        final String errorMessage = \"Expected 0 new secrets of type E_METER_AUTHENTICATION_KEY for device E0000000000000000, but 1 new secret(s) present\";\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest))\n+                                 .andExpect(ResponseMatchers.serverOrReceiverFault(errorMessage));\n+    }\n+\n+    @Test\n+    public void activateSecretsRequest() throws IOException {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+\n+        final Resource storeRequest = new ClassPathResource(\"test-requests/storeSecrets.xml\");\n+        final Resource activateRequest = new ClassPathResource(\"test-requests/activateSecrets.xml\");\n+        final Resource expectedStoreResponse = new ClassPathResource(\"test-responses/storeSecrets.xml\");\n+        final Resource expectedActivateResponse = new ClassPathResource(\"test-responses/activateSecrets.xml\");\n+        //Store secrets\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest)).andExpect(ResponseMatchers.noFault())\n+                                 .andExpect(ResponseMatchers.payload(expectedStoreResponse));\n+        this.mockWebServiceClient.sendRequest(withPayload(activateRequest))\n+                                 .andExpect(ResponseMatchers.noFault())\n+                                 .andExpect(ResponseMatchers.payload(expectedActivateResponse));\n+    }\n+\n+    @Test\n+    public void activateSecretsRequestNoNewSecret() throws IOException {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+\n+        final Resource activateRequest = new ClassPathResource(\"test-requests/activateSecrets.xml\");\n+        //Store secrets\n+        this.mockWebServiceClient.sendRequest(withPayload(activateRequest))\n+                                 //.andExpect((request, response) -> response.writeTo(System.out));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2ODA0Mg==", "bodyText": "Missing final modifier on local variable generateAndStoreRequest.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558268042", "createdAt": "2021-01-15T12:14:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -167,33 +241,35 @@ public void setSecretsRequest_noSecrets() {\n         final Resource request = new ClassPathResource(\"test-requests/invalidStoreSecrets.xml\");\n \n         try {\n-            this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(\n-                    ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n+            this.mockWebServiceClient.sendRequest(withPayload(request))\n+                                     .andExpect(ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n         } catch (final Exception exc) {\n             Assertions.fail(\"Error\", exc);\n         }\n     }\n \n     @Test\n-    public void setSecretsRequest_identicalSecrets() throws IOException {\n-\n-        /**\n-         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n-         */\n-        assertThat(this.secretRepository.count()).isEqualTo(2);\n+    public void generateAndStoreSecrets() throws IOException {\n+        Resource generateAndStoreRequest = new ClassPathResource(\"test-requests/generateAndStoreSecrets.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2ODQwMA==", "bodyText": "Missing a space after the comma and before ->.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558268400", "createdAt": "2021-01-15T12:15:00Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -167,33 +241,35 @@ public void setSecretsRequest_noSecrets() {\n         final Resource request = new ClassPathResource(\"test-requests/invalidStoreSecrets.xml\");\n \n         try {\n-            this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(\n-                    ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n+            this.mockWebServiceClient.sendRequest(withPayload(request))\n+                                     .andExpect(ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n         } catch (final Exception exc) {\n             Assertions.fail(\"Error\", exc);\n         }\n     }\n \n     @Test\n-    public void setSecretsRequest_identicalSecrets() throws IOException {\n-\n-        /**\n-         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n-         */\n-        assertThat(this.secretRepository.count()).isEqualTo(2);\n+    public void generateAndStoreSecrets() throws IOException {\n+        Resource generateAndStoreRequest = new ClassPathResource(\"test-requests/generateAndStoreSecrets.xml\");\n+        this.mockWebServiceClient.sendRequest(withPayload(generateAndStoreRequest))\n+                .andExpect(ResponseMatchers.noFault())\n+                .andExpect((request,response)-> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2ODY0MA==", "bodyText": "Missing a final modifier on local variable outputStream.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558268640", "createdAt": "2021-01-15T12:15:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -167,33 +241,35 @@ public void setSecretsRequest_noSecrets() {\n         final Resource request = new ClassPathResource(\"test-requests/invalidStoreSecrets.xml\");\n \n         try {\n-            this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(\n-                    ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n+            this.mockWebServiceClient.sendRequest(withPayload(request))\n+                                     .andExpect(ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n         } catch (final Exception exc) {\n             Assertions.fail(\"Error\", exc);\n         }\n     }\n \n     @Test\n-    public void setSecretsRequest_identicalSecrets() throws IOException {\n-\n-        /**\n-         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n-         */\n-        assertThat(this.secretRepository.count()).isEqualTo(2);\n+    public void generateAndStoreSecrets() throws IOException {\n+        Resource generateAndStoreRequest = new ClassPathResource(\"test-requests/generateAndStoreSecrets.xml\");\n+        this.mockWebServiceClient.sendRequest(withPayload(generateAndStoreRequest))\n+                .andExpect(ResponseMatchers.noFault())\n+                .andExpect((request,response)-> {\n+                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI2OTE3MA==", "bodyText": "Missing a final modifier on local variable generateAndStoreRequest.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558269170", "createdAt": "2021-01-15T12:16:46Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -167,33 +241,35 @@ public void setSecretsRequest_noSecrets() {\n         final Resource request = new ClassPathResource(\"test-requests/invalidStoreSecrets.xml\");\n \n         try {\n-            this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(\n-                    ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n+            this.mockWebServiceClient.sendRequest(withPayload(request))\n+                                     .andExpect(ResponseMatchers.serverOrReceiverFault(\"Missing input: typed secrets\"));\n         } catch (final Exception exc) {\n             Assertions.fail(\"Error\", exc);\n         }\n     }\n \n     @Test\n-    public void setSecretsRequest_identicalSecrets() throws IOException {\n-\n-        /**\n-         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n-         */\n-        assertThat(this.secretRepository.count()).isEqualTo(2);\n+    public void generateAndStoreSecrets() throws IOException {\n+        Resource generateAndStoreRequest = new ClassPathResource(\"test-requests/generateAndStoreSecrets.xml\");\n+        this.mockWebServiceClient.sendRequest(withPayload(generateAndStoreRequest))\n+                .andExpect(ResponseMatchers.noFault())\n+                .andExpect((request,response)-> {\n+                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+                    response.writeTo(outputStream);\n+                    assertThat(outputStream.toString()).contains(\"Result>OK\");\n+                });\n+    }\n \n-        final Resource request = new ClassPathResource(\"test-requests/storeSecrets.xml\");\n-        final Resource expectedResponse = new ClassPathResource(\"test-responses/storeSecrets.xml\");\n+    @Test\n+    public void generateAndStoreSecretsAlreadyNewSecretPresent() throws IOException {\n         //Store secrets\n-        this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(ResponseMatchers.noFault()).andExpect(\n-                ResponseMatchers.payload(expectedResponse));\n-        //Store identical secrets again\n-        final String errorMessage = \"Secret is identical to current secret (\" + DEVICE_IDENTIFICATION + \", \"\n-                + \"E_METER_AUTHENTICATION_KEY)\";\n-        this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(\n-                ResponseMatchers.serverOrReceiverFault(errorMessage));\n+        final Resource storeRequest = new ClassPathResource(\"test-requests/storeSecrets.xml\");\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest)).andExpect(ResponseMatchers.noFault());\n+        //Generate and store secret: this should result in a fault message\n+        Resource generateAndStoreRequest = new ClassPathResource(\"test-requests/generateAndStoreSecrets.xml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI3NjAxNw==", "bodyText": "According to the code formatting conventions annotations on methods are to be followed by a new line.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558276017", "createdAt": "2021-01-15T12:30:53Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepositoryIT.java", "diffHunk": "@@ -41,18 +43,32 @@ public void persistTestData() {\n         final DbEncryptedSecret instance = new DbEncryptedSecret();\n         instance.setDeviceIdentification(DEVICE_IDENTIFICATION);\n         instance.setSecretType(SecretType.E_METER_AUTHENTICATION_KEY);\n+        instance.setSecretStatus(SecretStatus.ACTIVE);\n         instance.setEncodedSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n         instance.setEncryptionKeyReference(encryptionKey);\n         instance.setCreationTime(new Date());\n         this.dbEncryptedSecret = this.entityManager.persist(instance);\n         this.entityManager.flush();\n     }\n \n-    @Test\n-    public void findIdOfValidMostRecent() {\n+    @Test void testSetup() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI4NDM3OQ==", "bodyText": "Missing final modifier on local variable rsaEncryptionProvider (and several other variables in this source file).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558284379", "createdAt": "2021-01-15T12:47:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java", "diffHunk": "@@ -44,51 +45,41 @@\n \n     @Bean(\"DefaultEncryptionDelegate\")\n     public DefaultEncryptionDelegate getEncryptionDelegate() {\n-        return new DefaultEncryptionDelegate(getDefaultEncryptionProviders());\n+        return new DefaultEncryptionDelegate(this.getDefaultEncryptionProviders());\n     }\n \n-    @Bean\n-    public List<EncryptionProvider> getDefaultEncryptionProviders() {\n-\n+    private List<EncryptionProvider> getDefaultEncryptionProviders() {\n         List<EncryptionProvider> encryptionProviderList = new ArrayList<>();\n \n         try {\n             JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider(\n                     this.jreEncryptionKeyResource.getFile());\n-\n             encryptionProviderList.add(jreEncryptionProvider);\n \n-            RsaEncryptionProvider rsaEncryptionProvider = new RsaEncryptionProvider();\n-\n-            this.soapPrivateKeyResource.ifPresent(res-> {\n-                try {\n-                    rsaEncryptionProvider.setPrivateKeyStore(res.getFile());\n-                }\n-                catch (IOException e) {\n-                    throw new IllegalStateException(\"Could not load private key resource.\", e);\n-                }\n-            });\n-\n-            this.soapPublicKeyResource.ifPresent(res-> {\n-                try {\n-                    rsaEncryptionProvider.setPublicKeyStore(res.getFile());\n-                }\n-                catch (IOException e) {\n-                    throw new IllegalStateException(\"Could not load public key resource.\", e);\n-                }\n-            });\n-\n-            encryptionProviderList.add(rsaEncryptionProvider);\n-\n             if (this.hsmKeystoreResource.isPresent()) {\n                 HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider(\n                         this.hsmKeystoreResource.get().getFile());\n                 encryptionProviderList.add(hsmEncryptionProvider);\n             }\n \n             return encryptionProviderList;\n+        } catch (IOException | EncrypterException e) {\n+            throw new IllegalStateException(\"Error creating default encryption providers\", e);\n+        }\n+    }\n \n-        } catch (IOException e) {\n+    @Bean\n+    public RsaEncrypter getSoapEncrypter() {\n+        try {\n+            RsaEncrypter rsaEncryptionProvider = new RsaEncrypter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI4NDg1NQ==", "bodyText": "Missing space after if. Here and once more in the next few lines.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558284855", "createdAt": "2021-01-15T12:48:31Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/config/SecurityConfig.java", "diffHunk": "@@ -44,51 +45,41 @@\n \n     @Bean(\"DefaultEncryptionDelegate\")\n     public DefaultEncryptionDelegate getEncryptionDelegate() {\n-        return new DefaultEncryptionDelegate(getDefaultEncryptionProviders());\n+        return new DefaultEncryptionDelegate(this.getDefaultEncryptionProviders());\n     }\n \n-    @Bean\n-    public List<EncryptionProvider> getDefaultEncryptionProviders() {\n-\n+    private List<EncryptionProvider> getDefaultEncryptionProviders() {\n         List<EncryptionProvider> encryptionProviderList = new ArrayList<>();\n \n         try {\n             JreEncryptionProvider jreEncryptionProvider = new JreEncryptionProvider(\n                     this.jreEncryptionKeyResource.getFile());\n-\n             encryptionProviderList.add(jreEncryptionProvider);\n \n-            RsaEncryptionProvider rsaEncryptionProvider = new RsaEncryptionProvider();\n-\n-            this.soapPrivateKeyResource.ifPresent(res-> {\n-                try {\n-                    rsaEncryptionProvider.setPrivateKeyStore(res.getFile());\n-                }\n-                catch (IOException e) {\n-                    throw new IllegalStateException(\"Could not load private key resource.\", e);\n-                }\n-            });\n-\n-            this.soapPublicKeyResource.ifPresent(res-> {\n-                try {\n-                    rsaEncryptionProvider.setPublicKeyStore(res.getFile());\n-                }\n-                catch (IOException e) {\n-                    throw new IllegalStateException(\"Could not load public key resource.\", e);\n-                }\n-            });\n-\n-            encryptionProviderList.add(rsaEncryptionProvider);\n-\n             if (this.hsmKeystoreResource.isPresent()) {\n                 HsmEncryptionProvider hsmEncryptionProvider = new HsmEncryptionProvider(\n                         this.hsmKeystoreResource.get().getFile());\n                 encryptionProviderList.add(hsmEncryptionProvider);\n             }\n \n             return encryptionProviderList;\n+        } catch (IOException | EncrypterException e) {\n+            throw new IllegalStateException(\"Error creating default encryption providers\", e);\n+        }\n+    }\n \n-        } catch (IOException e) {\n+    @Bean\n+    public RsaEncrypter getSoapEncrypter() {\n+        try {\n+            RsaEncrypter rsaEncryptionProvider = new RsaEncrypter();\n+            if(this.soapPrivateKeyResource.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI4NjI5OA==", "bodyText": "Copyright on new files should refer to Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558286298", "createdAt": "2021-01-15T12:51:30Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretStatus.java", "diffHunk": "@@ -0,0 +1,13 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODI4OTQ1OQ==", "bodyText": "If you prefer it this way, you can leave it as is, but the block makes me think: why not:\nthis.secretType = Objects.requireNonNull(secretType, \"Secret type can not be NULL\");?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558289459", "createdAt": "2021-01-15T12:57:41Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "diffHunk": "@@ -8,29 +8,30 @@\n  */\n package org.opensmartgridplatform.secretmanagement.application.domain;\n \n+import java.util.Arrays;\n+\n+import lombok.Getter;\n+\n /**\n  * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n  */\n+@Getter\n public class TypedSecret {\n-    private SecretType secretType;\n-    private String secret;\n-\n-    public String getSecret() {\n-        return this.secret;\n-    }\n-\n-    public SecretType getSecretType() {\n-        return this.secretType;\n-    }\n-\n-    public void setSecret(final String secret) {\n-        this.secret = secret;\n+    private final SecretType secretType;\n+    private final byte[] secret;\n+\n+    public TypedSecret(final byte[] secret, final SecretType secretType) {\n+        this.secret = secret == null ? null : Arrays.copyOf(secret, secret.length);\n+        if (secretType != null) {\n+            this.secretType = secretType;\n+        } else {\n+            throw new IllegalArgumentException(\"Secret type can not be NULL\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwNjY2Nw==", "bodyText": "Missing final modifier on local variable typedSecretList.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558306667", "createdAt": "2021-01-15T13:29:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,153 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\";\n+    private static final String STR_MISSING_SECRET_TYPES = \"Missing input: secret types\";\n+    private static final String STR_MISSING_TYPED_SECRETS = \"Missing input: typed secrets\";\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n \n-    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n-                                    SoapEndpointDataTypeConverter converter) {\n+    public SecretManagementEndpoint(final SecretManagementService secretManagementService,\n+            final SoapEndpointDataTypeConverter converter) {\n         this.secretManagementService = secretManagementService;\n         this.converter = converter;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n     @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n-\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(getSecretsRequestToString(request));\n+            log.debug(this.requestToString(request));\n         }\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n+        final GetSecretsResponse response = new GetSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n         if (soapSecretTypes == null) {\n-            throw new TechnicalException(\"Missing input: secret types\");\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n         }\n-\n-        List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n-        List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n                 secretTypeList);\n-\n-        TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n-\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n         response.setResult(OsgpResultType.OK);\n+        return response;\n+    }\n \n-        log.trace(response.toString());\n-\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GetNewSecretsResponse response = new GetNewSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveNewSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n+        response.setTypedSecrets(soapTypedSecrets);\n+        response.setResult(OsgpResultType.OK);\n         return response;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n     @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) throws OsgpException {\n-\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload final StoreSecretsRequest request)\n+            throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-        log.trace(request.toString());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final StoreSecretsResponse response = new StoreSecretsResponse();\n+        final TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n         if (soapTypedSecrets == null) {\n-            throw new TechnicalException(\"Missing input: typed secrets\");\n+            throw new TechnicalException(STR_MISSING_TYPED_SECRETS);\n         }\n-\n-        List<TypedSecret> typedSecretList = converter.convertToTypedSecrets(request.getTypedSecrets());\n-\n-        secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-\n+        final List<TypedSecret> typedSecretList = this.converter.convertToTypedSecrets(soapTypedSecrets);\n+        this.secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n         response.setResult(OsgpResultType.OK);\n+        return response;\n+    }\n \n-        log.trace(response.toString());\n-\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"generateAndStoreSecretsRequest\")\n+    @ResponsePayload\n+    public GenerateAndStoreSecretsResponse generateAndStoreSecretsRequest(\n+            @RequestPayload final GenerateAndStoreSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'generateAndStoreSecretsRequest' for device {}\",\n+                request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GenerateAndStoreSecretsResponse response = new GenerateAndStoreSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        List<TypedSecret> typedSecretList = this.secretManagementService.generateAndStoreSecrets(request.getDeviceId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwNzE3OA==", "bodyText": "Missing final modifier on local variable logFormat.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558307178", "createdAt": "2021-01-15T13:30:32Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,153 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\";\n+    private static final String STR_MISSING_SECRET_TYPES = \"Missing input: secret types\";\n+    private static final String STR_MISSING_TYPED_SECRETS = \"Missing input: typed secrets\";\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n \n-    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n-                                    SoapEndpointDataTypeConverter converter) {\n+    public SecretManagementEndpoint(final SecretManagementService secretManagementService,\n+            final SoapEndpointDataTypeConverter converter) {\n         this.secretManagementService = secretManagementService;\n         this.converter = converter;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n     @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n-\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(getSecretsRequestToString(request));\n+            log.debug(this.requestToString(request));\n         }\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n+        final GetSecretsResponse response = new GetSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n         if (soapSecretTypes == null) {\n-            throw new TechnicalException(\"Missing input: secret types\");\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n         }\n-\n-        List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n-        List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n                 secretTypeList);\n-\n-        TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n-\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n         response.setResult(OsgpResultType.OK);\n+        return response;\n+    }\n \n-        log.trace(response.toString());\n-\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GetNewSecretsResponse response = new GetNewSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveNewSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n+        response.setTypedSecrets(soapTypedSecrets);\n+        response.setResult(OsgpResultType.OK);\n         return response;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n     @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) throws OsgpException {\n-\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload final StoreSecretsRequest request)\n+            throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-        log.trace(request.toString());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final StoreSecretsResponse response = new StoreSecretsResponse();\n+        final TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n         if (soapTypedSecrets == null) {\n-            throw new TechnicalException(\"Missing input: typed secrets\");\n+            throw new TechnicalException(STR_MISSING_TYPED_SECRETS);\n         }\n-\n-        List<TypedSecret> typedSecretList = converter.convertToTypedSecrets(request.getTypedSecrets());\n-\n-        secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-\n+        final List<TypedSecret> typedSecretList = this.converter.convertToTypedSecrets(soapTypedSecrets);\n+        this.secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n         response.setResult(OsgpResultType.OK);\n+        return response;\n+    }\n \n-        log.trace(response.toString());\n-\n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"generateAndStoreSecretsRequest\")\n+    @ResponsePayload\n+    public GenerateAndStoreSecretsResponse generateAndStoreSecretsRequest(\n+            @RequestPayload final GenerateAndStoreSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'generateAndStoreSecretsRequest' for device {}\",\n+                request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GenerateAndStoreSecretsResponse response = new GenerateAndStoreSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        List<TypedSecret> typedSecretList = this.secretManagementService.generateAndStoreSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        response.setResult(OsgpResultType.OK);\n+        response.setTypedSecrets(this.converter.convertToSoapTypedSecrets(typedSecretList));\n         return response;\n     }\n \n-    private String getSecretsRequestToString(GetSecretsRequest request) {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private <T> String requestToString(final T request) {\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         try {\n-            JAXBContext ctx = JAXBContext.newInstance(GetSecretsRequest.class);\n-            Marshaller marshaller = ctx.createMarshaller();\n+            final JAXBContext ctx = JAXBContext.newInstance(request.getClass());\n+            final Marshaller marshaller = ctx.createMarshaller();\n             marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n             marshaller.marshal(request, baos);\n-        } catch (JAXBException e) {\n-            log.error(\"Could not serialize GetSecretsRequest\", e);\n+        } catch (final JAXBException e) {\n+            String logFormat = \"Could not serialize request of type %s\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwOTU0MQ==", "bodyText": "Missing final modifier on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558309541", "createdAt": "2021-01-15T13:35:10Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -10,22 +10,33 @@\n \n import javax.xml.namespace.QName;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.springframework.ws.soap.SoapFault;\n import org.springframework.ws.soap.SoapFaultDetail;\n import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n \n+@Slf4j\n public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMwOTc1Mw==", "bodyText": "Missing space after if.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558309753", "createdAt": "2021-01-15T13:35:29Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -10,22 +10,33 @@\n \n import javax.xml.namespace.QName;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.springframework.ws.soap.SoapFault;\n import org.springframework.ws.soap.SoapFaultDetail;\n import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n \n+@Slf4j\n public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        log.error(\"Exception occured during SOAP request processing\", ex);\n         SoapFaultDetail detail = fault.addFaultDetail();\n+        if(ex instanceof ExceptionWrapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMxMDEzNg==", "bodyText": "Missing final modifier on local variable detail.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558310136", "createdAt": "2021-01-15T13:36:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -10,22 +10,33 @@\n \n import javax.xml.namespace.QName;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.springframework.ws.soap.SoapFault;\n import org.springframework.ws.soap.SoapFaultDetail;\n import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n \n+@Slf4j\n public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        log.error(\"Exception occured during SOAP request processing\", ex);\n         SoapFaultDetail detail = fault.addFaultDetail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMxMTMwMg==", "bodyText": "Copyright on new files should mention Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558311302", "createdAt": "2021-01-15T13:38:12Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/ExceptionWrapper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMxMTcyMQ==", "bodyText": "Missing final modifier on parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558311721", "createdAt": "2021-01-15T13:38:57Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/ExceptionWrapper.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ * <p>\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.secretmanagement.application.exception;\n+\n+/**\n+ * Unchecked exception that wraps another (checked) exception.\n+ * Can be used to handle checked exception in streams.\n+ */\n+public class ExceptionWrapper extends RuntimeException {\n+    private static final long serialVersionUID = -1239332310446200862L;\n+\n+    public ExceptionWrapper(Exception exc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMxNTMzNg==", "bodyText": "Missing final modifier on parameter rsaEncrypter (and on parameters or local variables in several other parts of this source file).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558315336", "createdAt": "2021-01-15T13:45:16Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,319 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.exception.ExceptionWrapper;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret)\n+                throws FunctionalException {\n+            byte[] aesEncrypted;\n+            try {\n+                aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            } catch (IllegalArgumentException iae) {\n+                throw new FunctionalException(FunctionalExceptionType.INVALID_KEY_FORMAT,\n+                        ComponentType.SECRET_MANAGEMENT, iae);\n+            }\n+            String keyReference = dbEncryptedSecret.getEncryptionKeyReference().getReference();\n+            EncryptionProviderType providerType = dbEncryptedSecret.getEncryptionKeyReference()\n+                                                                   .getEncryptionProviderType();\n+            return new EncryptedTypedSecret(aesEncrypted, dbEncryptedSecret.getSecretType(), keyReference,\n+                    providerType);\n+        }\n+    }\n+\n     private final EncryptionDelegate encryptionDelegate;\n     private final EncryptionProviderType encryptionProviderType;\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n+    private final RsaEncrypter rsaEncrypter;\n \n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n-            final DbEncryptionKeyRepository keyRepository) {\n+            final DbEncryptionKeyRepository keyRepository, RsaEncrypter rsaEncrypter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODMzMTc1Mg==", "bodyText": "Copyright on new files should be for Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558331752", "createdAt": "2021-01-15T14:12:27Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/EncryptionHelperService.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM0NDg1Mw==", "bodyText": "Putting the comma on a new line is not according to the formatting conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558344853", "createdAt": "2021-01-15T14:33:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/FirmwareService.java", "diffHunk": "@@ -73,12 +73,13 @@ public boolean isFirmwareFileAvailable(final String firmwareIdentification) {\n         return this.firmwareRepository.isAvailable(firmwareIdentification);\n     }\n \n-    private UpdateFirmwareResponseDto executeFirmwareUpdate(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final String firmwareIdentification) throws OsgpException {\n+    private UpdateFirmwareResponseDto executeFirmwareUpdate(final DlmsConnectionManager conn, final DlmsDevice device\n+            , final String firmwareIdentification) throws OsgpException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM0Njk1Mw==", "bodyText": "Missing final modifier on a number of local variables.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558346953", "createdAt": "2021-01-15T14:36:24Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "diffHunk": "@@ -52,59 +66,65 @@\n     @Autowired\n     private CoupleMbusDeviceByChannelCommandExecutor coupleMbusDeviceByChannelCommandExecutor;\n \n-    // === ADD METER ===\n     public void addMeter(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptKeys(smartMeteringDevice);\n+        if (smartMeteringDevice.getDeviceIdentification() == null) {\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.PROTOCOL_DLMS,\n+                    new IllegalArgumentException(\"Provided device does not contain device identification\"));\n+        }\n+        this.storeAndActivateKeys(smartMeteringDevice);\n         final DlmsDevice dlmsDevice = this.installationMapper.map(smartMeteringDevice, DlmsDevice.class);\n         this.dlmsDeviceRepository.save(dlmsDevice);\n     }\n \n-    private void reEncryptKeys(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptMasterKey(smartMeteringDevice);\n-        this.reEncryptAuthenticationKey(smartMeteringDevice);\n-        this.reEncryptEncryptionKey(smartMeteringDevice);\n-        this.reEncryptMbusDefaultKey(smartMeteringDevice);\n-    }\n-\n-    private void reEncryptMasterKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getMasterKey())) {\n-            return;\n+    private void storeAndActivateKeys(final SmartMeteringDeviceDto deviceDto) throws FunctionalException {\n+        Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM0Nzc1NA==", "bodyText": "Missing final modifier on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558347754", "createdAt": "2021-01-15T14:37:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "diffHunk": "@@ -52,59 +66,65 @@\n     @Autowired\n     private CoupleMbusDeviceByChannelCommandExecutor coupleMbusDeviceByChannelCommandExecutor;\n \n-    // === ADD METER ===\n     public void addMeter(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptKeys(smartMeteringDevice);\n+        if (smartMeteringDevice.getDeviceIdentification() == null) {\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.PROTOCOL_DLMS,\n+                    new IllegalArgumentException(\"Provided device does not contain device identification\"));\n+        }\n+        this.storeAndActivateKeys(smartMeteringDevice);\n         final DlmsDevice dlmsDevice = this.installationMapper.map(smartMeteringDevice, DlmsDevice.class);\n         this.dlmsDeviceRepository.save(dlmsDevice);\n     }\n \n-    private void reEncryptKeys(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptMasterKey(smartMeteringDevice);\n-        this.reEncryptAuthenticationKey(smartMeteringDevice);\n-        this.reEncryptEncryptionKey(smartMeteringDevice);\n-        this.reEncryptMbusDefaultKey(smartMeteringDevice);\n-    }\n-\n-    private void reEncryptMasterKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getMasterKey())) {\n-            return;\n+    private void storeAndActivateKeys(final SmartMeteringDeviceDto deviceDto) throws FunctionalException {\n+        Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n+        List<SecurityKeyType> keyTypesToStore = this.determineKeyTypesToStore(deviceDto);\n+        for (SecurityKeyType keyType : keyTypesToStore) {\n+            byte[] key = this.getKeyFromDeviceDto(deviceDto, keyType);\n+            if (key != null && ArrayUtils.isNotEmpty(key)) {\n+                keysByType.put(keyType, this.encryptionService.rsaDecrypt(key));\n+            } else {\n+                Exception rootCause = new NoSuchElementException(keyType.name());\n+                throw new FunctionalException(FunctionalExceptionType.KEY_NOT_PRESENT, ComponentType.PROTOCOL_DLMS,\n+                        rootCause);\n+            }\n         }\n-        final byte[] reEncryptedMasterKey = this.securityKeyService\n-                .reEncryptKey(smartMeteringDevice.getMasterKey(), SecurityKeyType.E_METER_MASTER);\n-        smartMeteringDevice.setMasterKey(reEncryptedMasterKey);\n+        this.secretManagementService.storeNewKeys(deviceDto.getDeviceIdentification(), keysByType);\n+        this.secretManagementService.activateNewKeys(deviceDto.getDeviceIdentification(), keyTypesToStore);\n     }\n \n-    private void reEncryptAuthenticationKey(final SmartMeteringDeviceDto smartMeteringDevice)\n+    private List<SecurityKeyType> determineKeyTypesToStore(SmartMeteringDeviceDto deviceDto)\n             throws FunctionalException {\n-\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getAuthenticationKey())) {\n-            return;\n+        if (this.getKeyFromDeviceDto(deviceDto, G_METER_MASTER) != null) {\n+            //device is a G-Meter\n+            if (this.getKeyFromDeviceDto(deviceDto, E_METER_MASTER) != null\n+                    || this.getKeyFromDeviceDto(deviceDto, E_METER_AUTHENTICATION) != null\n+                    || this.getKeyFromDeviceDto(deviceDto, E_METER_ENCRYPTION) != null) {\n+                String msg = \"Provided device is considered a G-Meter (G_METER_MASTER is set)\"\n+                        + \", but contains E-Meter keys as well\";\n+                throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.PROTOCOL_DLMS,\n+                        new IllegalArgumentException(msg));\n+            }\n+            return Arrays.asList(G_METER_MASTER);\n+        } else {\n+            //device is an E-meter\n+            return Arrays.asList(E_METER_MASTER, E_METER_AUTHENTICATION, E_METER_ENCRYPTION);\n         }\n-        final byte[] reEncryptedAuthenticationKey = this.securityKeyService\n-                .reEncryptKey(smartMeteringDevice.getAuthenticationKey(), SecurityKeyType.E_METER_AUTHENTICATION);\n-        smartMeteringDevice.setAuthenticationKey(reEncryptedAuthenticationKey);\n     }\n \n-    private void reEncryptEncryptionKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getGlobalEncryptionUnicastKey())) {\n-            return;\n+    private byte[] getKeyFromDeviceDto(SmartMeteringDeviceDto deviceDto, SecurityKeyType keyType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM0OTgxNw==", "bodyText": "No need to check against null, as this is handled by ArrayUtils.isNotEmpty as well.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558349817", "createdAt": "2021-01-15T14:40:32Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "diffHunk": "@@ -52,59 +66,65 @@\n     @Autowired\n     private CoupleMbusDeviceByChannelCommandExecutor coupleMbusDeviceByChannelCommandExecutor;\n \n-    // === ADD METER ===\n     public void addMeter(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptKeys(smartMeteringDevice);\n+        if (smartMeteringDevice.getDeviceIdentification() == null) {\n+            throw new FunctionalException(FunctionalExceptionType.VALIDATION_ERROR, ComponentType.PROTOCOL_DLMS,\n+                    new IllegalArgumentException(\"Provided device does not contain device identification\"));\n+        }\n+        this.storeAndActivateKeys(smartMeteringDevice);\n         final DlmsDevice dlmsDevice = this.installationMapper.map(smartMeteringDevice, DlmsDevice.class);\n         this.dlmsDeviceRepository.save(dlmsDevice);\n     }\n \n-    private void reEncryptKeys(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptMasterKey(smartMeteringDevice);\n-        this.reEncryptAuthenticationKey(smartMeteringDevice);\n-        this.reEncryptEncryptionKey(smartMeteringDevice);\n-        this.reEncryptMbusDefaultKey(smartMeteringDevice);\n-    }\n-\n-    private void reEncryptMasterKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getMasterKey())) {\n-            return;\n+    private void storeAndActivateKeys(final SmartMeteringDeviceDto deviceDto) throws FunctionalException {\n+        Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n+        List<SecurityKeyType> keyTypesToStore = this.determineKeyTypesToStore(deviceDto);\n+        for (SecurityKeyType keyType : keyTypesToStore) {\n+            byte[] key = this.getKeyFromDeviceDto(deviceDto, keyType);\n+            if (key != null && ArrayUtils.isNotEmpty(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM1MTg4MQ==", "bodyText": "Missing final modifier on constructor arguments.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558351881", "createdAt": "2021-01-15T14:43:47Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -1,181 +1,360 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.EnumMap;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n \n-import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.codec.binary.Hex;\n-import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n-import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n-import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetNewSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetNewSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n @Service\n-@Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM1NDU2OQ==", "bodyText": "Missing final modifier on method parameters, here and in other methods in this class. Also missing final modifiers in several places on local variables.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558354569", "createdAt": "2021-01-15T14:47:46Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -1,181 +1,360 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.EnumMap;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n \n-import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.codec.binary.Hex;\n-import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n-import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n-import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n-import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetNewSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetNewSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n \n @Service\n-@Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {\n+        this.soapRsaEncrypter = soapRsaEncrypter;\n         this.secretManagementClient = secretManagementClient;\n     }\n \n-    @Override\n-    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve an active key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getKey(String deviceIdentification, SecurityKeyType keyType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM3NTE3MQ==", "bodyText": "Missing final modifier on parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558375171", "createdAt": "2021-01-15T15:18:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/GenerateAndReplaceKeyCommandExecutor.java", "diffHunk": "@@ -54,16 +60,17 @@ public ActionResponseDto executeBundleAction(final DlmsConnectionManager conn, f\n     public ActionResponseDto execute(final DlmsConnectionManager conn, final DlmsDevice device,\n             final ActionRequestDto actionRequestDto) throws OsgpException {\n         LOGGER.info(\"Generate new keys for device {}\", device.getDeviceIdentification());\n-        final SetKeysRequestDto setKeysRequest = this.generateSetKeysRequest();\n+        final SetKeysRequestDto setKeysRequest = this.generateSetKeysRequest(device.getDeviceIdentification());\n         return this.replaceKeyCommandExecutor.executeBundleAction(conn, device, setKeysRequest);\n     }\n \n-    private SetKeysRequestDto generateSetKeysRequest() throws FunctionalException {\n+    private SetKeysRequestDto generateSetKeysRequest(String deviceIdentification) throws FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM4NjM5OA==", "bodyText": "Missing final modifier on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558386398", "createdAt": "2021-01-15T15:35:43Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -133,29 +114,90 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM4NjcyOA==", "bodyText": "Missing final modifier on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558386728", "createdAt": "2021-01-15T15:36:11Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -133,29 +114,90 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)\n+            throws IOException {\n+        final MethodParameter methodSetEncryptionKey = this\n+                .getSetEncryptionKeyMethodParameter(OBIS_HASHMAP.get(channel), encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n+                + \", call M-Bus Setup set_encryption_key method: \" + JdlmsObjectToStringUtil\n+                .describeMethod(methodSetEncryptionKey));\n+        return conn.getConnection().action(methodSetEncryptionKey);\n+    }\n+\n+    private MethodResult transferKey(DlmsConnectionManager conn, String mbusDeviceIdentification, int channel,\n+            byte[] encryptionKey) throws ProtocolAdapterException, IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM4Njk5Nw==", "bodyText": "Missing final modifier on parameters.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558386997", "createdAt": "2021-01-15T15:36:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -133,29 +114,90 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)\n+            throws IOException {\n+        final MethodParameter methodSetEncryptionKey = this\n+                .getSetEncryptionKeyMethodParameter(OBIS_HASHMAP.get(channel), encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n+                + \", call M-Bus Setup set_encryption_key method: \" + JdlmsObjectToStringUtil\n+                .describeMethod(methodSetEncryptionKey));\n+        return conn.getConnection().action(methodSetEncryptionKey);\n+    }\n+\n+    private MethodResult transferKey(DlmsConnectionManager conn, String mbusDeviceIdentification, int channel,\n+            byte[] encryptionKey) throws ProtocolAdapterException, IOException {\n+        final MethodParameter methodTransferKey = this\n+                .getTransferKeyMethodParameter(mbusDeviceIdentification, channel, encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\n+                \"SetEncryptionKeyExchangeOnGMeter for channel \" + channel + \", call M-Bus Setup transfer_key method: \"\n+                        + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n+\n+        return conn.getConnection().action(methodTransferKey);\n+    }\n+\n+    private MethodParameter getTransferKeyMethodParameter(String mbusDeviceIdentification, int channel,\n+            byte[] gMeterUserKey) throws ProtocolAdapterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM4NzQ0OQ==", "bodyText": "Missing final modifier on local variable mbusDevice.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558387449", "createdAt": "2021-01-15T15:37:15Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -133,29 +114,90 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)\n+            throws IOException {\n+        final MethodParameter methodSetEncryptionKey = this\n+                .getSetEncryptionKeyMethodParameter(OBIS_HASHMAP.get(channel), encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n+                + \", call M-Bus Setup set_encryption_key method: \" + JdlmsObjectToStringUtil\n+                .describeMethod(methodSetEncryptionKey));\n+        return conn.getConnection().action(methodSetEncryptionKey);\n+    }\n+\n+    private MethodResult transferKey(DlmsConnectionManager conn, String mbusDeviceIdentification, int channel,\n+            byte[] encryptionKey) throws ProtocolAdapterException, IOException {\n+        final MethodParameter methodTransferKey = this\n+                .getTransferKeyMethodParameter(mbusDeviceIdentification, channel, encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\n+                \"SetEncryptionKeyExchangeOnGMeter for channel \" + channel + \", call M-Bus Setup transfer_key method: \"\n+                        + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n+\n+        return conn.getConnection().action(methodTransferKey);\n+    }\n+\n+    private MethodParameter getTransferKeyMethodParameter(String mbusDeviceIdentification, int channel,\n+            byte[] gMeterUserKey) throws ProtocolAdapterException {\n+        DlmsDevice mbusDevice = this.dlmsDeviceRepository.findByDeviceIdentification(mbusDeviceIdentification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM4Nzg1OQ==", "bodyText": "Missing final modifier on obisCode.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558387859", "createdAt": "2021-01-15T15:37:51Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -133,29 +114,90 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)\n+            throws IOException {\n+        final MethodParameter methodSetEncryptionKey = this\n+                .getSetEncryptionKeyMethodParameter(OBIS_HASHMAP.get(channel), encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n+                + \", call M-Bus Setup set_encryption_key method: \" + JdlmsObjectToStringUtil\n+                .describeMethod(methodSetEncryptionKey));\n+        return conn.getConnection().action(methodSetEncryptionKey);\n+    }\n+\n+    private MethodResult transferKey(DlmsConnectionManager conn, String mbusDeviceIdentification, int channel,\n+            byte[] encryptionKey) throws ProtocolAdapterException, IOException {\n+        final MethodParameter methodTransferKey = this\n+                .getTransferKeyMethodParameter(mbusDeviceIdentification, channel, encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\n+                \"SetEncryptionKeyExchangeOnGMeter for channel \" + channel + \", call M-Bus Setup transfer_key method: \"\n+                        + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n+\n+        return conn.getConnection().action(methodTransferKey);\n+    }\n+\n+    private MethodParameter getTransferKeyMethodParameter(String mbusDeviceIdentification, int channel,\n+            byte[] gMeterUserKey) throws ProtocolAdapterException {\n+        DlmsDevice mbusDevice = this.dlmsDeviceRepository.findByDeviceIdentification(mbusDeviceIdentification);\n+        if (mbusDevice == null) {\n+            throw new ProtocolAdapterException(\"Unknown M-Bus device: \" + mbusDeviceIdentification);\n+        }\n+        final byte[] mbusDefaultKey = this.secretManagementService.getKey(mbusDeviceIdentification, G_METER_MASTER);\n+        final byte[] encryptedUserKey = this.encryptMbusUserKey(mbusDefaultKey, gMeterUserKey);\n+        final DataObject methodParameter = DataObject.newOctetStringData(encryptedUserKey);\n+        final MBusClientMethod method = MBusClientMethod.TRANSFER_KEY;\n+        return new MethodParameter(method.getInterfaceClass().id(), OBIS_HASHMAP.get(channel), method.getMethodId(),\n+                methodParameter);\n+    }\n+\n+    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName,\n+            ObisCode obisCode) throws ProtocolAdapterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5MTY0Mg==", "bodyText": "Missing final modifier on constructor argument.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558391642", "createdAt": "2021-01-15T15:43:41Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/entities/SecurityKeyType.java", "diffHunk": "@@ -1,35 +1,56 @@\n /**\n  * Copyright 2015 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.dlms.domain.entities;\n \n+import java.util.Arrays;\n+\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+\n public enum SecurityKeyType {\n     /**\n      * DLMS master key (Key Encryption Key)\n      */\n-    E_METER_MASTER,\n+    E_METER_MASTER(SecretType.E_METER_MASTER_KEY),\n     /**\n      * DLMS authentication key\n      */\n-    E_METER_AUTHENTICATION,\n+    E_METER_AUTHENTICATION(SecretType.E_METER_AUTHENTICATION_KEY),\n     /**\n      * DLMS global unicast encryption key\n      */\n-    E_METER_ENCRYPTION,\n+    E_METER_ENCRYPTION(SecretType.E_METER_ENCRYPTION_KEY_UNICAST),\n     /**\n      * M-Bus Default key\n      */\n-    G_METER_MASTER,\n+    G_METER_MASTER(SecretType.G_METER_MASTER_KEY),\n     /**\n      * M-Bus User key\n      */\n-    G_METER_ENCRYPTION,\n+    G_METER_ENCRYPTION(SecretType.G_METER_ENCRYPTION_KEY),\n     /**\n      * Password (e.g. used as DLMS Low Level Security secret)\n      */\n-    PASSWORD\n+    PASSWORD(SecretType.PPP_PASSWORD);\n+\n+    private final SecretType secretType;\n+\n+    SecurityKeyType(SecretType secretType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5MTgxMg==", "bodyText": "Missing final modifier on parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558391812", "createdAt": "2021-01-15T15:44:00Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/entities/SecurityKeyType.java", "diffHunk": "@@ -1,35 +1,56 @@\n /**\n  * Copyright 2015 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.dlms.domain.entities;\n \n+import java.util.Arrays;\n+\n+import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n+\n public enum SecurityKeyType {\n     /**\n      * DLMS master key (Key Encryption Key)\n      */\n-    E_METER_MASTER,\n+    E_METER_MASTER(SecretType.E_METER_MASTER_KEY),\n     /**\n      * DLMS authentication key\n      */\n-    E_METER_AUTHENTICATION,\n+    E_METER_AUTHENTICATION(SecretType.E_METER_AUTHENTICATION_KEY),\n     /**\n      * DLMS global unicast encryption key\n      */\n-    E_METER_ENCRYPTION,\n+    E_METER_ENCRYPTION(SecretType.E_METER_ENCRYPTION_KEY_UNICAST),\n     /**\n      * M-Bus Default key\n      */\n-    G_METER_MASTER,\n+    G_METER_MASTER(SecretType.G_METER_MASTER_KEY),\n     /**\n      * M-Bus User key\n      */\n-    G_METER_ENCRYPTION,\n+    G_METER_ENCRYPTION(SecretType.G_METER_ENCRYPTION_KEY),\n     /**\n      * Password (e.g. used as DLMS Low Level Security secret)\n      */\n-    PASSWORD\n+    PASSWORD(SecretType.PPP_PASSWORD);\n+\n+    private final SecretType secretType;\n+\n+    SecurityKeyType(SecretType secretType) {\n+        this.secretType = secretType;\n+    }\n+\n+    public SecretType toSecretType() {\n+        return this.secretType;\n+    }\n+\n+    public static SecurityKeyType fromSecretType(SecretType secretType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5NDk5NA==", "bodyText": "Like Jenkins says. Don't leave in unused imports.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558394994", "createdAt": "2021-01-15T15:48:46Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/responses/from/core/processors/GetFirmwareFileResponseMessageProcessor.java", "diffHunk": "@@ -9,6 +9,7 @@\n package org.opensmartgridplatform.adapter.protocol.dlms.infra.messaging.responses.from.core.processors;\n \n import java.io.Serializable;\n+import java.util.Optional;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5ODAxMg==", "bodyText": "Naming patterns with a long range of zeros in the end go against the Flyway naming conventions. Please stop doing this.\nAnother thing to watch out for is spaces in file names that should be processed automatically.\nThis probably did not fail now, but in general it is better to avoid issues with tooling not taking spaces into account.\nFurthermore with the existing SQL scripts, there is an established practice of using underscores instead of spaces.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558398012", "createdAt": "2021-01-15T15:53:31Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/resources/db/migration/V20201130000000000__Drop_table security_key.sql", "diffHunk": "@@ -0,0 +1,12 @@\n+DO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODM5OTc2NA==", "bodyText": "This file is missing a required license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558399764", "createdAt": "2021-01-15T15:56:09Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationServiceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwMDgxNQ==", "bodyText": "Missing final modifier on local variable deviceDto (and several others in this class).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558400815", "createdAt": "2021-01-15T15:57:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationServiceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.mapping.InstallationMapper;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.repositories.DlmsDeviceRepository;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.SmartMeteringDeviceDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class InstallationServiceTest {\n+    @InjectMocks\n+    InstallationService testService;\n+\n+    @Mock\n+    SecretManagementService secretManagementService;\n+\n+    @Mock\n+    DlmsDeviceRepository dlmsDeviceRepository;\n+    @Mock\n+    InstallationMapper installationMapper;\n+    @Mock\n+    EncryptionHelperService encryptionHelperService;\n+\n+    @Test\n+    void addEMeter() throws FunctionalException {\n+        // GIVEN\n+        SmartMeteringDeviceDto deviceDto = new SmartMeteringDeviceDto();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwMTYxMw==", "bodyText": "Using underscores in method names goes against the naming conventions that are in use. (The same goes for some other methods following this one.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558401613", "createdAt": "2021-01-15T15:58:54Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationServiceTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.mapping.InstallationMapper;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.repositories.DlmsDeviceRepository;\n+import org.opensmartgridplatform.dto.valueobjects.smartmetering.SmartMeteringDeviceDto;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class InstallationServiceTest {\n+    @InjectMocks\n+    InstallationService testService;\n+\n+    @Mock\n+    SecretManagementService secretManagementService;\n+\n+    @Mock\n+    DlmsDeviceRepository dlmsDeviceRepository;\n+    @Mock\n+    InstallationMapper installationMapper;\n+    @Mock\n+    EncryptionHelperService encryptionHelperService;\n+\n+    @Test\n+    void addEMeter() throws FunctionalException {\n+        // GIVEN\n+        SmartMeteringDeviceDto deviceDto = new SmartMeteringDeviceDto();\n+        deviceDto.setDeviceIdentification(\"Test\");\n+        deviceDto.setMasterKey(new byte[16]);\n+        deviceDto.setAuthenticationKey(new byte[16]);\n+        deviceDto.setGlobalEncryptionUnicastKey(new byte[16]);\n+        DlmsDevice dlmsDevice = new DlmsDevice();\n+        when(this.installationMapper.map(deviceDto, DlmsDevice.class)).thenReturn(dlmsDevice);\n+        when(this.dlmsDeviceRepository.save(dlmsDevice)).thenReturn(dlmsDevice);\n+        when(this.encryptionHelperService.rsaDecrypt(any())).thenReturn(new byte[16]);\n+        // WHEN\n+        this.testService.addMeter(deviceDto);\n+        //THEN\n+        verify(this.secretManagementService, times(1)).storeNewKeys(any(), any());\n+        verify(this.secretManagementService, times(1)).activateNewKeys(any(), any());\n+    }\n+\n+    @Test\n+    void addGMeter() throws FunctionalException {\n+        // GIVEN\n+        SmartMeteringDeviceDto deviceDto = new SmartMeteringDeviceDto();\n+        deviceDto.setDeviceIdentification(\"Test\");\n+        deviceDto.setMbusDefaultKey(new byte[16]);\n+        DlmsDevice dlmsDevice = new DlmsDevice();\n+        when(this.installationMapper.map(deviceDto, DlmsDevice.class)).thenReturn(dlmsDevice);\n+        when(this.dlmsDeviceRepository.save(dlmsDevice)).thenReturn(dlmsDevice);\n+        when(this.encryptionHelperService.rsaDecrypt(any())).thenReturn(new byte[16]);\n+        // WHEN\n+        this.testService.addMeter(deviceDto);\n+        //THEN\n+        verify(this.secretManagementService, times(1)).storeNewKeys(any(), any());\n+        verify(this.secretManagementService, times(1)).activateNewKeys(any(), any());\n+    }\n+\n+    @Test\n+    void addMeter_noKeys() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwMjYyMg==", "bodyText": "Copyright for new files should be for Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558402622", "createdAt": "2021-01-15T16:00:27Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwNjQ5MQ==", "bodyText": "If the message in the TODO still applies, change the length back to a maximum of 40,\nAnyway, the TODO should not be left in the code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558406491", "createdAt": "2021-01-15T16:06:45Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/infra/jms/ResponseMessage.java", "diffHunk": "@@ -58,7 +58,8 @@ private String serializableToString(final Serializable dataObject) {\n             return \"\";\n         } else {\n             final String stringValue = dataObject.toString();\n-            return stringValue.substring(0, Math.min(stringValue.length(), 40));\n+            //TODO temp change; reset to 40\n+            return stringValue.substring(0, Math.min(stringValue.length(), 128));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwNzcwMg==", "bodyText": "Missing final modifier on parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558407702", "createdAt": "2021-01-15T16:08:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -20,24 +21,41 @@\n @Component\n public class DefaultEncryptionDelegate implements EncryptionDelegate {\n \n-    private static final String ERROR_NO_PROVIDER = \"Could not find a provider\";\n-    private final List<EncryptionProvider> providers;\n+    private static final String ERROR_NO_PROVIDER = \"Could not find a provider of type %s; available providers are %s\";\n+    private final EnumMap<EncryptionProviderType, EncryptionProvider> encryptionProviders;\n \n     public DefaultEncryptionDelegate(final List<EncryptionProvider> encryptionProviders) {\n-        this.providers = encryptionProviders;\n+        this.encryptionProviders = new EnumMap<>(EncryptionProviderType.class);\n+        encryptionProviders.stream().forEach(p -> this.encryptionProviders.put(p.getType(), p));\n+    }\n+\n+    private EncryptionProvider getEncryptionProvider(EncryptionProviderType type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwODAyNQ==", "bodyText": "Missing final modifier on parameter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558408025", "createdAt": "2021-01-15T16:09:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -20,24 +21,41 @@\n @Component\n public class DefaultEncryptionDelegate implements EncryptionDelegate {\n \n-    private static final String ERROR_NO_PROVIDER = \"Could not find a provider\";\n-    private final List<EncryptionProvider> providers;\n+    private static final String ERROR_NO_PROVIDER = \"Could not find a provider of type %s; available providers are %s\";\n+    private final EnumMap<EncryptionProviderType, EncryptionProvider> encryptionProviders;\n \n     public DefaultEncryptionDelegate(final List<EncryptionProvider> encryptionProviders) {\n-        this.providers = encryptionProviders;\n+        this.encryptionProviders = new EnumMap<>(EncryptionProviderType.class);\n+        encryptionProviders.stream().forEach(p -> this.encryptionProviders.put(p.getType(), p));\n+    }\n+\n+    private EncryptionProvider getEncryptionProvider(EncryptionProviderType type) {\n+        if (!this.encryptionProviders.containsKey(type)) {\n+            throw new EncrypterException(String.format(ERROR_NO_PROVIDER, type, this.encryptionProviders));\n+        }\n+        return this.encryptionProviders.get(type);\n+    }\n+\n+    @Override\n+    public EncryptedSecret encrypt(final EncryptionProviderType encryptionProviderType, final byte[] secret,\n+            final String keyReference) {\n+        return this.getEncryptionProvider(encryptionProviderType).encrypt(secret, keyReference);\n+    }\n+\n+    @Override\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) {\n+        return this.getEncryptionProvider(secret.getType()).decrypt(secret, keyReference);\n     }\n \n     @Override\n-    public EncryptedSecret encrypt(final EncryptionProviderType encryptionProviderType, final Secret secret,\n+    public byte[] generateAes128BitsSecret(final EncryptionProviderType encryptionProviderType,\n             final String keyReference) {\n-        return this.providers.stream().filter(ep -> ep.getType().equals(encryptionProviderType)).findFirst().orElseThrow(\n-                () -> new EncrypterException(ERROR_NO_PROVIDER)).encrypt(secret, keyReference);\n+        return this.getEncryptionProvider(encryptionProviderType).generateAes128BitsSecret(keyReference);\n     }\n \n     @Override\n-    public Secret decrypt(final EncryptedSecret secret, final String keyReference) {\n-        return this.providers.stream().filter(ep -> ep.getType().equals(secret.getType())).findFirst().orElseThrow(\n-                () -> new EncrypterException(ERROR_NO_PROVIDER)).decrypt(secret, keyReference);\n+    public int getSecretByteLength(EncryptionProviderType encryptionProviderType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQwOTM2OQ==", "bodyText": "TODO comments should not be left in the code, For tasks to be completed outside of the scope of the story, a backlog item should be created.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558409369", "createdAt": "2021-01-15T16:11:18Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NjgzOQ=="}, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQxMzQyMQ==", "bodyText": "Missing final modifier on parameter (same for some other methods in this class).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558413421", "createdAt": "2021-01-15T16:17:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -72,16 +78,34 @@ public String getFormat() {\n \n             @Override\n             public byte[] getEncoded() {\n-                return key;\n+                return JreEncryptionProvider.this.key;\n             }\n         };\n     }\n \n+    @Override\n     protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n         return new IvParameterSpec(IV);\n     }\n \n+    @Override\n+    public byte[] generateAes128BitsSecret(String keyReference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODQxMzk2Ng==", "bodyText": "Missing final modifier on local variable keyGenerator (and exc a few lines down).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r558413966", "createdAt": "2021-01-15T16:18:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -72,16 +78,34 @@ public String getFormat() {\n \n             @Override\n             public byte[] getEncoded() {\n-                return key;\n+                return JreEncryptionProvider.this.key;\n             }\n         };\n     }\n \n+    @Override\n     protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n         return new IvParameterSpec(IV);\n     }\n \n+    @Override\n+    public byte[] generateAes128BitsSecret(String keyReference) {\n+        try {\n+            KeyGenerator keyGenerator = KeyGenerator.getInstance(\"AES\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afa64e391130bf2bb23e3cdb70e67cd2ca2a2d13"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cd5cf5b3b6ca8456f4c696aa07f1947a7430bb4", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8cd5cf5b3b6ca8456f4c696aa07f1947a7430bb4", "committedDate": "2021-01-19T09:34:10Z", "message": "SLIM-2597 changes resulting from PR review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4a35f2b30f2487b5988d5a87cdfeddc94a51588", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c4a35f2b30f2487b5988d5a87cdfeddc94a51588", "committedDate": "2021-01-19T09:34:22Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMDY5Mjc4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-571069278", "createdAt": "2021-01-19T09:47:29Z", "commit": {"oid": "c4a35f2b30f2487b5988d5a87cdfeddc94a51588"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwOTo0NzoyOVrOIWGbtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwOTo0NzoyOVrOIWGbtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA0NDk4MQ==", "bodyText": "\"Alliander N.V.\" does not look quite right in this copyright statement (\"Alliander.V.\").", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r560044981", "createdAt": "2021-01-19T09:47:29Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/config/SecretManagementPersistenceConfig.java", "diffHunk": "@@ -1,5 +1,5 @@\n /**\n- * Copyright 2020 Smart Society Services B.V.\n+ * Copyright 2020 Alliander.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a35f2b30f2487b5988d5a87cdfeddc94a51588"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMDc5MTY4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-571079168", "createdAt": "2021-01-19T09:58:45Z", "commit": {"oid": "c4a35f2b30f2487b5988d5a87cdfeddc94a51588"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwOTo1ODo0NVrOIWG60A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQwOTo1ODo0NVrOIWG60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDA1Mjk0NA==", "bodyText": "Sloppy formatting, the start of the class definition should not be on the same line as closing the javadoc.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r560052944", "createdAt": "2021-01-19T09:58:45Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -45,15 +45,13 @@\n /**\n  * Service for storing, activating and retrieving device keys.\n  * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n- */\n-public class SecretManagementService {\n+ */ public class SecretManagementService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4a35f2b30f2487b5988d5a87cdfeddc94a51588"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1bcfc807770a29b9f6ad27fc53937a1e42c731c", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a1bcfc807770a29b9f6ad27fc53937a1e42c731c", "committedDate": "2021-01-19T10:59:51Z", "message": "SLIM-2597 changes resulting from PR review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMTgzNTQw", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-571183540", "createdAt": "2021-01-19T12:12:02Z", "commit": {"oid": "a1bcfc807770a29b9f6ad27fc53937a1e42c731c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d3b7013f5cab8f90b335382a83ae97db9ddcee8", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3d3b7013f5cab8f90b335382a83ae97db9ddcee8", "committedDate": "2020-11-04T15:41:35Z", "message": "SLIM-2587 improved logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "918fa0af77d5209a90afe2feda26a10b508d10f2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/918fa0af77d5209a90afe2feda26a10b508d10f2", "committedDate": "2020-11-04T15:42:03Z", "message": "SLIM-2587 improved error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e8fdb6efcd05bbb8d54938605b56fffd520ab5", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/94e8fdb6efcd05bbb8d54938605b56fffd520ab5", "committedDate": "2020-11-04T15:47:58Z", "message": "SLIM-2587 added error logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42823c4945121a2839af295d4f80e9d9564778d1", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/42823c4945121a2839af295d4f80e9d9564778d1", "committedDate": "2020-11-04T18:22:35Z", "message": "SLIM-2587 use JRE instead of the default HSM encryption"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db7b0fb9bcd3f8060e1f1816edd1e6170c4b0d1", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6db7b0fb9bcd3f8060e1f1816edd1e6170c4b0d1", "committedDate": "2020-11-05T09:25:47Z", "message": "SLIM-2597 set JRE as default encryption provider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64b54011b8588d69659eaa5cee0058582f1b2731", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/64b54011b8588d69659eaa5cee0058582f1b2731", "committedDate": "2020-11-05T09:27:29Z", "message": "SLIM-2597 removed redundant JRE encryption provider setting (didnt work anyway)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcfad416ca6509c48ff18755b6fa6833bf317bf0", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bcfad416ca6509c48ff18755b6fa6833bf317bf0", "committedDate": "2020-11-05T13:10:46Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975268fd83ee7af5c0f2cd3a1989e4fd2f53026c", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/975268fd83ee7af5c0f2cd3a1989e4fd2f53026c", "committedDate": "2020-11-05T13:13:04Z", "message": "SLIM-2597 changed JRE to HSM (test failures)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe60f35e2c1840347f6ed483fa544010ef0958c", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/afe60f35e2c1840347f6ed483fa544010ef0958c", "committedDate": "2020-11-05T13:49:13Z", "message": "SLIM-2597 changed HSM to JRE (test failures)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305cc31d1cc35f95922f11b53f044f80db44163d", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/305cc31d1cc35f95922f11b53f044f80db44163d", "committedDate": "2020-11-05T15:26:23Z", "message": "Dummy commit to trigger PR build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff0cc472bc4c4b6229b2534222a922db11a90910", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ff0cc472bc4c4b6229b2534222a922db11a90910", "committedDate": "2020-11-09T08:09:34Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f983bb61cec6314755904220be15949705393022", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f983bb61cec6314755904220be15949705393022", "committedDate": "2020-11-09T08:10:17Z", "message": "SLIM-2597 fixed incorrect tag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDU2NjM3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-526456637", "createdAt": "2020-11-09T16:53:25Z", "commit": {"oid": "f983bb61cec6314755904220be15949705393022"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1MzoyNVrOHv4Kzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1MzoyNVrOHv4Kzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NTM5MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r519965391", "createdAt": "2020-11-09T16:53:25Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/repositories/DlmsSecurityKeyRepository.java", "diffHunk": "@@ -17,15 +17,22 @@\n import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n+/**\n+ * @deprecated with the introduction of secret-management, the security_key table has become obsolete.\n+ */\n+@Deprecated\n @Repository\n public interface DlmsSecurityKeyRepository extends JpaRepository<SecurityKey, Long> {\n \n+    @Deprecated\n     @Query(\"SELECT s FROM SecurityKey s JOIN FETCH s.dlmsDevice WHERE s.securityKeyType = (:securityKeyType)\")\n     public List<SecurityKey> findBySecurityKeyType(@Param(\"securityKeyType\") SecurityKeyType securityKeyType);\n \n+    @Deprecated\n     SecurityKey findByDlmsDeviceAndSecurityKeyTypeAndValidToIsNull(DlmsDevice dlmsDevice,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f983bb61cec6314755904220be15949705393022"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDU2NjUx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-526456651", "createdAt": "2020-11-09T16:53:26Z", "commit": {"oid": "f983bb61cec6314755904220be15949705393022"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1MzoyNlrOHv4K5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1MzoyNlrOHv4K5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NTQxNQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r519965415", "createdAt": "2020-11-09T16:53:26Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/repositories/DlmsSecurityKeyRepository.java", "diffHunk": "@@ -17,15 +17,22 @@\n import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n+/**\n+ * @deprecated with the introduction of secret-management, the security_key table has become obsolete.\n+ */\n+@Deprecated\n @Repository\n public interface DlmsSecurityKeyRepository extends JpaRepository<SecurityKey, Long> {\n \n+    @Deprecated\n     @Query(\"SELECT s FROM SecurityKey s JOIN FETCH s.dlmsDevice WHERE s.securityKeyType = (:securityKeyType)\")\n     public List<SecurityKey> findBySecurityKeyType(@Param(\"securityKeyType\") SecurityKeyType securityKeyType);\n \n+    @Deprecated\n     SecurityKey findByDlmsDeviceAndSecurityKeyTypeAndValidToIsNull(DlmsDevice dlmsDevice,\n             SecurityKeyType securityKeyType);\n \n+    @Deprecated\n     SecurityKey findByDlmsDeviceAndSecurityKeyTypeAndValidToNotNull(DlmsDevice dlmsDevice,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f983bb61cec6314755904220be15949705393022"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDU2Njgy", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-526456682", "createdAt": "2020-11-09T16:53:27Z", "commit": {"oid": "f983bb61cec6314755904220be15949705393022"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1MzoyN1rOHv4LBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjo1MzoyN1rOHv4LBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk2NTQ0Ng==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r519965446", "createdAt": "2020-11-09T16:53:27Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/repositories/DlmsSecurityKeyRepository.java", "diffHunk": "@@ -17,15 +17,22 @@\n import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n+/**\n+ * @deprecated with the introduction of secret-management, the security_key table has become obsolete.\n+ */\n+@Deprecated\n @Repository\n public interface DlmsSecurityKeyRepository extends JpaRepository<SecurityKey, Long> {\n \n+    @Deprecated\n     @Query(\"SELECT s FROM SecurityKey s JOIN FETCH s.dlmsDevice WHERE s.securityKeyType = (:securityKeyType)\")\n     public List<SecurityKey> findBySecurityKeyType(@Param(\"securityKeyType\") SecurityKeyType securityKeyType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f983bb61cec6314755904220be15949705393022"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b66ad7da974da5fb9e814d3d24b293b6cb899084", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b66ad7da974da5fb9e814d3d24b293b6cb899084", "committedDate": "2020-11-10T07:08:01Z", "message": "SLIM-2597 code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d272878352ed7957f583fbca632370cf4b204c7f", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d272878352ed7957f583fbca632370cf4b204c7f", "committedDate": "2020-11-10T07:12:07Z", "message": "SLIM-2597 code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1662d898a9b29b6a5212068b65d4b215b7c0ab3", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b1662d898a9b29b6a5212068b65d4b215b7c0ab3", "committedDate": "2020-11-10T07:12:25Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTE5NzUz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-526919753", "createdAt": "2020-11-10T07:27:14Z", "commit": {"oid": "b1662d898a9b29b6a5212068b65d4b215b7c0ab3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNzoxNFrOHwPPew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNzoxNFrOHwPPew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MzQxOQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r520343419", "createdAt": "2020-11-10T07:27:14Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java", "diffHunk": "@@ -76,24 +84,35 @@ public void run() {\n         LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n \n         try {\n-            this.initDevice();\n+            this.findDevice();\n         } catch (final Exception e) {\n-            LOGGER.error(\"Unexpected exception: {}\", e);\n+            LOGGER.error(\"Could not find device\", e);\n+            //TODO why try to find device if you don't do anything with the result?!?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1662d898a9b29b6a5212068b65d4b215b7c0ab3"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2OTE5NzY1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-526919765", "createdAt": "2020-11-10T07:27:15Z", "commit": {"oid": "b1662d898a9b29b6a5212068b65d4b215b7c0ab3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNzoxNVrOHwPPgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzoyNzoxNVrOHwPPgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MzQyNA==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r520343424", "createdAt": "2020-11-10T07:27:15Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java", "diffHunk": "@@ -76,24 +84,35 @@ public void run() {\n         LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n \n         try {\n-            this.initDevice();\n+            this.findDevice();\n         } catch (final Exception e) {\n-            LOGGER.error(\"Unexpected exception: {}\", e);\n+            LOGGER.error(\"Could not find device\", e);\n+            //TODO why try to find device if you don't do anything with the result?!?\n+            //TODO return?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1662d898a9b29b6a5212068b65d4b215b7c0ab3"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93a9527b698926992fd4447604722a49fe9b5565", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/93a9527b698926992fd4447604722a49fe9b5565", "committedDate": "2020-11-10T11:16:01Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed5aa1c7d34a5094e1197f505d2e6d6943df0344", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ed5aa1c7d34a5094e1197f505d2e6d6943df0344", "committedDate": "2020-11-10T16:43:07Z", "message": "SLIM-2585 improved error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "459d42c689d20eec51a0cb22b0cac6580dd9a2f2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/459d42c689d20eec51a0cb22b0cac6580dd9a2f2", "committedDate": "2020-11-10T17:18:06Z", "message": "SLIM-2597 property comment wrt HSM usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6c41ea4cb431e3ffb2acf2e0c517f58e6245702", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b6c41ea4cb431e3ffb2acf2e0c517f58e6245702", "committedDate": "2020-11-10T17:58:03Z", "message": "SLIM-2597 added provisional Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a4ed743d13ec75712a311d49ea6cb59eed724f6", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2a4ed743d13ec75712a311d49ea6cb59eed724f6", "committedDate": "2020-11-10T20:01:40Z", "message": "SLIM-2597 improved error handling, javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82e16479eec8a242c4d770860c397e82470f3e2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a82e16479eec8a242c4d770860c397e82470f3e2", "committedDate": "2020-11-10T20:06:26Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTc2Njg2", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-527576686", "createdAt": "2020-11-10T20:21:27Z", "commit": {"oid": "a82e16479eec8a242c4d770860c397e82470f3e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyMToyN1rOHwuLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyMToyN1rOHwuLcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MDI4OA==", "bodyText": "Return an empty array instead of null.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r520850288", "createdAt": "2020-11-10T20:21:27Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -1,181 +1,294 @@\n /**\n  * Copyright 2016 Smart Society Services B.V.\n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  */\n package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n \n+import static java.util.stream.Collectors.toList;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.Optional;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.codec.binary.Hex;\n-import org.apache.commons.lang3.NotImplementedException;\n import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n-import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.DlmsDevice;\n import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n-import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n-import org.opensmartgridplatform.shared.security.EncryptedSecret;\n-import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n-import org.opensmartgridplatform.shared.security.providers.RsaEncryptionProvider;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n+import org.opensmartgridplatform.shared.security.EncryptionService;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n+import org.opensmartgridplatform.shared.security.RsaEncryptionService;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetNewSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetNewSecretsResponse;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretType;\n import org.opensmartgridplatform.ws.schema.core.secret.management.SecretTypes;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n @Slf4j\n public class SecretManagementService implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+    @Autowired\n+    private RsaEncryptionService rsaEncryptionService;\n+\n+    @Autowired\n+    private EncryptionService aesEncryptionService;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {\n+        this.soapRsaEncrypter = soapRsaEncrypter;\n         this.secretManagementClient = secretManagementClient;\n     }\n \n     @Override\n-    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n-        throw new NotImplementedException();\n+    public byte[] rsaDecrypt(final byte[] externallyEncryptedKey) throws FunctionalException {\n+        try {\n+            return this.rsaEncryptionService.decrypt(externallyEncryptedKey);\n+        } catch (final Exception e) {\n+            LOGGER.error(\"Unexpected exception during decryption\", e);\n+            throw new FunctionalException(FunctionalExceptionType.DECRYPTION_EXCEPTION, ComponentType.PROTOCOL_DLMS, e);\n+        }\n     }\n \n     @Override\n-    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    public byte[] getKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n     @Override\n-    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    public Map<SecurityKeyType, byte[]> getKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = this.createGetSecretsRequest(deviceIdentification, keyTypes);\n+        GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(request);\n+        this.validateGetResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n     @Override\n-    public byte[] getDlmsMasterKey(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    public byte[] getNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving new {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n     @Override\n-    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n-\n-            log.trace(\"DlmsAuthenticationKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n-\n-            return decryptedKey;\n-        } catch (Exception e) {\n-            throw new EncrypterException(\"Error while retrieving authentication key\", e);\n-        }\n+    public Map<SecurityKeyType, byte[]> getNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = this.createGetNewSecretsRequest(deviceIdentification, keyTypes);\n+        GetNewSecretsResponse response = this.secretManagementClient.getNewSecretsRequest(request);\n+        this.validateGetNewResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n+    private void validateGetResponse(List<SecurityKeyType> keyTypes, GetSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+    }\n \n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+    private void validateGetNewResponse(List<SecurityKeyType> keyTypes, GetNewSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+    }\n \n-            log.trace(\"DlmsGlobalUnicastEncryptionKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n+    private Map<SecurityKeyType, byte[]> convertSoapSecretsToSecretMapByType(List<TypedSecret> soapSecrets) {\n+        Function<TypedSecret, SecurityKeyType> convertType = ts -> SecurityKeyType.fromSecretType(ts.getType());\n+        Function<TypedSecret, byte[]> convertSecret = ts -> this.decryptSoapSecret(ts,false);\n+        return soapSecrets.stream().collect(Collectors.toMap(convertType, convertSecret));\n+    }\n \n-            return decryptedKey;\n+    private GetSecretsRequest createGetSecretsRequest(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = new GetSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n+    }\n \n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while retrieving encryption key\", e);\n-        }\n-        return new byte[0];\n+    private GetNewSecretsRequest createGetNewSecretsRequest(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = new GetNewSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n     }\n \n     @Override\n-    public byte[] getMbusDefaultKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    public void storeNewKey(String deviceIdentification, SecurityKeyType keyType, byte[] key) {\n+        Map<SecurityKeyType, byte[]> keysByType = new HashMap<>();\n+        keysByType.put(keyType, key);\n+        this.storeNewKeys(deviceIdentification, keysByType);\n     }\n \n     @Override\n-    public byte[] getMbusUserKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    public void storeNewKeys(String deviceIdentification, Map<SecurityKeyType, byte[]> keysByType) {\n+        this.validateKeys(keysByType);\n+        TypedSecrets typedSecrets = new TypedSecrets();\n+        List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n+        for (SecurityKeyType type : keysByType.keySet()) {\n+            TypedSecret ts = new TypedSecret();\n+            ts.setType(type.toSecretType());\n+            ts.setSecret(this.encryptSoapSecret(keysByType.get(type),true));\n+            typedSecretList.add(ts);\n+        }\n+        StoreSecretsRequest request = this.createStoreSecretsRequest(deviceIdentification, typedSecrets);\n+        this.secretManagementClient.storeSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] getDlmsPassword(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    private void validateKeys(Map<SecurityKeyType, byte[]> keysByType) {\n+        long nrNulls = keysByType.values().stream().filter(key -> key == null).count();\n+        if (nrNulls > 0) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Provided %s keys, %s of which were NULL\", keysByType.size(), nrNulls));\n+        }\n     }\n \n-    @Override\n-    public DlmsDevice storeNewKey(DlmsDevice device, byte[] encryptedKey, SecurityKeyType keyType) {\n-        throw new NotImplementedException();\n+    private StoreSecretsRequest createStoreSecretsRequest(String deviceIdentification, TypedSecrets typedSecrets) {\n+        StoreSecretsRequest request = new StoreSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setTypedSecrets(typedSecrets);\n+        return request;\n     }\n \n     @Override\n-    public DlmsDevice validateNewKey(DlmsDevice device, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    public void activateNewKey(String deviceIdentification, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        this.activateNewKeys(deviceIdentification, Arrays.asList(keyType));\n     }\n \n     @Override\n-    public byte[] generateKey() {\n-        throw new NotImplementedException();\n+    public void activateNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        ActivateSecretsRequest request = new ActivateSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        this.secretManagementClient.activateSecretsRequest(request);\n     }\n \n     @Override\n-    public byte[] generateAndEncryptKey() {\n-        throw new NotImplementedException();\n+    public boolean hasNewSecretOfType(String deviceIdentification, SecurityKeyType keyType) {\n+        HasNewSecretRequest request = new HasNewSecretRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretType(keyType.toSecretType());\n+        HasNewSecretResponse response = this.secretManagementClient.hasNewSecretRequest(request);\n+        return response.isHasNewSecret();\n     }\n \n     @Override\n-    public byte[] encryptMbusUserKey(byte[] mbusDefaultKey, byte[] mbusUserKey) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    public byte[] generate128BitsKeyAndStoreAsNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        return this.generate128BitsKeysAndStoreAsNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    private Optional<TypedSecret> getTypedSecretFromSoapResponse(GetSecretsResponse response, SecretType secretType) {\n+    /**\n+     * Generates a new key that can be used as DLMS master key, authentication\n+     * key, global unicast encryption key, M-Bus Default key or M-Bus User key.\n+     * <p>\n+     * The master keys (DLMS master or M-Bus Default) cannot be changed on a\n+     * device, but can be generated for use in tests or with simulated devices.\n+     *\n+     * @return a new 128bits key, unencrypted.\n+     */\n+    @Override\n+    public Map<SecurityKeyType, byte[]> generate128BitsKeysAndStoreAsNewKeys(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        SecretTypes secretTypes = new SecretTypes();\n+        GenerateAndStoreSecretsRequest request = this\n+                .createGenerateAndStoreSecretsRequest(deviceIdentification, secretTypes);\n+        secretTypes.getSecretType().addAll(keyTypes.stream().map(SecurityKeyType::toSecretType).collect(toList()));\n+\n+        GenerateAndStoreSecretsResponse response = this.secretManagementClient.generateAndStoreSecrets(request);\n         TypedSecrets typedSecrets = response.getTypedSecrets();\n         List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n-\n-        return typedSecretList.stream().filter(typedSecret -> typedSecret.getType() == secretType).findFirst();\n+        this.validateGenerateAndStoreResponse(keyTypes, response, typedSecretList);\n+        return this.convertSoapSecretsToSecretMapByType(typedSecrets.getTypedSecret());\n     }\n \n-    private GetSecretsRequest getSoapRequestForKey(String deviceIdentification, SecretType secretType) {\n-        GetSecretsRequest request = new GetSecretsRequest();\n+    private GenerateAndStoreSecretsRequest createGenerateAndStoreSecretsRequest(String deviceIdentification,\n+            SecretTypes secretTypes) {\n+        GenerateAndStoreSecretsRequest request = new GenerateAndStoreSecretsRequest();\n         request.setDeviceId(deviceIdentification);\n-        request.setSecretTypes(new SecretTypes());\n-        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n-        secretTypeList.add(secretType);\n+        request.setSecretTypes(secretTypes);\n         return request;\n     }\n \n-    private byte[] decryptSoapSecret(String deviceIdentification, TypedSecret typedSecret) {\n+    private void validateGenerateAndStoreResponse(List<SecurityKeyType> keyTypes,\n+            GenerateAndStoreSecretsResponse response, List<TypedSecret> typedSecretList) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+        typedSecretList.forEach(ts -> {\n+            if (ts.getSecret() == null) {\n+                throw new IllegalStateException(String.format(\"Generated a NULL key (key_type=%s)\", ts.getType()));\n+            }\n+        });\n+    }\n+\n+    private void validateOsgpResultAndTypedSecrets(OsgpResultType result, Object fault, TypedSecrets typedSecrets,\n+            int expectedNrKeys) {\n+        if (!OsgpResultType.OK.equals(result)) {\n+            throw new IllegalStateException(\"Could not generate and store keys in secret-mgmt: \" + fault.toString());\n+        } else if (typedSecrets == null || typedSecrets.getTypedSecret() == null) {\n+            throw new IllegalStateException(\"No secrets in response\");\n+        } else if (expectedNrKeys != typedSecrets.getTypedSecret().size()) {\n+            throw new IllegalStateException(\n+                    String.format(\"Unexpected number of secrets in response: expected %s but \" + \"found %s\",\n+                            expectedNrKeys, typedSecrets.getTypedSecret().size()));\n+        }\n+    }\n+\n+    private byte[] decryptSoapSecret(TypedSecret typedSecret, boolean exceptionOnNull) {\n+        boolean nullValue = typedSecret.getSecret() == null || typedSecret.getSecret().isEmpty();\n+        if (exceptionOnNull && nullValue) {\n+            throw new IllegalArgumentException(\"Cannot decrypt NULL value\");\n+        } else if (!exceptionOnNull && nullValue) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82e16479eec8a242c4d770860c397e82470f3e2"}, "originalPosition": 354}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b71d5dfa9a1c93b030d83e373039b88b888127e", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0b71d5dfa9a1c93b030d83e373039b88b888127e", "committedDate": "2020-11-11T11:27:25Z", "message": "SLIM-2597 added encryption keys to RSA encrypters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a33011b574726fee795cc5a11512c7c89c1e3cd", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9a33011b574726fee795cc5a11512c7c89c1e3cd", "committedDate": "2020-11-11T11:27:45Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c33ad69f7e3f63dd03257feb264d209ee40a9063", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c33ad69f7e3f63dd03257feb264d209ee40a9063", "committedDate": "2020-11-11T13:38:36Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6ab4840746253027635d8e1dd62c47376b64599", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d6ab4840746253027635d8e1dd62c47376b64599", "committedDate": "2020-11-11T15:28:36Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe0089dac7cf66db3a9383f1198100cf4ef33395", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fe0089dac7cf66db3a9383f1198100cf4ef33395", "committedDate": "2020-11-12T13:47:45Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49f25859cbd9ad221945a8f5c0d285c1e95b3038", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/49f25859cbd9ad221945a8f5c0d285c1e95b3038", "committedDate": "2020-11-12T13:47:58Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f57b867c7858cfcc02435b4182dffd4da6288c3", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5f57b867c7858cfcc02435b4182dffd4da6288c3", "committedDate": "2020-11-12T14:06:15Z", "message": "SLIM-2597 fixed compilation failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b558cfa5038f6196739fa5c96f7518a4f26f81fa", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b558cfa5038f6196739fa5c96f7518a4f26f81fa", "committedDate": "2020-11-12T14:07:29Z", "message": "SLIM-2597 fixed compilation failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878b5be6f9404cebdfed8e17c6d8c75dc12a382f", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/878b5be6f9404cebdfed8e17c6d8c75dc12a382f", "committedDate": "2020-11-12T14:42:00Z", "message": "SLIM-2597 fixed compilation failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MTY2Njg1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-529166685", "createdAt": "2020-11-12T14:54:42Z", "commit": {"oid": "878b5be6f9404cebdfed8e17c6d8c75dc12a382f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1NDo0MlrOHx-jHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo1NDo0MlrOHx-jHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2NzA2OQ==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r522167069", "createdAt": "2020-11-12T14:54:42Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -38,144 +47,230 @@\n public class SecretManagementService implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    //@Autowired\n+    //private EncryptionService aesEncryptionService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "878b5be6f9404cebdfed8e17c6d8c75dc12a382f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ba399636f400d309698aedf9b6d99c97b05b6fd", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3ba399636f400d309698aedf9b6d99c97b05b6fd", "committedDate": "2020-11-13T15:17:42Z", "message": "Removed interface SecurityKeyService; replaced with SecretMgmtService"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd16270414d364dc9e82609ef9fd4e9cde2be8df", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/dd16270414d364dc9e82609ef9fd4e9cde2be8df", "committedDate": "2020-11-13T15:22:17Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTYzNDEz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-530163413", "createdAt": "2020-11-13T15:35:24Z", "commit": {"oid": "dd16270414d364dc9e82609ef9fd4e9cde2be8df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozNToyNFrOHyzGnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozNToyNFrOHyzGnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyODEyNA==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r523028124", "createdAt": "2020-11-13T15:35:24Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -35,147 +44,318 @@\n \n @Service\n @Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService { //implements SecurityKeyService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd16270414d364dc9e82609ef9fd4e9cde2be8df"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTYzNDIy", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-530163422", "createdAt": "2020-11-13T15:35:25Z", "commit": {"oid": "dd16270414d364dc9e82609ef9fd4e9cde2be8df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozNToyNVrOHyzGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNTozNToyNVrOHyzGqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAyODEzNw==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException', as it cannot be thrown from method's body.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r523028137", "createdAt": "2020-11-13T15:35:25Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -35,147 +44,318 @@\n \n @Service\n @Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService { //implements SecurityKeyService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    //@Autowired\n+    //private EncryptionService aesEncryptionService;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {\n+        this.soapRsaEncrypter = soapRsaEncrypter;\n         this.secretManagementClient = secretManagementClient;\n     }\n \n-    @Override\n-    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve an active key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    //@Override\n+    public byte[] getKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the active keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    //@Override\n+    public Map<SecurityKeyType, byte[]> getKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = this.createGetSecretsRequest(deviceIdentification, keyTypes);\n+        GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(request);\n+        this.validateGetResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve a new (not yet activated) key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    //@Override\n+    public byte[] getNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving new {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] getDlmsMasterKey(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the new (not yet activated) keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    //@Override\n+    public Map<SecurityKeyType, byte[]> getNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = this.createGetNewSecretsRequest(deviceIdentification, keyTypes);\n+        GetNewSecretsResponse response = this.secretManagementClient.getNewSecretsRequest(request);\n+        this.validateGetNewResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n-\n-            log.trace(\"DlmsAuthenticationKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n-\n-            return decryptedKey;\n-        } catch (Exception e) {\n-            throw new EncrypterException(\"Error while retrieving authentication key\", e);\n-        }\n+    private void validateGetResponse(List<SecurityKeyType> keyTypes, GetSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n     }\n \n-    @Override\n-    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+    private void validateGetNewResponse(List<SecurityKeyType> keyTypes, GetNewSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+    }\n \n-            log.trace(\"DlmsGlobalUnicastEncryptionKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n+    private Map<SecurityKeyType, byte[]> convertSoapSecretsToSecretMapByType(List<TypedSecret> soapSecrets) {\n+        Function<TypedSecret, SecurityKeyType> convertType = ts -> SecurityKeyType.fromSecretType(ts.getType());\n+        Function<TypedSecret, byte[]> convertSecret = ts -> this.decryptSoapSecret(ts,false);\n+        return soapSecrets.stream().collect(Collectors.toMap(convertType, convertSecret));\n+    }\n \n-            return decryptedKey;\n+    private GetSecretsRequest createGetSecretsRequest(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = new GetSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n+    }\n \n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while retrieving encryption key\", e);\n-        }\n-        return new byte[0];\n+    private GetNewSecretsRequest createGetNewSecretsRequest(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = new GetNewSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n     }\n \n-    @Override\n-    public byte[] getMbusDefaultKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Store new key\n+     * <p>\n+     * A new key is a security key with a device which status NEW.\n+     * This status is used when the new key is known, but not yet set on the device.\n+     * <p>\n+     * <strong>CAUTION:</strong> Only call this method when a successful\n+     * connection with the device has been set up (that is: a valid\n+     * communication key that works is known), and you are sure any existing new\n+     * key data that is not activated yet (for instance a new key stored earlier in an\n+     * attempt to replace the communication key that got aborted).<br>\n+     * <p>\n+     * The moment the new key is known to be transferred to the device, make\n+     * sure to activate it by calling\n+     * {@link #activateNewKey(String, SecurityKeyType)}.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param key\n+     *         key to store, unencrypted\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @see #activateNewKey(String, SecurityKeyType)\n+     */\n+    //@Override\n+    public void storeNewKey(String deviceIdentification, SecurityKeyType keyType, byte[] key) {\n+        Map<SecurityKeyType, byte[]> keysByType = new HashMap<>();\n+        keysByType.put(keyType, key);\n+        this.storeNewKeys(deviceIdentification, keysByType);\n     }\n \n-    @Override\n-    public byte[] getMbusUserKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    //@Override\n+    public void storeNewKeys(String deviceIdentification, Map<SecurityKeyType, byte[]> keysByType) {\n+        this.validateKeys(keysByType);\n+        TypedSecrets typedSecrets = new TypedSecrets();\n+        List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n+        for (SecurityKeyType type : keysByType.keySet()) {\n+            TypedSecret ts = new TypedSecret();\n+            ts.setType(type.toSecretType());\n+            ts.setSecret(this.encryptSoapSecret(keysByType.get(type),true));\n+            typedSecretList.add(ts);\n+        }\n+        StoreSecretsRequest request = this.createStoreSecretsRequest(deviceIdentification, typedSecrets);\n+        this.secretManagementClient.storeSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] getDlmsPassword(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    private void validateKeys(Map<SecurityKeyType, byte[]> keysByType) {\n+        long nrNulls = keysByType.values().stream().filter(key -> key == null).count();\n+        if (nrNulls > 0) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Provided %s keys, %s of which were NULL\", keysByType.size(), nrNulls));\n+        }\n     }\n \n-    @Override\n-    public DlmsDevice storeNewKey(DlmsDevice device, byte[] encryptedKey, SecurityKeyType keyType) {\n-        throw new NotImplementedException();\n+    private StoreSecretsRequest createStoreSecretsRequest(String deviceIdentification, TypedSecrets typedSecrets) {\n+        StoreSecretsRequest request = new StoreSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setTypedSecrets(typedSecrets);\n+        return request;\n     }\n \n-    @Override\n-    public DlmsDevice validateNewKey(DlmsDevice device, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Updates the state of a new key from 'new' to 'active'\n+     * <p>\n+     * This method should be called to activate a new key stored with\n+     * {@link #storeNewKeys(String, Map)} after it has\n+     * been confirmed to be set on the device.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @throws ProtocolAdapterException\n+     *         if no new key is stored with the given device\n+     * @see #storeNewKeys(String, Map)\n+     */\n+    //@Override\n+    public void activateNewKey(String deviceIdentification, SecurityKeyType keyType) throws ProtocolAdapterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd16270414d364dc9e82609ef9fd4e9cde2be8df"}, "originalPosition": 327}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba12210b740a8fa2ab40ca897b6716f96162146", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8ba12210b740a8fa2ab40ca897b6716f96162146", "committedDate": "2020-11-16T07:14:43Z", "message": "SLIM-2587 fixed bean name conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddc0dffb4e6cb889735275097244a70776e0deb0", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ddc0dffb4e6cb889735275097244a70776e0deb0", "committedDate": "2020-11-16T10:21:50Z", "message": "SLIM-2587 added printout to analyze failing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceff5d80dbffaac27cd7ff81f282efa87282f0dc", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ceff5d80dbffaac27cd7ff81f282efa87282f0dc", "committedDate": "2020-11-16T11:57:02Z", "message": "SLIM-2587 added logging for debug tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5b3d8cd58bdf3dc5c8f6839ae5d680cf2fd5a6", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6c5b3d8cd58bdf3dc5c8f6839ae5d680cf2fd5a6", "committedDate": "2020-11-16T14:00:51Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a06f460a9af3645abfccae0403a2667b8022b945", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a06f460a9af3645abfccae0403a2667b8022b945", "committedDate": "2020-11-16T21:22:36Z", "message": "SLIM-2587 fixed nasty bug (known bug regarding null-values in Map: https://bugs.openjdk.java.net/browse/JDK-8148463)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2e10197290934452622ce8a27940c9300e3e83", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0c2e10197290934452622ce8a27940c9300e3e83", "committedDate": "2020-11-16T21:29:06Z", "message": "SLIM-2587 improved secret mgmt error handling (for cucumber test case)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fc837b99ad040e7541184578507c278b5e481e4", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6fc837b99ad040e7541184578507c278b5e481e4", "committedDate": "2020-11-17T15:08:51Z", "message": "SLIM-2587 fix cucumber tests; changed exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa5eaeeec0fa66351d4fe864a102eb123fc8188a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fa5eaeeec0fa66351d4fe864a102eb123fc8188a", "committedDate": "2020-11-17T15:09:04Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b825972fc7d5c8e6eb317ad49f00107625125fe7", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b825972fc7d5c8e6eb317ad49f00107625125fe7", "committedDate": "2020-11-17T15:18:26Z", "message": "SLIM-2587 fix cucumber tests; changed exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3c7e3a6251ce698a8be8870b879bc1cd637ec4", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ca3c7e3a6251ce698a8be8870b879bc1cd637ec4", "committedDate": "2020-11-18T10:02:02Z", "message": "SLIM-2597 SonarQube issues resolved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40a643c8f5949e8f16de9c95013137600b4b1f2e", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/40a643c8f5949e8f16de9c95013137600b4b1f2e", "committedDate": "2020-11-18T11:29:08Z", "message": "SLIM-2597 fix SonarQube issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1ca8a8fb41916cc60c748b61b562f8a92e7d3d", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/cd1ca8a8fb41916cc60c748b61b562f8a92e7d3d", "committedDate": "2020-11-18T12:58:13Z", "message": "SLIM-2587 removed temporary test annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "048b6f6b8a4ca16133e9032189cab1047c2e8bb7", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/048b6f6b8a4ca16133e9032189cab1047c2e8bb7", "committedDate": "2020-11-18T13:05:15Z", "message": "SLIM-2587 renamed cucumber method to conform to secret mgmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80447a64fa038d241a2ddacc72b1ce785321cc50", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/80447a64fa038d241a2ddacc72b1ce785321cc50", "committedDate": "2020-11-18T13:05:52Z", "message": "SLIM-2587 code clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/def46ea1f392a779005d2d15bc5d805e0ea7bcbf", "committedDate": "2020-11-19T07:55:34Z", "message": "SLIM-2597 Code improvement/SonarQube"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTU3Nzc4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-534157778", "createdAt": "2020-11-19T07:57:07Z", "commit": {"oid": "80447a64fa038d241a2ddacc72b1ce785321cc50"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo1NzowN1rOH2QsDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo1NzowN1rOH2QsDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1ODU3NQ==", "bodyText": "Remove if not needed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526658575", "createdAt": "2020-11-19T07:57:07Z", "author": {"login": "carlogeenen"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -99,7 +134,7 @@ public void aDlmsDevice(final Map<String, String> inputSettings) {\n         this.createDeviceAuthorisationInCoreDatabase(device);\n \n         this.createDlmsDeviceInProtocolAdapterDatabase(inputSettings);\n-        this.createDlmsDeviceInSecretManagementDatabase(inputSettings);\n+        //this.createDlmsDeviceInSecretManagementDatabase(inputSettings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80447a64fa038d241a2ddacc72b1ce785321cc50"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NTM4NTc2", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-534538576", "createdAt": "2020-11-19T15:04:49Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowNDo0OVrOH2i8gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowNDo0OVrOH2i8gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1NzY5OA==", "bodyText": "Remove this line.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526957698", "createdAt": "2020-11-19T15:04:49Z", "author": {"login": "carlogeenen"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -93,25 +94,45 @@ public void setupTest() {\n     }\n \n     @Test\n-    public void getSecretsRequest() {\n+    public void getSecretsRequest() throws IOException {\n \n         /**\n          * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n          */\n         assertThat(this.secretRepository.count()).isEqualTo(2);\n         final Resource request = new ClassPathResource(\"test-requests/getSecrets.xml\");\n-        final Resource expectedResponse = new ClassPathResource(\"test-responses/getSecrets.xml\");\n+        this.mockWebServiceClient.sendRequest(withPayload(request))\n+                                     .andExpect((request2, response) -> {\n+                final OutputStream outStream = new ByteArrayOutputStream();\n+                response.writeTo(outStream);\n+                final String outputString = outStream.toString();\n+                assertThat(outputString.contains(\"<ns2:Result>OK</ns2:Result>\")).isTrue();\n+                assertThat(outputString.contains(\"E_METER_AUTHENTICATION\")).isTrue();\n+                assertThat(outputString.contains(\"E_METER_ENCRYPTION_KEY_UNICAST\")).isTrue();\n+\n+            });\n+    }\n+\n+    @Test\n+    public void getSecretsRequest_noStoredSecretType() {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+        final Resource request = new ClassPathResource(\"test-requests/getSecrets_noStoredSecretType.xml\");\n         try {\n-           this.mockWebServiceClient.sendRequest(withPayload(request)).andExpect(\n-                   (request2, response) -> {\n-                       OutputStream outStream = new ByteArrayOutputStream();\n-                       response.writeTo(outStream);\n-                       String outputString = outStream.toString();\n-                       assertThat(outputString.contains(\"<ns2:Result>OK</ns2:Result>\")).isTrue();\n-                       assertThat(outputString.contains(\"E_METER_AUTHENTICATION\")).isTrue();\n-                       assertThat(outputString.contains(\"E_METER_ENCRYPTION_KEY_UNICAST\")).isTrue();\n-\n-                   });\n+            this.mockWebServiceClient.sendRequest(withPayload(request))\n+                                     .andExpect((request2, response) -> {\n+                final OutputStream outStream = new ByteArrayOutputStream();\n+                response.writeTo(outStream);\n+                final String outputString = outStream.toString();\n+                //System.out.println(outputString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Mjg5MjM4", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-534289238", "createdAt": "2020-11-19T10:42:02Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDo0MjowMlrOH2W8sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNzoxOToyMVrOH2pUhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2MTEzNg==", "bodyText": "This source file is missing the required license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526761136", "createdAt": "2020-11-19T10:42:02Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/config/SecretManagementPersistenceConfig.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.opensmartgridplatform.cucumber.platform.smartmetering.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MzY5MQ==", "bodyText": "Missing final modifier according to the code conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526773691", "createdAt": "2020-11-19T11:01:35Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/database/DlmsDatabase.java", "diffHunk": "@@ -69,24 +74,28 @@ private void insertDefaultData() {\n      */\n     @Transactional(transactionManager = \"txMgrDlms\")\n     public void prepareDatabaseForScenario() {\n-\n-        this.dlmsDSecurityKeyRepo.deleteAllInBatch();\n         this.dlmsDeviceRepo.deleteAllInBatch();\n         this.responseDataRepo.deleteAllInBatch();\n         this.responseUrlDataRepo.deleteAllInBatch();\n \n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n-        }\n-        Base.exec(\"DELETE FROM public.encrypted_secret;\");\n-        Base.exec(\"DELETE FROM public.encryption_key_reference;\");\n-        Base.exec(\"insert into public.encryption_key_reference (id, reference, encryption_provider_type, valid_from, valid_to, creation_time, modification_time, modified_by, version)\" +\n-                \"values (1, 1, 'JRE', '2019-06-17 09:25:46.000000', '2021-06-18 09:26:09.000000', '2019-06-18 09:26:23.000000', '2019-06-18 09:26:25.000000', 1, 1);\");\n-\n-        Base.close();\n+        this.secretRepository.deleteAllInBatch();\n+        this.encryptionKeyRepository.deleteAllInBatch();\n+        DbEncryptionKeyReference jreEncryptionKey = this.getJreEncryptionKey(new Date());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MzgxNw==", "bodyText": "Missing final modifier according to the code conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526773817", "createdAt": "2020-11-19T11:01:48Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/database/DlmsDatabase.java", "diffHunk": "@@ -69,24 +74,28 @@ private void insertDefaultData() {\n      */\n     @Transactional(transactionManager = \"txMgrDlms\")\n     public void prepareDatabaseForScenario() {\n-\n-        this.dlmsDSecurityKeyRepo.deleteAllInBatch();\n         this.dlmsDeviceRepo.deleteAllInBatch();\n         this.responseDataRepo.deleteAllInBatch();\n         this.responseUrlDataRepo.deleteAllInBatch();\n \n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n-        }\n-        Base.exec(\"DELETE FROM public.encrypted_secret;\");\n-        Base.exec(\"DELETE FROM public.encryption_key_reference;\");\n-        Base.exec(\"insert into public.encryption_key_reference (id, reference, encryption_provider_type, valid_from, valid_to, creation_time, modification_time, modified_by, version)\" +\n-                \"values (1, 1, 'JRE', '2019-06-17 09:25:46.000000', '2021-06-18 09:26:09.000000', '2019-06-18 09:26:23.000000', '2019-06-18 09:26:25.000000', 1, 1);\");\n-\n-        Base.close();\n+        this.secretRepository.deleteAllInBatch();\n+        this.encryptionKeyRepository.deleteAllInBatch();\n+        DbEncryptionKeyReference jreEncryptionKey = this.getJreEncryptionKey(new Date());\n+        this.encryptionKeyRepository.save(jreEncryptionKey);\n \n         this.insertDefaultData();\n     }\n \n+    private DbEncryptionKeyReference getJreEncryptionKey(Date now) {\n+        DbEncryptionKeyReference jreEncryptionKey = new DbEncryptionKeyReference();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjcyMQ==", "bodyText": "Missing empty line to separate the following method,", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526776721", "createdAt": "2020-11-19T11:06:40Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -89,7 +103,28 @@\n     @Autowired\n     private DeviceFirmwareModuleSteps deviceFirmwareModuleSteps;\n \n+    @Autowired\n+    private DbEncryptedSecretRepository encryptedSecretRepository;\n \n+    @Autowired\n+    private DbEncryptionKeyRepository encryptionKeyRepository;\n+\n+    private final SecurityKeyBuilder authenticationSecurityKeyBuilder = new SecurityKeyBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_AUTHENTICATION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_A_DB);\n+    private final SecurityKeyBuilder encryptionSecurityKeyBuilder = new SecurityKeyBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_ENCRYPTION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_E_DB);\n+    private final SecurityKeyBuilder masterSecurityKeyBuilder = new SecurityKeyBuilder()\n+            .setSecurityKeyType(SecurityKeyType.E_METER_MASTER).setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_M_DB);\n+    private final SecurityKeyBuilder passwordBuilder = new SecurityKeyBuilder()\n+            .setSecurityKeyType(SecurityKeyType.PASSWORD).setKey(PlatformSmartmeteringDefaults.PASSWORD);\n+    private final SecurityKeyBuilder mbusEncryptionSecurityKeyBuilder = new SecurityKeyBuilder()\n+            .setSecurityKeyType(SecurityKeyType.G_METER_ENCRYPTION)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_ENCRYPTION);\n+    private final SecurityKeyBuilder mbusMasterSecurityKeyBuilder = new SecurityKeyBuilder()\n+            .setSecurityKeyType(SecurityKeyType.G_METER_MASTER)\n+            .setKey(PlatformSmartmeteringDefaults.SECURITY_KEY_G_MASTER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NzI0OA==", "bodyText": "Missing final modifier according to the coding conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526777248", "createdAt": "2020-11-19T11:07:38Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -212,16 +246,14 @@ public void theNewKeysAreStoredInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyTa\n         assertThat(numberOfEncryptionKeys > 1).as(\"Number of encryption keys > 1\").isTrue();\n     }\n \n-    @Then(\"^the keys are not changed in the osgp_adapter_protocol_dlms database security_key table$\")\n+    @Then(\"^the keys are not changed in the secret_management database encrypted_secret table$\")\n     public void theKeysAreNotChangedInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyTable() {\n         final String keyDeviceIdentification = PlatformSmartmeteringKeys.DEVICE_IDENTIFICATION;\n         final String deviceIdentification = (String) ScenarioContext.current().get(keyDeviceIdentification);\n         assertThat(deviceIdentification)\n                 .as(\"Device identification must be in the scenario context for key \" + keyDeviceIdentification)\n                 .isNotNull();\n-\n-        final DlmsDevice dlmsDevice = this.findExistingDlmsDevice(deviceIdentification);\n-        final List<SecurityKey> securityKeys = dlmsDevice.getSecurityKeys();\n+        List<DbEncryptedSecret> securityKeys = this.findAllSecretsForDevice(deviceIdentification);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3ODYzOA==", "bodyText": "Missing final modifier according to the code conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526778638", "createdAt": "2020-11-19T11:09:59Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -232,29 +264,35 @@ public void theKeysAreNotChangedInTheOsgpAdapterProtocolDlmsDatabaseSecurityKeyT\n         int numberOfAuthenticationKeys = 0;\n         int numberOfEncryptionKeys = 0;\n \n-        for (final SecurityKey securityKey : securityKeys) {\n-            switch (securityKey.getSecurityKeyType()) {\n-            case E_METER_MASTER:\n+        for (final DbEncryptedSecret securityKey : securityKeys) {\n+            switch (securityKey.getSecretType()) {\n+            case E_METER_MASTER_KEY:\n                 numberOfMasterKeys += 1;\n                 break;\n-            case E_METER_AUTHENTICATION:\n+            case E_METER_AUTHENTICATION_KEY:\n                 numberOfAuthenticationKeys += 1;\n                 break;\n-            case E_METER_ENCRYPTION:\n+            case E_METER_ENCRYPTION_KEY_UNICAST:\n                 numberOfEncryptionKeys += 1;\n                 break;\n             default:\n                 // other keys are not counted\n             }\n-            assertThat(securityKey.getValidTo())\n-                    .as(\"security key \" + securityKey.getSecurityKeyType() + \" valid to date\").isNull();\n+            assertThat(securityKey.getSecretStatus()).as(\"security key \" + securityKey.getSecretType() + \" is active\")\n+                                                     .isEqualTo(SecretStatus.ACTIVE);\n         }\n \n         assertThat(numberOfMasterKeys).as(\"Number of master keys\").isEqualTo(1);\n         assertThat(numberOfAuthenticationKeys).as(\"Number of authentication keys\").isEqualTo(1);\n         assertThat(numberOfEncryptionKeys).as(\"Number of encryption keys\").isEqualTo(1);\n     }\n \n+    private List<DbEncryptedSecret> findAllSecretsForDevice(String deviceIdentification) {\n+        DbEncryptedSecret searchByIdExample = new DbEncryptedSecret();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MDcwOA==", "bodyText": "Missing final modifiers according to the coding conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526780708", "createdAt": "2020-11-19T11:13:24Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 301}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg3ODYyMg==", "bodyText": "Missing final modifier according to the coding conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526878622", "createdAt": "2020-11-19T13:27:18Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4MzA0NA==", "bodyText": "We shouldn't just leave TODOs in the code. Issues should either be resolved before finishing work on the feature, or should be managed through the backlog process if they don't need immediate attention to get a story done.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526883044", "createdAt": "2020-11-19T13:31:25Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) &&\n+                \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+            secretBuilders.add(this.passwordBuilder);\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.mbusMasterSecurityKeyBuilder);\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n             if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+                secretBuilders.add(this.mbusEncryptionSecurityKeyBuilder);\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n-        }\n-\n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n-\n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+            //TODO improve code to use provided parameters in general (also for other types)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 334}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NDAwNQ==", "bodyText": "Missing space between if and the opening brace according to the code conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526884005", "createdAt": "2020-11-19T13:32:05Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) &&\n+                \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+            secretBuilders.add(this.passwordBuilder);\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.mbusMasterSecurityKeyBuilder);\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n             if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+                secretBuilders.add(this.mbusEncryptionSecurityKeyBuilder);\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n-        }\n-\n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n-\n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+            //TODO improve code to use provided parameters in general (also for other types)\n+            if(inputSettings.containsKey(PlatformSmartmeteringKeys.SECURITY_KEY_E)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NTA4MA==", "bodyText": "Missing final modifier according to the code formatting conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526885080", "createdAt": "2020-11-19T13:32:47Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) &&\n+                \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+            secretBuilders.add(this.passwordBuilder);\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.mbusMasterSecurityKeyBuilder);\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n             if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+                secretBuilders.add(this.mbusEncryptionSecurityKeyBuilder);\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n-        }\n-\n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n-\n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+            //TODO improve code to use provided parameters in general (also for other types)\n+            if(inputSettings.containsKey(PlatformSmartmeteringKeys.SECURITY_KEY_E)) {\n+                String inputEncryptionKey = inputSettings.get(PlatformSmartmeteringKeys.SECURITY_KEY_E);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 336}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NTUxMg==", "bodyText": "Missing space between if and the opening brace and around != according to the code conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526885512", "createdAt": "2020-11-19T13:33:05Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) &&\n+                \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+            secretBuilders.add(this.passwordBuilder);\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.mbusMasterSecurityKeyBuilder);\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n             if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+                secretBuilders.add(this.mbusEncryptionSecurityKeyBuilder);\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n-        }\n-\n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n-\n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+            //TODO improve code to use provided parameters in general (also for other types)\n+            if(inputSettings.containsKey(PlatformSmartmeteringKeys.SECURITY_KEY_E)) {\n+                String inputEncryptionKey = inputSettings.get(PlatformSmartmeteringKeys.SECURITY_KEY_E);\n+                if(inputEncryptionKey!=null && !inputEncryptionKey.trim().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NzA1NA==", "bodyText": "Missing final modifier according to the code formatting conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526887054", "createdAt": "2020-11-19T13:34:12Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) &&\n+                \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+            secretBuilders.add(this.passwordBuilder);\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.mbusMasterSecurityKeyBuilder);\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n             if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+                secretBuilders.add(this.mbusEncryptionSecurityKeyBuilder);\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n-        }\n-\n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n-\n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+            //TODO improve code to use provided parameters in general (also for other types)\n+            if(inputSettings.containsKey(PlatformSmartmeteringKeys.SECURITY_KEY_E)) {\n+                String inputEncryptionKey = inputSettings.get(PlatformSmartmeteringKeys.SECURITY_KEY_E);\n+                if(inputEncryptionKey!=null && !inputEncryptionKey.trim().isEmpty()) {\n+                    secretBuilders.add(new SecurityKeyBuilder()\n+                            .setSecurityKeyType(SecurityKeyType.E_METER_ENCRYPTION)\n+                            .setKey(inputEncryptionKey));\n+                }\n+            } else {\n+                secretBuilders.add(this.encryptionSecurityKeyBuilder);\n+            }\n+            secretBuilders.add(this.masterSecurityKeyBuilder);\n+            secretBuilders.add(this.authenticationSecurityKeyBuilder);\n         }\n-\n-\n-        Base.exec(\"INSERT INTO encrypted_secret (device_identification,secret_type,encoded_secret,creation_time,encryption_key_reference_id)\" +\n-                \"VALUES ('TEST1024000000001', 'E_METER_AUTHENTICATION_KEY', 'c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1024000000001', 'E_METER_ENCRYPTION_KEY_UNICAST', '867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1024000000001', 'E_METER_MASTER_KEY', '55dc88791e6c8f6aff4c8be7714fb8d2ae3d02693ec474593acd3523ee032638', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE'));\");\n-\n-        Base.exec(\"INSERT INTO encrypted_secret (device_identification,secret_type,encoded_secret,creation_time,encryption_key_reference_id)\" +\n-                \"VALUES ('TEST1027000000001', 'E_METER_AUTHENTICATION_KEY', 'c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1027000000001', 'E_METER_ENCRYPTION_KEY_UNICAST', '867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1027000000001', 'E_METER_MASTER_KEY', '55dc88791e6c8f6aff4c8be7714fb8d2ae3d02693ec474593acd3523ee032638', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE'));\");\n-\n-        Base.close();\n+        DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 361}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg4NzY4Nw==", "bodyText": "Missing final modifiers according to the code formatting conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526887687", "createdAt": "2020-11-19T13:34:38Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/database/device/DlmsDeviceSteps.java", "diffHunk": "@@ -446,55 +487,61 @@ private void createDlmsDeviceInProtocolAdapterDatabase(final Map<String, String>\n         final ProtocolInfo protocolInfo = this.getProtocolInfo(inputSettings);\n \n         final DlmsDeviceBuilder dlmsDeviceBuilder = new DlmsDeviceBuilder().setProtocolName(protocolInfo);\n-        /*\n-         * Enable the necessary security key builders in the DLMS device builder\n-         * before calling withSettings. This allows the withSettings to be\n-         * called transitively on the enabled security key builders inside the\n-         * DLMS device builder.\n-         */\n+        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n+        this.dlmsDeviceRepository.save(dlmsDevice);\n+\n+        this.createDlmsDeviceInSecretManagementDatabase(dlmsDevice, inputSettings);\n+    }\n+\n+    private void createDlmsDeviceInSecretManagementDatabase(DlmsDevice dlmsDevice, Map<String,String> inputSettings) {\n         final String deviceType = inputSettings.getOrDefault(PlatformSmartmeteringKeys.DEVICE_TYPE, SMART_METER_E);\n-        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) && \"true\"\n-                .equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n-            dlmsDeviceBuilder.getPasswordBuilder().enable();\n+        List<SecurityKeyBuilder> secretBuilders = new ArrayList<>();\n+        if (inputSettings.containsKey(PlatformSmartmeteringKeys.LLS1_ACTIVE) &&\n+                \"true\".equals(inputSettings.get(PlatformSmartmeteringKeys.LLS1_ACTIVE))) {\n+            secretBuilders.add(this.passwordBuilder);\n         } else if (this.isGasSmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getMbusMasterSecurityKeyBuilder().enable();\n+            secretBuilders.add(this.mbusMasterSecurityKeyBuilder);\n             /*\n              * Don't insert a default value for the M-Bus User key. So only\n              * enable the builder if an M-Bus User key is explicitly configured\n              * in the step data.\n              */\n             if (inputSettings.containsKey(PlatformSmartmeteringKeys.MBUS_USER_KEY)) {\n-                dlmsDeviceBuilder.getMbusEncryptionSecurityKeyBuilder().enable();\n+                secretBuilders.add(this.mbusEncryptionSecurityKeyBuilder);\n             }\n         } else if (this.isESmartMeter(deviceType)) {\n-            dlmsDeviceBuilder.getEncryptionSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getMasterSecurityKeyBuilder().enable();\n-            dlmsDeviceBuilder.getAuthenticationSecurityKeyBuilder().enable();\n-        }\n-\n-        final DlmsDevice dlmsDevice = dlmsDeviceBuilder.withSettings(inputSettings).build();\n-        this.dlmsDeviceRepository.save(dlmsDevice);\n-\n-        if (!Base.hasConnection()) {\n-            Base.open(DatabaseConnectionParameters.getDriver(), String.format(\"jdbc:postgresql://%s:%s/%s\", DatabaseConnectionParameters.getHost(), DatabaseConnectionParameters.getPort(), DatabaseConnectionParameters.getDatabase()),\n-                    DatabaseConnectionParameters.getUser(), DatabaseConnectionParameters.getPassword());\n+            //TODO improve code to use provided parameters in general (also for other types)\n+            if(inputSettings.containsKey(PlatformSmartmeteringKeys.SECURITY_KEY_E)) {\n+                String inputEncryptionKey = inputSettings.get(PlatformSmartmeteringKeys.SECURITY_KEY_E);\n+                if(inputEncryptionKey!=null && !inputEncryptionKey.trim().isEmpty()) {\n+                    secretBuilders.add(new SecurityKeyBuilder()\n+                            .setSecurityKeyType(SecurityKeyType.E_METER_ENCRYPTION)\n+                            .setKey(inputEncryptionKey));\n+                }\n+            } else {\n+                secretBuilders.add(this.encryptionSecurityKeyBuilder);\n+            }\n+            secretBuilders.add(this.masterSecurityKeyBuilder);\n+            secretBuilders.add(this.authenticationSecurityKeyBuilder);\n         }\n-\n-\n-        Base.exec(\"INSERT INTO encrypted_secret (device_identification,secret_type,encoded_secret,creation_time,encryption_key_reference_id)\" +\n-                \"VALUES ('TEST1024000000001', 'E_METER_AUTHENTICATION_KEY', 'c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1024000000001', 'E_METER_ENCRYPTION_KEY_UNICAST', '867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1024000000001', 'E_METER_MASTER_KEY', '55dc88791e6c8f6aff4c8be7714fb8d2ae3d02693ec474593acd3523ee032638', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE'));\");\n-\n-        Base.exec(\"INSERT INTO encrypted_secret (device_identification,secret_type,encoded_secret,creation_time,encryption_key_reference_id)\" +\n-                \"VALUES ('TEST1027000000001', 'E_METER_AUTHENTICATION_KEY', 'c19fe80a22a0f6c5cdaad0826c4d204f23694ded08d811b66e9b845d9f2157d2', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1027000000001', 'E_METER_ENCRYPTION_KEY_UNICAST', '867424ac75b6d53c89276d304608321f0a1f6e401f453f84adf3477c7ee1623c', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE')),\" +\n-                \"('TEST1027000000001', 'E_METER_MASTER_KEY', '55dc88791e6c8f6aff4c8be7714fb8d2ae3d02693ec474593acd3523ee032638', NOW(), (SELECT id FROM public.encryption_key_reference where encryption_provider_type = 'JRE'));\");\n-\n-        Base.close();\n+        DbEncryptionKeyReference encryptionKeyRef = this.encryptionKeyRepository\n+                .findByTypeAndValid(EncryptionProviderType.JRE, new Date()).iterator().next();\n+        secretBuilders.stream()\n+                      .map(SecurityKeyBuilder::build)\n+                      .map(key -> this.createSecretFromKey(dlmsDevice.getDeviceIdentification(), encryptionKeyRef, key))\n+                      .forEach(this.encryptedSecretRepository::save);\n     }\n \n-    private void createDlmsDeviceInSecretManagementDatabase(final Map<String, String> inputSettings) {\n+    private DbEncryptedSecret createSecretFromKey(String deviceIdentification,\n+            DbEncryptionKeyReference encryptionKeyRef, SecurityKey key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MzY1MA==", "bodyText": "Missing final modifier according to the code conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526953650", "createdAt": "2020-11-19T14:59:38Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/java/org/opensmartgridplatform/cucumber/platform/smartmetering/glue/steps/ws/smartmetering/smartmeteringmonitoring/ActualMeterReadsSteps.java", "diffHunk": "@@ -56,7 +56,8 @@ public void theGetActualMeterReadsRequestGeneratingAnErrorIsReceived(final Map<S\n         assertThat(actualMeterReadsAsyncRequest).as(\"ActualMeterReadsAsyncRequest should not be null\").isNotNull();\n \n         try {\n-            this.responseClient.getResponse(actualMeterReadsAsyncRequest);\n+            ActualMeterReadsResponse response = this.responseClient.getResponse(actualMeterReadsAsyncRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1NzU0Mw==", "bodyText": "Having an empty line separating the scenarios would improve readability, and be more consistent with other feature files.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r526957543", "createdAt": "2020-11-19T15:04:37Z", "author": {"login": "bvdzwet"}, "path": "integration-tests/cucumber-tests-platform-smartmetering/src/test/resources/features/functional-exceptions/FunctionalExceptionsEncryptionKeys.feature", "diffHunk": "@@ -21,26 +20,10 @@ Feature: SmartMetering functional exceptions regarding encryption keys\n       | Encryption_key       | abc0123456789def  |\n     Then the replace keys response generating an error is received\n       | DeviceIdentification | TEST1024000000001 |\n-      | Result               | NOT_OK            |\n     And a SOAP fault should have been returned\n       | Code    |                  804 |\n       | Message | DECRYPTION_EXCEPTION |\n-    And the keys are not changed in the osgp_adapter_protocol_dlms database security_key table\n-  @Skip\n-  Scenario: HLS5 connect with an invalid key\n-    Given a dlms device\n-      | DeviceIdentification  | TEST1024000000001      |\n-      | DeviceType            | SMART_METER_E          |\n-      | Hls3active            | false                  |\n-      | Hls4active            | false                  |\n-      | Hls5active            | true                   |\n-      | SecurityKeyEncryption | @@INVALID_ENCRYPTION@@ |\n-    When the get actual meter reads request generating an error is received\n-      | DeviceIdentification | TEST1024000000001 |\n-    And a SOAP fault should have been returned\n-      | Code    |                         801 |\n-      | Message | INVALID_DLMS_KEY_ENCRYPTION |\n-  @Skip\n+    And the keys are not changed in the secret_management database encrypted_secret table\n   Scenario: HLS5 connect without an encryption key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNzU5Ng==", "bodyText": "This looks like something that may have been helpful during development of the tests, but we shouldn't leave commented code. (There are some more lines like this one in this class.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527007596", "createdAt": "2020-11-19T16:07:03Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/SoapServiceSecretManagementIT.java", "diffHunk": "@@ -138,6 +159,61 @@ public void storeSecretsRequest() {\n         assertThat(this.secretRepository.count()).isEqualTo(4);\n     }\n \n+    @Test\n+    public void storeSecretsRequest_alreadyNewSecretPresent() throws IOException {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+\n+        final Resource storeRequest = new ClassPathResource(\"test-requests/storeSecrets.xml\");\n+        final Resource expectedStoreResponse = new ClassPathResource(\"test-responses/storeSecrets.xml\");\n+        //Store secrets\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest)).andExpect(ResponseMatchers.noFault())\n+                                 .andExpect(ResponseMatchers.payload(expectedStoreResponse));\n+        //Store secrets again, while previously stored secret still have status NEW\n+        final String errorMessage = \"Expected 0 new secrets of type E_METER_AUTHENTICATION_KEY for device E0000000000000000, but 1 new secret(s) present\";\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest))\n+                                 .andExpect(ResponseMatchers.serverOrReceiverFault(errorMessage));\n+    }\n+\n+    @Test\n+    public void activateSecretsRequest() throws IOException {\n+\n+        /**\n+         * Note that the output depends, besides the value of the keys, also on both the db key and the soap key.\n+         */\n+        assertThat(this.secretRepository.count()).isEqualTo(2);\n+\n+        final Resource storeRequest = new ClassPathResource(\"test-requests/storeSecrets.xml\");\n+        final Resource activateRequest = new ClassPathResource(\"test-requests/activateSecrets.xml\");\n+        final Resource expectedStoreResponse = new ClassPathResource(\"test-responses/storeSecrets.xml\");\n+        final Resource expectedActivateResponse = new ClassPathResource(\"test-responses/activateSecrets.xml\");\n+        //Store secrets\n+        this.mockWebServiceClient.sendRequest(withPayload(storeRequest)).andExpect(ResponseMatchers.noFault())\n+                                 .andExpect(ResponseMatchers.payload(expectedStoreResponse));\n+        this.mockWebServiceClient.sendRequest(withPayload(activateRequest))\n+                                 //.andExpect((request, response) -> response.writeTo(System.out))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAxNzE5Ng==", "bodyText": "Annotation and method on the same line is not according to the formatting conventions.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527017196", "createdAt": "2020-11-19T16:19:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepositoryIT.java", "diffHunk": "@@ -49,10 +52,20 @@ public void persistTestData() {\n     }\n \n     @Test\n-    public void findIdOfValidMostRecent() {\n+    public void getSecretCount() {\n         assertThat(this.repository.count()).isEqualTo(1);\n-        final Long id = this.repository.findIdOfValidMostRecent(this.dbEncryptedSecret.getDeviceIdentification(),\n-                this.dbEncryptedSecret.getSecretType().name(), new Date());\n-        assertThat(id).isEqualTo(this.dbEncryptedSecret.getId());\n+        final Integer activeCount = this.repository.getSecretCount(this.dbEncryptedSecret.getDeviceIdentification(),\n+                this.dbEncryptedSecret.getSecretType(), SecretStatus.ACTIVE);\n+        assertThat(activeCount).isEqualTo(1);\n     }\n+\n+    @Test void findSecrets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAyNzEzNw==", "bodyText": "I see this a number of times, and think it looks odd.\nWhat you would expect in a unit test is that you set up an initial state, then act on the subject under test and then perform assertions.\nAsserting on the initial setup should not be necessary, as it is entirely under control, and not something that needs to be tested.\nAny reason it needs the repeated verification I might be missing?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527027137", "createdAt": "2020-11-19T16:33:12Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepositoryIT.java", "diffHunk": "@@ -49,10 +52,20 @@ public void persistTestData() {\n     }\n \n     @Test\n-    public void findIdOfValidMostRecent() {\n+    public void getSecretCount() {\n         assertThat(this.repository.count()).isEqualTo(1);\n-        final Long id = this.repository.findIdOfValidMostRecent(this.dbEncryptedSecret.getDeviceIdentification(),\n-                this.dbEncryptedSecret.getSecretType().name(), new Date());\n-        assertThat(id).isEqualTo(this.dbEncryptedSecret.getId());\n+        final Integer activeCount = this.repository.getSecretCount(this.dbEncryptedSecret.getDeviceIdentification(),\n+                this.dbEncryptedSecret.getSecretType(), SecretStatus.ACTIVE);\n+        assertThat(activeCount).isEqualTo(1);\n     }\n+\n+    @Test void findSecrets() {\n+        assertThat(this.repository.count()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNDQyNQ==", "bodyText": "This is not wrong, and you can leave it as is if you like it, but I would usually go for the \"higher level assertions\" (for lack of a better description) where available.\nFor instance assertThat(secretsList).hasSize(1); would do the same, with a bit nicer (in my opinion at least) default failure messages.\nThis is just one example, I have seen others like assertThat(text.contains(\"contents\")).isTrue() where you could use assertThat(text)\".contains(\"contents\").\nI might rephrase that as not using the AbstractIntegerAssert or a BooleanAssert, when you start from an object that has \"its own\" assert, like the ListAssert or the StringAssert, as the latter have a richer API and clearer default messages (including, I thought a nicer way to deal with null values should they ever occur).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527034425", "createdAt": "2020-11-19T16:42:50Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptedSecretRepositoryIT.java", "diffHunk": "@@ -49,10 +52,20 @@ public void persistTestData() {\n     }\n \n     @Test\n-    public void findIdOfValidMostRecent() {\n+    public void getSecretCount() {\n         assertThat(this.repository.count()).isEqualTo(1);\n-        final Long id = this.repository.findIdOfValidMostRecent(this.dbEncryptedSecret.getDeviceIdentification(),\n-                this.dbEncryptedSecret.getSecretType().name(), new Date());\n-        assertThat(id).isEqualTo(this.dbEncryptedSecret.getId());\n+        final Integer activeCount = this.repository.getSecretCount(this.dbEncryptedSecret.getDeviceIdentification(),\n+                this.dbEncryptedSecret.getSecretType(), SecretStatus.ACTIVE);\n+        assertThat(activeCount).isEqualTo(1);\n     }\n+\n+    @Test void findSecrets() {\n+        assertThat(this.repository.count()).isEqualTo(1);\n+        final List<DbEncryptedSecret> secretsList =\n+                this.repository.findSecrets(this.dbEncryptedSecret.getDeviceIdentification(),\n+                this.dbEncryptedSecret.getSecretType(), SecretStatus.ACTIVE);\n+        assertThat(secretsList.size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzOTg3Mw==", "bodyText": "I see this has been done earlier, but I don't think we ever used underscores in test method names in the GXF code base, making it look inconsistent if it is adopted in some classes.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527039873", "createdAt": "2020-11-19T16:49:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/integration-test/java/org/opensmartgridplatform/secretmanagement/application/repository/DbEncryptionKeyRepositoryIT.java", "diffHunk": "@@ -54,10 +53,10 @@ public void persistTestData() {\n \n     @Test\n     public void find_noValidTo() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1MTE1Mg==", "bodyText": "This source file is missing a required license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527051152", "createdAt": "2020-11-19T17:04:23Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/SecretStatus.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.opensmartgridplatform.secretmanagement.application.domain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA1ODQzNA==", "bodyText": "I am not entirely sure what is needed here and how far you would go to keep this safe, but given there are only getters it looks like the intention is that the internals are not to be modified.\nDid you consider cloning/copying the secret (setting it in the constructor, and returning it from the getter) and requiring secretType to be non-null?\n(Even if not needed immediately in the long run you may run into cases where you had made your utility data types unmodifiable.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527058434", "createdAt": "2020-11-19T17:14:05Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/domain/TypedSecret.java", "diffHunk": "@@ -8,29 +8,20 @@\n  */\n package org.opensmartgridplatform.secretmanagement.application.domain;\n \n+import lombok.Getter;\n+\n /**\n  * TypedSecret stores a secret (not necessarily an encrypted secret), along with it's type.\n  */\n+@Getter\n public class TypedSecret {\n-    private SecretType secretType;\n-    private String secret;\n-\n-    public String getSecret() {\n-        return this.secret;\n-    }\n-\n-    public SecretType getSecretType() {\n-        return this.secretType;\n-    }\n+    private final SecretType secretType;\n+    private final byte[] secret;\n \n-    public void setSecret(final String secret) {\n+    public TypedSecret(final byte[] secret, final SecretType secretType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA2MjE1MA==", "bodyText": "You could argue about how nice it looked before, but splitting a string in two like this, when on a single line, looks even worse to me.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527062150", "createdAt": "2020-11-19T17:19:21Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,158 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform\" + \".org/schemas/security/secretmanagement\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzY4OTgy", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-535368982", "createdAt": "2020-11-20T12:00:45Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Mjk0NjQx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-535294641", "createdAt": "2020-11-20T10:13:04Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoxMzowNFrOH3JbFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoyMToyM1rOH3ZAGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4ODExNw==", "bodyText": "I was a bit surprised to see this, and I see it apparently gets checked from a test with an invalid request.\nMy surprise comes from the expectation that all our web services are configured with a PayloadValidatingInterceptor.\nI then looked at the WebServiceConfig for osgp-secret-management and I see it is set up differently in a number of ways then the earlier web services that are part of the GXF code base,\nTo keep maintenance across the GXF code base, and in different deployment scenarios simpler I would expect a more similar set up as with the earlier existing web services.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527588117", "createdAt": "2020-11-20T10:13:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,158 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform\" + \".org/schemas/security/secretmanagement\";\n+    private static final String STR_MISSING_SECRET_TYPES = \"Missing input: secret types\";\n+    private static final String STR_MISSING_TYPED_SECRETS = \"Missing input: typed secrets\";\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n \n-    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n-                                    SoapEndpointDataTypeConverter converter) {\n+    public SecretManagementEndpoint(final SecretManagementService secretManagementService,\n+            final SoapEndpointDataTypeConverter converter) {\n         this.secretManagementService = secretManagementService;\n         this.converter = converter;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n     @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n-\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(getSecretsRequestToString(request));\n+            log.debug(this.requestToString(request));\n         }\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n+        final GetSecretsResponse response = new GetSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n         if (soapSecretTypes == null) {\n-            throw new TechnicalException(\"Missing input: secret types\");\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n         }\n-\n-        List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n-        List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n                 secretTypeList);\n-\n-        TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n-\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n         response.setResult(OsgpResultType.OK);\n-\n         log.trace(response.toString());\n+        return response;\n+    }\n \n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GetNewSecretsResponse response = new GetNewSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwMDQyMA==", "bodyText": "According to our logging guidelines debug would be the lowest level.\nWith regards to logging SOAP messages, I believe before the SecretManagementEndpoint we pretty consistently would be able to switch this on or off by configuration (using boolean property soap.message.logging.enabled and/or soap.message.printing.enabled) used with the WebServiceMonitorInterceptor.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527600420", "createdAt": "2020-11-20T10:34:15Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,158 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform\" + \".org/schemas/security/secretmanagement\";\n+    private static final String STR_MISSING_SECRET_TYPES = \"Missing input: secret types\";\n+    private static final String STR_MISSING_TYPED_SECRETS = \"Missing input: typed secrets\";\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n \n-    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n-                                    SoapEndpointDataTypeConverter converter) {\n+    public SecretManagementEndpoint(final SecretManagementService secretManagementService,\n+            final SoapEndpointDataTypeConverter converter) {\n         this.secretManagementService = secretManagementService;\n         this.converter = converter;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n     @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n-\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(getSecretsRequestToString(request));\n+            log.debug(this.requestToString(request));\n         }\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n+        final GetSecretsResponse response = new GetSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n         if (soapSecretTypes == null) {\n-            throw new TechnicalException(\"Missing input: secret types\");\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n         }\n-\n-        List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n-        List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n                 secretTypeList);\n-\n-        TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n-\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n         response.setResult(OsgpResultType.OK);\n-\n         log.trace(response.toString());\n+        return response;\n+    }\n \n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GetNewSecretsResponse response = new GetNewSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveNewSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n+        response.setTypedSecrets(soapTypedSecrets);\n+        response.setResult(OsgpResultType.OK);\n+        log.trace(response.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYwODMxMg==", "bodyText": "Beside my earlier comment that we would normally log requests and responses by use of a configurable interceptor (in which case this requestToString is not needed), I think the error message can be misleading for exceptions with any other request than the GetSecretsRequest (and there are some in this class).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527608312", "createdAt": "2020-11-20T10:47:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,158 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform\" + \".org/schemas/security/secretmanagement\";\n+    private static final String STR_MISSING_SECRET_TYPES = \"Missing input: secret types\";\n+    private static final String STR_MISSING_TYPED_SECRETS = \"Missing input: typed secrets\";\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n \n-    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n-                                    SoapEndpointDataTypeConverter converter) {\n+    public SecretManagementEndpoint(final SecretManagementService secretManagementService,\n+            final SoapEndpointDataTypeConverter converter) {\n         this.secretManagementService = secretManagementService;\n         this.converter = converter;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n     @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n-\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(getSecretsRequestToString(request));\n+            log.debug(this.requestToString(request));\n         }\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n+        final GetSecretsResponse response = new GetSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n         if (soapSecretTypes == null) {\n-            throw new TechnicalException(\"Missing input: secret types\");\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n         }\n-\n-        List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n-        List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n                 secretTypeList);\n-\n-        TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n-\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n         response.setResult(OsgpResultType.OK);\n-\n         log.trace(response.toString());\n+        return response;\n+    }\n \n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GetNewSecretsResponse response = new GetNewSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveNewSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n+        response.setTypedSecrets(soapTypedSecrets);\n+        response.setResult(OsgpResultType.OK);\n+        log.trace(response.toString());\n         return response;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n     @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) throws OsgpException {\n-\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload final StoreSecretsRequest request)\n+            throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n-        log.trace(request.toString());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final StoreSecretsResponse response = new StoreSecretsResponse();\n+        final TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n         if (soapTypedSecrets == null) {\n-            throw new TechnicalException(\"Missing input: typed secrets\");\n+            throw new TechnicalException(STR_MISSING_TYPED_SECRETS);\n         }\n-\n-        List<TypedSecret> typedSecretList = converter.convertToTypedSecrets(request.getTypedSecrets());\n-\n-        secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n-\n+        final List<TypedSecret> typedSecretList = this.converter.convertToTypedSecrets(soapTypedSecrets);\n+        this.secretManagementService.storeSecrets(request.getDeviceId(), typedSecretList);\n         response.setResult(OsgpResultType.OK);\n-\n         log.trace(response.toString());\n+        return response;\n+    }\n \n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"generateAndStoreSecretsRequest\")\n+    @ResponsePayload\n+    public GenerateAndStoreSecretsResponse generateAndStoreSecretsRequest(\n+            @RequestPayload final GenerateAndStoreSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'generateAndStoreSecretsRequest' for device {}\",\n+                request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GenerateAndStoreSecretsResponse response = new GenerateAndStoreSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(STR_MISSING_SECRET_TYPES);\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        List<TypedSecret> typedSecretList = this.secretManagementService.generateAndStoreSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        response.setResult(OsgpResultType.OK);\n+        response.setTypedSecrets(this.converter.convertToSoapTypedSecrets(typedSecretList));\n+        log.trace(response.toString());\n         return response;\n     }\n \n-    private String getSecretsRequestToString(GetSecretsRequest request) {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private <T> String requestToString(final T request) {\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         try {\n-            JAXBContext ctx = JAXBContext.newInstance(GetSecretsRequest.class);\n-            Marshaller marshaller = ctx.createMarshaller();\n+            final JAXBContext ctx = JAXBContext.newInstance(request.getClass());\n+            final Marshaller marshaller = ctx.createMarshaller();\n             marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n             marshaller.marshal(request, baos);\n-        } catch (JAXBException e) {\n+        } catch (final JAXBException e) {\n             log.error(\"Could not serialize GetSecretsRequest\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxNDU1NA==", "bodyText": "This class is missing a required license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527614554", "createdAt": "2020-11-20T10:59:26Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/ExceptionWrapper.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.opensmartgridplatform.secretmanagement.application.exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxNzg2Nw==", "bodyText": "I might be confused, but would a return be appropriate after this call to customizeFault with the wrapped exception?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527617867", "createdAt": "2020-11-20T11:05:23Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/exception/DetailSoapFaultMappingExceptionResolver.java", "diffHunk": "@@ -10,22 +10,31 @@\n \n import javax.xml.namespace.QName;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.opensmartgridplatform.shared.exceptionhandling.TechnicalException;\n import org.springframework.ws.soap.SoapFault;\n import org.springframework.ws.soap.SoapFaultDetail;\n import org.springframework.ws.soap.server.endpoint.SoapFaultMappingExceptionResolver;\n \n+@Slf4j\n public class DetailSoapFaultMappingExceptionResolver extends SoapFaultMappingExceptionResolver {\n \n     private static final QName MESSAGE = new QName(\"Message\");\n     private static final QName COMPONENT = new QName(\"Component\");\n \n     @Override\n     protected void customizeFault(Object endpoint, Exception ex, SoapFault fault) {\n+        log.error(\"Exception occured during SOAP request processing\", ex);\n         SoapFaultDetail detail = fault.addFaultDetail();\n-\n+        if(ex instanceof ExceptionWrapper) {\n+            this.customizeFault(endpoint, (Exception) ex.getCause(), fault);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY2NDczMg==", "bodyText": "This functional exception type looks fitting for the current SecretType values that all seem related to DLMS, and the current use of the SecretManagementService in the smart metering domain,\nI did however think this service is intended to be used not only for smart metering in the future. It isn't \"positioned\" in the code base as something DLMS specific anyway.\nMaybe a more neutral INVALID_KEY_FORMAT, or a specification of FunctionalException in a type that includes for instance the SecretType is better suited.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527664732", "createdAt": "2020-11-20T12:39:25Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,318 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.exception.ExceptionWrapper;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret)\n+                throws FunctionalException {\n+            byte[] aesEncrypted;\n+            try {\n+                aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            } catch (IllegalArgumentException iae) {\n+                throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_FORMAT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY3Mjk3NA==", "bodyText": "This log message looks fine, but I noticed that the encryptionProviderType is included in the exception message for when keyRefs is empty, but not when there are multiple keyRefs.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527672974", "createdAt": "2020-11-20T12:56:01Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,318 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.exception.ExceptionWrapper;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret)\n+                throws FunctionalException {\n+            byte[] aesEncrypted;\n+            try {\n+                aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            } catch (IllegalArgumentException iae) {\n+                throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_FORMAT,\n+                        ComponentType.SECRET_MANAGEMENT, iae);\n+            }\n+            String keyReference = dbEncryptedSecret.getEncryptionKeyReference().getReference();\n+            EncryptionProviderType providerType = dbEncryptedSecret.getEncryptionKeyReference()\n+                                                                   .getEncryptionProviderType();\n+            return new EncryptedTypedSecret(aesEncrypted, dbEncryptedSecret.getSecretType(), keyReference,\n+                    providerType);\n+        }\n+    }\n+\n     private final EncryptionDelegate encryptionDelegate;\n     private final EncryptionProviderType encryptionProviderType;\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n+    private final RsaEncrypter rsaEncrypter;\n \n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n-            final DbEncryptionKeyRepository keyRepository) {\n+            final DbEncryptionKeyRepository keyRepository, RsaEncrypter rsaEncrypter) {\n         this.encryptionDelegate = defaultEncryptionDelegate;\n         this.encryptionProviderType = encryptionProviderType;\n         this.secretRepository = secretRepository;\n         this.keyRepository = keyRepository;\n+        this.rsaEncrypter = rsaEncrypter;\n     }\n \n-    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n-        //@formatter:off\n-        secrets.stream()\n-                .map(t -> this.validateSecret(deviceIdentification, t))\n-                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n-                .forEach(this.secretRepository::save);\n-        //@formatter:on\n-    }\n-\n-    private DbEncryptionKeyReference getKey() {\n+    private DbEncryptionKeyReference getCurrentKey() {\n         final Date now = new Date();\n-        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n-                this.encryptionProviderType, Pageable.unpaged());\n-        if (keyRefsPage.getSize() > 1) {\n+        final List<DbEncryptionKeyReference> keyRefs = this.keyRepository\n+                .findByTypeAndValid(this.encryptionProviderType, now);\n+        if (keyRefs.size() > 1) {\n             throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        } else if (keyRefs.isEmpty()) {\n+            throw new NoSuchElementException(\n+                    \"No encryption key of type \" + this.encryptionProviderType + \" found that is valid at \" + now);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcxMzEyOA==", "bodyText": "I have seen this use of Optional a number of times, and I think it is really not a nice way to use Optional.\nThe combination of isPresent and get works with respect to safe-guarding in that you won't run into the exception get would throw if the optional is empty.\nI personally don't mind seeing null appear in the code (especially if it is kept internal in some method).\nI think I would go with:\nfinal DbEncryptedSecret currentSecret = this.getSingleDbEncryptedSecret(deviceIdentification, secretType, SecretStatus.ACTIVE).orElse(null);\nThen replace the isPresent by  != null, and avoid having both an Optional<Something> and a Something as variables.\nI am aware this may be considered opinionated, so you can use your own judgement and leave it as is, if you are not convinced.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527713128", "createdAt": "2020-11-20T14:07:44Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,318 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n+import org.opensmartgridplatform.secretmanagement.application.exception.ExceptionWrapper;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.ComponentType;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalException;\n+import org.opensmartgridplatform.shared.exceptionhandling.FunctionalExceptionType;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret)\n+                throws FunctionalException {\n+            byte[] aesEncrypted;\n+            try {\n+                aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            } catch (IllegalArgumentException iae) {\n+                throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_FORMAT,\n+                        ComponentType.SECRET_MANAGEMENT, iae);\n+            }\n+            String keyReference = dbEncryptedSecret.getEncryptionKeyReference().getReference();\n+            EncryptionProviderType providerType = dbEncryptedSecret.getEncryptionKeyReference()\n+                                                                   .getEncryptionProviderType();\n+            return new EncryptedTypedSecret(aesEncrypted, dbEncryptedSecret.getSecretType(), keyReference,\n+                    providerType);\n+        }\n+    }\n+\n     private final EncryptionDelegate encryptionDelegate;\n     private final EncryptionProviderType encryptionProviderType;\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n+    private final RsaEncrypter rsaEncrypter;\n \n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n-            final DbEncryptionKeyRepository keyRepository) {\n+            final DbEncryptionKeyRepository keyRepository, RsaEncrypter rsaEncrypter) {\n         this.encryptionDelegate = defaultEncryptionDelegate;\n         this.encryptionProviderType = encryptionProviderType;\n         this.secretRepository = secretRepository;\n         this.keyRepository = keyRepository;\n+        this.rsaEncrypter = rsaEncrypter;\n     }\n \n-    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n-        //@formatter:off\n-        secrets.stream()\n-                .map(t -> this.validateSecret(deviceIdentification, t))\n-                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n-                .forEach(this.secretRepository::save);\n-        //@formatter:on\n-    }\n-\n-    private DbEncryptionKeyReference getKey() {\n+    private DbEncryptionKeyReference getCurrentKey() {\n         final Date now = new Date();\n-        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n-                this.encryptionProviderType, Pageable.unpaged());\n-        if (keyRefsPage.getSize() > 1) {\n+        final List<DbEncryptionKeyReference> keyRefs = this.keyRepository\n+                .findByTypeAndValid(this.encryptionProviderType, now);\n+        if (keyRefs.size() > 1) {\n             throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        } else if (keyRefs.isEmpty()) {\n+            throw new NoSuchElementException(\n+                    \"No encryption key of type \" + this.encryptionProviderType + \" found that is valid at \" + now);\n         }\n-        return keyRefsPage.stream().findFirst().orElseThrow(\n-                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+        return keyRefs.get(0);\n     }\n \n-    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n-        if (secret.getSecret() == null) {\n-            throw new IllegalArgumentException(\"No secret string set\");\n-        } else if (secret.getSecretType() == null) {\n-            throw new IllegalArgumentException(\"No secret type set\");\n-        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n-            throw new IllegalArgumentException(\n-                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n-                            secret.getSecretType().name()));\n+    private DbEncryptionKeyReference getKeyByReference(String reference) {\n+        return this.keyRepository.findByTypeAndReference(this.encryptionProviderType, reference);\n+    }\n+\n+    private EncryptedTypedSecret validateAndReturnNewSecret(final EncryptedTypedSecret secret) {\n+        if (secret.hasNullSecret()) {\n+            FunctionalExceptionType excType = FunctionalExceptionType.KEY_NOT_PRESENT;\n+            throw new ExceptionWrapper(new FunctionalException(excType, ComponentType.SECRET_MANAGEMENT));\n         }\n         return secret;\n     }\n \n-    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n-        final Optional<TypedSecret> current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n-        return current.isPresent() && current.get().getSecret().equals(secret.getSecret());\n+    private DbEncryptedSecret createDbEncrypted(final String deviceIdentification, final EncryptedTypedSecret secret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final Date now = new Date();\n+        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+        dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+        dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(secret.encryptedSecret));\n+        dbEncryptedSecret.setSecretType(secret.type);\n+        dbEncryptedSecret.setSecretStatus(SecretStatus.NEW);\n+        dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+        dbEncryptedSecret.setCreationTime(now);\n+        return dbEncryptedSecret;\n     }\n \n-    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n-                                              final DbEncryptionKeyReference keyReference) {\n-        final String secretString = typedSecret.getSecret();\n-        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n-        final Secret secret = new Secret(secretBytes);\n-        try {\n-            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n-                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n-            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n-            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n-            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n-            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n-            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n-            dbEncryptedSecret.setCreationTime(new Date());\n-            return dbEncryptedSecret;\n-        } catch (final Exception exc) {\n-            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n-        }\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        return this.doRetrieveSecrets(deviceIdentification, secretTypes, SecretStatus.ACTIVE);\n     }\n \n-    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+    public List<TypedSecret> retrieveNewSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        return this.doRetrieveSecrets(deviceIdentification, secretTypes, SecretStatus.NEW);\n+    }\n+\n+    private List<TypedSecret> doRetrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes,\n+            SecretStatus status) {\n+        return this.retrieveAesSecrets(deviceIdentification, secretTypes, status).stream().map(this::reencryptAes2Rsa)\n+                   .map(EncryptedTypedSecret::toTypedSecret).collect(Collectors.toList());\n+    }\n+\n+    private List<EncryptedTypedSecret> retrieveAesSecrets(final String deviceIdentification,\n+            final List<SecretType> secretTypes, SecretStatus status) {\n         try {\n-            //@formatter:off\n-            return secretTypes.stream()\n-                    .map(secretType -> this.retrieveSecret(deviceIdentification, secretType))\n-                    .map(Optional::get)\n-                    .collect(Collectors.toList());\n-            //@formatter:on\n+            return secretTypes.stream().map(secretType -> this.retrieveSecret(deviceIdentification, secretType, status))\n+                              .collect(Collectors.toList());\n         } catch (final Exception exc) {\n             throw new IllegalStateException(\n-                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+                    String.format(\"Something went wrong retrieving secrets for device %s: %s\", deviceIdentification,\n+                            exc.toString()), exc);\n         }\n     }\n \n-    public Optional<TypedSecret> retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n-        final Date now = new Date();\n-        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n-                now);\n-        if (secretId == null) {\n+    private EncryptedTypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType,\n+            SecretStatus status) {\n+        final Optional<DbEncryptedSecret> optional = this\n+                .getSingleDbEncryptedSecret(deviceIdentification, secretType, status);\n+        if (optional.isPresent()) {\n+            try {\n+                return EncryptedTypedSecret.fromDbEncryptedSecret(optional.get());\n+            } catch (FunctionalException e) {\n+                throw new ExceptionWrapper(e);\n+            }\n+        } else {\n+            return EncryptedTypedSecret.getNullInstance(secretType);\n+        }\n+    }\n+\n+    private Optional<DbEncryptedSecret> getSingleDbEncryptedSecret(final String deviceIdentification,\n+            final SecretType secretType, final SecretStatus secretStatus) {\n+        final List<DbEncryptedSecret> secretsList = this.secretRepository\n+                .findSecrets(deviceIdentification, secretType, secretStatus);\n+        boolean onlySingleSecretAllowed =\n+                SecretStatus.NEW.equals(secretStatus) || SecretStatus.ACTIVE.equals(secretStatus);\n+        if (secretsList.isEmpty()) {\n             return Optional.empty();\n+        } else if (secretsList.size() > 1 && onlySingleSecretAllowed) {\n+            String msgFormat = \"Only 1 instance allowed with status %s, but found %s for device %s, secret type %s\";\n+            throw new IllegalStateException(\n+                    String.format(msgFormat, secretStatus, secretsList.size(), deviceIdentification, secretType));\n         }\n-        final TypedSecret typedSecret = this.getTypedSecret(this.secretRepository.findById(secretId));\n-        return Optional.of(typedSecret);\n+        return Optional.of(secretsList.iterator().next());\n     }\n \n-    private TypedSecret getTypedSecret(final Optional<DbEncryptedSecret> dbEncryptedSecret) {\n-        if (dbEncryptedSecret.isPresent()) {\n-            final DbEncryptedSecret secret = dbEncryptedSecret.get();\n-            final DbEncryptionKeyReference keyReference = secret.getEncryptionKeyReference();\n-            if (keyReference == null) {\n-                throw new IllegalStateException(\"Could not create encrypted secret: secret has no key reference\");\n-            }\n-            final byte[] secretBytes = HexUtils.fromHexString(secret.getEncodedSecret());\n-            final EncryptedSecret encryptedSecret = new EncryptedSecret(keyReference.getEncryptionProviderType(),\n-                    secretBytes);\n-            return this.createTypedSecret(secret, keyReference, encryptedSecret);\n-        } else {    //Should never happen because of stream mapping in retrieveSecrets()\n-            throw new IllegalStateException(\"Could not create typed secret for NULL secret\");\n+    public synchronized void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n+        secrets.forEach(s -> this.checkNrNewSecretsOfType(deviceIdentification, s.getSecretType(), 0));\n+        List<EncryptedTypedSecret> aesSecrets = secrets.stream().map(ts -> new EncryptedTypedSecret(ts.getSecret(),\n+                ts.getSecretType())).map(this::reencryptRsa2Aes).collect(toList());\n+        this.storeAesSecrets(deviceIdentification, aesSecrets);\n+    }\n+\n+    private void storeAesSecrets(final String deviceIdentification, final List<EncryptedTypedSecret> secrets) {\n+        secrets.stream().map(this::validateAndReturnNewSecret).map(ets -> this\n+                .createDbEncrypted(deviceIdentification, ets, this.getKeyByReference(ets.encryptionKeyReference)))\n+               .collect(collectingAndThen(toList(), this.secretRepository::saveAll));\n+    }\n+\n+    public synchronized void activateNewSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        secretTypes.stream().forEach(t -> this.checkNrNewSecretsOfType(deviceIdentification, t, 1));\n+        secretTypes.stream().map(t -> this.getUpdatedSecretsForActivation(deviceIdentification, t))\n+                   .flatMap(Collection::stream).collect(collectingAndThen(toList(), this.secretRepository::saveAll));\n+    }\n+\n+    public boolean hasNewSecret(final String deviceIdentification, final SecretType secretType) {\n+        return this.secretRepository.getSecretCount(deviceIdentification, secretType, SecretStatus.NEW) > 0;\n+    }\n+\n+    private List<DbEncryptedSecret> getUpdatedSecretsForActivation(final String deviceIdentification,\n+            final SecretType secretType) {\n+        List<DbEncryptedSecret> updatedSecrets = new ArrayList<>();\n+        final Optional<DbEncryptedSecret> activeSecretOptional = this\n+                .getSingleDbEncryptedSecret(deviceIdentification, secretType, SecretStatus.ACTIVE);\n+        if (activeSecretOptional.isPresent()) {\n+            final DbEncryptedSecret currentSecret = activeSecretOptional.get();\n+            currentSecret.setSecretStatus(SecretStatus.EXPIRED);\n+            updatedSecrets.add(currentSecret);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 325}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyMjIzMQ==", "bodyText": "There is a mix of tabs and spaces, and only spaces should be used for indentation.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527722231", "createdAt": "2020-11-20T14:19:32Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V20201012__add_column_secret_status.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+DO\n+$$\n+begin\n+\n+if not exists (select 1 from information_schema.columns\n+ \tWHERE table_schema=current_schema AND table_name = 'encrypted_secret' AND column_name = 'secret_status') THEN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNTAyMA==", "bodyText": "The name of the Flyway script has a version part that has not got the length that should be used according to the working agreements.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527725020", "createdAt": "2020-11-20T14:23:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V20201012__add_column_secret_status.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+DO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyNjYyMw==", "bodyText": "Is there a reason for mixing lower and upper case with the same SQL keywords? It looks a bit sloppy.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527726623", "createdAt": "2020-11-20T14:26:19Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/main/resources/db/migration/V20201012__add_column_secret_status.sql", "diffHunk": "@@ -0,0 +1,22 @@\n+DO\n+$$\n+begin\n+\n+if not exists (select 1 from information_schema.columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzcyOTgyNA==", "bodyText": "I think this used to be of type RsaEncryptionProvider. It might be cleaner to also update the name to rsaEncrypter.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527729824", "createdAt": "2020-11-20T14:30:32Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -56,49 +56,63 @@\n     private DbEncryptedSecretRepository secretRepository;\n     @Mock\n     private DbEncryptionKeyRepository keyRepository;\n+    @Mock\n+    private RsaEncrypter rsaEncryptionProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTMxMQ==", "bodyText": "It seems this line is not necessary, leave it out rather than as commented code.\nThere are some more lines and even a complete test in this class, for which the same goes.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527731311", "createdAt": "2020-11-20T14:32:55Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -56,49 +56,63 @@\n     private DbEncryptedSecretRepository secretRepository;\n     @Mock\n     private DbEncryptionKeyRepository keyRepository;\n+    @Mock\n+    private RsaEncrypter rsaEncryptionProvider;\n \n     @BeforeEach\n     public void setHsmEncryption() {\n-        this.service = new SecretManagementService(this.encryptionDelegate, EncryptionProviderType.HSM,\n-                this.secretRepository, this.keyRepository);\n+        this.service = new SecretManagementService(this.encryptionDelegate, ENCRYPTION_PROVIDER_TYPE,\n+                this.secretRepository, this.keyRepository, this.rsaEncryptionProvider);\n     }\n \n     @Test\n     public void retrieveSecrets() throws Exception {\n         //GIVEN\n         final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n+        keyReference.setEncryptionProviderType(ENCRYPTION_PROVIDER_TYPE);\n+        keyReference.setReference(\"1\");\n         final DbEncryptedSecret secret = new DbEncryptedSecret();\n         secret.setSecretType(SecretType.E_METER_MASTER_KEY);\n         secret.setEncryptionKeyReference(keyReference);\n-        final Secret decryptedSecret = new Secret(\"secret\".getBytes());\n+        secret.setEncodedSecret(\"ABCDEF01234567890123456789ABCDEF\");\n+        final List<DbEncryptedSecret> secretList = Arrays.asList(secret);\n+        final byte[] decryptedSecret = \"secret0000000001\".getBytes();\n+        final byte[] rsaSecret = \"1000000000terces\".getBytes();\n \n         //WHEN\n-        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n-        when(this.secretRepository.findById(any())).thenReturn(Optional.of(secret));\n+        when(this.secretRepository.findSecrets(SOME_DEVICE, SecretType.E_METER_MASTER_KEY, SecretStatus.ACTIVE))\n+                .thenReturn(secretList);\n         when(this.encryptionDelegate.decrypt(any(), any())).thenReturn(decryptedSecret);\n-        final List<TypedSecret> typedSecrets = this.service.retrieveSecrets(SOME_DEVICE,\n-                Arrays.asList(SecretType.E_METER_MASTER_KEY));\n+        when(this.rsaEncryptionProvider.encrypt(any())).thenReturn(rsaSecret);\n+        //when(this.encryptionDelegate.getSecretByteLength(any())).thenReturn(16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNzM3Ng==", "bodyText": "This leads to an ugly type safety warning.\nOne way to get rid of that would be to create the argument captor(s) as fields with the @Captor annotation.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527737376", "createdAt": "2020-11-20T14:42:12Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -108,42 +122,50 @@ public void retrieveSecrets_decryptionError() {\n     @Test\n     public void retrieveSecrets_secretWithoutKey() {\n         final DbEncryptedSecret secret = new DbEncryptedSecret();\n-        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(1L);\n-        when(this.secretRepository.findById(1L)).thenReturn(Optional.of(secret));\n+        final List<DbEncryptedSecret> secretList = Arrays.asList(secret);\n+        when(this.secretRepository.findSecrets(SOME_DEVICE, SecretType.E_METER_MASTER_KEY, SecretStatus.ACTIVE))\n+                .thenReturn(secretList);\n         assertThatIllegalStateException().isThrownBy(\n                 () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n     }\n \n     @Test\n     public void retrieveSecrets_noSecrets() {\n-        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n-        assertThatIllegalStateException().isThrownBy(\n-                () -> this.service.retrieveSecrets(\"SOME_DEVICE\", Arrays.asList(SecretType.E_METER_MASTER_KEY)));\n+        List<SecretType> secretTypes = Arrays.asList(SecretType.E_METER_MASTER_KEY);\n+        List<TypedSecret> result = this.service.retrieveSecrets(\"SOME_DEVICE\", secretTypes);\n+        assertThat(result).isNotNull();\n+        assertThat(result.size()).isEqualTo(secretTypes.size());\n+        assertThat(result.get(0)).isNotNull();\n+        assertThat(result.get(0).getSecretType()).isEqualTo(SecretType.E_METER_MASTER_KEY);\n+        assertThat(result.get(0).getSecret()).isNull();\n     }\n \n     @Test\n     public void storeSecrets() throws Exception {\n         //GIVEN\n-        final TypedSecret typedSecret = new TypedSecret();\n-        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n-        typedSecret.setSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n+        final TypedSecret typedSecret = new TypedSecret(\"rsaSecret00000001\".getBytes(), SecretType.E_METER_MASTER_KEY);\n         final DbEncryptionKeyReference keyReference = new DbEncryptionKeyReference();\n-        keyReference.setEncryptionProviderType(EncryptionProviderType.JRE);\n-        keyReference.setReference(\"keyReferenceString\");\n-        final EncryptedSecret encryptedSecret = new EncryptedSecret(EncryptionProviderType.JRE, \"$3cr3t\".getBytes());\n-        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+        keyReference.setEncryptionProviderType(ENCRYPTION_PROVIDER_TYPE);\n+        keyReference.setReference(\"1\");\n+        final EncryptedSecret encryptedSecret = new EncryptedSecret(ENCRYPTION_PROVIDER_TYPE,\n+                \"aesSecret0000001\".getBytes());\n \n         //WHEN\n-        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n-        when(this.keyRepository.findByTypeAndValid(any(), any(), any())).thenReturn(\n-                new PageImpl<>(Arrays.asList(keyReference)));\n+        when(this.secretRepository.getSecretCount(SOME_DEVICE, SecretType.E_METER_MASTER_KEY, SecretStatus.NEW))\n+                .thenReturn(0);\n+        when(this.keyRepository.findByTypeAndValid(any(), any())).thenReturn(Arrays.asList(keyReference));\n+        when(this.keyRepository.findByTypeAndReference(ENCRYPTION_PROVIDER_TYPE, \"1\")).thenReturn(keyReference);\n         when(this.encryptionDelegate.encrypt(any(), any(), anyString())).thenReturn(encryptedSecret);\n+        //when(this.encryptionDelegate.getSecretByteLength(any())).thenReturn(16);\n         this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret));\n         //THEN\n-        final ArgumentCaptor<DbEncryptedSecret> secretArgumentCaptor = ArgumentCaptor.forClass(DbEncryptedSecret.class);\n-        verify(this.secretRepository).save(secretArgumentCaptor.capture());\n-        final DbEncryptedSecret savedSecret = secretArgumentCaptor.getValue();\n-        assertThat(savedSecret).isNotNull();\n+        final ArgumentCaptor<List<DbEncryptedSecret>> secretListArgumentCaptor =\n+                ArgumentCaptor.forClass(List.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczODg4OQ==", "bodyText": "It looks like this line can be removed, encryptedSecret is not used.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527738889", "createdAt": "2020-11-20T14:44:39Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -152,19 +174,22 @@ public void storeSecrets() throws Exception {\n     }\n \n     @Test\n-    public void storeSecrets_secretNull() {\n+    public void storeSecrets_newKeyAlreadyStored() throws Exception {\n         //GIVEN\n-        final TypedSecret typedSecret = new TypedSecret();\n-        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n+        final TypedSecret typedSecret = new TypedSecret(new byte[16], SecretType.E_METER_MASTER_KEY);\n+        final EncryptedSecret encryptedSecret = new EncryptedSecret(ENCRYPTION_PROVIDER_TYPE, \"aesSecret\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 202}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0MjUxMw==", "bodyText": "Is this necessary? The exception from storeSecrets appears to be checked in assertThatIllegalSteteException below.\nThe empty catch block looks like a red flag. I would otherwise expect some comment the exception is expected and a fail after the method call in the try-block.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527742513", "createdAt": "2020-11-20T14:50:09Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-secret-management/src/test/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -173,78 +198,67 @@ public void storeSecrets_secretTypeNull() {\n         keyReference.setEncryptionProviderType(EncryptionProviderType.JRE);\n         keyReference.setReference(\"keyReferenceString\");\n         //THEN\n-        assertThatIllegalArgumentException().isThrownBy(\n-                () -> this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret)));\n-    }\n+        assertThatIllegalArgumentException()\n+                .isThrownBy(() -> this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret)));\n+    }*/\n \n     @Test\n     public void storeSecrets_noKey() {\n         //GIVEN\n-        final TypedSecret typedSecret = new TypedSecret();\n-        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n-        typedSecret.setSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n+        final TypedSecret typedSecret = new TypedSecret(\"$3cr3t\".getBytes(), SecretType.E_METER_MASTER_KEY);\n         //WHEN\n-        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n-        when(this.keyRepository.findByTypeAndValid(any(), any(), any())).thenReturn(Page.empty());\n+        when(this.keyRepository.findByTypeAndValid(any(), any())).thenReturn(Arrays.asList());\n         //THEN\n-        assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(\n-                () -> this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret)));\n+        assertThatExceptionOfType(NoSuchElementException.class)\n+                .isThrownBy(() -> this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret)));\n \n     }\n \n     @Test\n     public void storeSecrets_multipleKeys() {\n         //GIVEN\n-        final TypedSecret typedSecret = new TypedSecret();\n-        typedSecret.setSecretType(SecretType.E_METER_MASTER_KEY);\n-        typedSecret.setSecret(HexUtils.toHexString(\"$3cr3t\".getBytes()));\n+        final TypedSecret typedSecret = new TypedSecret(\"$3cr3t\".getBytes(), SecretType.E_METER_MASTER_KEY);\n         //WHEN\n-        when(this.secretRepository.findIdOfValidMostRecent(any(), any(), any())).thenReturn(null);\n-        when(this.keyRepository.findByTypeAndValid(any(), any(), any())).thenReturn(\n-                new PageImpl<>(Arrays.asList(new DbEncryptionKeyReference(), new DbEncryptionKeyReference())));\n+        when(this.keyRepository.findByTypeAndValid(any(), any()))\n+                .thenReturn(Arrays.asList(new DbEncryptionKeyReference(), new DbEncryptionKeyReference()));\n         //THEN\n         try {\n             this.service.storeSecrets(\"SOME_DEVICE\", Arrays.asList(typedSecret));\n         } catch (final Exception exc) {\n \n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4NzQzMQ==", "bodyText": "It looks like the name still reflects the old type, might be nicer to rename it.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527787431", "createdAt": "2020-11-20T15:57:05Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "diffHunk": "@@ -97,44 +100,46 @@ public HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender() throws\n     @Bean\n     public KeyStoreFactoryBean trustStore() {\n         KeyStoreFactoryBean keyStoreFactoryBean = new KeyStoreFactoryBean();\n-        keyStoreFactoryBean.setLocation(trustStore);\n-        keyStoreFactoryBean.setPassword(trustStorePassword);\n+        keyStoreFactoryBean.setLocation(this.trustStore);\n+        keyStoreFactoryBean.setPassword(this.trustStorePassword);\n \n         return keyStoreFactoryBean;\n     }\n \n     @Bean\n     public TrustManagersFactoryBean trustManagersFactoryBean() {\n         TrustManagersFactoryBean trustManagersFactoryBean = new TrustManagersFactoryBean();\n-        trustManagersFactoryBean.setKeyStore(trustStore().getObject());\n+        trustManagersFactoryBean.setKeyStore(this.trustStore().getObject());\n \n         return trustManagersFactoryBean;\n     }\n \n     @Bean\n     public KeyStoreFactoryBean keyStore() {\n         KeyStoreFactoryBean keyStoreFactoryBean = new KeyStoreFactoryBean();\n-        keyStoreFactoryBean.setLocation(keyStore);\n-        keyStoreFactoryBean.setPassword(keyStorePassword);\n+        keyStoreFactoryBean.setLocation(this.keyStore);\n+        keyStoreFactoryBean.setPassword(this.keyStorePassword);\n \n         return keyStoreFactoryBean;\n     }\n \n     @Bean\n     public KeyManagersFactoryBean keyManagersFactoryBean() {\n         KeyManagersFactoryBean keyManagersFactoryBean = new KeyManagersFactoryBean();\n-        keyManagersFactoryBean.setKeyStore(keyStore().getObject());\n-        keyManagersFactoryBean.setPassword(keyPassword);\n+        keyManagersFactoryBean.setKeyStore(this.keyStore().getObject());\n+        keyManagersFactoryBean.setPassword(this.keyPassword);\n         return keyManagersFactoryBean;\n     }\n \n     @Bean\n-    public RsaEncryptionProvider rsaEncryptionProvider() {\n+    public RsaEncrypter rsaEncryptionProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc5MTMwMw==", "bodyText": "This file is missing a required license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527791303", "createdAt": "2020-11-20T16:03:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/EncryptionHelperService.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwNTA0Mw==", "bodyText": "Shouldn't this be if (ArrayUtils.isNotEmpty(deviceDto.getMasterKey())) { keysByType.put(E_METER_MASTER,this.encryptionService.rsaDecrypt(deviceDto.getMasterKey())); }?\nSimilar for the other security key types.\nIt looks like things could go wrong, since I don't think it is safe to assume all these keys are present.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527805043", "createdAt": "2020-11-20T16:24:05Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/InstallationService.java", "diffHunk": "@@ -52,59 +60,19 @@\n     @Autowired\n     private CoupleMbusDeviceByChannelCommandExecutor coupleMbusDeviceByChannelCommandExecutor;\n \n-    // === ADD METER ===\n     public void addMeter(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptKeys(smartMeteringDevice);\n+        this.storeNewKeys(smartMeteringDevice);\n         final DlmsDevice dlmsDevice = this.installationMapper.map(smartMeteringDevice, DlmsDevice.class);\n         this.dlmsDeviceRepository.save(dlmsDevice);\n     }\n \n-    private void reEncryptKeys(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        this.reEncryptMasterKey(smartMeteringDevice);\n-        this.reEncryptAuthenticationKey(smartMeteringDevice);\n-        this.reEncryptEncryptionKey(smartMeteringDevice);\n-        this.reEncryptMbusDefaultKey(smartMeteringDevice);\n-    }\n-\n-    private void reEncryptMasterKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getMasterKey())) {\n-            return;\n-        }\n-        final byte[] reEncryptedMasterKey = this.securityKeyService\n-                .reEncryptKey(smartMeteringDevice.getMasterKey(), SecurityKeyType.E_METER_MASTER);\n-        smartMeteringDevice.setMasterKey(reEncryptedMasterKey);\n-    }\n-\n-    private void reEncryptAuthenticationKey(final SmartMeteringDeviceDto smartMeteringDevice)\n-            throws FunctionalException {\n-\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getAuthenticationKey())) {\n-            return;\n-        }\n-        final byte[] reEncryptedAuthenticationKey = this.securityKeyService\n-                .reEncryptKey(smartMeteringDevice.getAuthenticationKey(), SecurityKeyType.E_METER_AUTHENTICATION);\n-        smartMeteringDevice.setAuthenticationKey(reEncryptedAuthenticationKey);\n-    }\n-\n-    private void reEncryptEncryptionKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getGlobalEncryptionUnicastKey())) {\n-            return;\n-        }\n-        final byte[] reEncryptedEncryptionKey = this.securityKeyService\n-                .reEncryptKey(smartMeteringDevice.getGlobalEncryptionUnicastKey(), SecurityKeyType.E_METER_ENCRYPTION);\n-        smartMeteringDevice.setGlobalEncryptionUnicastKey(reEncryptedEncryptionKey);\n-    }\n-\n-    private void reEncryptMbusDefaultKey(final SmartMeteringDeviceDto smartMeteringDevice) throws FunctionalException {\n-\n-        if (ArrayUtils.isEmpty(smartMeteringDevice.getMbusDefaultKey())) {\n-            return;\n-        }\n-\n-        final byte[] reEncryptedMbusDefaultKey = this.securityKeyService\n-                .reEncryptKey(smartMeteringDevice.getMbusDefaultKey(), SecurityKeyType.G_METER_MASTER);\n-        smartMeteringDevice.setMbusDefaultKey(reEncryptedMbusDefaultKey);\n+    private void storeNewKeys(final SmartMeteringDeviceDto deviceDto) throws FunctionalException {\n+        Map<SecurityKeyType,byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n+        keysByType.put(E_METER_MASTER,this.encryptionService.rsaDecrypt(deviceDto.getMasterKey()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwOTEwNg==", "bodyText": "I think either the @Slf4j annotation or the static LOGGER are acceptable, but I don't see any use for this annotation if logging is done using the LOGGER.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527809106", "createdAt": "2020-11-20T16:30:04Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -35,147 +44,306 @@\n \n @Service\n @Slf4j", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzMTc1Mg==", "bodyText": "Looking at the comment by Jenkins below, the ProtocolAdapterException is not actually thrown here (anymore).\nLeaving the throws clause in the javadoc and declaration appears to be only misleading.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527831752", "createdAt": "2020-11-20T17:03:03Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -35,147 +44,306 @@\n \n @Service\n @Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {\n+        this.soapRsaEncrypter = soapRsaEncrypter;\n         this.secretManagementClient = secretManagementClient;\n     }\n \n-    @Override\n-    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve an active key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the active keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    public Map<SecurityKeyType, byte[]> getKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = this.createGetSecretsRequest(deviceIdentification, keyTypes);\n+        GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(request);\n+        this.validateGetResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve a new (not yet activated) key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving new {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] getDlmsMasterKey(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the new (not yet activated) keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    public Map<SecurityKeyType, byte[]> getNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = this.createGetNewSecretsRequest(deviceIdentification, keyTypes);\n+        GetNewSecretsResponse response = this.secretManagementClient.getNewSecretsRequest(request);\n+        this.validateGetNewResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n-\n-            log.trace(\"DlmsAuthenticationKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n-\n-            return decryptedKey;\n-        } catch (Exception e) {\n-            throw new EncrypterException(\"Error while retrieving authentication key\", e);\n-        }\n+    private void validateGetResponse(List<SecurityKeyType> keyTypes, GetSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n     }\n \n-    @Override\n-    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+    private void validateGetNewResponse(List<SecurityKeyType> keyTypes, GetNewSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+    }\n \n-            log.trace(\"DlmsGlobalUnicastEncryptionKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n+    private Map<SecurityKeyType, byte[]> convertSoapSecretsToSecretMapByType(List<TypedSecret> soapSecrets) {\n+        Function<TypedSecret, SecurityKeyType> convertType = ts -> SecurityKeyType.fromSecretType(ts.getType());\n+        Function<TypedSecret, byte[]> convertSecret = ts -> this.decryptSoapSecret(ts,false);\n+        Map<SecurityKeyType,byte[]> decryptedKeysByType = new EnumMap<>(SecurityKeyType.class);\n+        soapSecrets.forEach(ts->decryptedKeysByType.put(convertType.apply(ts),convertSecret.apply(ts)));\n+        return decryptedKeysByType;\n+    }\n \n-            return decryptedKey;\n+    private GetSecretsRequest createGetSecretsRequest(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = new GetSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n+    }\n \n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while retrieving encryption key\", e);\n-        }\n-        return new byte[0];\n+    private GetNewSecretsRequest createGetNewSecretsRequest(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = new GetNewSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n     }\n \n-    @Override\n-    public byte[] getMbusDefaultKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Store new key\n+     * <p>\n+     * A new key is a security key with a device which status NEW.\n+     * This status is used when the new key is known, but not yet set on the device.\n+     * <p>\n+     * <strong>CAUTION:</strong> Only call this method when a successful\n+     * connection with the device has been set up (that is: a valid\n+     * communication key that works is known), and you are sure any existing new\n+     * key data that is not activated yet (for instance a new key stored earlier in an\n+     * attempt to replace the communication key that got aborted).<br>\n+     * <p>\n+     * The moment the new key is known to be transferred to the device, make\n+     * sure to activate it by calling\n+     * {@link #activateNewKey(String, SecurityKeyType)}.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param key\n+     *         key to store, unencrypted\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @see #activateNewKey(String, SecurityKeyType)\n+     */\n+    public void storeNewKey(String deviceIdentification, SecurityKeyType keyType, byte[] key) {\n+        Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n+        keysByType.put(keyType, key);\n+        this.storeNewKeys(deviceIdentification, keysByType);\n     }\n \n-    @Override\n-    public byte[] getMbusUserKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    public void storeNewKeys(String deviceIdentification, Map<SecurityKeyType, byte[]> keysByType) {\n+        this.validateKeys(keysByType);\n+        TypedSecrets typedSecrets = new TypedSecrets();\n+        List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n+        for (Map.Entry<SecurityKeyType,byte[]> entry : keysByType.entrySet()) {\n+            TypedSecret ts = new TypedSecret();\n+            ts.setType(entry.getKey().toSecretType());\n+            ts.setSecret(this.encryptSoapSecret(entry.getValue(),true));\n+            typedSecretList.add(ts);\n+        }\n+        StoreSecretsRequest request = this.createStoreSecretsRequest(deviceIdentification, typedSecrets);\n+        this.secretManagementClient.storeSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] getDlmsPassword(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    private void validateKeys(Map<SecurityKeyType, byte[]> keysByType) {\n+        long nrNulls = keysByType.values().stream().filter(Objects::isNull).count();\n+        if (nrNulls > 0) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Provided %s keys, %s of which were NULL\", keysByType.size(), nrNulls));\n+        }\n     }\n \n-    @Override\n-    public DlmsDevice storeNewKey(DlmsDevice device, byte[] encryptedKey, SecurityKeyType keyType) {\n-        throw new NotImplementedException();\n+    private StoreSecretsRequest createStoreSecretsRequest(String deviceIdentification, TypedSecrets typedSecrets) {\n+        StoreSecretsRequest request = new StoreSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setTypedSecrets(typedSecrets);\n+        return request;\n     }\n \n-    @Override\n-    public DlmsDevice validateNewKey(DlmsDevice device, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Updates the state of a new key from 'new' to 'active'\n+     * <p>\n+     * This method should be called to activate a new key stored with\n+     * {@link #storeNewKeys(String, Map)} after it has\n+     * been confirmed to be set on the device.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @throws ProtocolAdapterException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 315}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzNTgwNA==", "bodyText": "I am not sure whether fault could be null here or not, but as a general safety precaution I think it is almost always better (unless you would want the NullPointerException, which seems unlikely) to not include .toString() when you concatenate any object with a String as its String representation will be appended anyway if the object is not null.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527835804", "createdAt": "2020-11-20T17:09:53Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -35,147 +44,306 @@\n \n @Service\n @Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {\n+        this.soapRsaEncrypter = soapRsaEncrypter;\n         this.secretManagementClient = secretManagementClient;\n     }\n \n-    @Override\n-    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve an active key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the active keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    public Map<SecurityKeyType, byte[]> getKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = this.createGetSecretsRequest(deviceIdentification, keyTypes);\n+        GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(request);\n+        this.validateGetResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve a new (not yet activated) key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving new {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] getDlmsMasterKey(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the new (not yet activated) keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    public Map<SecurityKeyType, byte[]> getNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = this.createGetNewSecretsRequest(deviceIdentification, keyTypes);\n+        GetNewSecretsResponse response = this.secretManagementClient.getNewSecretsRequest(request);\n+        this.validateGetNewResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n-\n-            log.trace(\"DlmsAuthenticationKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n-\n-            return decryptedKey;\n-        } catch (Exception e) {\n-            throw new EncrypterException(\"Error while retrieving authentication key\", e);\n-        }\n+    private void validateGetResponse(List<SecurityKeyType> keyTypes, GetSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n     }\n \n-    @Override\n-    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+    private void validateGetNewResponse(List<SecurityKeyType> keyTypes, GetNewSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+    }\n \n-            log.trace(\"DlmsGlobalUnicastEncryptionKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n+    private Map<SecurityKeyType, byte[]> convertSoapSecretsToSecretMapByType(List<TypedSecret> soapSecrets) {\n+        Function<TypedSecret, SecurityKeyType> convertType = ts -> SecurityKeyType.fromSecretType(ts.getType());\n+        Function<TypedSecret, byte[]> convertSecret = ts -> this.decryptSoapSecret(ts,false);\n+        Map<SecurityKeyType,byte[]> decryptedKeysByType = new EnumMap<>(SecurityKeyType.class);\n+        soapSecrets.forEach(ts->decryptedKeysByType.put(convertType.apply(ts),convertSecret.apply(ts)));\n+        return decryptedKeysByType;\n+    }\n \n-            return decryptedKey;\n+    private GetSecretsRequest createGetSecretsRequest(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = new GetSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n+    }\n \n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while retrieving encryption key\", e);\n-        }\n-        return new byte[0];\n+    private GetNewSecretsRequest createGetNewSecretsRequest(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = new GetNewSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n     }\n \n-    @Override\n-    public byte[] getMbusDefaultKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Store new key\n+     * <p>\n+     * A new key is a security key with a device which status NEW.\n+     * This status is used when the new key is known, but not yet set on the device.\n+     * <p>\n+     * <strong>CAUTION:</strong> Only call this method when a successful\n+     * connection with the device has been set up (that is: a valid\n+     * communication key that works is known), and you are sure any existing new\n+     * key data that is not activated yet (for instance a new key stored earlier in an\n+     * attempt to replace the communication key that got aborted).<br>\n+     * <p>\n+     * The moment the new key is known to be transferred to the device, make\n+     * sure to activate it by calling\n+     * {@link #activateNewKey(String, SecurityKeyType)}.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param key\n+     *         key to store, unencrypted\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @see #activateNewKey(String, SecurityKeyType)\n+     */\n+    public void storeNewKey(String deviceIdentification, SecurityKeyType keyType, byte[] key) {\n+        Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n+        keysByType.put(keyType, key);\n+        this.storeNewKeys(deviceIdentification, keysByType);\n     }\n \n-    @Override\n-    public byte[] getMbusUserKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    public void storeNewKeys(String deviceIdentification, Map<SecurityKeyType, byte[]> keysByType) {\n+        this.validateKeys(keysByType);\n+        TypedSecrets typedSecrets = new TypedSecrets();\n+        List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n+        for (Map.Entry<SecurityKeyType,byte[]> entry : keysByType.entrySet()) {\n+            TypedSecret ts = new TypedSecret();\n+            ts.setType(entry.getKey().toSecretType());\n+            ts.setSecret(this.encryptSoapSecret(entry.getValue(),true));\n+            typedSecretList.add(ts);\n+        }\n+        StoreSecretsRequest request = this.createStoreSecretsRequest(deviceIdentification, typedSecrets);\n+        this.secretManagementClient.storeSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] getDlmsPassword(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    private void validateKeys(Map<SecurityKeyType, byte[]> keysByType) {\n+        long nrNulls = keysByType.values().stream().filter(Objects::isNull).count();\n+        if (nrNulls > 0) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Provided %s keys, %s of which were NULL\", keysByType.size(), nrNulls));\n+        }\n     }\n \n-    @Override\n-    public DlmsDevice storeNewKey(DlmsDevice device, byte[] encryptedKey, SecurityKeyType keyType) {\n-        throw new NotImplementedException();\n+    private StoreSecretsRequest createStoreSecretsRequest(String deviceIdentification, TypedSecrets typedSecrets) {\n+        StoreSecretsRequest request = new StoreSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setTypedSecrets(typedSecrets);\n+        return request;\n     }\n \n-    @Override\n-    public DlmsDevice validateNewKey(DlmsDevice device, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Updates the state of a new key from 'new' to 'active'\n+     * <p>\n+     * This method should be called to activate a new key stored with\n+     * {@link #storeNewKeys(String, Map)} after it has\n+     * been confirmed to be set on the device.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @throws ProtocolAdapterException\n+     *         if no new key is stored with the given device\n+     * @see #storeNewKeys(String, Map)\n+     */\n+    public void activateNewKey(String deviceIdentification, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        this.activateNewKeys(deviceIdentification, Arrays.asList(keyType));\n     }\n \n-    @Override\n-    public byte[] generateKey() {\n-        throw new NotImplementedException();\n+    public void activateNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        ActivateSecretsRequest request = new ActivateSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        this.secretManagementClient.activateSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] generateAndEncryptKey() {\n-        throw new NotImplementedException();\n+    public boolean hasNewSecretOfType(String deviceIdentification, SecurityKeyType keyType) {\n+        HasNewSecretRequest request = new HasNewSecretRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretType(keyType.toSecretType());\n+        HasNewSecretResponse response = this.secretManagementClient.hasNewSecretRequest(request);\n+        return response.isHasNewSecret();\n     }\n \n-    @Override\n-    public byte[] encryptMbusUserKey(byte[] mbusDefaultKey, byte[] mbusUserKey) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    public byte[] generate128BitsKeyAndStoreAsNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        return this.generate128BitsKeysAndStoreAsNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    private Optional<TypedSecret> getTypedSecretFromSoapResponse(GetSecretsResponse response, SecretType secretType) {\n+    /**\n+     * Generates a new key that can be used as DLMS master key, authentication\n+     * key, global unicast encryption key, M-Bus Default key or M-Bus User key.\n+     * <p>\n+     * The master keys (DLMS master or M-Bus Default) cannot be changed on a\n+     * device, but can be generated for use in tests or with simulated devices.\n+     *\n+     * @return a new 128bits key, unencrypted.\n+     */\n+    public Map<SecurityKeyType, byte[]> generate128BitsKeysAndStoreAsNewKeys(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        SecretTypes secretTypes = new SecretTypes();\n+        GenerateAndStoreSecretsRequest request = this\n+                .createGenerateAndStoreSecretsRequest(deviceIdentification, secretTypes);\n+        secretTypes.getSecretType().addAll(keyTypes.stream().map(SecurityKeyType::toSecretType).collect(toList()));\n+\n+        GenerateAndStoreSecretsResponse response = this.secretManagementClient.generateAndStoreSecrets(request);\n         TypedSecrets typedSecrets = response.getTypedSecrets();\n         List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n-\n-        return typedSecretList.stream().filter(typedSecret -> typedSecret.getType() == secretType).findFirst();\n+        this.validateGenerateAndStoreResponse(keyTypes, response, typedSecretList);\n+        return this.convertSoapSecretsToSecretMapByType(typedSecrets.getTypedSecret());\n     }\n \n-    private GetSecretsRequest getSoapRequestForKey(String deviceIdentification, SecretType secretType) {\n-        GetSecretsRequest request = new GetSecretsRequest();\n+    private GenerateAndStoreSecretsRequest createGenerateAndStoreSecretsRequest(String deviceIdentification,\n+            SecretTypes secretTypes) {\n+        GenerateAndStoreSecretsRequest request = new GenerateAndStoreSecretsRequest();\n         request.setDeviceId(deviceIdentification);\n-        request.setSecretTypes(new SecretTypes());\n-        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n-        secretTypeList.add(secretType);\n+        request.setSecretTypes(secretTypes);\n         return request;\n     }\n \n-    private byte[] decryptSoapSecret(String deviceIdentification, TypedSecret typedSecret) {\n+    private void validateGenerateAndStoreResponse(List<SecurityKeyType> keyTypes,\n+            GenerateAndStoreSecretsResponse response, List<TypedSecret> typedSecretList) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+        typedSecretList.forEach(ts -> {\n+            if (ts.getSecret() == null) {\n+                throw new IllegalStateException(String.format(\"Generated a NULL key (key_type=%s)\", ts.getType()));\n+            }\n+        });\n+    }\n+\n+    private void validateOsgpResultAndTypedSecrets(OsgpResultType result, Object fault, TypedSecrets typedSecrets,\n+            int expectedNrKeys) {\n+        if (!OsgpResultType.OK.equals(result)) {\n+            throw new IllegalStateException(\"Could not generate and store keys in secret-mgmt: \" + fault.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 407}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzNjg3Ng==", "bodyText": "It looks really odd and unnecessary to concatenate two String literals like this on a single line.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527836876", "createdAt": "2020-11-20T17:11:40Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementService.java", "diffHunk": "@@ -35,147 +44,306 @@\n \n @Service\n @Slf4j\n-public class SecretManagementService implements SecurityKeyService {\n+/**\n+ * Service for storing, activating and retrieving device keys.\n+ * Also performs RSA encryption/decryption operations for SOAP messaging purposes.\n+ */\n+public class SecretManagementService {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(SecretManagementService.class);\n-    private final RsaEncryptionProvider rsaEncryptionProvider;\n+    private final RsaEncrypter soapRsaEncrypter;\n     private final SecretManagementClient secretManagementClient;\n \n-    public SecretManagementService(RsaEncryptionProvider rsaEncryptionProvider,\n-            SecretManagementClient secretManagementClient) {\n-        this.rsaEncryptionProvider = rsaEncryptionProvider;\n+\n+    public SecretManagementService(RsaEncrypter soapRsaEncrypter, SecretManagementClient secretManagementClient) {\n+        this.soapRsaEncrypter = soapRsaEncrypter;\n         this.secretManagementClient = secretManagementClient;\n     }\n \n-    @Override\n-    public byte[] reEncryptKey(byte[] externallyEncryptedKey, SecurityKeyType keyType) throws FunctionalException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve an active key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] decryptKey(byte[] encryptedKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the active keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    public Map<SecurityKeyType, byte[]> getKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = this.createGetSecretsRequest(deviceIdentification, keyTypes);\n+        GetSecretsResponse response = this.secretManagementClient.getSecretsRequest(request);\n+        this.validateGetResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] encryptKey(byte[] plainKey, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieve a new (not yet activated) key of a certain type for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyType\n+     *         the requested key type\n+     *\n+     * @return the key or NULL if not present\n+     */\n+    public byte[] getNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        LOGGER.info(\"Retrieving new {} for device {}\", keyType.name(), deviceIdentification);\n+        return this.getNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    @Override\n-    public byte[] getDlmsMasterKey(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Retrieves the new (not yet activated) keys of requested types for a specified device\n+     *\n+     * @param deviceIdentification\n+     *         the device identification string of the device\n+     * @param keyTypes\n+     *         the requested key types\n+     *\n+     * @return the requested keys in a map by key type, with value NULL if not present\n+     */\n+    public Map<SecurityKeyType, byte[]> getNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = this.createGetNewSecretsRequest(deviceIdentification, keyTypes);\n+        GetNewSecretsResponse response = this.secretManagementClient.getNewSecretsRequest(request);\n+        this.validateGetNewResponse(keyTypes, response);\n+        return this.convertSoapSecretsToSecretMapByType(response.getTypedSecrets().getTypedSecret());\n     }\n \n-    @Override\n-    public byte[] getDlmsAuthenticationKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_AUTHENTICATION_KEY);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n-\n-            log.trace(\"DlmsAuthenticationKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n-\n-            return decryptedKey;\n-        } catch (Exception e) {\n-            throw new EncrypterException(\"Error while retrieving authentication key\", e);\n-        }\n+    private void validateGetResponse(List<SecurityKeyType> keyTypes, GetSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n     }\n \n-    @Override\n-    public byte[] getDlmsGlobalUnicastEncryptionKey(String deviceIdentification) {\n-\n-        try {\n-            GetSecretsRequest request = getSoapRequestForKey(deviceIdentification,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-            GetSecretsResponse response = secretManagementClient.getSecretsRequest(request);\n-            Optional<TypedSecret> optionalTypedSecret = getTypedSecretFromSoapResponse(response,\n-                    SecretType.E_METER_ENCRYPTION_KEY_UNICAST);\n-\n-            byte[] decryptedKey = decryptSoapSecret(deviceIdentification, optionalTypedSecret.orElseThrow(\n-                    () -> new IllegalStateException(\"Secret not found:\" + deviceIdentification)));\n+    private void validateGetNewResponse(List<SecurityKeyType> keyTypes, GetNewSecretsResponse response) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+    }\n \n-            log.trace(\"DlmsGlobalUnicastEncryptionKey for device \" + deviceIdentification + \" is \" + Hex.encodeHexString(decryptedKey));\n+    private Map<SecurityKeyType, byte[]> convertSoapSecretsToSecretMapByType(List<TypedSecret> soapSecrets) {\n+        Function<TypedSecret, SecurityKeyType> convertType = ts -> SecurityKeyType.fromSecretType(ts.getType());\n+        Function<TypedSecret, byte[]> convertSecret = ts -> this.decryptSoapSecret(ts,false);\n+        Map<SecurityKeyType,byte[]> decryptedKeysByType = new EnumMap<>(SecurityKeyType.class);\n+        soapSecrets.forEach(ts->decryptedKeysByType.put(convertType.apply(ts),convertSecret.apply(ts)));\n+        return decryptedKeysByType;\n+    }\n \n-            return decryptedKey;\n+    private GetSecretsRequest createGetSecretsRequest(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        GetSecretsRequest request = new GetSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n+    }\n \n-        } catch (Exception e) {\n-            LOGGER.error(\"Error while retrieving encryption key\", e);\n-        }\n-        return new byte[0];\n+    private GetNewSecretsRequest createGetNewSecretsRequest(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        GetNewSecretsRequest request = new GetNewSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.stream().forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        return request;\n     }\n \n-    @Override\n-    public byte[] getMbusDefaultKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    /**\n+     * Store new key\n+     * <p>\n+     * A new key is a security key with a device which status NEW.\n+     * This status is used when the new key is known, but not yet set on the device.\n+     * <p>\n+     * <strong>CAUTION:</strong> Only call this method when a successful\n+     * connection with the device has been set up (that is: a valid\n+     * communication key that works is known), and you are sure any existing new\n+     * key data that is not activated yet (for instance a new key stored earlier in an\n+     * attempt to replace the communication key that got aborted).<br>\n+     * <p>\n+     * The moment the new key is known to be transferred to the device, make\n+     * sure to activate it by calling\n+     * {@link #activateNewKey(String, SecurityKeyType)}.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param key\n+     *         key to store, unencrypted\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @see #activateNewKey(String, SecurityKeyType)\n+     */\n+    public void storeNewKey(String deviceIdentification, SecurityKeyType keyType, byte[] key) {\n+        Map<SecurityKeyType, byte[]> keysByType = new EnumMap<>(SecurityKeyType.class);\n+        keysByType.put(keyType, key);\n+        this.storeNewKeys(deviceIdentification, keysByType);\n     }\n \n-    @Override\n-    public byte[] getMbusUserKey(String mbusDeviceIdentification) {\n-        throw new NotImplementedException();\n+    public void storeNewKeys(String deviceIdentification, Map<SecurityKeyType, byte[]> keysByType) {\n+        this.validateKeys(keysByType);\n+        TypedSecrets typedSecrets = new TypedSecrets();\n+        List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n+        for (Map.Entry<SecurityKeyType,byte[]> entry : keysByType.entrySet()) {\n+            TypedSecret ts = new TypedSecret();\n+            ts.setType(entry.getKey().toSecretType());\n+            ts.setSecret(this.encryptSoapSecret(entry.getValue(),true));\n+            typedSecretList.add(ts);\n+        }\n+        StoreSecretsRequest request = this.createStoreSecretsRequest(deviceIdentification, typedSecrets);\n+        this.secretManagementClient.storeSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] getDlmsPassword(String deviceIdentification) {\n-        throw new NotImplementedException();\n+    private void validateKeys(Map<SecurityKeyType, byte[]> keysByType) {\n+        long nrNulls = keysByType.values().stream().filter(Objects::isNull).count();\n+        if (nrNulls > 0) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Provided %s keys, %s of which were NULL\", keysByType.size(), nrNulls));\n+        }\n     }\n \n-    @Override\n-    public DlmsDevice storeNewKey(DlmsDevice device, byte[] encryptedKey, SecurityKeyType keyType) {\n-        throw new NotImplementedException();\n+    private StoreSecretsRequest createStoreSecretsRequest(String deviceIdentification, TypedSecrets typedSecrets) {\n+        StoreSecretsRequest request = new StoreSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setTypedSecrets(typedSecrets);\n+        return request;\n     }\n \n-    @Override\n-    public DlmsDevice validateNewKey(DlmsDevice device, SecurityKeyType keyType) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    /**\n+     * Updates the state of a new key from 'new' to 'active'\n+     * <p>\n+     * This method should be called to activate a new key stored with\n+     * {@link #storeNewKeys(String, Map)} after it has\n+     * been confirmed to be set on the device.\n+     *\n+     * @param deviceIdentification\n+     *         DLMS device id\n+     * @param keyType\n+     *         type of key\n+     *\n+     * @throws ProtocolAdapterException\n+     *         if no new key is stored with the given device\n+     * @see #storeNewKeys(String, Map)\n+     */\n+    public void activateNewKey(String deviceIdentification, SecurityKeyType keyType) throws ProtocolAdapterException {\n+        this.activateNewKeys(deviceIdentification, Arrays.asList(keyType));\n     }\n \n-    @Override\n-    public byte[] generateKey() {\n-        throw new NotImplementedException();\n+    public void activateNewKeys(String deviceIdentification, List<SecurityKeyType> keyTypes) {\n+        ActivateSecretsRequest request = new ActivateSecretsRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretTypes(new SecretTypes());\n+        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n+        keyTypes.forEach(kt -> secretTypeList.add(kt.toSecretType()));\n+        this.secretManagementClient.activateSecretsRequest(request);\n     }\n \n-    @Override\n-    public byte[] generateAndEncryptKey() {\n-        throw new NotImplementedException();\n+    public boolean hasNewSecretOfType(String deviceIdentification, SecurityKeyType keyType) {\n+        HasNewSecretRequest request = new HasNewSecretRequest();\n+        request.setDeviceId(deviceIdentification);\n+        request.setSecretType(keyType.toSecretType());\n+        HasNewSecretResponse response = this.secretManagementClient.hasNewSecretRequest(request);\n+        return response.isHasNewSecret();\n     }\n \n-    @Override\n-    public byte[] encryptMbusUserKey(byte[] mbusDefaultKey, byte[] mbusUserKey) throws ProtocolAdapterException {\n-        throw new NotImplementedException();\n+    public byte[] generate128BitsKeyAndStoreAsNewKey(String deviceIdentification, SecurityKeyType keyType) {\n+        return this.generate128BitsKeysAndStoreAsNewKeys(deviceIdentification, Arrays.asList(keyType)).get(keyType);\n     }\n \n-    private Optional<TypedSecret> getTypedSecretFromSoapResponse(GetSecretsResponse response, SecretType secretType) {\n+    /**\n+     * Generates a new key that can be used as DLMS master key, authentication\n+     * key, global unicast encryption key, M-Bus Default key or M-Bus User key.\n+     * <p>\n+     * The master keys (DLMS master or M-Bus Default) cannot be changed on a\n+     * device, but can be generated for use in tests or with simulated devices.\n+     *\n+     * @return a new 128bits key, unencrypted.\n+     */\n+    public Map<SecurityKeyType, byte[]> generate128BitsKeysAndStoreAsNewKeys(String deviceIdentification,\n+            List<SecurityKeyType> keyTypes) {\n+        SecretTypes secretTypes = new SecretTypes();\n+        GenerateAndStoreSecretsRequest request = this\n+                .createGenerateAndStoreSecretsRequest(deviceIdentification, secretTypes);\n+        secretTypes.getSecretType().addAll(keyTypes.stream().map(SecurityKeyType::toSecretType).collect(toList()));\n+\n+        GenerateAndStoreSecretsResponse response = this.secretManagementClient.generateAndStoreSecrets(request);\n         TypedSecrets typedSecrets = response.getTypedSecrets();\n         List<TypedSecret> typedSecretList = typedSecrets.getTypedSecret();\n-\n-        return typedSecretList.stream().filter(typedSecret -> typedSecret.getType() == secretType).findFirst();\n+        this.validateGenerateAndStoreResponse(keyTypes, response, typedSecretList);\n+        return this.convertSoapSecretsToSecretMapByType(typedSecrets.getTypedSecret());\n     }\n \n-    private GetSecretsRequest getSoapRequestForKey(String deviceIdentification, SecretType secretType) {\n-        GetSecretsRequest request = new GetSecretsRequest();\n+    private GenerateAndStoreSecretsRequest createGenerateAndStoreSecretsRequest(String deviceIdentification,\n+            SecretTypes secretTypes) {\n+        GenerateAndStoreSecretsRequest request = new GenerateAndStoreSecretsRequest();\n         request.setDeviceId(deviceIdentification);\n-        request.setSecretTypes(new SecretTypes());\n-        List<SecretType> secretTypeList = request.getSecretTypes().getSecretType();\n-        secretTypeList.add(secretType);\n+        request.setSecretTypes(secretTypes);\n         return request;\n     }\n \n-    private byte[] decryptSoapSecret(String deviceIdentification, TypedSecret typedSecret) {\n+    private void validateGenerateAndStoreResponse(List<SecurityKeyType> keyTypes,\n+            GenerateAndStoreSecretsResponse response, List<TypedSecret> typedSecretList) {\n+        this.validateOsgpResultAndTypedSecrets(response.getResult(), response.getTechnicalFault(),\n+                response.getTypedSecrets(), keyTypes.size());\n+        typedSecretList.forEach(ts -> {\n+            if (ts.getSecret() == null) {\n+                throw new IllegalStateException(String.format(\"Generated a NULL key (key_type=%s)\", ts.getType()));\n+            }\n+        });\n+    }\n+\n+    private void validateOsgpResultAndTypedSecrets(OsgpResultType result, Object fault, TypedSecrets typedSecrets,\n+            int expectedNrKeys) {\n+        if (!OsgpResultType.OK.equals(result)) {\n+            throw new IllegalStateException(\"Could not generate and store keys in secret-mgmt: \" + fault.toString());\n+        } else if (typedSecrets == null || typedSecrets.getTypedSecret() == null) {\n+            throw new IllegalStateException(\"No secrets in response\");\n+        } else if (expectedNrKeys != typedSecrets.getTypedSecret().size()) {\n+            throw new IllegalStateException(\n+                    String.format(\"Unexpected number of secrets in response: expected %s but \" + \"found %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 412}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MTA2Nw==", "bodyText": "Is there any rationale behind auto-wiring the secretManagementService as a field when the other dependencies are set through the constructor?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527841067", "createdAt": "2020-11-20T17:18:36Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java", "diffHunk": "@@ -51,11 +56,12 @@\n \n     private String ipAddress;\n \n-    public RecoverKeyProcess(final DomainHelperService domainHelperService,\n-            final DlmsDeviceRepository dlmsDeviceRepository, final int responseTimeout, final int logicalDeviceAddress,\n-            final DlmsDeviceAssociation deviceAssociation) {\n+    @Autowired\n+    private SecretManagementService secretManagementService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0MzM1Mg==", "bodyText": "Not good to leave TODOs in the code. Either figure out and resolve the issues, or if they are not pressing, manage them through the backlog. (Same for the other TODOs.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r527843352", "createdAt": "2020-11-20T17:21:23Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java", "diffHunk": "@@ -76,24 +84,35 @@ public void run() {\n         LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n \n         try {\n-            this.initDevice();\n+            this.findDevice();\n         } catch (final Exception e) {\n-            LOGGER.error(\"Unexpected exception: {}\", e);\n+            LOGGER.error(\"Could not find device\", e);\n+            //TODO why try to find device if you don't do anything with the result?!?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM0MzQxOQ=="}, "originalCommit": {"oid": "b1662d898a9b29b6a5212068b65d4b215b7c0ab3"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MjgxMDc1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-536281075", "createdAt": "2020-11-23T09:11:08Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMTowOFrOH4Ee4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToyNjowMlrOH4Sb-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTc0Nw==", "bodyText": "It looks like the reEncryptedAuthenticationKey and reEncryptedEncryptionKey have names that are no longer correct with these changes, as they appear to contain the authentication key and encryption key (without any re-encryption).", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528555747", "createdAt": "2020-11-23T09:11:08Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyCommandExecutor.java", "diffHunk": "@@ -101,58 +109,62 @@ public ActionResponseDto executeBundleAction(final DlmsConnectionManager conn, f\n         LOGGER.info(\"Keys set on device :{}\", device.getDeviceIdentification());\n \n         SetKeysRequestDto setKeysRequestDto = (SetKeysRequestDto) actionRequestDto;\n+\n         if (!setKeysRequestDto.isGeneratedKeys()) {\n-            setKeysRequestDto = this.reEncryptKeys((SetKeysRequestDto) actionRequestDto);\n+            setKeysRequestDto = this.decryptRsaKeys((SetKeysRequestDto) actionRequestDto);\n         }\n+        //if keys are generated, then they are unencrypted by the GenerateAndReplaceKeyCommandExecutor\n \n         final DlmsDevice devicePostSave = this.execute(conn, device, ReplaceKeyCommandExecutor\n                 .wrap(setKeysRequestDto.getAuthenticationKey(), KeyId.AUTHENTICATION_KEY,\n-                        SecurityKeyType.E_METER_AUTHENTICATION));\n+                        SecurityKeyType.E_METER_AUTHENTICATION, setKeysRequestDto.isGeneratedKeys()));\n \n         this.execute(conn, devicePostSave, ReplaceKeyCommandExecutor\n                 .wrap(setKeysRequestDto.getEncryptionKey(), KeyId.GLOBAL_UNICAST_ENCRYPTION_KEY,\n-                        SecurityKeyType.E_METER_ENCRYPTION));\n+                        SecurityKeyType.E_METER_ENCRYPTION, setKeysRequestDto.isGeneratedKeys()));\n \n         return new ActionResponseDto(REPLACE_KEYS + device.getDeviceIdentification() + WAS_SUCCESFULL);\n     }\n \n-    private SetKeysRequestDto reEncryptKeys(final SetKeysRequestDto setKeysRequestDto) throws FunctionalException {\n-        final byte[] reEncryptedAuthenticationKey = this.securityKeyService\n-                .reEncryptKey(setKeysRequestDto.getAuthenticationKey(), SecurityKeyType.E_METER_AUTHENTICATION);\n-        final byte[] reEncryptedEncryptionKey = this.securityKeyService\n-                .reEncryptKey(setKeysRequestDto.getEncryptionKey(), SecurityKeyType.E_METER_ENCRYPTION);\n+    private SetKeysRequestDto decryptRsaKeys(final SetKeysRequestDto setKeysRequestDto) throws FunctionalException {\n+        final byte[] reEncryptedAuthenticationKey =\n+                this.encryptionService.rsaDecrypt(setKeysRequestDto.getAuthenticationKey());\n+        final byte[] reEncryptedEncryptionKey = this.encryptionService.rsaDecrypt(setKeysRequestDto.getEncryptionKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4NDcxMw==", "bodyText": "This is the only point where methodResultCode is initialized, and it seems unclear why it is split from the declaration at the start of the method,\nPerhaps nicer to remove the variable and just return the value from the action like in transferKey.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528584713", "createdAt": "2020-11-23T09:58:56Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -82,80 +94,115 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n \n             final String mbusDeviceIdentification = gMeterInfo.getDeviceIdentification();\n             final int channel = gMeterInfo.getChannel();\n-            DlmsDevice mbusDevice = this.dlmsDeviceRepository.findByDeviceIdentification(mbusDeviceIdentification);\n-            if (mbusDevice == null) {\n-                throw new ProtocolAdapterException(\"Unknown M-Bus device: \" + mbusDeviceIdentification);\n-            }\n-\n-            final byte[] mbusUserKey = this.securityKeyService.generateKey();\n-            final byte[] mbusDefaultKey = this.securityKeyService\n-                    .getMbusDefaultKey(gMeterInfo.getDeviceIdentification());\n-\n-            final SecurityKeyType mbusUserKeyType = SecurityKeyType.G_METER_ENCRYPTION;\n-            final byte[] encryptedUserKey = this.securityKeyService.encryptKey(mbusUserKey, mbusUserKeyType);\n-            mbusDevice = this.securityKeyService.storeNewKey(mbusDevice, encryptedUserKey, mbusUserKeyType);\n-\n             final ObisCode obisCode = OBIS_HASHMAP.get(channel);\n+            final byte[] gMeterEncryptionKey = this.secretManagementService\n+                    .generate128BitsKeyAndStoreAsNewKey(mbusDeviceIdentification, G_METER_ENCRYPTION);\n \n-            final MethodParameter methodTransferKey = this.getTransferKeyToMBusMethodParameter(obisCode, mbusDefaultKey,\n-                    mbusUserKey);\n-\n-            conn.getDlmsMessageListener()\n-                    .setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n-                            + \", call M-Bus Setup transfer_key method: \"\n-                            + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n-\n-            MethodResult methodResultCode = conn.getConnection().action(methodTransferKey);\n-            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup transfer_key\");\n-            LOGGER.info(\"Successfully invoked M-Bus Setup transfer_key method: class_id {} obis_code {}\", CLASS_ID,\n-                    obisCode);\n-\n-            conn.getDlmsMessageListener()\n-                    .setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + gMeterInfo.getChannel()\n-                            + \", call M-Bus Setup set_encryption_key method: \"\n-                            + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n+            MethodResult methodResultCode = this\n+                    .transferKey(conn, mbusDeviceIdentification, channel, gMeterEncryptionKey);\n+            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup transfer_key\", obisCode);\n \n-            final MethodParameter methodSetEncryptionKey = this.getSetEncryptionKeyMethodParameter(obisCode,\n-                    mbusUserKey);\n-            methodResultCode = conn.getConnection().action(methodSetEncryptionKey);\n-            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup set_encryption_key\");\n-            LOGGER.info(\"Successfully invoked M-Bus Setup set_encryption_key method: class_id {} obis_code {}\",\n-                    CLASS_ID, obisCode);\n-\n-            this.securityKeyService.validateNewKey(mbusDevice, mbusUserKeyType);\n+            methodResultCode = this.setEncryptionKey(conn, channel, gMeterEncryptionKey);\n+            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup set_encryption_key\", obisCode);\n \n+            this.secretManagementService.activateNewKey(mbusDeviceIdentification, G_METER_ENCRYPTION);\n             return MethodResultCode.SUCCESS;\n         } catch (final IOException e) {\n             throw new ConnectionException(e);\n         } catch (final EncrypterException e) {\n             throw new ProtocolAdapterException(\n                     \"Unexpected exception during decryption of security keys, reason = \" + e.getMessage(), e);\n+        } catch (final FunctionalException e) {\n+            throw new ProtocolAdapterException(\"Unexpected exception: \" + e.toString(), e);\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)\n+            throws IOException {\n+        MethodResult methodResultCode;\n+        final MethodParameter methodSetEncryptionKey = this\n+                .getSetEncryptionKeyMethodParameter(OBIS_HASHMAP.get(channel), encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n+                + \", call M-Bus Setup set_encryption_key method: \" + JdlmsObjectToStringUtil\n+                .describeMethod(methodSetEncryptionKey));\n+        methodResultCode = conn.getConnection().action(methodSetEncryptionKey);\n+        return methodResultCode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDExMA==", "bodyText": "I think we already have dependencies that offer Pair classes.\nOther than that it looks a bit more involved than necessary to take this route with pairs.\nIf you would have to use an extra data structure some kind of bi-directional map seems to have semantics that more naturally reflect the one-to-one relation than a list of pairs.\nWouldn't the code be shorter and simpler though, if the SecretType would be stored in a field with the SecurityKeyType enum?\nThe only thing that is still needed would be the static method to determine the SecurityKeyType for a given SecretType. Here you could just iterate/stream over the enum values returning the first with matching SecretType.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528600110", "createdAt": "2020-11-23T10:24:30Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/entities/SecurityKeyType.java", "diffHunk": "@@ -31,5 +38,58 @@\n     /**\n      * Password (e.g. used as DLMS Low Level Security secret)\n      */\n-    PASSWORD\n+    PASSWORD;\n+\n+    private static class Pair<A,B> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNjA2Nw==", "bodyText": "This used to catch errors involving the key encryption or decryption.\nWith the implementation of the secretManagementService I didn't think that the EncrypterException gets thrown anymore.\nFor the logic in this block to work, I suspect that the secretManagementService would have to throw EncrypterException on key encryption/decryption errors, instead of IllegalStateException it throws now.\nI am not sure if catching IllegalStateException here would be an appropriate alternative, but at first sight I'd be hesitant to do that since it may be thrown for other issues than key encryption/decryption.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528616067", "createdAt": "2020-11-23T10:51:57Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java", "diffHunk": "@@ -94,12 +97,14 @@ protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder t\n         final byte[] dlmsAuthenticationKey;\n         final byte[] dlmsEncryptionKey;\n         try {\n-            dlmsAuthenticationKey = this.securityKeyService.getDlmsAuthenticationKey(deviceIdentification);\n-            dlmsEncryptionKey = this.securityKeyService.getDlmsGlobalUnicastEncryptionKey(deviceIdentification);\n+            Map<SecurityKeyType, byte[]> encryptedKeys = this.secretManagementService\n+                    .getKeys(deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n+            dlmsAuthenticationKey = encryptedKeys.get(E_METER_AUTHENTICATION);\n+            dlmsEncryptionKey = encryptedKeys.get(E_METER_ENCRYPTION);\n         } catch (final EncrypterException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxNzkwOQ==", "bodyText": "Any particular reason to want to include the original encryption related exception as cause of the functional exception? It is already logged by the logger statement before.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528617909", "createdAt": "2020-11-23T10:55:15Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/factories/Hls5Connector.java", "diffHunk": "@@ -94,12 +97,14 @@ protected void setSecurity(final DlmsDevice device, final TcpConnectionBuilder t\n         final byte[] dlmsAuthenticationKey;\n         final byte[] dlmsEncryptionKey;\n         try {\n-            dlmsAuthenticationKey = this.securityKeyService.getDlmsAuthenticationKey(deviceIdentification);\n-            dlmsEncryptionKey = this.securityKeyService.getDlmsGlobalUnicastEncryptionKey(deviceIdentification);\n+            Map<SecurityKeyType, byte[]> encryptedKeys = this.secretManagementService\n+                    .getKeys(deviceIdentification, Arrays.asList(E_METER_AUTHENTICATION, E_METER_ENCRYPTION));\n+            dlmsAuthenticationKey = encryptedKeys.get(E_METER_AUTHENTICATION);\n+            dlmsEncryptionKey = encryptedKeys.get(E_METER_ENCRYPTION);\n         } catch (final EncrypterException e) {\n             LOGGER.error(\"Error determining DLMS communication key setting up HLS5 connection\", e);\n             throw new FunctionalException(FunctionalExceptionType.INVALID_DLMS_KEY_ENCRYPTION,\n-                    ComponentType.PROTOCOL_DLMS);\n+                    ComponentType.PROTOCOL_DLMS, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY1ODM5OA==", "bodyText": "It looks like nothing changed in this class, other than some opinionated restructuring of code that looked perfectly OK.\nThis only leads to bigger diffs in pull request and the next person may decide to change it back.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528658398", "createdAt": "2020-11-23T12:10:43Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/exceptions/OsgpExceptionConverter.java", "diffHunk": "@@ -41,19 +41,18 @@\n      */\n     public OsgpException ensureOsgpOrTechnicalException(final Exception e) {\n \n-        final boolean osgpExceptionNotSupportedByShared = e instanceof ImageTransferException\n-                || e instanceof ProtocolAdapterException;\n+        final boolean osgpExceptionNotSupportedByShared =\n+                e instanceof ImageTransferException || e instanceof ProtocolAdapterException;\n \n         if (e instanceof OsgpException && !osgpExceptionNotSupportedByShared) {\n             return (OsgpException) e;\n-        }\n-        if (e instanceof ConnectionException) {\n+        } else if (e instanceof ConnectionException) {\n             return new FunctionalException(FunctionalExceptionType.CONNECTION_ERROR, ComponentType.PROTOCOL_DLMS,\n                     new OsgpException(ComponentType.PROTOCOL_DLMS, e.getMessage()));\n+        } else {\n+            return new TechnicalException(ComponentType.PROTOCOL_DLMS,\n+                    \"Unexpected exception while handling protocol request/response message\",\n+                    new OsgpException(ComponentType.PROTOCOL_DLMS, e.getMessage()));\n         }\n-\n-        return new TechnicalException(ComponentType.PROTOCOL_DLMS,\n-                \"Unexpected exception while handling protocol request/response message\",\n-                new OsgpException(ComponentType.PROTOCOL_DLMS, e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2NDM3Nw==", "bodyText": "Is this encryption key actually used in the protocol adapter?\nI looked a bit and didn't find it. If it actually is not used, it had better be removed from here.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528664377", "createdAt": "2020-11-23T12:21:11Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/resources/osgp-adapter-protocol-dlms.properties", "diffHunk": "@@ -8,7 +8,9 @@ soapclient.ssl.key-store-password=1234\n soapclient.ssl.key-password=1234\n \n encryption.soap.rsa.private.key.resource=file:/etc/osp/smartmetering/keys/platform/osgp-protocol-adapter-rsa-private.key\n-\n+encryption.soap.rsa.public.key.resource=file:/etc/osp/smartmetering/keys/platform/osgp-protocol-adapter-rsa-public.key\n+#AES encryption key used for protocol adapter in-memory\n+encryption.key.path=/etc/osp/smartmetering/keys/platform/secret.aes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2NTY2OA==", "bodyText": "This file is missing a required license header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528665668", "createdAt": "2020-11-23T12:23:38Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY2NjcxOA==", "bodyText": "The value of AES_SECRET is not used. It looks like it should be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528666718", "createdAt": "2020-11-23T12:25:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/application/services/SecretManagementServiceTest.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package org.opensmartgridplatform.adapter.protocol.dlms.application.services;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.commons.codec.binary.Hex;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.opensmartgridplatform.adapter.protocol.dlms.application.wsclient.SecretManagementClient;\n+import org.opensmartgridplatform.adapter.protocol.dlms.domain.entities.SecurityKeyType;\n+import org.opensmartgridplatform.adapter.protocol.dlms.exceptions.ProtocolAdapterException;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.ActivateSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GenerateAndStoreSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.GetSecretsResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.HasNewSecretResponse;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.OsgpResultType;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.StoreSecretsRequest;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecret;\n+import org.opensmartgridplatform.ws.schema.core.secret.management.TypedSecrets;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class SecretManagementServiceTest {\n+    @InjectMocks\n+    SecretManagementService testService;\n+\n+    @Mock\n+    SecretManagementClient secretManagementClient;\n+    @Mock\n+    RsaEncrypter rsaEncrypter;\n+\n+    private static final String DEVICE_IDENTIFICATION = \"E000123456789\";\n+    private static final SecurityKeyType KEY_TYPE = SecurityKeyType.E_METER_ENCRYPTION;\n+    private static final byte[] UNENCRYPTED_SECRET = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n+    private static final byte[] AES_SECRET = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY3MzIxNg==", "bodyText": "With the change of the type it would look nicer if the bean name was altered accordingly.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528673216", "createdAt": "2020-11-23T12:37:45Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/test/java/org/opensmartgridplatform/adapter/protocol/dlms/infra/messaging/MessagingTestConfiguration.java", "diffHunk": "@@ -133,8 +133,8 @@ public MonitoringService monitoringService() {\n     }\n \n     @Bean\n-    public SecurityKeyService securityKeyService() {\n-        return Mockito.mock(SecurityKeyService.class);\n+    public SecretManagementService securityKeyService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4MDg4Nw==", "bodyText": "This WSDL looks strange and suspicious.\nInstead of importing secret-management.xsd in the WSDL types, someone appears to have copy pasted it and reformatted it on a single line at some point in time.\nRather than trying to keep this line in sync with the XSD, I think it would be better to use XSD import, like in other WSDLs in the platform.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528680887", "createdAt": "2020-11-23T12:51:50Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/osgp-ws-secret-management/src/main/resources/wsdl/SecretManagement.wsdl", "diffHunk": "@@ -1,26 +1,60 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:sch=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\" targetNamespace=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\">\n+<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n+                  xmlns:tns=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\"\n+                  targetNamespace=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\">\n     <wsdl:types>\n         <xsd:schema xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\"><xsd:simpleType name=\"Identification\"><xsd:restriction base=\"xsd:normalizedString\"><xsd:minLength value=\"1\"/><xsd:maxLength value=\"40\"/><xsd:pattern value=\"[^ ]{0,40}\"/></xsd:restriction></xsd:simpleType><xsd:simpleType name=\"DeviceIdentification\"><xsd:restriction base=\"tns:AlphaNumericType\"><xsd:length value=\"17\"/></xsd:restriction></xsd:simpleType><xsd:simpleType name=\"AlphaNumericType\"><xsd:restriction base=\"xsd:string\"><xsd:pattern value=\"[a-zA-Z0-9 ]+\"/></xsd:restriction></xsd:simpleType><xsd:simpleType name=\"OsgpResultType\"><xsd:restriction base=\"xsd:string\"><xsd:enumeration value=\"OK\"/><xsd:enumeration value=\"NOT FOUND\"/><xsd:enumeration value=\"NOT OK\"/></xsd:restriction></xsd:simpleType><xsd:element name=\"TechnicalFault\"><xsd:complexType><xsd:sequence><xsd:element name=\"Message\" type=\"xsd:string\"/><xsd:element name=\"Component\" type=\"xsd:string\"/><xsd:element name=\"InnerException\" type=\"xsd:string\"/><xsd:element name=\"InnerMessage\" type=\"xsd:string\"/></xsd:sequence></xsd:complexType></xsd:element><xsd:simpleType name=\"SecretType\"><xsd:restriction base=\"xsd:string\"><xsd:enumeration value=\"E_METER_MASTER_KEY\"/><xsd:enumeration value=\"E_METER_AUTHENTICATION_KEY\"/><xsd:enumeration value=\"E_METER_ENCRYPTION_KEY_UNICAST\"/><xsd:enumeration value=\"E_METER_ENCRYPTION_KEY_BROADCAST\"/><xsd:enumeration value=\"G_METER_MASTER_KEY\"/><xsd:enumeration value=\"G_METER_ENCRYPTION_KEY\"/><xsd:enumeration value=\"G_METER_FIRMWARE_UPDATE_AUTHENTICATION_KEY\"/><xsd:enumeration value=\"G_METER_OPTICAL_PORT_KEY\"/><xsd:enumeration value=\"PPP_PASSWORD\"/></xsd:restriction></xsd:simpleType><xsd:complexType name=\"SecretTypes\"><xsd:sequence><xsd:element maxOccurs=\"16\" name=\"SecretType\" type=\"tns:SecretType\"/></xsd:sequence></xsd:complexType><xsd:complexType name=\"TypedSecret\"><xsd:sequence><xsd:element name=\"Type\" type=\"tns:SecretType\"/><xsd:element name=\"Secret\" type=\"xsd:string\"/></xsd:sequence></xsd:complexType><xsd:complexType name=\"TypedSecrets\"><xsd:sequence maxOccurs=\"16\"><xsd:element name=\"TypedSecret\" type=\"tns:TypedSecret\"/></xsd:sequence></xsd:complexType><xsd:element name=\"getSecretsRequest\"><xsd:complexType><xsd:sequence><xsd:element name=\"DeviceId\" type=\"tns:DeviceIdentification\"/><xsd:element name=\"SecretTypes\" type=\"tns:SecretTypes\"/></xsd:sequence></xsd:complexType></xsd:element><xsd:element name=\"getSecretsResponse\"><xsd:complexType><xsd:sequence><xsd:element name=\"Result\" type=\"tns:OsgpResultType\"/><xsd:element name=\"TypedSecrets\" type=\"tns:TypedSecrets\"/><xsd:element name=\"TechnicalFault\"/></xsd:sequence></xsd:complexType></xsd:element><xsd:element name=\"storeSecretsRequest\"><xsd:complexType><xsd:sequence><xsd:element name=\"DeviceId\" type=\"tns:DeviceIdentification\"/><xsd:sequence><xsd:element name=\"TypedSecrets\" type=\"tns:TypedSecrets\"/></xsd:sequence></xsd:sequence></xsd:complexType></xsd:element><xsd:element name=\"storeSecretsResponse\"><xsd:complexType><xsd:sequence><xsd:element name=\"Result\" type=\"tns:OsgpResultType\"/><xsd:element name=\"TechnicalFault\"/></xsd:sequence></xsd:complexType></xsd:element></xsd:schema>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY4NjUwMg==", "bodyText": "When validating this WSDL it shows a number of problems have been introduced. Some element declarations don't refer to values defined in a schema (my guess would be that it may have something to do with the XSD not being properly imported - see my other comment with the WSDL types).\nThe SecretManagementPortSoap11 binding for storeSecrets is not defined for port type SecretManagementPort.\nI think this may be because of a type with the input named storeSecretRequests versus storeSecretsRequest.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528686502", "createdAt": "2020-11-23T13:01:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/osgp-ws-secret-management/src/main/resources/wsdl/SecretManagement.wsdl", "diffHunk": "@@ -1,26 +1,60 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n-<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:sch=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\" targetNamespace=\"http://www.opensmartgridplatform.org/schemas/security/secretmanagement\">\n+<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwNzE1OA==", "bodyText": "Wouldn't it be simpler (and conceptually more fitting) if the encryption providers were in a map of EncryptionProviderType to EncryptionProvider? (If there is only ever to be one provider per type, the map reflects that a little better.)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528707158", "createdAt": "2020-11-23T13:36:09Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/DefaultEncryptionDelegate.java", "diffHunk": "@@ -20,24 +20,39 @@\n @Component\n public class DefaultEncryptionDelegate implements EncryptionDelegate {\n \n-    private static final String ERROR_NO_PROVIDER = \"Could not find a provider\";\n+    private static final String ERROR_NO_PROVIDER = \"Could not find a provider of type %s; available providers are %s\";\n     private final List<EncryptionProvider> providers;\n \n     public DefaultEncryptionDelegate(final List<EncryptionProvider> encryptionProviders) {\n         this.providers = encryptionProviders;\n     }\n \n+    private EncryptionProvider getEncryptionProvider(EncryptionProviderType type) {\n+        return this.providers.stream().filter(provider -> provider.getType().equals(type)).findFirst()\n+                             .orElseThrow(() -> new EncrypterException(String.format(ERROR_NO_PROVIDER, type,\n+                                     this.providers)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMDQ5OQ==", "bodyText": "Copyright for new classes should mention Alliander N.V. instead of Smart Society Services B.V.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528710499", "createdAt": "2020-11-23T13:41:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxMzE4Nw==", "bodyText": "Any reason this task has not been completed? We shouldn't keep open work in TODOs in the code, if something is left out of scope it could be managed through the backlog.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528713187", "createdAt": "2020-11-23T13:45:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration\n+//  refactor it to 1 single configurable class with 2 instances with different configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxNTY0NA==", "bodyText": "This comment does not look like it is appropriate for the GXF code base.\nA comment (not in Dutch) that the suppression is for the good cooperation with other components in the runtime might be better.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528715644", "createdAt": "2020-11-23T13:49:48Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration\n+//  refactor it to 1 single configurable class with 2 instances with different configurations\n+public class RsaEncrypter {\n+    private static final int BLOCK_SIZE = 16;\n+    private static final String ALG = \"RSA\";\n+    private static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public void setPrivateKeyStore(File privateKeyStoreFile) {\n+        try {\n+            byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+            this.privateKey = KeyFactory.getInstance(ALG).generatePrivate(privateKeySpec);\n+        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException e) {\n+            throw new EncrypterException(\"Could not get cipher\", e);\n+        }\n+    }\n+\n+    public void setPublicKeyStore(File publicKeyStoreFile) {\n+        try {\n+            byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+            this.publicKey = KeyFactory.getInstance(ALG).generatePublic(publicKeySpec);\n+        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException e) {\n+            throw new EncrypterException(\"Could not set public keystore\", e);\n+        }\n+    }\n+\n+    //Afgestemd met Paul Houtman: totdat Netinium is uitgefaseerd moeten we compatibel blijven", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcxNjgzNg==", "bodyText": "Would it make sense to try and get rid of the warning by placing the algorithm metadata in configurable properties?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528716836", "createdAt": "2020-11-23T13:51:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration\n+//  refactor it to 1 single configurable class with 2 instances with different configurations\n+public class RsaEncrypter {\n+    private static final int BLOCK_SIZE = 16;\n+    private static final String ALG = \"RSA\";\n+    private static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public void setPrivateKeyStore(File privateKeyStoreFile) {\n+        try {\n+            byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+            this.privateKey = KeyFactory.getInstance(ALG).generatePrivate(privateKeySpec);\n+        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException e) {\n+            throw new EncrypterException(\"Could not get cipher\", e);\n+        }\n+    }\n+\n+    public void setPublicKeyStore(File publicKeyStoreFile) {\n+        try {\n+            byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+            this.publicKey = KeyFactory.getInstance(ALG).generatePublic(publicKeySpec);\n+        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException e) {\n+            throw new EncrypterException(\"Could not set public keystore\", e);\n+        }\n+    }\n+\n+    //Afgestemd met Paul Houtman: totdat Netinium is uitgefaseerd moeten we compatibel blijven\n+    @SuppressWarnings(\"squid:S5542\")\n+    protected Cipher getCipher() {\n+        try {\n+            return Cipher.getInstance(ALGORITHM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcyODk1Mg==", "bodyText": "Try to avoid adding files with only irrelevant formatting changes in a pull request.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528728952", "createdAt": "2020-11-23T14:10:34Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncryptionService.java", "diffHunk": "@@ -34,13 +34,12 @@\n import javax.crypto.NoSuchPaddingException;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n \n-import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2ODA0OQ==", "bodyText": "What does this do, and why does it do this?\nThe code looks sketchy and raises questions. If this does what it is supposed to do, it might be good to add a few explanatory comments.\nIf the decryptedSecret has more than 16 bytes, it drops the last 16 bytes (if this should match KEY_LENGTH it would be better to use the constant in both cases, and not have the constant in one place and a literal 16 in the other).\nWhat should be the result?\nSomething that has exactly KEY_LENGHT bytes, at most KEY_LENGTH bytes, or whatever comes in stripping the last 16 bytes.\nThis reminds me a bit of other code where the first number of bytes are left out if they are all zeros, but looks somewhat different.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528768049", "createdAt": "2020-11-23T15:04:18Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -45,63 +45,73 @@\n \n     private final KeyStore keyStore;\n \n-    public HsmEncryptionProvider(File keyStoreFile) {\n+    public HsmEncryptionProvider(final File keyStoreFile) {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-            FileInputStream fIn = new FileInputStream(keyStoreFile);\n+            final FileInputStream fIn = new FileInputStream(keyStoreFile);\n             this.keyStore.load(fIn, null);\n-        } catch (CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n+        } catch (final CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n             throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n-    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n-\n-        Secret decryptedSecret = super.decrypt(secret, keyReference);\n-\n-        byte[] decryptedSecretBytes = decryptedSecret.getSecret();\n-\n-        if (decryptedSecretBytes.length > KEY_LENGTH) {\n-\n-            byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecretBytes, 0,\n-                    decryptedSecretBytes.length-16);\n-\n-            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecretBytes) + \" to \" +\n+    @Override\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) {\n+        byte[] decryptedSecret = super.decrypt(secret, keyReference);\n+        if (decryptedSecret.length > KEY_LENGTH) {\n+            final byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecret, 0,\n+                    decryptedSecret.length-16);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4MTEyMA==", "bodyText": "It would be simpler to leave out the try catch block. If the exception occurs the test doesn't succeed, and this doesn't seem to offer much useful for the added code.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528781120", "createdAt": "2020-11-23T15:21:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/test/java/org/opensmartgridplatform/shared/security/RsaEncryptionServiceTest.java", "diffHunk": "@@ -80,20 +95,24 @@ private void assertDecryptionOfKey(final RsaEncryptionService rsaEncryptionServi\n         final byte[] expected = Files.readAllBytes(Paths.get(keyPath));\n         final byte[] actual = rsaEncryptionService.decrypt(Hex.decodeHex(encryptedHexString.toCharArray()));\n         assertThat(Hex.encodeHexString(actual)).withFailMessage(\"decrypted \" + keyType)\n-                .isEqualTo(Hex.encodeHexString(expected));\n+                                               .isEqualTo(Hex.encodeHexString(expected));\n     }\n \n     @Test\n     public void testEncryptDecryptReturnsInput() {\n-        final KeyPair freshKeyPair = RsaEncryptionService.createKeyPair(KEYSIZE);\n-        final RsaEncryptionService rsaEncryptionService = new RsaEncryptionService(freshKeyPair);\n-        final byte[] input = this.createRandomInput();\n-        final byte[] encrypted = rsaEncryptionService.encrypt(input);\n-        final byte[] decrypted = rsaEncryptionService.decrypt(encrypted);\n-        assertThat(decrypted).withFailMessage(\"decrypted bytes after encryption\").isEqualTo(input);\n+        try {\n+            final KeyPair freshKeyPair = RsaEncryptionService.createKeyPair(KEYSIZE);\n+            final RsaEncryptionService rsaEncryptionService = new RsaEncryptionService(freshKeyPair);\n+            final byte[] input = this.createRandomInput();\n+            final byte[] encrypted = rsaEncryptionService.encrypt(input);\n+            final byte[] decrypted = rsaEncryptionService.decrypt(encrypted);\n+            assertThat(decrypted).withFailMessage(\"decrypted bytes after encryption\").isEqualTo(input);\n+        } catch (EncrypterException ee) {\n+            fail(\"Encryption failure\", ee);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NDM3Nw==", "bodyText": "In test code, where an exception is just another test failure, it might be simpler not to do to much bookkeeping about specific exceptions, and just throw Exception if any checked exceptions are involved.\nThat being said, I don't see where createNewKeysForTests is used. So it may be better to just remove the method.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r528784377", "createdAt": "2020-11-23T15:26:02Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/test/java/org/opensmartgridplatform/shared/security/RsaEncryptionServiceTest.java", "diffHunk": "@@ -107,7 +126,7 @@ private RsaEncryptionService createRsaEncryptionServiceFromStoredKeys() {\n         return randomBytes;\n     }\n \n-    public static void createNewKeysForTests() throws IOException {\n+    public static void createNewKeysForTests() throws IOException, EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzIxOTA3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-537321907", "createdAt": "2020-11-24T09:56:42Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1Njo0MlrOH42zhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTo1Njo0MlrOH42zhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM4MDIzMQ==", "bodyText": "Dropping the security keys from DlmsDevice is in line with the intentions behind using the secret management service.\nAs there no longer is a use for SecurityKey in the platform It looks like the SecurityKey entity and the security_key table should be removed, and not left around without a purpose.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r529380231", "createdAt": "2020-11-24T09:56:42Z", "author": {"login": "bvdzwet"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/entities/DlmsDevice.java", "diffHunk": "@@ -56,9 +50,6 @@\n     @Column\n     private boolean hls5Active;\n \n-    @OneToMany(mappedBy = \"dlmsDevice\", fetch = FetchType.EAGER, cascade = { CascadeType.ALL }, orphanRemoval = true)\n-    private final List<SecurityKey> securityKeys = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjgwODEw", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-539280810", "createdAt": "2020-11-26T12:41:08Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0MTowOFrOH6Z1RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0MTowOFrOH6Z1RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwMjY5Mg==", "bodyText": "Why not throw new RecoverKeyException(e);", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r531002692", "createdAt": "2020-11-26T12:41:08Z", "author": {"login": "harrymiddelburgetall"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java", "diffHunk": "@@ -76,24 +82,35 @@ public void run() {\n         LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n \n         try {\n-            this.initDevice();\n+            this.findDevice();\n         } catch (final Exception e) {\n-            LOGGER.error(\"Unexpected exception: {}\", e);\n+            LOGGER.error(\"Could not find device\", e);\n+            //TODO why try to find device if you don't do anything with the result?!?\n+            //TODO return?\n         }\n-        if (!this.device.hasNewSecurityKey()) {\n+\n+        if (!this.secretManagementService.hasNewSecretOfType(this.deviceIdentification, E_METER_AUTHENTICATION)) {\n+            LOGGER.warn(\"Could not recover keys: device has no new authorisation key registered in secret-mgmt module\");\n             return;\n         }\n \n-        if (this.canConnect()) {\n-            this.promoteInvalidKey();\n+        if (this.canConnectUsingNewKeys()) {\n+            List<SecurityKeyType> keyTypesToActivate=Arrays.asList(E_METER_ENCRYPTION,E_METER_AUTHENTICATION);\n+            try {\n+                this.secretManagementService.activateNewKeys(this.deviceIdentification, keyTypesToActivate);\n+            } catch (Exception e) {\n+                throw new RecoverKeyException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MjgwODk2", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-539280896", "createdAt": "2020-11-26T12:41:15Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0MToxNVrOH6Z1kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo0MToxNVrOH6Z1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwMjc3MQ==", "bodyText": "Why not throw new RecoverKeyException(e);", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r531002771", "createdAt": "2020-11-26T12:41:15Z", "author": {"login": "harrymiddelburgetall"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/threads/RecoverKeyProcess.java", "diffHunk": "@@ -76,24 +82,35 @@ public void run() {\n         LOGGER.info(\"Attempting key recovery for device {}\", this.deviceIdentification);\n \n         try {\n-            this.initDevice();\n+            this.findDevice();\n         } catch (final Exception e) {\n-            LOGGER.error(\"Unexpected exception: {}\", e);\n+            LOGGER.error(\"Could not find device\", e);\n+            //TODO why try to find device if you don't do anything with the result?!?\n+            //TODO return?\n         }\n-        if (!this.device.hasNewSecurityKey()) {\n+\n+        if (!this.secretManagementService.hasNewSecretOfType(this.deviceIdentification, E_METER_AUTHENTICATION)) {\n+            LOGGER.warn(\"Could not recover keys: device has no new authorisation key registered in secret-mgmt module\");\n             return;\n         }\n \n-        if (this.canConnect()) {\n-            this.promoteInvalidKey();\n+        if (this.canConnectUsingNewKeys()) {\n+            List<SecurityKeyType> keyTypesToActivate=Arrays.asList(E_METER_ENCRYPTION,E_METER_AUTHENTICATION);\n+            try {\n+                this.secretManagementService.activateNewKeys(this.deviceIdentification, keyTypesToActivate);\n+            } catch (Exception e) {\n+                throw new RecoverKeyException(e.getMessage(), e);\n+            }\n+        } else {\n+            LOGGER.warn(\"Could not recover keys: could not connect to device using new keys\");\n+            //TODO try to connect using 'old' keys? send key change to device again?\n         }\n     }\n \n-    private void initDevice() throws OsgpException {\n+    private void findDevice() throws OsgpException {\n         try {\n             this.device = this.domainHelperService.findDlmsDevice(this.deviceIdentification, this.ipAddress);\n-        } catch (final ProtocolAdapterException e) {\n-            // Thread can not recover from these exceptions.\n+        } catch (final ProtocolAdapterException e) { // Thread can not recover from these exceptions.\n             throw new RecoverKeyException(e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzQ3MzIz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-539347323", "createdAt": "2020-11-26T14:11:29Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzU1Mjcx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-539355271", "createdAt": "2020-11-26T14:21:44Z", "commit": {"oid": "def46ea1f392a779005d2d15bc5d805e0ea7bcbf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfedad64e14235b17f44beb4508815276cbcf275", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bfedad64e14235b17f44beb4508815276cbcf275", "committedDate": "2020-12-01T13:08:25Z", "message": "SLIM-2597 processed review remarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ae8ea87115de2a97af424ecec27732f0e0c999", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/48ae8ea87115de2a97af424ecec27732f0e0c999", "committedDate": "2020-12-01T13:14:22Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality\n\n\u0001 Conflicts:\n\u0001\trunTestsAtRemoteServer.sh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dab2be33753d3a19661892ee347469def7f8bb2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6dab2be33753d3a19661892ee347469def7f8bb2", "committedDate": "2020-12-01T15:51:13Z", "message": "SLIM-2597 fix build/cucumber test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9025667f1c451899e491a2d097a1154266dff7ba", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/9025667f1c451899e491a2d097a1154266dff7ba", "committedDate": "2020-12-01T18:18:34Z", "message": "SLIM-2587 added logging/output to analyse cucumber test bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f184ab1366f525a8cf1ab0cd3867b256292737", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e5f184ab1366f525a8cf1ab0cd3867b256292737", "committedDate": "2020-12-01T21:28:10Z", "message": "SLIM-2597 fixed bug wrt NULL or invalid keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45c04662bfa4a2608f8d643cb5673215943b51d3", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/45c04662bfa4a2608f8d643cb5673215943b51d3", "committedDate": "2020-12-01T21:28:59Z", "message": "SLIM-2587 improved assertion output wrt response fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a6e2a7a6f00fd8631e683179b3a8eac56428e3", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/38a6e2a7a6f00fd8631e683179b3a8eac56428e3", "committedDate": "2020-12-02T08:54:03Z", "message": "SLIM-2587 improved assertion output wrt response fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e81c674c79265f1b574770520d01bd0eb9b07fc7", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e81c674c79265f1b574770520d01bd0eb9b07fc7", "committedDate": "2020-12-02T09:58:23Z", "message": "SLIM-2587 improved assertion output wrt response fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d93132e4b4ffc218e10b2694eb8f1afdac8fb6d1", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d93132e4b4ffc218e10b2694eb8f1afdac8fb6d1", "committedDate": "2020-12-02T10:50:02Z", "message": "SLIM-2587 improved assertion output wrt response fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83657b857a2d1ebbab7152e842d382b7a75b322c", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/83657b857a2d1ebbab7152e842d382b7a75b322c", "committedDate": "2020-12-02T13:37:43Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality\n\n\u0001 Conflicts:\n\u0001\tosgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncryptionService.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e73b6e80060205c3ab620e718931f2a38c9f603", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6e73b6e80060205c3ab620e718931f2a38c9f603", "committedDate": "2020-12-08T10:49:28Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8320d83198695eaf810cf28eb0a92836fb589a13", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8320d83198695eaf810cf28eb0a92836fb589a13", "committedDate": "2020-12-09T16:28:32Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "109af69ad2526b4c97ad054b992f5b197077add1", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/109af69ad2526b4c97ad054b992f5b197077add1", "committedDate": "2020-12-10T14:55:38Z", "message": "SLIM-2587 enabled add device test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaf773ac3d1ec0a6430e12862bfef7b2f345a2fd", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/eaf773ac3d1ec0a6430e12862bfef7b2f345a2fd", "committedDate": "2020-12-10T14:56:10Z", "message": "SLIM-2587 enabled add gas device test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24ac953b16cddcc4dd116f676ed1f4803a4e5121", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/24ac953b16cddcc4dd116f676ed1f4803a4e5121", "committedDate": "2020-12-10T14:56:49Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "982756531963acd3e79b9f5821194a5b6affbc35", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/982756531963acd3e79b9f5821194a5b6affbc35", "committedDate": "2020-12-11T13:16:13Z", "message": "SLIM-2587 test platform improvements wrt key settings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e427d7ebd6d7bdea0faab4a491546812e429de5", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0e427d7ebd6d7bdea0faab4a491546812e429de5", "committedDate": "2020-12-11T15:28:31Z", "message": "SLIM-2587 test platform improvements wrt key types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "483677736f6718d3c200d8153214bb5fbe1f4e53", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/483677736f6718d3c200d8153214bb5fbe1f4e53", "committedDate": "2020-12-14T07:23:49Z", "message": "SLIM-2587 test platform bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76cb1fe27377aacb057c0a77afe3f28cd941f298", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/76cb1fe27377aacb057c0a77afe3f28cd941f298", "committedDate": "2020-12-14T09:45:50Z", "message": "SLIM-2587 test platform bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0113f7c7fbb9612ef8bf624f2cf9eef3a2ace21", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d0113f7c7fbb9612ef8bf624f2cf9eef3a2ace21", "committedDate": "2020-12-14T10:47:10Z", "message": "SLIM-2587 test platform bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ccf8f2273dbe57f64705abd612ce7ca1fd4de68", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0ccf8f2273dbe57f64705abd612ce7ca1fd4de68", "committedDate": "2020-12-14T12:19:43Z", "message": "SLIM-2597 improved error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b677d681ab95cb0619419ac044c3e665ff1ebdd", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8b677d681ab95cb0619419ac044c3e665ff1ebdd", "committedDate": "2020-12-14T12:43:40Z", "message": "SLIM-2597 installation service bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32badbb6d9c94f26993b6967fd52d641d7c9fd5a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/32badbb6d9c94f26993b6967fd52d641d7c9fd5a", "committedDate": "2020-12-14T14:35:21Z", "message": "SLIM-2597 installation service bugfix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8983461b09e71c7e2b323a7eef43c1d2e98b8742", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8983461b09e71c7e2b323a7eef43c1d2e98b8742", "committedDate": "2020-12-15T07:42:05Z", "message": "SLIM-2597 improved error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f996f53ea2f83f13156f3ec51cd36dccedb551e0", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/f996f53ea2f83f13156f3ec51cd36dccedb551e0", "committedDate": "2020-12-15T09:32:50Z", "message": "SLIM-2597 improved error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30f08ec2022ff2e1360a9adb382a0843977d1661", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/30f08ec2022ff2e1360a9adb382a0843977d1661", "committedDate": "2020-12-16T13:54:23Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522519a07ab5da9dff70d5a19d03241d52043a97", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/522519a07ab5da9dff70d5a19d03241d52043a97", "committedDate": "2020-12-17T08:33:03Z", "message": "Test only add meter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee07b18fb34cda88d8e134059b2e2527c3dc5e84", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ee07b18fb34cda88d8e134059b2e2527c3dc5e84", "committedDate": "2020-12-17T09:14:18Z", "message": "SLIM-2597 changed loggings that don't show up in logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b94f259fc83c653d17bfa98c14f60356d26f1e78", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b94f259fc83c653d17bfa98c14f60356d26f1e78", "committedDate": "2020-12-17T09:16:28Z", "message": "SLIM-2597 bugfix: installation requires key activation as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2adb63fdc7a5eb4f25047a961cf59f1c7d81d6a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a2adb63fdc7a5eb4f25047a961cf59f1c7d81d6a", "committedDate": "2020-12-17T09:25:42Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed128b6bf5a68ecdd98c65149f175c6c3d792431", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ed128b6bf5a68ecdd98c65149f175c6c3d792431", "committedDate": "2020-12-17T11:04:42Z", "message": "SLIM-2597 added error handling code & unit tests for addMeter()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d7cb134736f870215e2f64a9a78712e51104f21", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0d7cb134736f870215e2f64a9a78712e51104f21", "committedDate": "2020-12-17T11:05:31Z", "message": "SLIM-2597 reverted to correct test implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab6611331362f40ab0a0d0717a9a89a6cc179590", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ab6611331362f40ab0a0d0717a9a89a6cc179590", "committedDate": "2020-12-17T11:14:35Z", "message": "Revert \"SLIM-2597 reverted to correct test implementation\"\n\nThis reverts commit 0d7cb134"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad83a4ff3f419b46c058aa98a7c772f25e4a329", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/aad83a4ff3f419b46c058aa98a7c772f25e4a329", "committedDate": "2020-08-10T16:52:03Z", "message": "SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92505bd596c560b37d39c92ee06ef86cae743efe", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/92505bd596c560b37d39c92ee06ef86cae743efe", "committedDate": "2020-08-11T12:50:25Z", "message": "SLIM-2585-improve-Secret-Management-related-exeption-handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29332318c26597d383f0866d6fcb516519277d71", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/29332318c26597d383f0866d6fcb516519277d71", "committedDate": "2020-08-18T08:50:07Z", "message": "SLIM-2585-improve-Secret-Management-related-exeption-handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eb589d93a73297fc1c9297e49eaae62cd4d24ae", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0eb589d93a73297fc1c9297e49eaae62cd4d24ae", "committedDate": "2020-09-16T12:18:47Z", "message": "SLIM-2597 initial code for 2-stage secret updates (store & activate)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e328835a21e6c66c94deee1559e102203c8a73af", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e328835a21e6c66c94deee1559e102203c8a73af", "committedDate": "2020-09-16T12:58:24Z", "message": "SLIM-2597 fixed compilation errors for tests (test failures not fixed yet)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62dccb5a1a2ffb23e109c11a803c8573927651f1", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/62dccb5a1a2ffb23e109c11a803c8573927651f1", "committedDate": "2020-09-16T13:46:38Z", "message": "SLIM-2597 reverted to old WSDL design (multiple secret types per call) and added 'generateAndStoreSecrets'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3036acd028ad8099c3b8f6af2df1c2f67d76b8ef", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/3036acd028ad8099c3b8f6af2df1c2f67d76b8ef", "committedDate": "2020-09-17T13:02:57Z", "message": "reverted multi-typed soap operations, added 'hasNewKey'-operation (compiles correctly, but most tests fail)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e63058d388392b7bf2745d334a0bae21f61ea3", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/94e63058d388392b7bf2745d334a0bae21f61ea3", "committedDate": "2020-09-21T12:49:50Z", "message": "fixed all broken tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2159e9a08463bd3a0175cc18eb0487988b3f1769", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2159e9a08463bd3a0175cc18eb0487988b3f1769", "committedDate": "2020-09-21T15:08:49Z", "message": "added testcases for new functionality (status, activate, hasNewSecret)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af13299b158a50968b5da23c237809b0d7cce88", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8af13299b158a50968b5da23c237809b0d7cce88", "committedDate": "2020-09-22T10:51:53Z", "message": "SLIM-2597 added secrets to response of generateAndStoreSecrets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb4d45f1203ad85de9a6c858e33bcac98fe8f42", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fbb4d45f1203ad85de9a6c858e33bcac98fe8f42", "committedDate": "2020-09-22T17:19:17Z", "message": "SLIM-2597-protocol-adapter-now-uses-secret-management-for-all-its-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddff301afd3f5b8376b0aadce3a4187dd140efcf", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ddff301afd3f5b8376b0aadce3a4187dd140efcf", "committedDate": "2020-09-23T10:39:31Z", "message": "SLIM-2597-protocol-adapter-now-uses-secret-management-for-all-its-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59202c61ba4037d507e82f130d68cb775a657e27", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/59202c61ba4037d507e82f130d68cb775a657e27", "committedDate": "2020-09-23T11:20:00Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96e99e9e3693f7e695e0851a4f430b4d73dda8b5", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/96e99e9e3693f7e695e0851a4f430b4d73dda8b5", "committedDate": "2020-09-23T14:37:04Z", "message": "SLIM-2597-temp-fix-for-cucumbertests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91dbb37ef8c1efcda98e1ca80f3f96f5c9da6232", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/91dbb37ef8c1efcda98e1ca80f3f96f5c9da6232", "committedDate": "2020-09-24T10:28:18Z", "message": "SLIM-2597-protocol-adapter-now-uses-secret-management-for-all-its-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d764519eca7476c2fbd4216c6733fc6f55a6d30e", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d764519eca7476c2fbd4216c6733fc6f55a6d30e", "committedDate": "2020-09-24T15:49:22Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca96e32057ac2e9652cadef08dbd2632722b501", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2ca96e32057ac2e9652cadef08dbd2632722b501", "committedDate": "2020-09-28T07:30:32Z", "message": "SLIM-2597: added IT testcases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3978657a033f506fc2ad076e1daa6ffc14b8a6", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/dc3978657a033f506fc2ad076e1daa6ffc14b8a6", "committedDate": "2020-09-28T07:45:02Z", "message": "SLIM-2597: setup for secret generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "212af20585d65ae4da3d321b7ccdaa46fb275bc0", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/212af20585d65ae4da3d321b7ccdaa46fb275bc0", "committedDate": "2020-09-28T07:46:01Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality\n\n\u0001 Conflicts:\n\u0001\tosgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptionDelegate.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5d0bccd0f9312ee2b21a345358604b4e2ed687b", "author": {"user": {"login": "evanbarn", "name": "Erik van Barneveld"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d5d0bccd0f9312ee2b21a345358604b4e2ed687b", "committedDate": "2020-09-30T09:37:00Z", "message": "SLIM-2597-protocol-adapter-now-uses-secret-management-for-all-its-functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48f94738f3140d957048fe261b4be5bda3e90ddf", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/48f94738f3140d957048fe261b4be5bda3e90ddf", "committedDate": "2020-10-06T16:21:27Z", "message": "Added encrypted in-memory secrets to service; separated RsaEncrypter from encryption provider; added test cases, IT cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "888761601c8492b82a72285caf413011ab3b99e0", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/888761601c8492b82a72285caf413011ab3b99e0", "committedDate": "2020-10-06T16:28:19Z", "message": "Changes resulting from changes in shared/osgp-ws-secret-mgmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea6c152c680d716f568d143d70c1910a4b05e062", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ea6c152c680d716f568d143d70c1910a4b05e062", "committedDate": "2020-10-06T16:28:46Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e35f8e83330afe62c76944ea1fb88f3ff1f464", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/28e35f8e83330afe62c76944ea1fb88f3ff1f464", "committedDate": "2020-10-06T16:30:27Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c67f96b5b0a0172f606d7683ca2c3a887e21bb2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6c67f96b5b0a0172f606d7683ca2c3a887e21bb2", "committedDate": "2020-10-12T16:47:00Z", "message": "Added Flyway script for added column 'secret_status'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db4ef46ae5ce0bac840ce7df1675cc1e247fc807", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/db4ef46ae5ce0bac840ce7df1675cc1e247fc807", "committedDate": "2020-10-16T10:30:47Z", "message": "SLIM-2597 code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5fbeecd6d0fed2caede8f97c43e419da411417", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/bb5fbeecd6d0fed2caede8f97c43e419da411417", "committedDate": "2020-10-16T19:24:02Z", "message": "SLIM-2597: first implementation (encryption as-is, to be refactored potentially)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fe6e1159a28f42690818e72df8fbb76f52d0852", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6fe6e1159a28f42690818e72df8fbb76f52d0852", "committedDate": "2020-10-18T20:37:00Z", "message": "SLIM-2597: fix incorrect encryption, added service test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6346b40c0d3d35a610b3a02e4454a09f1f99fec1", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/6346b40c0d3d35a610b3a02e4454a09f1f99fec1", "committedDate": "2020-10-18T20:37:28Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98ba0b2395d33ee42fac88ec89d30f5bd13e3b0f", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/98ba0b2395d33ee42fac88ec89d30f5bd13e3b0f", "committedDate": "2020-10-19T09:15:39Z", "message": "SLIM-2597 fixed SQL errors (column secret_status NULL)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8648491d7a5109066b2d7645731ba368ad74018", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e8648491d7a5109066b2d7645731ba368ad74018", "committedDate": "2020-10-21T08:57:51Z", "message": "SLIM-2597: added unit test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbdb92d61e267dcd963e7490941e8b628efeb594", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/fbdb92d61e267dcd963e7490941e8b628efeb594", "committedDate": "2020-10-21T08:59:48Z", "message": "SLIM-2597: add SOAP message 'getNewKeys' for recovery process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd78bc33793803364144e6a3e31f5f26677b99e", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1fd78bc33793803364144e6a3e31f5f26677b99e", "committedDate": "2020-10-21T09:00:12Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c04c4112f30f97ad747702a8bfb9b96da670249", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/2c04c4112f30f97ad747702a8bfb9b96da670249", "committedDate": "2020-10-21T12:59:24Z", "message": "code cleanup & logging improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0851dea794b4ff75f7c452b02ad8078960868128", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0851dea794b4ff75f7c452b02ad8078960868128", "committedDate": "2020-10-21T13:00:15Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4907e8e319e25c4244e13387cf346c816ff1037a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4907e8e319e25c4244e13387cf346c816ff1037a", "committedDate": "2020-10-21T15:05:31Z", "message": "improved cucumber tests, logging and exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57613962e0d46b3e399591f7814d3b9733ac1078", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/57613962e0d46b3e399591f7814d3b9733ac1078", "committedDate": "2020-10-21T15:25:12Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality\n\n\u0001 Conflicts:\n\u0001\tosgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bfc9d37938969b827ee32c6f16610e78c38383d", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1bfc9d37938969b827ee32c6f16610e78c38383d", "committedDate": "2020-10-21T16:51:11Z", "message": "SLIM-2597: merge changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77db23365fdc5b1664d8ffe71738aa767bafc797", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/77db23365fdc5b1664d8ffe71738aa767bafc797", "committedDate": "2020-10-21T17:40:59Z", "message": "SLIM-2597: nasty little bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "237bb59786e42bb10cb13fe1db647701066a0c4e", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/237bb59786e42bb10cb13fe1db647701066a0c4e", "committedDate": "2020-10-22T10:33:33Z", "message": "Added secret mgt config (for use of repositories)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a5b622d5c0afe81f4c75a9c587fb5738c64164b", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/0a5b622d5c0afe81f4c75a9c587fb5738c64164b", "committedDate": "2020-10-22T10:36:17Z", "message": "replaced use of converter with direct enum-creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ab85c2c5476b13b7a216541122824cbbb5b819", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/a8ab85c2c5476b13b7a216541122824cbbb5b819", "committedDate": "2020-10-22T10:36:37Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a69440fabc91d6908570455790bdc5a7078ec0", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/65a69440fabc91d6908570455790bdc5a7078ec0", "committedDate": "2020-10-22T11:55:21Z", "message": "fixed DB name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8013d13a5dfe19ab804b6f53a4e48da9ad06c263", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/8013d13a5dfe19ab804b6f53a4e48da9ad06c263", "committedDate": "2020-10-22T12:19:14Z", "message": "Smart Meter E keys reencrypted to match length 64"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a1c6501243c9241cf88552f04b8cbb7f264d98", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/16a1c6501243c9241cf88552f04b8cbb7f264d98", "committedDate": "2020-10-22T12:19:58Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee6b8246b480cb333ca63832ab8eb99a06068e46", "author": {"user": {"login": "carlogeenen", "name": "Carlo Geenen"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ee6b8246b480cb333ca63832ab8eb99a06068e46", "committedDate": "2020-10-22T12:32:02Z", "message": "Adapt G-meter keys too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b865ba81923b501555a4ee23eb72b06eed7eb19", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1b865ba81923b501555a4ee23eb72b06eed7eb19", "committedDate": "2020-10-22T15:18:39Z", "message": "improved error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef2a8ff094bb9f7cd59bf8499abd827686cb2fad", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ef2a8ff094bb9f7cd59bf8499abd827686cb2fad", "committedDate": "2020-10-22T15:19:12Z", "message": "Merge branch 'SLIM-2597-Implement-secret-management-extra-functionality' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a2eeeb3e53f54a335b40ce78e50e63c10797299", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4a2eeeb3e53f54a335b40ce78e50e63c10797299", "committedDate": "2020-10-27T09:25:05Z", "message": "build logging change. DO NOT PUSH!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c3d03cbc2cccf854198d2563e8b4a3844841e6", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/14c3d03cbc2cccf854198d2563e8b4a3844841e6", "committedDate": "2020-10-27T10:38:11Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01a127db11f6325ea226a93261f43e86b3d15173", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/01a127db11f6325ea226a93261f43e86b3d15173", "committedDate": "2020-10-27T13:31:05Z", "message": "SLIM-2597 improved exception message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f6b7a3e53450fb63a0a876780e866f721a27948", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/1f6b7a3e53450fb63a0a876780e866f721a27948", "committedDate": "2020-10-27T13:33:03Z", "message": "SLIM-2597 improved properties comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "334989708907a36471c81051b86994dd059499aa", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/334989708907a36471c81051b86994dd059499aa", "committedDate": "2020-10-27T14:05:26Z", "message": "SLIM-2597 set provider from HSM to JRE; DO NOT MERGE!?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e9f6f96c5ec51fb3e18fc9f5303406d50296ac", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/45e9f6f96c5ec51fb3e18fc9f5303406d50296ac", "committedDate": "2020-10-27T16:17:55Z", "message": "SLIM-2597 bugfix (use secret's provider type instead of configured); reset configured provider type to HSM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04d6eb0acfd61f742c7ce81ed9807bcf241aeeff", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/04d6eb0acfd61f742c7ce81ed9807bcf241aeeff", "committedDate": "2020-10-27T17:49:38Z", "message": "SLIM-2597 code refactor/improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb986aeef60c16267bbb67f82dba53e9900dd7a", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5fb986aeef60c16267bbb67f82dba53e9900dd7a", "committedDate": "2020-10-28T11:52:58Z", "message": "SLIM-2597 truncate logs instead of deleting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21c8f94655cbb0db9a7ee6117b9f1c19dd187846", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/21c8f94655cbb0db9a7ee6117b9f1c19dd187846", "committedDate": "2020-10-28T14:56:33Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4da941b4462a0a11a1d7460db11b953893d229fd", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4da941b4462a0a11a1d7460db11b953893d229fd", "committedDate": "2020-10-29T16:12:40Z", "message": "SLIM-2587 removed @Skip for tests related to key mgmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ed9a3a3fbc04d7e59041addb83a3bd2ae51df2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/e8ed9a3a3fbc04d7e59041addb83a3bd2ae51df2", "committedDate": "2020-10-29T16:13:36Z", "message": "SLIM-2587 refactored cucumber setup to work in line with secret-mgmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8338f8aa89408f4a6c2ef078eb9ba6628de950f", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/b8338f8aa89408f4a6c2ef078eb9ba6628de950f", "committedDate": "2020-10-29T16:16:20Z", "message": "SLIM-2597 marked repository as deprecated because of new secret-mgmt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9ea277445bdc9957e464173410df6954861e2a2", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/c9ea277445bdc9957e464173410df6954861e2a2", "committedDate": "2020-10-29T16:16:53Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5956b27832177d33e79d219c5f684c1b34800258", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/5956b27832177d33e79d219c5f684c1b34800258", "committedDate": "2020-11-02T12:44:30Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36485d9ddd252985dd1814afda3ba6508cbdef6e", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/36485d9ddd252985dd1814afda3ba6508cbdef6e", "committedDate": "2020-11-02T12:44:52Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76145a0fbfbae2dba2433ee1ef5cc8414caadd73", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/76145a0fbfbae2dba2433ee1ef5cc8414caadd73", "committedDate": "2020-11-03T12:51:13Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3598e94224f4b5de09234566e0171da96abe61", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/ab3598e94224f4b5de09234566e0171da96abe61", "committedDate": "2020-11-03T12:51:36Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4998f91d8e08c85eb498881c6533bc18bc4f30da", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/4998f91d8e08c85eb498881c6533bc18bc4f30da", "committedDate": "2020-11-03T15:14:23Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70fb3e5753894714808e82b4e3f1c13ca0b14515", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/70fb3e5753894714808e82b4e3f1c13ca0b14515", "committedDate": "2020-11-04T12:53:01Z", "message": "SLIM-2587 fix cucumber tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7700e511023784c381d9d8a3885b9b603e8d5436", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/7700e511023784c381d9d8a3885b9b603e8d5436", "committedDate": "2020-11-04T12:53:22Z", "message": "Merge branch 'development' of https://github.com/OSGP/open-smart-grid-platform into SLIM-2597-Implement-secret-management-extra-functionality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "479cdf1629b54dd22785264aafc3cb7fea27cd71", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/479cdf1629b54dd22785264aafc3cb7fea27cd71", "committedDate": "2020-11-04T13:47:09Z", "message": "SLIM-2587 fixed unsupported error (unmodifiable list)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125", "author": {"user": {"login": "jandik", "name": "Jan"}}, "url": "https://github.com/OSGP/open-smart-grid-platform/commit/d6b0e667f6214c5a1511a5ef114ce190fb948125", "committedDate": "2020-11-04T13:49:14Z", "message": "SLIM-2587 changed custom test annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxMjk1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391295", "createdAt": "2020-11-04T14:06:24Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyNFrOHtZkDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyNFrOHtZkDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Njc5Ng==", "bodyText": "Remove the literal \"false\" boolean value.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366796", "createdAt": "2020-11-04T14:06:24Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/application/config/SoapClientConfig.java", "diffHunk": "@@ -83,11 +83,11 @@ public HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender() throws\n         HttpsUrlConnectionMessageSender httpsUrlConnectionMessageSender =\n                 new HttpsUrlConnectionMessageSender();\n         // set the trust store(s)\n-        httpsUrlConnectionMessageSender.setTrustManagers(trustManagersFactoryBean().getObject());\n+        httpsUrlConnectionMessageSender.setTrustManagers(this.trustManagersFactoryBean().getObject());\n         // set the key store(s)\n-        httpsUrlConnectionMessageSender.setKeyManagers(keyManagersFactoryBean().getObject());\n+        httpsUrlConnectionMessageSender.setKeyManagers(this.keyManagersFactoryBean().getObject());\n \n-        if (Boolean.parseBoolean(useHostNameVerifier) == false) {\n+        if (Boolean.parseBoolean(this.useHostNameVerifier) == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxMzE2", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391316", "createdAt": "2020-11-04T14:06:25Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyNVrOHtZkHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyNVrOHtZkHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NjgxMg==", "bodyText": "This block of commented-out lines of code should be removed.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366812", "createdAt": "2020-11-04T14:06:25Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/ReplaceKeyCommandExecutor.java", "diffHunk": "@@ -101,58 +107,65 @@ public ActionResponseDto executeBundleAction(final DlmsConnectionManager conn, f\n         LOGGER.info(\"Keys set on device :{}\", device.getDeviceIdentification());\n \n         SetKeysRequestDto setKeysRequestDto = (SetKeysRequestDto) actionRequestDto;\n+\n         if (!setKeysRequestDto.isGeneratedKeys()) {\n-            setKeysRequestDto = this.reEncryptKeys((SetKeysRequestDto) actionRequestDto);\n-        }\n+            //decrypt using RSA\n+            setKeysRequestDto = this.decryptRsaKeys((SetKeysRequestDto) actionRequestDto);\n+        } //else\n+        //if isGeneratedKeys() == true, then:\n+        // generated keys are unencrypted by the GenerateAndReplaceKeyCommandExecutor\n \n         final DlmsDevice devicePostSave = this.execute(conn, device, ReplaceKeyCommandExecutor\n                 .wrap(setKeysRequestDto.getAuthenticationKey(), KeyId.AUTHENTICATION_KEY,\n-                        SecurityKeyType.E_METER_AUTHENTICATION));\n+                        SecurityKeyType.E_METER_AUTHENTICATION, setKeysRequestDto.isGeneratedKeys()));\n \n         this.execute(conn, devicePostSave, ReplaceKeyCommandExecutor\n                 .wrap(setKeysRequestDto.getEncryptionKey(), KeyId.GLOBAL_UNICAST_ENCRYPTION_KEY,\n-                        SecurityKeyType.E_METER_ENCRYPTION));\n+                        SecurityKeyType.E_METER_ENCRYPTION, setKeysRequestDto.isGeneratedKeys()));\n \n         return new ActionResponseDto(REPLACE_KEYS + device.getDeviceIdentification() + WAS_SUCCESFULL);\n     }\n \n-    private SetKeysRequestDto reEncryptKeys(final SetKeysRequestDto setKeysRequestDto) throws FunctionalException {\n+    private SetKeysRequestDto decryptRsaKeys(final SetKeysRequestDto setKeysRequestDto) throws FunctionalException {\n         final byte[] reEncryptedAuthenticationKey = this.securityKeyService\n-                .reEncryptKey(setKeysRequestDto.getAuthenticationKey(), SecurityKeyType.E_METER_AUTHENTICATION);\n+                .rsaDecrypt(setKeysRequestDto.getAuthenticationKey());\n         final byte[] reEncryptedEncryptionKey = this.securityKeyService\n-                .reEncryptKey(setKeysRequestDto.getEncryptionKey(), SecurityKeyType.E_METER_ENCRYPTION);\n+                .rsaDecrypt(setKeysRequestDto.getEncryptionKey());\n \n         return new SetKeysRequestDto(reEncryptedAuthenticationKey, reEncryptedEncryptionKey);\n     }\n \n     @Override\n     public DlmsDevice execute(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final ReplaceKeyCommandExecutor.KeyWrapper keyWrapper) throws OsgpException {\n+            final ReplaceKeyCommandExecutor.ReplaceKeyInput keyWrapper) throws OsgpException {\n+\n+        if (!keyWrapper.isGenerated()) {\n+            this.securityKeyService.storeNewKey(device.getDeviceIdentification(), keyWrapper.getSecurityKeyType(),\n+                    keyWrapper.getBytes());\n+        }\n \n-        final DlmsDevice devicePostSave = this.securityKeyService\n-                .storeNewKey(device, keyWrapper.getBytes(), keyWrapper.getSecurityKeyType());\n-        this.sendToDevice(conn, devicePostSave, keyWrapper);\n-        return this.securityKeyService.validateNewKey(devicePostSave, keyWrapper.getSecurityKeyType());\n+        this.sendToDevice(conn, device.getDeviceIdentification(), keyWrapper);\n+        this.securityKeyService.activateNewKey(device.getDeviceIdentification(), keyWrapper.getSecurityKeyType());\n+        return device;\n     }\n \n     /**\n      * Send the key to the device.\n      *\n      * @param conn\n      *         jDLMS connection.\n-     * @param device\n-     *         Device instance\n+     * @param deviceIdentification\n+     *         Device identification\n      * @param keyWrapper\n      *         Key data\n      */\n-    private void sendToDevice(final DlmsConnectionManager conn, final DlmsDevice device,\n-            final ReplaceKeyCommandExecutor.KeyWrapper keyWrapper) throws ProtocolAdapterException {\n+    private void sendToDevice(final DlmsConnectionManager conn, String deviceIdentification,\n+            final ReplaceKeyCommandExecutor.ReplaceKeyInput keyWrapper) throws ProtocolAdapterException {\n \n         try {\n-            final byte[] decryptedKey = this.securityKeyService\n-                    .decryptKey(keyWrapper.getBytes(), keyWrapper.securityKeyType);\n+            final byte[] decryptedKey = keyWrapper.getBytes(); //this.securityKeyService.aesDecryptKey(keyWrapper.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxMzM1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391335", "createdAt": "2020-11-04T14:06:26Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyNlrOHtZkLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyNlrOHtZkLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NjgyOA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366828", "createdAt": "2020-11-04T14:06:26Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration\n+//  refactor it to 1 single configurable class with 2 instances with different configurations\n+public class RsaEncrypter {\n+    private static final int BLOCK_SIZE = 16;\n+    private static final String ALG = \"RSA\";\n+    private static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public void setPrivateKeyStore(File privateKeyStoreFile) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxMzUz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391353", "createdAt": "2020-11-04T14:06:27Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyN1rOHtZkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyN1rOHtZkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NjgzOQ==", "bodyText": "Complete the task associated to this TODO comment.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366839", "createdAt": "2020-11-04T14:06:27Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxMzY3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391367", "createdAt": "2020-11-04T14:06:28Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyOFrOHtZkRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjoyOFrOHtZkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Njg1Mg==", "bodyText": "Immediately return this expression instead of assigning it to the temporary variable \"rsa\".", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366852", "createdAt": "2020-11-04T14:06:28Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/RsaEncrypter.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.security;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.security.Key;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.NoSuchPaddingException;\n+\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n+//TODO merge with RsaEncryptionService; it is almost the same except for different configuration\n+//  refactor it to 1 single configurable class with 2 instances with different configurations\n+public class RsaEncrypter {\n+    private static final int BLOCK_SIZE = 16;\n+    private static final String ALG = \"RSA\";\n+    private static final String ALGORITHM = \"RSA/ECB/PKCS1Padding\";\n+\n+    private Key publicKey;\n+    private Key privateKey;\n+\n+    public void setPrivateKeyStore(File privateKeyStoreFile) throws EncrypterException {\n+        try {\n+            byte[] keyData = Files.readAllBytes(privateKeyStoreFile.toPath());\n+            PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(keyData);\n+            this.privateKey = KeyFactory.getInstance(ALG).generatePrivate(privateKeySpec);\n+        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException e) {\n+            throw new EncrypterException(\"Could not get cipher\", e);\n+        }\n+    }\n+\n+    public void setPublicKeyStore(File publicKeyStoreFile) {\n+        try {\n+            byte[] keyData = Files.readAllBytes(publicKeyStoreFile.toPath());\n+            X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(keyData);\n+            this.publicKey = KeyFactory.getInstance(ALG).generatePublic(publicKeySpec);\n+        } catch (NoSuchAlgorithmException | IOException | InvalidKeySpecException e) {\n+            throw new EncrypterException(\"Could not set public keystore\", e);\n+        }\n+    }\n+\n+    protected Cipher getCipher() {\n+        try {\n+            return Cipher.getInstance(ALGORITHM);\n+        } catch (NoSuchPaddingException | NoSuchAlgorithmException e) {\n+            throw new EncrypterException(\"Could not get cipher\", e);\n+        }\n+    }\n+\n+    protected Key getSecretEncryptionKey(int cipherMode) {\n+        return cipherMode == Cipher.ENCRYPT_MODE ? this.publicKey : this.privateKey;\n+    }\n+\n+    public byte[] encrypt(final byte[] secret) {\n+        if(secret==null) {\n+            throw new IllegalArgumentException(\"Can not encrypt NULL value\");\n+        }\n+        try {\n+            final Cipher cipher = this.getCipher();\n+            cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(Cipher.ENCRYPT_MODE));\n+            byte[] rsa = cipher.doFinal(secret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNDY3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391467", "createdAt": "2020-11-04T14:06:33Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozM1rOHtZklA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozM1rOHtZklA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NjkzMg==", "bodyText": "Call \"Optional#isPresent()\" before accessing the value.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366932", "createdAt": "2020-11-04T14:06:33Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,296 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret) {\n+            byte[] aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            String keyReference = dbEncryptedSecret.getEncryptionKeyReference().getReference();\n+            EncryptionProviderType providerType = dbEncryptedSecret.getEncryptionKeyReference()\n+                                                                   .getEncryptionProviderType();\n+            return new EncryptedTypedSecret(aesEncrypted, dbEncryptedSecret.getSecretType(), keyReference,\n+                    providerType);\n+        }\n+    }\n+\n     private final EncryptionDelegate encryptionDelegate;\n     private final EncryptionProviderType encryptionProviderType;\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n+    private final RsaEncrypter rsaEncrypter;\n \n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n-            final DbEncryptionKeyRepository keyRepository) {\n+            final DbEncryptionKeyRepository keyRepository, RsaEncrypter rsaEncrypter) {\n         this.encryptionDelegate = defaultEncryptionDelegate;\n         this.encryptionProviderType = encryptionProviderType;\n         this.secretRepository = secretRepository;\n         this.keyRepository = keyRepository;\n+        this.rsaEncrypter = rsaEncrypter;\n     }\n \n-    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n-        //@formatter:off\n-        secrets.stream()\n-                .map(t -> this.validateSecret(deviceIdentification, t))\n-                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n-                .forEach(this.secretRepository::save);\n-        //@formatter:on\n-    }\n-\n-    private DbEncryptionKeyReference getKey() {\n+    private DbEncryptionKeyReference getCurrentKey() {\n         final Date now = new Date();\n-        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n-                this.encryptionProviderType, Pageable.unpaged());\n-        if (keyRefsPage.getSize() > 1) {\n+        final List<DbEncryptionKeyReference> keyRefs = this.keyRepository\n+                .findByTypeAndValid(this.encryptionProviderType, now);\n+        if (keyRefs.size() > 1) {\n             throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        } else if (keyRefs.size() == 0) {\n+            throw new NoSuchElementException(\"No encryption key found that is valid at \" + now);\n         }\n-        return keyRefsPage.stream().findFirst().orElseThrow(\n-                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+        return keyRefs.get(0);\n     }\n \n-    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n-        if (secret.getSecret() == null) {\n+    private DbEncryptionKeyReference getKeyByReference(String reference) {\n+        return this.keyRepository.findByTypeAndReference(this.encryptionProviderType, reference);\n+    }\n+\n+    private EncryptedTypedSecret validateNewSecret(final String deviceIdentification,\n+            final EncryptedTypedSecret secret) {\n+        this.checkNrNewSecretsOfType(deviceIdentification, secret.type, 0);\n+        if (secret.hasNullSecret()) {\n             throw new IllegalArgumentException(\"No secret string set\");\n-        } else if (secret.getSecretType() == null) {\n-            throw new IllegalArgumentException(\"No secret type set\");\n-        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n-            throw new IllegalArgumentException(\n-                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n-                            secret.getSecretType().name()));\n         }\n         return secret;\n     }\n \n-    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n-        final Optional<TypedSecret> current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n-        return current.isPresent() && current.get().getSecret().equals(secret.getSecret());\n+    private DbEncryptedSecret createDbEncrypted(final String deviceIdentification, final EncryptedTypedSecret secret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final Date now = new Date();\n+        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+        dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+        dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(secret.encryptedSecret));\n+        dbEncryptedSecret.setSecretType(secret.type);\n+        dbEncryptedSecret.setSecretStatus(SecretStatus.NEW);\n+        dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+        dbEncryptedSecret.setCreationTime(now);\n+        return dbEncryptedSecret;\n     }\n \n-    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n-                                              final DbEncryptionKeyReference keyReference) {\n-        final String secretString = typedSecret.getSecret();\n-        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n-        final Secret secret = new Secret(secretBytes);\n-        try {\n-            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n-                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n-            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n-            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n-            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n-            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n-            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n-            dbEncryptedSecret.setCreationTime(new Date());\n-            return dbEncryptedSecret;\n-        } catch (final Exception exc) {\n-            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n-        }\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        return this.doRetrieveSecrets(deviceIdentification, secretTypes, SecretStatus.ACTIVE);\n     }\n \n-    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+    public List<TypedSecret> retrieveNewSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        return this.doRetrieveSecrets(deviceIdentification, secretTypes, SecretStatus.NEW);\n+    }\n+\n+    private List<TypedSecret> doRetrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes,\n+            SecretStatus status) {\n+        return this.retrieveAesSecrets(deviceIdentification, secretTypes, status).stream().map(this::reencryptAes2Rsa)\n+                   .map(EncryptedTypedSecret::toTypedSecret).collect(Collectors.toList());\n+    }\n+\n+    private List<EncryptedTypedSecret> retrieveAesSecrets(final String deviceIdentification,\n+            final List<SecretType> secretTypes, SecretStatus status) {\n         try {\n-            //@formatter:off\n-            return secretTypes.stream()\n-                    .map(secretType -> this.retrieveSecret(deviceIdentification, secretType))\n-                    .map(Optional::get)\n-                    .collect(Collectors.toList());\n-            //@formatter:on\n+            return secretTypes.stream().map(secretType -> this.retrieveSecret(deviceIdentification, secretType, status))\n+                              .collect(Collectors.toList());\n         } catch (final Exception exc) {\n             throw new IllegalStateException(\n-                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+                    String.format(\"Something went wrong retrieving secrets for device %s: %s\", deviceIdentification,\n+                            exc.toString()), exc);\n         }\n     }\n \n-    public Optional<TypedSecret> retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n-        final Date now = new Date();\n-        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n-                now);\n-        if (secretId == null) {\n+    private EncryptedTypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType,\n+            SecretStatus status) {\n+        final Optional<DbEncryptedSecret> optional = this\n+                .getSingleDbEncryptedSecret(deviceIdentification, secretType, status);\n+        if (optional.isPresent()) {\n+            return EncryptedTypedSecret.fromDbEncryptedSecret(optional.get());\n+        } else {\n+            return EncryptedTypedSecret.getNullInstance(secretType);\n+        }\n+    }\n+\n+    private Optional<DbEncryptedSecret> getSingleDbEncryptedSecret(final String deviceIdentification,\n+            final SecretType secretType, final SecretStatus secretStatus) {\n+        final List<DbEncryptedSecret> secretsList = this.secretRepository\n+                .findSecrets(deviceIdentification, secretType, secretStatus);\n+        boolean onlySingleSecretAllowed =\n+                SecretStatus.NEW.equals(secretStatus) || SecretStatus.ACTIVE.equals(secretStatus);\n+        if (secretsList.size() == 0) {\n             return Optional.empty();\n+        } else if (secretsList.size() > 1 && onlySingleSecretAllowed) {\n+            String msgFormat = \"Only 1 instance allowed with status %s, but found %s for device %s, secret type %s\";\n+            throw new IllegalStateException(\n+                    String.format(msgFormat, secretStatus, secretsList.size(), deviceIdentification, secretType));\n         }\n-        final TypedSecret typedSecret = this.getTypedSecret(this.secretRepository.findById(secretId));\n-        return Optional.of(typedSecret);\n+        return Optional.of(secretsList.iterator().next());\n     }\n \n-    private TypedSecret getTypedSecret(final Optional<DbEncryptedSecret> dbEncryptedSecret) {\n-        if (dbEncryptedSecret.isPresent()) {\n-            final DbEncryptedSecret secret = dbEncryptedSecret.get();\n-            final DbEncryptionKeyReference keyReference = secret.getEncryptionKeyReference();\n-            if (keyReference == null) {\n-                throw new IllegalStateException(\"Could not create encrypted secret: secret has no key reference\");\n-            }\n-            final byte[] secretBytes = HexUtils.fromHexString(secret.getEncodedSecret());\n-            final EncryptedSecret encryptedSecret = new EncryptedSecret(keyReference.getEncryptionProviderType(),\n-                    secretBytes);\n-            return this.createTypedSecret(secret, keyReference, encryptedSecret);\n-        } else {    //Should never happen because of stream mapping in retrieveSecrets()\n-            throw new IllegalStateException(\"Could not create typed secret for NULL secret\");\n+    public synchronized void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n+        List<EncryptedTypedSecret> aesSecrets = secrets.stream().map(ts -> new EncryptedTypedSecret(ts.getSecret(),\n+                ts.getSecretType())).map(this::reencryptRsa2Aes).collect(toList());\n+        this.storeAesSecrets(deviceIdentification, aesSecrets);\n+    }\n+\n+    private void storeAesSecrets(final String deviceIdentification, final List<EncryptedTypedSecret> secrets) {\n+        secrets.stream().map(ets -> this.validateNewSecret(deviceIdentification, ets)).map(ets -> this\n+                .createDbEncrypted(deviceIdentification, ets, this.getKeyByReference(ets.encryptionKeyReference)))\n+               .collect(collectingAndThen(toList(), this.secretRepository::saveAll));\n+    }\n+\n+    public synchronized void activateNewSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        secretTypes.stream().forEach(t -> this.checkNrNewSecretsOfType(deviceIdentification, t, 1));\n+        secretTypes.stream().map(t -> this.getUpdatedSecretsForActivation(deviceIdentification, t))\n+                   .flatMap(Collection::stream).collect(collectingAndThen(toList(), this.secretRepository::saveAll));\n+    }\n+\n+    public boolean hasNewSecret(final String deviceIdentification, final SecretType secretType) {\n+        return this.secretRepository.getSecretCount(deviceIdentification, secretType, SecretStatus.NEW) > 0;\n+    }\n+\n+    private List<DbEncryptedSecret> getUpdatedSecretsForActivation(final String deviceIdentification,\n+            final SecretType secretType) {\n+        List<DbEncryptedSecret> updatedSecrets = new ArrayList<>();\n+        final Optional<DbEncryptedSecret> activeSecretOptional = this\n+                .getSingleDbEncryptedSecret(deviceIdentification, secretType, SecretStatus.ACTIVE);\n+        if (activeSecretOptional.isPresent()) {\n+            final DbEncryptedSecret currentSecret = activeSecretOptional.get();\n+            currentSecret.setSecretStatus(SecretStatus.EXPIRED);\n+            updatedSecrets.add(currentSecret);\n+        }\n+        final DbEncryptedSecret newSecret = this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 309}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNDgz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391483", "createdAt": "2020-11-04T14:06:34Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozNFrOHtZkqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozNFrOHtZkqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Njk1Mw==", "bodyText": "Use isEmpty() to check whether the collection is empty or not.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366953", "createdAt": "2020-11-04T14:06:34Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,296 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret) {\n+            byte[] aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            String keyReference = dbEncryptedSecret.getEncryptionKeyReference().getReference();\n+            EncryptionProviderType providerType = dbEncryptedSecret.getEncryptionKeyReference()\n+                                                                   .getEncryptionProviderType();\n+            return new EncryptedTypedSecret(aesEncrypted, dbEncryptedSecret.getSecretType(), keyReference,\n+                    providerType);\n+        }\n+    }\n+\n     private final EncryptionDelegate encryptionDelegate;\n     private final EncryptionProviderType encryptionProviderType;\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n+    private final RsaEncrypter rsaEncrypter;\n \n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n-            final DbEncryptionKeyRepository keyRepository) {\n+            final DbEncryptionKeyRepository keyRepository, RsaEncrypter rsaEncrypter) {\n         this.encryptionDelegate = defaultEncryptionDelegate;\n         this.encryptionProviderType = encryptionProviderType;\n         this.secretRepository = secretRepository;\n         this.keyRepository = keyRepository;\n+        this.rsaEncrypter = rsaEncrypter;\n     }\n \n-    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n-        //@formatter:off\n-        secrets.stream()\n-                .map(t -> this.validateSecret(deviceIdentification, t))\n-                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n-                .forEach(this.secretRepository::save);\n-        //@formatter:on\n-    }\n-\n-    private DbEncryptionKeyReference getKey() {\n+    private DbEncryptionKeyReference getCurrentKey() {\n         final Date now = new Date();\n-        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n-                this.encryptionProviderType, Pageable.unpaged());\n-        if (keyRefsPage.getSize() > 1) {\n+        final List<DbEncryptionKeyReference> keyRefs = this.keyRepository\n+                .findByTypeAndValid(this.encryptionProviderType, now);\n+        if (keyRefs.size() > 1) {\n             throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        } else if (keyRefs.size() == 0) {\n+            throw new NoSuchElementException(\"No encryption key found that is valid at \" + now);\n         }\n-        return keyRefsPage.stream().findFirst().orElseThrow(\n-                () -> new NoSuchElementException(\"No encryption key found that is valid at \" + now));\n+        return keyRefs.get(0);\n     }\n \n-    private TypedSecret validateSecret(final String deviceIdentification, final TypedSecret secret) {\n-        if (secret.getSecret() == null) {\n+    private DbEncryptionKeyReference getKeyByReference(String reference) {\n+        return this.keyRepository.findByTypeAndReference(this.encryptionProviderType, reference);\n+    }\n+\n+    private EncryptedTypedSecret validateNewSecret(final String deviceIdentification,\n+            final EncryptedTypedSecret secret) {\n+        this.checkNrNewSecretsOfType(deviceIdentification, secret.type, 0);\n+        if (secret.hasNullSecret()) {\n             throw new IllegalArgumentException(\"No secret string set\");\n-        } else if (secret.getSecretType() == null) {\n-            throw new IllegalArgumentException(\"No secret type set\");\n-        } else if (this.isIdenticalToCurrent(deviceIdentification, secret)) {\n-            throw new IllegalArgumentException(\n-                    String.format(\"Secret is identical to current secret (%s, %s)\", deviceIdentification,\n-                            secret.getSecretType().name()));\n         }\n         return secret;\n     }\n \n-    private boolean isIdenticalToCurrent(final String deviceIdentification, final TypedSecret secret) {\n-        final Optional<TypedSecret> current = this.retrieveSecret(deviceIdentification, secret.getSecretType());\n-        return current.isPresent() && current.get().getSecret().equals(secret.getSecret());\n+    private DbEncryptedSecret createDbEncrypted(final String deviceIdentification, final EncryptedTypedSecret secret,\n+            final DbEncryptionKeyReference keyReference) {\n+        final Date now = new Date();\n+        final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n+        dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n+        dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(secret.encryptedSecret));\n+        dbEncryptedSecret.setSecretType(secret.type);\n+        dbEncryptedSecret.setSecretStatus(SecretStatus.NEW);\n+        dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n+        dbEncryptedSecret.setCreationTime(now);\n+        return dbEncryptedSecret;\n     }\n \n-    private DbEncryptedSecret createEncrypted(final String deviceIdentification, final TypedSecret typedSecret,\n-                                              final DbEncryptionKeyReference keyReference) {\n-        final String secretString = typedSecret.getSecret();\n-        final byte[] secretBytes = HexUtils.fromHexString(secretString);\n-        final Secret secret = new Secret(secretBytes);\n-        try {\n-            final EncryptedSecret encryptedSecret = this.encryptionDelegate.encrypt(\n-                    keyReference.getEncryptionProviderType(), secret, keyReference.getReference());\n-            final DbEncryptedSecret dbEncryptedSecret = new DbEncryptedSecret();\n-            dbEncryptedSecret.setDeviceIdentification(deviceIdentification);\n-            dbEncryptedSecret.setEncodedSecret(HexUtils.toHexString(encryptedSecret.getSecret()));\n-            dbEncryptedSecret.setSecretType(typedSecret.getSecretType());\n-            dbEncryptedSecret.setEncryptionKeyReference(keyReference);\n-            dbEncryptedSecret.setCreationTime(new Date());\n-            return dbEncryptedSecret;\n-        } catch (final Exception exc) {\n-            throw new IllegalStateException(\"Could not create encrypted secret\", exc);\n-        }\n+    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        return this.doRetrieveSecrets(deviceIdentification, secretTypes, SecretStatus.ACTIVE);\n     }\n \n-    public List<TypedSecret> retrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+    public List<TypedSecret> retrieveNewSecrets(final String deviceIdentification, final List<SecretType> secretTypes) {\n+        return this.doRetrieveSecrets(deviceIdentification, secretTypes, SecretStatus.NEW);\n+    }\n+\n+    private List<TypedSecret> doRetrieveSecrets(final String deviceIdentification, final List<SecretType> secretTypes,\n+            SecretStatus status) {\n+        return this.retrieveAesSecrets(deviceIdentification, secretTypes, status).stream().map(this::reencryptAes2Rsa)\n+                   .map(EncryptedTypedSecret::toTypedSecret).collect(Collectors.toList());\n+    }\n+\n+    private List<EncryptedTypedSecret> retrieveAesSecrets(final String deviceIdentification,\n+            final List<SecretType> secretTypes, SecretStatus status) {\n         try {\n-            //@formatter:off\n-            return secretTypes.stream()\n-                    .map(secretType -> this.retrieveSecret(deviceIdentification, secretType))\n-                    .map(Optional::get)\n-                    .collect(Collectors.toList());\n-            //@formatter:on\n+            return secretTypes.stream().map(secretType -> this.retrieveSecret(deviceIdentification, secretType, status))\n+                              .collect(Collectors.toList());\n         } catch (final Exception exc) {\n             throw new IllegalStateException(\n-                    String.format(\"Something went wrong retrieving secrets for device %s\", deviceIdentification), exc);\n+                    String.format(\"Something went wrong retrieving secrets for device %s: %s\", deviceIdentification,\n+                            exc.toString()), exc);\n         }\n     }\n \n-    public Optional<TypedSecret> retrieveSecret(final String deviceIdentification, final SecretType secretType) {\n-        final Date now = new Date();\n-        final Long secretId = this.secretRepository.findIdOfValidMostRecent(deviceIdentification, secretType.name(),\n-                now);\n-        if (secretId == null) {\n+    private EncryptedTypedSecret retrieveSecret(final String deviceIdentification, final SecretType secretType,\n+            SecretStatus status) {\n+        final Optional<DbEncryptedSecret> optional = this\n+                .getSingleDbEncryptedSecret(deviceIdentification, secretType, status);\n+        if (optional.isPresent()) {\n+            return EncryptedTypedSecret.fromDbEncryptedSecret(optional.get());\n+        } else {\n+            return EncryptedTypedSecret.getNullInstance(secretType);\n+        }\n+    }\n+\n+    private Optional<DbEncryptedSecret> getSingleDbEncryptedSecret(final String deviceIdentification,\n+            final SecretType secretType, final SecretStatus secretStatus) {\n+        final List<DbEncryptedSecret> secretsList = this.secretRepository\n+                .findSecrets(deviceIdentification, secretType, secretStatus);\n+        boolean onlySingleSecretAllowed =\n+                SecretStatus.NEW.equals(secretStatus) || SecretStatus.ACTIVE.equals(secretStatus);\n+        if (secretsList.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 252}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNDk0", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391494", "createdAt": "2020-11-04T14:06:35Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozNVrOHtZksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozNVrOHtZksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Njk2MA==", "bodyText": "Use isEmpty() to check whether the collection is empty or not.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366960", "createdAt": "2020-11-04T14:06:35Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/services/SecretManagementService.java", "diffHunk": "@@ -18,146 +23,296 @@\n import org.apache.tomcat.util.buf.HexUtils;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptedSecret;\n import org.opensmartgridplatform.secretmanagement.application.domain.DbEncryptionKeyReference;\n+import org.opensmartgridplatform.secretmanagement.application.domain.SecretStatus;\n import org.opensmartgridplatform.secretmanagement.application.domain.SecretType;\n import org.opensmartgridplatform.secretmanagement.application.domain.TypedSecret;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptedSecretRepository;\n import org.opensmartgridplatform.secretmanagement.application.repository.DbEncryptionKeyRepository;\n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionDelegate;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n+import org.opensmartgridplatform.shared.security.RsaEncrypter;\n import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n+/**\n+ * Service that manages secrets (store, retrieve, activate, generate).\n+ * Secrets in this service are always AES-encrypted secrets of type EncryptedTypedSecret. Methods that manipulate the\n+ * secrets in the database (store/activate) are mostly batch-wise and are implemented transactionally: they do their\n+ * pre-processing and finally persist any changes in transactional repository saveAll() call, in order to prevent\n+ * database corruption as a result of partially succeeded batch results.\n+ *\n+ * Keep in mind that all public methods assume (externally provided) RSA-encrypted secrets of type TypedSecret, so\n+ * these secrets are always reencrypted to AES before being processed any further in order to keep unencrypted secret\n+ * in JVM memory/heap for the shortest possible time. Likewise, any public method will return RSA-encrypted secrets\n+ * by reencrypting the AES-encrypted secrets to RSA.\n+ */\n @Service\n public class SecretManagementService {\n+    //Internal datastructure to keep track of (intermediate) secret details\n+    private static class EncryptedTypedSecret {\n+        byte[] encryptedSecret;\n+        SecretType type;\n+        String encryptionKeyReference;  //NULL when RSA\n+        EncryptionProviderType encryptionProviderType;  //NULL when RSA\n+\n+        private EncryptedTypedSecret(SecretType type) {\n+            this.type = type;\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type) {\n+            this(secret, type, null, null);\n+        }\n+\n+        private EncryptedTypedSecret(byte[] secret, SecretType type, String encryptionKeyReference,\n+                EncryptionProviderType encryptionProviderType) {\n+            if (secret == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secret'\");\n+            } else if (type == null) {\n+                throw new IllegalArgumentException(\"No NULL value allowed for parameter 'secretType'\");\n+            }\n+            this.encryptedSecret = secret;\n+            this.type = type;\n+            this.encryptionKeyReference = encryptionKeyReference;\n+            this.encryptionProviderType = encryptionProviderType;\n+        }\n+\n+        private boolean hasNullSecret() {\n+            return this.encryptedSecret == null;\n+        }\n+\n+        private TypedSecret toTypedSecret() {\n+            return new TypedSecret(this.encryptedSecret, this.type);\n+        }\n+\n+        private static EncryptedTypedSecret getNullInstance(SecretType type) {\n+            return new EncryptedTypedSecret(type);\n+        }\n+\n+        private static EncryptedTypedSecret fromDbEncryptedSecret(DbEncryptedSecret dbEncryptedSecret) {\n+            byte[] aesEncrypted = HexUtils.fromHexString(dbEncryptedSecret.getEncodedSecret());\n+            String keyReference = dbEncryptedSecret.getEncryptionKeyReference().getReference();\n+            EncryptionProviderType providerType = dbEncryptedSecret.getEncryptionKeyReference()\n+                                                                   .getEncryptionProviderType();\n+            return new EncryptedTypedSecret(aesEncrypted, dbEncryptedSecret.getSecretType(), keyReference,\n+                    providerType);\n+        }\n+    }\n+\n     private final EncryptionDelegate encryptionDelegate;\n     private final EncryptionProviderType encryptionProviderType;\n     private final DbEncryptedSecretRepository secretRepository;\n     private final DbEncryptionKeyRepository keyRepository;\n+    private final RsaEncrypter rsaEncrypter;\n \n     public SecretManagementService(\n             @Qualifier(\"DefaultEncryptionDelegate\") final EncryptionDelegate defaultEncryptionDelegate,\n             final EncryptionProviderType encryptionProviderType, final DbEncryptedSecretRepository secretRepository,\n-            final DbEncryptionKeyRepository keyRepository) {\n+            final DbEncryptionKeyRepository keyRepository, RsaEncrypter rsaEncrypter) {\n         this.encryptionDelegate = defaultEncryptionDelegate;\n         this.encryptionProviderType = encryptionProviderType;\n         this.secretRepository = secretRepository;\n         this.keyRepository = keyRepository;\n+        this.rsaEncrypter = rsaEncrypter;\n     }\n \n-    public void storeSecrets(final String deviceIdentification, final List<TypedSecret> secrets) {\n-        //@formatter:off\n-        secrets.stream()\n-                .map(t -> this.validateSecret(deviceIdentification, t))\n-                .map(s -> this.createEncrypted(deviceIdentification, s, this.getKey()))\n-                .forEach(this.secretRepository::save);\n-        //@formatter:on\n-    }\n-\n-    private DbEncryptionKeyReference getKey() {\n+    private DbEncryptionKeyReference getCurrentKey() {\n         final Date now = new Date();\n-        final Page<DbEncryptionKeyReference> keyRefsPage = this.keyRepository.findByTypeAndValid(now,\n-                this.encryptionProviderType, Pageable.unpaged());\n-        if (keyRefsPage.getSize() > 1) {\n+        final List<DbEncryptionKeyReference> keyRefs = this.keyRepository\n+                .findByTypeAndValid(this.encryptionProviderType, now);\n+        if (keyRefs.size() > 1) {\n             throw new IllegalStateException(\"Multiple encryption keys found that are valid at \" + now);\n+        } else if (keyRefs.size() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNTA5", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391509", "createdAt": "2020-11-04T14:06:36Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozNlrOHtZkvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozNlrOHtZkvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Njk3Mg==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366972", "createdAt": "2020-11-04T14:06:36Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -45,21 +46,25 @@ public JreEncryptionProvider(File keyStoreFile) {\n         }\n     }\n \n-    protected Cipher getCipher() {\n+    @Override\n+    protected Cipher getCipher() throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNTI5", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391529", "createdAt": "2020-11-04T14:06:37Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozN1rOHtZkyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozN1rOHtZkyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2Njk4NQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517366985", "createdAt": "2020-11-04T14:06:37Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -36,7 +37,7 @@\n \n     private final byte[] key;\n \n-    public JreEncryptionProvider(File keyStoreFile) {\n+    public JreEncryptionProvider(File keyStoreFile) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNTQz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391543", "createdAt": "2020-11-04T14:06:37Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozN1rOHtZk2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozN1rOHtZk2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzAwMQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367001", "createdAt": "2020-11-04T14:06:37Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -45,21 +46,25 @@ public JreEncryptionProvider(File keyStoreFile) {\n         }\n     }\n \n-    protected Cipher getCipher() {\n+    @Override\n+    protected Cipher getCipher() throws EncrypterException {\n         try {\n             return Cipher.getInstance(ALGORITHM, PROVIDER);\n         } catch (NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException e) {\n             throw new EncrypterException(\"Could not get cipher\", e);\n         }\n     }\n \n-    protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n+    @Override\n+    protected Key getSecretEncryptionKey(String keyReference, int cipherMode) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNTUx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391551", "createdAt": "2020-11-04T14:06:38Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozOFrOHtZk4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozOFrOHtZk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzAwOQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367009", "createdAt": "2020-11-04T14:06:38Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/JreEncryptionProvider.java", "diffHunk": "@@ -72,15 +77,28 @@ public String getFormat() {\n \n             @Override\n             public byte[] getEncoded() {\n-                return key;\n+                return JreEncryptionProvider.this.key;\n             }\n         };\n     }\n \n+    @Override\n     protected AlgorithmParameterSpec getAlgorithmParameterSpec() {\n         return new IvParameterSpec(IV);\n     }\n \n+    @Override\n+    public byte[] generateAes128BitsSecret(String keyReference) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNTY2", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391566", "createdAt": "2020-11-04T14:06:39Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozOVrOHtZk7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjozOVrOHtZk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzAyMQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367021", "createdAt": "2020-11-04T14:06:39Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/EncryptionProvider.java", "diffHunk": "@@ -8,13 +8,23 @@\n  */\n package org.opensmartgridplatform.shared.security.providers;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n \n public interface EncryptionProvider {\n-    EncryptedSecret encrypt(Secret secret, String keyReference);\n-    Secret decrypt(EncryptedSecret secret, String keyReference);\n+\n+    EncryptedSecret encrypt(byte[] secret, String keyReference) throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNTgz", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391583", "createdAt": "2020-11-04T14:06:40Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0MFrOHtZk-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0MFrOHtZk-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzAzNQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367035", "createdAt": "2020-11-04T14:06:40Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/EncryptionProvider.java", "diffHunk": "@@ -8,13 +8,23 @@\n  */\n package org.opensmartgridplatform.shared.security.providers;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n \n public interface EncryptionProvider {\n-    EncryptedSecret encrypt(Secret secret, String keyReference);\n-    Secret decrypt(EncryptedSecret secret, String keyReference);\n+\n+    EncryptedSecret encrypt(byte[] secret, String keyReference) throws EncrypterException;\n+    byte[] decrypt(EncryptedSecret secret, String keyReference) throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjAx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391601", "createdAt": "2020-11-04T14:06:41Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0MVrOHtZlCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0MVrOHtZlCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzA0OA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367048", "createdAt": "2020-11-04T14:06:41Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/EncryptionProvider.java", "diffHunk": "@@ -8,13 +8,23 @@\n  */\n package org.opensmartgridplatform.shared.security.providers;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n import org.opensmartgridplatform.shared.security.EncryptedSecret;\n import org.opensmartgridplatform.shared.security.EncryptionProviderType;\n-import org.opensmartgridplatform.shared.security.Secret;\n \n public interface EncryptionProvider {\n-    EncryptedSecret encrypt(Secret secret, String keyReference);\n-    Secret decrypt(EncryptedSecret secret, String keyReference);\n+\n+    EncryptedSecret encrypt(byte[] secret, String keyReference) throws EncrypterException;\n+    byte[] decrypt(EncryptedSecret secret, String keyReference) throws EncrypterException;\n+\n+    /**\n+     * Generate an AES-encrypted 128-bits secret\n+     * @param keyReference the reference to the key used for AES-encrypting the secret\n+     * @return the AES-encrypted secret\n+     * @throws EncrypterException when the key cannot be generated (with a specified algoritm) or when AES-encryption\n+     * goes wrong\n+     */\n+    byte[] generateAes128BitsSecret(String keyReference) throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjE2", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391616", "createdAt": "2020-11-04T14:06:42Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0MlrOHtZlEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0MlrOHtZlEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzA1Ng==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367056", "createdAt": "2020-11-04T14:06:42Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -28,28 +27,28 @@\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher();\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n-    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode) throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjI1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391625", "createdAt": "2020-11-04T14:06:43Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0M1rOHtZlGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0M1rOHtZlGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzA2NQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367065", "createdAt": "2020-11-04T14:06:43Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -28,28 +27,28 @@\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher();\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n-    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode) throws EncrypterException;\n \n-    protected void setKeyFile(File keyFile) {\n+    protected void setKeyFile(final File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n-    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+    public EncryptedSecret encrypt(final byte[] secret, final String keyReference) throws EncrypterException {\n         try {\n             final Cipher cipher = this.getCipher();\n             cipher.init(Cipher.ENCRYPT_MODE, this.getSecretEncryptionKey(keyReference, Cipher.ENCRYPT_MODE),\n                     this.getAlgorithmParameterSpec());\n-            return new EncryptedSecret(this.getType(), cipher.doFinal(secret.getSecret()));\n-        } catch (Exception e) {\n+            return new EncryptedSecret(this.getType(), cipher.doFinal(secret));\n+        } catch (final Exception e) {\n             throw new EncrypterException(\"Could not encrypt secret with keyReference \" + keyReference, e);\n         }\n     }\n \n-    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjQ3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391647", "createdAt": "2020-11-04T14:06:44Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0NFrOHtZlKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0NFrOHtZlKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzA4MA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367080", "createdAt": "2020-11-04T14:06:44Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -28,28 +27,28 @@\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher();\n+    protected abstract Cipher getCipher() throws EncrypterException;\n \n     protected abstract AlgorithmParameterSpec getAlgorithmParameterSpec();\n \n-    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode);\n+    protected abstract Key getSecretEncryptionKey(String keyReference, int cipherMode) throws EncrypterException;\n \n-    protected void setKeyFile(File keyFile) {\n+    protected void setKeyFile(final File keyFile) {\n         this.keyFile = keyFile;\n     }\n \n-    public EncryptedSecret encrypt(Secret secret, String keyReference) {\n+    public EncryptedSecret encrypt(final byte[] secret, final String keyReference) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjU5", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391659", "createdAt": "2020-11-04T14:06:45Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0NVrOHtZlMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0NVrOHtZlMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzA5MQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367091", "createdAt": "2020-11-04T14:06:45Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/AbstractEncryptionProvider.java", "diffHunk": "@@ -28,28 +27,28 @@\n \n     public abstract EncryptionProviderType getType();\n \n-    protected abstract Cipher getCipher();\n+    protected abstract Cipher getCipher() throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjY3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391667", "createdAt": "2020-11-04T14:06:46Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0NlrOHtZlOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0NlrOHtZlOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzA5OA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367098", "createdAt": "2020-11-04T14:06:46Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptionDelegate.java", "diffHunk": "@@ -8,7 +8,12 @@\n  */\n package org.opensmartgridplatform.shared.security;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n public interface EncryptionDelegate {\n-    EncryptedSecret encrypt(EncryptionProviderType encryptionProviderType, Secret secret, String keyReference);\n-    Secret decrypt(EncryptedSecret secret, String keyReference);\n+    EncryptedSecret encrypt(EncryptionProviderType encryptionProviderType, byte[] secret, String keyReference)\n+            throws EncrypterException;\n+    byte[] decrypt(EncryptedSecret secret, String keyReference) throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjc3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391677", "createdAt": "2020-11-04T14:06:46Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0N1rOHtZlQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0N1rOHtZlQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzEwNA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367104", "createdAt": "2020-11-04T14:06:47Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptionDelegate.java", "diffHunk": "@@ -8,7 +8,12 @@\n  */\n package org.opensmartgridplatform.shared.security;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n public interface EncryptionDelegate {\n-    EncryptedSecret encrypt(EncryptionProviderType encryptionProviderType, Secret secret, String keyReference);\n-    Secret decrypt(EncryptedSecret secret, String keyReference);\n+    EncryptedSecret encrypt(EncryptionProviderType encryptionProviderType, byte[] secret, String keyReference)\n+            throws EncrypterException;\n+    byte[] decrypt(EncryptedSecret secret, String keyReference) throws EncrypterException;\n+    byte[] generateAes128BitsSecret(EncryptionProviderType encryptionProviderType, String keyReference)\n+            throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNjkw", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391690", "createdAt": "2020-11-04T14:06:47Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0N1rOHtZlSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0N1rOHtZlSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzExNA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367114", "createdAt": "2020-11-04T14:06:47Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/EncryptionDelegate.java", "diffHunk": "@@ -8,7 +8,12 @@\n  */\n package org.opensmartgridplatform.shared.security;\n \n+import org.opensmartgridplatform.shared.exceptionhandling.EncrypterException;\n+\n public interface EncryptionDelegate {\n-    EncryptedSecret encrypt(EncryptionProviderType encryptionProviderType, Secret secret, String keyReference);\n-    Secret decrypt(EncryptedSecret secret, String keyReference);\n+    EncryptedSecret encrypt(EncryptionProviderType encryptionProviderType, byte[] secret, String keyReference)\n+            throws EncrypterException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNzAw", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391700", "createdAt": "2020-11-04T14:06:48Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0OFrOHtZlVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0OFrOHtZlVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzEyNg==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367126", "createdAt": "2020-11-04T14:06:48Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -45,63 +45,68 @@\n \n     private final KeyStore keyStore;\n \n-    public HsmEncryptionProvider(File keyStoreFile) {\n+    public HsmEncryptionProvider(final File keyStoreFile) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNzE3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391717", "createdAt": "2020-11-04T14:06:49Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0OVrOHtZlXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo0OVrOHtZlXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzEzNQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367135", "createdAt": "2020-11-04T14:06:49Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -45,63 +45,68 @@\n \n     private final KeyStore keyStore;\n \n-    public HsmEncryptionProvider(File keyStoreFile) {\n+    public HsmEncryptionProvider(final File keyStoreFile) throws EncrypterException {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-            FileInputStream fIn = new FileInputStream(keyStoreFile);\n+            final FileInputStream fIn = new FileInputStream(keyStoreFile);\n             this.keyStore.load(fIn, null);\n-        } catch (CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n+        } catch (final CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n             throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n-    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n-\n-        Secret decryptedSecret = super.decrypt(secret, keyReference);\n-\n-        byte[] decryptedSecretBytes = decryptedSecret.getSecret();\n-\n-        if (decryptedSecretBytes.length > KEY_LENGTH) {\n-\n-            byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecretBytes, 0,\n-                    decryptedSecretBytes.length-16);\n-\n-            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecretBytes) + \" to \" +\n+    @Override\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) throws EncrypterException {\n+        byte[] decryptedSecret = super.decrypt(secret, keyReference);\n+        if (decryptedSecret.length > KEY_LENGTH) {\n+            final byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecret, 0,\n+                    decryptedSecret.length-16);\n+            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecret) + \" to \" +\n                             Hex.encodeHexString(truncatedDecryptedSecretBytes));\n-\n-            decryptedSecret = new Secret(truncatedDecryptedSecretBytes);\n+            return truncatedDecryptedSecretBytes;\n         }\n-\n         return decryptedSecret;\n     }\n \n-    protected Cipher getCipher() {\n+    @Override\n+    public byte[] generateAes128BitsSecret(String keyReference) throws EncrypterException {\n+        try {\n+            return this.encrypt(KeyGenerator.getInstance(\"AES\").generateKey().getEncoded(),keyReference).getSecret();\n+        } catch (NoSuchAlgorithmException exc) {\n+            throw new EncrypterException(\"Could not generate secret\", exc);\n+        }\n+    }\n+\n+    @Override\n+    protected Cipher getCipher() throws EncrypterException {\n         try {\n             return Cipher.getInstance(ALGORITHM, PROVIDER);\n-        } catch (NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException e) {\n+        } catch (final NoSuchPaddingException | NoSuchAlgorithmException | NoSuchProviderException e) {\n             throw new EncrypterException(\"Could not get cipher\", e);\n         }\n     }\n \n     /**\n-     * This method reads the 'actual' encryption key (from the database).\n-     * Normally this is the key start isValidFrom(now) and isValidUntil(now).\n+     * This method reads the encryption key specified by keyReference from the Hsm.\n      *\n      * @return the key that must be used for encryption/decryption\n      */\n-    protected Key getSecretEncryptionKey(String keyReference, int cipherMode) {\n+    @Override\n+    protected Key getSecretEncryptionKey(final String keyReference, final int cipherMode) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNzI1", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391725", "createdAt": "2020-11-04T14:06:50Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1MFrOHtZlZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1MFrOHtZlZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzE0Mg==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367142", "createdAt": "2020-11-04T14:06:50Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -45,63 +45,68 @@\n \n     private final KeyStore keyStore;\n \n-    public HsmEncryptionProvider(File keyStoreFile) {\n+    public HsmEncryptionProvider(final File keyStoreFile) throws EncrypterException {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-            FileInputStream fIn = new FileInputStream(keyStoreFile);\n+            final FileInputStream fIn = new FileInputStream(keyStoreFile);\n             this.keyStore.load(fIn, null);\n-        } catch (CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n+        } catch (final CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n             throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n-    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n-\n-        Secret decryptedSecret = super.decrypt(secret, keyReference);\n-\n-        byte[] decryptedSecretBytes = decryptedSecret.getSecret();\n-\n-        if (decryptedSecretBytes.length > KEY_LENGTH) {\n-\n-            byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecretBytes, 0,\n-                    decryptedSecretBytes.length-16);\n-\n-            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecretBytes) + \" to \" +\n+    @Override\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) throws EncrypterException {\n+        byte[] decryptedSecret = super.decrypt(secret, keyReference);\n+        if (decryptedSecret.length > KEY_LENGTH) {\n+            final byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecret, 0,\n+                    decryptedSecret.length-16);\n+            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecret) + \" to \" +\n                             Hex.encodeHexString(truncatedDecryptedSecretBytes));\n-\n-            decryptedSecret = new Secret(truncatedDecryptedSecretBytes);\n+            return truncatedDecryptedSecretBytes;\n         }\n-\n         return decryptedSecret;\n     }\n \n-    protected Cipher getCipher() {\n+    @Override\n+    public byte[] generateAes128BitsSecret(String keyReference) throws EncrypterException {\n+        try {\n+            return this.encrypt(KeyGenerator.getInstance(\"AES\").generateKey().getEncoded(),keyReference).getSecret();\n+        } catch (NoSuchAlgorithmException exc) {\n+            throw new EncrypterException(\"Could not generate secret\", exc);\n+        }\n+    }\n+\n+    @Override\n+    protected Cipher getCipher() throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNzQy", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391742", "createdAt": "2020-11-04T14:06:51Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1MVrOHtZlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1MVrOHtZlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzE1Mg==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367152", "createdAt": "2020-11-04T14:06:51Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -45,63 +45,68 @@\n \n     private final KeyStore keyStore;\n \n-    public HsmEncryptionProvider(File keyStoreFile) {\n+    public HsmEncryptionProvider(final File keyStoreFile) throws EncrypterException {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-            FileInputStream fIn = new FileInputStream(keyStoreFile);\n+            final FileInputStream fIn = new FileInputStream(keyStoreFile);\n             this.keyStore.load(fIn, null);\n-        } catch (CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n+        } catch (final CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n             throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n-    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n-\n-        Secret decryptedSecret = super.decrypt(secret, keyReference);\n-\n-        byte[] decryptedSecretBytes = decryptedSecret.getSecret();\n-\n-        if (decryptedSecretBytes.length > KEY_LENGTH) {\n-\n-            byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecretBytes, 0,\n-                    decryptedSecretBytes.length-16);\n-\n-            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecretBytes) + \" to \" +\n+    @Override\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) throws EncrypterException {\n+        byte[] decryptedSecret = super.decrypt(secret, keyReference);\n+        if (decryptedSecret.length > KEY_LENGTH) {\n+            final byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecret, 0,\n+                    decryptedSecret.length-16);\n+            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecret) + \" to \" +\n                             Hex.encodeHexString(truncatedDecryptedSecretBytes));\n-\n-            decryptedSecret = new Secret(truncatedDecryptedSecretBytes);\n+            return truncatedDecryptedSecretBytes;\n         }\n-\n         return decryptedSecret;\n     }\n \n-    protected Cipher getCipher() {\n+    @Override\n+    public byte[] generateAes128BitsSecret(String keyReference) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxNzU5", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391759", "createdAt": "2020-11-04T14:06:52Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1MlrOHtZlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1MlrOHtZlgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzE2OA==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.EncrypterException' which is a runtime exception.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367168", "createdAt": "2020-11-04T14:06:52Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/security/providers/HsmEncryptionProvider.java", "diffHunk": "@@ -45,63 +45,68 @@\n \n     private final KeyStore keyStore;\n \n-    public HsmEncryptionProvider(File keyStoreFile) {\n+    public HsmEncryptionProvider(final File keyStoreFile) throws EncrypterException {\n         try {\n             super.setKeyFile(keyStoreFile);\n             this.keyStore = KeyStore.getInstance(TYPE, PROVIDER);\n-            FileInputStream fIn = new FileInputStream(keyStoreFile);\n+            final FileInputStream fIn = new FileInputStream(keyStoreFile);\n             this.keyStore.load(fIn, null);\n-        } catch (CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n+        } catch (final CertificateException | NoSuchAlgorithmException | NoSuchProviderException | IOException | KeyStoreException e) {\n             throw new EncrypterException(\"Could not read keystore\", e);\n         }\n     }\n \n-    public Secret decrypt(EncryptedSecret secret, String keyReference) {\n-\n-        Secret decryptedSecret = super.decrypt(secret, keyReference);\n-\n-        byte[] decryptedSecretBytes = decryptedSecret.getSecret();\n-\n-        if (decryptedSecretBytes.length > KEY_LENGTH) {\n-\n-            byte[] truncatedDecryptedSecretBytes = Arrays.copyOfRange(decryptedSecretBytes, 0,\n-                    decryptedSecretBytes.length-16);\n-\n-            LOGGER.trace(\"Truncating decrypted key from \" + Hex.encodeHexString(decryptedSecretBytes) + \" to \" +\n+    @Override\n+    public byte[] decrypt(final EncryptedSecret secret, final String keyReference) throws EncrypterException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxODMx", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391831", "createdAt": "2020-11-04T14:06:55Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1NVrOHtZlsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNjo1NVrOHtZlsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzIxOQ==", "bodyText": "Remove the declaration of thrown exception 'org.opensmartgridplatform.shared.exceptionhandling.FunctionalException', as it cannot be thrown from method's body.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367219", "createdAt": "2020-11-04T14:06:55Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/commands/security/SetEncryptionKeyExchangeOnGMeterCommandExecutor.java", "diffHunk": "@@ -82,80 +96,118 @@ public MethodResultCode execute(final DlmsConnectionManager conn, final DlmsDevi\n \n             final String mbusDeviceIdentification = gMeterInfo.getDeviceIdentification();\n             final int channel = gMeterInfo.getChannel();\n-            DlmsDevice mbusDevice = this.dlmsDeviceRepository.findByDeviceIdentification(mbusDeviceIdentification);\n-            if (mbusDevice == null) {\n-                throw new ProtocolAdapterException(\"Unknown M-Bus device: \" + mbusDeviceIdentification);\n-            }\n-\n-            final byte[] mbusUserKey = this.securityKeyService.generateKey();\n-            final byte[] mbusDefaultKey = this.securityKeyService\n-                    .getMbusDefaultKey(gMeterInfo.getDeviceIdentification());\n-\n-            final SecurityKeyType mbusUserKeyType = SecurityKeyType.G_METER_ENCRYPTION;\n-            final byte[] encryptedUserKey = this.securityKeyService.encryptKey(mbusUserKey, mbusUserKeyType);\n-            mbusDevice = this.securityKeyService.storeNewKey(mbusDevice, encryptedUserKey, mbusUserKeyType);\n-\n             final ObisCode obisCode = OBIS_HASHMAP.get(channel);\n+            final byte[] gMeterEncryptionKey = this.securityKeyService\n+                    .generate128BitsKeyAndStoreAsNewKey(mbusDeviceIdentification, G_METER_ENCRYPTION);\n \n-            final MethodParameter methodTransferKey = this.getTransferKeyToMBusMethodParameter(obisCode, mbusDefaultKey,\n-                    mbusUserKey);\n-\n-            conn.getDlmsMessageListener()\n-                    .setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n-                            + \", call M-Bus Setup transfer_key method: \"\n-                            + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n-\n-            MethodResult methodResultCode = conn.getConnection().action(methodTransferKey);\n-            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup transfer_key\");\n-            LOGGER.info(\"Successfully invoked M-Bus Setup transfer_key method: class_id {} obis_code {}\", CLASS_ID,\n-                    obisCode);\n-\n-            conn.getDlmsMessageListener()\n-                    .setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + gMeterInfo.getChannel()\n-                            + \", call M-Bus Setup set_encryption_key method: \"\n-                            + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n-\n-            final MethodParameter methodSetEncryptionKey = this.getSetEncryptionKeyMethodParameter(obisCode,\n-                    mbusUserKey);\n-            methodResultCode = conn.getConnection().action(methodSetEncryptionKey);\n-            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup set_encryption_key\");\n-            LOGGER.info(\"Successfully invoked M-Bus Setup set_encryption_key method: class_id {} obis_code {}\",\n-                    CLASS_ID, obisCode);\n+            MethodResult methodResultCode = this\n+                    .transferKey(conn, mbusDeviceIdentification, channel, gMeterEncryptionKey);\n+            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup transfer_key\", obisCode);\n \n-            this.securityKeyService.validateNewKey(mbusDevice, mbusUserKeyType);\n+            methodResultCode = this.setEncryptionKey(conn, channel, gMeterEncryptionKey);\n+            this.checkMethodResultCode(methodResultCode, \"M-Bus Setup set_encryption_key\", obisCode);\n \n+            this.securityKeyService.activateNewKey(mbusDeviceIdentification, G_METER_ENCRYPTION);\n             return MethodResultCode.SUCCESS;\n         } catch (final IOException e) {\n             throw new ConnectionException(e);\n         } catch (final EncrypterException e) {\n             throw new ProtocolAdapterException(\n                     \"Unexpected exception during decryption of security keys, reason = \" + e.getMessage(), e);\n+        } catch (final FunctionalException e) {\n+            throw new ProtocolAdapterException(\"Unexpected exception: \" + e.toString(), e);\n         }\n     }\n \n-    private void checkMethodResultCode(final MethodResult methodResultCode, final String methodParameterName)\n-            throws ProtocolAdapterException {\n+    private MethodResult setEncryptionKey(DlmsConnectionManager conn, int channel, byte[] encryptionKey)\n+            throws IOException {\n+        MethodResult methodResultCode;\n+        final MethodParameter methodSetEncryptionKey = this\n+                .getSetEncryptionKeyMethodParameter(OBIS_HASHMAP.get(channel), encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\"SetEncryptionKeyExchangeOnGMeter for channel \" + channel\n+                + \", call M-Bus Setup set_encryption_key method: \" + JdlmsObjectToStringUtil\n+                .describeMethod(methodSetEncryptionKey));\n+        methodResultCode = conn.getConnection().action(methodSetEncryptionKey);\n+        return methodResultCode;\n+    }\n+\n+    private MethodResult transferKey(DlmsConnectionManager conn, String mbusDeviceIdentification, int channel,\n+            byte[] encryptionKey) throws ProtocolAdapterException, IOException, FunctionalException {\n+        final MethodParameter methodTransferKey = this\n+                .getTransferKeyMethodParameter(mbusDeviceIdentification, channel, encryptionKey);\n+        conn.getDlmsMessageListener().setDescription(\n+                \"SetEncryptionKeyExchangeOnGMeter for channel \" + channel + \", call M-Bus Setup transfer_key method: \"\n+                        + JdlmsObjectToStringUtil.describeMethod(methodTransferKey));\n+\n+        return conn.getConnection().action(methodTransferKey);\n+    }\n+\n+    private MethodParameter getTransferKeyMethodParameter(String mbusDeviceIdentification, int channel,\n+            byte[] gMeterUserKey) throws ProtocolAdapterException, FunctionalException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxOTA0", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391904", "createdAt": "2020-11-04T14:06:59Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNzowMFrOHtZl8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNzowMFrOHtZl8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzI4MQ==", "bodyText": "Do not forget to remove this deprecated code someday.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367281", "createdAt": "2020-11-04T14:07:00Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/protocol-adapter-dlms/osgp-protocol-adapter-dlms/src/main/java/org/opensmartgridplatform/adapter/protocol/dlms/domain/repositories/DlmsSecurityKeyRepository.java", "diffHunk": "@@ -17,6 +17,10 @@\n import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n+/**\n+ * @Deprecated with the introduction of secret-management, the security_key table has become obsolete.\n+ */\n+@Deprecated\n @Repository\n public interface DlmsSecurityKeyRepository extends JpaRepository<SecurityKey, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzkxOTE3", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#pullrequestreview-523391917", "createdAt": "2020-11-04T14:07:00Z", "commit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNzowMFrOHtZl_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDowNzowMFrOHtZl_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM2NzI5Mg==", "bodyText": "Define a constant instead of duplicating this literal \"Missing input: typed secrets\" 3 times.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/488#discussion_r517367292", "createdAt": "2020-11-04T14:07:00Z", "author": {"login": "jenkins-ip-10-4-24-184"}, "path": "osgp/platform/osgp-secret-management/src/main/java/org/opensmartgridplatform/secretmanagement/application/endpoints/SecretManagementEndpoint.java", "diffHunk": "@@ -37,86 +45,147 @@\n @Slf4j\n public class SecretManagementEndpoint {\n \n-    private static final String NAMESPACE_URI = \"http://www.opensmartgridplatform\"\n-            + \".org/schemas/security/secretmanagement\";\n+    private static final String NAMESPACE_URI =\n+            \"http://www.opensmartgridplatform\" + \".org/schemas/security/secretmanagement\";\n \n     private final SecretManagementService secretManagementService;\n     private final SoapEndpointDataTypeConverter converter;\n \n-    public SecretManagementEndpoint(SecretManagementService secretManagementService,\n-                                    SoapEndpointDataTypeConverter converter) {\n+    public SecretManagementEndpoint(final SecretManagementService secretManagementService,\n+            final SoapEndpointDataTypeConverter converter) {\n         this.secretManagementService = secretManagementService;\n         this.converter = converter;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getSecretsRequest\")\n     @ResponsePayload\n-    public GetSecretsResponse getSecretsRequest(@RequestPayload GetSecretsRequest request) throws OsgpException {\n-\n+    public GetSecretsResponse getSecretsRequest(@RequestPayload final GetSecretsRequest request) throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n-\n         if (log.isDebugEnabled()) {\n-            log.debug(getSecretsRequestToString(request));\n+            log.debug(this.requestToString(request));\n         }\n-\n-        GetSecretsResponse response = new GetSecretsResponse();\n-\n-        SecretTypes soapSecretTypes = request.getSecretTypes();\n-\n+        final GetSecretsResponse response = new GetSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n         if (soapSecretTypes == null) {\n             throw new TechnicalException(\"Missing input: secret types\");\n         }\n-\n-        List<SecretType> secretTypeList = converter.convertToSecretTypes(soapSecretTypes);\n-        List<TypedSecret> typedSecrets = secretManagementService.retrieveSecrets(request.getDeviceId(),\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveSecrets(request.getDeviceId(),\n                 secretTypeList);\n-\n-        TypedSecrets soapTypedSecrets = converter.convertToSoapTypedSecrets(typedSecrets);\n-\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n         response.setTypedSecrets(soapTypedSecrets);\n         response.setResult(OsgpResultType.OK);\n-\n         log.trace(response.toString());\n+        return response;\n+    }\n \n+    @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"getNewSecretsRequest\")\n+    @ResponsePayload\n+    public GetNewSecretsResponse getNewSecretsRequest(@RequestPayload final GetNewSecretsRequest request) throws OsgpException {\n+        log.info(\"Handling incoming SOAP request 'getSecretsRequest' for device {}\", request.getDeviceId());\n+        if (log.isDebugEnabled()) {\n+            log.debug(this.requestToString(request));\n+        }\n+        final GetNewSecretsResponse response = new GetNewSecretsResponse();\n+        final SecretTypes soapSecretTypes = request.getSecretTypes();\n+        if (soapSecretTypes == null) {\n+            throw new TechnicalException(\"Missing input: secret types\");\n+        }\n+        final List<SecretType> secretTypeList = this.converter.convertToSecretTypes(soapSecretTypes);\n+        final List<TypedSecret> typedSecrets = this.secretManagementService.retrieveNewSecrets(request.getDeviceId(),\n+                secretTypeList);\n+        final TypedSecrets soapTypedSecrets = this.converter.convertToSoapTypedSecrets(typedSecrets);\n+        response.setTypedSecrets(soapTypedSecrets);\n+        response.setResult(OsgpResultType.OK);\n+        log.trace(response.toString());\n         return response;\n     }\n \n     @PayloadRoot(namespace = NAMESPACE_URI, localPart = \"storeSecretsRequest\")\n     @ResponsePayload\n-    public StoreSecretsResponse storeSecretsRequest(@RequestPayload StoreSecretsRequest request) throws OsgpException {\n-\n+    public StoreSecretsResponse storeSecretsRequest(@RequestPayload final StoreSecretsRequest request)\n+            throws OsgpException {\n         log.info(\"Handling incoming SOAP request 'storeSecretsRequest' for device {}\", request.getDeviceId());\n         log.trace(request.toString());\n-\n-        StoreSecretsResponse response = new StoreSecretsResponse();\n-\n-        TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n-\n+        final StoreSecretsResponse response = new StoreSecretsResponse();\n+        final TypedSecrets soapTypedSecrets = request.getTypedSecrets();\n         if (soapTypedSecrets == null) {\n             throw new TechnicalException(\"Missing input: typed secrets\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6b0e667f6214c5a1511a5ef114ce190fb948125"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3713, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}