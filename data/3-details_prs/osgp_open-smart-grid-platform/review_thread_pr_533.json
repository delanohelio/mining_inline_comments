{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0Mzc5MDg0", "number": 533, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1NTo1OFrOFC_9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyMjoxNFrOFDEfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Njg5Mzc2OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/tasks/CommunicationMonitoringJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNTo1NTo1OFrOICcAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1MTozMFrOID1gfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjg5Nw==", "bodyText": "Any reason for using 2017 copyright with Smart Society Services B.V.?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539426897", "createdAt": "2020-12-09T15:55:58Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/tasks/CommunicationMonitoringJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzMxMA==", "bodyText": "Started with copy of existing class, forgot to update license header...\nUpdated header.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540893310", "createdAt": "2020-12-11T11:51:30Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/tasks/CommunicationMonitoringJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTQyNjg5Nw=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQwNDU1OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/tasks/CommunicationMonitoringJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzozMjozNVrOICgyxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1MTozNVrOID1gzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwNTM1MQ==", "bodyText": "I was thinking about the ChronoUnit.MINUTES being hard coded and the configured value actually not being a number but a duration of time.\nI don't think something should be done with this now, but maybe we can discuss the idea broader to configure such values as Duration instead of Integer. Durations can be parsed from a text in the properties file, and can be subtracted from for instance the Instant as is without having a default unit hard coded.\nI don't think in practice the unit will vary much, but I like the concept of a Duration in the code as it more naturally maps to the meaning of certain fields than a plain numeric type.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539505351", "createdAt": "2020-12-09T17:32:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/tasks/CommunicationMonitoringJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.application.tasks;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+\n+import org.opensmartgridplatform.adapter.domain.da.application.services.CommunicationRecoveryService;\n+import org.opensmartgridplatform.domain.core.entities.DomainInfo;\n+import org.opensmartgridplatform.domain.core.entities.RtuDevice;\n+import org.opensmartgridplatform.domain.core.repositories.DomainInfoRepository;\n+import org.opensmartgridplatform.domain.core.repositories.RtuDeviceRepository;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.quartz.DisallowConcurrentExecution;\n+import org.quartz.Job;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@DisallowConcurrentExecution\n+public class CommunicationMonitoringJob implements Job {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CommunicationMonitoringJob.class);\n+\n+    private static final String DOMAIN = \"DISTRIBUTION_AUTOMATION\";\n+    private static final String DOMAIN_VERSION = \"1.0\";\n+\n+    @Autowired\n+    private CommunicationRecoveryService communicationRecoveryService;\n+\n+    @Autowired\n+    private RtuDeviceRepository rtuDeviceRepository;\n+\n+    @Autowired\n+    private DomainInfoRepository domainInfoRepository;\n+\n+    @Autowired\n+    private Integer maximumTimeWithoutCommunication;\n+\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+\n+        LOGGER.info(\"Executing communication monitoring job.\");\n+\n+        final Instant startTime = Instant.now().minus(this.maximumTimeWithoutCommunication, ChronoUnit.MINUTES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzM4OQ==", "bodyText": "Updated properties to use Duration", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540893389", "createdAt": "2020-12-11T11:51:35Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/domain/da/application/tasks/CommunicationMonitoringJob.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright 2017 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.da.application.tasks;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+\n+import org.opensmartgridplatform.adapter.domain.da.application.services.CommunicationRecoveryService;\n+import org.opensmartgridplatform.domain.core.entities.DomainInfo;\n+import org.opensmartgridplatform.domain.core.entities.RtuDevice;\n+import org.opensmartgridplatform.domain.core.repositories.DomainInfoRepository;\n+import org.opensmartgridplatform.domain.core.repositories.RtuDeviceRepository;\n+import org.opensmartgridplatform.domain.core.valueobjects.DeviceLifecycleStatus;\n+import org.quartz.DisallowConcurrentExecution;\n+import org.quartz.Job;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@DisallowConcurrentExecution\n+public class CommunicationMonitoringJob implements Job {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CommunicationMonitoringJob.class);\n+\n+    private static final String DOMAIN = \"DISTRIBUTION_AUTOMATION\";\n+    private static final String DOMAIN_VERSION = \"1.0\";\n+\n+    @Autowired\n+    private CommunicationRecoveryService communicationRecoveryService;\n+\n+    @Autowired\n+    private RtuDeviceRepository rtuDeviceRepository;\n+\n+    @Autowired\n+    private DomainInfoRepository domainInfoRepository;\n+\n+    @Autowired\n+    private Integer maximumTimeWithoutCommunication;\n+\n+    @Override\n+    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+\n+        LOGGER.info(\"Executing communication monitoring job.\");\n+\n+        final Instant startTime = Instant.now().minus(this.maximumTimeWithoutCommunication, ChronoUnit.MINUTES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUwNTM1MQ=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ0NDc3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/scheduling/CommunicationMonitoringDisabledConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzozOToyOVrOIChL5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1MTo0NVrOID1hFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxMTc4Mg==", "bodyText": "Looking at this feels like I already reviewed this class. It looks so similar I wonder if it would not be possible to share a bit more of the communication monitoring config, instead of just duplicating it.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539511782", "createdAt": "2020-12-09T17:39:29Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/scheduling/CommunicationMonitoringDisabledConfig.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.microgrids.application.config.scheduling;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.opensmartgridplatform.adapter.domain.microgrids.application.tasks.CommunicationMonitoringJob;\n+import org.opensmartgridplatform.shared.application.scheduling.CommunicationMonitoringDisabledCondition;\n+import org.opensmartgridplatform.shared.application.scheduling.OsgpScheduler;\n+import org.opensmartgridplatform.shared.application.scheduling.OsgpSchedulingEnabledCondition;\n+import org.quartz.SchedulerException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@Conditional(value = { OsgpSchedulingEnabledCondition.class, CommunicationMonitoringDisabledCondition.class })\n+public class CommunicationMonitoringDisabledConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzQ2Mw==", "bodyText": "Refactored the code, added JobDisabledConfig and JobEnabledConfig classes in shared.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540893463", "createdAt": "2020-12-11T11:51:45Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-microgrids/src/main/java/org/opensmartgridplatform/adapter/domain/microgrids/application/config/scheduling/CommunicationMonitoringDisabledConfig.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.adapter.domain.microgrids.application.config.scheduling;\n+\n+import javax.annotation.PostConstruct;\n+\n+import org.opensmartgridplatform.adapter.domain.microgrids.application.tasks.CommunicationMonitoringJob;\n+import org.opensmartgridplatform.shared.application.scheduling.CommunicationMonitoringDisabledCondition;\n+import org.opensmartgridplatform.shared.application.scheduling.OsgpScheduler;\n+import org.opensmartgridplatform.shared.application.scheduling.OsgpSchedulingEnabledCondition;\n+import org.quartz.SchedulerException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Conditional;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@Conditional(value = { OsgpSchedulingEnabledCondition.class, CommunicationMonitoringDisabledCondition.class })\n+public class CommunicationMonitoringDisabledConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxMTc4Mg=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzQ5MTE4OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/services/AdHocManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo0OTozNVrOIChngw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1MjoxMVrOID1h-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxODg1MQ==", "bodyText": "I find the idea of creating one object for a log statement and an unrelated other object for actual use I bit shady.\nI understand that the Instant, although fine for use to indicate a moment in time, is less pretty to use in log statements to be read by humans.\nIn practice these values are likely to be very close to each other (maybe even the same millisecond) but I think it would be nicer to do something like now.toDate().ToInstant() or to create the DateTime based on Instant.now(), as it feels like a more honest link between what is used and what is logged.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539518851", "createdAt": "2020-12-09T17:49:35Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/services/AdHocManagementService.java", "diffHunk": "@@ -376,7 +377,7 @@ private LightMeasurementDevice updateLmdLastCommunicationTime(final LightMeasure\n         final DateTime now = DateTime.now();\n         LOGGER.info(\"Trying to update lastCommunicationTime for light measurement device: {} with dateTime: {}\",\n                 lmd.getDeviceIdentification(), now);\n-        lmd.setLastCommunicationTime(now.toDate());\n+        lmd.setLastCommunicationTime(Instant.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5MzY4OQ==", "bodyText": "Good remark, I had somehow overlooked the use of the now DateTime variable in the statemements above...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540893689", "createdAt": "2020-12-11T11:52:11Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/services/AdHocManagementService.java", "diffHunk": "@@ -376,7 +377,7 @@ private LightMeasurementDevice updateLmdLastCommunicationTime(final LightMeasure\n         final DateTime now = DateTime.now();\n         LOGGER.info(\"Trying to update lastCommunicationTime for light measurement device: {} with dateTime: {}\",\n                 lmd.getDeviceIdentification(), now);\n-        lmd.setLastCommunicationTime(now.toDate());\n+        lmd.setLastCommunicationTime(Instant.now());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUxODg1MQ=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzUwNjkyOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/tasks/BaseTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNzo1Mjo1NVrOIChwyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1MjozNVrOID1jDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyMTIyNw==", "bodyText": "Any reason to name the Instant date? Is this intentional or just left as-is after copy-pasting?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539521227", "createdAt": "2020-12-09T17:52:55Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/tasks/BaseTask.java", "diffHunk": "@@ -314,13 +316,20 @@ protected void sendRequestMessageToDevice(final Device device, final DeviceFunct\n                 .collect(Collectors.toList());\n     }\n \n-    private long getTime(final Date date, final long valueIfNull) {\n+    private static long getTime(final Date date, final long valueIfNull) {\n         if (date == null) {\n             return valueIfNull;\n         }\n         return date.getTime();\n     }\n \n+    private static long getTime(final Instant date, final long valueIfNull) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5Mzk2Ng==", "bodyText": "Updated parameter name.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540893966", "createdAt": "2020-12-11T11:52:35Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-domain-publiclighting/src/main/java/org/opensmartgridplatform/adapter/domain/publiclighting/application/tasks/BaseTask.java", "diffHunk": "@@ -314,13 +316,20 @@ protected void sendRequestMessageToDevice(final Device device, final DeviceFunct\n                 .collect(Collectors.toList());\n     }\n \n-    private long getTime(final Date date, final long valueIfNull) {\n+    private static long getTime(final Date date, final long valueIfNull) {\n         if (date == null) {\n             return valueIfNull;\n         }\n         return date.getTime();\n     }\n \n+    private static long getTime(final Instant date, final long valueIfNull) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyMTIyNw=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU0Nzc3OnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/DeviceConverterHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowMTo0MVrOICiJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1Mzo1NFrOID1lng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNzQzOA==", "bodyText": "Noting wrong with this and lately I have seen more people do this.\nIt just does not align with how I like to look at things and structure the code.\nI like to consider the special case return value separate from the normal logic. With the else it feels like everything gets tied together in a bigger logical structure that does not need to be there.\nNow this is a small method (which is good) and it does not matter that much, but there is also the level of indentation that you would not need for what comes in else now.\nJust wanted to share my view, maybe even convince you, but feel free to ignore this if you like it as is.\nThe way null is handled here is way nicer anyway (in my opinion) than how it is handled in convertDateToXMLGregorianCalendar.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539527438", "createdAt": "2020-12-09T18:01:41Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/DeviceConverterHelper.java", "diffHunk": "@@ -180,4 +181,12 @@ public XMLGregorianCalendar convertDateToXMLGregorianCalendar(final Date date) {\n         return xmlCalendar;\n     }\n \n+    public XMLGregorianCalendar convertInstantToXMLGregorianCalendar(final Instant instant) {\n+        if (instant == null) {\n+            return null;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NDYyMg==", "bodyText": "Refactored code. (Removed the convert methods and use mapper instead)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540894622", "createdAt": "2020-12-11T11:53:54Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-ws-core/src/main/java/org/opensmartgridplatform/adapter/ws/core/application/mapping/DeviceConverterHelper.java", "diffHunk": "@@ -180,4 +181,12 @@ public XMLGregorianCalendar convertDateToXMLGregorianCalendar(final Date date) {\n         return xmlCalendar;\n     }\n \n+    public XMLGregorianCalendar convertInstantToXMLGregorianCalendar(final Instant instant) {\n+        if (instant == null) {\n+            return null;\n+        } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyNzQzOA=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzU2MjgzOnYy", "diffSide": "RIGHT", "path": "osgp/platform/osgp-adapter-ws-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/ws/da/application/mapping/DistributionAutomationMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODowNTowN1rOICiR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1NDowMFrOID1lzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyOTcyMw==", "bodyText": "It would almost have been nice had you placed a comment with this line like \"Look here for the actual change\". ;)\nIf the rest besides this (and the import that belongs with it) contains changes I should have a look at, please let me know.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539529723", "createdAt": "2020-12-09T18:05:07Z", "author": {"login": "bvdzwet"}, "path": "osgp/platform/osgp-adapter-ws-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/ws/da/application/mapping/DistributionAutomationMapper.java", "diffHunk": "@@ -35,58 +36,77 @@\n     public void configure(final MapperFactory mapperFactory) {\n         mapperFactory.getConverterFactory().registerConverter(new PassThroughConverter(DateTime.class));\n         mapperFactory.getConverterFactory().registerConverter(new XMLGregorianCalendarToDateTimeConverter());\n+        mapperFactory.getConverterFactory().registerConverter(new XMLGregorianCalendarToInstantConverter());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NDY2OA==", "bodyText": "Indeed, registration of the new converter is the only change in this file...", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540894668", "createdAt": "2020-12-11T11:54:00Z", "author": {"login": "smvdheijden"}, "path": "osgp/platform/osgp-adapter-ws-distributionautomation/src/main/java/org/opensmartgridplatform/adapter/ws/da/application/mapping/DistributionAutomationMapper.java", "diffHunk": "@@ -35,58 +36,77 @@\n     public void configure(final MapperFactory mapperFactory) {\n         mapperFactory.getConverterFactory().registerConverter(new PassThroughConverter(DateTime.class));\n         mapperFactory.getConverterFactory().registerConverter(new XMLGregorianCalendarToDateTimeConverter());\n+        mapperFactory.getConverterFactory().registerConverter(new XMLGregorianCalendarToInstantConverter());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUyOTcyMw=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzYwOTQ1OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/mappers/XMLGregorianCalendarToInstantConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxNjoxNVrOICiuHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1NDoyOVrOID1m-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNjkyNA==", "bodyText": "Converting Instant values to XMLGregorianCalendar looks familiar from the DeviceConverterHelper, yet the implementation looks a little different.\nIs the difference important, or would it be better to have more re-use of a single implementation?\nOr should we wait until the story to deal with date and time helpers gets picked from the backlog?", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539536924", "createdAt": "2020-12-09T18:16:15Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/mappers/XMLGregorianCalendarToInstantConverter.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.mappers;\n+\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.util.GregorianCalendar;\n+\n+import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeConstants;\n+import javax.xml.datatype.DatatypeFactory;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class XMLGregorianCalendarToInstantConverter extends BidirectionalConverter<XMLGregorianCalendar, Instant> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XMLGregorianCalendarToInstantConverter.class);\n+    private static final int SECONDS_PER_MINUTE = 60;\n+\n+    @Override\n+    public XMLGregorianCalendar convertFrom(final Instant source, final Type<XMLGregorianCalendar> destinationType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NDk3MQ==", "bodyText": "Removed the convert methods from the DeviceConverterHelper.\nOrika seems to contain a built-in DateToXmlGregorianCalendarConverter class and mapping between Instant and XMLGregorianCalendar couldl be done by this converter class.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540894971", "createdAt": "2020-12-11T11:54:29Z", "author": {"login": "smvdheijden"}, "path": "osgp/shared/shared/src/main/java/org/opensmartgridplatform/shared/mappers/XMLGregorianCalendarToInstantConverter.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.mappers;\n+\n+import java.time.Instant;\n+import java.time.ZoneOffset;\n+import java.util.GregorianCalendar;\n+\n+import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeConstants;\n+import javax.xml.datatype.DatatypeFactory;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import ma.glasnost.orika.MappingContext;\n+import ma.glasnost.orika.converter.BidirectionalConverter;\n+import ma.glasnost.orika.metadata.Type;\n+\n+public class XMLGregorianCalendarToInstantConverter extends BidirectionalConverter<XMLGregorianCalendar, Instant> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(XMLGregorianCalendarToInstantConverter.class);\n+    private static final int SECONDS_PER_MINUTE = 60;\n+\n+    @Override\n+    public XMLGregorianCalendar convertFrom(final Instant source, final Type<XMLGregorianCalendar> destinationType,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzNjkyNA=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NzYzNjE0OnYy", "diffSide": "RIGHT", "path": "osgp/shared/shared/src/test/java/org/opensmartgridplatform/shared/mappers/XMLGregorianCalendarToInstantConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyMjoxNFrOICi-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo1NToyNFrOID1o6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MTAzMQ==", "bodyText": "Another pet peeve of mine. In my opinion naming test methods starting with \"test\" was useful when JUnit needed this to know which methods to execute as part of the test framework execution, a convention made obsolete by the Test annotation. Four characters that can be put to better use!\nJust hoping to grow the community against test name duplication, if you persist in liking this naming and annotating pattern and be old school mixed with something relatively new, be my guest. ;)", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r539541031", "createdAt": "2020-12-09T18:22:14Z", "author": {"login": "bvdzwet"}, "path": "osgp/shared/shared/src/test/java/org/opensmartgridplatform/shared/mappers/XMLGregorianCalendarToInstantConverterTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.mappers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.GregorianCalendar;\n+\n+import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeFactory;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import ma.glasnost.orika.MapperFacade;\n+import ma.glasnost.orika.MapperFactory;\n+import ma.glasnost.orika.impl.DefaultMapperFactory;\n+\n+class XMLGregorianCalendarToInstantConverterTest {\n+\n+    public static final ZoneId UTC = ZoneId.of(\"UTC\");\n+\n+    private final MapperFactory mapperFactory = new DefaultMapperFactory.Builder().build();\n+    private MapperFacade mapper;\n+\n+    @BeforeEach\n+    void before() {\n+        this.mapperFactory.getConverterFactory().registerConverter(new XMLGregorianCalendarToInstantConverter());\n+        this.mapper = this.mapperFactory.getMapperFacade();\n+    }\n+\n+    @Test\n+    void testMappingToInstantFromXmlGregorianCalenderWithTimeZone() throws DatatypeConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg5NTQ2NQ==", "bodyText": "I've deactivated sonar rule S3578 on my local development environment and renamed the methods.", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/533#discussion_r540895465", "createdAt": "2020-12-11T11:55:24Z", "author": {"login": "smvdheijden"}, "path": "osgp/shared/shared/src/test/java/org/opensmartgridplatform/shared/mappers/XMLGregorianCalendarToInstantConverterTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright 2020 Alliander N.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.shared.mappers;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.util.GregorianCalendar;\n+\n+import javax.xml.datatype.DatatypeConfigurationException;\n+import javax.xml.datatype.DatatypeFactory;\n+import javax.xml.datatype.XMLGregorianCalendar;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import ma.glasnost.orika.MapperFacade;\n+import ma.glasnost.orika.MapperFactory;\n+import ma.glasnost.orika.impl.DefaultMapperFactory;\n+\n+class XMLGregorianCalendarToInstantConverterTest {\n+\n+    public static final ZoneId UTC = ZoneId.of(\"UTC\");\n+\n+    private final MapperFactory mapperFactory = new DefaultMapperFactory.Builder().build();\n+    private MapperFacade mapper;\n+\n+    @BeforeEach\n+    void before() {\n+        this.mapperFactory.getConverterFactory().registerConverter(new XMLGregorianCalendarToInstantConverter());\n+        this.mapper = this.mapperFactory.getMapperFacade();\n+    }\n+\n+    @Test\n+    void testMappingToInstantFromXmlGregorianCalenderWithTimeZone() throws DatatypeConfigurationException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MTAzMQ=="}, "originalCommit": {"oid": "eb2a5abef308e4e29d1197adaf4eb63c89b4f459"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3494, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}