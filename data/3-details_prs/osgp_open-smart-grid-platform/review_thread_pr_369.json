{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2NjM2NTE0", "number": 369, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToyNjowNFrOEM8fCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozMDowNVrOEM8l3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDA5MzU1OnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/config/AdapterProtocolMqttPersistenceConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToyNjowNFrOGvWUPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNToyNjowNFrOGvWUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwMTg4NA==", "bodyText": "2020", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/369#discussion_r452301884", "createdAt": "2020-07-09T15:26:04Z", "author": {"login": "smvdheijden"}, "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/config/AdapterProtocolMqttPersistenceConfig.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * Copyright 2019 Smart Society Services B.V.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af755fae76d70e1b79d053b2c0918f448a5d876b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDExMTAzOnYy", "diffSide": "RIGHT", "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/kafka/in/PeakShavingConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozMDowNVrOGvWfdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozMDowNVrOGvWfdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNDc1Ng==", "bodyText": "received", "url": "https://github.com/OSGP/open-smart-grid-platform/pull/369#discussion_r452304756", "createdAt": "2020-07-09T15:30:05Z", "author": {"login": "smvdheijden"}, "path": "integration-tests/cucumber-tests-platform-distributionautomation/src/test/java/org/opensmartgridplatform/cucumber/platform/distributionautomation/glue/kafka/in/PeakShavingConsumer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright 2020 Smart Society Services B.V.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.opensmartgridplatform.cucumber.platform.distributionautomation.glue.kafka.in;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.kafka.annotation.KafkaListener;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PeakShavingConsumer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PeakShavingConsumer.class);\n+\n+    @Value(\"${peakshaving.kafka.consumer.wait.fail.duration:90000}\")\n+    private long waitFailMillis;\n+\n+    private ConsumerRecord<String, String> consumerRecord;\n+\n+    @KafkaListener(containerFactory = \"peakShavingKafkaListenerContainerFactory\", topics = \"${peakshaving.kafka.topic}\")\n+    public void listen(final ConsumerRecord<String, String> consumerRecord) {\n+        LOGGER.info(\"recevied consumerRecord\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af755fae76d70e1b79d053b2c0918f448a5d876b"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3638, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}