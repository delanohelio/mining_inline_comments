{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDM1ODY4", "number": 13500, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjozMDowNVrOEbYo6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjozNDoxOFrOEkQ14Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTUwNjk2OnYy", "diffSide": "RIGHT", "path": "clustering/server/src/main/java/org/wildfly/clustering/server/group/JGroupsAddressSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwMjozMDowNVrOHFSqnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNjo0MToxN1rOHFtc2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxMDc0OA==", "bodyText": "Unresolved conflict", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r475310748", "createdAt": "2020-08-24T02:30:05Z", "author": {"login": "bstansberry"}, "path": "clustering/server/src/main/java/org/wildfly/clustering/server/group/JGroupsAddressSerializer.java", "diffHunk": "@@ -1,6 +1,10 @@\n /*\n  * JBoss, Home of Professional Open Source.\n+<<<<<<< HEAD\n  * Copyright 2019, Red Hat, Inc., and individual contributors\n+=======\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+>>>>>>> 9aad2a3ba7... ProtoStream support for wildfly-clustering-server module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1697049d7fcddd16326e950247b9b85eb2dce8dd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc0OTU5NQ==", "bodyText": "Fixed.", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r475749595", "createdAt": "2020-08-24T16:41:17Z", "author": {"login": "pferraro"}, "path": "clustering/server/src/main/java/org/wildfly/clustering/server/group/JGroupsAddressSerializer.java", "diffHunk": "@@ -1,6 +1,10 @@\n /*\n  * JBoss, Home of Professional Open Source.\n+<<<<<<< HEAD\n  * Copyright 2019, Red Hat, Inc., and individual contributors\n+=======\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+>>>>>>> 9aad2a3ba7... ProtoStream support for wildfly-clustering-server module", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTMxMDc0OA=="}, "originalCommit": {"oid": "1697049d7fcddd16326e950247b9b85eb2dce8dd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU2NzYzOnYy", "diffSide": "RIGHT", "path": "clustering/marshalling/protostream/src/main/resources/org.wildfly.clustering.marshalling.protostream.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyMDozMlrOHTGKbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjowODoyN1rOHTL5-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk2Ng==", "bodyText": "@pferraro Should we be using these IDs or is the Javadoc not specific enough when ti says 'globally'? Looking at some of the documentation:\n\nThis numeric identifier must be globally unique so it can be used to identify the type instead of the fully qualified name.\n\n\nValues in the range 0..65535 (inclusive) are reserved for internal use by Protostream and other projects from the Infinispan organisation and should not be used by application developers.", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r489785966", "createdAt": "2020-09-16T22:20:32Z", "author": {"login": "rhusar"}, "path": "clustering/marshalling/protostream/src/main/resources/org.wildfly.clustering.marshalling.protostream.proto", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.wildfly.clustering.marshalling.protostream;\n+\n+import \"java.lang.proto\";\n+\n+/**\n+ * @TypeId(0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac73928f8dadf3ca982a270ff04699054b4558c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4MDA1OA==", "bodyText": "We do not reuse any of Infinispan's types, thus the ID space is our own.", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r489880058", "createdAt": "2020-09-17T02:08:27Z", "author": {"login": "pferraro"}, "path": "clustering/marshalling/protostream/src/main/resources/org.wildfly.clustering.marshalling.protostream.proto", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.wildfly.clustering.marshalling.protostream;\n+\n+import \"java.lang.proto\";\n+\n+/**\n+ * @TypeId(0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4NTk2Ng=="}, "originalCommit": {"oid": "2ac73928f8dadf3ca982a270ff04699054b4558c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDU4NTA0OnYy", "diffSide": "RIGHT", "path": "clustering/server/src/test/java/org/wildfly/clustering/server/ServiceLoaderTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjoyNzoyOVrOHTGUgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjoxMDowM1rOHTL99A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODU0Nw==", "bodyText": "May want to get rid of this System.out running loose here in this test case.", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r489788547", "createdAt": "2020-09-16T22:27:29Z", "author": {"login": "rhusar"}, "path": "clustering/server/src/test/java/org/wildfly/clustering/server/ServiceLoaderTestCase.java", "diffHunk": "@@ -51,10 +51,11 @@ public void load() {\n         load(DistributedCacheServiceConfiguratorProvider.class);\n         load(LocalGroupServiceConfiguratorProvider.class);\n         load(LocalCacheServiceConfiguratorProvider.class);\n+        load(SerializationContextInitializer.class);\n     }\n \n     private static <T> void load(Class<T> targetClass) {\n         ServiceLoader.load(targetClass, ServiceLoaderTestCase.class.getClassLoader())\n-                .forEach(object -> LOGGER.trace(\"\\t\" + object.getClass().getName()));\n+                .forEach(object -> System.out.println(\"\\t\" + object.getClass().getName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac73928f8dadf3ca982a270ff04699054b4558c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg4MTA3Ng==", "bodyText": "Yeah...", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r489881076", "createdAt": "2020-09-17T02:10:03Z", "author": {"login": "pferraro"}, "path": "clustering/server/src/test/java/org/wildfly/clustering/server/ServiceLoaderTestCase.java", "diffHunk": "@@ -51,10 +51,11 @@ public void load() {\n         load(DistributedCacheServiceConfiguratorProvider.class);\n         load(LocalGroupServiceConfiguratorProvider.class);\n         load(LocalCacheServiceConfiguratorProvider.class);\n+        load(SerializationContextInitializer.class);\n     }\n \n     private static <T> void load(Class<T> targetClass) {\n         ServiceLoader.load(targetClass, ServiceLoaderTestCase.class.getClassLoader())\n-                .forEach(object -> LOGGER.trace(\"\\t\" + object.getClass().getName()));\n+                .forEach(object -> System.out.println(\"\\t\" + object.getClass().getName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc4ODU0Nw=="}, "originalCommit": {"oid": "2ac73928f8dadf3ca982a270ff04699054b4558c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDYwMTI5OnYy", "diffSide": "RIGHT", "path": "clustering/web/hotrod/src/main/resources/org.wildfly.clustering.web.hotrod.session.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMjozNDoxOFrOHTGeKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMjowNjoyNVrOHTL2Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5MTAxNg==", "bodyText": "This doesn't seem right \u2013 the TypeId is the same as in src/main/resources/org.wildfly.clustering.web.infinispan.session.proto yet the message type is differnet. Is that intentional?", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r489791016", "createdAt": "2020-09-16T22:34:18Z", "author": {"login": "rhusar"}, "path": "clustering/web/hotrod/src/main/resources/org.wildfly.clustering.web.hotrod.session.proto", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.wildfly.clustering.web.hotrod.session;\n+\n+/**\n+ * @TypeId(210)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ac73928f8dadf3ca982a270ff04699054b4558c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3OTEzNQ==", "bodyText": "Yes, this is intentional.  These types are mutually exclusive.", "url": "https://github.com/wildfly/wildfly/pull/13500#discussion_r489879135", "createdAt": "2020-09-17T02:06:25Z", "author": {"login": "pferraro"}, "path": "clustering/web/hotrod/src/main/resources/org.wildfly.clustering.web.hotrod.session.proto", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.wildfly.clustering.web.hotrod.session;\n+\n+/**\n+ * @TypeId(210)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc5MTAxNg=="}, "originalCommit": {"oid": "2ac73928f8dadf3ca982a270ff04699054b4558c"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4153, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}