{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjMzNTQy", "number": 13425, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMTo0NzoxOVrOESGb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToyNzowMlrOE0jl9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NDE1MjYxOnYy", "diffSide": "RIGHT", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMTo0NzoxOVrOG3In2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDo1OTozOFrOG-ywwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw==", "bodyText": "I assume the NPE is coming from moduleSpecification.addSystemDependency(jsfAPI).\nThis addJSFAPI method is called from two places, L68 and L93. The L93 call has logic before it (L89-91) that checks for an invalid module slot and fails, which makes me think this is failing due to the L68 call. So does adding logic similar to L89-91 before the L68 call fix the problem?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r460466137", "createdAt": "2020-07-26T01:47:19Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwNzE1NQ==", "bodyText": "@bstansberry  It may fix. As per discussion in JBEAP-19759 we considered  throw an exception, the suspect was at\nL113 ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion) and also moduleSpecification.addSystemDependency(jsfAPI) not sure is it because of jsfVersion.  Currently we are not able to reproduce this issue but to be at safer side we thought handle exception. What do you suggest?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r461407155", "createdAt": "2020-07-28T08:26:12Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw=="}, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTQ5OA==", "bodyText": "It should be possible to write a test that leads to L68 being called, which is then a reproducible failure that can be fixed.\nSince we already have logic that is meant to handle a bad jsfVersion before it leads to this kind of failure it should be applied in both relevant cases.  One reason for that is that logic already has an i18n failure message, and we don't want to add another message for essentially the same problem.\nCatching an NPE and rethrowing is generally not good, because the NPE means some var was unexpectedly null. Better to prevent reaching that state by understanding how the var was null and dealing with that.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r461521498", "createdAt": "2020-07-28T11:53:00Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw=="}, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNzc5MA==", "bodyText": "@bstansberry  I've wrote testcase which lead to call L68. Still not able to reproduce NPE, as it is passing default JSF version \"Mojarra-2.0\". There is one way of getting NPE if moduleSpecification object is null.  Please suggest.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r465707790", "createdAt": "2020-08-05T12:59:11Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw=="}, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1NDk4Nw==", "bodyText": "AIUI, the value of JSFModuleIdFactory.defaultSlot is driven by the standalone.xml default-jsf-impl-slot attribute.\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/subsystem/JSFSubsystemAdd.java#L61\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/subsystem/JSFSubsystemAdd.java#L66\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFVersionProcessor.java#L96\nThe bug is because the configuration has an invalid value for that attribute, so JSFModuleIdFactory.defaultSlot is a meaningless value.\nThis should result in ModuleIdFactory.getApiModId returning null, resulting in null getting passed into https://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java#L133\nThat won't NPE in the code this PR is touching, but the bug report isn't about an NPE in that code. The bug report is about an NPE from org.jboss.modules.DependencySpec L637, and JSFDependencyProcessor.java#L133 passing null into the ModuleDependency constructor should result in DependencySpec L637 trying to process that null and an NPE.\nModuleIdFactory.getApiModId should return null for JSF version \"Mojarra-2.0\":\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java#L170 calls 'computeSlot'.\ncomputeSlot returns the (invalid) defaultSlot value:\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java#L165\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFModuleIdFactory.java#L170 does a map lookup in its 'apiIds' map using the invalid value, which will return null.  The 'apiIds' map is populated by scanning the module path so there's not going to be an entry in it for some invalid value.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r465954987", "createdAt": "2020-08-05T19:31:20Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw=="}, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA5MDYwOA==", "bodyText": "@bstansberry There is some thing wrong with this branch after I solved conflict. I will try to solve this tomorrow . If not then I will close this,  create new PR and tag this PR to it.   I have removed try-catch block and now code looks like below\n\n@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        moduleIdFactory = JSFModuleIdFactory.getInstance();\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final DeploymentUnit tl = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n        final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n        String jsfVersion = JsfVersionMarker.getVersion(tl).equals(JsfVersionMarker.NONE)? JSFModuleIdFactory.getInstance().getDefaultSlot() : JsfVersionMarker.getVersion(tl);\n        String defaultJsfVersion = JSFModuleIdFactory.getInstance().getDefaultSlot();\n        if(JsfVersionMarker.isJsfDisabled(deploymentUnit)) {\n            if (jsfVersion.equals(defaultJsfVersion) && !moduleIdFactory.isValidJSFSlot(jsfVersion)) {\n                throw JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(defaultJsfVersion);\n            }\n            addJSFAPI(JsfVersionMarker.JSF_2_0, moduleSpecification, moduleLoader);\n            return;\n        }", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468090608", "createdAt": "2020-08-10T18:16:43Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw=="}, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5NjU3OA==", "bodyText": "@bstansberry I have added latest changes. Please review.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468496578", "createdAt": "2020-08-11T10:59:38Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw=="}, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQ3Mzg4OnYy", "diffSide": "RIGHT", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowODowN1rOG---Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMTowMjoyOVrOHYSYGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NjYyMg==", "bodyText": "I think this should go above the addJSFAPI call. If it's going to fail, fail promptly.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468696622", "createdAt": "2020-08-11T16:08:07Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();\n         final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n         final DeploymentUnit tl = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n         final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n         final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n+        //Set default when no default version has been set on the war file\n+        String jsfVersion = JsfVersionMarker.getVersion(tl).equals(JsfVersionMarker.NONE)? JSFModuleIdFactory.getInstance().getDefaultSlot() : JsfVersionMarker.getVersion(tl);\n+        String defaultJsfVersion = JSFModuleIdFactory.getInstance().getDefaultSlot();\n+\n         if(JsfVersionMarker.isJsfDisabled(deploymentUnit)) {\n             addJSFAPI(JsfVersionMarker.JSF_2_0, moduleSpecification, moduleLoader);\n+            if (jsfVersion.equals(defaultJsfVersion) && !moduleIdFactory.isValidJSFSlot(jsfVersion)) {\n+                throw JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(defaultJsfVersion);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2NjkyMA==", "bodyText": "Just FYI, this does appear above the addJSFAPI call when viewing the changes from the \"Files changed\" tab but appears below when viewing from the \"Conversation\" tab so might just be some sort of strange GitHub issue.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r469966920", "createdAt": "2020-08-13T13:51:46Z", "author": {"login": "fjuma"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();\n         final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n         final DeploymentUnit tl = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n         final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n         final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n+        //Set default when no default version has been set on the war file\n+        String jsfVersion = JsfVersionMarker.getVersion(tl).equals(JsfVersionMarker.NONE)? JSFModuleIdFactory.getInstance().getDefaultSlot() : JsfVersionMarker.getVersion(tl);\n+        String defaultJsfVersion = JSFModuleIdFactory.getInstance().getDefaultSlot();\n+\n         if(JsfVersionMarker.isJsfDisabled(deploymentUnit)) {\n             addJSFAPI(JsfVersionMarker.JSF_2_0, moduleSpecification, moduleLoader);\n+            if (jsfVersion.equals(defaultJsfVersion) && !moduleIdFactory.isValidJSFSlot(jsfVersion)) {\n+                throw JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(defaultJsfVersion);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NjYyMg=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyODk1Mg==", "bodyText": "Thanks, Farah. That's very strange.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r495228952", "createdAt": "2020-09-25T21:02:29Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();\n         final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n         final DeploymentUnit tl = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n         final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n         final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n+        //Set default when no default version has been set on the war file\n+        String jsfVersion = JsfVersionMarker.getVersion(tl).equals(JsfVersionMarker.NONE)? JSFModuleIdFactory.getInstance().getDefaultSlot() : JsfVersionMarker.getVersion(tl);\n+        String defaultJsfVersion = JSFModuleIdFactory.getInstance().getDefaultSlot();\n+\n         if(JsfVersionMarker.isJsfDisabled(deploymentUnit)) {\n             addJSFAPI(JsfVersionMarker.JSF_2_0, moduleSpecification, moduleLoader);\n+            if (jsfVersion.equals(defaultJsfVersion) && !moduleIdFactory.isValidJSFSlot(jsfVersion)) {\n+                throw JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(defaultJsfVersion);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NjYyMg=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQ5MjM2OnYy", "diffSide": "RIGHT", "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxMjo0NVrOG-_J9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwNzoyMTo1OFrOHa9k1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA==", "bodyText": "@fjuma WDYT of this testing approach?\nIs it difficult to create a deployment that's going to fall into the block at https://github.com/wildfly/wildfly/pull/13425/files#diff-02a37d078a6d1626f94e0381a49baf61R72?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468699638", "createdAt": "2020-08-11T16:12:45Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MTc3NA==", "bodyText": "I think it would be better to create a deployment that's going to fail there. The deployment will fail if JSF has been disabled for it. The method that's used for determining whether or not JSF should be activated for a deployment can be found here:\nhttps://github.com/wildfly/wildfly/blob/master/jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFVersionProcessor.java#L149-L164\nFrom that method, we can see that if the deployment isn't a WAR then JSF should not be activated. So it looks like it should be possible to create a test that sets the default-jsf-impl-slot to some invalid value and then attempts to deploy an EAR.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r469971774", "createdAt": "2020-08-13T13:58:14Z", "author": {"login": "fjuma"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzODcyNA==", "bodyText": "I think this can be tested in Arquillian with something like: spyrkob@9acf4ad", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r472938724", "createdAt": "2020-08-19T10:50:34Z", "author": {"login": "spyrkob"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyNjMzNQ==", "bodyText": "@bstansberry I have tested Arquilian test suggested by @spyrkob, its working. The test case which I have written using Mockito is actually testing the code blocks of JSFDependencyProcessor.java . Please suggest if you are okay with the arquilian test then I'll move the changes.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r475526335", "createdAt": "2020-08-24T11:13:36Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIzMDA2Nw==", "bodyText": "@moulalis Sorry; I've let this one sit idle. I prefer an arquillian integration test vs complex use of mocks. Thanks.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r495230067", "createdAt": "2020-09-25T21:05:31Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODAzMzg3Nw==", "bodyText": "@bstansberry I've added the changes with arquillian.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r498033877", "createdAt": "2020-10-01T07:21:58Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODQ5Mzg5OnYy", "diffSide": "RIGHT", "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxMzoxMVrOG-_K9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwODoyMzoxMVrOHBfDhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTg5Mg==", "bodyText": "Is this done to let the test mock work?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468699892", "createdAt": "2020-08-11T16:13:11Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxOTQzMA==", "bodyText": "@bstansberry  Yes. As it was unable to mock outside method.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r471319430", "createdAt": "2020-08-17T08:23:11Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTg5Mg=="}, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTc4OTM5OnYy", "diffSide": "RIGHT", "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoxMDo0MFrOG_eVjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoyNTo1MVrOG_e3Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMDUwOA==", "bodyText": "@moulalis I think that should have a licence header", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r469210508", "createdAt": "2020-08-12T12:10:40Z", "author": {"login": "spyrkob"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e617f1bdeb9f6a76bbb010500fc240ed55279f9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxOTE3MQ==", "bodyText": "@spyrkob I've added header.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r469219171", "createdAt": "2020-08-12T12:25:51Z", "author": {"login": "moulalis"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMDUwOA=="}, "originalCommit": {"oid": "4e617f1bdeb9f6a76bbb010500fc240ed55279f9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM0NTQxOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNDoyN1rOHdPkUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNDoyN1rOHdPkUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNTgxMQ==", "bodyText": "s/RA_ADDRESS/JSF_ADDRESS", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500425811", "createdAt": "2020-10-06T16:14:27Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM0OTM2OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNToyMVrOHdPmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNToyMVrOHdPmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNjQ0Mw==", "bodyText": "Minor nit but addRaOperation should be reworded to something like writeJSFAttributeOperation or something like that.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500426443", "createdAt": "2020-10-06T16:15:21Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {\n+            if (e instanceof DeploymentException) {\n+                // awkward way to check if the failure is caused by NPE, but e.getCause() doesn't work\n+                StringWriter out = new StringWriter();\n+                e.printStackTrace(new PrintWriter(out));\n+                String stackTrace = out.getBuffer().toString();\n+\n+                if (stackTrace.contains(\"Caused by: java.lang.NullPointerException\")) {\n+                    throw e;\n+                }\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    static class SetupTask extends SnapshotRestoreSetupTask {\n+        @Override\n+        protected void doSetup(ManagementClient client, String containerId) throws Exception {\n+            ModelControllerClient mcc = client.getControllerClient();\n+            ModelNode addRaOperation = Operations.createWriteAttributeOperation(RA_ADDRESS.toModelNode(), \"default-jsf-impl-slot\", \"idontexist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzM1NzM2OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzoxNFrOHdPrxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzoxNFrOHdPrxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNzcxNw==", "bodyText": "Looks like the above two lines are a result of a copy/paste? Looks like they should be removed.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500427717", "createdAt": "2020-10-06T16:17:14Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {\n+            if (e instanceof DeploymentException) {\n+                // awkward way to check if the failure is caused by NPE, but e.getCause() doesn't work\n+                StringWriter out = new StringWriter();\n+                e.printStackTrace(new PrintWriter(out));\n+                String stackTrace = out.getBuffer().toString();\n+\n+                if (stackTrace.contains(\"Caused by: java.lang.NullPointerException\")) {\n+                    throw e;\n+                }\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    static class SetupTask extends SnapshotRestoreSetupTask {\n+        @Override\n+        protected void doSetup(ManagementClient client, String containerId) throws Exception {\n+            ModelControllerClient mcc = client.getControllerClient();\n+            ModelNode addRaOperation = Operations.createWriteAttributeOperation(RA_ADDRESS.toModelNode(), \"default-jsf-impl-slot\", \"idontexist\");\n+            addRaOperation.get(\"archive\").set(\"wf-ra-ely-security.rar\");\n+            addRaOperation.get(\"transaction-support\").set(\"NoTransaction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ3NjEwOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NjoyNlrOHdQ2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTowOToxNlrOHo2wkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0Njc3Mw==", "bodyText": "Since the test expects the deployment to fail, there should be an Assert.fail line under this one, e.g., something like:\nAssert.fail(\"Expected DeploymentException not thrown\");", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500446773", "createdAt": "2020-10-06T16:46:26Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMjI1Nw==", "bodyText": "Assert.fail(\"Expected DeploymentException not thrown\");**** added and tested", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r512602257", "createdAt": "2020-10-27T11:09:16Z", "author": {"login": "moulalis"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0Njc3Mw=="}, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ4MjM0OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0ODoxMFrOHdQ6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxMTozMlrOHo21zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NzgxMA==", "bodyText": "Should catch DeploymentException explicitly since that is what this test is expecting.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500447810", "createdAt": "2020-10-06T16:48:10Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMzU5OA==", "bodyText": "It was not able to catch DeploymentException directly. But I have added below line to test it.\nAssert.assertTrue(e instanceof DeploymentException);\nAssert.assertTrue(e.getMessage().contains(JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(\"idontexist\").getMessage()));", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r512603598", "createdAt": "2020-10-27T11:11:32Z", "author": {"login": "moulalis"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NzgxMA=="}, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ4OTY1OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1MDowN1rOHdQ_AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1MDowN1rOHdQ_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0OTAyNQ==", "bodyText": "This if block can be removed. If you want to check that the expected message occurs, you could use e.getMessage() and check if it contains the message from invalidDefaultJSFImpl()", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500449025", "createdAt": "2020-10-06T16:50:07Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {\n+            if (e instanceof DeploymentException) {\n+                // awkward way to check if the failure is caused by NPE, but e.getCause() doesn't work\n+                StringWriter out = new StringWriter();\n+                e.printStackTrace(new PrintWriter(out));\n+                String stackTrace = out.getBuffer().toString();\n+\n+                if (stackTrace.contains(\"Caused by: java.lang.NullPointerException\")) {\n+                    throw e;\n+                }\n+            } else {\n+                throw e;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTQ0NTY3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToyNzowMlrOHsWO6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToyNzowMlrOHsWO6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2MzY1OQ==", "bodyText": "Sorry, just realized that I don't see the Assert.fail(...) line added below deployer.deploy(...), as mentioned before.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r516263659", "createdAt": "2020-11-02T21:27:02Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OUTCOME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUCCESS;\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.jsf.logging.JSFLogger;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress JSF_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4225, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}