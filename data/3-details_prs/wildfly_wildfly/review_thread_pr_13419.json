{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTk2MTcx", "number": 13419, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNDo1NzoyOVrOEUS52g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNDo1NzoyOVrOEUS52g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzE2Njk4OnYy", "diffSide": "RIGHT", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/EJBSecurityDomainService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxNDo1NzoyOVrOG6edRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODoxMDo1MFrOG6wFpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2OTYwNg==", "bodyText": "Nit: you don't need the null check any more as the line above ensures it's false.", "url": "https://github.com/wildfly/wildfly/pull/13419#discussion_r463969606", "createdAt": "2020-08-01T14:57:29Z", "author": {"login": "bstansberry"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/EJBSecurityDomainService.java", "diffHunk": "@@ -36,39 +41,81 @@\n import org.jboss.msc.service.StartException;\n import org.jboss.msc.service.StopContext;\n import org.jboss.msc.value.InjectedValue;\n+import org.wildfly.security.auth.server.SecurityDomain;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n \n /**\n  * A service that sets up the security domain mapping for an EJB deployment.\n  *\n+ * This service is reponsible for deployment level actions such as registering a deployment with the resolved\n+ * application-security-domain mapping or associating the {@code SecurityDomain} with the deployment's {@code ClassLoader}.\n+ * Defined {@code ComponentConfigurator} instances will then provide the component specific installation.\n+ *\n  * @author <a href=\"mailto:fjuma@redhat.com\">Farah</a>\n  */\n public class EJBSecurityDomainService implements Service<Void> {\n     public static final ServiceName SERVICE_NAME = ServiceName.of(\"ejb3\", \"security-domain\");\n \n     private final InjectedValue<ApplicationSecurityDomain> applicationSecurityDomain = new InjectedValue<>();\n+    private final InjectedValue<SecurityDomain> securityDomain = new InjectedValue<>();\n+\n     private final DeploymentUnit deploymentUnit;\n-    private Registration registration;\n+\n+    private volatile Runnable cleanUpTask;\n \n     public EJBSecurityDomainService(final DeploymentUnit deploymentUnit) {\n         this.deploymentUnit = deploymentUnit;\n     }\n \n     @Override\n     public synchronized void start(StartContext context) throws StartException {\n-        ApplicationSecurityDomain applicationSecurityDomain = getApplicationSecurityDomain();\n-        BiFunction<String, ClassLoader, Registration> securityFunction = applicationSecurityDomain != null ? applicationSecurityDomain.getSecurityFunction() : null;\n-        if (securityFunction != null) {\n-            final String deploymentName = deploymentUnit.getParent() == null ? deploymentUnit.getName() : deploymentUnit.getParent().getName() + \".\" + deploymentUnit.getName();\n-            final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n-            final ClassLoader classLoader = module.getClassLoader();\n-            registration = securityFunction.apply(deploymentName, classLoader);\n+        final String deploymentName = deploymentUnit.getParent() == null ? deploymentUnit.getName()\n+                : deploymentUnit.getParent().getName() + \".\" + deploymentUnit.getName();\n+        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n+        final ClassLoader classLoader = module.getClassLoader();\n+\n+        ApplicationSecurityDomain applicationSecurityDomain = this.applicationSecurityDomain.getOptionalValue();\n+        if (applicationSecurityDomain != null) {\n+            BiFunction<String, ClassLoader, Registration> securityFunction = applicationSecurityDomain != null ? applicationSecurityDomain.getSecurityFunction() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521293d4554c7f1fe5f89a555ea4906f2149e93e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1ODQ3MQ==", "bodyText": "True, I can clean that - there was an intermediate bug during development where that prior line didn't exist.", "url": "https://github.com/wildfly/wildfly/pull/13419#discussion_r464258471", "createdAt": "2020-08-03T08:10:50Z", "author": {"login": "darranl"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/EJBSecurityDomainService.java", "diffHunk": "@@ -36,39 +41,81 @@\n import org.jboss.msc.service.StartException;\n import org.jboss.msc.service.StopContext;\n import org.jboss.msc.value.InjectedValue;\n+import org.wildfly.security.auth.server.SecurityDomain;\n+import org.wildfly.security.manager.WildFlySecurityManager;\n \n /**\n  * A service that sets up the security domain mapping for an EJB deployment.\n  *\n+ * This service is reponsible for deployment level actions such as registering a deployment with the resolved\n+ * application-security-domain mapping or associating the {@code SecurityDomain} with the deployment's {@code ClassLoader}.\n+ * Defined {@code ComponentConfigurator} instances will then provide the component specific installation.\n+ *\n  * @author <a href=\"mailto:fjuma@redhat.com\">Farah</a>\n  */\n public class EJBSecurityDomainService implements Service<Void> {\n     public static final ServiceName SERVICE_NAME = ServiceName.of(\"ejb3\", \"security-domain\");\n \n     private final InjectedValue<ApplicationSecurityDomain> applicationSecurityDomain = new InjectedValue<>();\n+    private final InjectedValue<SecurityDomain> securityDomain = new InjectedValue<>();\n+\n     private final DeploymentUnit deploymentUnit;\n-    private Registration registration;\n+\n+    private volatile Runnable cleanUpTask;\n \n     public EJBSecurityDomainService(final DeploymentUnit deploymentUnit) {\n         this.deploymentUnit = deploymentUnit;\n     }\n \n     @Override\n     public synchronized void start(StartContext context) throws StartException {\n-        ApplicationSecurityDomain applicationSecurityDomain = getApplicationSecurityDomain();\n-        BiFunction<String, ClassLoader, Registration> securityFunction = applicationSecurityDomain != null ? applicationSecurityDomain.getSecurityFunction() : null;\n-        if (securityFunction != null) {\n-            final String deploymentName = deploymentUnit.getParent() == null ? deploymentUnit.getName() : deploymentUnit.getParent().getName() + \".\" + deploymentUnit.getName();\n-            final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n-            final ClassLoader classLoader = module.getClassLoader();\n-            registration = securityFunction.apply(deploymentName, classLoader);\n+        final String deploymentName = deploymentUnit.getParent() == null ? deploymentUnit.getName()\n+                : deploymentUnit.getParent().getName() + \".\" + deploymentUnit.getName();\n+        final Module module = deploymentUnit.getAttachment(Attachments.MODULE);\n+        final ClassLoader classLoader = module.getClassLoader();\n+\n+        ApplicationSecurityDomain applicationSecurityDomain = this.applicationSecurityDomain.getOptionalValue();\n+        if (applicationSecurityDomain != null) {\n+            BiFunction<String, ClassLoader, Registration> securityFunction = applicationSecurityDomain != null ? applicationSecurityDomain.getSecurityFunction() : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2OTYwNg=="}, "originalCommit": {"oid": "521293d4554c7f1fe5f89a555ea4906f2149e93e"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4219, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}