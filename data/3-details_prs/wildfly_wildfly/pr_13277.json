{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDIyNTQ1", "number": 13277, "title": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY", "bodyText": "This PR does the following:\n\nadds in a capability for the HTTP_UPGRADE_REGISTRY service which is used by a number of subsystems to support HTTP Upgrade\nupdates the messaging-activemq subsystem to generate service names using the capability\nprovides an alias so that other subsystems (in Wildfly core) can move to using the capability at a later date\n\nFor more details: see  https://issues.redhat.com/browse/WFLY-13432", "createdAt": "2020-05-08T20:36:28Z", "url": "https://github.com/wildfly/wildfly/pull/13277", "merged": true, "mergeCommit": {"oid": "330da67750e2b9c910c384723cdbff6f5ac32ec2"}, "closed": true, "closedAt": "2020-06-17T11:46:16Z", "author": {"login": "rachmatowicz"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgSkg7AFqTQwOTM0OTkwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr0cppgFqTQzMTQ1MjcxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzQ5OTA2", "url": "https://github.com/wildfly/wildfly/pull/13277#pullrequestreview-409349906", "createdAt": "2020-05-11T16:49:49Z", "commit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0OTo1MFrOGTktvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0OTo1MFrOGTktvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA==", "bodyText": "If the use of this capability outside this subsystem only needs a dependency for ordering reasons and doesn't need access to a particular type, then the capability should not provide a type, as that becomes an unneeded part of its API contract.\nServerAdd in messaging-activemq doesn't seem to need anything but a dependency; it doesn't inject.\nIf that's the case in other external uses, internal-to-the-subsystem wiring that might need to inject ChannelUpgradeHandler doesn't have to use the capability.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r423177660", "createdAt": "2020-05-11T16:49:50Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTA5MzE3", "url": "https://github.com/wildfly/wildfly/pull/13277#pullrequestreview-410909317", "createdAt": "2020-05-13T13:13:19Z", "commit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMzoxOVrOGUw5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMzoxOVrOGUw5pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTg5NQ==", "bodyText": "Perhaps the field should be @ Deprecated in that case to let other subsystems know.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424425895", "createdAt": "2020-05-13T13:13:19Z", "author": {"login": "rhusar"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    // remove this once other subsystems convert to capabilities", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTQ0NDIy", "url": "https://github.com/wildfly/wildfly/pull/13277#pullrequestreview-411144422", "createdAt": "2020-05-13T17:27:19Z", "commit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzoxOVrOGU8Dog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozOTo1OVrOGU8hXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODY3NA==", "bodyText": "Use: Constants.AJP_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424608674", "createdAt": "2020-05-13T17:27:19Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxNg==", "bodyText": "Use: Constants.HTTP_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424608916", "createdAt": "2020-05-13T17:27:41Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTA5OQ==", "bodyText": "Use: Constants.HTTPS_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424609099", "createdAt": "2020-05-13T17:27:57Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n+        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDEzOA==", "bodyText": "Use: Constants.HTTPS_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424610138", "createdAt": "2020-05-13T17:29:42Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTAzMw==", "bodyText": "Since serviceBuilder is a CapabilityServiceBuilder, use:\nserviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424615033", "createdAt": "2020-05-13T17:37:53Z", "author": {"login": "pferraro"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java", "diffHunk": "@@ -76,6 +73,8 @@ void configureAdditionalDependencies(OperationContext context, CapabilityService\n             ServiceName serviceName = context.getCapabilityServiceName(REF_SOCKET_BINDING, redirectBindingRef.asString(), SocketBinding.class);\n             serviceBuilder.addDependency(serviceName, SocketBinding.class, service.getRedirectSocket());\n         }\n-        serviceBuilder.addDependency(REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNjI4Ng==", "bodyText": "Since serviceBuilder is a CapabilityServiceBuilder, use:\nserviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424616286", "createdAt": "2020-05-13T17:39:59Z", "author": {"login": "pferraro"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java", "diffHunk": "@@ -75,12 +76,15 @@ ListenerService createService(String name, final String serverName, final Operat\n \n         final boolean certificateForwarding = HttpListenerResourceDefinition.CERTIFICATE_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n         final boolean proxyAddressForwarding = HttpListenerResourceDefinition.PROXY_ADDRESS_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n-        return new HttpsListenerService(name, serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n+\n+        return new HttpsListenerService(context.getCurrentAddress(), serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n     }\n \n     @Override\n     void configureAdditionalDependencies(OperationContext context, CapabilityServiceBuilder serviceBuilder, ModelNode model, ListenerService service) throws OperationFailedException {\n-        serviceBuilder.addDependency(HttpListenerAdd.REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/7390b099ef43adc173b5196bb4a151565acbfca8", "committedDate": "2020-05-08T20:31:33Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}, "afterCommit": {"oid": "5c93a777dc892d51aa9e318df527abbdf7dc8e57", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/5c93a777dc892d51aa9e318df527abbdf7dc8e57", "committedDate": "2020-05-18T21:45:59Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c93a777dc892d51aa9e318df527abbdf7dc8e57", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/5c93a777dc892d51aa9e318df527abbdf7dc8e57", "committedDate": "2020-05-18T21:45:59Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}, "afterCommit": {"oid": "d77ca2625247f7631c2f7915ec9b0349225d2541", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/d77ca2625247f7631c2f7915ec9b0349225d2541", "committedDate": "2020-05-18T23:26:02Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d77ca2625247f7631c2f7915ec9b0349225d2541", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/d77ca2625247f7631c2f7915ec9b0349225d2541", "committedDate": "2020-05-18T23:26:02Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}, "afterCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/56550dc98a50355562978d627322e7ee97e7478d", "committedDate": "2020-05-18T23:32:34Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTI1NDc0", "url": "https://github.com/wildfly/wildfly/pull/13277#pullrequestreview-417925474", "createdAt": "2020-05-26T01:52:12Z", "commit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1MjoxMlrOGaMYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1Njo0M1rOGaMbtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExODkyNg==", "bodyText": "context.getServiceTarget() should be replaced by context.getCapabilityServiceTarget()", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430118926", "createdAt": "2020-05-26T01:52:12Z", "author": {"login": "pferraro"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java", "diffHunk": "@@ -55,14 +55,14 @@ protected void performRuntime(OperationContext context, ModelNode operation, Mod\n     void launchServices(OperationContext context, String activeMQServerName, String acceptorName, ModelNode model) throws OperationFailedException {\n         String httpConnectorName = HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context, model).asString();\n \n-        HTTPUpgradeService.installService(context.getServiceTarget(),\n+        HTTPUpgradeService.installService(context,\n                 activeMQServerName,\n                 acceptorName,\n                 httpConnectorName);\n \n         boolean upgradeLegacy = HTTPAcceptorDefinition.UPGRADE_LEGACY.resolveModelAttribute(context, model).asBoolean();\n         if (upgradeLegacy) {\n-            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context.getServiceTarget(),\n+            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExOTE2Mw==", "bodyText": "Install via CapabilityServiceTarget.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430119163", "createdAt": "2020-05-26T01:53:24Z", "author": {"login": "pferraro"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java", "diffHunk": "@@ -89,14 +90,14 @@ public HTTPUpgradeService(String activeMQServerName, String acceptorName, String\n         this.httpListenerName = httpListenerName;\n     }\n \n-    public static void installService(final ServiceTarget serviceTarget, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n+    public static void installService(final OperationContext context, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n \n         final HTTPUpgradeService service = new HTTPUpgradeService(activeMQServerName, acceptorName, httpListenerName);\n         final ServiceBuilder sb =\n-        serviceTarget.addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);\n+        context.getServiceTarget().addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExOTg2MA==", "bodyText": "Use Constants.HTTPS_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430119860", "createdAt": "2020-05-26T01:56:43Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/56550dc98a50355562978d627322e7ee97e7478d", "committedDate": "2020-05-18T23:32:34Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}, "afterCommit": {"oid": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "committedDate": "2020-05-26T17:00:26Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/9d724dacd19d13d2a1cbf72ed6c0d489e13365b7", "committedDate": "2020-05-26T17:00:26Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}, "afterCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/17e1093199d6fda863997d16df1224ddbfe6dd30", "committedDate": "2020-06-08T14:16:22Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MDg1ODM5", "url": "https://github.com/wildfly/wildfly/pull/13277#pullrequestreview-428085839", "createdAt": "2020-06-10T14:03:02Z", "commit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowMzowM1rOGh2XMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozMjowOVrOGh3vUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Njg2NQ==", "bodyText": "I believe this was added by mistake? Or is it for future test debugging if need arises?", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438146865", "createdAt": "2020-06-10T14:03:03Z", "author": {"login": "fl4via"}, "path": "legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java", "diffHunk": "@@ -153,6 +153,7 @@ private void testMigrateOperation(boolean addLegacyEntries) throws Exception {\n \n         ModelNode response = services.executeOperation(migrateOp);\n \n+        // System.out.println(\"response = \" + response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTQyNQ==", "bodyText": "whenever I see a @deprecated, I think the ideal is to point in a comment what has it been replaced with for future reference", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438169425", "createdAt": "2020-06-10T14:32:09Z", "author": {"login": "fl4via"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750254f97543416341e2c97d1240ae1904eba0b4", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/750254f97543416341e2c97d1240ae1904eba0b4", "committedDate": "2020-06-11T01:57:07Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/17e1093199d6fda863997d16df1224ddbfe6dd30", "committedDate": "2020-06-08T14:16:22Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}, "afterCommit": {"oid": "750254f97543416341e2c97d1240ae1904eba0b4", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/750254f97543416341e2c97d1240ae1904eba0b4", "committedDate": "2020-06-11T01:57:07Z", "message": "[WFLY-13432] Provide capability for Undertow HTTP_UPGRADE_REGISTRY"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDUyNzE4", "url": "https://github.com/wildfly/wildfly/pull/13277#pullrequestreview-431452718", "createdAt": "2020-06-16T12:31:11Z", "commit": {"oid": "750254f97543416341e2c97d1240ae1904eba0b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4023, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}