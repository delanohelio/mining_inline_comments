{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjE0Nzgw", "number": 13267, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToxNjo0M1rOD5c1oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToxNzozMFrOD5c3Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTY3OTA1OnYy", "diffSide": "RIGHT", "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToxNjo0M1rOGQuYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxNToxMlrOGRff1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDIwOQ==", "bodyText": "While making these volatile might improve the situation, it will not solve it completely, since the ++ unary operator is not atomic.  I would suggest changing these to use AtomicInteger.", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420190209", "createdAt": "2020-05-05T15:16:43Z", "author": {"login": "pferraro"}, "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edb48db34b46842734586fb948b39407656742f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3ODE0OA==", "bodyText": "Since this is a singleton ejb with container-managed concurrency, all method access are serialized and no two methods will be accessing the instance state. So I think make them volatile should work. If you agree, we can add volatile to messages field as well.", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420378148", "createdAt": "2020-05-05T20:13:59Z", "author": {"login": "chengfang"}, "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDIwOQ=="}, "originalCommit": {"oid": "9edb48db34b46842734586fb948b39407656742f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NTAyOQ==", "bodyText": "OK - in that case, volatile is sufficient.  messages should not need to be volatile since the list, while mutable, is effectively final.", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420995029", "createdAt": "2020-05-06T18:15:12Z", "author": {"login": "pferraro"}, "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDIwOQ=="}, "originalCommit": {"oid": "9edb48db34b46842734586fb948b39407656742f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTY4MjkxOnYy", "diffSide": "RIGHT", "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToxNzozMFrOGQuaXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDoxNDoxMVrOGQ52nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDgxNQ==", "bodyText": "I suspect this might need to use a concurrent collection (or at least synchronized wrapper).", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420190815", "createdAt": "2020-05-05T15:17:30Z", "author": {"login": "pferraro"}, "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,\n         synchronizedAfterCommitted, synchronizedAfterRolledBack;\n     private Collection<String> messages = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9edb48db34b46842734586fb948b39407656742f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3ODI2OA==", "bodyText": "See above comment.", "url": "https://github.com/wildfly/wildfly/pull/13267#discussion_r420378268", "createdAt": "2020-05-05T20:14:11Z", "author": {"login": "chengfang"}, "path": "testsuite/shared/src/main/java/org/jboss/as/test/integration/transactions/TransactionCheckerSingleton.java", "diffHunk": "@@ -40,8 +40,8 @@\n @Remote\n @ManagedBean\n public class TransactionCheckerSingleton implements TransactionCheckerSingletonRemote {\n-    private int committed, prepared, rolledback;\n-    private int  synchronizedBegin, synchronizedBefore, synchronizedAfter,\n+    private volatile int committed, prepared, rolledback;\n+    private volatile int synchronizedBegin, synchronizedBefore, synchronizedAfter,\n         synchronizedAfterCommitted, synchronizedAfterRolledBack;\n     private Collection<String> messages = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5MDgxNQ=="}, "originalCommit": {"oid": "9edb48db34b46842734586fb948b39407656742f"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3923, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}