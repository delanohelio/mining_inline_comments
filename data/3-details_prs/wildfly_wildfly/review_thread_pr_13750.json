{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDM0Mjg2", "number": 13750, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMDo1Mjo0M1rOFbUYdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMTowMDo1M1rOFbUmZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0MTg5ODEzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CorruptedLogTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMDo1Mjo0M1rOImwkxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMDo1Mjo0M1rOImwkxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzUxMjY0Ng==", "bodyText": "Can you please parametrize this hard-coded path? Maybe that something like this could help:\n            File target = new File(System.getProperty(\"jboss.home\"), \"standalone/data/activemq/journal/attic/\");", "url": "https://github.com/wildfly/wildfly/pull/13750#discussion_r577512646", "createdAt": "2021-02-17T10:52:43Z", "author": {"login": "marekkopecky"}, "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CorruptedLogTestCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2012, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.controller.client.helpers.Operations;\n+\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSConsumer;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSProducer;\n+import javax.jms.Queue;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.repository.PathUtil;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunAsClient()\n+@RunWith(Arquillian.class)\n+public class CorruptedLogTestCase {\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas\";\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    private ManagementClient managementClient;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        managementClient = createManagementClient();\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        setJournalSize(100L);\n+        jmsOperations.createJmsQueue(\"corrupted\", \"java:jboss/exported/\" + \"queue/corrupted\");\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        managementClient = createManagementClient();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.removeJmsQueue(\"corrupted\");\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"journal-file-size\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"journal-max-attic-files\"));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        PathUtil.deleteRecursively(new File(\"target/wildfly/standalone/data/activemq/journal/attic/\").toPath());\n+    }\n+\n+    /**\n+     * Set the journal file size to 100k.\n+     * Send 100 messages of 20k\n+     * Set the journal file size to 200k\n+     * Restart the server\n+     * Consume the messages\n+     * Should have journal files in the attic\n+     *\n+     */\n+    @Test\n+    public void testCorruptedJournal() throws NamingException, IOException {\n+        InitialContext remoteContext = createJNDIContext();\n+        ConnectionFactory cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        Queue queue = (Queue) remoteContext.lookup(\"queue/corrupted\");\n+        try (JMSContext context = cf.createContext(\"guest\", \"guest\", JMSContext.AUTO_ACKNOWLEDGE);) {\n+            JMSProducer producer = context.createProducer();\n+            for (int i = 0; i < 100; i++) {\n+                producer.send(queue, context.createTextMessage(RandomStringUtils.randomAlphabetic(20000)));\n+            }\n+        }\n+        setJournalSize(200L);\n+        remoteContext.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        managementClient = createManagementClient();\n+        remoteContext = createJNDIContext();\n+        cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        queue = (Queue) remoteContext.lookup(\"queue/corrupted\");\n+        try (JMSContext context = cf.createContext(\"guest\", \"guest\", JMSContext.AUTO_ACKNOWLEDGE);) {\n+            JMSConsumer consumer = context.createConsumer(queue);\n+            for (int i = 0; i < 100; i++) {\n+                TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNotNull(message);\n+            }\n+        }\n+        Path attic = new File(\"target/wildfly/standalone/data/activemq/journal/attic/\").toPath();\n+        Assert.assertTrue(\"Couldn't find \" + attic.toAbsolutePath(), Files.exists(attic));\n+        Assert.assertTrue(Files.isDirectory(attic));\n+        try (Stream<Path> stream = Files.list(attic)){\n+            long nbAtticFiles = stream.collect(Collectors.counting());\n+            Assert.assertTrue(nbAtticFiles > 0L);\n+        }\n+    }\n+\n+    @Test\n+    public void testCorruptedJournalNotSaved() throws NamingException, IOException {\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        managementClient.getControllerClient().execute(Operations.createWriteAttributeOperation(jmsOperations.getServerAddress(), \"journal-max-attic-files\", 0));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        PathUtil.deleteRecursively(new File(\"target/wildfly/standalone/data/activemq/journal/attic/\").toPath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728477fab7b5ca1312d8406dffdd51d3421361db"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0MTkyNjExOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CorruptedLogTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMDo1OToxMlrOImw2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMDo1OToxMlrOImw2DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzUxNzA2OQ==", "bodyText": "Now we have two test methods. First call of this method (and the following start in the following setup method) seems to be useless. Can you call this container.stop after all test methods are executed (and not after each test method)? Maybe that ServerSetupTask could help (like in this example)?", "url": "https://github.com/wildfly/wildfly/pull/13750#discussion_r577517069", "createdAt": "2021-02-17T10:59:12Z", "author": {"login": "marekkopecky"}, "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CorruptedLogTestCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2012, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.controller.client.helpers.Operations;\n+\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSConsumer;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSProducer;\n+import javax.jms.Queue;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.repository.PathUtil;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunAsClient()\n+@RunWith(Arquillian.class)\n+public class CorruptedLogTestCase {\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas\";\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    private ManagementClient managementClient;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        managementClient = createManagementClient();\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        setJournalSize(100L);\n+        jmsOperations.createJmsQueue(\"corrupted\", \"java:jboss/exported/\" + \"queue/corrupted\");\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        managementClient = createManagementClient();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.removeJmsQueue(\"corrupted\");\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"journal-file-size\"));\n+        managementClient.getControllerClient().execute(Operations.createUndefineAttributeOperation(jmsOperations.getServerAddress(), \"journal-max-attic-files\"));\n+        jmsOperations.close();\n+        managementClient.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728477fab7b5ca1312d8406dffdd51d3421361db"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY0MTkzMzgyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CorruptedLogTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMTowMDo1M1rOImw6jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xN1QxMTowMDo1M1rOImw6jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzUxODIyMg==", "bodyText": "Can you please add some general javadoc here? Or add javadoc to each testmethod? So far just one test method has javadoc", "url": "https://github.com/wildfly/wildfly/pull/13750#discussion_r577518222", "createdAt": "2021-02-17T11:00:53Z", "author": {"login": "marekkopecky"}, "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/CorruptedLogTestCase.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2012, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.controller.client.helpers.Operations;\n+\n+import java.net.UnknownHostException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Collectors;\n+import java.util.Properties;\n+import java.util.stream.Stream;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSConsumer;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSProducer;\n+import javax.jms.Queue;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.apache.commons.lang3.RandomStringUtils;\n+\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.repository.PathUtil;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "728477fab7b5ca1312d8406dffdd51d3421361db"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4079, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}