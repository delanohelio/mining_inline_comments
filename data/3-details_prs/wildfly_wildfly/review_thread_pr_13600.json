{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTM0MTk0", "number": 13600, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTozOTowNVrOEm15Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTozOTowNVrOEm15Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTY0MzgzOnYy", "diffSide": "RIGHT", "path": "ee/src/main/java/org/jboss/as/ee/component/ViewService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMTozOTowNVrOHXGvnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMDo0MjoxNlrOHYR5qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4OTc4OA==", "bodyText": "This is on the request path and should be optimized to a single map lookup.", "url": "https://github.com/wildfly/wildfly/pull/13600#discussion_r493989788", "createdAt": "2020-09-24T01:39:05Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/component/ViewService.java", "diffHunk": "@@ -193,11 +195,24 @@ public Object invoke(InterceptorContext interceptorContext) throws Exception {\n             if(component instanceof BasicComponent) {\n                 ((BasicComponent) component).waitForComponentStart();\n             }\n-            final Method method = interceptorContext.getMethod();\n+            final Method method = matchMethod(interceptorContext.getMethod());\n             final Interceptor interceptor = viewInterceptors.get(method);\n             return interceptor.processInvocation(interceptorContext);\n         }\n \n+        private Method matchMethod(Method invokedMethod) {\n+            if (invokedMethod.getDeclaringClass().isInterface()) {\n+                for (Method beanMethod : proxyFactory.getCachedMethods()) {\n+                    if (MethodIdentifier.getIdentifierForMethod(beanMethod).equals(MethodIdentifier.getIdentifierForMethod(invokedMethod))) {\n+                        return beanMethod;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9055bcef847df36666c819fe36623abdb76a1022"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk5MDExMw==", "bodyText": "I was referring to the entire for loop.", "url": "https://github.com/wildfly/wildfly/pull/13600#discussion_r493990113", "createdAt": "2020-09-24T01:40:23Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/component/ViewService.java", "diffHunk": "@@ -193,11 +195,24 @@ public Object invoke(InterceptorContext interceptorContext) throws Exception {\n             if(component instanceof BasicComponent) {\n                 ((BasicComponent) component).waitForComponentStart();\n             }\n-            final Method method = interceptorContext.getMethod();\n+            final Method method = matchMethod(interceptorContext.getMethod());\n             final Interceptor interceptor = viewInterceptors.get(method);\n             return interceptor.processInvocation(interceptorContext);\n         }\n \n+        private Method matchMethod(Method invokedMethod) {\n+            if (invokedMethod.getDeclaringClass().isInterface()) {\n+                for (Method beanMethod : proxyFactory.getCachedMethods()) {\n+                    if (MethodIdentifier.getIdentifierForMethod(beanMethod).equals(MethodIdentifier.getIdentifierForMethod(invokedMethod))) {\n+                        return beanMethod;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4OTc4OA=="}, "originalCommit": {"oid": "9055bcef847df36666c819fe36623abdb76a1022"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1OTgzNw==", "bodyText": "This path is only executed when invokedMethod.getDeclaringClass().isInterface() is true, i.e., when the bean is 2.x ejb, or the ejb bean class has no default constructor. So for the majority of ejb use case, this part is not touched. So I updated this part to populate a map on-demand to save the mapping.", "url": "https://github.com/wildfly/wildfly/pull/13600#discussion_r495159837", "createdAt": "2020-09-25T18:25:06Z", "author": {"login": "chengfang"}, "path": "ee/src/main/java/org/jboss/as/ee/component/ViewService.java", "diffHunk": "@@ -193,11 +195,24 @@ public Object invoke(InterceptorContext interceptorContext) throws Exception {\n             if(component instanceof BasicComponent) {\n                 ((BasicComponent) component).waitForComponentStart();\n             }\n-            final Method method = interceptorContext.getMethod();\n+            final Method method = matchMethod(interceptorContext.getMethod());\n             final Interceptor interceptor = viewInterceptors.get(method);\n             return interceptor.processInvocation(interceptorContext);\n         }\n \n+        private Method matchMethod(Method invokedMethod) {\n+            if (invokedMethod.getDeclaringClass().isInterface()) {\n+                for (Method beanMethod : proxyFactory.getCachedMethods()) {\n+                    if (MethodIdentifier.getIdentifierForMethod(beanMethod).equals(MethodIdentifier.getIdentifierForMethod(invokedMethod))) {\n+                        return beanMethod;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4OTc4OA=="}, "originalCommit": {"oid": "9055bcef847df36666c819fe36623abdb76a1022"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyMTE2MQ==", "bodyText": "Nice; I like that approach.", "url": "https://github.com/wildfly/wildfly/pull/13600#discussion_r495221161", "createdAt": "2020-09-25T20:42:16Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/component/ViewService.java", "diffHunk": "@@ -193,11 +195,24 @@ public Object invoke(InterceptorContext interceptorContext) throws Exception {\n             if(component instanceof BasicComponent) {\n                 ((BasicComponent) component).waitForComponentStart();\n             }\n-            final Method method = interceptorContext.getMethod();\n+            final Method method = matchMethod(interceptorContext.getMethod());\n             final Interceptor interceptor = viewInterceptors.get(method);\n             return interceptor.processInvocation(interceptorContext);\n         }\n \n+        private Method matchMethod(Method invokedMethod) {\n+            if (invokedMethod.getDeclaringClass().isInterface()) {\n+                for (Method beanMethod : proxyFactory.getCachedMethods()) {\n+                    if (MethodIdentifier.getIdentifierForMethod(beanMethod).equals(MethodIdentifier.getIdentifierForMethod(invokedMethod))) {\n+                        return beanMethod;\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk4OTc4OA=="}, "originalCommit": {"oid": "9055bcef847df36666c819fe36623abdb76a1022"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4116, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}