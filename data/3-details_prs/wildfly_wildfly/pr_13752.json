{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDkzMzM5", "number": 13752, "title": "[WFLY-14114] JDBC: deregister all drivers on undeployment", "bodyText": "https://issues.redhat.com/browse/WFLY-14114\nDepends on: wildfly/wildfly-core#4399\nThis hack allows to deregister all drivers registered by a given deployment.\nBecause those objects are created by a driver code and not guaranteed to be deregistered this lead to memory leaks.\nOTOH DriverManager checks the caller class's classloader so I wasn't able to neither list nor deregister those drivers from connector code. To work this around I have added additional resource loader to a driver module and injected the adapter class code there. As a result, I was able to obtain and deregister all drivers registered by the driver module.", "createdAt": "2020-11-30T11:46:33Z", "url": "https://github.com/wildfly/wildfly/pull/13752", "merged": true, "mergeCommit": {"oid": "1e3289b84a3ba726b7d9c2fa19ea05603f2d0873"}, "closed": true, "closedAt": "2020-12-08T02:43:19Z", "author": {"login": "tadamski"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhoE_BgBqjQwNTI4ODQ0OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj17O1gFqTU0NjE2NzE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcde541064b8c7dc57aa249b05484353182abe58", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/bcde541064b8c7dc57aa249b05484353182abe58", "committedDate": "2020-11-30T11:38:01Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}, "afterCommit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/3ca182d18ff51959de84d463d9288fc733def06c", "committedDate": "2020-11-30T16:28:58Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzQwMTIz", "url": "https://github.com/wildfly/wildfly/pull/13752#pullrequestreview-542740123", "createdAt": "2020-12-02T11:24:14Z", "commit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMToyNDoxNFrOH9WcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTo0NTo0MFrOH9XLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5Mjg3Mw==", "bodyText": "There is an agreed contract that all deployment phases and all processor ids are defined in Phase object.\nFurther more someone in the future might define the same DU processor ID in WildFly Core and it would collide. Please keep the contract.", "url": "https://github.com/wildfly/wildfly/pull/13752#discussion_r534092873", "createdAt": "2020-12-02T11:24:14Z", "author": {"login": "ropalka"}, "path": "connector/src/main/java/org/jboss/as/connector/deployers/ra/RaDeploymentActivator.java", "diffHunk": "@@ -104,6 +108,7 @@ public void activateProcessors(final DeploymentProcessorTarget updateContext) {\n         updateContext.addDeploymentProcessor(ResourceAdaptersExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_RESOURCE_DEF_ANNOTATION_ADMINISTERED_OBJECT,\n                 new AdministeredObjectDefinitionAnnotationProcessor());\n         updateContext.addDeploymentProcessor(ResourceAdaptersExtension.SUBSYSTEM_NAME, Phase.DEPENDENCIES, Phase.DEPENDENCIES_RAR_CONFIG, new RarDependencyProcessor(appclient));\n+        updateContext.addDeploymentProcessor(ResourceAdaptersExtension.SUBSYSTEM_NAME, Phase.CONFIGURE_MODULE, CONFIGURE_JDBC_DRIVER_MANAGER_ADAPTER, new DriverManagerAdapterProcessor());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5MzIyMQ==", "bodyText": "Remove this and wait for WildFly Core upgrade.", "url": "https://github.com/wildfly/wildfly/pull/13752#discussion_r534093221", "createdAt": "2020-12-02T11:24:50Z", "author": {"login": "ropalka"}, "path": "connector/src/main/java/org/jboss/as/connector/deployers/ra/RaDeploymentActivator.java", "diffHunk": "@@ -55,6 +56,9 @@\n  * @author <a href=\"mailto:stefano.maestri@redhat.com\">Stefano Maestri</a>\n  */\n public class RaDeploymentActivator {\n+\n+    public static final int CONFIGURE_JDBC_DRIVER_MANAGER_ADAPTER = 0x0180;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEwNDg4Ng==", "bodyText": "calling is.close() might produce exception. Please define:\nprivate static void safeClose(final Closeable c) {\n    if (c != null) try { c.close(); } catch (Throwable ignored) {};\n}\n\nand use it instead of InputStream.close() method", "url": "https://github.com/wildfly/wildfly/pull/13752#discussion_r534104886", "createdAt": "2020-12-02T11:45:40Z", "author": {"login": "ropalka"}, "path": "connector/src/main/java/org/jboss/as/connector/deployers/ds/processors/DriverManagerAdapterProcessor.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.connector.deployers.ds.processors;\n+\n+import org.jboss.as.connector._drivermanager.DriverManagerAdapter;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessor;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.jboss.modules.AbstractResourceLoader;\n+import org.jboss.modules.ClassSpec;\n+import org.jboss.modules.ResourceLoaderSpec;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * @author <a href=\"mailto:tadamski@redhat.com\">Tomasz Adamski</a>\n+ * <p>\n+ * https://issues.redhat.com/browse/WFLY-14114\n+ * <p>\n+ * This is a hack that allows us to get access to {@link java.sql.Driver} registered by the driver code. Those objects are created by the\n+ * driver code and registered in {@link java.sql.DriverManager}. Driver objects are not guaranteed to be deregistered which leads to leaks.\n+ * {@link java.sql.DriverManager} allows for obtaining the list of drivers, and deregistering a driver but only in a give classloading context.\n+ * As a result, connector module can not neither list or deregister drivers from a deployed driver module.\n+ * <p>\n+ * To work this around, this hack modifies driver's module by injecting {@link DriverManagerAdapter} class to it. Because @{@link DriverManagerAdapter}\n+ * is loaded by driver module it allows to obtain and deregister the drivers.\n+ */\n+\n+public class DriverManagerAdapterProcessor implements DeploymentUnitProcessor {\n+\n+    @Override\n+    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+            final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n+            final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n+            final DriverAdapterResourceLoader resourceLoader = new DriverAdapterResourceLoader();\n+            moduleSpecification.addResourceLoader(ResourceLoaderSpec.createResourceLoaderSpec(resourceLoader));\n+    }\n+\n+    static class DriverAdapterResourceLoader extends AbstractResourceLoader {\n+        @Override\n+        public ClassSpec getClassSpec(final String fileName) throws IOException {\n+            InputStream is = this.getClass().getClassLoader().getResourceAsStream(fileName);\n+            if (is == null) {\n+                return null;\n+            }\n+            final byte[] bytes = readAllBytesFromStream(is);\n+            final ClassSpec spec = new ClassSpec();\n+            spec.setBytes(bytes);\n+            return spec;\n+        }\n+\n+        @Override\n+        public Collection<String> getPaths() {\n+            return Collections.singletonList(DriverManagerAdapter.class.getPackage().getName().replace('.','/'));\n+        }\n+\n+        private static byte[] readAllBytesFromStream(final InputStream is) throws IOException {\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            try {\n+                final byte[] buffer = new byte[1024];\n+                int read = 0;\n+                while ((read = is.read(buffer)) != -1) {\n+                    bos.write(buffer, 0, read);\n+                }\n+                return bos.toByteArray();\n+            } finally {\n+                is.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNzc2MjQ5", "url": "https://github.com/wildfly/wildfly/pull/13752#pullrequestreview-542776249", "createdAt": "2020-12-02T12:14:54Z", "commit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjoxNDo1NFrOH9YLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMjoxNDo1NFrOH9YLkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDEyMTM2Mw==", "bodyText": "+1 in my recent DUP refactorings I have found a number of cases where the IDs used in WildFly don't get passed back to WildFly Core where we say we will come back to it later.\nPlease get a PR raised against WildFly Core and we should be able to get it merged quickly.", "url": "https://github.com/wildfly/wildfly/pull/13752#discussion_r534121363", "createdAt": "2020-12-02T12:14:54Z", "author": {"login": "darranl"}, "path": "connector/src/main/java/org/jboss/as/connector/deployers/ra/RaDeploymentActivator.java", "diffHunk": "@@ -55,6 +56,9 @@\n  * @author <a href=\"mailto:stefano.maestri@redhat.com\">Stefano Maestri</a>\n  */\n public class RaDeploymentActivator {\n+\n+    public static final int CONFIGURE_JDBC_DRIVER_MANAGER_ADAPTER = 0x0180;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA5MzIyMQ=="}, "originalCommit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ca182d18ff51959de84d463d9288fc733def06c", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/3ca182d18ff51959de84d463d9288fc733def06c", "committedDate": "2020-11-30T16:28:58Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}, "afterCommit": {"oid": "14ff2150e2825f86a0373a0aadb5961a4690dd85", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/14ff2150e2825f86a0373a0aadb5961a4690dd85", "committedDate": "2020-12-02T12:34:35Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "533c4399421928f16093dd42891b2c3c72b1def6", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/533c4399421928f16093dd42891b2c3c72b1def6", "committedDate": "2020-12-07T10:58:36Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14ff2150e2825f86a0373a0aadb5961a4690dd85", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/14ff2150e2825f86a0373a0aadb5961a4690dd85", "committedDate": "2020-12-02T12:34:35Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}, "afterCommit": {"oid": "533c4399421928f16093dd42891b2c3c72b1def6", "author": {"user": {"login": "tadamski", "name": "Tomasz Adamski"}}, "url": "https://github.com/wildfly/wildfly/commit/533c4399421928f16093dd42891b2c3c72b1def6", "committedDate": "2020-12-07T10:58:36Z", "message": "[WFLY-14114] JDBC: deregister all drivers on undeployment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MDUzODE3", "url": "https://github.com/wildfly/wildfly/pull/13752#pullrequestreview-546053817", "createdAt": "2020-12-07T11:20:02Z", "commit": {"oid": "533c4399421928f16093dd42891b2c3c72b1def6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTY3MTgw", "url": "https://github.com/wildfly/wildfly/pull/13752#pullrequestreview-546167180", "createdAt": "2020-12-07T13:54:15Z", "commit": {"oid": "533c4399421928f16093dd42891b2c3c72b1def6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3760, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}