{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0ODU5NDIw", "number": 13221, "title": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers", "bodyText": "This PR does the following:\n\nadds in transformer tests for the ejb3 subsystem for EAP versions 7.0.0, 7.1.0 and 7.2.0\nrefactors the transformers to use the chained transformer approach, to simplify understanding of the transformers and make maintenance easier\n\nFor more details, see: https://issues.redhat.com/browse/WFLY-13267", "createdAt": "2020-04-17T00:29:52Z", "url": "https://github.com/wildfly/wildfly/pull/13221", "merged": true, "mergeCommit": {"oid": "398e4373ef1762c892f8f330565289bd1f52f767"}, "closed": true, "closedAt": "2020-04-29T03:50:20Z", "author": {"login": "rachmatowicz"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYWWe6ABqjMyNDIzOTI3OTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccHGQkAFqTQwMTQ1OTk5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5bffbf193c2a8f7da88dd2d52a6b78bb1f94bda7", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/5bffbf193c2a8f7da88dd2d52a6b78bb1f94bda7", "committedDate": "2020-04-16T22:07:40Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}, "afterCommit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "committedDate": "2020-04-17T00:40:36Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODYzNjU2", "url": "https://github.com/wildfly/wildfly/pull/13221#pullrequestreview-396863656", "createdAt": "2020-04-20T22:44:04Z", "commit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0NDowNVrOGIqrVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0NDowNVrOGIqrVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTAxMw==", "bodyText": "This attribute is an alias.", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r411741013", "createdAt": "2020-04-20T22:44:05Z", "author": {"login": "bstansberry"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemRootResourceDefinition.java", "diffHunk": "@@ -123,7 +123,6 @@\n             new SimpleAttributeDefinitionBuilder(EJB3SubsystemModel.ENABLE_STATISTICS, ModelType.BOOLEAN, true)\n                     .setAllowExpression(true)\n                     .setDeprecated(ModelVersion.create(5))\n-                    .setFlags(AttributeAccess.Flag.ALIAS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODY0MTA2", "url": "https://github.com/wildfly/wildfly/pull/13221#pullrequestreview-396864106", "createdAt": "2020-04-20T22:45:10Z", "commit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0NToxMFrOGIqtHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0NToxMFrOGIqtHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTQ2OA==", "bodyText": "AFAICT the changes to this file should not be necessary as the behavior of these AttributeDefinitions is to not write anything if the attribute isn't defined.", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r411741468", "createdAt": "2020-04-20T22:45:10Z", "author": {"login": "bstansberry"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3SubsystemXMLPersister.java", "diffHunk": "@@ -489,8 +491,10 @@ private void writeStrictMaxPoolConfig(final XMLExtendedStreamWriter writer, fina\n \n         writer.writeAttribute(EJB3SubsystemXMLAttribute.NAME.getLocalName(), strictMaxPoolModel.getName());\n \n-        StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n-        StrictMaxPoolResourceDefinition.DERIVE_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n+        if (strictMaxPoolModelNode.hasDefined(MAX_POOL_SIZE))\n+            StrictMaxPoolResourceDefinition.MAX_POOL_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);\n+        if (strictMaxPoolModelNode.hasDefined(DERIVE_SIZE))\n+            StrictMaxPoolResourceDefinition.DERIVE_SIZE.marshallAsAttribute(strictMaxPoolModelNode, writer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2ODY0Mzc1", "url": "https://github.com/wildfly/wildfly/pull/13221#pullrequestreview-396864375", "createdAt": "2020-04-20T22:45:44Z", "commit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0NTo0NFrOGIquLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMjo0NTo0NFrOGIquLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc0MTc0Mg==", "bodyText": "I think this move introduces merge conflicts because the whole method is gone now.", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r411741742", "createdAt": "2020-04-20T22:45:44Z", "author": {"login": "bstansberry"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJB3RemoteServiceAdd.java", "diffHunk": "@@ -77,6 +77,14 @@ protected void performBoottime(OperationContext context, ModelNode operation, Mo\n         installRuntimeServices(context, model);\n     }\n \n+    @Override\n+    protected void populateModel(ModelNode operation, ModelNode model) throws OperationFailedException {\n+        EJB3RemoteResourceDefinition.CLIENT_MAPPINGS_CLUSTER_NAME.validateAndSet(operation, model);\n+        EJB3RemoteResourceDefinition.CONNECTOR_REF.validateAndSet(operation, model);\n+        EJB3RemoteResourceDefinition.THREAD_POOL_NAME.validateAndSet(operation, model);\n+        EJB3RemoteResourceDefinition.EXECUTE_IN_WORKER.validateAndSet(operation, model);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f"}, "originalPosition": 10}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/3e6e395b1061798dfd33a4b7e71ebb05c8a8c68f", "committedDate": "2020-04-17T00:40:36Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}, "afterCommit": {"oid": "f16b4cd097f2c6101bef81424ec5220f7a87eebe", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/f16b4cd097f2c6101bef81424ec5220f7a87eebe", "committedDate": "2020-04-21T18:49:06Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f16b4cd097f2c6101bef81424ec5220f7a87eebe", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/f16b4cd097f2c6101bef81424ec5220f7a87eebe", "committedDate": "2020-04-21T18:49:06Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}, "afterCommit": {"oid": "05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "committedDate": "2020-04-21T20:45:11Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/05e3fa71d133e9d800fce77af0d9c86bea54e2c3", "committedDate": "2020-04-21T20:45:11Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}, "afterCommit": {"oid": "9179b61f4249343a73b6920d0a434a912dd74f79", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/9179b61f4249343a73b6920d0a434a912dd74f79", "committedDate": "2020-04-27T19:35:53Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODU5Mzkz", "url": "https://github.com/wildfly/wildfly/pull/13221#pullrequestreview-401859393", "createdAt": "2020-04-28T13:54:48Z", "commit": {"oid": "9179b61f4249343a73b6920d0a434a912dd74f79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1cf24946bbbb58087b4b96854632702ec902b8", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4a1cf24946bbbb58087b4b96854632702ec902b8", "committedDate": "2020-04-28T16:25:10Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9179b61f4249343a73b6920d0a434a912dd74f79", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/9179b61f4249343a73b6920d0a434a912dd74f79", "committedDate": "2020-04-27T19:35:53Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}, "afterCommit": {"oid": "4a1cf24946bbbb58087b4b96854632702ec902b8", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4a1cf24946bbbb58087b4b96854632702ec902b8", "committedDate": "2020-04-28T16:25:10Z", "message": "[WFLY-13267] Convert EJB3 subsystem transformers to use chained transformers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDU5OTkx", "url": "https://github.com/wildfly/wildfly/pull/13221#pullrequestreview-401459991", "createdAt": "2020-04-28T02:44:47Z", "commit": {"oid": "9179b61f4249343a73b6920d0a434a912dd74f79"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo0NDo0N1rOGNADZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo0NDo0N1rOGNADZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4NTU0MA==", "bodyText": "This new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.TRUE) seems to overwrite the changes in the PR to consolidate the use of DiscardAttributeValueChecker", "url": "https://github.com/wildfly/wildfly/pull/13221#discussion_r416285540", "createdAt": "2020-04-28T02:44:47Z", "author": {"login": "chengfang"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/subsystem/EJBTransformers.java", "diffHunk": "@@ -83,202 +88,199 @@ public String getSubsystemName() {\n \n     @Override\n     public void registerTransformers(SubsystemTransformerRegistration subsystemRegistration) {\n-        registerTransformers_1_2_1(subsystemRegistration);\n-        registerTimerTransformers_1_3_0(subsystemRegistration);\n-        registerTransformers_3_0_0(subsystemRegistration);\n-        registerTransformers_4_0_0(subsystemRegistration);\n-        registerTransformers_5_0_0(subsystemRegistration);\n-    }\n \n-    private static void registerTransformers_1_2_1(SubsystemTransformerRegistration subsystemRegistration) {\n-        registerTransformers_1_2_1_and_1_3_0(subsystemRegistration, VERSION_1_2_1);\n+        ModelVersion currentModel = subsystemRegistration.getCurrentSubsystemVersion();\n+        ChainedTransformationDescriptionBuilder chainedBuilder = TransformationDescriptionBuilder.Factory.createChainedSubystemInstance(currentModel);\n+\n+        registerTransformers_5_0_0(chainedBuilder.createBuilder(currentModel, VERSION_5_0_0.getVersion()));\n+        registerTransformers_4_0_0(chainedBuilder.createBuilder(VERSION_5_0_0.getVersion(), VERSION_4_0_0.getVersion()));\n+        registerTransformers_3_0_0(chainedBuilder.createBuilder(VERSION_4_0_0.getVersion(), VERSION_3_0_0.getVersion()));\n+        registerTransformers_1_3_0(chainedBuilder.createBuilder(VERSION_3_0_0.getVersion(), VERSION_1_3_0.getVersion()));\n+        registerTransformers_1_2_1(chainedBuilder.createBuilder(VERSION_1_3_0.getVersion(), VERSION_1_2_1.getVersion()));\n+\n+        chainedBuilder.buildAndRegister(subsystemRegistration,new ModelVersion[]{VERSION_6_0_0.getVersion(), VERSION_5_0_0.getVersion(), VERSION_4_0_0.getVersion(), VERSION_3_0_0.getVersion(), VERSION_1_3_0.getVersion(), VERSION_1_2_1.getVersion()});\n     }\n \n-    private static void registerTimerTransformers_1_3_0(SubsystemTransformerRegistration subsystemRegistration) {\n-        registerTransformers_1_2_1_and_1_3_0(subsystemRegistration, VERSION_1_3_0);\n+    /*\n+     * Transformers for changes in model version 1.3.0\n+     */\n+    private static void registerTransformers_1_2_1(ResourceTransformationDescriptionBuilder subsystemBuilder) {\n+\n+        DataStoreTransformer dataStoreTransformer = new DataStoreTransformer();\n+\n+        ResourceTransformationDescriptionBuilder timerService = subsystemBuilder.addChildResource(EJB3SubsystemModel.TIMER_SERVICE_PATH);\n+        timerService.getAttributeBuilder()\n+                .setDiscard(DiscardAttributeChecker.ALWAYS, EJB3SubsystemModel.DEFAULT_DATA_STORE)//this is ok, as default-data-store only has any sense with new model, but it is always set!\n+                .end();\n+        timerService.discardOperations(ModelDescriptionConstants.ADD);\n+\n+        // set a custom resource transformer for /subsystem=ejb/service=timer\n+        timerService.setCustomResourceTransformer(dataStoreTransformer);\n+\n+        // reject /subsystem=ejb/service=timer database-data-store children\n+        timerService.rejectChildResource(EJB3SubsystemModel.DATABASE_DATA_STORE_PATH);\n+\n+        ResourceTransformationDescriptionBuilder fileDataStore = timerService.addChildRedirection(EJB3SubsystemModel.FILE_DATA_STORE_PATH, (current, theBuilder) -> theBuilder.getCurrent());\n+\n+        // override the operation /subsystem=ejb/service=timer/file-data-store=F:add(path=, relative-to=)\n+        fileDataStore.addOperationTransformationOverride(ModelDescriptionConstants.ADD)\n+                .inheritResourceAttributeDefinitions()\n+                .setCustomOperationTransformer(dataStoreTransformer)\n+                .end();\n     }\n \n-    private static void registerTransformers_1_2_1_and_1_3_0(SubsystemTransformerRegistration subsystemRegistration, ModelVersion version) {\n-        final ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n+    /*\n+     * Transformers for changes in model version 3.0.0\n+     */\n+    private static void registerTransformers_1_3_0(ResourceTransformationDescriptionBuilder subsystemBuilder) {\n \n         StatefulCacheRefTransformer statefulCacheRefTransformer = new StatefulCacheRefTransformer();\n-        builder.setCustomResourceTransformer(statefulCacheRefTransformer);\n-\n+        subsystemBuilder.setCustomResourceTransformer(statefulCacheRefTransformer);\n         for (String name : Arrays.asList(WRITE_ATTRIBUTE_OPERATION, UNDEFINE_ATTRIBUTE_OPERATION, READ_ATTRIBUTE_OPERATION)) {\n-            builder.addOperationTransformationOverride(name)\n+            subsystemBuilder.addOperationTransformationOverride(name)\n                     .inheritResourceAttributeDefinitions()\n                     .setCustomOperationTransformer(statefulCacheRefTransformer)\n                     .end();\n         }\n-\n-        builder.addOperationTransformationOverride(ADD)\n+        subsystemBuilder.addOperationTransformationOverride(ADD)\n                 .inheritResourceAttributeDefinitions()\n                 .setCustomOperationTransformer(new AddStatefulCacheRefTransformer())\n                 .end();\n \n         //This used to behave as 'true' and it is now defaulting as 'true'\n-        builder.getAttributeBuilder().setDiscard(DiscardAttributeChecker.DEFAULT_VALUE, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS);\n-\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.DISABLE_DEFAULT_EJB_PERMISSIONS);\n-        // We can always discard this attribute, because it's meaningless without the security-manager subsystem, and\n-        // a legacy slave can't have that subsystem in its profile.\n-        builder.getAttributeBuilder().setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.FALSE), EJB3SubsystemRootResourceDefinition.DISABLE_DEFAULT_EJB_PERMISSIONS);\n-        //builder.getAttributeBuilder().setValueConverter(AttributeConverter.Factory.createHardCoded(new ModelNode(\"hornetq-ra\"), true), EJB3SubsystemRootResourceDefinition.DEFAULT_RESOURCE_ADAPTER_NAME);\n-\n-        builder.getAttributeBuilder().setDiscard(DiscardAttributeChecker.DEFAULT_VALUE, EJB3SubsystemRootResourceDefinition.ALLOW_EJB_NAME_REGEX, EJB3SubsystemRootResourceDefinition.ENABLE_GRACEFUL_TXN_SHUTDOWN);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.ALLOW_EJB_NAME_REGEX, EJB3SubsystemRootResourceDefinition.ENABLE_GRACEFUL_TXN_SHUTDOWN);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.SERVER_INTERCEPTORS);\n-        builder.getAttributeBuilder().addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.CLIENT_INTERCEPTORS);\n-\n-        registerPassivationStoreTransformers_1_2_1_and_1_3_0(builder);\n-        registerRemoteTransformers(builder);\n-        registerMdbDeliveryGroupTransformers(builder);\n-        registerStrictMaxPoolTransformers(builder);\n-        registerApplicationSecurityDomainDTransformers(builder);\n-        registerIdentityTransformers(builder);\n-        registerThreadPoolTransformers(builder);\n-\n-        builder.rejectChildResource(PathElement.pathElement(EJB3SubsystemModel.REMOTING_PROFILE));\n-        if (version.equals(VERSION_1_2_1)) {\n-            registerTimerTransformers_1_2_0(builder);\n-        } else if (version.equals(VERSION_1_3_0)) {\n-            registerTimerTransformers_1_3_0(builder);\n-        }\n-\n-        // Rename new statistics-enabled attribute to old enable-statistics\n-        builder.getAttributeBuilder()\n-               .addRename(EJB3SubsystemModel.STATISTICS_ENABLED, EJB3SubsystemModel.ENABLE_STATISTICS);\n-\n-        TransformationDescription.Tools.register(builder.build(), subsystemRegistration, version);\n-    }\n-\n-    private static void registerTransformers_3_0_0(SubsystemTransformerRegistration subsystemRegistration) {\n-        final ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n-        builder.getAttributeBuilder().setValueConverter(AttributeConverter.Factory.createHardCoded(new ModelNode(\"hornetq-ra\"), true), EJB3SubsystemRootResourceDefinition.DEFAULT_RESOURCE_ADAPTER_NAME)\n+        subsystemBuilder.getAttributeBuilder()\n+                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(ModelNode.TRUE), EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)\n+                .addRejectCheck(RejectAttributeChecker.DEFINED, EJB3SubsystemRootResourceDefinition.LOG_EJB_EXCEPTIONS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9179b61f4249343a73b6920d0a434a912dd74f79"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3520, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}