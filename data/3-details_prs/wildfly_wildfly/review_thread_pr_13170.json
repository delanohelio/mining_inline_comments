{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzIwOTU5", "number": 13170, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoxMzoxMFrODuJs-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MzozMVrODuP1tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzIwMDU2OnYy", "diffSide": "RIGHT", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoxMzoxMFrOF__uUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo0Nzo0NVrOGAIusg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODY1Ng==", "bodyText": "This could just be TRACERS.get(WildFlySecurityManager.getCurrentContextClassLoader())", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402648656", "createdAt": "2020-04-02T23:13:10Z", "author": {"login": "jamezp"}, "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -42,7 +45,18 @@ public static void registerApplicationTracer(ClassLoader classLoader, Tracer tra\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            return TRACERS.get(Thread.currentThread().getContextClassLoader());\n+            ClassLoader loader;\n+            if (!WildFlySecurityManager.isChecking()) {\n+                loader = Thread.currentThread().getContextClassLoader();\n+            } else {\n+                loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+                    @Override\n+                    public ClassLoader run() {\n+                        return Thread.currentThread().getContextClassLoader();\n+                    }\n+                });\n+            }\n+            return TRACERS.get(loader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928e4841536de648da6c2cff6dcb28a7e5693578"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5NjIxMA==", "bodyText": "yes that was the issue", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402796210", "createdAt": "2020-04-03T07:47:45Z", "author": {"login": "ehsavoie"}, "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -42,7 +45,18 @@ public static void registerApplicationTracer(ClassLoader classLoader, Tracer tra\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            return TRACERS.get(Thread.currentThread().getContextClassLoader());\n+            ClassLoader loader;\n+            if (!WildFlySecurityManager.isChecking()) {\n+                loader = Thread.currentThread().getContextClassLoader();\n+            } else {\n+                loader = AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n+                    @Override\n+                    public ClassLoader run() {\n+                        return Thread.currentThread().getContextClassLoader();\n+                    }\n+                });\n+            }\n+            return TRACERS.get(loader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY0ODY1Ng=="}, "originalCommit": {"oid": "928e4841536de648da6c2cff6dcb28a7e5693578"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODE5OTczOnYy", "diffSide": "RIGHT", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MjoxOVrOGAI6fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MjoxOVrOGAI6fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc5OTIyOA==", "bodyText": "This entire block can be removed and instead just call WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402799228", "createdAt": "2020-04-03T07:52:19Z", "author": {"login": "darranl"}, "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -42,7 +45,18 @@ public static void registerApplicationTracer(ClassLoader classLoader, Tracer tra\n \n     public void registerTracerBean(@Observes AfterBeanDiscovery abd) {\n         abd.addBean().addTransitiveTypeClosure(Tracer.class).produceWith(i -> {\n-            return TRACERS.get(Thread.currentThread().getContextClassLoader());\n+            ClassLoader loader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33cd9c5d265d1b3a9232caa1393b2b11e7e4398"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODIwNTk5OnYy", "diffSide": "RIGHT", "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MzozMVrOGAI91g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNzo1MzozMVrOGAI91g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjgwMDA4Ng==", "bodyText": "This entire block can be removed and instead just call WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()\nAdditionally with this current approach two new classes needed to be defined and loaded to achieve a common task.", "url": "https://github.com/wildfly/wildfly/pull/13170#discussion_r402800086", "createdAt": "2020-04-03T07:53:31Z", "author": {"login": "darranl"}, "path": "microprofile/opentracing-smallrye/src/main/java/org/wildfly/microprofile/opentracing/smallrye/TracingCDIExtension.java", "diffHunk": "@@ -57,6 +71,17 @@ public void skipTracerBeans(@Observes ProcessAnnotatedType<? extends Tracer> pro\n      * @param bs\n      */\n     public void beforeShutdown(@Observes final BeforeShutdown bs) {\n-        TRACERS.remove(Thread.currentThread().getContextClassLoader());\n+        ClassLoader loader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d33cd9c5d265d1b3a9232caa1393b2b11e7e4398"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3958, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}