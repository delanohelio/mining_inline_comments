{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwODUxMTcz", "number": 13761, "title": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.", "bodyText": "Adding an admin-only operation to print the data of a broker.\nTesting the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660\nProposal: wildfly/wildfly-proposals#350\nShould be rebased on #13906 when it is merged", "createdAt": "2020-12-02T08:43:53Z", "url": "https://github.com/wildfly/wildfly/pull/13761", "merged": true, "mergeCommit": {"oid": "25626a216b261fda4fc0fda7acff062aae76bffd"}, "closed": true, "closedAt": "2021-02-18T19:04:14Z", "author": {"login": "ehsavoie"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdinXyAABqjQwNjkwMDU0MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd7EJ5kABqjQzNDI2NDMwMTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dbc563fe02356a68b8a54ecca817f8c08110fd1", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/3dbc563fe02356a68b8a54ecca817f8c08110fd1", "committedDate": "2020-12-02T08:43:05Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "9e5feb5329f82f30fc53eee9d71648f61bcdacd0", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/9e5feb5329f82f30fc53eee9d71648f61bcdacd0", "committedDate": "2020-12-03T18:22:19Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e5feb5329f82f30fc53eee9d71648f61bcdacd0", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/9e5feb5329f82f30fc53eee9d71648f61bcdacd0", "committedDate": "2020-12-03T18:22:19Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "6d606c94ee8ff4320d7541cbc42f50287b801150", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/6d606c94ee8ff4320d7541cbc42f50287b801150", "committedDate": "2020-12-08T14:44:44Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d606c94ee8ff4320d7541cbc42f50287b801150", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/6d606c94ee8ff4320d7541cbc42f50287b801150", "committedDate": "2020-12-08T14:44:44Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "45c91f846ed2ec704b8e14ece1421ac3e0f838dd", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/45c91f846ed2ec704b8e14ece1421ac3e0f838dd", "committedDate": "2021-01-22T17:57:49Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45c91f846ed2ec704b8e14ece1421ac3e0f838dd", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/45c91f846ed2ec704b8e14ece1421ac3e0f838dd", "committedDate": "2021-01-22T17:57:49Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "7b471f121617dfac30feb4849261bec4071bb535", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/7b471f121617dfac30feb4849261bec4071bb535", "committedDate": "2021-01-25T07:50:33Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b471f121617dfac30feb4849261bec4071bb535", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/7b471f121617dfac30feb4849261bec4071bb535", "committedDate": "2021-01-25T07:50:33Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "73ae18db19becee93959e12b6331511bf4b44948", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/73ae18db19becee93959e12b6331511bf4b44948", "committedDate": "2021-01-25T13:57:37Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNTI1OTMz", "url": "https://github.com/wildfly/wildfly/pull/13761#pullrequestreview-590525933", "createdAt": "2021-02-15T14:31:38Z", "commit": {"oid": "73ae18db19becee93959e12b6331511bf4b44948"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxNDozMTozOFrOIliYFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxNDozMTozOFrOIliYFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjIzMTQ0NA==", "bodyText": "This check is not enough, the test passes even with printData(dataPath, false, false); // ~ secure = false\nbut I guess we want to check the secure info is not printed and that is also described in analysis:\n\n\ncheck that it displays the correct number of total messages and the correct number of message in the queue but doesn't display the queue infos.", "url": "https://github.com/wildfly/wildfly/pull/13761#discussion_r576231444", "createdAt": "2021-02-15T14:31:38Z", "author": {"login": "jbliznak"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/messaging/mgmt/PrintDataTestCase.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/*\n+ * Copyright 2020 JBoss by Red Hat.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.messaging.mgmt;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OUTCOME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUCCESS;\n+import static org.jboss.as.test.shared.ServerReload.executeReloadAndWaitForCompletion;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.DeliveryMode;\n+import javax.jms.Destination;\n+import javax.jms.JMSConsumer;\n+import javax.jms.JMSContext;\n+import javax.jms.JMSException;\n+import javax.jms.TextMessage;\n+import javax.naming.Context;\n+import javax.naming.NamingException;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.Operation;\n+import org.jboss.as.controller.client.OperationMessageHandler;\n+import org.jboss.as.controller.client.OperationResponse;\n+import org.jboss.as.repository.PathUtil;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class PrintDataTestCase {\n+\n+    protected final String jmsQueueName = \"PrintDataTestCase-Queue\";\n+    protected final String jmsQueueLookup = \"jms/\" + jmsQueueName;\n+    private static final Pattern ADDRESS_ID = Pattern.compile(\";userRecordType=44;isUpdate=false;compactCount=0;\"\n+            + \"PersistentAddressBindingEncoding \\\\[id=([0-9]+), name=jms.queue.PrintDataTestCase-Queue, \"\n+            + \"routingTypes=\\\\{ANYCAST\\\\}, autoCreated=false\\\\]\");\n+    private static final Pattern QUEUE_ID = Pattern.compile(\"userRecordType=21;isUpdate=false;compactCount=0;PersistentQueueBindingEncoding \"\n+            + \"\\\\[id=([0-9]+), name=jms.queue.PrintDataTestCase-Queue, address=jms.queue.PrintDataTestCase-Queue, filterString=null, \"\n+            + \"user=null, autoCreated=false, maxConsumers=-1, purgeOnNoConsumers=false, enabled=true, exclusive=false, lastValue=false,\"\n+            + \" lastValueKey=null, nonDestructive=false, consumersBeforeDispatch=0, delayBeforeDispatch=-1, routingType=1, \"\n+            + \"configurationManaged=false, groupRebalance=false, groupRebalancePauseDispatch=false, groupBuckets=-1, groupFirstKey=null, \"\n+            + \"autoDelete=false, autoDeleteDelay=0, autoDeleteMessageCount=0\\\\]\");\n+    private static final Pattern SAFE_QUEUE_COUNT = Pattern.compile(\"queue id [0-9]+,count=1\");\n+\n+    @ContainerResource\n+    private Context remoteContext;\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    protected static void sendMessage(Context ctx, String destinationLookup, String text) throws NamingException, JMSException {\n+        ConnectionFactory cf = (ConnectionFactory) ctx.lookup(\"jms/RemoteConnectionFactory\");\n+        assertNotNull(cf);\n+        Destination destination = (Destination) ctx.lookup(destinationLookup);\n+        assertNotNull(destination);\n+\n+        try (JMSContext context = cf.createContext(\"guest\", \"guest\", JMSContext.AUTO_ACKNOWLEDGE)) {\n+            TextMessage message = context.createTextMessage(text);\n+            message.setJMSDeliveryMode(DeliveryMode.PERSISTENT);\n+            context.createProducer().send(destination, message);\n+        }\n+    }\n+\n+    protected static void receiveMessage(Context ctx, String destinationLookup, boolean expectReceivedMessage, String expectedText) throws NamingException {\n+        ConnectionFactory cf = (ConnectionFactory) ctx.lookup(\"jms/RemoteConnectionFactory\");\n+        assertNotNull(cf);\n+        Destination destination = (Destination) ctx.lookup(destinationLookup);\n+        assertNotNull(destination);\n+\n+        try (JMSContext context = cf.createContext(\"guest\", \"guest\")) {\n+            JMSConsumer consumer = context.createConsumer(destination);\n+            String text = consumer.receiveBody(String.class, TimeoutUtil.adjust(5000));\n+            if (expectReceivedMessage) {\n+                assertNotNull(text);\n+                assertEquals(expectedText, text);\n+            } else {\n+                assertNull(\"should not have received any message\", text);\n+            }\n+        }\n+    }\n+\n+    protected static ModelNode execute(ModelControllerClient client, ModelNode operation) throws Exception {\n+        ModelNode response = client.execute(operation);\n+        boolean success = SUCCESS.equals(response.get(OUTCOME).asString());\n+        if (success) {\n+            return response.get(RESULT);\n+        }\n+        throw new Exception(\"Operation failed\");\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.createJmsQueue(jmsQueueName, \"java:jboss/exported/\" + jmsQueueLookup);\n+        jmsOperations.close();\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        JMSOperations jmsOperations = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        jmsOperations.removeJmsQueue(jmsQueueName);\n+        jmsOperations.close();\n+    }\n+\n+    @Test\n+    public void testPrintFullData() throws Exception {\n+        // send a persistent message\n+        removeAllMessagesFromQueue(jmsQueueName);\n+        String text = \"print-data\";\n+        sendMessage(remoteContext, jmsQueueLookup, text);\n+        Assert.assertEquals(1, countMessagesInQueue(jmsQueueName));\n+\n+        // reload in admin-only mode\n+        executeReloadAndWaitForCompletion(managementClient, true);\n+\n+        // export the journal (must be performed in admin-only mode)\n+        Path dataPath = new File(\"print-data.txt\").toPath();\n+        Files.deleteIfExists(dataPath);\n+        printData(dataPath, false, false);\n+        String addressId = null;\n+        String queueId = null;\n+        boolean inMessages = false;\n+        boolean hasQueueCount = false;\n+        for (String line : Files.readAllLines(dataPath)) {\n+            if (addressId == null) {\n+                Matcher addressMatcher = ADDRESS_ID.matcher(line);\n+                if (addressMatcher.find()) {\n+                    addressId = addressMatcher.group(1);\n+                }\n+            } else {\n+                if (queueId == null) {\n+                    Matcher queueMatcher = QUEUE_ID.matcher(line);\n+                    if (queueMatcher.find()) {\n+                        queueId = queueMatcher.group(1);\n+                    }\n+                } else {\n+                    if (!inMessages) {\n+                        inMessages = \"M E S S A G E S   J O U R N A L\".equals(line);\n+                    } else {\n+                        if (!hasQueueCount) {\n+                            hasQueueCount = (\"queue id \" + queueId + \",count=1\").equals(line);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        Assert.assertNotNull(\"Address Id not found\", addressId);\n+        Assert.assertNotNull(\"Queue Id not found\", queueId);\n+        Assert.assertTrue(\"Should have a message count of 1 for \" + jmsQueueName, hasQueueCount);\n+        Files.deleteIfExists(dataPath);\n+        executeReloadAndWaitForCompletion(managementClient, false);\n+    }\n+\n+    @Test\n+    public void testPrintSafeData() throws Exception {\n+        // send a persistent message\n+        removeAllMessagesFromQueue(jmsQueueName);\n+        String text = \"print-safe-data\";\n+        sendMessage(remoteContext, jmsQueueLookup, text);\n+        Assert.assertEquals(1, countMessagesInQueue(jmsQueueName));\n+\n+        // reload in admin-only mode\n+        executeReloadAndWaitForCompletion(managementClient, true);\n+\n+        // export the journal (must be performed in admin-only mode)\n+        Path dataPath = new File(\"print-safe-data.txt\").toPath();\n+        Files.deleteIfExists(dataPath);\n+        printData(dataPath, true, false);\n+        boolean inMessages = false;\n+        boolean hasQueueCount = false;\n+        for (String line : Files.readAllLines(dataPath)) {\n+            if (!inMessages) {\n+                inMessages = \"M E S S A G E S   J O U R N A L\".equals(line);\n+            } else {\n+                if (!hasQueueCount) {\n+                    hasQueueCount = SAFE_QUEUE_COUNT.matcher(line).find();\n+                }\n+            }\n+        }\n+        Assert.assertTrue(\"Should have a message count of 1 for \" + jmsQueueName, hasQueueCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73ae18db19becee93959e12b6331511bf4b44948"}, "originalPosition": 219}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73ae18db19becee93959e12b6331511bf4b44948", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/73ae18db19becee93959e12b6331511bf4b44948", "committedDate": "2021-01-25T13:57:37Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "37ce5f1502faef61366233b0be7ed551f00e9cb2", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/37ce5f1502faef61366233b0be7ed551f00e9cb2", "committedDate": "2021-02-15T18:00:12Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37ce5f1502faef61366233b0be7ed551f00e9cb2", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/37ce5f1502faef61366233b0be7ed551f00e9cb2", "committedDate": "2021-02-15T18:00:12Z", "message": "[WFLY-6660]:  Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "53bf3d22bf01ce0775700d69e390ee0e399412bb", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/53bf3d22bf01ce0775700d69e390ee0e399412bb", "committedDate": "2021-02-15T18:08:08Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNjkzOTM2", "url": "https://github.com/wildfly/wildfly/pull/13761#pullrequestreview-590693936", "createdAt": "2021-02-15T18:35:55Z", "commit": {"oid": "53bf3d22bf01ce0775700d69e390ee0e399412bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53bf3d22bf01ce0775700d69e390ee0e399412bb", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/53bf3d22bf01ce0775700d69e390ee0e399412bb", "committedDate": "2021-02-15T18:08:08Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "a072d9ca2f2e84d688961570cf7bd912b3988363", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/a072d9ca2f2e84d688961570cf7bd912b3988363", "committedDate": "2021-02-16T08:55:31Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxMDc4NDE5", "url": "https://github.com/wildfly/wildfly/pull/13761#pullrequestreview-591078419", "createdAt": "2021-02-16T10:18:39Z", "commit": {"oid": "a072d9ca2f2e84d688961570cf7bd912b3988363"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd21429fae869ca25a1b7cff6ccfb091d34228fb", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/bd21429fae869ca25a1b7cff6ccfb091d34228fb", "committedDate": "2021-02-17T17:28:42Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a072d9ca2f2e84d688961570cf7bd912b3988363", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/a072d9ca2f2e84d688961570cf7bd912b3988363", "committedDate": "2021-02-16T08:55:31Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}, "afterCommit": {"oid": "bd21429fae869ca25a1b7cff6ccfb091d34228fb", "author": {"user": {"login": "ehsavoie", "name": "Emmanuel Hugonnet"}}, "url": "https://github.com/wildfly/wildfly/commit/bd21429fae869ca25a1b7cff6ccfb091d34228fb", "committedDate": "2021-02-17T17:28:42Z", "message": "[WFLY-6660]: Allow to dump Artemis journal to file using WildFly Management API.\n\n* Adding an admin-only operation to print the data of a broker.\n* Testing the data printed in safe and full mode.\n\nJira: https://issues.redhat.com/browse/WFLY-6660"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3769, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}