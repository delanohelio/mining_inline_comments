{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTgxOTk5", "number": 13379, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMToyN1rOEHqQUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0ODo0MVrOEHuYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY3NzkyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_elytron/Elytron_Subsystem.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMToyN1rOGnJw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MTozMFrOGnqRJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNzYxNg==", "bodyText": "This should be reworded slightly since it's the principal that is being adjusted (not the principal transformer)", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443707616", "createdAt": "2020-06-22T17:11:27Z", "author": {"login": "fjuma"}, "path": "docs/src/main/asciidoc/_elytron/Elytron_Subsystem.adoc", "diffHunk": "@@ -137,6 +137,9 @@ using a ServiceLoader\n where the principal transformer is an aggregation of other principal\n transformers.\n \n+|case-principal-transformer |A principal transformer definition where\n+the principal transformer is adjusted to upper or lower case.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MDE2NQ==", "bodyText": "fixed", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r444240165", "createdAt": "2020-06-23T13:51:30Z", "author": {"login": "SoniaZaldana"}, "path": "docs/src/main/asciidoc/_elytron/Elytron_Subsystem.adoc", "diffHunk": "@@ -137,6 +137,9 @@ using a ServiceLoader\n where the principal transformer is an aggregation of other principal\n transformers.\n \n+|case-principal-transformer |A principal transformer definition where\n+the principal transformer is adjusted to upper or lower case.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwNzYxNg=="}, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY4MTA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMjoxOFrOGnJy3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MTo0NVrOGnqR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODEyNA==", "bodyText": "false", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443708124", "createdAt": "2020-06-22T17:12:18Z", "author": {"login": "fjuma"}, "path": "docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc", "diffHunk": "@@ -2707,6 +2707,43 @@ default:\n /subsystem=elytron/policy=policy-provider-a:add(custom-policy=\\[{name=policy-provider-a, class-name=MyPolicyProviderA, module=x.y.z}\\])\n ----\n \n+[[create-an-elytron-case-principal-transformer]]\n+=== Create an Elytron Case Principal Transformer\n+\n+Principal transformers can take a name and map it to another representation of the name or perform\n+some normalisation. A ``case-principal-transformer`` converts a principal to upper or lower case.\n+As an example, we might want to convert our principal to upper case if the identities in our realm\n+are stored in upper case.\n+\n+Adding a ``case-principal-transformer`` that converts a principal to upper/lower case takes the\n+general form:\n+\n+[source,options=\"nowrap]\n+----\n+/subsystem=elytron/case-principal-transformer=transformerName:add(upper-case=\"...\")\n+----\n+\n+In particular, a ``case-principal-transformer`` has the following attribute:\n+\n+* ``upper-case`` - A boolean value to indicate whether the principal should be converted to upper case.\n+Indicating false for this attribute converts the principal to lower case.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MDM1NQ==", "bodyText": "fixed", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r444240355", "createdAt": "2020-06-23T13:51:45Z", "author": {"login": "SoniaZaldana"}, "path": "docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc", "diffHunk": "@@ -2707,6 +2707,43 @@ default:\n /subsystem=elytron/policy=policy-provider-a:add(custom-policy=\\[{name=policy-provider-a, class-name=MyPolicyProviderA, module=x.y.z}\\])\n ----\n \n+[[create-an-elytron-case-principal-transformer]]\n+=== Create an Elytron Case Principal Transformer\n+\n+Principal transformers can take a name and map it to another representation of the name or perform\n+some normalisation. A ``case-principal-transformer`` converts a principal to upper or lower case.\n+As an example, we might want to convert our principal to upper case if the identities in our realm\n+are stored in upper case.\n+\n+Adding a ``case-principal-transformer`` that converts a principal to upper/lower case takes the\n+general form:\n+\n+[source,options=\"nowrap]\n+----\n+/subsystem=elytron/case-principal-transformer=transformerName:add(upper-case=\"...\")\n+----\n+\n+In particular, a ``case-principal-transformer`` has the following attribute:\n+\n+* ``upper-case`` - A boolean value to indicate whether the principal should be converted to upper case.\n+Indicating false for this attribute converts the principal to lower case.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODEyNA=="}, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY4MjQzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxMjo0MlrOGnJztQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MTo1MVrOGnqSMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODM0MQ==", "bodyText": "true", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443708341", "createdAt": "2020-06-22T17:12:42Z", "author": {"login": "fjuma"}, "path": "docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc", "diffHunk": "@@ -2707,6 +2707,43 @@ default:\n /subsystem=elytron/policy=policy-provider-a:add(custom-policy=\\[{name=policy-provider-a, class-name=MyPolicyProviderA, module=x.y.z}\\])\n ----\n \n+[[create-an-elytron-case-principal-transformer]]\n+=== Create an Elytron Case Principal Transformer\n+\n+Principal transformers can take a name and map it to another representation of the name or perform\n+some normalisation. A ``case-principal-transformer`` converts a principal to upper or lower case.\n+As an example, we might want to convert our principal to upper case if the identities in our realm\n+are stored in upper case.\n+\n+Adding a ``case-principal-transformer`` that converts a principal to upper/lower case takes the\n+general form:\n+\n+[source,options=\"nowrap]\n+----\n+/subsystem=elytron/case-principal-transformer=transformerName:add(upper-case=\"...\")\n+----\n+\n+In particular, a ``case-principal-transformer`` has the following attribute:\n+\n+* ``upper-case`` - A boolean value to indicate whether the principal should be converted to upper case.\n+Indicating false for this attribute converts the principal to lower case.\n+\n+For example, the following ``case-principal-transformer`` could be configured to specify that\n+a principal should be transformed to lower case:\n+\n+[source,options=\"nowrap\"]\n+----\n+/subsystem=elytron/case-principal-transformer=transformer1:add(upper-case=\"false\")\n+----\n+\n+On the other hand, a ``case-principal-transformer`` could be configured by omitting the\n+``upper-case`` attribute, which is then set to true by default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MDQzNQ==", "bodyText": "fixed", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r444240435", "createdAt": "2020-06-23T13:51:51Z", "author": {"login": "SoniaZaldana"}, "path": "docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc", "diffHunk": "@@ -2707,6 +2707,43 @@ default:\n /subsystem=elytron/policy=policy-provider-a:add(custom-policy=\\[{name=policy-provider-a, class-name=MyPolicyProviderA, module=x.y.z}\\])\n ----\n \n+[[create-an-elytron-case-principal-transformer]]\n+=== Create an Elytron Case Principal Transformer\n+\n+Principal transformers can take a name and map it to another representation of the name or perform\n+some normalisation. A ``case-principal-transformer`` converts a principal to upper or lower case.\n+As an example, we might want to convert our principal to upper case if the identities in our realm\n+are stored in upper case.\n+\n+Adding a ``case-principal-transformer`` that converts a principal to upper/lower case takes the\n+general form:\n+\n+[source,options=\"nowrap]\n+----\n+/subsystem=elytron/case-principal-transformer=transformerName:add(upper-case=\"...\")\n+----\n+\n+In particular, a ``case-principal-transformer`` has the following attribute:\n+\n+* ``upper-case`` - A boolean value to indicate whether the principal should be converted to upper case.\n+Indicating false for this attribute converts the principal to lower case.\n+\n+For example, the following ``case-principal-transformer`` could be configured to specify that\n+a principal should be transformed to lower case:\n+\n+[source,options=\"nowrap\"]\n+----\n+/subsystem=elytron/case-principal-transformer=transformer1:add(upper-case=\"false\")\n+----\n+\n+On the other hand, a ``case-principal-transformer`` could be configured by omitting the\n+``upper-case`` attribute, which is then set to true by default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcwODM0MQ=="}, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDY5MjQ2OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoxNjowMlrOGnJ6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDoxODoyOVrOGnPg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDAzOA==", "bodyText": "Instead of removing the principal transformer, you could make use of a second security domain that doesn't have a principal transformer configured", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443710038", "createdAt": "2020-06-22T17:16:02Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.test.integration.elytron.principaltransformers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.OperateOnDeployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.api.ServerSetupTask;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.jboss.as.test.integration.security.common.Utils;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleSecuredServlet;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleServlet;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.test.security.common.elytron.PropertyFileBasedDomain;\n+\n+\n+/**\n+ * Test case for 'case-principal-transformer' Elytron subsystem resource.\n+ *\n+ * @author Sonia Zaldana Calles <szaldana@redhat.com>\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup({CasePrincipalTransformerTestCase.SetupTask.class})\n+public class CasePrincipalTransformerTestCase {\n+\n+    private static final String DEP_SECURITY_DOMAIN = \"case-principal-domain\";\n+    private static final String USER = \"USER1\";\n+    private static final String PASSWORD = \"password1\";\n+    private static final String ROLE = \"JBossAdmin\";\n+    @ArquillianResource\n+    private static ManagementClient client;\n+\n+    @Deployment(name = DEP_SECURITY_DOMAIN)\n+    public static WebArchive createDeployment() {\n+        final WebArchive war = ShrinkWrap.create(WebArchive.class, DEP_SECURITY_DOMAIN + \".war\");\n+        war.addClasses(SimpleServlet.class);\n+        war.addClasses(SimpleSecuredServlet.class);\n+        war.addAsWebInfResource(ConstantPrincipalTransformerTestCase.class.getPackage(), \"principal-transformer-web.xml\", \"web.xml\");\n+        war.addAsWebInfResource(Utils.getJBossWebXmlAsset(DEP_SECURITY_DOMAIN), \"jboss-web.xml\");\n+        return war;\n+    }\n+\n+    /**\n+     * Test whether name of user passed to security domain is adjusted into upper case with\n+     * the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingExistingUser(@ArquillianResource URL webAppURL) throws Exception {\n+        URL url = prepareUrl(webAppURL);\n+        Utils.makeCallWithBasicAuthn(url, \"user1\", PASSWORD, SC_OK); // \"USER1\" is stored in the realm\n+    }\n+\n+    /**\n+     * Test checks that authentication fails for incorrect password and incorrect user if 'case-principal-transformer'\n+     * is used.\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingNonexistentUser(@ArquillianResource URL webAppURL) throws Exception {\n+        URL url = prepareUrl(webAppURL);\n+        Utils.makeCallWithBasicAuthn(url, \"wrongUser\", PASSWORD, SC_UNAUTHORIZED);\n+    }\n+\n+    /**\n+     * Tests whether authentication fails when the principal transformer is not configured\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingExistingUserWithoutPrincipalTransformer(@ArquillianResource URL webAppURL) throws Exception {\n+        SetupTask.removePrincipalTransformer(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgwMTgyMA==", "bodyText": "I pushed a new commit where I used different domains to tackle the cases where the principal transformer is configured to adjust to lower case and a domain with no principal transformer. I pushed this as a separate commit just so in case I need to roll back to the previous state. Let me know if the new commit incorporates the feedback appropriately :)", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443801820", "createdAt": "2020-06-22T20:18:29Z", "author": {"login": "SoniaZaldana"}, "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.test.integration.elytron.principaltransformers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.OperateOnDeployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.api.ServerSetupTask;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.jboss.as.test.integration.security.common.Utils;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleSecuredServlet;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleServlet;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.test.security.common.elytron.PropertyFileBasedDomain;\n+\n+\n+/**\n+ * Test case for 'case-principal-transformer' Elytron subsystem resource.\n+ *\n+ * @author Sonia Zaldana Calles <szaldana@redhat.com>\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup({CasePrincipalTransformerTestCase.SetupTask.class})\n+public class CasePrincipalTransformerTestCase {\n+\n+    private static final String DEP_SECURITY_DOMAIN = \"case-principal-domain\";\n+    private static final String USER = \"USER1\";\n+    private static final String PASSWORD = \"password1\";\n+    private static final String ROLE = \"JBossAdmin\";\n+    @ArquillianResource\n+    private static ManagementClient client;\n+\n+    @Deployment(name = DEP_SECURITY_DOMAIN)\n+    public static WebArchive createDeployment() {\n+        final WebArchive war = ShrinkWrap.create(WebArchive.class, DEP_SECURITY_DOMAIN + \".war\");\n+        war.addClasses(SimpleServlet.class);\n+        war.addClasses(SimpleSecuredServlet.class);\n+        war.addAsWebInfResource(ConstantPrincipalTransformerTestCase.class.getPackage(), \"principal-transformer-web.xml\", \"web.xml\");\n+        war.addAsWebInfResource(Utils.getJBossWebXmlAsset(DEP_SECURITY_DOMAIN), \"jboss-web.xml\");\n+        return war;\n+    }\n+\n+    /**\n+     * Test whether name of user passed to security domain is adjusted into upper case with\n+     * the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingExistingUser(@ArquillianResource URL webAppURL) throws Exception {\n+        URL url = prepareUrl(webAppURL);\n+        Utils.makeCallWithBasicAuthn(url, \"user1\", PASSWORD, SC_OK); // \"USER1\" is stored in the realm\n+    }\n+\n+    /**\n+     * Test checks that authentication fails for incorrect password and incorrect user if 'case-principal-transformer'\n+     * is used.\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingNonexistentUser(@ArquillianResource URL webAppURL) throws Exception {\n+        URL url = prepareUrl(webAppURL);\n+        Utils.makeCallWithBasicAuthn(url, \"wrongUser\", PASSWORD, SC_UNAUTHORIZED);\n+    }\n+\n+    /**\n+     * Tests whether authentication fails when the principal transformer is not configured\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingExistingUserWithoutPrincipalTransformer(@ArquillianResource URL webAppURL) throws Exception {\n+        SetupTask.removePrincipalTransformer(client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMDAzOA=="}, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDcxNDU2OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNzoyMjoyOVrOGnKITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MjowMFrOGnqSvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMzYxMg==", "bodyText": "It would also be good to have a test that makes use of a case-principal-transformer that sets upper-case to false.\nJust a minor comment but it would also be good to give these tests names that indicate what the test is checking - e.g., testCasePrincipalTransformerUpperCase", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443713612", "createdAt": "2020-06-22T17:22:29Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.test.integration.elytron.principaltransformers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.OperateOnDeployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.api.ServerSetupTask;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.jboss.as.test.integration.security.common.Utils;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleSecuredServlet;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleServlet;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.test.security.common.elytron.PropertyFileBasedDomain;\n+\n+\n+/**\n+ * Test case for 'case-principal-transformer' Elytron subsystem resource.\n+ *\n+ * @author Sonia Zaldana Calles <szaldana@redhat.com>\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup({CasePrincipalTransformerTestCase.SetupTask.class})\n+public class CasePrincipalTransformerTestCase {\n+\n+    private static final String DEP_SECURITY_DOMAIN = \"case-principal-domain\";\n+    private static final String USER = \"USER1\";\n+    private static final String PASSWORD = \"password1\";\n+    private static final String ROLE = \"JBossAdmin\";\n+    @ArquillianResource\n+    private static ManagementClient client;\n+\n+    @Deployment(name = DEP_SECURITY_DOMAIN)\n+    public static WebArchive createDeployment() {\n+        final WebArchive war = ShrinkWrap.create(WebArchive.class, DEP_SECURITY_DOMAIN + \".war\");\n+        war.addClasses(SimpleServlet.class);\n+        war.addClasses(SimpleSecuredServlet.class);\n+        war.addAsWebInfResource(ConstantPrincipalTransformerTestCase.class.getPackage(), \"principal-transformer-web.xml\", \"web.xml\");\n+        war.addAsWebInfResource(Utils.getJBossWebXmlAsset(DEP_SECURITY_DOMAIN), \"jboss-web.xml\");\n+        return war;\n+    }\n+\n+    /**\n+     * Test whether name of user passed to security domain is adjusted into upper case with\n+     * the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingExistingUser(@ArquillianResource URL webAppURL) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MDU3NA==", "bodyText": "fixed", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r444240574", "createdAt": "2020-06-23T13:52:00Z", "author": {"login": "SoniaZaldana"}, "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.test.integration.elytron.principaltransformers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static javax.servlet.http.HttpServletResponse.SC_UNAUTHORIZED;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.OperateOnDeployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.api.ServerSetupTask;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.test.integration.management.util.CLIWrapper;\n+import org.jboss.as.test.integration.security.common.Utils;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleSecuredServlet;\n+import org.jboss.as.test.integration.security.common.servlets.SimpleServlet;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.WebArchive;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.wildfly.test.security.common.elytron.PropertyFileBasedDomain;\n+\n+\n+/**\n+ * Test case for 'case-principal-transformer' Elytron subsystem resource.\n+ *\n+ * @author Sonia Zaldana Calles <szaldana@redhat.com>\n+ */\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup({CasePrincipalTransformerTestCase.SetupTask.class})\n+public class CasePrincipalTransformerTestCase {\n+\n+    private static final String DEP_SECURITY_DOMAIN = \"case-principal-domain\";\n+    private static final String USER = \"USER1\";\n+    private static final String PASSWORD = \"password1\";\n+    private static final String ROLE = \"JBossAdmin\";\n+    @ArquillianResource\n+    private static ManagementClient client;\n+\n+    @Deployment(name = DEP_SECURITY_DOMAIN)\n+    public static WebArchive createDeployment() {\n+        final WebArchive war = ShrinkWrap.create(WebArchive.class, DEP_SECURITY_DOMAIN + \".war\");\n+        war.addClasses(SimpleServlet.class);\n+        war.addClasses(SimpleSecuredServlet.class);\n+        war.addAsWebInfResource(ConstantPrincipalTransformerTestCase.class.getPackage(), \"principal-transformer-web.xml\", \"web.xml\");\n+        war.addAsWebInfResource(Utils.getJBossWebXmlAsset(DEP_SECURITY_DOMAIN), \"jboss-web.xml\");\n+        return war;\n+    }\n+\n+    /**\n+     * Test whether name of user passed to security domain is adjusted into upper case with\n+     * the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n+     */\n+    @Test\n+    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n+    public void testPassingExistingUser(@ArquillianResource URL webAppURL) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcxMzYxMg=="}, "originalCommit": {"oid": "ef1cf543431a25d5ecadfe5a4d124edb8697a69d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTM1NDE0OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMDo0ODo0MVrOGnQd7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMzo1MjozOFrOGnqUjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNzQ1Mg==", "bodyText": "To simplify things slightly, what do you think about having a helper method that creates a domain, optionally adds a transformer to that domain, and adds the application security domain mapping to the Undertow config? That way, instead of calling each of these helper methods various times, we could just call that single method for each domain?", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r443817452", "createdAt": "2020-06-22T20:48:41Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "diffHunk": "@@ -78,104 +99,154 @@ public static WebArchive createDeployment() {\n      * the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n      */\n     @Test\n-    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n-    public void testPassingExistingUser(@ArquillianResource URL webAppURL) throws Exception {\n+    @OperateOnDeployment(UPPER_CASE_SECURITY_DOMAIN)\n+    public void testPassingExistingUserUpperCase(@ArquillianResource URL webAppURL) throws Exception {\n         URL url = prepareUrl(webAppURL);\n-        Utils.makeCallWithBasicAuthn(url, \"user1\", PASSWORD, SC_OK); // \"USER1\" is stored in the realm\n+        Utils.makeCallWithBasicAuthn(url, LOWER_USER, PASSWORD, SC_OK); // UPPER_CASE (\"USER1\") is stored in the realm\n     }\n \n     /**\n-     * Test checks that authentication fails for incorrect password and incorrect user if 'case-principal-transformer'\n-     * is used.\n+     * Test checks that authentication fails for incorrect password and incorrect user\n+     * if upper case 'case-principal-transformer is used.\n      */\n     @Test\n-    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n-    public void testPassingNonexistentUser(@ArquillianResource URL webAppURL) throws Exception {\n+    @OperateOnDeployment(UPPER_CASE_SECURITY_DOMAIN)\n+    public void testPassingNonExistingUserWithUpperCase(@ArquillianResource URL webAppURL) throws Exception {\n         URL url = prepareUrl(webAppURL);\n         Utils.makeCallWithBasicAuthn(url, \"wrongUser\", PASSWORD, SC_UNAUTHORIZED);\n     }\n \n     /**\n-     * Tests whether authentication fails when the principal transformer is not configured\n+     * Tests whether authentication fails when the principal transformer is not configured in the domain.\n      */\n-    @Test\n-    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n-    public void testPassingExistingUserWithoutPrincipalTransformer(@ArquillianResource URL webAppURL) throws Exception {\n-        SetupTask.removePrincipalTransformer(client);\n-        URL url = prepareUrl(webAppURL);\n-        Utils.makeCallWithBasicAuthn(url,\"user1\", PASSWORD, SC_UNAUTHORIZED); // \"USER1\" is in the realm\n-        SetupTask.addPrincipalTransformer(client);\n-    }\n+     @Test\n+     @OperateOnDeployment(WITHOUT_TRANSFORMER_SECURITY_DOMAIN)\n+     public void testPassingExistingUserWithoutTransformer(@ArquillianResource URL webAppUrl) throws Exception {\n+         URL url = prepareUrl(webAppUrl);\n+         Utils.makeCallWithBasicAuthn(url, LOWER_USER, PASSWORD, SC_UNAUTHORIZED); // UPPER_USER (\"USER1\") is in the realm\n+     }\n+\n+    /**\n+     *  Test whether name of user passed to security domain is adjusted into lower case with\n+     *  the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n+     */\n+     @Test\n+     @OperateOnDeployment(LOWER_CASE_SECURITY_DOMAIN)\n+     public void testPassingExistingUserWithLowerCase(@ArquillianResource URL webAppUrl) throws Exception {\n+         URL url = prepareUrl(webAppUrl);\n+         Utils.makeCallWithBasicAuthn(url, UPPER_USER, PASSWORD, SC_OK); // LOWER_USER (\"user1\") is in the realm\n+     }\n+\n \n     private URL prepareUrl(URL url) throws MalformedURLException {\n         return new URL(url.toExternalForm() + SimpleSecuredServlet.SERVLET_PATH.substring(1));\n     }\n \n     static class SetupTask implements ServerSetupTask {\n \n-        private static final String ELYTRON_SECURITY = \"elytronDomain\";\n-        private static final String PRINCIPAL_TRANSFORMER = \"transformer\";\n+        private static final String UPPER_TRANSFORMER_DOMAIN_NAME = \"withUpperTransformerDomain\";\n+        private static final String LOWER_TRANSFORMER_DOMAIN_NAME = \"withLowerTransformerDomain\";\n+        private static final String WITHOUT_TRANSFORMER_DOMAIN_NAME = \"withoutTransformerDomain\";\n+        private static final String UPPER_PRINCIPAL_TRANSFORMER = \"upperTransformer\";\n+        private static final String LOWER_PRINCIPAL_TRANSFORMER = \"lowerTransformer\";\n         private static final String PREDEFINED_HTTP_SERVER_MECHANISM_FACTORY = \"global\";\n \n-        PropertyFileBasedDomain domain;\n-\n+        PropertyFileBasedDomain domainWithUpperTransformer;\n+        PropertyFileBasedDomain domainWithLowerTransformer;\n+        PropertyFileBasedDomain domainWithoutTransformer;\n \n         @Override\n         public void setup(ManagementClient managementClient, String containerId) throws Exception {\n-            client = managementClient;\n             try (CLIWrapper cli = new CLIWrapper(true)) {\n-                domain = PropertyFileBasedDomain.builder().withName(ELYTRON_SECURITY)\n-                        .withUser(USER, PASSWORD, ROLE)\n-                        .build();\n-                domain.create(cli);\n-                cli.sendLine(String.format(\n-                        \"/subsystem=elytron/case-principal-transformer=%s:add(upper-case=%s)\",\n-                        PRINCIPAL_TRANSFORMER, true));\n-                cli.sendLine(String.format(\n-                        \"/subsystem=elytron/security-domain=%s:write-attribute(name=realms[0].principal-transformer,value=%s)\",\n-                        ELYTRON_SECURITY, PRINCIPAL_TRANSFORMER));\n-                cli.sendLine(String.format(\n-                        \"/subsystem=elytron/http-authentication-factory=%1$s:add(http-server-mechanism-factory=%2$s,security-domain=%1$s,\"\n-                                + \"mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=\\\"%1$s\\\"}]}])\",\n-                        ELYTRON_SECURITY, PREDEFINED_HTTP_SERVER_MECHANISM_FACTORY));\n-                cli.sendLine(String.format(\n-                        \"/subsystem=undertow/application-security-domain=%s:add(http-authentication-factory=%s)\",\n-                        DEP_SECURITY_DOMAIN, ELYTRON_SECURITY));\n+                // Create all 3 testing domains\n+                domainWithUpperTransformer = createDomain(cli, UPPER_TRANSFORMER_DOMAIN_NAME, UPPER_USER, PASSWORD, ROLE);\n+                domainWithLowerTransformer = createDomain(cli, LOWER_TRANSFORMER_DOMAIN_NAME, LOWER_USER, PASSWORD, ROLE);\n+                domainWithoutTransformer = createDomain(cli, WITHOUT_TRANSFORMER_DOMAIN_NAME, UPPER_USER, PASSWORD, ROLE);\n+\n+                // Create upper and lower case transformers\n+                createCasePrincipalTransformer(cli, UPPER_PRINCIPAL_TRANSFORMER, true);\n+                createCasePrincipalTransformer(cli, LOWER_PRINCIPAL_TRANSFORMER, false);\n+\n+                // Add transformers to corresponding domains\n+                addTransformerToDomain(cli, UPPER_TRANSFORMER_DOMAIN_NAME, UPPER_PRINCIPAL_TRANSFORMER);\n+                addTransformerToDomain(cli, LOWER_TRANSFORMER_DOMAIN_NAME, LOWER_PRINCIPAL_TRANSFORMER);\n+\n+                addHTTPAuthenticationFactory(cli, UPPER_TRANSFORMER_DOMAIN_NAME);\n+                addHTTPAuthenticationFactory(cli, LOWER_TRANSFORMER_DOMAIN_NAME);\n+                addHTTPAuthenticationFactory(cli, WITHOUT_TRANSFORMER_DOMAIN_NAME);\n+\n+                addSecurityDomainToUndertow(cli, UPPER_CASE_SECURITY_DOMAIN, UPPER_TRANSFORMER_DOMAIN_NAME);\n+                addSecurityDomainToUndertow(cli, WITHOUT_TRANSFORMER_SECURITY_DOMAIN, WITHOUT_TRANSFORMER_DOMAIN_NAME);\n+                addSecurityDomainToUndertow(cli, LOWER_CASE_SECURITY_DOMAIN, LOWER_TRANSFORMER_DOMAIN_NAME);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "639b118f49e0b34c7a54f650e7ad84cd5994e5bf"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0MTAzOA==", "bodyText": "Thanks for the feedback! I refactored everything into one method in the latest commit", "url": "https://github.com/wildfly/wildfly/pull/13379#discussion_r444241038", "createdAt": "2020-06-23T13:52:38Z", "author": {"login": "SoniaZaldana"}, "path": "testsuite/integration/elytron/src/test/java/org/wildfly/test/integration/elytron/principaltransformers/CasePrincipalTransformerTestCase.java", "diffHunk": "@@ -78,104 +99,154 @@ public static WebArchive createDeployment() {\n      * the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n      */\n     @Test\n-    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n-    public void testPassingExistingUser(@ArquillianResource URL webAppURL) throws Exception {\n+    @OperateOnDeployment(UPPER_CASE_SECURITY_DOMAIN)\n+    public void testPassingExistingUserUpperCase(@ArquillianResource URL webAppURL) throws Exception {\n         URL url = prepareUrl(webAppURL);\n-        Utils.makeCallWithBasicAuthn(url, \"user1\", PASSWORD, SC_OK); // \"USER1\" is stored in the realm\n+        Utils.makeCallWithBasicAuthn(url, LOWER_USER, PASSWORD, SC_OK); // UPPER_CASE (\"USER1\") is stored in the realm\n     }\n \n     /**\n-     * Test checks that authentication fails for incorrect password and incorrect user if 'case-principal-transformer'\n-     * is used.\n+     * Test checks that authentication fails for incorrect password and incorrect user\n+     * if upper case 'case-principal-transformer is used.\n      */\n     @Test\n-    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n-    public void testPassingNonexistentUser(@ArquillianResource URL webAppURL) throws Exception {\n+    @OperateOnDeployment(UPPER_CASE_SECURITY_DOMAIN)\n+    public void testPassingNonExistingUserWithUpperCase(@ArquillianResource URL webAppURL) throws Exception {\n         URL url = prepareUrl(webAppURL);\n         Utils.makeCallWithBasicAuthn(url, \"wrongUser\", PASSWORD, SC_UNAUTHORIZED);\n     }\n \n     /**\n-     * Tests whether authentication fails when the principal transformer is not configured\n+     * Tests whether authentication fails when the principal transformer is not configured in the domain.\n      */\n-    @Test\n-    @OperateOnDeployment(DEP_SECURITY_DOMAIN)\n-    public void testPassingExistingUserWithoutPrincipalTransformer(@ArquillianResource URL webAppURL) throws Exception {\n-        SetupTask.removePrincipalTransformer(client);\n-        URL url = prepareUrl(webAppURL);\n-        Utils.makeCallWithBasicAuthn(url,\"user1\", PASSWORD, SC_UNAUTHORIZED); // \"USER1\" is in the realm\n-        SetupTask.addPrincipalTransformer(client);\n-    }\n+     @Test\n+     @OperateOnDeployment(WITHOUT_TRANSFORMER_SECURITY_DOMAIN)\n+     public void testPassingExistingUserWithoutTransformer(@ArquillianResource URL webAppUrl) throws Exception {\n+         URL url = prepareUrl(webAppUrl);\n+         Utils.makeCallWithBasicAuthn(url, LOWER_USER, PASSWORD, SC_UNAUTHORIZED); // UPPER_USER (\"USER1\") is in the realm\n+     }\n+\n+    /**\n+     *  Test whether name of user passed to security domain is adjusted into lower case with\n+     *  the 'case-principal-transformer'. Test also checks that authentication passes for correct password.\n+     */\n+     @Test\n+     @OperateOnDeployment(LOWER_CASE_SECURITY_DOMAIN)\n+     public void testPassingExistingUserWithLowerCase(@ArquillianResource URL webAppUrl) throws Exception {\n+         URL url = prepareUrl(webAppUrl);\n+         Utils.makeCallWithBasicAuthn(url, UPPER_USER, PASSWORD, SC_OK); // LOWER_USER (\"user1\") is in the realm\n+     }\n+\n \n     private URL prepareUrl(URL url) throws MalformedURLException {\n         return new URL(url.toExternalForm() + SimpleSecuredServlet.SERVLET_PATH.substring(1));\n     }\n \n     static class SetupTask implements ServerSetupTask {\n \n-        private static final String ELYTRON_SECURITY = \"elytronDomain\";\n-        private static final String PRINCIPAL_TRANSFORMER = \"transformer\";\n+        private static final String UPPER_TRANSFORMER_DOMAIN_NAME = \"withUpperTransformerDomain\";\n+        private static final String LOWER_TRANSFORMER_DOMAIN_NAME = \"withLowerTransformerDomain\";\n+        private static final String WITHOUT_TRANSFORMER_DOMAIN_NAME = \"withoutTransformerDomain\";\n+        private static final String UPPER_PRINCIPAL_TRANSFORMER = \"upperTransformer\";\n+        private static final String LOWER_PRINCIPAL_TRANSFORMER = \"lowerTransformer\";\n         private static final String PREDEFINED_HTTP_SERVER_MECHANISM_FACTORY = \"global\";\n \n-        PropertyFileBasedDomain domain;\n-\n+        PropertyFileBasedDomain domainWithUpperTransformer;\n+        PropertyFileBasedDomain domainWithLowerTransformer;\n+        PropertyFileBasedDomain domainWithoutTransformer;\n \n         @Override\n         public void setup(ManagementClient managementClient, String containerId) throws Exception {\n-            client = managementClient;\n             try (CLIWrapper cli = new CLIWrapper(true)) {\n-                domain = PropertyFileBasedDomain.builder().withName(ELYTRON_SECURITY)\n-                        .withUser(USER, PASSWORD, ROLE)\n-                        .build();\n-                domain.create(cli);\n-                cli.sendLine(String.format(\n-                        \"/subsystem=elytron/case-principal-transformer=%s:add(upper-case=%s)\",\n-                        PRINCIPAL_TRANSFORMER, true));\n-                cli.sendLine(String.format(\n-                        \"/subsystem=elytron/security-domain=%s:write-attribute(name=realms[0].principal-transformer,value=%s)\",\n-                        ELYTRON_SECURITY, PRINCIPAL_TRANSFORMER));\n-                cli.sendLine(String.format(\n-                        \"/subsystem=elytron/http-authentication-factory=%1$s:add(http-server-mechanism-factory=%2$s,security-domain=%1$s,\"\n-                                + \"mechanism-configurations=[{mechanism-name=BASIC,mechanism-realm-configurations=[{realm-name=\\\"%1$s\\\"}]}])\",\n-                        ELYTRON_SECURITY, PREDEFINED_HTTP_SERVER_MECHANISM_FACTORY));\n-                cli.sendLine(String.format(\n-                        \"/subsystem=undertow/application-security-domain=%s:add(http-authentication-factory=%s)\",\n-                        DEP_SECURITY_DOMAIN, ELYTRON_SECURITY));\n+                // Create all 3 testing domains\n+                domainWithUpperTransformer = createDomain(cli, UPPER_TRANSFORMER_DOMAIN_NAME, UPPER_USER, PASSWORD, ROLE);\n+                domainWithLowerTransformer = createDomain(cli, LOWER_TRANSFORMER_DOMAIN_NAME, LOWER_USER, PASSWORD, ROLE);\n+                domainWithoutTransformer = createDomain(cli, WITHOUT_TRANSFORMER_DOMAIN_NAME, UPPER_USER, PASSWORD, ROLE);\n+\n+                // Create upper and lower case transformers\n+                createCasePrincipalTransformer(cli, UPPER_PRINCIPAL_TRANSFORMER, true);\n+                createCasePrincipalTransformer(cli, LOWER_PRINCIPAL_TRANSFORMER, false);\n+\n+                // Add transformers to corresponding domains\n+                addTransformerToDomain(cli, UPPER_TRANSFORMER_DOMAIN_NAME, UPPER_PRINCIPAL_TRANSFORMER);\n+                addTransformerToDomain(cli, LOWER_TRANSFORMER_DOMAIN_NAME, LOWER_PRINCIPAL_TRANSFORMER);\n+\n+                addHTTPAuthenticationFactory(cli, UPPER_TRANSFORMER_DOMAIN_NAME);\n+                addHTTPAuthenticationFactory(cli, LOWER_TRANSFORMER_DOMAIN_NAME);\n+                addHTTPAuthenticationFactory(cli, WITHOUT_TRANSFORMER_DOMAIN_NAME);\n+\n+                addSecurityDomainToUndertow(cli, UPPER_CASE_SECURITY_DOMAIN, UPPER_TRANSFORMER_DOMAIN_NAME);\n+                addSecurityDomainToUndertow(cli, WITHOUT_TRANSFORMER_SECURITY_DOMAIN, WITHOUT_TRANSFORMER_DOMAIN_NAME);\n+                addSecurityDomainToUndertow(cli, LOWER_CASE_SECURITY_DOMAIN, LOWER_TRANSFORMER_DOMAIN_NAME);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgxNzQ1Mg=="}, "originalCommit": {"oid": "639b118f49e0b34c7a54f650e7ad84cd5994e5bf"}, "originalPosition": 171}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4290, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}