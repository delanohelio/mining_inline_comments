{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNTg3NTA5", "number": 13504, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNjo1M1rOEcmgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNjo1M1rOEcmgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDI2NDU2OnYy", "diffSide": "RIGHT", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNDoyNjo1M1rOHHOx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzozMTo0MlrOHHWeCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NDIzNg==", "bodyText": "@bstansberry it's probably a stupid question, but is there a risk of registering the metric twice if the state flips to RUNNING after listener is added but before the condition?", "url": "https://github.com/wildfly/wildfly/pull/13504#discussion_r477344236", "createdAt": "2020-08-26T14:26:53Z", "author": {"login": "spyrkob"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java", "diffHunk": "@@ -88,6 +94,26 @@ public MetricRegistration collectResourceMetrics(final Resource resource,\n                                                      Function<PathAddress, PathAddress> resourceAddressResolver) {\n         MetricRegistration registration = new MetricRegistration();\n         collectResourceMetrics0(resource, managementResourceRegistration, EMPTY_ADDRESS, resourceAddressResolver, registration);\n+        // Defer the actual registration until the server is running and they can be collected w/o errors\n+        PropertyChangeListener listener = new PropertyChangeListener() {\n+            @Override\n+            public void propertyChange(PropertyChangeEvent evt) {\n+                if (ControlledProcessState.State.RUNNING == evt.getNewValue()) {\n+                    registration.register();\n+                } else if (ControlledProcessState.State.STOPPING == evt.getNewValue()) {\n+                    // Unregister so if this is a reload they won't still be around in a static cache in MetricsRegistry\n+                    // and cause problems when the server is starting\n+                    registration.unregister();\n+                    processStateNotifier.removePropertyChangeListener(this);\n+                }\n+\n+            }\n+        };\n+        this.processStateNotifier.addPropertyChangeListener(listener);\n+        // If server is already running, we won't get a change event so register now\n+        if (ControlledProcessState.State.RUNNING == this.processStateNotifier.getCurrentState()) {\n+            registration.register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0200d992e17ea87a1596e06ea8d998392275814"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyMDg2Mg==", "bodyText": "@spyrkob No, there isn't, but it's probably better to code defensively against it by making the method synchronized.\nIt's not a stupid question. :)\nThis method is called in the context of a management op that modifying the system. The switch to RUNNING also occurs in the context of such a management op (a big composite op that runs during boot) and the switch to RUNNING doesn't happen until the code that would call this method has completed. The system won't allow concurrent execution of 2 such management ops.", "url": "https://github.com/wildfly/wildfly/pull/13504#discussion_r477420862", "createdAt": "2020-08-26T16:12:05Z", "author": {"login": "bstansberry"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java", "diffHunk": "@@ -88,6 +94,26 @@ public MetricRegistration collectResourceMetrics(final Resource resource,\n                                                      Function<PathAddress, PathAddress> resourceAddressResolver) {\n         MetricRegistration registration = new MetricRegistration();\n         collectResourceMetrics0(resource, managementResourceRegistration, EMPTY_ADDRESS, resourceAddressResolver, registration);\n+        // Defer the actual registration until the server is running and they can be collected w/o errors\n+        PropertyChangeListener listener = new PropertyChangeListener() {\n+            @Override\n+            public void propertyChange(PropertyChangeEvent evt) {\n+                if (ControlledProcessState.State.RUNNING == evt.getNewValue()) {\n+                    registration.register();\n+                } else if (ControlledProcessState.State.STOPPING == evt.getNewValue()) {\n+                    // Unregister so if this is a reload they won't still be around in a static cache in MetricsRegistry\n+                    // and cause problems when the server is starting\n+                    registration.unregister();\n+                    processStateNotifier.removePropertyChangeListener(this);\n+                }\n+\n+            }\n+        };\n+        this.processStateNotifier.addPropertyChangeListener(listener);\n+        // If server is already running, we won't get a change event so register now\n+        if (ControlledProcessState.State.RUNNING == this.processStateNotifier.getCurrentState()) {\n+            registration.register();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NDIzNg=="}, "originalCommit": {"oid": "e0200d992e17ea87a1596e06ea8d998392275814"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNjQ0MQ==", "bodyText": "Great, thanks for the explanation :)", "url": "https://github.com/wildfly/wildfly/pull/13504#discussion_r477426441", "createdAt": "2020-08-26T16:20:46Z", "author": {"login": "spyrkob"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java", "diffHunk": "@@ -88,6 +94,26 @@ public MetricRegistration collectResourceMetrics(final Resource resource,\n                                                      Function<PathAddress, PathAddress> resourceAddressResolver) {\n         MetricRegistration registration = new MetricRegistration();\n         collectResourceMetrics0(resource, managementResourceRegistration, EMPTY_ADDRESS, resourceAddressResolver, registration);\n+        // Defer the actual registration until the server is running and they can be collected w/o errors\n+        PropertyChangeListener listener = new PropertyChangeListener() {\n+            @Override\n+            public void propertyChange(PropertyChangeEvent evt) {\n+                if (ControlledProcessState.State.RUNNING == evt.getNewValue()) {\n+                    registration.register();\n+                } else if (ControlledProcessState.State.STOPPING == evt.getNewValue()) {\n+                    // Unregister so if this is a reload they won't still be around in a static cache in MetricsRegistry\n+                    // and cause problems when the server is starting\n+                    registration.unregister();\n+                    processStateNotifier.removePropertyChangeListener(this);\n+                }\n+\n+            }\n+        };\n+        this.processStateNotifier.addPropertyChangeListener(listener);\n+        // If server is already running, we won't get a change event so register now\n+        if (ControlledProcessState.State.RUNNING == this.processStateNotifier.getCurrentState()) {\n+            registration.register();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NDIzNg=="}, "originalCommit": {"oid": "e0200d992e17ea87a1596e06ea8d998392275814"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3MDIxOQ==", "bodyText": "@spyrkob I added the synchronized", "url": "https://github.com/wildfly/wildfly/pull/13504#discussion_r477470219", "createdAt": "2020-08-26T17:31:42Z", "author": {"login": "bstansberry"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MetricCollector.java", "diffHunk": "@@ -88,6 +94,26 @@ public MetricRegistration collectResourceMetrics(final Resource resource,\n                                                      Function<PathAddress, PathAddress> resourceAddressResolver) {\n         MetricRegistration registration = new MetricRegistration();\n         collectResourceMetrics0(resource, managementResourceRegistration, EMPTY_ADDRESS, resourceAddressResolver, registration);\n+        // Defer the actual registration until the server is running and they can be collected w/o errors\n+        PropertyChangeListener listener = new PropertyChangeListener() {\n+            @Override\n+            public void propertyChange(PropertyChangeEvent evt) {\n+                if (ControlledProcessState.State.RUNNING == evt.getNewValue()) {\n+                    registration.register();\n+                } else if (ControlledProcessState.State.STOPPING == evt.getNewValue()) {\n+                    // Unregister so if this is a reload they won't still be around in a static cache in MetricsRegistry\n+                    // and cause problems when the server is starting\n+                    registration.unregister();\n+                    processStateNotifier.removePropertyChangeListener(this);\n+                }\n+\n+            }\n+        };\n+        this.processStateNotifier.addPropertyChangeListener(listener);\n+        // If server is already running, we won't get a change event so register now\n+        if (ControlledProcessState.State.RUNNING == this.processStateNotifier.getCurrentState()) {\n+            registration.register();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0NDIzNg=="}, "originalCommit": {"oid": "e0200d992e17ea87a1596e06ea8d998392275814"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4156, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}