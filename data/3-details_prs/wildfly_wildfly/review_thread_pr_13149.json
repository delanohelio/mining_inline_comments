{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0Mjk0OTYy", "number": 13149, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozODoxOFrODsHnvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozODoxOFrODsHnvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTg4Nzk5OnYy", "diffSide": "RIGHT", "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTozODoxOFrOF82sfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo0OToyNlrOGDDpxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTAwNg==", "bodyText": "I don't have time to properly review this now, but this doesn't feel right. DUPs looking up services isn't great as it's only safe if the DeploymentUnitPhaseService running the DUP has a dependency on the service being looked up. Which is fragile.", "url": "https://github.com/wildfly/wildfly/pull/13149#discussion_r399355006", "createdAt": "2020-03-27T15:38:18Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "diffHunk": "@@ -198,8 +199,15 @@ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentU\n \n         String serverInstanceName = warMetaData.getMergedJBossWebMetaData().getServerInstanceName() == null ? defaultServerForDeployment : warMetaData.getMergedJBossWebMetaData().getServerInstanceName();\n         String hostName = hostNameOfDeployment(warMetaData, defaultHostForDeployment);\n+        CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n+        ServiceName hostServiceName = support.getCapabilityServiceName(Capabilities.CAPABILITY_HOST, serverInstanceName, hostName);\n+        ServiceController<?> hostService = phaseContext.getServiceRegistry().getService(hostServiceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abbc908906ea9c1eb1c50bac31c2c16a84693b59"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk2MTUxMw==", "bodyText": "Thanks for looking this Brian! I tried first to fill the context root inside the service instead of the processor but the problem is that the context path is also used to name/locate the service (as an alias) here. So I didn't see any other alternative that trying to get the host and know the defaultWebModule inside the processor to create the alias with the right and final context. I'll ping you later.", "url": "https://github.com/wildfly/wildfly/pull/13149#discussion_r399961513", "createdAt": "2020-03-30T06:50:44Z", "author": {"login": "rmartinc"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "diffHunk": "@@ -198,8 +199,15 @@ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentU\n \n         String serverInstanceName = warMetaData.getMergedJBossWebMetaData().getServerInstanceName() == null ? defaultServerForDeployment : warMetaData.getMergedJBossWebMetaData().getServerInstanceName();\n         String hostName = hostNameOfDeployment(warMetaData, defaultHostForDeployment);\n+        CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n+        ServiceName hostServiceName = support.getCapabilityServiceName(Capabilities.CAPABILITY_HOST, serverInstanceName, hostName);\n+        ServiceController<?> hostService = phaseContext.getServiceRegistry().getService(hostServiceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTAwNg=="}, "originalCommit": {"oid": "abbc908906ea9c1eb1c50bac31c2c16a84693b59"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxMjM4OA==", "bodyText": "@rmartinc Have a look at DefaultDeploymentMappingProvider. It was written for this sort of problem. I think that can be adapted.  Add some sort of reverse lookup function to it.\nIt's a public class but it's meant only for use internal to the subsystem so it can changed as needed.", "url": "https://github.com/wildfly/wildfly/pull/13149#discussion_r403712388", "createdAt": "2020-04-05T14:51:26Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "diffHunk": "@@ -198,8 +199,15 @@ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentU\n \n         String serverInstanceName = warMetaData.getMergedJBossWebMetaData().getServerInstanceName() == null ? defaultServerForDeployment : warMetaData.getMergedJBossWebMetaData().getServerInstanceName();\n         String hostName = hostNameOfDeployment(warMetaData, defaultHostForDeployment);\n+        CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n+        ServiceName hostServiceName = support.getCapabilityServiceName(Capabilities.CAPABILITY_HOST, serverInstanceName, hostName);\n+        ServiceController<?> hostService = phaseContext.getServiceRegistry().getService(hostServiceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTAwNg=="}, "originalCommit": {"oid": "abbc908906ea9c1eb1c50bac31c2c16a84693b59"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAwNzQ0Nw==", "bodyText": "Thanks a lot @bstansberry! I'm very sorry but, although the solution was just before my eyes, I didn't see it. I should have noticed that class. :-(\nNo need to change the class at all, with the current map it's possible to see if the deployment is the default one for that server/host.\nI have performed the changes and rebased. Let's wait the tests. And let me know if you need something else.", "url": "https://github.com/wildfly/wildfly/pull/13149#discussion_r404007447", "createdAt": "2020-04-06T11:06:22Z", "author": {"login": "rmartinc"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "diffHunk": "@@ -198,8 +199,15 @@ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentU\n \n         String serverInstanceName = warMetaData.getMergedJBossWebMetaData().getServerInstanceName() == null ? defaultServerForDeployment : warMetaData.getMergedJBossWebMetaData().getServerInstanceName();\n         String hostName = hostNameOfDeployment(warMetaData, defaultHostForDeployment);\n+        CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n+        ServiceName hostServiceName = support.getCapabilityServiceName(Capabilities.CAPABILITY_HOST, serverInstanceName, hostName);\n+        ServiceController<?> hostService = phaseContext.getServiceRegistry().getService(hostServiceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTAwNg=="}, "originalCommit": {"oid": "abbc908906ea9c1eb1c50bac31c2c16a84693b59"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA0NzM1MA==", "bodyText": "Ah! I didn't remove the public modifier because the class is used in two packages (org.wildfly.extension.undertow.deployment and org.wildfly.extension.undertow). I forgot to mention that.", "url": "https://github.com/wildfly/wildfly/pull/13149#discussion_r404047350", "createdAt": "2020-04-06T12:20:57Z", "author": {"login": "rmartinc"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "diffHunk": "@@ -198,8 +199,15 @@ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentU\n \n         String serverInstanceName = warMetaData.getMergedJBossWebMetaData().getServerInstanceName() == null ? defaultServerForDeployment : warMetaData.getMergedJBossWebMetaData().getServerInstanceName();\n         String hostName = hostNameOfDeployment(warMetaData, defaultHostForDeployment);\n+        CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n+        ServiceName hostServiceName = support.getCapabilityServiceName(Capabilities.CAPABILITY_HOST, serverInstanceName, hostName);\n+        ServiceController<?> hostService = phaseContext.getServiceRegistry().getService(hostServiceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTAwNg=="}, "originalCommit": {"oid": "abbc908906ea9c1eb1c50bac31c2c16a84693b59"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg1ODc1Ng==", "bodyText": "Re the public modifier, that's fine; I wasn't looking to have that changed. I just meant not to worry that the class was public so you had to worry about API compatibility. You could have changed it as needed. But not needing to change it is good too!", "url": "https://github.com/wildfly/wildfly/pull/13149#discussion_r405858756", "createdAt": "2020-04-08T22:49:26Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/deployment/UndertowDeploymentProcessor.java", "diffHunk": "@@ -198,8 +199,15 @@ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentU\n \n         String serverInstanceName = warMetaData.getMergedJBossWebMetaData().getServerInstanceName() == null ? defaultServerForDeployment : warMetaData.getMergedJBossWebMetaData().getServerInstanceName();\n         String hostName = hostNameOfDeployment(warMetaData, defaultHostForDeployment);\n+        CapabilityServiceSupport support = deploymentUnit.getAttachment(Attachments.CAPABILITY_SERVICE_SUPPORT);\n+        ServiceName hostServiceName = support.getCapabilityServiceName(Capabilities.CAPABILITY_HOST, serverInstanceName, hostName);\n+        ServiceController<?> hostService = phaseContext.getServiceRegistry().getService(hostServiceName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM1NTAwNg=="}, "originalCommit": {"oid": "abbc908906ea9c1eb1c50bac31c2c16a84693b59"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3942, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}