{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNDQ4Mzk5", "number": 13716, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NDoxN1rOE9Wwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjoxMjoxM1rOFAxZPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzcxNDYzOnYy", "diffSide": "RIGHT", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSTopicControlHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo1NDoxN1rOH6APjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxODowMjo0MlrOH7FmVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzQzNw==", "bodyText": "Perhaps add a separate catch for RuntimeException and just rethrow it instead of wrapping?\nSame comment applies to resume and isPaused.", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r530583437", "createdAt": "2020-11-25T18:54:17Z", "author": {"login": "bstansberry"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSTopicControlHandler.java", "diffHunk": "@@ -388,6 +407,30 @@ private String listSubscribersInfosAsJSON(final DurabilityType durability, Addre\n       }\n    }\n \n+   private void pause(AddressControl control, boolean persist) {\n+       try {\n+       control.pause(persist);\n+       } catch (Exception e) {\n+         throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42adb5e6b64f11ef50a47221c50b78329c1b5d84"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcwNDM3MQ==", "bodyText": "There is actually a way to rethrow both without wrapping in a RuntimeException - see https://github.com/resteasy/Resteasy/blob/43f46228bbf8278a96648b48309f71d5ccad1e4c/resteasy-core/src/main/java/org/jboss/resteasy/core/SynchronousDispatcher.java#L186", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r531704371", "createdAt": "2020-11-27T17:11:48Z", "author": {"login": "kabir"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSTopicControlHandler.java", "diffHunk": "@@ -388,6 +407,30 @@ private String listSubscribersInfosAsJSON(final DurabilityType durability, Addre\n       }\n    }\n \n+   private void pause(AddressControl control, boolean persist) {\n+       try {\n+       control.pause(persist);\n+       } catch (Exception e) {\n+         throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzQzNw=="}, "originalCommit": {"oid": "42adb5e6b64f11ef50a47221c50b78329c1b5d84"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTcxOTc2NQ==", "bodyText": "ok, using Kabir's trick. This should be applied to the rest of the code though in a separate commit", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r531719765", "createdAt": "2020-11-27T18:02:42Z", "author": {"login": "ehsavoie"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/jms/JMSTopicControlHandler.java", "diffHunk": "@@ -388,6 +407,30 @@ private String listSubscribersInfosAsJSON(final DurabilityType durability, Addre\n       }\n    }\n \n+   private void pause(AddressControl control, boolean persist) {\n+       try {\n+       control.pause(persist);\n+       } catch (Exception e) {\n+         throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU4MzQzNw=="}, "originalCommit": {"oid": "42adb5e6b64f11ef50a47221c50b78329c1b5d84"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzQwNzgzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/RuntimeJMSTopicManagementTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTozNzo1M1rOH_NHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMTozNzo1M1rOH_NHDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAzNzEzMw==", "bodyText": "isTopicPaused would IMHO improve readability. WDYT?", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r536037133", "createdAt": "2020-12-04T11:37:53Z", "author": {"login": "honza-kasik"}, "path": "testsuite/integration/manualmode/src/test/java/org/jboss/as/test/manualmode/messaging/RuntimeJMSTopicManagementTestCase.java", "diffHunk": "@@ -0,0 +1,298 @@\n+/*\n+ * Copyright 2020 JBoss by Red Hat.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.manualmode.messaging;\n+\n+import static javax.jms.JMSContext.AUTO_ACKNOWLEDGE;\n+import static org.jboss.as.controller.client.helpers.ClientConstants.NAME;\n+import static org.jboss.as.controller.client.helpers.ClientConstants.VALUE;\n+import static org.jboss.as.controller.client.helpers.ClientConstants.WRITE_ATTRIBUTE_OPERATION;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.Properties;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageProducer;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+import javax.jms.Topic;\n+import javax.jms.TopicSubscriber;\n+import javax.naming.Context;\n+import javax.naming.InitialContext;\n+import javax.naming.NamingException;\n+import org.jboss.arquillian.container.test.api.ContainerController;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.client.helpers.ClientConstants;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.test.integration.common.jms.JMSOperations;\n+import org.jboss.as.test.integration.common.jms.JMSOperationsProvider;\n+import org.jboss.as.test.shared.TestSuiteEnvironment;\n+import org.jboss.as.test.shared.TimeoutUtil;\n+import org.jboss.dmr.ModelNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ *\n+ * @author Emmanuel Hugonnet (c) 2020 Red Hat, Inc.\n+ */\n+@RunAsClient()\n+@RunWith(Arquillian.class)\n+public class RuntimeJMSTopicManagementTestCase {\n+\n+    private static final String EXPORTED_PREFIX = \"java:jboss/exported/\";\n+\n+    private static long count = System.currentTimeMillis();\n+\n+    private static final String DEFAULT_FULL_JBOSSAS = \"default-full-jbossas\";\n+\n+    @ArquillianResource\n+    protected static ContainerController container;\n+\n+    @Test\n+    public void testPauseAndResumePersisted() throws IOException, NamingException, JMSException, InterruptedException {\n+        count = System.currentTimeMillis();\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        InitialContext remoteContext = createJNDIContext();\n+        ManagementClient managementClient = createManagementClient();\n+        JMSOperations adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.createJmsTopic(getTopicName(), EXPORTED_PREFIX + getTopicJndiName());\n+        addSecuritySettings(adminSupport);\n+        assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+        ConnectionFactory cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        Topic topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+\n+        final String subscriptionName = \"pauseJMSTopicPersisted\";\n+        try (Connection conn = cf.createConnection(\"guest\", \"guest\")) {\n+            conn.setClientID(\"sender\");\n+            try (Session session = conn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                conn.start();\n+                try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+                    consumerConn.setClientID(\"consumer\");\n+                    try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                        consumerConn.start();\n+                        TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                        pauseTopic(managementClient, true);\n+                        MessageProducer producer = session.createProducer(topic);\n+                        producer.send(session.createTextMessage(\"A\"));\n+\n+                        TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                        Assert.assertNull(\"The message was received by the consumer, this is wrong as the connection is paused\", message);\n+                        Assert.assertEquals(1, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+                    }\n+                }\n+            }\n+        }\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        remoteContext = createJNDIContext();\n+        managementClient = createManagementClient();\n+        assertTrue(\"Topic should be paused\", readTopicStatus(managementClient));\n+        cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+        try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+            consumerConn.setClientID(\"consumer\");\n+            try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE);) {\n+                consumerConn.start();\n+                TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNull(\"The message was received by the consumer, this is wrong as the connection is paused\", message);\n+                Assert.assertEquals(1, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+                resumeTopic(managementClient);\n+                assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+                message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNotNull(\"The message was not received by the consumer, this is wrong as the connection is resumed\", message);\n+                Assert.assertEquals(\"A\", message.getText());\n+                Thread.sleep(TimeoutUtil.adjust(500));\n+                Assert.assertEquals(0, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+            }\n+        }\n+        adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.removeJmsTopic(getTopicName());\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+    }\n+\n+    @Test\n+    public void testPauseAndResume() throws IOException, NamingException, JMSException, InterruptedException {\n+        count = System.currentTimeMillis();\n+        if (!container.isStarted(DEFAULT_FULL_JBOSSAS)) {\n+            container.start(DEFAULT_FULL_JBOSSAS);\n+        }\n+        InitialContext remoteContext = createJNDIContext();\n+        ManagementClient managementClient = createManagementClient();\n+        JMSOperations adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.createJmsTopic(getTopicName(), EXPORTED_PREFIX + getTopicJndiName());\n+        addSecuritySettings(adminSupport);\n+        assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+        ConnectionFactory cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        Topic topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+\n+        final String subscriptionName = \"pauseJMSTopic\";\n+        try (Connection conn = cf.createConnection(\"guest\", \"guest\")) {\n+            conn.setClientID(\"sender\");\n+            try (Session session = conn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                conn.start();\n+                try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+                    consumerConn.setClientID(\"consumer\");\n+                    try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE)) {\n+                        consumerConn.start();\n+                        TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                        pauseTopic(managementClient, false);\n+                        MessageProducer producer = session.createProducer(topic);\n+                        producer.send(session.createTextMessage(\"A\"));\n+\n+                        TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                        Assert.assertNull(\"The message was received by the consumer, this is wrong as the connection is paused\", message);\n+                        Assert.assertEquals(1, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+                        consumer.close();\n+                        producer.close();\n+                    }\n+                }\n+            }\n+        }\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+\n+        container.start(DEFAULT_FULL_JBOSSAS);\n+        remoteContext = createJNDIContext();\n+        managementClient = createManagementClient();\n+        assertFalse(\"Topic should be running\", readTopicStatus(managementClient));\n+        cf = (ConnectionFactory) remoteContext.lookup(\"jms/RemoteConnectionFactory\");\n+        topic = (Topic) remoteContext.lookup(getTopicJndiName());\n+        try (Connection consumerConn = cf.createConnection(\"guest\", \"guest\")) {\n+            consumerConn.setClientID(\"consumer\");\n+            try (Session consumerSession = consumerConn.createSession(false, AUTO_ACKNOWLEDGE);) {\n+                consumerConn.start();\n+                TopicSubscriber consumer = consumerSession.createDurableSubscriber(topic, subscriptionName);\n+                TextMessage message = (TextMessage) consumer.receive(TimeoutUtil.adjust(500));\n+                Assert.assertNotNull(\"The message was not received by the consumer, this is wrong as the connection is resumed\", message);\n+                Assert.assertEquals(\"A\", message.getText());\n+                Thread.sleep(TimeoutUtil.adjust(500));\n+                Assert.assertEquals(0, countMessageSubscriptions(managementClient, consumerConn.getClientID(), subscriptionName));\n+            }\n+        }\n+        adminSupport = JMSOperationsProvider.getInstance(managementClient.getControllerClient());\n+        adminSupport.removeJmsTopic(getTopicName());\n+        adminSupport.close();\n+        managementClient.close();\n+        remoteContext.close();\n+        container.stop(DEFAULT_FULL_JBOSSAS);\n+    }\n+\n+    private ModelNode getTopicAddress() {\n+        return PathAddress.parseCLIStyleAddress(\"/subsystem=messaging-activemq/server=default/jms-topic=\" + getTopicName()).toModelNode();\n+    }\n+\n+    private String getTopicName() {\n+        return getClass().getSimpleName() + count;\n+    }\n+\n+    private String getTopicJndiName() {\n+        return \"topic/\" + getTopicName();\n+    }\n+\n+    private ModelNode pauseTopic(ManagementClient managementClient, boolean persist) throws IOException {\n+        ModelNode operation = Operations.createOperation(\"pause\", getTopicAddress());\n+        operation.get(\"persist\").set(persist);\n+        return execute(managementClient.getControllerClient(), operation, true);\n+    }\n+\n+    private int countMessageSubscriptions(ManagementClient managementClient, String clientID, String subscriptionName) throws IOException {\n+        ModelNode operation = Operations.createOperation(\"count-messages-for-subscription\", getTopicAddress());\n+        operation.get(\"client-id\").set(clientID);\n+        operation.get(\"subscription-name\").set(subscriptionName);\n+        return execute(managementClient.getControllerClient(), operation, true).asInt();\n+    }\n+\n+    private ModelNode resumeTopic(ManagementClient managementClient) throws IOException {\n+        return execute(managementClient.getControllerClient(), Operations.createOperation(\"resume\", getTopicAddress()), true);\n+    }\n+\n+    private ModelNode execute(final ModelControllerClient client, final ModelNode op, final boolean expectSuccess) throws IOException {\n+        ModelNode response = client.execute(op);\n+        if (expectSuccess) {\n+            assertTrue(response.toJSONString(true), Operations.isSuccessfulOutcome(response));\n+            return Operations.readResult(response);\n+        }\n+        assertEquals(\"failed\", response.get(\"outcome\").asString());\n+        return response.get(\"failure-description\");\n+    }\n+\n+    private boolean readTopicStatus(ManagementClient managementClient) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1876254f38586a3123a863f7c8ca1c6bfd60ec"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzUzNDM4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Messaging.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjoxMTo0NVrOH_OO2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjoxMTo0NVrOH_OO2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1NTUxMg==", "bodyText": "Just a typos: opic -> topic, rstart -> restart.", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r536055512", "createdAt": "2020-12-04T12:11:45Z", "author": {"login": "honza-kasik"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Messaging.adoc", "diffHunk": "@@ -234,6 +234,22 @@ JMS endpoints can easily be created through the CLI:\n }\n ----\n \n+\n+Pausing and resuming Queues and Topics\n+\n+When a queue is paused, it will receive messages but will not deliver them. When it's resume, it'll begin delivering the queued messages, if any.\n+When a topic is paused, it will receive messages but will not deliver them. Newly added subscribers will be paused too until the topic is resumed. When it is resumed, delivering will occur again. The `persist` parameter ensure that the opic stays paused on the rstart of the server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1876254f38586a3123a863f7c8ca1c6bfd60ec"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MzUzNTk4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Messaging.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjoxMjoxM1rOH_OP1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjoxMjoxM1rOH_OP1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1NTc2Nw==", "bodyText": "Possible typo: resume -> resumed?", "url": "https://github.com/wildfly/wildfly/pull/13716#discussion_r536055767", "createdAt": "2020-12-04T12:12:13Z", "author": {"login": "honza-kasik"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Messaging.adoc", "diffHunk": "@@ -234,6 +234,22 @@ JMS endpoints can easily be created through the CLI:\n }\n ----\n \n+\n+Pausing and resuming Queues and Topics\n+\n+When a queue is paused, it will receive messages but will not deliver them. When it's resume, it'll begin delivering the queued messages, if any.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db1876254f38586a3123a863f7c8ca1c6bfd60ec"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4064, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}