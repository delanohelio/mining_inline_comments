{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NzI3NzI3", "number": 13181, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1MjowOVrODuvMxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1NDo0NVrODuvNrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzM0NDA3OnYy", "diffSide": "RIGHT", "path": "ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1MjowOVrOGA1jqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1MjowOVrOGA1jqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUzMDY2NA==", "bodyText": "This should handle the possibility that view.getMarkupClassName() will return null.", "url": "https://github.com/wildfly/wildfly/pull/13181#discussion_r403530664", "createdAt": "2020-04-04T21:52:09Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/component/DefaultComponentViewConfigurator.java", "diffHunk": "@@ -78,6 +78,14 @@ public void configure(final DeploymentPhaseContext context, final ComponentDescr\n                 }\n             }\n \n+            Class<?> markupClass;\n+            try {\n+                markupClass = module.getClassLoader().loadClass(view.getMarkupClassName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzM0NjM1OnYy", "diffSide": "RIGHT", "path": "ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1NDo0MFrOGA1ksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1NDo0MFrOGA1ksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUzMDkyOA==", "bodyText": "If this is in the request handling path please use a constant.", "url": "https://github.com/wildfly/wildfly/pull/13181#discussion_r403530928", "createdAt": "2020-04-04T21:54:40Z", "author": {"login": "bstansberry"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.ejb3.validator;\n+\n+import org.hibernate.validator.cdi.spi.BeanNames;\n+import org.hibernate.validator.metadata.BeanMetaDataClassNormalizer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.enterprise.inject.spi.PassivationCapable;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:tadamski@redhat.com\">Tomasz Adamski</a>\n+ */\n+\n+public class EjbProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer, Bean<BeanMetaDataClassNormalizer>, PassivationCapable {\n+\n+    @Override\n+    public <T> Class<? super T> normalize(Class<T> clazz) {\n+        if (EjbProxy.class.isAssignableFrom(clazz)) {\n+            return clazz.getSuperclass();\n+        }\n+        return clazz;\n+    }\n+\n+    @Override\n+    public Class<?> getBeanClass() {\n+        return BeanMetaDataClassNormalizer.class;\n+    }\n+\n+    @Override\n+    public Set<InjectionPoint> getInjectionPoints() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public boolean isNullable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public BeanMetaDataClassNormalizer create(CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+        return new EjbProxyBeanMetaDataClassNormalizer();\n+    }\n+\n+    @Override\n+    public void destroy(BeanMetaDataClassNormalizer beanMetaDataClassNormalizer, CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+\n+    }\n+\n+    @Override\n+    public Set<Type> getTypes() {\n+        return Collections.singleton( BeanMetaDataClassNormalizer.class );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMzM0NjM4OnYy", "diffSide": "RIGHT", "path": "ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1NDo0NVrOGA1ktQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQyMTo1NDo0NVrOGA1ktQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzUzMDkzMw==", "bodyText": "If this is in the request handling path please use a constant.", "url": "https://github.com/wildfly/wildfly/pull/13181#discussion_r403530933", "createdAt": "2020-04-04T21:54:45Z", "author": {"login": "bstansberry"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/validator/EjbProxyBeanMetaDataClassNormalizer.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.ejb3.validator;\n+\n+import org.hibernate.validator.cdi.spi.BeanNames;\n+import org.hibernate.validator.metadata.BeanMetaDataClassNormalizer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.enterprise.inject.spi.PassivationCapable;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+/**\n+ * @author <a href=\"mailto:tadamski@redhat.com\">Tomasz Adamski</a>\n+ */\n+\n+public class EjbProxyBeanMetaDataClassNormalizer implements BeanMetaDataClassNormalizer, Bean<BeanMetaDataClassNormalizer>, PassivationCapable {\n+\n+    @Override\n+    public <T> Class<? super T> normalize(Class<T> clazz) {\n+        if (EjbProxy.class.isAssignableFrom(clazz)) {\n+            return clazz.getSuperclass();\n+        }\n+        return clazz;\n+    }\n+\n+    @Override\n+    public Class<?> getBeanClass() {\n+        return BeanMetaDataClassNormalizer.class;\n+    }\n+\n+    @Override\n+    public Set<InjectionPoint> getInjectionPoints() {\n+        return Collections.emptySet();\n+    }\n+\n+    @Override\n+    public boolean isNullable() {\n+        return false;\n+    }\n+\n+    @Override\n+    public BeanMetaDataClassNormalizer create(CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+        return new EjbProxyBeanMetaDataClassNormalizer();\n+    }\n+\n+    @Override\n+    public void destroy(BeanMetaDataClassNormalizer beanMetaDataClassNormalizer, CreationalContext<BeanMetaDataClassNormalizer> creationalContext) {\n+\n+    }\n+\n+    @Override\n+    public Set<Type> getTypes() {\n+        return Collections.singleton( BeanMetaDataClassNormalizer.class );\n+    }\n+\n+    @Override\n+    public Set<Annotation> getQualifiers() {\n+        return Collections.singleton( NamedLiteral.of( BeanNames.BEAN_META_DATA_CLASS_NORMALIZER ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb8b6c940ad7366ebbfac56bef18eb7b66d0cd3"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3883, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}