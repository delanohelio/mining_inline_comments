{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDg3NTg2", "number": 12952, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNToyOToxMFrODcRWRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTo0Nzo1MVrODcRstQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTcwOTQ4OnYy", "diffSide": "RIGHT", "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNToyOToxMFrOFkO8Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNToyOToxMFrOFkO8Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUzNzg2Mw==", "bodyText": "Not a huge deal, but this should probably be final.", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373537863", "createdAt": "2020-01-31T15:29:10Z", "author": {"login": "jamezp"}, "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java", "diffHunk": "@@ -54,13 +54,15 @@\n     private final CodecConfiguration codecConfig;\n     private final SamplerConfiguration samplerConfig;\n     private final ReporterConfiguration reporterConfig;\n+    private Supplier<OutboundSocketBinding> outboundSocketBindingSupplier = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb6e34b433efa6fc71da3052310b63c7c423a78"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTczOTc5OnYy", "diffSide": "RIGHT", "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTozODo1OFrOFkPPxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTozODo1OFrOFkPPxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0Mjg1Mg==", "bodyText": "I don't really know how this is used, but we might want to do something more like.\nfinal OutboundSocketBinding binding = outboundSocketBindingSupplier.get();\nif(outboundSocketBindingSupplier.get() != null) {\n    senderConfiguration.withAgentHost(binding.getUnresolvedDestinationAddress())\n            .withAgentPort(binding.getDestinationPort());\n}\n\nI don't know what the overhead of get() is in MSC, but it seems like a single get() would be better.", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373542852", "createdAt": "2020-01-31T15:38:58Z", "author": {"login": "jamezp"}, "path": "microprofile/opentracing-extension/src/main/java/org/wildfly/extension/microprofile/opentracing/resolver/JaegerTracerConfiguration.java", "diffHunk": "@@ -102,6 +100,11 @@ public String getName() {\n \n     @Override\n     public Tracer createTracer(String serviceName) {\n+        Configuration.SenderConfiguration senderConfiguration = reporterConfig.getSenderConfiguration();\n+        if(outboundSocketBindingSupplier.get() != null) {\n+            senderConfiguration.withAgentHost(outboundSocketBindingSupplier.get().getUnresolvedDestinationAddress())\n+                    .withAgentPort(outboundSocketBindingSupplier.get().getDestinationPort());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb6e34b433efa6fc71da3052310b63c7c423a78"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTc1MDIyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTo0MjoyNlrOFkPWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTo0MjoyNlrOFkPWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0NDUyMQ==", "bodyText": "This should be using TestSuiteEnvironment.getServerAddress(). That method already formats ipv6 addresses and also checks the two properties management.address and node0.", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373544521", "createdAt": "2020-01-31T15:42:26Z", "author": {"login": "jamezp"}, "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/SubsystemConfigurationTestCase.java", "diffHunk": "@@ -59,6 +65,14 @@\n @ServerSetup(SubsystemConfigurationTestCase.SetupTask.class)\n public class SubsystemConfigurationTestCase {\n \n+    private static final String OUTBOUND_BINDING = \"jaeger-sender\";\n+    private static final ModelNode OUTBOUND_BINDING_ADDRESS = PathAddress\n+            .pathAddress(SOCKET_BINDING_GROUP, \"standard-sockets\")\n+            .append(REMOTE_DESTINATION_OUTBOUND_SOCKET_BINDING, OUTBOUND_BINDING)\n+            .toModelNode();\n+    private static final int SENDER_PORT = 6832;\n+    private static final String SENDER_HOST = NetworkUtils.formatPossibleIpv6Address(System.getProperty(\"node0\", \"localhost\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb6e34b433efa6fc71da3052310b63c7c423a78"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTc2NjkzOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNTo0Nzo1MVrOFkPg6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNzo0Njo1NlrOFkS7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0NzI0Mw==", "bodyText": "Should we not be throwing the error here?", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373547243", "createdAt": "2020-01-31T15:47:51Z", "author": {"login": "jamezp"}, "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java", "diffHunk": "@@ -23,8 +27,37 @@\n         @GET\n         @Produces(\"text/plain\")\n         public String get() {\n+            if (JaegerTracer.class.isInstance(this.tracer)) {\n+                return tracer.toString() + getSenderConfiguration();\n+            }\n             return tracer.toString();\n         }\n \n+        private String getSenderConfiguration() {\n+            try {\n+                Field reporterField = this.tracer.getClass().getDeclaredField(\"reporter\");\n+                reporterField.setAccessible(true);\n+                Object reporter = reporterField.get(this.tracer);\n+                if (\"RemoteReporter\".equals(reporter.getClass().getSimpleName())) {\n+                    Field senderField = reporter.getClass().getDeclaredField(\"sender\");\n+                    senderField.setAccessible(true);\n+                    Object sender = senderField.get(reporter);\n+                    if (\"UdpSender\".equals(sender.getClass().getSimpleName())) {\n+                        Field transportField = sender.getClass().getDeclaredField(\"udpTransport\");\n+                        transportField.setAccessible(true);\n+                        Object transport = transportField.get(sender);\n+                        if (\"ThriftUdpTransport\".equals(transport.getClass().getSimpleName())) {\n+                            Field socketField = transport.getClass().getDeclaredField(\"socket\");\n+                            socketField.setAccessible(true);\n+                            DatagramSocket socket = (DatagramSocket) socketField.get(transport);\n+                            return \"sender-binding=\" + NetworkUtils.formatIPAddressForURI(socket.getInetAddress()) + \":\" + socket.getPort();\n+                        }\n+                    }\n+                }\n+            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {\n+                ex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdb6e34b433efa6fc71da3052310b63c7c423a78"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYwMzI0Mw==", "bodyText": "yes, originally I wanted to avoid exception with different tracers implementations but this has been covered higher in the code", "url": "https://github.com/wildfly/wildfly/pull/12952#discussion_r373603243", "createdAt": "2020-01-31T17:46:56Z", "author": {"login": "ehsavoie"}, "path": "testsuite/integration/basic/src/test/java/org/wildfly/test/integration/microprofile/opentracing/application/TracerConfigurationApplication.java", "diffHunk": "@@ -23,8 +27,37 @@\n         @GET\n         @Produces(\"text/plain\")\n         public String get() {\n+            if (JaegerTracer.class.isInstance(this.tracer)) {\n+                return tracer.toString() + getSenderConfiguration();\n+            }\n             return tracer.toString();\n         }\n \n+        private String getSenderConfiguration() {\n+            try {\n+                Field reporterField = this.tracer.getClass().getDeclaredField(\"reporter\");\n+                reporterField.setAccessible(true);\n+                Object reporter = reporterField.get(this.tracer);\n+                if (\"RemoteReporter\".equals(reporter.getClass().getSimpleName())) {\n+                    Field senderField = reporter.getClass().getDeclaredField(\"sender\");\n+                    senderField.setAccessible(true);\n+                    Object sender = senderField.get(reporter);\n+                    if (\"UdpSender\".equals(sender.getClass().getSimpleName())) {\n+                        Field transportField = sender.getClass().getDeclaredField(\"udpTransport\");\n+                        transportField.setAccessible(true);\n+                        Object transport = transportField.get(sender);\n+                        if (\"ThriftUdpTransport\".equals(transport.getClass().getSimpleName())) {\n+                            Field socketField = transport.getClass().getDeclaredField(\"socket\");\n+                            socketField.setAccessible(true);\n+                            DatagramSocket socket = (DatagramSocket) socketField.get(transport);\n+                            return \"sender-binding=\" + NetworkUtils.formatIPAddressForURI(socket.getInetAddress()) + \":\" + socket.getPort();\n+                        }\n+                    }\n+                }\n+            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException | IllegalAccessException ex) {\n+                ex.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU0NzI0Mw=="}, "originalCommit": {"oid": "cdb6e34b433efa6fc71da3052310b63c7c423a78"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4022, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}