{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjMzNTQy", "number": 13425, "title": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor addin\u2026", "bodyText": "Issue: https://issues.redhat.com/browse/WFLY-13698", "createdAt": "2020-07-24T11:24:45Z", "url": "https://github.com/wildfly/wildfly/pull/13425", "merged": true, "mergeCommit": {"oid": "4000c55061534bf1f106843f8ca936d0981187de"}, "closed": true, "closedAt": "2020-12-04T22:15:28Z", "author": {"login": "moulalis"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4jNo8gFqTQ1NTMyNTY5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY6NWzAFqTUyMjU2Mjg4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MzI1Njk5", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-455325699", "createdAt": "2020-07-26T01:47:19Z", "commit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMTo0NzoxOVrOG3In2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMTo0NzoxOVrOG3In2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2NjEzNw==", "bodyText": "I assume the NPE is coming from moduleSpecification.addSystemDependency(jsfAPI).\nThis addJSFAPI method is called from two places, L68 and L93. The L93 call has logic before it (L89-91) that checks for an invalid module slot and fails, which makes me think this is failing due to the L68 call. So does adding logic similar to L89-91 before the L68 call fix the problem?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r460466137", "createdAt": "2020-07-26T01:47:19Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -107,12 +107,16 @@ public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitPro\n     public void undeploy(DeploymentUnit context) {\n     }\n \n-    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) {\n-        if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+    private void addJSFAPI(String jsfVersion, ModuleSpecification moduleSpecification, ModuleLoader moduleLoader) throws DeploymentUnitProcessingException {\n+        try{\n+            if (jsfVersion.equals(JsfVersionMarker.WAR_BUNDLES_JSF_IMPL)) return;\n+            ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n+            ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n+            moduleSpecification.addSystemDependency(jsfAPI);\n+        }catch (NullPointerException exception){\n+            throw new DeploymentUnitProcessingException(\"JSF module not found for JSF version \"+jsfVersion);\n+        }\n \n-        ModuleIdentifier jsfModule = moduleIdFactory.getApiModId(jsfVersion);\n-        ModuleDependency jsfAPI = new ModuleDependency(moduleLoader, jsfModule, false, false, false, false);\n-        moduleSpecification.addSystemDependency(jsfAPI);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "406679b527cfb7ca3dd408d54df2399a668dad08"}, "originalPosition": 19}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ddc10bff4cd8c27241b272ef7066dd89aea04df", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/1ddc10bff4cd8c27241b272ef7066dd89aea04df", "committedDate": "2020-08-07T10:07:13Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer-Test case added"}, "afterCommit": {"oid": "9904ec2fbfa66cd3c92010b996d5d96c291236a1", "author": {"user": {"login": "RanabirChakraborty", "name": "Ranabir Chakraborty"}}, "url": "https://github.com/wildfly/wildfly/commit/9904ec2fbfa66cd3c92010b996d5d96c291236a1", "committedDate": "2020-08-07T12:12:16Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9904ec2fbfa66cd3c92010b996d5d96c291236a1", "author": {"user": {"login": "RanabirChakraborty", "name": "Ranabir Chakraborty"}}, "url": "https://github.com/wildfly/wildfly/commit/9904ec2fbfa66cd3c92010b996d5d96c291236a1", "committedDate": "2020-08-07T12:12:16Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "c9aab7ec9e6ffd16d662be4b0630c30fa7479f83", "author": {"user": {"login": "RanabirChakraborty", "name": "Ranabir Chakraborty"}}, "url": "https://github.com/wildfly/wildfly/commit/c9aab7ec9e6ffd16d662be4b0630c30fa7479f83", "committedDate": "2020-08-07T12:30:28Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9aab7ec9e6ffd16d662be4b0630c30fa7479f83", "author": {"user": {"login": "RanabirChakraborty", "name": "Ranabir Chakraborty"}}, "url": "https://github.com/wildfly/wildfly/commit/c9aab7ec9e6ffd16d662be4b0630c30fa7479f83", "committedDate": "2020-08-07T12:30:28Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "cd4983f29a281e8c76a593718ca3bdf7a1b8e893", "author": {"user": {"login": "RanabirChakraborty", "name": "Ranabir Chakraborty"}}, "url": "https://github.com/wildfly/wildfly/commit/cd4983f29a281e8c76a593718ca3bdf7a1b8e893", "committedDate": "2020-08-10T17:58:40Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd4983f29a281e8c76a593718ca3bdf7a1b8e893", "author": {"user": {"login": "RanabirChakraborty", "name": "Ranabir Chakraborty"}}, "url": "https://github.com/wildfly/wildfly/commit/cd4983f29a281e8c76a593718ca3bdf7a1b8e893", "committedDate": "2020-08-10T17:58:40Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "e813d6c0af3c223b556bd7d20e0d72f756815392", "author": {"user": {"login": "bstansberry", "name": " Brian Stansberry"}}, "url": "https://github.com/wildfly/wildfly/commit/e813d6c0af3c223b556bd7d20e0d72f756815392", "committedDate": "2020-08-11T06:32:57Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e813d6c0af3c223b556bd7d20e0d72f756815392", "author": {"user": {"login": "bstansberry", "name": " Brian Stansberry"}}, "url": "https://github.com/wildfly/wildfly/commit/e813d6c0af3c223b556bd7d20e0d72f756815392", "committedDate": "2020-08-11T06:32:57Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "9a06f80415c24d2a88de3eaf0d70c99dc2a73c68", "author": {"user": {"login": "jmesnil", "name": "Jeff Mesnil"}}, "url": "https://github.com/wildfly/wildfly/commit/9a06f80415c24d2a88de3eaf0d70c99dc2a73c68", "committedDate": "2020-08-10T15:28:46Z", "message": "[WFLY-13750] Upgrade WildFly Core 13.0.0.Beta4\n\nJIRA: https://issues.redhat.com/browse/WFLY-13750\n\nSigned-off-by: Jeff Mesnil <jmesnil@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0baad8b358a51ca1f508d84065cb92af7d6ae9ee", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/0baad8b358a51ca1f508d84065cb92af7d6ae9ee", "committedDate": "2020-08-11T08:11:04Z", "message": "[WFLY_13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "74d2b5ad2cbe7183027daf59dcda16af911805bb", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/74d2b5ad2cbe7183027daf59dcda16af911805bb", "committedDate": "2020-08-11T10:12:37Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74d2b5ad2cbe7183027daf59dcda16af911805bb", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/74d2b5ad2cbe7183027daf59dcda16af911805bb", "committedDate": "2020-08-11T10:12:37Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "6432e6c25cc6d56f87de0098d2a31aa85f85690a", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/6432e6c25cc6d56f87de0098d2a31aa85f85690a", "committedDate": "2020-08-11T10:55:27Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6432e6c25cc6d56f87de0098d2a31aa85f85690a", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/6432e6c25cc6d56f87de0098d2a31aa85f85690a", "committedDate": "2020-08-11T10:55:27Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/84efc675ef8160bec75d8d56208730164b09571e", "committedDate": "2020-08-11T10:56:43Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/84efc675ef8160bec75d8d56208730164b09571e", "committedDate": "2020-08-11T10:56:43Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "4e617f1bdeb9f6a76bbb010500fc240ed55279f9", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4e617f1bdeb9f6a76bbb010500fc240ed55279f9", "committedDate": "2020-08-12T07:42:23Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODQ4Njg0", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-465848684", "createdAt": "2020-08-12T12:10:39Z", "commit": {"oid": "4e617f1bdeb9f6a76bbb010500fc240ed55279f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoxMDo0MFrOG_eVjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjoxMDo0MFrOG_eVjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIxMDUwOA==", "bodyText": "@moulalis I think that should have a licence header", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r469210508", "createdAt": "2020-08-12T12:10:40Z", "author": {"login": "spyrkob"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e617f1bdeb9f6a76bbb010500fc240ed55279f9"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e617f1bdeb9f6a76bbb010500fc240ed55279f9", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4e617f1bdeb9f6a76bbb010500fc240ed55279f9", "committedDate": "2020-08-12T07:42:23Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "1e6386d32d7e6c62a1df09e50dd7228a9254d182", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/1e6386d32d7e6c62a1df09e50dd7228a9254d182", "committedDate": "2020-08-12T12:24:14Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjE2Nzky", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-465216792", "createdAt": "2020-08-11T16:08:07Z", "commit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjowODowN1rOG---Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoxMzoxMVrOG-_K9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5NjYyMg==", "bodyText": "I think this should go above the addJSFAPI call. If it's going to fail, fail promptly.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468696622", "createdAt": "2020-08-11T16:08:07Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();\n         final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n         final DeploymentUnit tl = deploymentUnit.getParent() == null ? deploymentUnit : deploymentUnit.getParent();\n         final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n         final ModuleLoader moduleLoader = Module.getBootModuleLoader();\n+        //Set default when no default version has been set on the war file\n+        String jsfVersion = JsfVersionMarker.getVersion(tl).equals(JsfVersionMarker.NONE)? JSFModuleIdFactory.getInstance().getDefaultSlot() : JsfVersionMarker.getVersion(tl);\n+        String defaultJsfVersion = JSFModuleIdFactory.getInstance().getDefaultSlot();\n+\n         if(JsfVersionMarker.isJsfDisabled(deploymentUnit)) {\n             addJSFAPI(JsfVersionMarker.JSF_2_0, moduleSpecification, moduleLoader);\n+            if (jsfVersion.equals(defaultJsfVersion) && !moduleIdFactory.isValidJSFSlot(jsfVersion)) {\n+                throw JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(defaultJsfVersion);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTYzOA==", "bodyText": "@fjuma WDYT of this testing approach?\nIs it difficult to create a deployment that's going to fall into the block at https://github.com/wildfly/wildfly/pull/13425/files#diff-02a37d078a6d1626f94e0381a49baf61R72?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468699638", "createdAt": "2020-08-11T16:12:45Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/test/java/org/jboss/as/jsf/deployment/JSFDepProcessorTestCase.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.jboss.as.jsf.deployment;\n+\n+import org.jboss.as.server.deployment.AttachmentKey;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentPhaseContext;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.as.server.deployment.DeploymentUnitProcessingException;\n+import org.jboss.as.server.deployment.module.ModuleSpecification;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@PowerMockIgnore(\"jdk.internal.reflect.*\")\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({JsfVersionMarker.class, JSFModuleIdFactory.class})\n+public class JSFDepProcessorTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY5OTg5Mg==", "bodyText": "Is this done to let the test mock work?", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r468699892", "createdAt": "2020-08-11T16:13:11Z", "author": {"login": "bstansberry"}, "path": "jsf/subsystem/src/main/java/org/jboss/as/jsf/deployment/JSFDependencyProcessor.java", "diffHunk": "@@ -56,31 +56,38 @@\n \n     private static final ModuleIdentifier JSF_SUBSYSTEM = ModuleIdentifier.create(\"org.jboss.as.jsf\");\n \n-    private JSFModuleIdFactory moduleIdFactory = JSFModuleIdFactory.getInstance();\n+    private JSFModuleIdFactory moduleIdFactory;\n \n     @Override\n     public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n+        moduleIdFactory = JSFModuleIdFactory.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84efc675ef8160bec75d8d56208730164b09571e"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e6386d32d7e6c62a1df09e50dd7228a9254d182", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/1e6386d32d7e6c62a1df09e50dd7228a9254d182", "committedDate": "2020-08-12T12:24:14Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/38524d8524bbdc9717f003ca9315e2166f6da3ac", "committedDate": "2020-10-01T07:17:44Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTM3MzA0", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-503137304", "createdAt": "2020-10-06T16:14:26Z", "commit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNDoyN1rOHdPkUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNDoyN1rOHdPkUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNTgxMQ==", "bodyText": "s/RA_ADDRESS/JSF_ADDRESS", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500425811", "createdAt": "2020-10-06T16:14:27Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTM4MTU1", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-503138155", "createdAt": "2020-10-06T16:15:21Z", "commit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNToyMVrOHdPmyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNToyMVrOHdPmyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNjQ0Mw==", "bodyText": "Minor nit but addRaOperation should be reworded to something like writeJSFAttributeOperation or something like that.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500426443", "createdAt": "2020-10-06T16:15:21Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {\n+            if (e instanceof DeploymentException) {\n+                // awkward way to check if the failure is caused by NPE, but e.getCause() doesn't work\n+                StringWriter out = new StringWriter();\n+                e.printStackTrace(new PrintWriter(out));\n+                String stackTrace = out.getBuffer().toString();\n+\n+                if (stackTrace.contains(\"Caused by: java.lang.NullPointerException\")) {\n+                    throw e;\n+                }\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    static class SetupTask extends SnapshotRestoreSetupTask {\n+        @Override\n+        protected void doSetup(ManagementClient client, String containerId) throws Exception {\n+            ModelControllerClient mcc = client.getControllerClient();\n+            ModelNode addRaOperation = Operations.createWriteAttributeOperation(RA_ADDRESS.toModelNode(), \"default-jsf-impl-slot\", \"idontexist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTM5Nzg5", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-503139789", "createdAt": "2020-10-06T16:17:14Z", "commit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzoxNFrOHdPrxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoxNzoxNFrOHdPrxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyNzcxNw==", "bodyText": "Looks like the above two lines are a result of a copy/paste? Looks like they should be removed.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500427717", "createdAt": "2020-10-06T16:17:14Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {\n+            if (e instanceof DeploymentException) {\n+                // awkward way to check if the failure is caused by NPE, but e.getCause() doesn't work\n+                StringWriter out = new StringWriter();\n+                e.printStackTrace(new PrintWriter(out));\n+                String stackTrace = out.getBuffer().toString();\n+\n+                if (stackTrace.contains(\"Caused by: java.lang.NullPointerException\")) {\n+                    throw e;\n+                }\n+            } else {\n+                throw e;\n+            }\n+        }\n+    }\n+\n+    static class SetupTask extends SnapshotRestoreSetupTask {\n+        @Override\n+        protected void doSetup(ManagementClient client, String containerId) throws Exception {\n+            ModelControllerClient mcc = client.getControllerClient();\n+            ModelNode addRaOperation = Operations.createWriteAttributeOperation(RA_ADDRESS.toModelNode(), \"default-jsf-impl-slot\", \"idontexist\");\n+            addRaOperation.get(\"archive\").set(\"wf-ra-ely-security.rar\");\n+            addRaOperation.get(\"transaction-support\").set(\"NoTransaction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTY0NTE5", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-503164519", "createdAt": "2020-10-06T16:46:26Z", "commit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NjoyNlrOHdQ2NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1MDowN1rOHdQ_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0Njc3Mw==", "bodyText": "Since the test expects the deployment to fail, there should be an Assert.fail line under this one, e.g., something like:\nAssert.fail(\"Expected DeploymentException not thrown\");", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500446773", "createdAt": "2020-10-06T16:46:26Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NzgxMA==", "bodyText": "Should catch DeploymentException explicitly since that is what this test is expecting.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500447810", "createdAt": "2020-10-06T16:48:10Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0OTAyNQ==", "bodyText": "This if block can be removed. If you want to check that the expected message occurs, you could use e.getMessage() and check if it contains the message from invalidDefaultJSFImpl()", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r500449025", "createdAt": "2020-10-06T16:50:07Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {\n+            if (e instanceof DeploymentException) {\n+                // awkward way to check if the failure is caused by NPE, but e.getCause() doesn't work\n+                StringWriter out = new StringWriter();\n+                e.printStackTrace(new PrintWriter(out));\n+                String stackTrace = out.getBuffer().toString();\n+\n+                if (stackTrace.contains(\"Caused by: java.lang.NullPointerException\")) {\n+                    throw e;\n+                }\n+            } else {\n+                throw e;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/38524d8524bbdc9717f003ca9315e2166f6da3ac", "committedDate": "2020-10-01T07:17:44Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "9a0b02bfeeed43a4388fd93edd32120989638643", "author": {"user": {"login": "asoldano", "name": "Alessio Soldano"}}, "url": "https://github.com/wildfly/wildfly/commit/9a0b02bfeeed43a4388fd93edd32120989638643", "committedDate": "2020-10-20T07:49:53Z", "message": "Next is 22.0.0.Beta1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a0b02bfeeed43a4388fd93edd32120989638643", "author": {"user": {"login": "asoldano", "name": "Alessio Soldano"}}, "url": "https://github.com/wildfly/wildfly/commit/9a0b02bfeeed43a4388fd93edd32120989638643", "committedDate": "2020-10-20T07:49:53Z", "message": "Next is 22.0.0.Beta1"}, "afterCommit": {"oid": "cee16f1d6ead5aa9d29b53b9f08670266fb5dd45", "author": {"user": {"login": "asoldano", "name": "Alessio Soldano"}}, "url": "https://github.com/wildfly/wildfly/commit/cee16f1d6ead5aa9d29b53b9f08670266fb5dd45", "committedDate": "2020-10-20T08:42:25Z", "message": "Next is 22.0.0.Beta1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cee16f1d6ead5aa9d29b53b9f08670266fb5dd45", "author": {"user": {"login": "asoldano", "name": "Alessio Soldano"}}, "url": "https://github.com/wildfly/wildfly/commit/cee16f1d6ead5aa9d29b53b9f08670266fb5dd45", "committedDate": "2020-10-20T08:42:25Z", "message": "Next is 22.0.0.Beta1"}, "afterCommit": {"oid": "b512e093db91f437cf70e8bf018ed5c2ba7c0f58", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/b512e093db91f437cf70e8bf018ed5c2ba7c0f58", "committedDate": "2020-10-20T09:20:53Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b512e093db91f437cf70e8bf018ed5c2ba7c0f58", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/b512e093db91f437cf70e8bf018ed5c2ba7c0f58", "committedDate": "2020-10-20T09:20:53Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "0a35226005e864ab3c375229d9087fa39117a8ef", "author": {"user": {"login": "bstansberry", "name": " Brian Stansberry"}}, "url": "https://github.com/wildfly/wildfly/commit/0a35226005e864ab3c375229d9087fa39117a8ef", "committedDate": "2020-10-27T10:40:25Z", "message": "[WFLY-14008] Have EJB depend an internal variant of the JAX-RPC API module so we can drop the public one in the EE9 dist"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b835d0671fb0c662a403c9930b8d703ec0918b5", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4b835d0671fb0c662a403c9930b8d703ec0918b5", "committedDate": "2020-10-27T10:56:54Z", "message": "Resolved merge conflict by incorporating both suggestions."}, "afterCommit": {"oid": "ef1cfc14efae330040fe30df69e53e4eb89ebf4e", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/ef1cfc14efae330040fe30df69e53e4eb89ebf4e", "committedDate": "2020-10-27T11:00:29Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef1cfc14efae330040fe30df69e53e4eb89ebf4e", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/ef1cfc14efae330040fe30df69e53e4eb89ebf4e", "committedDate": "2020-10-27T11:00:29Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "df316514ec719118ee230e14f46f725e874d19f6", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/df316514ec719118ee230e14f46f725e874d19f6", "committedDate": "2020-10-27T11:06:17Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df316514ec719118ee230e14f46f725e874d19f6", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/df316514ec719118ee230e14f46f725e874d19f6", "committedDate": "2020-10-27T11:06:17Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4c4f6c4825f99fef1521d122f3fab4a44f05016f", "committedDate": "2020-10-27T11:08:09Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTg1NDY3", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-517585467", "createdAt": "2020-10-27T11:09:16Z", "commit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTowOToxNlrOHo2wkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxMTozMlrOHo21zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMjI1Nw==", "bodyText": "Assert.fail(\"Expected DeploymentException not thrown\");**** added and tested", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r512602257", "createdAt": "2020-10-27T11:09:16Z", "author": {"login": "moulalis"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0Njc3Mw=="}, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwMzU5OA==", "bodyText": "It was not able to catch DeploymentException directly. But I have added below line to test it.\nAssert.assertTrue(e instanceof DeploymentException);\nAssert.assertTrue(e.getMessage().contains(JSFLogger.ROOT_LOGGER.invalidDefaultJSFImpl(\"idontexist\").getMessage()));", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r512603598", "createdAt": "2020-10-27T11:11:32Z", "author": {"login": "moulalis"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress RA_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NzgxMA=="}, "originalCommit": {"oid": "38524d8524bbdc9717f003ca9315e2166f6da3ac"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDAyMTMw", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-522002130", "createdAt": "2020-11-02T21:23:16Z", "commit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDA0Mzg4", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-522004388", "createdAt": "2020-11-02T21:27:02Z", "commit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToyNzowMlrOHsWO6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMToyNzowMlrOHsWO6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI2MzY1OQ==", "bodyText": "Sorry, just realized that I don't see the Assert.fail(...) line added below deployer.deploy(...), as mentioned before.", "url": "https://github.com/wildfly/wildfly/pull/13425#discussion_r516263659", "createdAt": "2020-11-02T21:27:02Z", "author": {"login": "fjuma"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jsf/deployment/NonExistingJsfImplDeploymentTestCase.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * JBoss, Home of Professional Open Source\n+ * Copyright 2020, Red Hat, Inc. and/or its affiliates, and individual\n+ * contributors by the @authors tag. See the copyright.txt in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jboss.as.test.integration.jsf.deployment;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OUTCOME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUCCESS;\n+import org.jboss.arquillian.container.spi.client.container.DeploymentException;\n+import org.jboss.arquillian.container.test.api.Deployer;\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.api.ContainerResource;\n+import org.jboss.as.arquillian.api.ServerSetup;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.client.helpers.Operations;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.client.ModelControllerClient;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.as.jsf.logging.JSFLogger;\n+import org.jboss.as.test.shared.ServerReload;\n+import org.jboss.as.test.shared.SnapshotRestoreSetupTask;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+@ServerSetup(NonExistingJsfImplDeploymentTestCase.SetupTask.class)\n+public class NonExistingJsfImplDeploymentTestCase {\n+\n+    @ContainerResource\n+    private ManagementClient managementClient;\n+\n+    @ArquillianResource\n+    private Deployer deployer;\n+\n+    @Deployment(testable = false, managed = false, name = \"test_jar\")\n+    public static Archive<?> deploy() {\n+        JavaArchive archive = ShrinkWrap.create(JavaArchive.class);\n+        archive.addClass(NonExistingJsfImplDeploymentTestCase.class);\n+        return archive;\n+    }\n+\n+    private static final PathAddress JSF_ADDRESS = PathAddress.pathAddress(ModelDescriptionConstants.SUBSYSTEM, \"jsf\");\n+\n+    @Test\n+    public void testDeploymentDoesntFailBecauseOfNPE() throws Exception {\n+        try {\n+            deployer.deploy(\"test_jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62d314f61056902d07b3cd291da79dafceac7afa", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/62d314f61056902d07b3cd291da79dafceac7afa", "committedDate": "2020-11-03T05:19:07Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c4f6c4825f99fef1521d122f3fab4a44f05016f", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/4c4f6c4825f99fef1521d122f3fab4a44f05016f", "committedDate": "2020-10-27T11:08:09Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}, "afterCommit": {"oid": "62d314f61056902d07b3cd291da79dafceac7afa", "author": {"user": null}, "url": "https://github.com/wildfly/wildfly/commit/62d314f61056902d07b3cd291da79dafceac7afa", "committedDate": "2020-11-03T05:19:07Z", "message": "[WFLY-13698] NullPointerException due to JSFDependencyProcessor adding null ModuleIdentifer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNTYyODg5", "url": "https://github.com/wildfly/wildfly/pull/13425#pullrequestreview-522562889", "createdAt": "2020-11-03T14:40:30Z", "commit": {"oid": "62d314f61056902d07b3cd291da79dafceac7afa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3926, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}