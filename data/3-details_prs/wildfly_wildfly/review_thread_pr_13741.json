{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjM5NzM5", "number": 13741, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzo1MDowMFrOE9bWSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzo1MDowMFrOE9bWSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODQ2NjY1OnYy", "diffSide": "RIGHT", "path": "clustering/ee/cache/src/main/java/org/wildfly/clustering/ee/cache/ConcurrentManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzo1MDowMFrOH6HNoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTowOTo0NlrOH6IbhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5NzYzMg==", "bodyText": "Perhaps s/new Integer(0)/Integer.valueOf(0)/g ?", "url": "https://github.com/wildfly/wildfly/pull/13741#discussion_r530697632", "createdAt": "2020-11-25T23:50:00Z", "author": {"login": "bstansberry"}, "path": "clustering/ee/cache/src/main/java/org/wildfly/clustering/ee/cache/ConcurrentManager.java", "diffHunk": "@@ -39,43 +40,47 @@\n  */\n public class ConcurrentManager<K, V> implements Manager<K, V> {\n \n-    private final Map<K, Map.Entry<Integer, V>> objects = new ConcurrentHashMap<>();\n-    private final BiFunction<K, Map.Entry<Integer, V>, Map.Entry<Integer, V>> addFunction = new BiFunction<K, Map.Entry<Integer, V>, Map.Entry<Integer, V>>() {\n+    private final Map<K, Map.Entry<Integer, VolatileReference<V>>> objects = new ConcurrentHashMap<>();\n+    private final BiFunction<K, Map.Entry<Integer, VolatileReference<V>>, Map.Entry<Integer, VolatileReference<V>>> addFunction = new BiFunction<K, Map.Entry<Integer, VolatileReference<V>>, Map.Entry<Integer, VolatileReference<V>>>() {\n         @Override\n-        public Map.Entry<Integer, V> apply(K id, Map.Entry<Integer, V> entry) {\n-            return entry != null ? new AbstractMap.SimpleImmutableEntry<>(Integer.valueOf(entry.getKey().intValue() + 1), entry.getValue()) : new VolatileEntry<>(new Integer(0));\n+        public Map.Entry<Integer, VolatileReference<V>> apply(K id, Map.Entry<Integer, VolatileReference<V>> entry) {\n+            Integer count = (entry != null) ? Integer.valueOf(entry.getKey().intValue() + 1) : new Integer(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135e9f7bca8e7ed103caf27499afd7f5c1b7578e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcxNzU3Mg==", "bodyText": "Good catch - given that this is the request thread, it's a worthwhile optimization.  I'll update this later.", "url": "https://github.com/wildfly/wildfly/pull/13741#discussion_r530717572", "createdAt": "2020-11-26T01:09:46Z", "author": {"login": "pferraro"}, "path": "clustering/ee/cache/src/main/java/org/wildfly/clustering/ee/cache/ConcurrentManager.java", "diffHunk": "@@ -39,43 +40,47 @@\n  */\n public class ConcurrentManager<K, V> implements Manager<K, V> {\n \n-    private final Map<K, Map.Entry<Integer, V>> objects = new ConcurrentHashMap<>();\n-    private final BiFunction<K, Map.Entry<Integer, V>, Map.Entry<Integer, V>> addFunction = new BiFunction<K, Map.Entry<Integer, V>, Map.Entry<Integer, V>>() {\n+    private final Map<K, Map.Entry<Integer, VolatileReference<V>>> objects = new ConcurrentHashMap<>();\n+    private final BiFunction<K, Map.Entry<Integer, VolatileReference<V>>, Map.Entry<Integer, VolatileReference<V>>> addFunction = new BiFunction<K, Map.Entry<Integer, VolatileReference<V>>, Map.Entry<Integer, VolatileReference<V>>>() {\n         @Override\n-        public Map.Entry<Integer, V> apply(K id, Map.Entry<Integer, V> entry) {\n-            return entry != null ? new AbstractMap.SimpleImmutableEntry<>(Integer.valueOf(entry.getKey().intValue() + 1), entry.getValue()) : new VolatileEntry<>(new Integer(0));\n+        public Map.Entry<Integer, VolatileReference<V>> apply(K id, Map.Entry<Integer, VolatileReference<V>> entry) {\n+            Integer count = (entry != null) ? Integer.valueOf(entry.getKey().intValue() + 1) : new Integer(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY5NzYzMg=="}, "originalCommit": {"oid": "135e9f7bca8e7ed103caf27499afd7f5c1b7578e"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4065, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}