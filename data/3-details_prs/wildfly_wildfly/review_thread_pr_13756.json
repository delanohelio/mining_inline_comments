{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzcxNTY5", "number": 13756, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMjowMlrOE_Mvag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOToyODo0NlrOFCN5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzA0NDkwOnYy", "diffSide": "RIGHT", "path": "ee-9/feature-pack/src/main/resources/feature_groups/standalone-ha.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMjowMlrOH8xjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToxMjowMlrOH8xjaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ4ODQ4OQ==", "bodyText": "All such comments were fixed in following commits after I created the new metrics subsystem.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533488489", "createdAt": "2020-12-01T15:12:02Z", "author": {"login": "jmesnil"}, "path": "ee-9/feature-pack/src/main/resources/feature_groups/standalone-ha.xml", "diffHunk": "@@ -22,7 +22,8 @@\n     <feature-group name=\"management-interfaces\"/>\n     <feature-group name=\"access-control\"/>\n     <feature-group name=\"health\"/>\n-    <feature-group name=\"metrics\" />\n+    <!-- WFLY-14108 do not forget to put it back -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzExNTg0OnYy", "diffSide": "RIGHT", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToyNjoyMVrOH8yQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToyNjoyMVrOH8yQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5OTkyMw==", "bodyText": "I changed the project code but we are fine as the new metrics subsystem reuse the WFLYMETRICS code and keep the same message id for the same errors and logs", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533499923", "createdAt": "2020-12-01T15:26:21Z", "author": {"login": "jmesnil"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java", "diffHunk": "@@ -39,7 +39,7 @@\n  *\n  * @author <a href=\"http://jmesnil.net/\">Jeff Mesnil</a> (c) 2018 Red Hat inc.\n  */\n-@MessageLogger(projectCode = \"WFLYMETRICS\", length = 4)\n+@MessageLogger(projectCode = \"WFLYMPMETRICS\", length = 4)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzEyMTM2OnYy", "diffSide": "RIGHT", "path": "microprofile/metrics-smallrye/src/main/resources/schema/wildfly-microprofile-metrics-smallrye_2_1.xsd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToyNzoyMlrOH8yTWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToyNzoyMlrOH8yTWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMDc2MQ==", "bodyText": "the only diff between this 2.1 and the 2.0 xsd is that deprecated documentation....", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533500761", "createdAt": "2020-12-01T15:27:22Z", "author": {"login": "jmesnil"}, "path": "microprofile/metrics-smallrye/src/main/resources/schema/wildfly-microprofile-metrics-smallrye_2_1.xsd", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+  ~ JBoss, Home of Professional Open Source.\n+  ~ Copyright 2018, Red Hat, Inc., and individual contributors\n+  ~ as indicated by the @author tags. See the copyright.txt file in the\n+  ~ distribution for a full listing of individual contributors.\n+  ~\n+  ~ This is free software; you can redistribute it and/or modify it\n+  ~ under the terms of the GNU Lesser General Public License as\n+  ~ published by the Free Software Foundation; either version 2.1 of\n+  ~ the License, or (at your option) any later version.\n+  ~\n+  ~ This software is distributed in the hope that it will be useful,\n+  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of\n+  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+  ~ Lesser General Public License for more details.\n+  ~\n+  ~ You should have received a copy of the GNU Lesser General Public\n+  ~ License along with this software; if not, write to the Free\n+  ~ Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+  ~ 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+  -->\n+\n+<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n+           targetNamespace=\"urn:wildfly:microprofile-metrics-smallrye:2.1\"\n+           xmlns=\"urn:wildfly:microprofile-metrics-smallrye:2.1\"\n+           elementFormDefault=\"qualified\"\n+           attributeFormDefault=\"unqualified\"\n+           version=\"1.0\">\n+\n+    <xs:element name=\"subsystem\">\n+        <xs:complexType>\n+            <xs:attribute name=\"security-enabled\" type=\"xs:boolean\" default=\"true\">\n+                <xs:annotation>\n+                    <xs:documentation>\n+                        Deprecated. Use the security-enabled attribute on the metrics subsystem instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzEyNzA2OnYy", "diffSide": "RIGHT", "path": "testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToyODozNlrOH8yW5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNToyODozNlrOH8yW5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMTY2OA==", "bodyText": "I'm not sure why this was not spotted before but once I added the org.wildfly.extension.metrics to more recent WIldFly version, this was spotted in the CI", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533501668", "createdAt": "2020-12-01T15:28:36Z", "author": {"login": "jmesnil"}, "path": "testsuite/domain/src/test/java/org/jboss/as/test/integration/domain/HostExcludesTestCase.java", "diffHunk": "@@ -161,77 +161,88 @@\n         )),\n         WILDFLY_17_0(\"WildFly17.0\", WILDFLY_16_0),\n         WILDFLY_18_0(\"WildFly18.0\", WILDFLY_17_0),\n-\n-        EAP62(\"EAP62\", Arrays.asList(\n-                \"org.jboss.as.appclient\",\n-                \"org.jboss.as.clustering.infinispan\",\n-                \"org.jboss.as.clustering.jgroups\",\n-                \"org.jboss.as.cmp\",\n-                \"org.jboss.as.configadmin\",\n-                \"org.jboss.as.connector\",\n-                \"org.jboss.as.deployment-scanner\",\n-                \"org.jboss.as.ee\",\n-                \"org.jboss.as.ejb3\",\n-                \"org.jboss.as.jacorb\",\n-                \"org.jboss.as.jaxr\",\n-                \"org.jboss.as.jaxrs\",\n-                \"org.jboss.as.jdr\",\n-                \"org.jboss.as.jmx\",\n-                \"org.jboss.as.jpa\",\n-                \"org.jboss.as.jsf\",\n-                \"org.jboss.as.jsr77\",\n-                \"org.jboss.as.logging\",\n-                \"org.jboss.as.mail\",\n-                \"org.jboss.as.messaging\",\n-                \"org.jboss.as.modcluster\",\n-                \"org.jboss.as.naming\",\n-                \"org.jboss.as.pojo\",\n-                \"org.jboss.as.remoting\",\n-                \"org.jboss.as.sar\",\n-                \"org.jboss.as.security\",\n-                \"org.jboss.as.threads\",\n-                \"org.jboss.as.transactions\",\n-                \"org.jboss.as.web\",\n-                \"org.jboss.as.webservices\",\n-                \"org.jboss.as.weld\",\n-                \"org.jboss.as.xts\",\n-                // This module was added in EAP70, but we move it to the EAP62 extension list to allow the test passing\n-                // without adding it to the host-exclude section. We don't want to expose it in the host-exclude.\n-                \"org.wildfly.extension.mod_cluster\"\n+        WILDFLY_19_0(\"WildFly19.0\", WILDFLY_18_0,Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODQ4NTE0OnYy", "diffSide": "LEFT", "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMDo1NjoyNVrOH8_cDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOToxMDozMVrOH-Mu4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA==", "bodyText": "We may have to redefine / override this in the 'wildfly' f-p as all of these layers are optional people might be excluding them using the 'microprofile-*' name.\nIf they are using 'wildfly-ee' then they have no choice; they have to change their exclude to 'metrics'.  But if they use 'wildfly' their existing exclude could work.\n@jfdenise @yersan WDYT? Overriding a layer isn't nice either, and having a fixed definition for 'observability' is also a good thing.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533715980", "createdAt": "2020-12-01T20:56:25Z", "author": {"login": "bstansberry"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MTM1Nw==", "bodyText": "@bstansberry +1 on redefining the observability layer in wildfly FP to add back the optional dependency on the microprofile-metrics.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534071357", "createdAt": "2020-12-02T10:48:17Z", "author": {"login": "jfdenise"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NDYyMQ==", "bodyText": "I don't see the new \"metrics\" base layer in observability. User can't replace their exclusion to \"metrics\". I missed something there?", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534074621", "createdAt": "2020-12-02T10:53:45Z", "author": {"login": "jfdenise"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3NzgzNQ==", "bodyText": "@jfdenise \n  \n    \n      wildfly/ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml\n    \n    \n         Line 4\n      in\n      9c2367e\n    \n    \n    \n    \n\n        \n          \n           <layer name=\"metrics\" optional=\"true\"/> \n        \n    \n  \n\n or am I misunderstanding what you mean?", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534077835", "createdAt": "2020-12-02T10:58:48Z", "author": {"login": "jmesnil"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA4MTc3NA==", "bodyText": "@jmesnil , thank-you I should have looked at a commit, not the actual full PR. The 'metrics' is there, that answers my question.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534081774", "createdAt": "2020-12-02T11:05:23Z", "author": {"login": "jfdenise"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA4Mzc5Ng==", "bodyText": "WDYT? Overriding a layer isn't nice either, and having a fixed definition for 'observability' is also a good thing.\n\nmicroprofile-config and microprofile-health subsystems will be also moved out from wildfly-ee. I'm not sure what observability will contain in wildfly-ee. It seems it will tend to be a complete different layer on wildfly-ee vs wildfly fp. Re-define it sounds although it seems users will see a different server configuration when using wildfly-ee and wildfly, so the same scripts won't work for the same layer. Am I wrong?", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534083796", "createdAt": "2020-12-02T11:08:43Z", "author": {"login": "yersan"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ3OTE0Ng==", "bodyText": "In wildfly-ee observability will contain 'health' and 'metrics', the two most important aspects of observing a server. It won't have any form of tracing. Having MP Config was always more an implementation detail not a feature of 'observability'.\nSo, I do think the observability concept makes sense for wildfly-ee.\nYes, redefining the layer means what your configuration looks like will be different depending on what top-level FP you use. That does make it more unlikely someone can use the same script for both. Or the script becomes more complex.\nI think if people were customizing they are going to have to adapt no matter what we do. For example the 'security-enabled' attribute on the mp-metrics-smallrye subsystem is no longer functional. And if you're using wildfly-ee the mp subsystems are just gone.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534479146", "createdAt": "2020-12-02T21:02:26Z", "author": {"login": "bstansberry"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk4MjM2OQ==", "bodyText": "My concern was oriented toward those cases thinking that since observability is going to have notable differences between the fp consumed we should have different names for such layer. I wanted to be sure it's assumable.\nThen, if we re-define observability, it means an user using the ee-wildfly fp that wants to incorporate MP specs moving to wildfly fp, would need to redefine / adapt any CLI scripts if he is using observability Galleon layer (or any layer that depends upon it, e.g cloud-profile and cloud-server)", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534982369", "createdAt": "2020-12-03T09:10:31Z", "author": {"login": "yersan"}, "path": "ee-feature-pack/galleon-common/src/main/resources/layers/standalone/observability/layer-spec.xml", "diffHunk": "@@ -2,7 +2,6 @@\n <layer-spec xmlns=\"urn:jboss:galleon:layer-spec:1.0\" name=\"observability\">\n     <dependencies>\n         <layer name=\"microprofile-config\" optional=\"true\"/>\n-        <layer name=\"microprofile-metrics\" optional=\"true\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzcxNTk4MA=="}, "originalCommit": {"oid": "2ea55766c77641471db403a41f2458ebca1e08a0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYxMjA1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNDozMVrOH9Ap2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwODo0NTo1OFrOH9QGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNTg5Ng==", "bodyText": "I'm not sure if 'healthy' is a good word here. If I'm thinking about metrics and hear 'health' I think in terms of what a liveness/readiness probe would return, which I think is not what you mean here. There may have been boot errors etc that would reflect poor 'health' but would not result in a non-200 from /metrics.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533735896", "createdAt": "2020-12-01T21:34:31Z", "author": {"login": "bstansberry"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.\n+* `prefix` - A string to prepend to WildFly metrics that are exposed by the HTTP endpoint `/metrics` with the Prometheus output format.\n+\n+[[metrics-http-endpoint]]\n+== HTTP Endpoint\n+\n+The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n+\n+Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=metrics` resource.\n+If it is set to `true`, the HTTP client must be authenticated.\n+\n+If the application server is healthy, it will return a `200 OK` response:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk4ODkwOA==", "bodyText": "I agree. That looks like a bad copy/paste from the Microprofile-health guide.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533988908", "createdAt": "2020-12-02T08:45:58Z", "author": {"login": "jmesnil"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.\n+* `prefix` - A string to prepend to WildFly metrics that are exposed by the HTTP endpoint `/metrics` with the Prometheus output format.\n+\n+[[metrics-http-endpoint]]\n+== HTTP Endpoint\n+\n+The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n+\n+Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=metrics` resource.\n+If it is set to `true`, the HTTP client must be authenticated.\n+\n+If the application server is healthy, it will return a `200 OK` response:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNTg5Ng=="}, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYxMzg4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNTowMVrOH9Aq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNTowMVrOH9Aq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjE2OA==", "bodyText": "s/Promethys/Prometheus", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533736168", "createdAt": "2020-12-01T21:35:01Z", "author": {"login": "bstansberry"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.\n+* `prefix` - A string to prepend to WildFly metrics that are exposed by the HTTP endpoint `/metrics` with the Prometheus output format.\n+\n+[[metrics-http-endpoint]]\n+== HTTP Endpoint\n+\n+The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n+\n+Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=metrics` resource.\n+If it is set to `true`, the HTTP client must be authenticated.\n+\n+If the application server is healthy, it will return a `200 OK` response:\n+\n+----\n+$ curl -v http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If security has been enabled, the HTTP client must pass the credentials corresponding to a management user\n+created by the `add-user` script. For example:\n+\n+----\n+$ curl -v --digest -u myadminuser:myadminpassword http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If the authentication fails, the  server will reply with a `401 NOT AUTHORIZED` response.\n+\n+== Exposed Metrics\n+\n+The HTTP endpoint exposes the following metrics:\n+\n+* Base metrics - Metrics from JVM MBeans (read from their JMX MBeans)\n+* Vendor metrics - WildFly Metrics from the management model subsystem and deployment subtrees.\n+\n+The HTTP endpoint exposes the metrics in the Prometheys format only.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYxNTAwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNToyMVrOH9Armw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNToyMVrOH9Armw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjM0Nw==", "bodyText": "s/names is/names are/g", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533736347", "createdAt": "2020-12-01T21:35:21Z", "author": {"login": "bstansberry"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.\n+* `prefix` - A string to prepend to WildFly metrics that are exposed by the HTTP endpoint `/metrics` with the Prometheus output format.\n+\n+[[metrics-http-endpoint]]\n+== HTTP Endpoint\n+\n+The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n+\n+Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=metrics` resource.\n+If it is set to `true`, the HTTP client must be authenticated.\n+\n+If the application server is healthy, it will return a `200 OK` response:\n+\n+----\n+$ curl -v http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If security has been enabled, the HTTP client must pass the credentials corresponding to a management user\n+created by the `add-user` script. For example:\n+\n+----\n+$ curl -v --digest -u myadminuser:myadminpassword http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If the authentication fails, the  server will reply with a `401 NOT AUTHORIZED` response.\n+\n+== Exposed Metrics\n+\n+The HTTP endpoint exposes the following metrics:\n+\n+* Base metrics - Metrics from JVM MBeans (read from their JMX MBeans)\n+* Vendor metrics - WildFly Metrics from the management model subsystem and deployment subtrees.\n+\n+The HTTP endpoint exposes the metrics in the Prometheys format only.\n+\n+=== WildFly Metrics Description\n+\n+WildFly metrics names is based on the subsystem that provides them as well as the name of the attribute from the management model.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYxNjM5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNTo0M1rOH9AsdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNTo0M1rOH9AsdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjU2NQ==", "bodyText": "s/from WildFly/from the WildFly/g", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533736565", "createdAt": "2020-12-01T21:35:43Z", "author": {"login": "bstansberry"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYxNzQxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNjowNlrOH9AtJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNjowNlrOH9AtJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNjc0MA==", "bodyText": "s/are stored/is stored/g", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533736740", "createdAt": "2020-12-01T21:36:06Z", "author": {"login": "bstansberry"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.\n+* `prefix` - A string to prepend to WildFly metrics that are exposed by the HTTP endpoint `/metrics` with the Prometheus output format.\n+\n+[[metrics-http-endpoint]]\n+== HTTP Endpoint\n+\n+The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n+\n+Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=metrics` resource.\n+If it is set to `true`, the HTTP client must be authenticated.\n+\n+If the application server is healthy, it will return a `200 OK` response:\n+\n+----\n+$ curl -v http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If security has been enabled, the HTTP client must pass the credentials corresponding to a management user\n+created by the `add-user` script. For example:\n+\n+----\n+$ curl -v --digest -u myadminuser:myadminpassword http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If the authentication fails, the  server will reply with a `401 NOT AUTHORIZED` response.\n+\n+== Exposed Metrics\n+\n+The HTTP endpoint exposes the following metrics:\n+\n+* Base metrics - Metrics from JVM MBeans (read from their JMX MBeans)\n+* Vendor metrics - WildFly Metrics from the management model subsystem and deployment subtrees.\n+\n+The HTTP endpoint exposes the metrics in the Prometheys format only.\n+\n+=== WildFly Metrics Description\n+\n+WildFly metrics names is based on the subsystem that provides them as well as the name of the attribute from the management model.\n+Their name can also be prepended with a `prefix` (specified on the `/subsystem=metrics` resource).\n+Other information are stored using labels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODYyMDExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNjo1NVrOH9AuzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMTozNjo1NVrOH9AuzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzczNzE2NQ==", "bodyText": "s/expression/expressions", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533737165", "createdAt": "2020-12-01T21:36:55Z", "author": {"login": "bstansberry"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.\n+* `prefix` - A string to prepend to WildFly metrics that are exposed by the HTTP endpoint `/metrics` with the Prometheus output format.\n+\n+[[metrics-http-endpoint]]\n+== HTTP Endpoint\n+\n+The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n+\n+Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=metrics` resource.\n+If it is set to `true`, the HTTP client must be authenticated.\n+\n+If the application server is healthy, it will return a `200 OK` response:\n+\n+----\n+$ curl -v http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If security has been enabled, the HTTP client must pass the credentials corresponding to a management user\n+created by the `add-user` script. For example:\n+\n+----\n+$ curl -v --digest -u myadminuser:myadminpassword http://localhost:9990/metrics\n+< HTTP/1.1 200 OK\n+...\n+# HELP base_classloader_total_loaded_class_count Displays the total number of classes that have been loaded since the Java virtual machine has started execution\n+.\n+# TYPE base_classloader_total_loaded_class_count counter\n+base_classloader_total_loaded_class_count 10822.0\n+...\n+----\n+\n+If the authentication fails, the  server will reply with a `401 NOT AUTHORIZED` response.\n+\n+== Exposed Metrics\n+\n+The HTTP endpoint exposes the following metrics:\n+\n+* Base metrics - Metrics from JVM MBeans (read from their JMX MBeans)\n+* Vendor metrics - WildFly Metrics from the management model subsystem and deployment subtrees.\n+\n+The HTTP endpoint exposes the metrics in the Prometheys format only.\n+\n+=== WildFly Metrics Description\n+\n+WildFly metrics names is based on the subsystem that provides them as well as the name of the attribute from the management model.\n+Their name can also be prepended with a `prefix` (specified on the `/subsystem=metrics` resource).\n+Other information are stored using labels.\n+\n+For example Undertow exposes a metric attribute `request-count` for every Servlet in an application deployment.\n+This attribute will be exposed to Prometheus with the name `wildfly_undertow_request_count`.\n+Other information such as the name of the Servlet are added to the labels of the metrics.\n+\n+The [helloworld-rs quickstart](https://github.com/wildfly/quickstart/tree/master/helloworld-rs) creates a JAX-RS application\n+that can be deployed in WildFly.\n+A corresponding metric will be exposed for it with the name and labels:\n+\n+* `wildfly_undertow_request_count_total{deployment=\"helloworld-rs.war\",servlet=\"org.jboss.as.quickstarts.rshelloworld.JAXActivator\",subdeployment=\"helloworld-rs.war\"}`\n+\n+[NOTE]\n+Some subsystems (such as `undertow` or `messaging-activemq`) do not enable their statistics by default\n+as they have an impact on performance and memory usage. These subsystems provides a `statistics-enabled` attribute that must\n+be set to `true` to enable them.\n+For convenience, WildFly standalone configuration provides expression to enable the statistics by setting a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63b9c63fac3ab031555fce347ec95ba4675a5a1d"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODk5MjQ1OnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo0MTowOVrOH9EVrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTowMToyN1rOH9VoMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjI2OQ==", "bodyText": "I don't think we can do this with metrics. :(", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533796269", "createdAt": "2020-12-01T23:41:09Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java", "diffHunk": "@@ -49,47 +47,43 @@\n     private final Supplier<ModelControllerClientFactory> modelControllerClientFactory;\n     private final Supplier<Executor> managementExecutor;\n     private final Supplier<ProcessStateNotifier> processStateNotifier;\n-    private final List<String> exposedSubsystems;\n-    private final String globalPrefix;\n+    private Consumer<MetricCollector> metricCollectorConsumer;\n \n     private MetricCollector metricCollector;\n     private LocalModelControllerClient modelControllerClient;\n \n-    static void install(OperationContext context, List<String> exposedSubsystems, String prefix) {\n-        ServiceBuilder<?> serviceBuilder = context.getServiceTarget().addService(WILDFLY_COLLECTOR_SERVICE);\n+    static void install(OperationContext context) {\n+        ServiceBuilder<?> serviceBuilder = context.getServiceTarget().addService(WILDFLY_COLLECTOR);\n         Supplier<ModelControllerClientFactory> modelControllerClientFactory = serviceBuilder.requires(context.getCapabilityServiceName(CLIENT_FACTORY_CAPABILITY, ModelControllerClientFactory.class));\n         Supplier<Executor> managementExecutor = serviceBuilder.requires(context.getCapabilityServiceName(MANAGEMENT_EXECUTOR, Executor.class));\n         Supplier<ProcessStateNotifier> processStateNotifier = serviceBuilder.requires(context.getCapabilityServiceName(PROCESS_STATE_NOTIFIER, ProcessStateNotifier.class));\n-        MetricsCollectorService service = new MetricsCollectorService(modelControllerClientFactory, managementExecutor, processStateNotifier, exposedSubsystems, prefix);\n+        Consumer<MetricCollector> metricCollectorConsumer = serviceBuilder.provides(WILDFLY_COLLECTOR);\n+        MetricsCollectorService service = new MetricsCollectorService(modelControllerClientFactory, managementExecutor, processStateNotifier, metricCollectorConsumer);\n         serviceBuilder.setInstance(service)\n                 .install();\n     }\n \n     MetricsCollectorService(Supplier<ModelControllerClientFactory> modelControllerClientFactory, Supplier<Executor> managementExecutor,\n-                            Supplier<ProcessStateNotifier> processStateNotifier, List<String> exposedSubsystems, String globalPrefix) {\n+                            Supplier<ProcessStateNotifier> processStateNotifier, Consumer<MetricCollector> metricCollectorConsumer) {\n         this.modelControllerClientFactory = modelControllerClientFactory;\n         this.managementExecutor = managementExecutor;\n         this.processStateNotifier = processStateNotifier;\n-        this.exposedSubsystems = exposedSubsystems;\n-        this.globalPrefix = globalPrefix;\n+        this.metricCollectorConsumer = metricCollectorConsumer;\n     }\n \n     @Override\n     public void start(StartContext context) {\n-        modelControllerClient = modelControllerClientFactory.get().createClient(managementExecutor.get());\n+        modelControllerClient = modelControllerClientFactory.get().createSuperUserClient(managementExecutor.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTUzOA==", "bodyText": "you are right, I changed the code in 9c2367e to use a regular client and skip any metrics that can not be read due to RBAC", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079538", "createdAt": "2020-12-02T11:01:27Z", "author": {"login": "jmesnil"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/MetricsCollectorService.java", "diffHunk": "@@ -49,47 +47,43 @@\n     private final Supplier<ModelControllerClientFactory> modelControllerClientFactory;\n     private final Supplier<Executor> managementExecutor;\n     private final Supplier<ProcessStateNotifier> processStateNotifier;\n-    private final List<String> exposedSubsystems;\n-    private final String globalPrefix;\n+    private Consumer<MetricCollector> metricCollectorConsumer;\n \n     private MetricCollector metricCollector;\n     private LocalModelControllerClient modelControllerClient;\n \n-    static void install(OperationContext context, List<String> exposedSubsystems, String prefix) {\n-        ServiceBuilder<?> serviceBuilder = context.getServiceTarget().addService(WILDFLY_COLLECTOR_SERVICE);\n+    static void install(OperationContext context) {\n+        ServiceBuilder<?> serviceBuilder = context.getServiceTarget().addService(WILDFLY_COLLECTOR);\n         Supplier<ModelControllerClientFactory> modelControllerClientFactory = serviceBuilder.requires(context.getCapabilityServiceName(CLIENT_FACTORY_CAPABILITY, ModelControllerClientFactory.class));\n         Supplier<Executor> managementExecutor = serviceBuilder.requires(context.getCapabilityServiceName(MANAGEMENT_EXECUTOR, Executor.class));\n         Supplier<ProcessStateNotifier> processStateNotifier = serviceBuilder.requires(context.getCapabilityServiceName(PROCESS_STATE_NOTIFIER, ProcessStateNotifier.class));\n-        MetricsCollectorService service = new MetricsCollectorService(modelControllerClientFactory, managementExecutor, processStateNotifier, exposedSubsystems, prefix);\n+        Consumer<MetricCollector> metricCollectorConsumer = serviceBuilder.provides(WILDFLY_COLLECTOR);\n+        MetricsCollectorService service = new MetricsCollectorService(modelControllerClientFactory, managementExecutor, processStateNotifier, metricCollectorConsumer);\n         serviceBuilder.setInstance(service)\n                 .install();\n     }\n \n     MetricsCollectorService(Supplier<ModelControllerClientFactory> modelControllerClientFactory, Supplier<Executor> managementExecutor,\n-                            Supplier<ProcessStateNotifier> processStateNotifier, List<String> exposedSubsystems, String globalPrefix) {\n+                            Supplier<ProcessStateNotifier> processStateNotifier, Consumer<MetricCollector> metricCollectorConsumer) {\n         this.modelControllerClientFactory = modelControllerClientFactory;\n         this.managementExecutor = managementExecutor;\n         this.processStateNotifier = processStateNotifier;\n-        this.exposedSubsystems = exposedSubsystems;\n-        this.globalPrefix = globalPrefix;\n+        this.metricCollectorConsumer = metricCollectorConsumer;\n     }\n \n     @Override\n     public void start(StartContext context) {\n-        modelControllerClient = modelControllerClientFactory.get().createClient(managementExecutor.get());\n+        modelControllerClient = modelControllerClientFactory.get().createSuperUserClient(managementExecutor.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NjI2OQ=="}, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTAyNzM5OnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo1NToyMlrOH9Epvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTowMTozNVrOH9VobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTQwNg==", "bodyText": "This will blow up the entire read.\nWith Smallrye I believe if a Metric throws an exception it is caught and logged but the loop reading all the metrics continues, so other metrics get reported. A failure here though will abort the PrometheusExporter loop.\nSince you are providing an Optional it seems like this could log the failure and fall through.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533801406", "createdAt": "2020-12-01T23:55:22Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "diffHunk": "@@ -0,0 +1,86 @@\n+\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.metrics;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.wildfly.extension.metrics._private.MetricsLogger.LOGGER;\n+\n+import java.util.OptionalDouble;\n+\n+import org.jboss.as.controller.LocalModelControllerClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.dmr.ModelNode;\n+import org.wildfly.extension.metrics._private.MetricsLogger;\n+\n+public class WildFlyMetric implements Metric {\n+\n+    private LocalModelControllerClient modelControllerClient;\n+    private final PathAddress address;\n+    private final String attributeName;\n+\n+    public WildFlyMetric(LocalModelControllerClient modelControllerClient, PathAddress address, String attributeName) {\n+        this.modelControllerClient = modelControllerClient;\n+        this.address = address;\n+        this.attributeName = attributeName;\n+    }\n+\n+    @Override\n+    public OptionalDouble getValue() {\n+        ModelNode result = readAttributeValue(address, attributeName);\n+        if (result.isDefined()) {\n+            try {\n+                return OptionalDouble.of(result.asDouble());\n+            } catch (Exception e) {\n+                throw MetricsLogger.LOGGER.unableToConvertAttribute(attributeName, address, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTU5Ng==", "bodyText": "done", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079596", "createdAt": "2020-12-02T11:01:35Z", "author": {"login": "jmesnil"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "diffHunk": "@@ -0,0 +1,86 @@\n+\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.metrics;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.wildfly.extension.metrics._private.MetricsLogger.LOGGER;\n+\n+import java.util.OptionalDouble;\n+\n+import org.jboss.as.controller.LocalModelControllerClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.dmr.ModelNode;\n+import org.wildfly.extension.metrics._private.MetricsLogger;\n+\n+public class WildFlyMetric implements Metric {\n+\n+    private LocalModelControllerClient modelControllerClient;\n+    private final PathAddress address;\n+    private final String attributeName;\n+\n+    public WildFlyMetric(LocalModelControllerClient modelControllerClient, PathAddress address, String attributeName) {\n+        this.modelControllerClient = modelControllerClient;\n+        this.address = address;\n+        this.attributeName = attributeName;\n+    }\n+\n+    @Override\n+    public OptionalDouble getValue() {\n+        ModelNode result = readAttributeValue(address, attributeName);\n+        if (result.isDefined()) {\n+            try {\n+                return OptionalDouble.of(result.asDouble());\n+            } catch (Exception e) {\n+                throw MetricsLogger.LOGGER.unableToConvertAttribute(attributeName, address, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMTQwNg=="}, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTAzNTk5OnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzo1ODo0MVrOH9Euow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTowMTo0MFrOH9Voog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjY1OQ==", "bodyText": "RBAC failures could be logged at a lower level.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533802659", "createdAt": "2020-12-01T23:58:41Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "diffHunk": "@@ -0,0 +1,86 @@\n+\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.metrics;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.wildfly.extension.metrics._private.MetricsLogger.LOGGER;\n+\n+import java.util.OptionalDouble;\n+\n+import org.jboss.as.controller.LocalModelControllerClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.dmr.ModelNode;\n+import org.wildfly.extension.metrics._private.MetricsLogger;\n+\n+public class WildFlyMetric implements Metric {\n+\n+    private LocalModelControllerClient modelControllerClient;\n+    private final PathAddress address;\n+    private final String attributeName;\n+\n+    public WildFlyMetric(LocalModelControllerClient modelControllerClient, PathAddress address, String attributeName) {\n+        this.modelControllerClient = modelControllerClient;\n+        this.address = address;\n+        this.attributeName = attributeName;\n+    }\n+\n+    @Override\n+    public OptionalDouble getValue() {\n+        ModelNode result = readAttributeValue(address, attributeName);\n+        if (result.isDefined()) {\n+            try {\n+                return OptionalDouble.of(result.asDouble());\n+            } catch (Exception e) {\n+                throw MetricsLogger.LOGGER.unableToConvertAttribute(attributeName, address, e);\n+            }\n+        }\n+        return OptionalDouble.empty();\n+    }\n+\n+    private ModelNode readAttributeValue(PathAddress address, String attributeName) {\n+        final ModelNode readAttributeOp = new ModelNode();\n+        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n+        readAttributeOp.get(OP_ADDR).set(address.toModelNode());\n+        readAttributeOp.get(ModelDescriptionConstants.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n+        readAttributeOp.get(NAME).set(attributeName);\n+        ModelNode response = modelControllerClient.execute(readAttributeOp);\n+        String error = getFailureDescription(response);\n+        if (error != null) {\n+            LOGGER.unableToReadAttribute(attributeName, address, error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTY1MA==", "bodyText": "done", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079650", "createdAt": "2020-12-02T11:01:40Z", "author": {"login": "jmesnil"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/WildFlyMetric.java", "diffHunk": "@@ -0,0 +1,86 @@\n+\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.metrics;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.wildfly.extension.metrics._private.MetricsLogger.LOGGER;\n+\n+import java.util.OptionalDouble;\n+\n+import org.jboss.as.controller.LocalModelControllerClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.descriptions.ModelDescriptionConstants;\n+import org.jboss.dmr.ModelNode;\n+import org.wildfly.extension.metrics._private.MetricsLogger;\n+\n+public class WildFlyMetric implements Metric {\n+\n+    private LocalModelControllerClient modelControllerClient;\n+    private final PathAddress address;\n+    private final String attributeName;\n+\n+    public WildFlyMetric(LocalModelControllerClient modelControllerClient, PathAddress address, String attributeName) {\n+        this.modelControllerClient = modelControllerClient;\n+        this.address = address;\n+        this.attributeName = attributeName;\n+    }\n+\n+    @Override\n+    public OptionalDouble getValue() {\n+        ModelNode result = readAttributeValue(address, attributeName);\n+        if (result.isDefined()) {\n+            try {\n+                return OptionalDouble.of(result.asDouble());\n+            } catch (Exception e) {\n+                throw MetricsLogger.LOGGER.unableToConvertAttribute(attributeName, address, e);\n+            }\n+        }\n+        return OptionalDouble.empty();\n+    }\n+\n+    private ModelNode readAttributeValue(PathAddress address, String attributeName) {\n+        final ModelNode readAttributeOp = new ModelNode();\n+        readAttributeOp.get(OP).set(READ_ATTRIBUTE_OPERATION);\n+        readAttributeOp.get(OP_ADDR).set(address.toModelNode());\n+        readAttributeOp.get(ModelDescriptionConstants.INCLUDE_UNDEFINED_METRIC_VALUES).set(false);\n+        readAttributeOp.get(NAME).set(attributeName);\n+        ModelNode response = modelControllerClient.execute(readAttributeOp);\n+        String error = getFailureDescription(response);\n+        if (error != null) {\n+            LOGGER.unableToReadAttribute(attributeName, address, error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMjY1OQ=="}, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA0MjMyOnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMDo1OVrOH9EyMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMTowMTo1M1rOH9VpEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzU3MQ==", "bodyText": "^^^", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803571", "createdAt": "2020-12-02T00:00:59Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3OTc2MA==", "bodyText": "oops, sorry about that", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534079760", "createdAt": "2020-12-02T11:01:53Z", "author": {"login": "jmesnil"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzU3MQ=="}, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA0MzM0OnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMToxN1rOH9Eyvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMToxN1rOH9Eyvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzcxMQ==", "bodyText": "^^^", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803711", "createdAt": "2020-12-02T00:01:17Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA0NDQwOnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMToyOFrOH9EzPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMToyOFrOH9EzPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzgzOA==", "bodyText": "^^^", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803838", "createdAt": "2020-12-02T00:01:28Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");\n+                    metricCollector.get().collectResourceMetrics(rootResource,\n+                            managementResourceRegistration,\n+                            // prepend the deployment address to the subsystem resource address\n+                            address -> deploymentAddress.append(address),\n+                            exposeAnySubsystem, exposedSubsystems, prefix,\n+                            registration);\n+                } catch (Throwable t) {\n+                    System.out.println(\">>> JFM DeploymentMetricService.error\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA0NTYyOnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMTo0NVrOH9Ez1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMTo0NVrOH9Ez1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwMzk4OA==", "bodyText": "^^^", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533803988", "createdAt": "2020-12-02T00:01:45Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");\n+                    metricCollector.get().collectResourceMetrics(rootResource,\n+                            managementResourceRegistration,\n+                            // prepend the deployment address to the subsystem resource address\n+                            address -> deploymentAddress.append(address),\n+                            exposeAnySubsystem, exposedSubsystems, prefix,\n+                            registration);\n+                } catch (Throwable t) {\n+                    System.out.println(\">>> JFM DeploymentMetricService.error\");\n+                    t.printStackTrace();\n+                    throw t;\n+                }\n+                startContext.complete();\n+            }\n+        };\n+        try {\n+            managementExecutor.get().execute(task);\n+        } catch (RejectedExecutionException e) {\n+            task.run();\n+        } finally {\n+            startContext.asynchronous();\n+        }\n+    }\n+\n+    @Override\n+    public void stop(StopContext stopContext) {\n+        System.out.println(\"JFM DeploymentMetricService.stop start \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA0NTgzOnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMTo1MVrOH9Ez9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowMTo1MVrOH9Ez9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwNDAyMg==", "bodyText": "^^^", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533804022", "createdAt": "2020-12-02T00:01:51Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/deployment/DeploymentMetricService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.wildfly.extension.metrics.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.DEPLOYMENT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBDEPLOYMENT;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.METRICS_REGISTRY_RUNTIME_CAPABILITY;\n+import static org.wildfly.extension.metrics.MetricsSubsystemDefinition.WILDFLY_COLLECTOR;\n+\n+import java.util.List;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.function.Supplier;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.registry.ManagementResourceRegistration;\n+import org.jboss.as.controller.registry.Resource;\n+import org.jboss.as.server.ServerService;\n+import org.jboss.as.server.deployment.Attachments;\n+import org.jboss.as.server.deployment.DeploymentCompleteServiceProcessor;\n+import org.jboss.as.server.deployment.DeploymentUnit;\n+import org.jboss.msc.Service;\n+import org.jboss.msc.service.ServiceBuilder;\n+import org.jboss.msc.service.ServiceTarget;\n+import org.jboss.msc.service.StartContext;\n+import org.jboss.msc.service.StopContext;\n+import org.wildfly.extension.metrics.MetricCollector;\n+import org.wildfly.extension.metrics.MetricRegistration;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+\n+public class DeploymentMetricService implements Service {\n+\n+\n+    private final Resource rootResource;\n+    private final ManagementResourceRegistration managementResourceRegistration;\n+    private PathAddress deploymentAddress;\n+    private final Supplier<MetricCollector> metricCollector;\n+    private Supplier<MetricRegistry> metricRegistry;\n+    private Supplier<Executor> managementExecutor;\n+    private final boolean exposeAnySubsystem;\n+    private final List<String> exposedSubsystems;\n+    private final String prefix;\n+    private MetricRegistration registration;\n+\n+    public static void install(ServiceTarget serviceTarget, DeploymentUnit deploymentUnit, Resource rootResource, ManagementResourceRegistration managementResourceRegistration, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        PathAddress deploymentAddress = createDeploymentAddressPrefix(deploymentUnit);\n+\n+        ServiceBuilder<?> sb = serviceTarget.addService(deploymentUnit.getServiceName().append(\"metrics\"));\n+        Supplier<MetricCollector> metricCollector = sb.requires(WILDFLY_COLLECTOR);\n+        Supplier<MetricRegistry> metricRegistry = sb.requires(METRICS_REGISTRY_RUNTIME_CAPABILITY.getCapabilityServiceName());\n+        Supplier<Executor> managementExecutor = sb.requires(ServerService.EXECUTOR_CAPABILITY.getCapabilityServiceName());\n+\n+        /*\n+         * The deployment metric service depends on the deployment complete service name to ensure that the metrics from\n+         * the deployment are collected and registered once the deployment services have all been properly installed.\n+         */\n+        sb.requires(DeploymentCompleteServiceProcessor.serviceName(deploymentUnit.getServiceName()));\n+        sb.setInstance(new DeploymentMetricService(rootResource, managementResourceRegistration, deploymentAddress, metricCollector, metricRegistry, managementExecutor,\n+                exposeAnySubsystem, exposedSubsystems, prefix))\n+                .install();\n+    }\n+\n+    private DeploymentMetricService(Resource rootResource, ManagementResourceRegistration managementResourceRegistration, PathAddress deploymentAddress,\n+                                    Supplier<MetricCollector> metricCollector, Supplier<MetricRegistry> metricRegistry,\n+                                    Supplier<Executor> managementExecutor, boolean exposeAnySubsystem, List<String> exposedSubsystems, String prefix) {\n+        this.rootResource = rootResource;\n+        this.managementResourceRegistration = managementResourceRegistration;\n+        this.deploymentAddress = deploymentAddress;\n+        this.metricCollector = metricCollector;\n+        this.metricRegistry = metricRegistry;\n+        this.managementExecutor = managementExecutor;\n+        this.exposeAnySubsystem = exposeAnySubsystem;\n+        this.exposedSubsystems = exposedSubsystems;\n+        this.prefix = prefix;\n+    }\n+\n+    @Override\n+    public void start(StartContext startContext) {\n+        System.out.println(\"DeploymentMetricService.start\");\n+        final Runnable task = new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    registration = new MetricRegistration(metricRegistry.get());\n+                    System.out.println(\">>> JFM DeploymentMetricService.start\");\n+                    metricCollector.get().collectResourceMetrics(rootResource,\n+                            managementResourceRegistration,\n+                            // prepend the deployment address to the subsystem resource address\n+                            address -> deploymentAddress.append(address),\n+                            exposeAnySubsystem, exposedSubsystems, prefix,\n+                            registration);\n+                } catch (Throwable t) {\n+                    System.out.println(\">>> JFM DeploymentMetricService.error\");\n+                    t.printStackTrace();\n+                    throw t;\n+                }\n+                startContext.complete();\n+            }\n+        };\n+        try {\n+            managementExecutor.get().execute(task);\n+        } catch (RejectedExecutionException e) {\n+            task.run();\n+        } finally {\n+            startContext.asynchronous();\n+        }\n+    }\n+\n+    @Override\n+    public void stop(StopContext stopContext) {\n+        System.out.println(\"JFM DeploymentMetricService.stop start \");\n+        registration.unregister();\n+        System.out.println(\"JFM DeploymentMetricService.stop end\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA1ODcwOnYy", "diffSide": "RIGHT", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowNzoyMlrOH9E7Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDowNzoyMlrOH9E7Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwNTkxMQ==", "bodyText": "No longer used methods can be commented to save metaspace.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533805911", "createdAt": "2020-12-02T00:07:22Z", "author": {"login": "bstansberry"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/_private/MicroProfileMetricsLogger.java", "diffHunk": "@@ -57,12 +57,15 @@\n     @Message(id = 2, value = \"Failed to initialize metrics from JMX MBeans\")\n     IllegalArgumentException failedInitializeJMXRegistrar(@Cause IOException e);\n \n+    // no longer used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTA3OTYyOnYy", "diffSide": "RIGHT", "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDoxNjoyMFrOH9FHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxNjo1N1rOH9ufWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwODk1NQ==", "bodyText": "It would be nice if SmallRye had something like a\npublic interface OptionalMetric extends Metric {\n\n  Optional<Metric> getOptional();\n}\n\nThen check for that when exporting and if that's the Metric type use the Optional, skipping export !optional.isPresent().\nResponding with zero exposes the metric names which in theory could be privileged information.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r533808955", "createdAt": "2020-12-02T00:16:20Z", "author": {"login": "bstansberry"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.microprofile.metrics;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.BASE;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.VENDOR;\n+import static org.wildfly.extension.metrics.MetricMetadata.Type.COUNTER;\n+\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+\n+import io.smallrye.metrics.ExtendedMetadata;\n+import io.smallrye.metrics.MetricRegistries;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.jboss.as.controller.client.helpers.MeasurementUnit;\n+import org.wildfly.extension.metrics.MetricID;\n+import org.wildfly.extension.metrics.MetricMetadata;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+import org.wildfly.extension.metrics.WildFlyMetricMetadata;\n+\n+public class MicroProfileVendorMetricRegistry implements MetricRegistry {\n+\n+    final org.eclipse.microprofile.metrics.MetricRegistry vendorRegistry = MetricRegistries.get(VENDOR);\n+\n+    @Override\n+    public void registerMetric(org.wildfly.extension.metrics.Metric metric, MetricMetadata metadata) {\n+        final Metric mpMetric;\n+        if (metadata.getType() == COUNTER) {\n+            mpMetric = new Counter() {\n+                @Override\n+                public void inc() {\n+                }\n+\n+                @Override\n+                public void inc(long n) {\n+                }\n+\n+                @Override\n+                public long getCount() {\n+                    OptionalDouble value = metric.getValue();\n+                    return  Double.valueOf(value.orElse(0)).longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA4MTY3Nw==", "bodyText": "Yes, that's a big difference between the base metrics and the microprofile-metrics-smallryesubsystem.\nIn the base metrics, if the metric value is not defined, I skip exposing any info about that (including its name and description): \n  \n    \n      wildfly/metrics/src/main/java/org/wildfly/extension/metrics/PrometheusExporter.java\n    \n    \n         Line 48\n      in\n      9c2367e\n    \n    \n    \n    \n\n        \n          \n           if (!metricValue.isPresent()) { \n        \n    \n  \n\n\nWith MicroProfile Metrics, any registered metric is considered valid and I have no point where I can \"validated\" the metric value before it is printed out.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534081677", "createdAt": "2020-12-02T11:05:11Z", "author": {"login": "jmesnil"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.microprofile.metrics;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.BASE;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.VENDOR;\n+import static org.wildfly.extension.metrics.MetricMetadata.Type.COUNTER;\n+\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+\n+import io.smallrye.metrics.ExtendedMetadata;\n+import io.smallrye.metrics.MetricRegistries;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.jboss.as.controller.client.helpers.MeasurementUnit;\n+import org.wildfly.extension.metrics.MetricID;\n+import org.wildfly.extension.metrics.MetricMetadata;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+import org.wildfly.extension.metrics.WildFlyMetricMetadata;\n+\n+public class MicroProfileVendorMetricRegistry implements MetricRegistry {\n+\n+    final org.eclipse.microprofile.metrics.MetricRegistry vendorRegistry = MetricRegistries.get(VENDOR);\n+\n+    @Override\n+    public void registerMetric(org.wildfly.extension.metrics.Metric metric, MetricMetadata metadata) {\n+        final Metric mpMetric;\n+        if (metadata.getType() == COUNTER) {\n+            mpMetric = new Counter() {\n+                @Override\n+                public void inc() {\n+                }\n+\n+                @Override\n+                public void inc(long n) {\n+                }\n+\n+                @Override\n+                public long getCount() {\n+                    OptionalDouble value = metric.getValue();\n+                    return  Double.valueOf(value.orElse(0)).longValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwODk1NQ=="}, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4Njg3Mg==", "bodyText": "@jmesnil If you think the OptionalMetric idea is useful I can file an RFE for such an SPI in smallrye. It's kind of hacky because it extends 'Metric' just to be an acceptable type for the registry, but the normal Metric impl really isn't meant to be used.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534486872", "createdAt": "2020-12-02T21:16:57Z", "author": {"login": "bstansberry"}, "path": "microprofile/metrics-smallrye/src/main/java/org/wildfly/extension/microprofile/metrics/MicroProfileVendorMetricRegistry.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.wildfly.extension.microprofile.metrics;\n+\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.BASE;\n+import static org.eclipse.microprofile.metrics.MetricRegistry.Type.VENDOR;\n+import static org.wildfly.extension.metrics.MetricMetadata.Type.COUNTER;\n+\n+import java.util.Optional;\n+import java.util.OptionalDouble;\n+\n+import io.smallrye.metrics.ExtendedMetadata;\n+import io.smallrye.metrics.MetricRegistries;\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Gauge;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.Metric;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.Tag;\n+import org.jboss.as.controller.client.helpers.MeasurementUnit;\n+import org.wildfly.extension.metrics.MetricID;\n+import org.wildfly.extension.metrics.MetricMetadata;\n+import org.wildfly.extension.metrics.MetricRegistry;\n+import org.wildfly.extension.metrics.WildFlyMetricMetadata;\n+\n+public class MicroProfileVendorMetricRegistry implements MetricRegistry {\n+\n+    final org.eclipse.microprofile.metrics.MetricRegistry vendorRegistry = MetricRegistries.get(VENDOR);\n+\n+    @Override\n+    public void registerMetric(org.wildfly.extension.metrics.Metric metric, MetricMetadata metadata) {\n+        final Metric mpMetric;\n+        if (metadata.getType() == COUNTER) {\n+            mpMetric = new Counter() {\n+                @Override\n+                public void inc() {\n+                }\n+\n+                @Override\n+                public void inc(long n) {\n+                }\n+\n+                @Override\n+                public long getCount() {\n+                    OptionalDouble value = metric.getValue();\n+                    return  Double.valueOf(value.orElse(0)).longValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgwODk1NQ=="}, "originalCommit": {"oid": "44340393fe6163552c5366082cf5fc0ed4c710ad"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MzQ1ODM0OnYy", "diffSide": "RIGHT", "path": "metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMToxMDoxMFrOH9uRQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODowMDoyN1rOH-FTPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzI2Ng==", "bodyText": "This still seems high.  IIRC when I turned on RBAC to look at WFLY-11933 there were tons of items logged. If something was polling fairly frequently it would be really spammy.\nHmm, I probably hadn't secured the endpoint so maybe I was getting logging for every management API metric. I suppose someone might do that though.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534483266", "createdAt": "2020-12-02T21:10:10Z", "author": {"login": "bstansberry"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2018, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.extension.metrics._private;\n+\n+import static org.jboss.logging.Logger.Level.INFO;\n+import static org.jboss.logging.Logger.Level.WARN;\n+\n+import java.io.IOException;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.logging.BasicLogger;\n+import org.jboss.logging.Logger;\n+import org.jboss.logging.annotations.Cause;\n+import org.jboss.logging.annotations.LogMessage;\n+import org.jboss.logging.annotations.Message;\n+import org.jboss.logging.annotations.MessageLogger;\n+\n+/**\n+ * Log messages for WildFly metrics Extension.\n+ * @author <a href=\"http://jmesnil.net/\">Jeff Mesnil</a> (c) 2018 Red Hat inc.\n+ */\n+@MessageLogger(projectCode = \"WFLYMETRICS\", length = 4)\n+public interface MetricsLogger extends BasicLogger {\n+    /**\n+     * A logger with the category {@code org.wildfly.extension.batch}.\n+     */\n+    MetricsLogger LOGGER = Logger.getMessageLogger(MetricsLogger.class, \"org.wildfly.extension.metrics\");\n+\n+    /**\n+     * Logs an informational message indicating the subsystem is being activated.\n+     */\n+    @LogMessage(level = INFO)\n+    @Message(id = 1, value = \"Activating Base Metrics Subsystem\")\n+    void activatingSubsystem();\n+\n+    @Message(id = 2, value = \"Failed to initialize metrics from JMX MBeans\")\n+    IllegalArgumentException failedInitializeJMXRegistrar(@Cause IOException e);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 3, value = \"Unable to read attribute %s on %s: %s.\")\n+    void unableToReadAttribute(String attributeName, PathAddress address, String error);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 4, value = \"Unable to convert attribute %s on %s to Double value.\")\n+    void unableToConvertAttribute(String attributeName, PathAddress address, @Cause Exception exception);\n+\n+    @LogMessage(level = INFO)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abf38569632737e5e7df9e65efad615b6b1a8576"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg2MDYwNA==", "bodyText": "ok, I'll do that in a DEBUG log (and get rid of the i18ned message)", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r534860604", "createdAt": "2020-12-03T08:00:27Z", "author": {"login": "jmesnil"}, "path": "metrics/src/main/java/org/wildfly/extension/metrics/_private/MetricsLogger.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2018, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.wildfly.extension.metrics._private;\n+\n+import static org.jboss.logging.Logger.Level.INFO;\n+import static org.jboss.logging.Logger.Level.WARN;\n+\n+import java.io.IOException;\n+\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.logging.BasicLogger;\n+import org.jboss.logging.Logger;\n+import org.jboss.logging.annotations.Cause;\n+import org.jboss.logging.annotations.LogMessage;\n+import org.jboss.logging.annotations.Message;\n+import org.jboss.logging.annotations.MessageLogger;\n+\n+/**\n+ * Log messages for WildFly metrics Extension.\n+ * @author <a href=\"http://jmesnil.net/\">Jeff Mesnil</a> (c) 2018 Red Hat inc.\n+ */\n+@MessageLogger(projectCode = \"WFLYMETRICS\", length = 4)\n+public interface MetricsLogger extends BasicLogger {\n+    /**\n+     * A logger with the category {@code org.wildfly.extension.batch}.\n+     */\n+    MetricsLogger LOGGER = Logger.getMessageLogger(MetricsLogger.class, \"org.wildfly.extension.metrics\");\n+\n+    /**\n+     * Logs an informational message indicating the subsystem is being activated.\n+     */\n+    @LogMessage(level = INFO)\n+    @Message(id = 1, value = \"Activating Base Metrics Subsystem\")\n+    void activatingSubsystem();\n+\n+    @Message(id = 2, value = \"Failed to initialize metrics from JMX MBeans\")\n+    IllegalArgumentException failedInitializeJMXRegistrar(@Cause IOException e);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 3, value = \"Unable to read attribute %s on %s: %s.\")\n+    void unableToReadAttribute(String attributeName, PathAddress address, String error);\n+\n+    @LogMessage(level = WARN)\n+    @Message(id = 4, value = \"Unable to convert attribute %s on %s to Double value.\")\n+    void unableToConvertAttribute(String attributeName, PathAddress address, @Cause Exception exception);\n+\n+    @LogMessage(level = INFO)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ4MzI2Ng=="}, "originalCommit": {"oid": "abf38569632737e5e7df9e65efad615b6b1a8576"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODM2NTc5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoxODowMlrOIBMpwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNTo1NFrOIBamww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyNjc4Ng==", "bodyText": "I do not see * rendered properly in github Preview mode.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r538126786", "createdAt": "2020-12-08T08:18:02Z", "author": {"login": "mchoma"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from the WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7767ec25ae7867f5112e12ae7dbc945b53ae5d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NTM5NQ==", "bodyText": "fixed", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r538355395", "createdAt": "2020-12-08T13:15:54Z", "author": {"login": "jmesnil"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from the WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyNjc4Ng=="}, "originalCommit": {"oid": "fc7767ec25ae7867f5112e12ae7dbc945b53ae5d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODM2OTM4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwODoxOTowM1rOIBMrqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNTo0MFrOIBalyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyNzI3NQ==", "bodyText": "Same. Not rendered properly.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r538127275", "createdAt": "2020-12-08T08:19:03Z", "author": {"login": "mchoma"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from the WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7767ec25ae7867f5112e12ae7dbc945b53ae5d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NTE0NA==", "bodyText": "fixed (this seems to be an issue with Asciidoc rendering", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r538355144", "createdAt": "2020-12-08T13:15:40Z", "author": {"login": "jmesnil"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/Metrics.adoc", "diffHunk": "@@ -0,0 +1,105 @@\n+[[MicroProfile_Metrics_SmallRye]]\n+= Metrics Subsystem Configuration\n+\n+[NOTE]\n+====\n+This subsystem exposes only base metrics from the WildFly Management Model and JVM MBeans.\n+\n+Support for https://microprofile.io/project/eclipse/microprofile-metrics[Eclipse MicroProfile Metrics] is provided by\n+the _microprofile-metrics-smallrye_ subsystem.\n+====\n+\n+[[required-extension-metrics]]\n+== Extension\n+\n+This `org.wildfly.extension.metrics` extension is included in all the standalone configurations included in the\n+WildFly distribution as well as the `metrics` layer.\n+\n+You can also add the extension to a configuration without it either by adding\n+an `<extension module=\"org.wildfly.extension.metrics\"/>`\n+element to the xml or by using the following CLI operation:\n+\n+[source,options=\"nowrap\"]\n+----\n+[standalone@localhost:9990 /] /extension=org.wildfly.extension.metrics:add\n+----\n+\n+== Management Model\n+\n+The `/subsystem=metrics` resource defines three attributes:\n+\n+* `security-enabled` - a boolean to indicate whether authentication is required to access the HTTP metrics endpoint (described below). By default, it is `true`. The\n+standalone configurations explicitly sets it to `false` to accept unauthenticated access to the HTTP endpoints.\n+* `exposed-subsystems` - a list of strings corresponding to the names of subsystems that exposes their metrics in the HTTP metrics endpoints.\n+By default, it is not defined (there will be no metrics exposed by subsystem. The special wildcard `*` can be used to expose metrics from _all_ subsystems. The standalone\n+configuration sets this attribute to `*`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODEyNzI3NQ=="}, "originalCommit": {"oid": "fc7767ec25ae7867f5112e12ae7dbc945b53ae5d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3ODY5MTUzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/MicroProfile_Metrics.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOToyODo0NlrOIBPnUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwOTozNjo0OFrOIBP9rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3NTMxMg==", "bodyText": "What about exposed-subsystems and prefix does same overriding logic apply as well in case of these properties.\nIf metrics subsystem is responsible for registring /metrics http endpoint and will be always present, do we really need this overriding logic?", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r538175312", "createdAt": "2020-12-08T09:28:46Z", "author": {"login": "mchoma"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/MicroProfile_Metrics.adoc", "diffHunk": "@@ -35,9 +35,9 @@ standalone configurations explicitly sets it to `false` to accept unauthenticate\n The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n \n Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=microprofile-metrics-smallrye` resource.\n-If it is set to `true`, the HTTP client must be authenticated.\n+The value of this attribute will override the `security-enabled` attribute of the `/subsystem=metrics` resource (documented in <<metrics-http-endpoint,Metrics subsystem configuration guide>>).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc7767ec25ae7867f5112e12ae7dbc945b53ae5d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE4MTAzNw==", "bodyText": "exposed-subsystems and prefix are specific to the microprofile-metrics-smallrye and do not provide this overriding logic.\nThis special case to handle the security-enabled is to keep it backwards compatible. Users that change this value expects to be able to use it. Making it a no-op would have break their configuration.", "url": "https://github.com/wildfly/wildfly/pull/13756#discussion_r538181037", "createdAt": "2020-12-08T09:36:48Z", "author": {"login": "jmesnil"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/MicroProfile_Metrics.adoc", "diffHunk": "@@ -35,9 +35,9 @@ standalone configurations explicitly sets it to `false` to accept unauthenticate\n The Metric HTTP endpoint is accessible on WildFly HTTP management interface http://localhost:9990/metrics[http://localhost:9990/metrics].\n \n Secured access to the HTTP endpoint is controlled by the `security-enabled` attribute of the `/subsystem=microprofile-metrics-smallrye` resource.\n-If it is set to `true`, the HTTP client must be authenticated.\n+The value of this attribute will override the `security-enabled` attribute of the `/subsystem=metrics` resource (documented in <<metrics-http-endpoint,Metrics subsystem configuration guide>>).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODE3NTMxMg=="}, "originalCommit": {"oid": "fc7767ec25ae7867f5112e12ae7dbc945b53ae5d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4087, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}