{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDIyNTQ1", "number": 13277, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0OTo1MFrOD7Uj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozMjowOVrOEEUpfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTI5NDI3OnYy", "diffSide": "RIGHT", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjo0OTo1MFrOGTktvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozNzozN1rOGh4BoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA==", "bodyText": "If the use of this capability outside this subsystem only needs a dependency for ordering reasons and doesn't need access to a particular type, then the capability should not provide a type, as that becomes an unneeded part of its API contract.\nServerAdd in messaging-activemq doesn't seem to need anything but a dependency; it doesn't inject.\nIf that's the case in other external uses, internal-to-the-subsystem wiring that might need to inject ChannelUpgradeHandler doesn't have to use the capability.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r423177660", "createdAt": "2020-05-11T16:49:50Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODE3NA==", "bodyText": "The endpoint @rachmatowicz has in mind is this one:\nhttps://github.com/wildfly/wildfly-core/blob/2f3e21463e446fc5aad1e5b24f4ec1222e02e9ab/remoting/subsystem/src/main/java/org/jboss/as/remoting/RemotingHttpUpgradeService.java#L131\nThus, I believe the service type should be part of the capability contract.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424098174", "createdAt": "2020-05-12T23:53:19Z", "author": {"login": "pferraro"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQyNjg0OA==", "bodyText": "OK, thanks. @fl4via should look at this overall, but in particular that point as it makes the contract a bit stronger to include it in the capability registry.\nOf course the coupling already exists but when things get formalized like this that's a good time to confirm the contracts are what's wanted.\nThanks, @rachmatowicz for digging into this stuff; it's good to get these contracts in place.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r425426848", "createdAt": "2020-05-14T20:59:21Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQzMDc3OQ==", "bodyText": "Nit: that line is too long. :) It's good to see these contracts without scrolling.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r425430779", "createdAt": "2020-05-14T21:06:56Z", "author": {"login": "bstansberry"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk0NzcwMw==", "bodyText": "done.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426947703", "createdAt": "2020-05-18T23:33:35Z", "author": {"login": "rachmatowicz"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE3NDExMw==", "bodyText": "@bstansberry  you have my okay, I think the contract is what's wanted, given the usage in wfcore pointed by @pferraro", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438174113", "createdAt": "2020-06-10T14:37:37Z", "author": {"login": "fl4via"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerResourceDefinition.java", "diffHunk": "@@ -42,10 +44,14 @@\n \n /**\n  * @author <a href=\"mailto:tomaz.cerar@redhat.com\">Tomaz Cerar</a> (c) 2012 Red Hat Inc.\n+ * @author Richard Achmatowicz (c) 2020 Red Hat Inc.\n  */\n public class HttpListenerResourceDefinition extends ListenerResourceDefinition {\n-    protected static final HttpListenerResourceDefinition INSTANCE = new HttpListenerResourceDefinition();\n \n+    static final RuntimeCapability<Void> HTTP_UPGRADE_REGISTRY_CAPABILITY = RuntimeCapability.Builder.of(Capabilities.CAPABILITY_HTTP_UPGRADE_REGISTRY, true, ChannelUpgradeHandler.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE3NzY2MA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzAzMTM4OnYy", "diffSide": "RIGHT", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMzoxOVrOGUw5pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzo0NDo0NVrOGU8sSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTg5NQ==", "bodyText": "Perhaps the field should be @ Deprecated in that case to let other subsystems know.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424425895", "createdAt": "2020-05-13T13:13:19Z", "author": {"login": "rhusar"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    // remove this once other subsystems convert to capabilities", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxOTA4Mw==", "bodyText": "Thanks. Done.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424619083", "createdAt": "2020-05-13T17:44:45Z", "author": {"login": "rachmatowicz"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    // remove this once other subsystems convert to capabilities", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNTg5NQ=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE0MzMwOnYy", "diffSide": "RIGHT", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzoxOVrOGU8Dog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo1MTo0OVrOGXIsSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODY3NA==", "bodyText": "Use: Constants.AJP_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424608674", "createdAt": "2020-05-13T17:27:19Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMjg0Mg==", "bodyText": "done.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426912842", "createdAt": "2020-05-18T21:51:49Z", "author": {"login": "rachmatowicz"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODY3NA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE0NDkwOnYy", "diffSide": "RIGHT", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo0MVrOGU8ElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo1MTo1N1rOGXIsgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxNg==", "bodyText": "Use: Constants.HTTP_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424608916", "createdAt": "2020-05-13T17:27:41Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMjg5Nw==", "bodyText": "done", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426912897", "createdAt": "2020-05-18T21:51:57Z", "author": {"login": "rachmatowicz"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwODkxNg=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE0NjA5OnYy", "diffSide": "RIGHT", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo1N1rOGU8FSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyNzo1N1rOGU8FSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYwOTA5OQ==", "bodyText": "Use: Constants.HTTPS_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424609099", "createdAt": "2020-05-13T17:27:57Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowConnectorTestCase.java", "diffHunk": "@@ -48,9 +49,9 @@\n     @Test\n     public void getType() {\n         OptionMap options = OptionMap.builder().getMap();\n-        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(\"\", \"\", options, OptionMap.EMPTY)).getType());\n-        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(\"\", \"\", options, OptionMap.EMPTY, false, false, false)).getType());\n-        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(\"\", \"\", options, null, OptionMap.EMPTY, false)).getType());\n+        assertSame(Connector.Type.AJP, new UndertowConnector(new AjpListenerService(PathAddress.pathAddress(\"ajp-listner\", \"dummy\"), \"\", options, OptionMap.EMPTY)).getType());\n+        assertSame(Connector.Type.HTTP, new UndertowConnector(new HttpListenerService(PathAddress.pathAddress(\"http-listner\", \"dummy\"), \"\" , options, OptionMap.EMPTY, false, false, false)).getType());\n+        assertSame(Connector.Type.HTTPS, new UndertowConnector(new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"dummy\"), \"\", options, null, OptionMap.EMPTY, false)).getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE1Mjg3OnYy", "diffSide": "RIGHT", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzoyOTo0MlrOGU8JWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo1MjowN1rOGXIswA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDEzOA==", "bodyText": "Use: Constants.HTTPS_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424610138", "createdAt": "2020-05-13T17:29:42Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxMjk2MA==", "bodyText": "done.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426912960", "createdAt": "2020-05-18T21:52:07Z", "author": {"login": "rachmatowicz"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxMDEzOA=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE4Mjg3OnYy", "diffSide": "RIGHT", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozNzo1M1rOGU8ceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjoxMDo0NFrOGXJH4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTAzMw==", "bodyText": "Since serviceBuilder is a CapabilityServiceBuilder, use:\nserviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424615033", "createdAt": "2020-05-13T17:37:53Z", "author": {"login": "pferraro"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java", "diffHunk": "@@ -76,6 +73,8 @@ void configureAdditionalDependencies(OperationContext context, CapabilityService\n             ServiceName serviceName = context.getCapabilityServiceName(REF_SOCKET_BINDING, redirectBindingRef.asString(), SocketBinding.class);\n             serviceBuilder.addDependency(serviceName, SocketBinding.class, service.getRedirectSocket());\n         }\n-        serviceBuilder.addDependency(REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxOTkwNg==", "bodyText": "done", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426919906", "createdAt": "2020-05-18T22:10:44Z", "author": {"login": "rachmatowicz"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerAdd.java", "diffHunk": "@@ -76,6 +73,8 @@ void configureAdditionalDependencies(OperationContext context, CapabilityService\n             ServiceName serviceName = context.getCapabilityServiceName(REF_SOCKET_BINDING, redirectBindingRef.asString(), SocketBinding.class);\n             serviceBuilder.addDependency(serviceName, SocketBinding.class, service.getRedirectSocket());\n         }\n-        serviceBuilder.addDependency(REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNTAzMw=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDE5MTA4OnYy", "diffSide": "RIGHT", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNzozOTo1OVrOGU8hXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjoxMTowN1rOGXJIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNjI4Ng==", "bodyText": "Since serviceBuilder is a CapabilityServiceBuilder, use:\nserviceBuilder.addCapabilityRequirement(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r424616286", "createdAt": "2020-05-13T17:39:59Z", "author": {"login": "pferraro"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java", "diffHunk": "@@ -75,12 +76,15 @@ ListenerService createService(String name, final String serverName, final Operat\n \n         final boolean certificateForwarding = HttpListenerResourceDefinition.CERTIFICATE_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n         final boolean proxyAddressForwarding = HttpListenerResourceDefinition.PROXY_ADDRESS_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n-        return new HttpsListenerService(name, serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n+\n+        return new HttpsListenerService(context.getCurrentAddress(), serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n     }\n \n     @Override\n     void configureAdditionalDependencies(OperationContext context, CapabilityServiceBuilder serviceBuilder, ModelNode model, ListenerService service) throws OperationFailedException {\n-        serviceBuilder.addDependency(HttpListenerAdd.REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyMDA2MA==", "bodyText": "done", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r426920060", "createdAt": "2020-05-18T22:11:07Z", "author": {"login": "rachmatowicz"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpsListenerAdd.java", "diffHunk": "@@ -75,12 +76,15 @@ ListenerService createService(String name, final String serverName, final Operat\n \n         final boolean certificateForwarding = HttpListenerResourceDefinition.CERTIFICATE_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n         final boolean proxyAddressForwarding = HttpListenerResourceDefinition.PROXY_ADDRESS_FORWARDING.resolveModelAttribute(context, model).asBoolean();\n-        return new HttpsListenerService(name, serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n+\n+        return new HttpsListenerService(context.getCurrentAddress(), serverName, listenerBuilder.getMap(), cipherSuites, builder.getMap(), certificateForwarding, proxyAddressForwarding, proxyProtocol);\n     }\n \n     @Override\n     void configureAdditionalDependencies(OperationContext context, CapabilityServiceBuilder serviceBuilder, ModelNode model, ListenerService service) throws OperationFailedException {\n-        serviceBuilder.addDependency(HttpListenerAdd.REGISTRY_SERVICE_NAME, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());\n+\n+        ServiceName httpListenerRegistry = context.getCapabilityServiceName(Capabilities.REF_HTTP_LISTENER_REGISTRY, ListenerRegistry.class);\n+        serviceBuilder.addDependency(httpListenerRegistry, ListenerRegistry.class, ((HttpListenerService) service).getHttpListenerRegistry());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNjI4Ng=="}, "originalCommit": {"oid": "7390b099ef43adc173b5196bb4a151565acbfca8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTEwMTYxOnYy", "diffSide": "RIGHT", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1MjoxMlrOGaMYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1MjoxMlrOGaMYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExODkyNg==", "bodyText": "context.getServiceTarget() should be replaced by context.getCapabilityServiceTarget()", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430118926", "createdAt": "2020-05-26T01:52:12Z", "author": {"login": "pferraro"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPAcceptorAdd.java", "diffHunk": "@@ -55,14 +55,14 @@ protected void performRuntime(OperationContext context, ModelNode operation, Mod\n     void launchServices(OperationContext context, String activeMQServerName, String acceptorName, ModelNode model) throws OperationFailedException {\n         String httpConnectorName = HTTPAcceptorDefinition.HTTP_LISTENER.resolveModelAttribute(context, model).asString();\n \n-        HTTPUpgradeService.installService(context.getServiceTarget(),\n+        HTTPUpgradeService.installService(context,\n                 activeMQServerName,\n                 acceptorName,\n                 httpConnectorName);\n \n         boolean upgradeLegacy = HTTPAcceptorDefinition.UPGRADE_LEGACY.resolveModelAttribute(context, model).asBoolean();\n         if (upgradeLegacy) {\n-            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context.getServiceTarget(),\n+            HTTPUpgradeService.LegacyHttpUpgradeService.installService(context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTEwMzQwOnYy", "diffSide": "RIGHT", "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1MzoyNFrOGaMY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1MzoyNFrOGaMY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExOTE2Mw==", "bodyText": "Install via CapabilityServiceTarget.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430119163", "createdAt": "2020-05-26T01:53:24Z", "author": {"login": "pferraro"}, "path": "messaging-activemq/src/main/java/org/wildfly/extension/messaging/activemq/HTTPUpgradeService.java", "diffHunk": "@@ -89,14 +90,14 @@ public HTTPUpgradeService(String activeMQServerName, String acceptorName, String\n         this.httpListenerName = httpListenerName;\n     }\n \n-    public static void installService(final ServiceTarget serviceTarget, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n+    public static void installService(final OperationContext context, String activeMQServerName, final String acceptorName, final String httpListenerName) {\n \n         final HTTPUpgradeService service = new HTTPUpgradeService(activeMQServerName, acceptorName, httpListenerName);\n         final ServiceBuilder sb =\n-        serviceTarget.addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);\n+        context.getServiceTarget().addService(HTTPAcceptorDefinition.CAPABILITY.getCapabilityServiceName(activeMQServerName,\"http-upgrade-service\", acceptorName), service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTEwNzY3OnYy", "diffSide": "RIGHT", "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1Njo0M1rOGaMbtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwMTo1Njo0M1rOGaMbtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDExOTg2MA==", "bodyText": "Use Constants.HTTPS_LISTENER", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r430119860", "createdAt": "2020-05-26T01:56:43Z", "author": {"login": "pferraro"}, "path": "mod_cluster/undertow/src/test/java/org/wildfly/mod_cluster/undertow/UndertowEngineTestCase.java", "diffHunk": "@@ -50,7 +51,7 @@\n     private final String hostName = \"default-host\";\n     private final String route = \"route\";\n     private final Host host = new Host(this.hostName, Collections.emptyList(), \"ROOT.war\", StatusCodes.NOT_FOUND, false);\n-    private final HttpsListenerService listener = new HttpsListenerService(\"default\", \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);\n+    private final HttpsListenerService listener = new HttpsListenerService(PathAddress.pathAddress(\"https-listner\", \"default\"), \"https\", OptionMap.EMPTY, null, OptionMap.EMPTY, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56550dc98a50355562978d627322e7ee97e7478d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTU0MzY2OnYy", "diffSide": "RIGHT", "path": "legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDowMzowM1rOGh2XMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTo0ODowNlrOGiLzjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Njg2NQ==", "bodyText": "I believe this was added by mistake? Or is it for future test debugging if need arises?", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438146865", "createdAt": "2020-06-10T14:03:03Z", "author": {"login": "fl4via"}, "path": "legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java", "diffHunk": "@@ -153,6 +153,7 @@ private void testMigrateOperation(boolean addLegacyEntries) throws Exception {\n \n         ModelNode response = services.executeOperation(migrateOp);\n \n+        // System.out.println(\"response = \" + response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5ODE4OA==", "bodyText": "These were Jeff debugging statements and this was one of three instances. I have removed them.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438498188", "createdAt": "2020-06-11T01:48:06Z", "author": {"login": "rachmatowicz"}, "path": "legacy/messaging/src/test/java/org/jboss/as/messaging/test/MigrateTestCase.java", "diffHunk": "@@ -153,6 +153,7 @@ private void testMigrateOperation(boolean addLegacyEntries) throws Exception {\n \n         ModelNode response = services.executeOperation(migrateOp);\n \n+        // System.out.println(\"response = \" + response);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE0Njg2NQ=="}, "originalCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTY4MDYxOnYy", "diffSide": "RIGHT", "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxNDozMjowOVrOGh3vUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMjowMDowN1rOGiMALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTQyNQ==", "bodyText": "whenever I see a @deprecated, I think the ideal is to point in a comment what has it been replaced with for future reference", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438169425", "createdAt": "2020-06-10T14:32:09Z", "author": {"login": "fl4via"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUwMTQyMA==", "bodyText": "Done.", "url": "https://github.com/wildfly/wildfly/pull/13277#discussion_r438501420", "createdAt": "2020-06-11T02:00:07Z", "author": {"login": "rachmatowicz"}, "path": "undertow/src/main/java/org/wildfly/extension/undertow/HttpListenerService.java", "diffHunk": "@@ -57,13 +60,16 @@\n \n     private final ChannelUpgradeHandler httpUpgradeHandler = new ChannelUpgradeHandler();\n     protected final InjectedValue<ListenerRegistry> httpListenerRegistry = new InjectedValue<>();\n+    @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE2OTQyNQ=="}, "originalCommit": {"oid": "17e1093199d6fda863997d16df1224ddbfe6dd30"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4302, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}