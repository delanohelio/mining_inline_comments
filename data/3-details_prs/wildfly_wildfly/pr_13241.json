{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzI0ODgz", "number": 13241, "title": " Test Case for the issue WFLY-13375, if connection factory or JMS destination is configured for third party resource adapter", "bodyText": "Issue: https://issues.redhat.com/browse/WFLY-13554\nIssue: https://issues.redhat.com/browse/WFLY-13375", "createdAt": "2020-04-27T08:05:38Z", "url": "https://github.com/wildfly/wildfly/pull/13241", "merged": true, "mergeCommit": {"oid": "eb4bea2e05b1ca6eaa6875399e2cf7bd2b4d8eb6"}, "closed": true, "closedAt": "2020-06-17T11:44:22Z", "author": {"login": "parsharma"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbqwBPAFqTQwMDcxOTg2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfNMc3AFqTQwODA3MDY3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzE5ODYy", "url": "https://github.com/wildfly/wildfly/pull/13241#pullrequestreview-400719862", "createdAt": "2020-04-27T08:10:30Z", "commit": {"oid": "9fb01b2f9506501d962f86d59b4a6e4378f97f46"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzM4NjQ2", "url": "https://github.com/wildfly/wildfly/pull/13241#pullrequestreview-400738646", "createdAt": "2020-04-27T08:35:22Z", "commit": {"oid": "9fb01b2f9506501d962f86d59b4a6e4378f97f46"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODozNToyMlrOGMXZdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOToyMzozMFrOGMZczg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxOTQ0NQ==", "bodyText": "s/2010/2020", "url": "https://github.com/wildfly/wildfly/pull/13241#discussion_r415619445", "createdAt": "2020-04-27T08:35:22Z", "author": {"login": "yersan"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/deployment/JndiViewOperationJMSTestCase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2010, Red Hat, Inc., and individual contributors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb01b2f9506501d962f86d59b4a6e4378f97f46"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYyODI4NA==", "bodyText": "Could you correct the formatting?", "url": "https://github.com/wildfly/wildfly/pull/13241#discussion_r415628284", "createdAt": "2020-04-27T08:48:02Z", "author": {"login": "yersan"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/deployment/JndiViewOperationJMSTestCase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2010, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.integration.jca.deployment;\n+\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.test.integration.jca.JcaMgmtBase;\n+import org.jboss.as.test.integration.jca.rar.MultipleAdminObject1;\n+import org.jboss.as.test.integration.management.util.MgmtOperationException;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.ResourceAdapterArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test the situation when connection factory or JMS destination is configured for resource adapter\n+ *\n+ * @author <a href=\"parsharma@redhat.com\">Parul Sharma</a>\n+ */\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class JndiViewOperationJMSTestCase extends JcaMgmtBase {\n+\n+    static final String rarDeploymentName = \"eis.rar\";\n+\n+    @Deployment(name = \"rar\", order = 1)\n+    public static Archive<?> deploytRar() {\n+        ResourceAdapterArchive raa = ShrinkWrap.create(ResourceAdapterArchive.class, rarDeploymentName);\n+\n+        JavaArchive ja = ShrinkWrap.create(JavaArchive.class, \"lib.jar\");\n+        ja.addPackage(MultipleAdminObject1.class.getPackage());\n+        raa.addAsLibrary(ja);\n+\n+        raa.addAsManifestResource(JndiViewOperationJMSTestCase.class.getPackage(), \"ra.xml\", \"ra.xml\");\n+        return raa;\n+    }\n+\n+\n+     @Test\n+     public void testValueOfJms() throws Exception{\n+        ModelNode address = getAddress();\n+        ModelNode operation = getOperation(address);\n+          try{\n+             ModelNode result=executeOperation(operation);\n+             ModelNode value = result.get(\"java: contexts\", \"java:\", \"JmsXA\",\"value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb01b2f9506501d962f86d59b4a6e4378f97f46"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY1MzA3MA==", "bodyText": "I suggest some changes here:\n\nIf result is undefined, then val will be true and the test will pass, getting a false negative.\nvalue.equals(null) never will be true, because in that case you will get a NPE.\nBoolean val, you can use a primitive and avoid auto-boxing/unboxing.", "url": "https://github.com/wildfly/wildfly/pull/13241#discussion_r415653070", "createdAt": "2020-04-27T09:23:30Z", "author": {"login": "yersan"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/deployment/JndiViewOperationJMSTestCase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2010, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.integration.jca.deployment;\n+\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.test.integration.jca.JcaMgmtBase;\n+import org.jboss.as.test.integration.jca.rar.MultipleAdminObject1;\n+import org.jboss.as.test.integration.management.util.MgmtOperationException;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.ResourceAdapterArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test the situation when connection factory or JMS destination is configured for resource adapter\n+ *\n+ * @author <a href=\"parsharma@redhat.com\">Parul Sharma</a>\n+ */\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class JndiViewOperationJMSTestCase extends JcaMgmtBase {\n+\n+    static final String rarDeploymentName = \"eis.rar\";\n+\n+    @Deployment(name = \"rar\", order = 1)\n+    public static Archive<?> deploytRar() {\n+        ResourceAdapterArchive raa = ShrinkWrap.create(ResourceAdapterArchive.class, rarDeploymentName);\n+\n+        JavaArchive ja = ShrinkWrap.create(JavaArchive.class, \"lib.jar\");\n+        ja.addPackage(MultipleAdminObject1.class.getPackage());\n+        raa.addAsLibrary(ja);\n+\n+        raa.addAsManifestResource(JndiViewOperationJMSTestCase.class.getPackage(), \"ra.xml\", \"ra.xml\");\n+        return raa;\n+    }\n+\n+\n+     @Test\n+     public void testValueOfJms() throws Exception{\n+        ModelNode address = getAddress();\n+        ModelNode operation = getOperation(address);\n+          try{\n+             ModelNode result=executeOperation(operation);\n+             ModelNode value = result.get(\"java: contexts\", \"java:\", \"JmsXA\",\"value\");\n+             Boolean val = !(value.equals(null));\n+             Assert.assertTrue(val);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb01b2f9506501d962f86d59b4a6e4378f97f46"}, "originalPosition": 77}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fb01b2f9506501d962f86d59b4a6e4378f97f46", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/9fb01b2f9506501d962f86d59b4a6e4378f97f46", "committedDate": "2020-04-27T08:01:59Z", "message": " Test Case for the issue WFLY-13375"}, "afterCommit": {"oid": "868704b2bc588d5c4a74c046e7145875f6961ee2", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/868704b2bc588d5c4a74c046e7145875f6961ee2", "committedDate": "2020-04-27T11:03:46Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "868704b2bc588d5c4a74c046e7145875f6961ee2", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/868704b2bc588d5c4a74c046e7145875f6961ee2", "committedDate": "2020-04-27T11:03:46Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}, "afterCommit": {"oid": "5c75e394c742cfd25849b9ec170bacf3b1e191e5", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/5c75e394c742cfd25849b9ec170bacf3b1e191e5", "committedDate": "2020-04-27T11:42:39Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDY2MzQ5", "url": "https://github.com/wildfly/wildfly/pull/13241#pullrequestreview-402466349", "createdAt": "2020-04-29T08:38:24Z", "commit": {"oid": "5c75e394c742cfd25849b9ec170bacf3b1e191e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozODoyNFrOGN1E3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozODoyNFrOGN1E3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NDI3MQ==", "bodyText": "This connection definition seems it is unused on your test, is so, you can remove it", "url": "https://github.com/wildfly/wildfly/pull/13241#discussion_r417154271", "createdAt": "2020-04-29T08:38:24Z", "author": {"login": "yersan"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/deployment/ironjacamar.xml", "diffHunk": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ironjacamar>\n+    <connection-definitions>\n+        <connection-definition\n+                class-name=\"org.jboss.as.test.integration.jca.rar.MultipleManagedConnectionFactory1\"\n+                jndi-name=\"java:jboss/name1\" pool-name=\"ij_Pool1\">\n+        </connection-definition>\n+    </connection-definitions>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c75e394c742cfd25849b9ec170bacf3b1e191e5"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c75e394c742cfd25849b9ec170bacf3b1e191e5", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/5c75e394c742cfd25849b9ec170bacf3b1e191e5", "committedDate": "2020-04-27T11:42:39Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}, "afterCommit": {"oid": "3b0513177d8bb9b384d3cae73ab0cb75742e0160", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/3b0513177d8bb9b384d3cae73ab0cb75742e0160", "committedDate": "2020-05-04T09:37:16Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fac442335d58278a31afc5f42958c4335e7259c5", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/fac442335d58278a31afc5f42958c4335e7259c5", "committedDate": "2020-05-04T09:39:29Z", "message": "Delete ironjacamar.xml"}, "afterCommit": {"oid": "7b3d264dd71b97a393af4e6664d006bb1777c449", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/7b3d264dd71b97a393af4e6664d006bb1777c449", "committedDate": "2020-05-04T10:02:13Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODk0MDQy", "url": "https://github.com/wildfly/wildfly/pull/13241#pullrequestreview-404894042", "createdAt": "2020-05-04T11:12:40Z", "commit": {"oid": "7b3d264dd71b97a393af4e6664d006bb1777c449"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMToxMjo0MVrOGP73lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNTo1NzozNFrOGQG30Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM2MjcwOQ==", "bodyText": "Could you correct the indentation?", "url": "https://github.com/wildfly/wildfly/pull/13241#discussion_r419362709", "createdAt": "2020-05-04T11:12:41Z", "author": {"login": "yersan"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/deployment/JndiViewOperationJMSTestCase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.integration.jca.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.test.integration.jca.JcaMgmtBase;\n+import org.jboss.as.test.integration.jca.rar.MultipleAdminObject1;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.ResourceAdapterArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test the situation when connection factory or JMS destination is configured for resource adapter\n+ *\n+ * @author <a href=\"parsharma@redhat.com\">Parul Sharma</a>\n+ */\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class JndiViewOperationJMSTestCase extends JcaMgmtBase {\n+\n+    static final String rarDeploymentName = \"eis.rar\";\n+    private static ModelNode address;\n+\n+    @Deployment(name = \"rar\", order = 1)\n+    public static Archive<?> deploytRar() {\n+        ResourceAdapterArchive raa = ShrinkWrap.create(ResourceAdapterArchive.class, rarDeploymentName);\n+\n+        JavaArchive ja = ShrinkWrap.create(JavaArchive.class, \"lib.jar\");\n+        ja.addPackage(MultipleAdminObject1.class.getPackage());\n+        raa.addAsLibrary(ja);\n+\n+        raa.addAsManifestResource(JndiViewOperationJMSTestCase.class.getPackage(), \"ra.xml\", \"ra.xml\");\n+        return raa;\n+    }\n+\n+    @Test\n+    public void testValueOfJms() throws Exception {\n+        setup();\n+        ModelNode address = getAddress();\n+        ModelNode operation = getOperation(address);\n+        ModelNode result = executeOperation(operation);\n+\n+         ModelNode value = result.get(\"java: contexts\", \"java:jboss\", \"Name3\", \"class-name\");\n+         Assert.assertEquals(\"org.jboss.as.test.integration.jca.rar.MultipleAdminObject1Impl\", value.asString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3d264dd71b97a393af4e6664d006bb1777c449"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU0Mjk5Mw==", "bodyText": "You still need to rollback the changes done on setup() to clean up the configuration. Notice the same server configuration file is re-used by other tests. You should ensure the configuration backs to its initial state when the test finish, even if the test assertion fails.", "url": "https://github.com/wildfly/wildfly/pull/13241#discussion_r419542993", "createdAt": "2020-05-04T15:57:34Z", "author": {"login": "yersan"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/jca/deployment/JndiViewOperationJMSTestCase.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+package org.jboss.as.test.integration.jca.deployment;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.container.test.api.RunAsClient;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.as.test.integration.jca.JcaMgmtBase;\n+import org.jboss.as.test.integration.jca.rar.MultipleAdminObject1;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.jboss.shrinkwrap.api.spec.ResourceAdapterArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test the situation when connection factory or JMS destination is configured for resource adapter\n+ *\n+ * @author <a href=\"parsharma@redhat.com\">Parul Sharma</a>\n+ */\n+\n+@RunWith(Arquillian.class)\n+@RunAsClient\n+public class JndiViewOperationJMSTestCase extends JcaMgmtBase {\n+\n+    static final String rarDeploymentName = \"eis.rar\";\n+    private static ModelNode address;\n+\n+    @Deployment(name = \"rar\", order = 1)\n+    public static Archive<?> deploytRar() {\n+        ResourceAdapterArchive raa = ShrinkWrap.create(ResourceAdapterArchive.class, rarDeploymentName);\n+\n+        JavaArchive ja = ShrinkWrap.create(JavaArchive.class, \"lib.jar\");\n+        ja.addPackage(MultipleAdminObject1.class.getPackage());\n+        raa.addAsLibrary(ja);\n+\n+        raa.addAsManifestResource(JndiViewOperationJMSTestCase.class.getPackage(), \"ra.xml\", \"ra.xml\");\n+        return raa;\n+    }\n+\n+    @Test\n+    public void testValueOfJms() throws Exception {\n+        setup();\n+        ModelNode address = getAddress();\n+        ModelNode operation = getOperation(address);\n+        ModelNode result = executeOperation(operation);\n+\n+         ModelNode value = result.get(\"java: contexts\", \"java:jboss\", \"Name3\", \"class-name\");\n+         Assert.assertEquals(\"org.jboss.as.test.integration.jca.rar.MultipleAdminObject1Impl\", value.asString());\n+\n+    }\n+\n+    private ModelNode getAddress() {\n+        return new ModelNode().add(SUBSYSTEM, \"naming\");\n+    }\n+\n+    private ModelNode getOperation(ModelNode address) {\n+        ModelNode operation = new ModelNode();\n+        operation.get(OP).set(\"jndi-view\");\n+        operation.get(OP_ADDR).set(address);\n+        return operation;\n+    }\n+\n+    private void setup() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3d264dd71b97a393af4e6664d006bb1777c449"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5898539c1ceef4816ca10b807d92e2ffd0dd5079", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/5898539c1ceef4816ca10b807d92e2ffd0dd5079", "committedDate": "2020-05-07T07:21:56Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b3d264dd71b97a393af4e6664d006bb1777c449", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/7b3d264dd71b97a393af4e6664d006bb1777c449", "committedDate": "2020-05-04T10:02:13Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}, "afterCommit": {"oid": "5898539c1ceef4816ca10b807d92e2ffd0dd5079", "author": {"user": {"login": "parsharma", "name": "Parul Sharma"}}, "url": "https://github.com/wildfly/wildfly/commit/5898539c1ceef4816ca10b807d92e2ffd0dd5079", "committedDate": "2020-05-07T07:21:56Z", "message": " Test Case for the issue WFLY-13375, if Connection Factory or JMS destination is configured for third party resource adapter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDcwNjc2", "url": "https://github.com/wildfly/wildfly/pull/13241#pullrequestreview-408070676", "createdAt": "2020-05-08T08:00:06Z", "commit": {"oid": "5898539c1ceef4816ca10b807d92e2ffd0dd5079"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3542, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}