{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0Nzk2MzAz", "number": 13837, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDoyNjowMFrOFOK0YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1Mzo0MFrOFRKPqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDAxNjMyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/EE_Concurrency_Utilities_Configuration.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNDoyNjowMFrOISxknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNVQxMTowMDoxN1rOIUX0dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU1NzQ3MQ==", "bodyText": "@emmartins I guess \"The mandatory core-threads\" should be changed to \"The optional core-threads\":\nIn facts in standalone-full-ha.xml it's not present:\n<managed-executor-service  name=\"default\"  jndi-name=\"java:jboss/ee/concurrency/executor/default\"  context-service=\"default\"  hung-task-threshold=\"60000\"  keepalive-time=\"5000\"/>\n.... it's not relevant in this MR though", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r556557471", "createdAt": "2021-01-13T14:26:00Z", "author": {"login": "tommaso-borgato"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/EE_Concurrency_Utilities_Configuration.adoc", "diffHunk": "@@ -156,6 +157,18 @@ The optional `hung-task-threshold` defines a runtime threshold value, in\n milliseconds, for tasks to be considered hung by the executor.\n A value of `0` will never consider tasks to be hung.\n \n+The optional `hung-task-termination-period` defines the period, in\n+milliseconds, for attempting the termination of hung tasks, by cancelling\n+their execution, and interrupting their executing threads. Please note\n+that the termination of a cancelled hung task is not guaranteed.\n+A value of `0`, which is the default, deactivates the periodic\n+cancellation of hung tasks. Management clients, such as the WildFly CLI,\n+may still be used to manually attempt the termination of hung tasks:\n+[source,options=\"nowrap\"]\n+----\n+/subsystem=ee/managed-executor-service=other:terminate-hung-tasks\n+----\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU5MDcyNw==", "bodyText": "Right, it was mandatory initially but think later it was changed to optional, and when not specified it's computed automatically.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r556590727", "createdAt": "2021-01-13T15:09:09Z", "author": {"login": "emmartins"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/EE_Concurrency_Utilities_Configuration.adoc", "diffHunk": "@@ -156,6 +157,18 @@ The optional `hung-task-threshold` defines a runtime threshold value, in\n milliseconds, for tasks to be considered hung by the executor.\n A value of `0` will never consider tasks to be hung.\n \n+The optional `hung-task-termination-period` defines the period, in\n+milliseconds, for attempting the termination of hung tasks, by cancelling\n+their execution, and interrupting their executing threads. Please note\n+that the termination of a cancelled hung task is not guaranteed.\n+A value of `0`, which is the default, deactivates the periodic\n+cancellation of hung tasks. Management clients, such as the WildFly CLI,\n+may still be used to manually attempt the termination of hung tasks:\n+[source,options=\"nowrap\"]\n+----\n+/subsystem=ee/managed-executor-service=other:terminate-hung-tasks\n+----\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU1NzQ3MQ=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODIzMjY5NA==", "bodyText": "I have created a JIRA to fix that at https://issues.redhat.com/browse/WFLY-14297", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r558232694", "createdAt": "2021-01-15T11:00:17Z", "author": {"login": "emmartins"}, "path": "docs/src/main/asciidoc/_admin-guide/subsystem-configuration/EE_Concurrency_Utilities_Configuration.adoc", "diffHunk": "@@ -156,6 +157,18 @@ The optional `hung-task-threshold` defines a runtime threshold value, in\n milliseconds, for tasks to be considered hung by the executor.\n A value of `0` will never consider tasks to be hung.\n \n+The optional `hung-task-termination-period` defines the period, in\n+milliseconds, for attempting the termination of hung tasks, by cancelling\n+their execution, and interrupting their executing threads. Please note\n+that the termination of a cancelled hung task is not guaranteed.\n+A value of `0`, which is the default, deactivates the periodic\n+cancellation of hung tasks. Management clients, such as the WildFly CLI,\n+may still be used to manually attempt the termination of hung tasks:\n+[source,options=\"nowrap\"]\n+----\n+/subsystem=ee/managed-executor-service=other:terminate-hung-tasks\n+----\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjU1NzQ3MQ=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNDY0OTk5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxNjoyNzowM1rOIS3uEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxMToyMVrOITmVMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1ODE5NQ==", "bodyText": "@emmartins logger isn't used", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r556658195", "createdAt": "2021-01-13T16:27:03Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTg3Mw==", "bodyText": "removed, thanks", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421873", "createdAt": "2021-01-14T14:11:21Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY1ODE5NQ=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNzcyNzMyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNzo1OTowNVrOITVYNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDowODoyNlrOITmNpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDExNg==", "bodyText": "@emmartins what are these permissions for?", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557144116", "createdAt": "2021-01-14T07:59:05Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQxOTk0MA==", "bodyText": "see comment below", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557419940", "createdAt": "2021-01-14T14:08:26Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDExNg=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNzczMjM4OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQwNzo1OTozOVrOITVbdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDowOTo0NlrOITmRJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDk0OA==", "bodyText": "@emmartins what is this permissions for?", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557144948", "createdAt": "2021-01-14T07:59:39Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMDgzOA==", "bodyText": "Needed for security manager runs, https://issues.redhat.com/browse/WFLY-5169 added these to the similar EEConcurrentManagementTestCase", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557420838", "createdAt": "2021-01-14T14:09:46Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzE0NDk0OA=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODY3NTE3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDozOTowN1rOITe4Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxMDo1NFrOITmUFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5OTcyMg==", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the terminate-hung-tasks operation works on a managed-executor-service\n* @throws Exception\n*/", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557299722", "createdAt": "2021-01-14T10:39:07Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTU4OQ==", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421589", "createdAt": "2021-01-14T14:10:54Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI5OTcyMg=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODY3Nzg3OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDozOTo1MVrOITe5pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxMDo1OFrOITmUQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDEzNA==", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the terminate-hung-tasks operation works on a managed-scheduled-executor-service\n* @throws Exception\n*/", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557300134", "createdAt": "2021-01-14T10:39:51Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTYzNQ==", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421635", "createdAt": "2021-01-14T14:10:58Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDEzNA=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODY4MTAyOnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDo0MDozN1rOITe7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxMTowMlrOITmUcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDYxNQ==", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the hung-task-termination-period works on a managed-executor-service\n* @throws Exception\n*/", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557300615", "createdAt": "2021-01-14T10:40:37Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedScheduledExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_SCHEDULED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/scheduledexecutor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            // lookup the executor\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTY4Mw==", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421683", "createdAt": "2021-01-14T14:11:02Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedScheduledExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_SCHEDULED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/scheduledexecutor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            // lookup the executor\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDYxNQ=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwODY4MjQ5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxMDo0MDo1OVrOITe8ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNDoxMTowN1rOITmUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDg0Mg==", "bodyText": "@emmartins what about a short description:\n/**\n* Tests the hung-task-termination-period works on a managed-scheduled-executor-service\n* @throws Exception\n*/", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557300842", "createdAt": "2021-01-14T10:40:59Z", "author": {"login": "tommaso-borgato"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedScheduledExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_SCHEDULED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/scheduledexecutor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            // lookup the executor\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationPeriodic() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_TERMINATION_PERIOD).set(HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationPeriodic(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzQyMTczNw==", "bodyText": "Used a different wording, to not depend on attributes/operation names, but done.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r557421737", "createdAt": "2021-01-14T14:11:07Z", "author": {"login": "emmartins"}, "path": "testsuite/integration/basic/src/test/java/org/jboss/as/test/integration/ee/concurrent/HungTasksTerminationTestCase.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * JBoss, Home of Professional Open Source.\n+ * Copyright 2020, Red Hat, Inc., and individual contributors\n+ * as indicated by the @author tags. See the copyright.txt file in the\n+ * distribution for a full listing of individual contributors.\n+ *\n+ * This is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU Lesser General Public License as\n+ * published by the Free Software Foundation; either version 2.1 of\n+ * the License, or (at your option) any later version.\n+ *\n+ * This software is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public\n+ * License along with this software; if not, write to the Free\n+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n+ */\n+\n+package org.jboss.as.test.integration.ee.concurrent;\n+\n+import org.jboss.arquillian.container.test.api.Deployment;\n+import org.jboss.arquillian.junit.Arquillian;\n+import org.jboss.arquillian.test.api.ArquillianResource;\n+import org.jboss.as.arquillian.container.ManagementClient;\n+import org.jboss.as.controller.PathAddress;\n+import org.jboss.as.controller.PathElement;\n+import org.jboss.as.controller.operations.common.Util;\n+import org.jboss.as.ee.subsystem.EESubsystemModel;\n+import org.jboss.as.ee.subsystem.EeExtension;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceMetricsAttributes;\n+import org.jboss.as.ee.subsystem.ManagedExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedScheduledExecutorServiceResourceDefinition;\n+import org.jboss.as.ee.subsystem.ManagedExecutorTerminateHungTasksOperation;\n+import org.jboss.dmr.ModelNode;\n+import org.jboss.logging.Logger;\n+import org.jboss.remoting3.security.RemotingPermission;\n+import org.jboss.shrinkwrap.api.Archive;\n+import org.jboss.shrinkwrap.api.ShrinkWrap;\n+import org.jboss.shrinkwrap.api.asset.StringAsset;\n+import org.jboss.shrinkwrap.api.spec.JavaArchive;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.enterprise.concurrent.ManagedExecutorService;\n+import javax.naming.InitialContext;\n+import java.io.FilePermission;\n+import java.io.IOException;\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.FAILURE_DESCRIPTION;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\n+import static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\n+import static org.jboss.as.test.shared.integration.ejb.security.PermissionUtils.createPermissionsXmlAsset;\n+\n+/**\n+ * Test case for managed executor's hung tasks termination feature.\n+ *\n+ * @author Eduardo Martins\n+ */\n+@RunWith(Arquillian.class)\n+public class HungTasksTerminationTestCase {\n+\n+    private static final Logger logger = Logger.getLogger(HungTasksTerminationTestCase.class);\n+\n+    private static final PathAddress EE_SUBSYSTEM_PATH_ADDRESS = PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME));\n+    private static final String RESOURCE_NAME = HungTasksTerminationTestCase.class.getSimpleName();\n+    // a task is considered hung when is running over 0.5s\n+    private static final long HUNG_TASK_THRESHOLD_TEST_VALUE = 500;\n+    // hung tasks periodic cancellation should be done every 5s\n+    private static final long HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE = 5000;\n+\n+    @ArquillianResource\n+    private ManagementClient managementClient;\n+\n+    @Deployment\n+    public static Archive<?> deploy() {\n+        return ShrinkWrap.create(JavaArchive.class, HungTasksTerminationTestCase.class.getSimpleName() + \".jar\")\n+                .addClasses(HungTasksTerminationTestCase.class)\n+                .addAsManifestResource(new StringAsset(\"Dependencies: org.jboss.as.controller, org.jboss.as.ee, org.jboss.remoting\\n\"), \"MANIFEST.MF\")\n+                .addAsManifestResource(createPermissionsXmlAsset(\n+                        new RemotingPermission(\"createEndpoint\"),\n+                        new RemotingPermission(\"connect\"),\n+                        new FilePermission(System.getProperty(\"jboss.inst\") + \"/standalone/tmp/auth/*\", \"read\")\n+                ), \"permissions.xml\");\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedScheduledExecutorServiceHungTasksCancellationOperation() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_SCHEDULED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/scheduledexecutor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            // lookup the executor\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationOperation(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+\n+    @Test\n+    public void testManagedExecutorServiceHungTasksCancellationPeriodic() throws Exception {\n+        final PathAddress pathAddress = EE_SUBSYSTEM_PATH_ADDRESS.append(EESubsystemModel.MANAGED_EXECUTOR_SERVICE, RESOURCE_NAME);\n+        // add\n+        final ModelNode addOperation = Util.createAddOperation(pathAddress);\n+        final String jndiName = \"java:jboss/ee/concurrency/executor/\" + RESOURCE_NAME;\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.JNDI_NAME).set(jndiName);\n+        addOperation.get(ManagedExecutorServiceResourceDefinition.HUNG_TASK_THRESHOLD).set(HUNG_TASK_THRESHOLD_TEST_VALUE);\n+        addOperation.get(ManagedScheduledExecutorServiceResourceDefinition.HUNG_TASK_TERMINATION_PERIOD).set(HUNG_TASK_CANCELLATION_PERIOD_TEST_VALUE);\n+        final ModelNode addResult = managementClient.getControllerClient().execute(addOperation);\n+        Assert.assertFalse(addResult.get(FAILURE_DESCRIPTION).toString(), addResult.get(FAILURE_DESCRIPTION).isDefined());\n+        try {\n+            final ManagedExecutorService executorService = InitialContext.doLookup(jndiName);\n+            Assert.assertNotNull(executorService);\n+            testHungTasksCancellationPeriodic(pathAddress, executorService);\n+        } finally {\n+            // remove\n+            final ModelNode removeOperation = Util.createRemoveOperation(pathAddress);\n+            removeOperation.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n+            final ModelNode removeResult = managementClient.getControllerClient().execute(removeOperation);\n+            Assert.assertFalse(removeResult.get(FAILURE_DESCRIPTION).toString(), removeResult.get(FAILURE_DESCRIPTION)\n+                    .isDefined());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzMwMDg0Mg=="}, "originalCommit": {"oid": "d228bdaa81c5e61581893e3f2e3f303c9da3a2bf"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNTM3MDI1OnYy", "diffSide": "RIGHT", "path": "ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1MTo1NlrOIXbj9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQxMjoyNDoxOFrOIXz7lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzOTczNQ==", "bodyText": "This is contrary to https://github.com/wildfly/wildfly-proposals/pull/272/files#diff-92d9b62a418fa48fe8ae1baf9370be6f000f7c8901f0c459b836ff48444941f5R90\nGuarding this with an 'if (resourceRegistration.getProcessType().isServer())' check will correct that.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561439735", "createdAt": "2021-01-21T00:51:56Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java", "diffHunk": "@@ -178,19 +190,30 @@\n             .addMetric(ManagedExecutorServiceMetricsAttributes.THREAD_COUNT_AD, (context, service) -> context.getResult().set(service.getExecutorService().getRuntimeStats().getThreadsCount()))\n             .build();\n \n+    /**\n+     * terminate hung threads op\n+     */\n+    private static final ManagedExecutorTerminateHungTasksOperation<ManagedExecutorServiceService> TERMINATE_HUNG_TASKS_OP = new ManagedExecutorTerminateHungTasksOperation<>(CAPABILITY, RESOLVER, service -> service.getExecutorService());\n+\n     /**\n      *\n      */\n     private final boolean registerRuntimeOnly;\n \n     ManagedExecutorServiceResourceDefinition(boolean registerRuntimeOnly) {\n-        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, EeExtension.getResourceDescriptionResolver(EESubsystemModel.MANAGED_EXECUTOR_SERVICE))\n+        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, RESOLVER)\n                 .setAddHandler(ManagedExecutorServiceAdd.INSTANCE)\n                 .setRemoveHandler(new ServiceRemoveStepHandler(ManagedExecutorServiceAdd.INSTANCE))\n                 .addCapabilities(CAPABILITY));\n         this.registerRuntimeOnly = registerRuntimeOnly;\n     }\n \n+    @Override\n+    public void registerOperations(ManagementResourceRegistration resourceRegistration) {\n+        super.registerOperations(resourceRegistration);\n+        TERMINATE_HUNG_TASKS_OP.registerOperation(resourceRegistration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTgzODk5Ng==", "bodyText": "Fixed, did it inside TERMINATE_HUNG_TASKS_OP.registerOperation(resourceRegistration) tho, since that applies to both executor resource definitions.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561838996", "createdAt": "2021-01-21T12:24:18Z", "author": {"login": "emmartins"}, "path": "ee/src/main/java/org/jboss/as/ee/subsystem/ManagedExecutorServiceResourceDefinition.java", "diffHunk": "@@ -178,19 +190,30 @@\n             .addMetric(ManagedExecutorServiceMetricsAttributes.THREAD_COUNT_AD, (context, service) -> context.getResult().set(service.getExecutorService().getRuntimeStats().getThreadsCount()))\n             .build();\n \n+    /**\n+     * terminate hung threads op\n+     */\n+    private static final ManagedExecutorTerminateHungTasksOperation<ManagedExecutorServiceService> TERMINATE_HUNG_TASKS_OP = new ManagedExecutorTerminateHungTasksOperation<>(CAPABILITY, RESOLVER, service -> service.getExecutorService());\n+\n     /**\n      *\n      */\n     private final boolean registerRuntimeOnly;\n \n     ManagedExecutorServiceResourceDefinition(boolean registerRuntimeOnly) {\n-        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, EeExtension.getResourceDescriptionResolver(EESubsystemModel.MANAGED_EXECUTOR_SERVICE))\n+        super(new SimpleResourceDefinition.Parameters(PATH_ELEMENT, RESOLVER)\n                 .setAddHandler(ManagedExecutorServiceAdd.INSTANCE)\n                 .setRemoveHandler(new ServiceRemoveStepHandler(ManagedExecutorServiceAdd.INSTANCE))\n                 .addCapabilities(CAPABILITY));\n         this.registerRuntimeOnly = registerRuntimeOnly;\n     }\n \n+    @Override\n+    public void registerOperations(ManagementResourceRegistration resourceRegistration) {\n+        super.registerOperations(resourceRegistration);\n+        TERMINATE_HUNG_TASKS_OP.registerOperation(resourceRegistration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQzOTczNQ=="}, "originalCommit": {"oid": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUzNTM3OTYxOnYy", "diffSide": "RIGHT", "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQwMDo1Mzo0MFrOIXbq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMVQyMjo0MjoyMFrOIYMvTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MTQ5Ng==", "bodyText": "This is vulnerable to an NPE in a race.  Assigning 'task' a local var 'localTask' and then working with that eliminates that possibility.", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561441496", "createdAt": "2021-01-21T00:53:40Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java", "diffHunk": "@@ -94,7 +111,33 @@ private CreateThreadAction(Runnable r, ContextHandle contextHandleForSetup) {\n \n         @Override\n         public AbstractManagedThread run() {\n-            return ManagedThreadFactoryImpl.super.createThread(r, contextHandleForSetup);\n+            return new ManagedThread(r, contextHandleForSetup);\n+        }\n+    }\n+\n+    /**\n+     * Managed thread extension, to allow canceling the task running in the thread.\n+     * @author emmartins\n+     */\n+    public class ManagedThread extends org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl.ManagedThread {\n+        volatile ManagedFutureTask task = null;\n+        /**\n+         *\n+         * @param target\n+         * @param contextHandleForSetup\n+         */\n+        public ManagedThread(Runnable target, ContextHandle contextHandleForSetup) {\n+            super(target, contextHandleForSetup);\n+        }\n+        /**\n+         * Cancel the task running in the thread.\n+         * @return\n+         */\n+        boolean cancelTask() {\n+            if (task != null) {\n+                return task.cancel(true);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTgzODQxOA==", "bodyText": "Fixed, and good catch, code was copied from the RI class it extends and didn't noticed. RI issue reported at eclipse-ee4j/concurrency-ri#47", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r561838418", "createdAt": "2021-01-21T12:23:23Z", "author": {"login": "emmartins"}, "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java", "diffHunk": "@@ -94,7 +111,33 @@ private CreateThreadAction(Runnable r, ContextHandle contextHandleForSetup) {\n \n         @Override\n         public AbstractManagedThread run() {\n-            return ManagedThreadFactoryImpl.super.createThread(r, contextHandleForSetup);\n+            return new ManagedThread(r, contextHandleForSetup);\n+        }\n+    }\n+\n+    /**\n+     * Managed thread extension, to allow canceling the task running in the thread.\n+     * @author emmartins\n+     */\n+    public class ManagedThread extends org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl.ManagedThread {\n+        volatile ManagedFutureTask task = null;\n+        /**\n+         *\n+         * @param target\n+         * @param contextHandleForSetup\n+         */\n+        public ManagedThread(Runnable target, ContextHandle contextHandleForSetup) {\n+            super(target, contextHandleForSetup);\n+        }\n+        /**\n+         * Cancel the task running in the thread.\n+         * @return\n+         */\n+        boolean cancelTask() {\n+            if (task != null) {\n+                return task.cancel(true);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MTQ5Ng=="}, "originalCommit": {"oid": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI0NTQ1Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/wildfly/wildfly/pull/13837#discussion_r562245452", "createdAt": "2021-01-21T22:42:20Z", "author": {"login": "bstansberry"}, "path": "ee/src/main/java/org/jboss/as/ee/concurrent/ManagedThreadFactoryImpl.java", "diffHunk": "@@ -94,7 +111,33 @@ private CreateThreadAction(Runnable r, ContextHandle contextHandleForSetup) {\n \n         @Override\n         public AbstractManagedThread run() {\n-            return ManagedThreadFactoryImpl.super.createThread(r, contextHandleForSetup);\n+            return new ManagedThread(r, contextHandleForSetup);\n+        }\n+    }\n+\n+    /**\n+     * Managed thread extension, to allow canceling the task running in the thread.\n+     * @author emmartins\n+     */\n+    public class ManagedThread extends org.glassfish.enterprise.concurrent.ManagedThreadFactoryImpl.ManagedThread {\n+        volatile ManagedFutureTask task = null;\n+        /**\n+         *\n+         * @param target\n+         * @param contextHandleForSetup\n+         */\n+        public ManagedThread(Runnable target, ContextHandle contextHandleForSetup) {\n+            super(target, contextHandleForSetup);\n+        }\n+        /**\n+         * Cancel the task running in the thread.\n+         * @return\n+         */\n+        boolean cancelTask() {\n+            if (task != null) {\n+                return task.cancel(true);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTQ0MTQ5Ng=="}, "originalCommit": {"oid": "25a42eecee25bd7978d5ec6979c92f67a3b9f8c3"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4056, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}