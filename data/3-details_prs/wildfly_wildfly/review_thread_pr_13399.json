{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTkxNTA0", "number": 13399, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo0MzoxMVrOENEQSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo0MzoxMVrOENEQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTM2NjQ5OnYy", "diffSide": "RIGHT", "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/BusinessViewAnnotationProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTo0MzoxMVrOGvi03A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDozNjozMVrOGyuCgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjg0NA==", "bodyText": "I suspect we don't need exception handling here. When @Remote @Local is used in a business interface, they do not take any arguments.  The no-arg annotation is to indicate that the annotated business interface is a local or remote business interface.  For ex,\n@Remote \npublic interface Calculator {...}", "url": "https://github.com/wildfly/wildfly/pull/13399#discussion_r452506844", "createdAt": "2020-07-09T21:43:11Z", "author": {"login": "chengfang"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/BusinessViewAnnotationProcessor.java", "diffHunk": "@@ -197,12 +211,18 @@ private void processViewAnnotations(final DeploymentUnit deploymentUnit, final C\n         return Arrays.asList(localViews);\n     }\n \n-    private static Collection<Class<?>> getBusinessInterfacesFromInterfaceAnnotations(Class<?> sessionBeanClass, Class<? extends Annotation> annotation) {\n+    private static Collection<Class<?>> getBusinessInterfacesFromInterfaceAnnotations(Class<?> sessionBeanClass, Class<? extends Annotation> annotation) throws DeploymentUnitProcessingException {\n         final Set<Class<?>> potentialBusinessInterfaces = getPotentialBusinessInterfaces(sessionBeanClass);\n         final Set<Class<?>> businessInterfaces = new HashSet<Class<?>>();\n         for (Class<?> iface : potentialBusinessInterfaces) {\n-            if (iface.getAnnotation(annotation) != null) {\n-                businessInterfaces.add(iface);\n+            try {\n+                if (iface.getAnnotation(annotation) != null) {\n+                    businessInterfaces.add(iface);\n+                }\n+            } catch (ArrayStoreException e) {\n+                // https://bugs.openjdk.java.net/browse/JDK-7183985\n+                // Class.findAnnotation() has a bug under JDK < 11 which throws ArrayStoreException\n+                throw EjbLogger.ROOT_LOGGER.missingClassInAnnotation(annotation.getSimpleName(), iface.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bc0b1af46793f70f4404232484178ba86cd143a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYxNTUzMw==", "bodyText": "I think it should be good if users do it in correct way(like they should package classes referred by the annotation). :)\nbut what happens if users referred some classes in the business interfaces' Remote annotation by mistake? is it still a valid deployment?", "url": "https://github.com/wildfly/wildfly/pull/13399#discussion_r455615533", "createdAt": "2020-07-16T08:29:33Z", "author": {"login": "gaol"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/BusinessViewAnnotationProcessor.java", "diffHunk": "@@ -197,12 +211,18 @@ private void processViewAnnotations(final DeploymentUnit deploymentUnit, final C\n         return Arrays.asList(localViews);\n     }\n \n-    private static Collection<Class<?>> getBusinessInterfacesFromInterfaceAnnotations(Class<?> sessionBeanClass, Class<? extends Annotation> annotation) {\n+    private static Collection<Class<?>> getBusinessInterfacesFromInterfaceAnnotations(Class<?> sessionBeanClass, Class<? extends Annotation> annotation) throws DeploymentUnitProcessingException {\n         final Set<Class<?>> potentialBusinessInterfaces = getPotentialBusinessInterfaces(sessionBeanClass);\n         final Set<Class<?>> businessInterfaces = new HashSet<Class<?>>();\n         for (Class<?> iface : potentialBusinessInterfaces) {\n-            if (iface.getAnnotation(annotation) != null) {\n-                businessInterfaces.add(iface);\n+            try {\n+                if (iface.getAnnotation(annotation) != null) {\n+                    businessInterfaces.add(iface);\n+                }\n+            } catch (ArrayStoreException e) {\n+                // https://bugs.openjdk.java.net/browse/JDK-7183985\n+                // Class.findAnnotation() has a bug under JDK < 11 which throws ArrayStoreException\n+                throw EjbLogger.ROOT_LOGGER.missingClassInAnnotation(annotation.getSimpleName(), iface.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjg0NA=="}, "originalCommit": {"oid": "3bc0b1af46793f70f4404232484178ba86cd143a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzNjI4OA==", "bodyText": "If @Remote or @Local on business interface has param, then it's an application's error, though the spec does not say what should happen in this case. WildFly just ignores the param, which happens after the annotation processing. So to tolerate this type of user errors, it's okay to keep this checking.", "url": "https://github.com/wildfly/wildfly/pull/13399#discussion_r455836288", "createdAt": "2020-07-16T14:36:31Z", "author": {"login": "chengfang"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/deployment/processors/BusinessViewAnnotationProcessor.java", "diffHunk": "@@ -197,12 +211,18 @@ private void processViewAnnotations(final DeploymentUnit deploymentUnit, final C\n         return Arrays.asList(localViews);\n     }\n \n-    private static Collection<Class<?>> getBusinessInterfacesFromInterfaceAnnotations(Class<?> sessionBeanClass, Class<? extends Annotation> annotation) {\n+    private static Collection<Class<?>> getBusinessInterfacesFromInterfaceAnnotations(Class<?> sessionBeanClass, Class<? extends Annotation> annotation) throws DeploymentUnitProcessingException {\n         final Set<Class<?>> potentialBusinessInterfaces = getPotentialBusinessInterfaces(sessionBeanClass);\n         final Set<Class<?>> businessInterfaces = new HashSet<Class<?>>();\n         for (Class<?> iface : potentialBusinessInterfaces) {\n-            if (iface.getAnnotation(annotation) != null) {\n-                businessInterfaces.add(iface);\n+            try {\n+                if (iface.getAnnotation(annotation) != null) {\n+                    businessInterfaces.add(iface);\n+                }\n+            } catch (ArrayStoreException e) {\n+                // https://bugs.openjdk.java.net/browse/JDK-7183985\n+                // Class.findAnnotation() has a bug under JDK < 11 which throws ArrayStoreException\n+                throw EjbLogger.ROOT_LOGGER.missingClassInAnnotation(annotation.getSimpleName(), iface.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUwNjg0NA=="}, "originalCommit": {"oid": "3bc0b1af46793f70f4404232484178ba86cd143a"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4197, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}