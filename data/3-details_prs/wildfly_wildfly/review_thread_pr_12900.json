{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjg1NDAy", "number": 12900, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTo1OTo1MVrODXyk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDowMTowM1rODXymbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjcyNDk3OnYy", "diffSide": "RIGHT", "path": "ejb3/src/main/java/org/jboss/as/ejb3/tx/CMTTxInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwOTo1OTo1MVrOFdR26Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjoyMzoyMlrOFddjTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NTYwOQ==", "bodyText": "How did we get to the point of having a tx here during an async invocation?", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366245609", "createdAt": "2020-01-14T09:59:51Z", "author": {"login": "wolfc"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/tx/CMTTxInterceptor.java", "diffHunk": "@@ -141,6 +144,15 @@ public Object processInvocation(InterceptorContext invocation) throws Exception\n                 case NOT_SUPPORTED:\n                     return notSupported(invocation, component);\n                 case REQUIRED:\n+                    final ComponentView view = invocation.getPrivateData(ComponentView.class);\n+                    if (view != null && view.isAsynchronous(method)) {\n+                        // EJB 3.2 4.5.3 Transactions\n+                        // The client\u2019s transaction context does not propagate with an asynchronous method invocation. From the\n+                        // Bean Provider\u2019s point of view, there is never a transaction context flowing in from the client. This\n+                        // means, for example, that the semantics of the REQUIRED transaction attribute on an asynchronous\n+                        // method are exactly the same as REQUIRES_NEW.\n+                        return requiresNew(invocation, component, timeoutInSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzNzE5Nw==", "bodyText": "Not sure why, it could be some missed check during earlier part of invocation chain. I'll look into it.", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366437197", "createdAt": "2020-01-14T16:23:22Z", "author": {"login": "chengfang"}, "path": "ejb3/src/main/java/org/jboss/as/ejb3/tx/CMTTxInterceptor.java", "diffHunk": "@@ -141,6 +144,15 @@ public Object processInvocation(InterceptorContext invocation) throws Exception\n                 case NOT_SUPPORTED:\n                     return notSupported(invocation, component);\n                 case REQUIRED:\n+                    final ComponentView view = invocation.getPrivateData(ComponentView.class);\n+                    if (view != null && view.isAsynchronous(method)) {\n+                        // EJB 3.2 4.5.3 Transactions\n+                        // The client\u2019s transaction context does not propagate with an asynchronous method invocation. From the\n+                        // Bean Provider\u2019s point of view, there is never a transaction context flowing in from the client. This\n+                        // means, for example, that the semantics of the REQUIRED transaction attribute on an asynchronous\n+                        // method are exactly the same as REQUIRES_NEW.\n+                        return requiresNew(invocation, component, timeoutInSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NTYwOQ=="}, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjcyODc5OnYy", "diffSide": "RIGHT", "path": "testsuite/integration/multinode/src/test/java/org/jboss/as/test/multinode/transaction/async/ClientBean.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDowMTowM1rOFdR5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxMjoyNDoxOVrOFd2nqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NjI2Mg==", "bodyText": "You hold the Future, so better use it.", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366246262", "createdAt": "2020-01-14T10:01:03Z", "author": {"login": "wolfc"}, "path": "testsuite/integration/multinode/src/test/java/org/jboss/as/test/multinode/transaction/async/ClientBean.java", "diffHunk": "@@ -84,10 +84,28 @@ public void callToStatusByTransactionmanager() throws Exception {\n         final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n         userTransaction.begin();\n         try {\n-            Assert.assertEquals(\"No transaction expected as async call does not pass txn context\",\n+            assertEquals(\"No transaction expected as async call does not pass txn context\",\n                     (Integer) Status.STATUS_NO_TRANSACTION, remote.transactionStatus().get());\n         } finally {\n             userTransaction.rollback();\n         }\n     }\n+\n+    /**\n+     * Verifies async method invocation with REQUIRED transaction attribute.\n+     * The client transaction context should not be propagated to the invoked async method.\n+     * The invoked async method should execute in a new, separate transaction context.\n+     */\n+    public void callToRequired() throws Exception {\n+        final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n+        userTransaction.begin();\n+\n+        // asyncWithRequired() will throw RuntimeException and cause its transaction to rollback.\n+        // But it has no bearing on the transaction here, which should be able to commit okay.\n+        remote.asyncWithRequired();\n+\n+        // wait a bit for the transaction in asyncWithRequired method to rollback\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQzNjExNQ==", "bodyText": "asyncWithRequired method returns void since it just throws a RuntimeException with no need to return a value. We could add a return value and use get() instead of sleep().", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366436115", "createdAt": "2020-01-14T16:21:35Z", "author": {"login": "chengfang"}, "path": "testsuite/integration/multinode/src/test/java/org/jboss/as/test/multinode/transaction/async/ClientBean.java", "diffHunk": "@@ -84,10 +84,28 @@ public void callToStatusByTransactionmanager() throws Exception {\n         final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n         userTransaction.begin();\n         try {\n-            Assert.assertEquals(\"No transaction expected as async call does not pass txn context\",\n+            assertEquals(\"No transaction expected as async call does not pass txn context\",\n                     (Integer) Status.STATUS_NO_TRANSACTION, remote.transactionStatus().get());\n         } finally {\n             userTransaction.rollback();\n         }\n     }\n+\n+    /**\n+     * Verifies async method invocation with REQUIRED transaction attribute.\n+     * The client transaction context should not be propagated to the invoked async method.\n+     * The invoked async method should execute in a new, separate transaction context.\n+     */\n+    public void callToRequired() throws Exception {\n+        final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n+        userTransaction.begin();\n+\n+        // asyncWithRequired() will throw RuntimeException and cause its transaction to rollback.\n+        // But it has no bearing on the transaction here, which should be able to commit okay.\n+        remote.asyncWithRequired();\n+\n+        // wait a bit for the transaction in asyncWithRequired method to rollback\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NjI2Mg=="}, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUwNDE5NQ==", "bodyText": "Get instead of sleep would definitely be preferred as sleep could be racy.", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366504195", "createdAt": "2020-01-14T18:35:12Z", "author": {"login": "jamezp"}, "path": "testsuite/integration/multinode/src/test/java/org/jboss/as/test/multinode/transaction/async/ClientBean.java", "diffHunk": "@@ -84,10 +84,28 @@ public void callToStatusByTransactionmanager() throws Exception {\n         final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n         userTransaction.begin();\n         try {\n-            Assert.assertEquals(\"No transaction expected as async call does not pass txn context\",\n+            assertEquals(\"No transaction expected as async call does not pass txn context\",\n                     (Integer) Status.STATUS_NO_TRANSACTION, remote.transactionStatus().get());\n         } finally {\n             userTransaction.rollback();\n         }\n     }\n+\n+    /**\n+     * Verifies async method invocation with REQUIRED transaction attribute.\n+     * The client transaction context should not be propagated to the invoked async method.\n+     * The invoked async method should execute in a new, separate transaction context.\n+     */\n+    public void callToRequired() throws Exception {\n+        final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n+        userTransaction.begin();\n+\n+        // asyncWithRequired() will throw RuntimeException and cause its transaction to rollback.\n+        // But it has no bearing on the transaction here, which should be able to commit okay.\n+        remote.asyncWithRequired();\n+\n+        // wait a bit for the transaction in asyncWithRequired method to rollback\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NjI2Mg=="}, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjcxOTUyMQ==", "bodyText": "If it did return void, then we have another issue. It should be throwing an ExecutionException.\nhttps://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ExecutionException.html", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366719521", "createdAt": "2020-01-15T06:59:03Z", "author": {"login": "wolfc"}, "path": "testsuite/integration/multinode/src/test/java/org/jboss/as/test/multinode/transaction/async/ClientBean.java", "diffHunk": "@@ -84,10 +84,28 @@ public void callToStatusByTransactionmanager() throws Exception {\n         final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n         userTransaction.begin();\n         try {\n-            Assert.assertEquals(\"No transaction expected as async call does not pass txn context\",\n+            assertEquals(\"No transaction expected as async call does not pass txn context\",\n                     (Integer) Status.STATUS_NO_TRANSACTION, remote.transactionStatus().get());\n         } finally {\n             userTransaction.rollback();\n         }\n     }\n+\n+    /**\n+     * Verifies async method invocation with REQUIRED transaction attribute.\n+     * The client transaction context should not be propagated to the invoked async method.\n+     * The invoked async method should execute in a new, separate transaction context.\n+     */\n+    public void callToRequired() throws Exception {\n+        final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n+        userTransaction.begin();\n+\n+        // asyncWithRequired() will throw RuntimeException and cause its transaction to rollback.\n+        // But it has no bearing on the transaction here, which should be able to commit okay.\n+        remote.asyncWithRequired();\n+\n+        // wait a bit for the transaction in asyncWithRequired method to rollback\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NjI2Mg=="}, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njg0NzkxMw==", "bodyText": "When it returns void, I think it should just be a fire-and-forget on the client side, and whatever happened in the target method is not visible to the client at all.  The ExecutionException is available via the get() method when the method returns a Future.", "url": "https://github.com/wildfly/wildfly/pull/12900#discussion_r366847913", "createdAt": "2020-01-15T12:24:19Z", "author": {"login": "chengfang"}, "path": "testsuite/integration/multinode/src/test/java/org/jboss/as/test/multinode/transaction/async/ClientBean.java", "diffHunk": "@@ -84,10 +84,28 @@ public void callToStatusByTransactionmanager() throws Exception {\n         final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n         userTransaction.begin();\n         try {\n-            Assert.assertEquals(\"No transaction expected as async call does not pass txn context\",\n+            assertEquals(\"No transaction expected as async call does not pass txn context\",\n                     (Integer) Status.STATUS_NO_TRANSACTION, remote.transactionStatus().get());\n         } finally {\n             userTransaction.rollback();\n         }\n     }\n+\n+    /**\n+     * Verifies async method invocation with REQUIRED transaction attribute.\n+     * The client transaction context should not be propagated to the invoked async method.\n+     * The invoked async method should execute in a new, separate transaction context.\n+     */\n+    public void callToRequired() throws Exception {\n+        final TransactionalRemote remote = getRemote(TransactionalStatusByManager.class);\n+        userTransaction.begin();\n+\n+        // asyncWithRequired() will throw RuntimeException and cause its transaction to rollback.\n+        // But it has no bearing on the transaction here, which should be able to commit okay.\n+        remote.asyncWithRequired();\n+\n+        // wait a bit for the transaction in asyncWithRequired method to rollback\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI0NjI2Mg=="}, "originalCommit": {"oid": "707801c3ceaae6709987ab07b23778fb0efcaf01"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4001, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}