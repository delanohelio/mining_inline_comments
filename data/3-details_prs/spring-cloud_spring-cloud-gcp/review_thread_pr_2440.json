{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzEzMTc1", "number": 2440, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NzowNFrOEG6FIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0ODoyOFrOEG6Gqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc4NDk2OnYy", "diffSide": "LEFT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0NzowNFrOGl_pJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0MjowNVrOGmIsQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MzIyMA==", "bodyText": "Why are you removing the projectIdProvider parameter?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2440#discussion_r442493220", "createdAt": "2020-06-18T20:47:04Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfiguration.java", "diffHunk": "@@ -53,20 +54,22 @@\n @ConditionalOnProperty(value = \"spring.cloud.gcp.storage.enabled\", matchIfMissing = true)\n @EnableConfigurationProperties({GcpProperties.class, GcpStorageProperties.class})\n @Import(GoogleStorageProtocolResolver.class)\n-public abstract class GcpStorageAutoConfiguration { //NOSONAR squid:S1610 must be a class for Spring\n+public abstract class GcpStorageAutoConfiguration {\n+\tprivate GcpProjectIdProvider gcpProjectIdProvider; //NOSONAR squid:S1610 must be a class for Spring\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic static Storage storage(CredentialsProvider credentialsProvider,\n-\t\t\tGcpStorageProperties gcpStorageProperties,\n-\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a63e9a3d7ec32fcb41760af9618322617fb1d32"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MTQ3NA==", "bodyText": "Forgot to replace it, but I can see @dzou has setup a replacement already.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2440#discussion_r442641474", "createdAt": "2020-06-19T05:42:05Z", "author": {"login": "kioie"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfiguration.java", "diffHunk": "@@ -53,20 +54,22 @@\n @ConditionalOnProperty(value = \"spring.cloud.gcp.storage.enabled\", matchIfMissing = true)\n @EnableConfigurationProperties({GcpProperties.class, GcpStorageProperties.class})\n @Import(GoogleStorageProtocolResolver.class)\n-public abstract class GcpStorageAutoConfiguration { //NOSONAR squid:S1610 must be a class for Spring\n+public abstract class GcpStorageAutoConfiguration {\n+\tprivate GcpProjectIdProvider gcpProjectIdProvider; //NOSONAR squid:S1610 must be a class for Spring\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic static Storage storage(CredentialsProvider credentialsProvider,\n-\t\t\tGcpStorageProperties gcpStorageProperties,\n-\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MzIyMA=="}, "originalCommit": {"oid": "1a63e9a3d7ec32fcb41760af9618322617fb1d32"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc4NzEwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0Nzo1MVrOGl_qiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo0MjozNFrOGmIszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MzU3Ng==", "bodyText": "Should be projectIdProvider that was passed in.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2440#discussion_r442493576", "createdAt": "2020-06-18T20:47:51Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfiguration.java", "diffHunk": "@@ -53,20 +54,22 @@\n @ConditionalOnProperty(value = \"spring.cloud.gcp.storage.enabled\", matchIfMissing = true)\n @EnableConfigurationProperties({GcpProperties.class, GcpStorageProperties.class})\n @Import(GoogleStorageProtocolResolver.class)\n-public abstract class GcpStorageAutoConfiguration { //NOSONAR squid:S1610 must be a class for Spring\n+public abstract class GcpStorageAutoConfiguration {\n+\tprivate GcpProjectIdProvider gcpProjectIdProvider; //NOSONAR squid:S1610 must be a class for Spring\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic static Storage storage(CredentialsProvider credentialsProvider,\n-\t\t\tGcpStorageProperties gcpStorageProperties,\n-\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\tpublic Storage storage(CredentialsProvider credentialsProvider, GcpStorageProperties gcpStorageProperties) throws IOException {\n+\t\tthis.gcpProjectIdProvider = gcpStorageProperties.getProjectId() != null\n+\t\t\t\t? gcpStorageProperties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a63e9a3d7ec32fcb41760af9618322617fb1d32"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0MTYxMw==", "bodyText": "Yea, thanks for the catch!", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2440#discussion_r442641613", "createdAt": "2020-06-19T05:42:34Z", "author": {"login": "kioie"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfiguration.java", "diffHunk": "@@ -53,20 +54,22 @@\n @ConditionalOnProperty(value = \"spring.cloud.gcp.storage.enabled\", matchIfMissing = true)\n @EnableConfigurationProperties({GcpProperties.class, GcpStorageProperties.class})\n @Import(GoogleStorageProtocolResolver.class)\n-public abstract class GcpStorageAutoConfiguration { //NOSONAR squid:S1610 must be a class for Spring\n+public abstract class GcpStorageAutoConfiguration {\n+\tprivate GcpProjectIdProvider gcpProjectIdProvider; //NOSONAR squid:S1610 must be a class for Spring\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic static Storage storage(CredentialsProvider credentialsProvider,\n-\t\t\tGcpStorageProperties gcpStorageProperties,\n-\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\tpublic Storage storage(CredentialsProvider credentialsProvider, GcpStorageProperties gcpStorageProperties) throws IOException {\n+\t\tthis.gcpProjectIdProvider = gcpStorageProperties.getProjectId() != null\n+\t\t\t\t? gcpStorageProperties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5MzU3Ng=="}, "originalCommit": {"oid": "1a63e9a3d7ec32fcb41760af9618322617fb1d32"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Njc4ODkwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfigurationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0ODoyOFrOGl_ruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDo0ODoyOFrOGl_ruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ5Mzg4Mw==", "bodyText": "I would just add another test with and without the property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2440#discussion_r442493883", "createdAt": "2020-06-18T20:48:28Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/storage/GcpStorageAutoConfigurationTests.java", "diffHunk": "@@ -46,9 +45,11 @@\n  * @author Elena Felder\n  */\n public class GcpStorageAutoConfigurationTests {\n+\tprivate static final String PROJECT_NAME = \"hollow-light-of-the-sealed-land\";\n \n \tprivate ApplicationContextRunner contextRunner = new ApplicationContextRunner()\n \t\t.withConfiguration(AutoConfigurations.of(GcpStorageAutoConfiguration.class))\n+\t\t\t.withPropertyValues(\"spring.cloud.gcp.storage.project-id=\" + PROJECT_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a63e9a3d7ec32fcb41760af9618322617fb1d32"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2160, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}