{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTI3NDYz", "number": 2322, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODoxMFrODyNAFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyODozM1rODz3SZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4NDA3OnYy", "diffSide": "LEFT", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODoxMFrOGGHXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNTo1NToxMVrOGGsHkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw==", "bodyText": "Can we keep the test but change the assertions?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409065277", "createdAt": "2020-04-15T18:58:10Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTk3MA==", "bodyText": "The checks are now in AOP method interceptor. It would be hard to set up it in a unit test.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409091970", "createdAt": "2020-04-15T19:46:36Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0Nzk2OQ==", "bodyText": "Can it be moved to an integration test then?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147969", "createdAt": "2020-04-15T21:35:35Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2NzQ3NQ==", "bodyText": "I added an IT test for that.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409667475", "createdAt": "2020-04-16T15:55:11Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4NjA5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/package-info.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODo0MFrOGGHYdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOToxODo1MlrOGGIFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTU5MQ==", "bodyText": "What does this do?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409065591", "createdAt": "2020-04-15T18:58:40Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/package-info.java", "diffHunk": "@@ -0,0 +1,5 @@\n+/**\n+ * IT tests for spring-cloud-gcp-data-datastore.\n+ */\n+@org.springframework.lang.NonNullApi\n+package org.springframework.cloud.gcp.data.datastore.it;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3NzA1Ng==", "bodyText": "@org.springframework.lang.NonNullApi enables null checks", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409077056", "createdAt": "2020-04-15T19:18:52Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/package-info.java", "diffHunk": "@@ -0,0 +1,5 @@\n+/**\n+ * IT tests for spring-cloud-gcp-data-datastore.\n+ */\n+@org.springframework.lang.NonNullApi\n+package org.springframework.cloud.gcp.data.datastore.it;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTU5MQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY4OTcwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTozNFrOGGHauA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1OTozNFrOGGHauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjE2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Null Handling of Repository Methods\n          \n          \n            \n            ==== Empty result handling in repository methods", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409066168", "createdAt": "2020-04-15T18:59:34Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5MzY5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDozMFrOGGHc9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMDozMFrOGGHc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n          \n          \n            \n            Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty collection.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409066740", "createdAt": "2020-04-15T19:00:30Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5NjExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMToxMVrOGGHegw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzozODo1N1rOGGlvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ==", "bodyText": "Is this supposed to be a subsection of the above or a new section?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067139", "createdAt": "2020-04-15T19:01:11Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4Nzk3Mw==", "bodyText": "I think it's a separate section.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409087973", "createdAt": "2020-04-15T19:39:05Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NzIxMw==", "bodyText": "My question is more on \"should it be\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147213", "createdAt": "2020-04-15T21:34:01Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2ODA0MQ==", "bodyText": "I don't think it should. It's not only about return values, but also about (non-)nullable parameters.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409168041", "createdAt": "2020-04-15T22:20:26Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MzA3Mg==", "bodyText": "Whether an exception is thrown or null is returned seems directly related to the handling of empty results. Handling null parameters can be a separate section.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409563072", "createdAt": "2020-04-16T13:38:57Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY5ODIzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMTo1NVrOGGHf7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMTo1NVrOGGHf7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            They provide an opt-in null checks during runtime, as follows:\n          \n          \n            \n            They enable null checks during runtime, as follows:", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067503", "createdAt": "2020-04-15T19:01:55Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTcwMDgwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMjozOVrOGGHhkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowMjozOVrOGGHhkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzkyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n          \n          \n            \n             . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where `@NonNullApi` applies).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067921", "createdAt": "2020-04-15T19:02:39Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTcxMzUwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowNjoxN1rOGGHpyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyMzo0N1rOGHQH4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ==", "bodyText": "Is there anything you can use at a class level or method level?\nWouldn't @NonNull on  a method work?\nThis sentence makes it sound like you can only make it work on methods by using the package-level annotation which is extremely inflexible and cumbersome.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409070025", "createdAt": "2020-04-15T19:06:17Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTI3NA==", "bodyText": "I think @NonNull should work on a method without @NonNullApi, but for some reason it doesn't. I'll look into that.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409091274", "createdAt": "2020-04-15T19:45:14Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NzM3Nw==", "bodyText": "Let's resolve this before merging.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147377", "createdAt": "2020-04-15T21:34:22Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NDc5OA==", "bodyText": "So turns out the class has to be annotated with javax.annotation.Nonnull in order for @NonNull to work on methods and parameters. This is not documented. I'm not sure if it's bag or undocumented feature.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409174798", "createdAt": "2020-04-15T22:38:04Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDU4Nw==", "bodyText": "Can you file it as bug/question on the Spring side just to make sure we're not missing anything.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409560587", "createdAt": "2020-04-16T13:35:55Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NzM3Ng==", "bodyText": "I created an issue for Spring Data: https://jira.spring.io/browse/DATACMNS-1705", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r410257376", "createdAt": "2020-04-17T14:23:47Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk5ODMzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMzoyOFrOGIXk7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMzoyOFrOGIXk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODA3Nw==", "bodyText": "I took another look at this documentation and realized that this is part of core Spring and is not specific to Spring Data at all. Hence, I don't think we need to make a big deal out of it here. I think it's enough to mention that if you want null checks use null-safety annotations and link to them.\nAlso, please use the non-version-specific link: https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r411428077", "createdAt": "2020-04-20T14:33:28Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,37 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Empty result handling in repository methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty collection.\n+\n+===== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "486ff863a5ace0715ca23400ed85845dda8fdd94"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA5Nzk4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/datastore.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyODozM1rOGIh7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyODozM1rOGIh7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU5NQ==", "bodyText": "I think you deleted too much. The part about empty result handling was useful in my opinion. I would just collapse the whole nullability section into what you have here. The rest was fine.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r411597595", "createdAt": "2020-04-20T18:28:33Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,8 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+NOTE: You can enable nullability checks. For more details please see https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability docs].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dae3df2d06ed6a3d20442d7d6fb11fa8885f795"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2088, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}