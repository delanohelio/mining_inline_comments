{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NzM0Nzgy", "number": 2480, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo1ODo0OVrOETt8jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxNzowOVrOEUwraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTExMTgyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo1ODo0OVrOG5m84A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDo1ODo0OVrOG5m84A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MDE5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: Currently some features are not supported: query by example, projections, auditing.\n          \n          \n            \n            NOTE: Currently some features are not supported: query by example, projections, and auditing.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463060192", "createdAt": "2020-07-30T14:58:49Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -1,7 +1,7 @@\n :spring-data-commons-ref: https://docs.spring.io/spring-data/data-commons/docs/current/reference/html\n \n == Spring Data Cloud Firestore\n-NOTE: Currently some features are not supported: transactions, sorting, query by example, projections, auditing.\n+NOTE: Currently some features are not supported: query by example, projections, auditing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTEyNTI5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTowMTozMVrOG5nFRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTowMTozMVrOG5nFRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MjM0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the value is null, and the property type is `String`, the Id is generated automatically.\n          \n          \n            \n            NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463062341", "createdAt": "2020-07-30T15:01:31Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+If the value is null, and the property type is `String`, the Id is generated automatically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTEzODQ5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTowNDozN1rOG5nNuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowMzoxNVrOG7DfNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDUwNw==", "bodyText": "Could you also add another sentence describing what is the generated ID? (i.e. an X-character long UUID string.) This is to distinguish it from other generated IDs, such as sequences", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463064507", "createdAt": "2020-07-30T15:04:37Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+If the value is null, and the property type is `String`, the Id is generated automatically.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NzMzMg==", "bodyText": "I don't think we should do that. It is implementation detail and could change.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463297332", "createdAt": "2020-07-30T22:04:12Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+If the value is null, and the property type is `String`, the Id is generated automatically.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDUwNw=="}, "originalCommit": {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NjMxMA==", "bodyText": "I see, but I think there still should be some general description of this generated ID. How would the user know if it is a sequence-based generation vs. random-based?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464576310", "createdAt": "2020-08-03T18:03:15Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+If the value is null, and the property type is `String`, the Id is generated automatically.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDUwNw=="}, "originalCommit": {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTE1MDIwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTowNzoyMFrOG5nVEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTowNzoyMFrOG5nVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NjM4NQ==", "bodyText": "It would be better if the code snippet did not use .block() because you want to avoid synchronous operations in reactive.\nWould suggest renaming method to: public Mono<XXX>/Flux<XXX> doSomething() and then have the method return a mono/flux.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463066385", "createdAt": "2020-07-30T15:07:20Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -159,6 +160,39 @@ Repositories allow you to define custom Query Methods (detailed in the following\n \n NOTE: Custom queries with `@Query` annotation are not supported since there is no query language in Cloud Firestore\n \n+\n+=== Firestore Operations & Template\n+\n+`FirestoreOperations` and its implementation, `FirestoreTemplate`, provides the Template pattern familiar to Spring developers.\n+\n+Using the auto-configuration provided by Spring Data Cloud Firestore, your Spring application context will contain a fully configured `FirestoreTemplate` object that you can autowire in your application:\n+\n+[source,java]\n+----\n+@SpringBootApplication\n+public class FirestoreTemplateExample {\n+\n+\t@Autowired\n+\tFirestoreTemplate firestoreTemplate;\n+\n+\tpublic void doSomething() {\n+\n+\t\tthis.firestoreTemplate.save(new User(\"Alice\", 29))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTQ2ODI5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNDozNFrOG7Dhtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNDozNFrOG7Dhtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Njk1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t.then(this.firestoreTemplate.save(new User(\"Bob\", 60)));\n          \n          \n            \n            \t\t\t.then(this.firestoreTemplate.save(new User(\"Bob\", 60)));", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464576951", "createdAt": "2020-08-03T18:04:34Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -175,13 +175,17 @@ public class FirestoreTemplateExample {\n \t@Autowired\n \tFirestoreTemplate firestoreTemplate;\n \n-\tpublic void doSomething() {\n+\tpublic Mono<User> createUsers() {\n+\t\treturn this.firestoreTemplate.save(new User(\"Alice\", 29))\n+\t\t.then(this.firestoreTemplate.save(new User(\"Bob\", 60)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84c5bcd13b95e0d82b1a6027a7e71861134b0821"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTQ3NTA5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNjo0MVrOG7Dl2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMjozMzoyN1rOG7O5gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODAxMA==", "bodyText": "Add a new line above the NOTE: so that it gets rendered correctly as a note in the asciidoc.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464578010", "createdAt": "2020-08-03T18:06:41Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,7 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n-If the value is null, and the property type is `String`, the Id is generated automatically.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzI2Ng==", "bodyText": "@dmitry-s This is still not addressed. It won't render correctly otherwise.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464763266", "createdAt": "2020-08-04T02:33:27Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,7 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n-If the value is null, and the property type is `String`, the Id is generated automatically.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODAxMA=="}, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA0MjM1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxNTo1OFrOG7I_Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjozNzowNVrOG7ofgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ==", "bodyText": "@dmitry-s Could the id field be an Integer? In that case, what happens if it's null?\nIt just seems odd that it's so specific to String.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464666439", "createdAt": "2020-08-03T21:15:58Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDkxNA==", "bodyText": "It can't be an Integer. The client library can generate String ids only.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464734914", "createdAt": "2020-08-04T00:42:45Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ=="}, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzkzMA==", "bodyText": "Well, we're actually generating the IDs, but yes, because they need to be very random, it only works for strings.\nI would maybe clarifying by adding that ID auto-generation does not work for types other than String.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464763930", "createdAt": "2020-08-04T02:35:57Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ=="}, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MjU5NQ==", "bodyText": "Actually we only support String ids. I'll document this.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r465182595", "createdAt": "2020-08-04T16:37:05Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ=="}, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMjA0NTIxOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMToxNzowOVrOG7JBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDoxMzoxN1rOG7v3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjkzNQ==", "bodyText": "What not recommend autowiring FirestoreOperations?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464666935", "createdAt": "2020-08-03T21:17:09Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -159,6 +160,43 @@ Repositories allow you to define custom Query Methods (detailed in the following\n \n NOTE: Custom queries with `@Query` annotation are not supported since there is no query language in Cloud Firestore\n \n+\n+=== Firestore Operations & Template\n+\n+`FirestoreOperations` and its implementation, `FirestoreTemplate`, provides the Template pattern familiar to Spring developers.\n+\n+Using the auto-configuration provided by Spring Data Cloud Firestore, your Spring application context will contain a fully configured `FirestoreTemplate` object that you can autowire in your application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwMzQzOA==", "bodyText": "switched to FirestoreOperations", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r465303438", "createdAt": "2020-08-04T20:13:17Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -159,6 +160,43 @@ Repositories allow you to define custom Query Methods (detailed in the following\n \n NOTE: Custom queries with `@Query` annotation are not supported since there is no query language in Cloud Firestore\n \n+\n+=== Firestore Operations & Template\n+\n+`FirestoreOperations` and its implementation, `FirestoreTemplate`, provides the Template pattern familiar to Spring developers.\n+\n+Using the auto-configuration provided by Spring Data Cloud Firestore, your Spring application context will contain a fully configured `FirestoreTemplate` object that you can autowire in your application:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjkzNQ=="}, "originalCommit": {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2189, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}