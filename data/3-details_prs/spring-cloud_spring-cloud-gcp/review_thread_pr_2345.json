{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwOTM3NDg3", "number": 2345, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyODoyMFrOD4LVXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozOToxMlrOD4LiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjMyNTQyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/convert/DatastoreEntityConverter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyODoyMFrOGO3TKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToyODoyMFrOGO3TKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzOTI3NA==", "bodyText": "Technically, it's a breaking change. Can we just overload with a new method that has an additional argument?\nThis especially seems to make sense because you sometimes call the method with null typeInformation.\nAlso, can we rename typeInformation to mapTypeInformation?\nIf you're getting the type information for the whole map, why do you need the key and value type information? Maybe it would be easier if the caller just passed the map they wanted to fill with results?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2345#discussion_r418239274", "createdAt": "2020-04-30T19:28:20Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/convert/DatastoreEntityConverter.java", "diffHunk": "@@ -42,15 +42,16 @@\n \n \t/**\n \t * Read the entity as a {@link Map}.\n+\t * @param <T> the type of the key in the map\n+\t * @param <R> the type of the value in the map\n \t * @param keyType the key type of the map to be read.\n \t * @param componentType the value type of the map, into which each field value will be\n \t * converted.\n \t * @param entity the entity from Cloud Datastore.\n-\t * @param <T> the type of the key in the map\n-\t * @param <R> the type of the value in the map\n+\t * @param typeInformation the actual type of the map\n \t * @return a Map where the key values are the field names and the values the field\n \t * values.\n \t */\n \t<T, R> Map<T, R> readAsMap(Class<T> keyType, TypeInformation<R> componentType,\n-\t\t\tBaseEntity entity);\n+\t\t\tBaseEntity entity, TypeInformation typeInformation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d930071e474cb20af67882cf369ba8c8b3970b73"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjM1ODA1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/convert/DefaultDatastoreEntityConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozOToxMlrOGO3oMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoxMzowNVrOGO-hjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0NDY1OQ==", "bodyText": "This just doesn't seem right. Can we put the burden on the caller to create the map?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2345#discussion_r418244659", "createdAt": "2020-04-30T19:39:12Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/convert/DefaultDatastoreEntityConverter.java", "diffHunk": "@@ -79,11 +81,23 @@ public ReadWriteConversions getConversions() {\n \n \t@Override\n \tpublic <T, R> Map<T, R> readAsMap(Class<T> keyType, TypeInformation<R> componentType,\n-\t\t\tBaseEntity entity) {\n+\t\t\tBaseEntity entity, TypeInformation typeInformation) {\n \t\tif (entity == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tMap<T, R> result = new HashMap<>();\n+\t\tObject customMap = null;\n+\t\tif (typeInformation != null && !typeInformation.getType().isInterface()) {\n+\t\t\ttry {\n+\t\t\t\tcustomMap = ((Constructor<?>) typeInformation.getType().getConstructor()).newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d930071e474cb20af67882cf369ba8c8b3970b73"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM0MjUxNg==", "bodyText": "Could you elaborate why it doesn't seem right?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2345#discussion_r418342516", "createdAt": "2020-04-30T23:20:52Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/convert/DefaultDatastoreEntityConverter.java", "diffHunk": "@@ -79,11 +81,23 @@ public ReadWriteConversions getConversions() {\n \n \t@Override\n \tpublic <T, R> Map<T, R> readAsMap(Class<T> keyType, TypeInformation<R> componentType,\n-\t\t\tBaseEntity entity) {\n+\t\t\tBaseEntity entity, TypeInformation typeInformation) {\n \t\tif (entity == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tMap<T, R> result = new HashMap<>();\n+\t\tObject customMap = null;\n+\t\tif (typeInformation != null && !typeInformation.getType().isInterface()) {\n+\t\t\ttry {\n+\t\t\t\tcustomMap = ((Constructor<?>) typeInformation.getType().getConstructor()).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0NDY1OQ=="}, "originalCommit": {"oid": "d930071e474cb20af67882cf369ba8c8b3970b73"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM1NzY0Nw==", "bodyText": "I think if the caller has to create it, it will perhaps be inconsistent with the other cases.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2345#discussion_r418357647", "createdAt": "2020-05-01T00:13:05Z", "author": {"login": "ashesfall"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/convert/DefaultDatastoreEntityConverter.java", "diffHunk": "@@ -79,11 +81,23 @@ public ReadWriteConversions getConversions() {\n \n \t@Override\n \tpublic <T, R> Map<T, R> readAsMap(Class<T> keyType, TypeInformation<R> componentType,\n-\t\t\tBaseEntity entity) {\n+\t\t\tBaseEntity entity, TypeInformation typeInformation) {\n \t\tif (entity == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tMap<T, R> result = new HashMap<>();\n+\t\tObject customMap = null;\n+\t\tif (typeInformation != null && !typeInformation.getType().isInterface()) {\n+\t\t\ttry {\n+\t\t\t\tcustomMap = ((Constructor<?>) typeInformation.getType().getConstructor()).newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0NDY1OQ=="}, "originalCommit": {"oid": "d930071e474cb20af67882cf369ba8c8b3970b73"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2105, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}