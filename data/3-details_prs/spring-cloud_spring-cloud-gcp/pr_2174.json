{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDk1NzIy", "number": 2174, "title": "Eager Interleaved support added to a @Query annotation (#2165)", "bodyText": "a new param fetchInterleaved with defaults false was added to the @Query", "createdAt": "2020-02-04T23:07:52Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174", "merged": true, "mergeCommit": {"oid": "6f418a5e09eab3a62df7ccb2cb5371b798a4c102"}, "closed": true, "closedAt": "2020-02-19T20:02:33Z", "author": {"login": "s13o"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBX-6AAFqTM1MzgxMzgyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF8HwogFqTM2MTM5NDU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODEzODI0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-353813824", "createdAt": "2020-02-05T15:36:31Z", "commit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozNjozMVrOFl8X4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozNjozMVrOFl8X4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzMDc4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n          \n          \n            \n            \t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals to {@code false} .", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375330785", "createdAt": "2020-02-05T15:36:31Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODE1MjY2", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-353815266", "createdAt": "2020-02-05T15:38:14Z", "commit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozODoxNFrOFl8cYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjowMDoyNVrOFl9WXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzMTkzNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return {@code false} if {@link Interleaved} lists should be skipped.\n          \n          \n            \n            \t * @return {@code true} if {@link Interleaved} lists should be fetched eagerly.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375331936", "createdAt": "2020-02-05T15:38:14Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n+\t * @return {@code false} if {@link Interleaved} lists should be skipped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzODEzOQ==", "bodyText": "I think we should call it fetchInterleavedEagerly to make the name more precise.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375338139", "createdAt": "2020-02-05T15:47:44Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n+\t * @return {@code false} if {@link Interleaved} lists should be skipped.\n+\t */\n+\tboolean fetchInterleaved() default false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0Mjc2Mg==", "bodyText": "move \" \" + persistentEntity.tableName() to the line where you initialize final String subquery, then you could just use .append(subquery) here", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375342762", "createdAt": "2020-02-05T15:54:30Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -131,24 +131,29 @@ private SpannerStatementQueryExecutor() {\n \t * @param sql the sql that will be wrapped with sorting and paging options.\n \t * @param mappingContext a mapping context to convert between Cloud Spanner column names\n \t *     and underlying property names.\n+\t * @param fetchInterleaved when {@code true} additional subqueries will be added\n+\t *     to fetch eager-Interleaved lists with a single query.   .\n \t * @param <T> the domain type.\n \t * @return the final SQL string with paging and sorting applied.\n \t */\n \tpublic static <T> String applySortingPagingQueryOptions(Class<T> entityClass,\n \t\t\tSpannerPageableQueryOptions options, String sql,\n-\t\t\tSpannerMappingContext mappingContext) {\n+\t\t\tSpannerMappingContext mappingContext, boolean fetchInterleaved) {\n \t\tSpannerPersistentEntity<?> persistentEntity = mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n \n \t\t// Cloud Spanner does not preserve the order of derived tables so we must not wrap the\n \t\t// derived table\n \t\t// in SELECT * FROM () if there is no overriding pageable param.\n \t\tif ((options.getSort() == null || options.getSort().isUnsorted()) && options.getLimit() == null\n-\t\t\t\t&& options.getOffset() == null) {\n+\t\t\t\t&& options.getOffset() == null && !fetchInterleaved) {\n \t\t\treturn sql;\n \t\t}\n-\t\tStringBuilder sb = SpannerStatementQueryExecutor.applySort(options.getSort(),\n-\t\t\t\tnew StringBuilder(\"SELECT * FROM (\").append(sql).append(\")\"), (o) -> {\n+\t\tfinal String subquery = fetchInterleaved ? getChildrenSubquery(persistentEntity, mappingContext) : \"\";\n+\t\tStringBuilder sb = applySort(options.getSort(),\n+\t\t\t\tnew StringBuilder(\"SELECT *\").append(subquery)\n+\t\t\t\t\t\t.append(\" FROM (\").append(sql).append(\")\")\n+\t\t\t\t\t\t.append(subquery.isEmpty() ? \"\" : \" \" + persistentEntity.tableName()), (o) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0Njc4Mg==", "bodyText": "why was String.join(\", \", spannerPersistentEntity.columns()) removed?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375346782", "createdAt": "2020-02-05T16:00:25Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -303,18 +308,23 @@ private static void bindParameter(ValueBinder<Statement.Builder> bind,\n \n \tpublic static String getColumnsStringForSelect(\n \t\t\tSpannerPersistentEntity<?> spannerPersistentEntity, SpannerMappingContext mappingContext) {\n+\t\treturn String.join(\", \", spannerPersistentEntity.columns())\n+\t\t\t\t+ getChildrenSubquery(spannerPersistentEntity, mappingContext);\n+\t}\n+\n+\tprivate static String getChildrenSubquery(\n+\t\t\tSpannerPersistentEntity<?> spannerPersistentEntity, SpannerMappingContext mappingContext) {\n \t\tStringJoiner joiner = new StringJoiner(\", \");\n \t\tspannerPersistentEntity.doWithInterleavedProperties(spannerPersistentProperty -> {\n \t\t\tif (spannerPersistentProperty.isEagerInterleaved()) {\n \t\t\t\tClass childType = spannerPersistentProperty.getColumnInnerType();\n \t\t\t\tSpannerPersistentEntity childPersistentEntity = mappingContext.getPersistentEntity(childType);\n \t\t\t\tjoiner.add(getChildrenStructsQuery(\n-\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName()));\n+\t\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName()));\n \t\t\t}\n \t\t});\n-\t\tString childrenSubquery = joiner.toString();\n-\t\treturn String.join(\", \", spannerPersistentEntity.columns())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDc4NDM4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-354078438", "createdAt": "2020-02-05T22:13:33Z", "commit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxMzozM1rOFmJBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxMzozM1rOFmJBOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNzk3OQ==", "bodyText": "I'm OK with fetchInterleaved. I would just ask to create an integration test that uses @Query(.... fetchInterleaved=true) directly on an actual repository.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375537979", "createdAt": "2020-02-05T22:13:33Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n+\t * @return {@code false} if {@link Interleaved} lists should be skipped.\n+\t */\n+\tboolean fetchInterleaved() default false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzODEzOQ=="}, "originalCommit": {"oid": "bcd27c37d9057cfd65d9aababce1ddea11d41a27"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45392de0986dff6af269324b7c1fce4f1ed771c2", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/45392de0986dff6af269324b7c1fce4f1ed771c2", "committedDate": "2020-02-06T02:42:17Z", "message": "Integration test added (#2165)"}, "afterCommit": {"oid": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "committedDate": "2020-02-06T02:52:21Z", "message": "Integration test added (#2165)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "committedDate": "2020-02-06T02:52:21Z", "message": "Integration test added (#2165)"}, "afterCommit": {"oid": "710f66fc50da4836297175698b6d79135f694c71", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/710f66fc50da4836297175698b6d79135f694c71", "committedDate": "2020-02-06T14:11:41Z", "message": "Integration test added (#2165)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTc1Nzcx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-354175771", "createdAt": "2020-02-06T03:00:23Z", "commit": {"oid": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzowMDoyNFrOFmN-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzowMDoyNFrOFmN-9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw==", "bodyText": "The test fails on line 279 - the \"lazy-fetch\" is not work as expected (as it was before merge PR #2132) and the t.getSubTrades() returns an empty collection. Is it OK?\nThe Mockito.verify on line 280 also fails - a \"lazy-load-logic\" is not invoked.\nI did a separate local branch from rev 26e9adf and run a similar test against it.\nIn that brach, the followed test passed fine\n\t\tMockito.clearInvocations(spannerTemplate);\n\t\tassertThat(tradeRepository.fetchByIdLazy(aTrade.getId()))\n\t\t\t\t.isNotEmpty()\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getId()).isEqualTo(aTrade.getId()))\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getTraderId()).isEqualTo(aTrade.getTraderId()))\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));\n\t\tMockito.verify(spannerTemplate, Mockito.times(2))\n\t\t\t\t.executeQuery(any(Statement.class), any());\n\t\tMockito.verify(spannerTemplate, Mockito.times(1))\n\t\t\t\t.query(eq(Trade.class), any(Statement.class), any(SpannerQueryOptions.class));\nI think the PR #2132 did a bug with @query annotation.\nWill try to find & fix it with next commits", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375619317", "createdAt": "2020-02-06T03:00:24Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java", "diffHunk": "@@ -246,6 +255,28 @@ public void queryMethodsTest() {\n \t\tassertThat(this.subTradeRepository.count()).isEqualTo(2);\n \t\tassertThat(this.subTradeComponentRepository.count()).isEqualTo(3);\n \n+\t\t// test eager-fetch in @Query\n+\t\tMockito.clearInvocations(spannerTemplate);\n+\t\tfinal Trade aTrade = someTrade;\n+\t\tassertThat(tradeRepository.fetchByIdEagerly(aTrade.getId()))\n+\t\t\t\t.isNotEmpty()\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getId()).isEqualTo(aTrade.getId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getTraderId()).isEqualTo(aTrade.getTraderId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));\n+\t\tMockito.verify(spannerTemplate, Mockito.times(1))\n+\t\t\t\t.executeQuery(any(Statement.class), any(SpannerQueryOptions.class));\n+\n+\t\tMockito.clearInvocations(spannerTemplate);\n+\t\tassertThat(tradeRepository.fetchByIdLazy(aTrade.getId()))\n+\t\t\t\t.isNotEmpty()\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getId()).isEqualTo(aTrade.getId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getTraderId()).isEqualTo(aTrade.getTraderId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MjM3OTg4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-356237988", "createdAt": "2020-02-10T20:26:01Z", "commit": {"oid": "025386048f0175c53d25bdda0f81ff6fb81446ab"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyNjowMlrOFn0ZHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyNzowMlrOFn0bEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ==", "bodyText": "Could you clarify what is this method for?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297181", "createdAt": "2020-02-10T20:26:02Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -162,6 +171,27 @@ private SpannerStatementQueryExecutor() {\n \t\treturn sb.toString();\n \t}\n \n+\tprivate static String fetchInterleaved(String sql,\n+\t\t\tSpannerPersistentEntity<?> persistentEntity, SpannerMappingContext mappingContext, boolean fetchInterleaved) {\n+\t\tif (!fetchInterleaved) {\n+\t\t\treturn sql;\n+\t\t}\n+\n+\t\tfinal String subquery = getChildrenSubquery(persistentEntity, mappingContext);\n+\t\tif (subquery.isEmpty()) {\n+\t\t\treturn sql;\n+\t\t}\n+\n+\t\tfinal Pair<String, String> parts = splitSelectAll(sql);\n+\t\treturn parts.getSecond().isEmpty() ? sql : parts.getFirst() + subquery + parts.getSecond();\n+\t}\n+\n+\tprivate static Pair<String, String> splitSelectAll(String sql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025386048f0175c53d25bdda0f81ff6fb81446ab"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzUzMg==", "bodyText": "T is never used, please remove", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297532", "createdAt": "2020-02-10T20:26:44Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025386048f0175c53d25bdda0f81ff6fb81446ab"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzU3Nw==", "bodyText": "T is never used, please remove", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297577", "createdAt": "2020-02-10T20:26:49Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, KeySet keys) {\n+\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025386048f0175c53d25bdda0f81ff6fb81446ab"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzYzNQ==", "bodyText": "T is never used, please remove", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297635", "createdAt": "2020-02-10T20:26:57Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, KeySet keys) {\n+\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025386048f0175c53d25bdda0f81ff6fb81446ab"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzY4Mg==", "bodyText": "T is never used, please remove", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297682", "createdAt": "2020-02-10T20:27:02Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, KeySet keys) {\n+\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {\n \t\tmaybeEmitEvent(new BeforeDeleteEvent(mutations, null, keys, entityClass));\n \t\tapplyMutations(mutations);\n \t\tmaybeEmitEvent(new AfterDeleteEvent(mutations, null, keys, entityClass));\n \t}\n \n \t@Override\n-\tpublic long count(Class entityClass) {\n+\tpublic <T> long count(Class<T> entityClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "025386048f0175c53d25bdda0f81ff6fb81446ab"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4536248b7b90a93befb989532b5e5f92637de135", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4536248b7b90a93befb989532b5e5f92637de135", "committedDate": "2020-02-18T14:13:20Z", "message": "Eager Interleaved support added to a @Query annotation (#2165)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "765f5b512d7a5923248e8166f9a3a4596777598c", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/765f5b512d7a5923248e8166f9a3a4596777598c", "committedDate": "2020-02-18T14:13:20Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0efdfe11ddf979a8712b9ad1b9499fb2ccef15d5", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0efdfe11ddf979a8712b9ad1b9499fb2ccef15d5", "committedDate": "2020-02-18T14:13:20Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f7316bf94252465fec60fb2bbc863d711865bb", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/29f7316bf94252465fec60fb2bbc863d711865bb", "committedDate": "2020-02-18T14:13:20Z", "message": "Integration test added (#2165)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46ef7f0f0db65300c97c5a8f7781a9fa35e15ffa", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/46ef7f0f0db65300c97c5a8f7781a9fa35e15ffa", "committedDate": "2020-02-18T14:13:20Z", "message": "Make @Interleaved eager again (#2165)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657aa3968a1de5951d7c4a11003d962170f535eb", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/657aa3968a1de5951d7c4a11003d962170f535eb", "committedDate": "2020-02-18T14:13:20Z", "message": "Make @Interleaved eager again (#2165)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "committedDate": "2020-02-18T14:13:20Z", "message": "Make @Interleaved eager again and again (#2165)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa8b5d9e6dfae96b3d130d1056a54337e9448f23", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/aa8b5d9e6dfae96b3d130d1056a54337e9448f23", "committedDate": "2020-02-18T13:33:53Z", "message": "Make @Interleaved eager again and again (#2165)"}, "afterCommit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "committedDate": "2020-02-18T14:13:20Z", "message": "Make @Interleaved eager again and again (#2165)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTc5Nzkx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-360579791", "createdAt": "2020-02-18T18:41:12Z", "commit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0MToxMlrOFrN8RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0Mzo0M1rOFrOBSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n          \n          \n            \n            \t * <p/>Please note that sorting options should be passed by a {@link Pageable} parameter", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380861508", "createdAt": "2020-02-18T18:41:12Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -40,6 +41,9 @@\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n+\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTk4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n          \n          \n            \n            \t * instead of the query. Otherwise the sorting could be broken", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380861985", "createdAt": "2020-02-18T18:42:13Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -40,6 +41,9 @@\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n+\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2Mjc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * by a logic that fetches eager-interleaved fields when they are in the query result.\n          \n          \n            \n            \t * by logic that fetches eager-interleaved fields.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380862795", "createdAt": "2020-02-18T18:43:43Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -40,6 +41,9 @@\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n+\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n+\t * by a logic that fetches eager-interleaved fields when they are in the query result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b951e0e729aea2d0b860ddaa596f857dc94d15e6", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b951e0e729aea2d0b860ddaa596f857dc94d15e6", "committedDate": "2020-02-18T18:46:43Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTgzMjE4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-360583218", "createdAt": "2020-02-18T18:46:26Z", "commit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0NjoyNlrOFrOGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo0NjoyNlrOFrOGjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *     Please, pay attention there is no sense to pass it as {@code true} when the {@param sql} already contains\n          \n          \n            \n            \t *     Please note there is no sense to pass it as {@code true} when the {@param sql} already contains", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380864143", "createdAt": "2020-02-18T18:46:26Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -131,24 +131,33 @@ private SpannerStatementQueryExecutor() {\n \t * @param sql the sql that will be wrapped with sorting and paging options.\n \t * @param mappingContext a mapping context to convert between Cloud Spanner column names\n \t *     and underlying property names.\n+\t * @param fetchInterleaved when {@code true} additional subqueries will be added\n+\t *     to fetch eager-Interleaved lists with a single query.\n+\t *     Please, pay attention there is no sense to pass it as {@code true} when the {@param sql} already contains", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a6c7d6d17092c8b3cad69f1c09b6a0fd7c554fa", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5a6c7d6d17092c8b3cad69f1c09b6a0fd7c554fa", "committedDate": "2020-02-18T18:47:32Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f265d764be0b9c44393eada38e43174f676b4f39", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f265d764be0b9c44393eada38e43174f676b4f39", "committedDate": "2020-02-18T18:47:48Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98e6abfe9dd1254e3f7f5ce158010d97428b90cb", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/98e6abfe9dd1254e3f7f5ce158010d97428b90cb", "committedDate": "2020-02-18T18:48:24Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjAyMTgz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-360602183", "createdAt": "2020-02-18T19:14:38Z", "commit": {"oid": "98e6abfe9dd1254e3f7f5ce158010d97428b90cb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjIyODYz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-360622863", "createdAt": "2020-02-18T19:45:39Z", "commit": {"oid": "98e6abfe9dd1254e3f7f5ce158010d97428b90cb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "848c4b17aa693faefeacfdff6e837dbaf42721e0", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/848c4b17aa693faefeacfdff6e837dbaf42721e0", "committedDate": "2020-02-19T19:20:33Z", "message": "fix CI tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzY5NDgw", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-361369480", "createdAt": "2020-02-19T19:22:01Z", "commit": {"oid": "848c4b17aa693faefeacfdff6e837dbaf42721e0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "054b440e8993773a6fc5c94d1977df7257dacccc", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/054b440e8993773a6fc5c94d1977df7257dacccc", "committedDate": "2020-02-19T19:30:01Z", "message": "fix CI tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzk0NTY4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#pullrequestreview-361394568", "createdAt": "2020-02-19T19:58:29Z", "commit": {"oid": "054b440e8993773a6fc5c94d1977df7257dacccc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 527, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}