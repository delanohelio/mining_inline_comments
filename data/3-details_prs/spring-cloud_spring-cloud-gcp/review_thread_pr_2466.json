{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NzY0Mzc5", "number": 2466, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowMDozN1rOEO5mMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMjo1NlrOEPplHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDU5MTg1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowMDozN1rOGyUMqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowMDozN1rOGyUMqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMjkwNw==", "bodyText": "Fix indentation here; tab/space mismatch.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455412907", "createdAt": "2020-07-15T23:00:37Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/pom.xml", "diffHunk": "@@ -23,6 +23,7 @@\n         <dependency>\n             <groupId>com.google.cloud</groupId>\n             <artifactId>google-cloud-firestore</artifactId>\n+\t\t\t<version>1.35.2-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff44857ed60975d61fd3fb5e34141649e1255e65"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDU5OTYwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowNDowOVrOGyURJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowNDowOVrOGyURJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNDA1NA==", "bodyText": "Would be nice to add a javadoc for this one describing purpose of method something like \"Creates a single (non-batched) document in Firestore; ID generation is only available for non-batched created documents.\"", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455414054", "createdAt": "2020-07-15T23:04:09Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -189,6 +193,26 @@ public boolean isUsingStreamTokens() {\n \t\treturn saveAll(Mono.just(entity)).next();\n \t}\n \n+\tprivate <T> Flux<T> create(Publisher<T> entities) {\n+\t\treturn Flux.from(entities).flatMap(this::create);\n+\t}\n+\n+\tprivate <T> Mono<T> create(T entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff44857ed60975d61fd3fb5e34141649e1255e65"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDYwOTQwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowODowNFrOGyUWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzowODowNFrOGyUWoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNTQ1Ng==", "bodyText": "Minor nit, would prefer if you can format this section so each operator gets its own line like this:\nreturn  Flux.from(instances)\n    .groupBy(t -> getIdValue(t) == null)\n    .flatMap(groupedFlux -> groupedFlux.key() ? create(groupedFlux) : upsert(groupedFlux));\n\nClever usage of Group By!", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455415456", "createdAt": "2020-07-15T23:08:04Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -207,12 +231,18 @@ public boolean isUsingStreamTokens() {\n \t\t\t\treturn Flux.from(instances).doOnNext(t -> writes.add(createUpdateWrite(t)));\n \t\t\t}\n \n-\t\t\tFlux<List<T>> inputs = Flux.from(instances).bufferTimeout(this.writeBufferSize, this.writeBufferTimeout);\n-\t\t\treturn ObservableReactiveUtil.streamingBidirectionalCall(\n-\t\t\t\t\tthis::openWriteStream, inputs, this::buildWriteRequest);\n+\t\t\treturn  Flux.from(instances)\n+\t\t\t\t\t\t\t.groupBy(t -> getIdValue(t) == null).flatMap(groupedFlux ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff44857ed60975d61fd3fb5e34141649e1255e65"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDYyMzUxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoxNDoyOFrOGyUe0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoxNDoyOFrOGyUe0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNzU1Mg==", "bodyText": "I see; I would avoid introducing a new class here if possible -\nI think if you include it, you will have to write a lot more docs to describe what it means for future readers of this code - i.e. it would at least require a class-level javadoc, and also - generated is too general (i.e. generated what?); you may have to rename to needsGeneratedId or add comment; similarly name is too general as well - i.e. (name of what?)\nIt's not worth the burden of adding this class in my opinion if it is avoidable.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455417552", "createdAt": "2020-07-15T23:14:28Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +430,65 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tResourceName resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName.getName());\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (resourceName.isGenerated()) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n-\tprivate <T> String buildResourceName(T entity) {\n+\tprivate <T> ResourceName buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n-\n-\t\treturn buildResourceName(persistentEntity, idVal.toString());\n+\t\tboolean generated = false;\n+\t\tif (idVal == null) {\n+\t\t\tgenerated = true;\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n+\t\t\tidVal = Internal.autoId();\n+\t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n+\t\t}\n+\t\treturn new ResourceName(buildResourceName(persistentEntity, idVal.toString()), generated);\n \t}\n \n \tprivate String buildResourceName(FirestorePersistentEntity<?> persistentEntity, String s) {\n \t\treturn this.parent + \"/\" + persistentEntity.collectionName() + \"/\" + s;\n \t}\n \n-\tprivate String getIdValue(Object entity, FirestorePersistentEntity persistentEntity) {\n+\tprivate Object getIdValue(Object entity) {\n+\t\tFirestorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \n-\t\treturn idVal.toString();\n+\t\treturn idVal;\n \t}\n \n \tpublic FirestoreClassMapper getClassMapper() {\n \t\treturn this.classMapper;\n \t}\n+\n+\tprivate static class ResourceName {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff44857ed60975d61fd3fb5e34141649e1255e65"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MDY0MjUzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMjo0OFrOGyUpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzoyMjo0OFrOGyUpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMDI5Nw==", "bodyText": "I would avoid introducing the ResourceName class to avoid coupling the resource name with whether the id was generated or not. Also mentioned below; I think it's not worth the documentation burden.\nInstead, maybe refactor so it's like:\nObject idVal = getOrGenerateEntityId(entity);\nString resourceName = buildResourceName(Class<?> entityType, Object idVal);", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455420297", "createdAt": "2020-07-15T23:22:48Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +430,65 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tResourceName resourceName = buildResourceName(entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff44857ed60975d61fd3fb5e34141649e1255e65"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTY2MTA0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzozNToyOVrOGzEOCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzozNToyOVrOGzEOCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5OTY4OA==", "bodyText": "I don't really see the point of having this needsAutoId local variable, since it's only used once.\nI would just put getIdValue(entity) == null directly in the if.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456199688", "createdAt": "2020-07-17T03:35:29Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1869d36cbbdb5de914a9fcf596560450ee2e5e31"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTY2Mzk1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzozNzoxM1rOGzEPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzozNzoxM1rOGzEPnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMDA5Mg==", "bodyText": "Indicate the package of Internal? Otherwise, it's ambiguous.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456200092", "createdAt": "2020-07-17T03:37:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n \n+\t\t\t//TODO: replace with Internal.autoId() when it is available", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1869d36cbbdb5de914a9fcf596560450ee2e5e31"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTY2NjgwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzozOTowNFrOGzERQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzozOTowNFrOGzERQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMDUxNA==", "bodyText": "Maybe also say that id was null and what its type was to make the exception more clear.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456200514", "createdAt": "2020-07-17T03:39:04Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1869d36cbbdb5de914a9fcf596560450ee2e5e31"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTY3MDQ4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzo0MDo1OFrOGzETNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMzo0MDo1OFrOGzETNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMTAxNQ==", "bodyText": "Can you indicate where it was copied from?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456201015", "createdAt": "2020-07-17T03:40:58Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n \n+\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\tidVal = autoId();\n+\t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n+\t\t}\n \t\treturn buildResourceName(persistentEntity, idVal.toString());\n \t}\n \n \tprivate String buildResourceName(FirestorePersistentEntity<?> persistentEntity, String s) {\n \t\treturn this.parent + \"/\" + persistentEntity.collectionName() + \"/\" + s;\n \t}\n \n-\tprivate String getIdValue(Object entity, FirestorePersistentEntity persistentEntity) {\n+\tprivate Object getIdValue(Object entity) {\n+\t\tFirestorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n-\t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \n-\t\treturn idVal.toString();\n+\t\treturn persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \t}\n \n \tpublic FirestoreClassMapper getClassMapper() {\n \t\treturn this.classMapper;\n \t}\n+\n+\t/** Creates a pseudo-random 20-character ID that can be used for Firestore documents. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1869d36cbbdb5de914a9fcf596560450ee2e5e31"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODI4ODI4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyNjoxOFrOGzc_sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODoyNjoxOFrOGzc_sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTYxOQ==", "bodyText": "Why is it now possible for documentResourceName to be null?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456605619", "createdAt": "2020-07-17T18:26:18Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java", "diffHunk": "@@ -56,9 +57,12 @@ public FirestoreDefaultClassMapper() {\n \tpublic <T> Document entityToDocument(T entity, String documentResourceName) {\n \t\tDocumentSnapshot documentSnapshot = INTERNAL.snapshotFromObject(NOT_USED_PATH, entity);\n \t\tMap<String, Value> valuesMap = INTERNAL.protoFromSnapshot(documentSnapshot);\n-\t\treturn Document.newBuilder()\n-\t\t\t\t.putAllFields(valuesMap)\n-\t\t\t\t.setName(documentResourceName).build();\n+\t\tBuilder builder = Document.newBuilder().putAllFields(valuesMap);\n+\t\tif (documentResourceName != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "947d6f942dc8003bd5cfe882162b2bef9e315632"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODMwNjYwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozMTo0OVrOGzdKwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxODozMTo0OVrOGzdKwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODQ0OA==", "bodyText": "Could you move the Id generating helper method autoId() to a package-private class? maybe something like FirestoreIdGenerator.\nThis way you can move all the code and fields in there related to ID generation; which allows you to remember what to delete once com.google.cloud.firestore.Internal.autoId() becomes available. Otherwise you will have to comb through the code a little bit more in the future to do this removal.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456608448", "createdAt": "2020-07-17T18:31:49Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tBuilder builder = Write.newBuilder();\n+\t\tif (getIdValue(entity) == null) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\treturn builder.setUpdate(document).build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n \n+\t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n+\t\t\tidVal = autoId();\n+\t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n+\t\t}\n \t\treturn buildResourceName(persistentEntity, idVal.toString());\n \t}\n \n \tprivate String buildResourceName(FirestorePersistentEntity<?> persistentEntity, String s) {\n \t\treturn this.parent + \"/\" + persistentEntity.collectionName() + \"/\" + s;\n \t}\n \n-\tprivate String getIdValue(Object entity, FirestorePersistentEntity persistentEntity) {\n+\tprivate Object getIdValue(Object entity) {\n+\t\tFirestorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n-\t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \n-\t\treturn idVal.toString();\n+\t\treturn persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \t}\n \n \tpublic FirestoreClassMapper getClassMapper() {\n \t\treturn this.classMapper;\n \t}\n+\n+\t//Creates a pseudo-random 20-character ID that can be used for Firestore documents.\n+\t//Copied from com.google.cloud.firestore.FirestoreImpl\n+\tprivate static String autoId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "947d6f942dc8003bd5cfe882162b2bef9e315632"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ1MDA3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMTozN1rOGzejXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDowOTo0M1rOG0OvqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTEzNQ==", "bodyText": "For new classes, add a top level Javadoc :) i.e. with the author tag and brief description etc.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456631135", "createdAt": "2020-07-17T19:21:37Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.security.SecureRandom;\n+import java.util.Random;\n+\n+//Copied from com.google.cloud.firestore.FirestoreImpl", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35e69bcae7b249ab48995713d853a3659f880c2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NTE3Nw==", "bodyText": "That's why I didn't want to introduce a new class :)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456685177", "createdAt": "2020-07-17T21:38:23Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.security.SecureRandom;\n+import java.util.Random;\n+\n+//Copied from com.google.cloud.firestore.FirestoreImpl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTEzNQ=="}, "originalCommit": {"oid": "b35e69bcae7b249ab48995713d853a3659f880c2"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMDcxMg==", "bodyText": "Lol sorry for the inconvenience. At least it will be deleted shortly though! (Once they expose auto id).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r457420712", "createdAt": "2020-07-20T14:09:43Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.security.SecureRandom;\n+import java.util.Random;\n+\n+//Copied from com.google.cloud.firestore.FirestoreImpl", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTEzNQ=="}, "originalCommit": {"oid": "b35e69bcae7b249ab48995713d853a3659f880c2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ1MzQyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMjo1NlrOGzeldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMjo1NlrOGzeldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTY2OQ==", "bodyText": "Might as well just revert this file then if there are no changes.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456631669", "createdAt": "2020-07-17T19:22:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java", "diffHunk": "@@ -56,9 +57,10 @@ public FirestoreDefaultClassMapper() {\n \tpublic <T> Document entityToDocument(T entity, String documentResourceName) {\n \t\tDocumentSnapshot documentSnapshot = INTERNAL.snapshotFromObject(NOT_USED_PATH, entity);\n \t\tMap<String, Value> valuesMap = INTERNAL.protoFromSnapshot(documentSnapshot);\n-\t\treturn Document.newBuilder()\n-\t\t\t\t.putAllFields(valuesMap)\n-\t\t\t\t.setName(documentResourceName).build();\n+\t\tBuilder builder = Document.newBuilder().putAllFields(valuesMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b35e69bcae7b249ab48995713d853a3659f880c2"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2177, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}