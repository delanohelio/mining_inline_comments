{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NjYzODA3", "number": 2157, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0ODo0MlrODcqEmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMzoxNlrODdIq-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzc2MDI3OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0ODo0MlrOFkz56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDo0ODo0MlrOFkz56A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE0MzQ2NA==", "bodyText": "spacing seems off", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374143464", "createdAt": "2020-02-03T14:48:42Z", "author": {"login": "elefeint"}, "path": "pom.xml", "diffHunk": "@@ -42,6 +42,7 @@\n \t\t<module>spring-cloud-gcp-logging</module>\n \t\t<module>spring-cloud-gcp-data-firestore</module>\n \t\t<module>spring-cloud-gcp-bigquery</module>\n+        <module>spring-cloud-gcp-security-firebase</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzk0MzQxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNjoxOFrOFk1qPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozNjoxOFrOFk1qPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3MjIyMA==", "bodyText": "delete extra newline", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374172220", "createdAt": "2020-02-03T15:36:18Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/pom.xml", "diffHunk": "@@ -292,5 +298,6 @@\n             <scope>test</scope>\n         </dependency>\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzk4NjU5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthentiationAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo0Nzo1NVrOFk2Fjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo0Nzo1NVrOFk2Fjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3OTIxNQ==", "bodyText": "s/Authentiation/Authentication", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374179215", "createdAt": "2020-02-03T15:47:55Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthentiationAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.security.firebase.FirebaseJwtTokenDecoder;\n+import org.springframework.cloud.gcp.security.firebase.FirebaseTokenValidator;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.client.SimpleClientHttpRequestFactory;\n+import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtIssuerValidator;\n+import org.springframework.security.oauth2.jwt.JwtTimestampValidator;\n+import org.springframework.web.client.RestOperations;\n+import org.springframework.web.client.RestTemplate;\n+\n+/**\n+ *\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+@Configuration\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.security.firebase.enabled\", matchIfMissing = true)\n+@AutoConfigureBefore(OAuth2ResourceServerAutoConfiguration.class)\n+@AutoConfigureAfter(GcpContextAutoConfiguration.class)\n+@EnableConfigurationProperties(FirebaseAuthenticationProperties.class)\n+public class FirebaseAuthentiationAutoConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAxODk1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NjowNlrOFk2Zmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NjowNlrOFk2Zmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NDM0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Once you are logged, you should see a panel with the `curl` command.\n          \n          \n            \n            Once you are logged in, you should see a panel with the `curl` command.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374184347", "createdAt": "2020-02-03T15:56:06Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n+5. (Optional) : You can add a few users to try this out if you rather not use the Google Provider authentication\n+\n+== Running\n+\n+`Make sure you executed steps 2 & 3 from pre requisites section`\n+\n+----\n+$ ./mvnw clean spring-boot:run\n+----\n+\n+Open your browser at http://localhost:8080\n+\n+There's single page app with an `ask` button, if you try to click it you should get an error message.\n+\n+Also try to access the secure endpoint via curl:\n+\n+----\n+curl http://localhost:8080/answer\n+----\n+\n+You should get a 403 error.\n+\n+Now login using the button at the top right corner. You can choose between using a valid Google credential, or a user you have added via the\n+firebase authentication users menu.\n+\n+Once you are logged, you should see a panel with the `curl` command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAyMDQ4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NjoyNVrOFk2afw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1NjoyNVrOFk2afw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NDU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can also copy the curl command and execute it now on your console and you should be able to access the endpoint.\n          \n          \n            \n            You can also copy the `curl` command and execute it now on your console and you should be able to access the endpoint.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374184575", "createdAt": "2020-02-03T15:56:25Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n+5. (Optional) : You can add a few users to try this out if you rather not use the Google Provider authentication\n+\n+== Running\n+\n+`Make sure you executed steps 2 & 3 from pre requisites section`\n+\n+----\n+$ ./mvnw clean spring-boot:run\n+----\n+\n+Open your browser at http://localhost:8080\n+\n+There's single page app with an `ask` button, if you try to click it you should get an error message.\n+\n+Also try to access the secure endpoint via curl:\n+\n+----\n+curl http://localhost:8080/answer\n+----\n+\n+You should get a 403 error.\n+\n+Now login using the button at the top right corner. You can choose between using a valid Google credential, or a user you have added via the\n+firebase authentication users menu.\n+\n+Once you are logged, you should see a panel with the `curl` command.\n+\n+Try clicking the button again.\n+\n+You can also copy the curl command and execute it now on your console and you should be able to access the endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAzODk2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/java/com/example/FirebaseConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMToxOFrOFk2mQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMToxOFrOFk2mQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NzU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author vinicius\n          \n          \n            \n             * @author Vinicius Carvalho\n          \n          \n            \n             * @since 1.3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374187584", "createdAt": "2020-02-03T16:01:18Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/java/com/example/FirebaseConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package com.example;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * @author vinicius", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDA0NDgxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/java/com/example/SampleController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMjo0OVrOFk2qBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowMjo0OVrOFk2qBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4ODU1MQ==", "bodyText": "auth is unused?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374188551", "createdAt": "2020-02-03T16:02:49Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/java/com/example/SampleController.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.example;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@Controller\n+@RequestMapping(\"/answer\")\n+public class SampleController {\n+\t@GetMapping(produces = \"application/json\")\n+\tpublic ResponseEntity<Map<String, String>> hello() {\n+\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDA1ODY5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/resources/static/index.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjowNjo0MFrOFk2yyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODo1MjoyNlrOFk8ENQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MDc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                $(\"#loginBtn\").css(\"visibiliy\", \"visible\");\n          \n          \n            \n                                $(\"#loginBtn\").css(\"visibility\", \"visible\");", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374190793", "createdAt": "2020-02-03T16:06:40Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/resources/static/index.html", "diffHunk": "@@ -0,0 +1,131 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n+    <title>Spring Cloud GCP Firebase Authentication Sample Application</title>\n+    <script src=\"https://www.gstatic.com/firebasejs/7.7.0/firebase-app.js\"></script>\n+    <script src=\"https://www.gstatic.com/firebasejs/7.6.1/firebase-auth.js\"></script>\n+    <script src=\"https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.js\"></script>\n+    <link href=\"https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.css\" rel=\"stylesheet\" type=\"text/css\"/>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.js\"></script>\n+    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n+    <script src=\"/templates/js/app\"></script>\n+    <link href=\"css/app.css\" rel=\"stylesheet\">\n+    <script>\n+        var firebaseUser;\n+        var uiConfig = {\n+            signInSuccessUrl: \"http://\" + window.location.hostname + \":\" + window.location.port + \"/\",\n+            signInOptions: [\n+                // Leave the lines as is for the providers you want to offer your users.\n+                firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n+                firebase.auth.EmailAuthProvider.PROVIDER_ID\n+            ],\n+            // tosUrl and privacyPolicyUrl accept either url string or a callback\n+            // function.\n+            // Terms of service url/callback.\n+            tosUrl: \"http://\" + window.location.hostname + \":\" + window.location.port + \"/\",\n+            // Privacy policy url/callback.\n+            privacyPolicyUrl: function () {\n+                window.location.assign(\"http://\" + window.location.hostname + \":\" + window.location.port + \"/\");\n+\n+            }\n+        };\n+        // Initialize the FirebaseUI Widget using Firebase.\n+        var ui = new firebaseui.auth.AuthUI(firebase.auth());\n+        ui.start('#firebaseui-auth-container', uiConfig);\n+        // The start method will wait until the DOM is loaded.\n+        $(document).ready(function () {\n+\n+            $(\"#logoutBtn\").click(function () {\n+                firebase.auth().signOut().then(function () {\n+                    firebaseUser = null;\n+                    $(\"#loginBtn\").css(\"visibiliy\", \"visible\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NzE3Mw==", "bodyText": "hum this is odd, I fixed that before the PR, probably not pushed it , will be part of all the other fixes.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374277173", "createdAt": "2020-02-03T18:52:26Z", "author": {"login": "viniciusccarvalho"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/src/main/resources/static/index.html", "diffHunk": "@@ -0,0 +1,131 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta content=\"width=device-width, initial-scale=1\" name=\"viewport\">\n+    <title>Spring Cloud GCP Firebase Authentication Sample Application</title>\n+    <script src=\"https://www.gstatic.com/firebasejs/7.7.0/firebase-app.js\"></script>\n+    <script src=\"https://www.gstatic.com/firebasejs/7.6.1/firebase-auth.js\"></script>\n+    <script src=\"https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.js\"></script>\n+    <link href=\"https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.css\" rel=\"stylesheet\" type=\"text/css\"/>\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.js\"></script>\n+    <link href=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css\" rel=\"stylesheet\">\n+    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js\"></script>\n+    <script src=\"/templates/js/app\"></script>\n+    <link href=\"css/app.css\" rel=\"stylesheet\">\n+    <script>\n+        var firebaseUser;\n+        var uiConfig = {\n+            signInSuccessUrl: \"http://\" + window.location.hostname + \":\" + window.location.port + \"/\",\n+            signInOptions: [\n+                // Leave the lines as is for the providers you want to offer your users.\n+                firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n+                firebase.auth.EmailAuthProvider.PROVIDER_ID\n+            ],\n+            // tosUrl and privacyPolicyUrl accept either url string or a callback\n+            // function.\n+            // Terms of service url/callback.\n+            tosUrl: \"http://\" + window.location.hostname + \":\" + window.location.port + \"/\",\n+            // Privacy policy url/callback.\n+            privacyPolicyUrl: function () {\n+                window.location.assign(\"http://\" + window.location.hostname + \":\" + window.location.port + \"/\");\n+\n+            }\n+        };\n+        // Initialize the FirebaseUI Widget using Firebase.\n+        var ui = new firebaseui.auth.AuthUI(firebase.auth());\n+        ui.start('#firebaseui-auth-container', uiConfig);\n+        // The start method will wait until the DOM is loaded.\n+        $(document).ready(function () {\n+\n+            $(\"#logoutBtn\").click(function () {\n+                firebase.auth().signOut().then(function () {\n+                    firebaseUser = null;\n+                    $(\"#loginBtn\").css(\"visibiliy\", \"visible\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MDc5Mw=="}, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDExODIxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoyMzowMFrOFk3YAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjo1MzoxNlrOFlmVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwMDMyMA==", "bodyText": "Nimbus seems to have a utility for parsing an X.509 cert. Would it help?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374200320", "createdAt": "2020-02-03T16:23:00Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {\n+\tprivate static final String DECODING_ERROR_MESSAGE_TEMPLATE =\n+\t\t\"An error occurred while attempting to decode the Jwt: %s\";\n+\tprivate final RestOperations restClient;\n+\tprivate final String googlePublicKeysEndpoint;\n+\tprivate final OAuth2TokenValidator<Jwt> tokenValidator;\n+\tprivate final Logger logger = LoggerFactory.getLogger(FirebaseJwtTokenDecoder.class);\n+\tprivate Pattern maxAgePattern = Pattern.compile(\"max-age=(\\\\d*)\");\n+\tprivate ReentrantLock keysLock = new ReentrantLock();\n+\tprivate volatile Long expires = 0L;\n+\tprivate Map<String, JwtDecoder> delegates = new ConcurrentHashMap<>();\n+\tpublic FirebaseJwtTokenDecoder(RestOperations restClient, String googlePublicKeysEndpoint, OAuth2TokenValidator<Jwt> tokenValidator) {\n+\t\tthis.restClient = restClient;\n+\t\tthis.googlePublicKeysEndpoint = googlePublicKeysEndpoint;\n+\t\tthis.tokenValidator = tokenValidator;\n+\t}\n+\t@Override\n+\tpublic Jwt decode(String token) throws JwtException {\n+\t\tSignedJWT jwt = parse(token);\n+\t\tif (isExpired()) {\n+\t\t\ttry {\n+\t\t\t\tkeysLock.tryLock();\n+\t\t\t\trefresh();\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tkeysLock.unlock();\n+\t\t\t}\n+\t\t}\n+\t\tJwtDecoder decoder = delegates.get(jwt.getHeader().getKeyID());\n+\t\tif (decoder == null) {\n+\t\t\tthrow new JwtException(\"No certificate found for key: \" + jwt.getHeader().getKeyID());\n+\t\t}\n+\t\treturn decoder.decode(token);\n+\t}\n+\n+\tprivate void refresh() {\n+\t\tif (!isExpired()) {\n+\t\t\treturn;\n+\t\t}\n+\t\ttry {\n+\t\t\tResponseEntity<Map<String, String>> response = restClient.exchange(googlePublicKeysEndpoint, HttpMethod.GET, null, new ParameterizedTypeReference<Map<String, String>>() {\n+\t\t\t});\n+\t\t\tLong expiresAt = parseCacheControlHeaders(response.getHeaders());\n+\t\t\tthis.expires = expiresAt > -1L ? (System.currentTimeMillis() + expiresAt * 1000) : 0L;\n+\t\t\tif (!response.getStatusCode().is2xxSuccessful()) {\n+\t\t\t\tthrow new JwtException(\"Error retrieving public certificates from remote endpoint\");\n+\t\t\t}\n+\t\t\tdelegates.clear();\n+\t\t\tfor (String key : response.getBody().keySet()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tNimbusJwtDecoder nimbusJwtDecoder = NimbusJwtDecoder.withPublicKey((RSAPublicKey) convertToX509Cert(response.getBody().get(key)).getPublicKey())\n+\t\t\t\t\t\t\t.signatureAlgorithm(SignatureAlgorithm.from(\"RS256\"))\n+\t\t\t\t\t\t\t.build();\n+\t\t\t\t\tnimbusJwtDecoder.setJwtValidator(tokenValidator);\n+\t\t\t\t\tdelegates.put(key, nimbusJwtDecoder);\n+\t\t\t\t}\n+\t\t\t\tcatch (CertificateException ce) {\n+\t\t\t\t\tlogger.error(\"Could not read certificate for key {}\", key);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new JwtException(\"Error fetching public keys\", e);\n+\t\t}\n+\t}\n+\n+\tprivate SignedJWT parse(String token) {\n+\t\ttry {\n+\t\t\tJWT jwt = JWTParser.parse(token);\n+\t\t\tif (!(jwt instanceof SignedJWT)) {\n+\t\t\t\tthrow new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm());\n+\t\t\t}\n+\t\t\treturn (SignedJWT) jwt;\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tthrow new JwtException(String.format(DECODING_ERROR_MESSAGE_TEMPLATE, ex.getMessage()), ex);\n+\t\t}\n+\t}\n+\n+\tprivate Boolean isExpired() {\n+\t\treturn System.currentTimeMillis() >= this.expires;\n+\t}\n+\n+\tprivate X509Certificate convertToX509Cert(String certificateString) throws CertificateException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk2OTczOA==", "bodyText": "Hi @elefeint it did help, I've updated the code to use it instead of using a private method, will commit along with other reviews. Thanks for the tip", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374969738", "createdAt": "2020-02-04T22:53:16Z", "author": {"login": "viniciusccarvalho"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {\n+\tprivate static final String DECODING_ERROR_MESSAGE_TEMPLATE =\n+\t\t\"An error occurred while attempting to decode the Jwt: %s\";\n+\tprivate final RestOperations restClient;\n+\tprivate final String googlePublicKeysEndpoint;\n+\tprivate final OAuth2TokenValidator<Jwt> tokenValidator;\n+\tprivate final Logger logger = LoggerFactory.getLogger(FirebaseJwtTokenDecoder.class);\n+\tprivate Pattern maxAgePattern = Pattern.compile(\"max-age=(\\\\d*)\");\n+\tprivate ReentrantLock keysLock = new ReentrantLock();\n+\tprivate volatile Long expires = 0L;\n+\tprivate Map<String, JwtDecoder> delegates = new ConcurrentHashMap<>();\n+\tpublic FirebaseJwtTokenDecoder(RestOperations restClient, String googlePublicKeysEndpoint, OAuth2TokenValidator<Jwt> tokenValidator) {\n+\t\tthis.restClient = restClient;\n+\t\tthis.googlePublicKeysEndpoint = googlePublicKeysEndpoint;\n+\t\tthis.tokenValidator = tokenValidator;\n+\t}\n+\t@Override\n+\tpublic Jwt decode(String token) throws JwtException {\n+\t\tSignedJWT jwt = parse(token);\n+\t\tif (isExpired()) {\n+\t\t\ttry {\n+\t\t\t\tkeysLock.tryLock();\n+\t\t\t\trefresh();\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tkeysLock.unlock();\n+\t\t\t}\n+\t\t}\n+\t\tJwtDecoder decoder = delegates.get(jwt.getHeader().getKeyID());\n+\t\tif (decoder == null) {\n+\t\t\tthrow new JwtException(\"No certificate found for key: \" + jwt.getHeader().getKeyID());\n+\t\t}\n+\t\treturn decoder.decode(token);\n+\t}\n+\n+\tprivate void refresh() {\n+\t\tif (!isExpired()) {\n+\t\t\treturn;\n+\t\t}\n+\t\ttry {\n+\t\t\tResponseEntity<Map<String, String>> response = restClient.exchange(googlePublicKeysEndpoint, HttpMethod.GET, null, new ParameterizedTypeReference<Map<String, String>>() {\n+\t\t\t});\n+\t\t\tLong expiresAt = parseCacheControlHeaders(response.getHeaders());\n+\t\t\tthis.expires = expiresAt > -1L ? (System.currentTimeMillis() + expiresAt * 1000) : 0L;\n+\t\t\tif (!response.getStatusCode().is2xxSuccessful()) {\n+\t\t\t\tthrow new JwtException(\"Error retrieving public certificates from remote endpoint\");\n+\t\t\t}\n+\t\t\tdelegates.clear();\n+\t\t\tfor (String key : response.getBody().keySet()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tNimbusJwtDecoder nimbusJwtDecoder = NimbusJwtDecoder.withPublicKey((RSAPublicKey) convertToX509Cert(response.getBody().get(key)).getPublicKey())\n+\t\t\t\t\t\t\t.signatureAlgorithm(SignatureAlgorithm.from(\"RS256\"))\n+\t\t\t\t\t\t\t.build();\n+\t\t\t\t\tnimbusJwtDecoder.setJwtValidator(tokenValidator);\n+\t\t\t\t\tdelegates.put(key, nimbusJwtDecoder);\n+\t\t\t\t}\n+\t\t\t\tcatch (CertificateException ce) {\n+\t\t\t\t\tlogger.error(\"Could not read certificate for key {}\", key);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tthrow new JwtException(\"Error fetching public keys\", e);\n+\t\t}\n+\t}\n+\n+\tprivate SignedJWT parse(String token) {\n+\t\ttry {\n+\t\t\tJWT jwt = JWTParser.parse(token);\n+\t\t\tif (!(jwt instanceof SignedJWT)) {\n+\t\t\t\tthrow new JwtException(\"Unsupported algorithm of \" + jwt.getHeader().getAlgorithm());\n+\t\t\t}\n+\t\t\treturn (SignedJWT) jwt;\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tthrow new JwtException(String.format(DECODING_ERROR_MESSAGE_TEMPLATE, ex.getMessage()), ex);\n+\t\t}\n+\t}\n+\n+\tprivate Boolean isExpired() {\n+\t\treturn System.currentTimeMillis() >= this.expires;\n+\t}\n+\n+\tprivate X509Certificate convertToX509Cert(String certificateString) throws CertificateException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIwMDMyMA=="}, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDIwODAwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo0Njo1M1rOFk4PVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1NzozNlrOFk-BEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNDQ4NA==", "bodyText": "Is there a brief period when isExpired() is false even though the original certificate did expire?\nServer gives expiration timestamp as SERVER_TIME + expiresAt.\nClient gets a response at SERVER_TIME + LATENCY and sets its this.expires to SERVER_TIME + LATENCY + expiresAt * 1000.\nexpiresAt milliseconds pass; server rotates certificates. Authentication requests fail because of the mismatch, but refresh() bails out immediately because LATENCY has not passed yet, and isExpired() still returns false.\nIn real life it would be a negligibly small time period, but it could be longer if the original certificate fetch stalled.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374214484", "createdAt": "2020-02-03T16:46:53Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {\n+\tprivate static final String DECODING_ERROR_MESSAGE_TEMPLATE =\n+\t\t\"An error occurred while attempting to decode the Jwt: %s\";\n+\tprivate final RestOperations restClient;\n+\tprivate final String googlePublicKeysEndpoint;\n+\tprivate final OAuth2TokenValidator<Jwt> tokenValidator;\n+\tprivate final Logger logger = LoggerFactory.getLogger(FirebaseJwtTokenDecoder.class);\n+\tprivate Pattern maxAgePattern = Pattern.compile(\"max-age=(\\\\d*)\");\n+\tprivate ReentrantLock keysLock = new ReentrantLock();\n+\tprivate volatile Long expires = 0L;\n+\tprivate Map<String, JwtDecoder> delegates = new ConcurrentHashMap<>();\n+\tpublic FirebaseJwtTokenDecoder(RestOperations restClient, String googlePublicKeysEndpoint, OAuth2TokenValidator<Jwt> tokenValidator) {\n+\t\tthis.restClient = restClient;\n+\t\tthis.googlePublicKeysEndpoint = googlePublicKeysEndpoint;\n+\t\tthis.tokenValidator = tokenValidator;\n+\t}\n+\t@Override\n+\tpublic Jwt decode(String token) throws JwtException {\n+\t\tSignedJWT jwt = parse(token);\n+\t\tif (isExpired()) {\n+\t\t\ttry {\n+\t\t\t\tkeysLock.tryLock();\n+\t\t\t\trefresh();\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tkeysLock.unlock();\n+\t\t\t}\n+\t\t}\n+\t\tJwtDecoder decoder = delegates.get(jwt.getHeader().getKeyID());\n+\t\tif (decoder == null) {\n+\t\t\tthrow new JwtException(\"No certificate found for key: \" + jwt.getHeader().getKeyID());\n+\t\t}\n+\t\treturn decoder.decode(token);\n+\t}\n+\n+\tprivate void refresh() {\n+\t\tif (!isExpired()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwOTEzOA==", "bodyText": "From what I could tell, but need to confirm this, during the max-age window we keep the last key valid. So even if we had a stale cache, the very next keys would still contain at least the most recent key we had cached too.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374309138", "createdAt": "2020-02-03T19:57:36Z", "author": {"login": "viniciusccarvalho"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {\n+\tprivate static final String DECODING_ERROR_MESSAGE_TEMPLATE =\n+\t\t\"An error occurred while attempting to decode the Jwt: %s\";\n+\tprivate final RestOperations restClient;\n+\tprivate final String googlePublicKeysEndpoint;\n+\tprivate final OAuth2TokenValidator<Jwt> tokenValidator;\n+\tprivate final Logger logger = LoggerFactory.getLogger(FirebaseJwtTokenDecoder.class);\n+\tprivate Pattern maxAgePattern = Pattern.compile(\"max-age=(\\\\d*)\");\n+\tprivate ReentrantLock keysLock = new ReentrantLock();\n+\tprivate volatile Long expires = 0L;\n+\tprivate Map<String, JwtDecoder> delegates = new ConcurrentHashMap<>();\n+\tpublic FirebaseJwtTokenDecoder(RestOperations restClient, String googlePublicKeysEndpoint, OAuth2TokenValidator<Jwt> tokenValidator) {\n+\t\tthis.restClient = restClient;\n+\t\tthis.googlePublicKeysEndpoint = googlePublicKeysEndpoint;\n+\t\tthis.tokenValidator = tokenValidator;\n+\t}\n+\t@Override\n+\tpublic Jwt decode(String token) throws JwtException {\n+\t\tSignedJWT jwt = parse(token);\n+\t\tif (isExpired()) {\n+\t\t\ttry {\n+\t\t\t\tkeysLock.tryLock();\n+\t\t\t\trefresh();\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tkeysLock.unlock();\n+\t\t\t}\n+\t\t}\n+\t\tJwtDecoder decoder = delegates.get(jwt.getHeader().getKeyID());\n+\t\tif (decoder == null) {\n+\t\t\tthrow new JwtException(\"No certificate found for key: \" + jwt.getHeader().getKeyID());\n+\t\t}\n+\t\treturn decoder.decode(token);\n+\t}\n+\n+\tprivate void refresh() {\n+\t\tif (!isExpired()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNDQ4NA=="}, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDIzOTYwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo1NjoxMlrOFk4jWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTowMjozMFrOFljWNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxOTYwOQ==", "bodyText": "Could NimbusJwtDecoder be more helpful here? Nimbus has some re-downloading and an expiring cache implementation.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374219609", "createdAt": "2020-02-03T16:56:12Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3ODU1OA==", "bodyText": "It won't work, because that is for JWKSet spec, and Firebase does not follow that json standard. It only outputs a dictionary with the key_id :  PEMString, so the decoder would fail. That's one of the reasons I implemented all from scratch. I have also considered using HttpCachingClient from Apache HttpClient, but it would be able to cache the resource, but the parsing of the certificate would still happen for every token invocation, so I decided to cache the whole operation.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374278558", "createdAt": "2020-02-03T18:55:20Z", "author": {"login": "viniciusccarvalho"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxOTYwOQ=="}, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMDc1OQ==", "bodyText": "Right; sorry -- you've explained this before, and I forgot.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374920759", "createdAt": "2020-02-04T21:02:30Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-security-firebase/src/main/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoder.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.RSAPublicKey;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import com.nimbusds.jwt.JWT;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;\n+import org.springframework.web.client.RestOperations;\n+\n+\n+/**\n+ * Decodes a Firebase token into a {@link Jwt} token.\n+ * This decoder downloads public keys from https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com.\n+ * Keys are rotated often, and expiration date is returned as part of a Cache-Control max-age header.\n+ * The keys are cached locally and only refreshed when the expiration time is past.\n+ * Besides using the RSA keys to validate the token signature, this decoder also uses a pre=configured {@link org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator}\n+ * to validate all the claims.\n+ * The following validators are used by this class:\n+ * {@link org.springframework.security.oauth2.jwt.JwtTimestampValidator} - Validates the expiration date of the Token\n+ * {@link org.springframework.security.oauth2.jwt.JwtIssuerValidator} - Validates the iss claim header\n+ * {@link FirebaseTokenValidator} - Validates all other headers according to definition at https://firebase.google.com/docs/auth/admin/verify-id-tokens\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoder implements JwtDecoder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxOTYwOQ=="}, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDI1NDc0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-starters/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzowMDo0MlrOFk4s6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzowMDo0MlrOFk4s6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMjA1Nw==", "bodyText": "needs an extra tab.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374222057", "createdAt": "2020-02-03T17:00:42Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-starters/pom.xml", "diffHunk": "@@ -37,5 +37,6 @@\n \t\t<module>spring-cloud-gcp-starter-vision</module>\n \t\t<module>spring-cloud-gcp-starter-data-firestore</module>\n \t\t<module>spring-cloud-gcp-starter-bigquery</module>\n-\t</modules>\n+        <module>spring-cloud-gcp-starter-security-firebase</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDI2MTE0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzowMjoyNlrOFk4w0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzowMjoyNlrOFk4w0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMzA1Ng==", "bodyText": "spring-cloud-gcp-security-firebase/pom.xml  already pulls it in.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374223056", "createdAt": "2020-02-03T17:02:26Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase/pom.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>spring-cloud-gcp-starters</artifactId>\n+        <groupId>org.springframework.cloud</groupId>\n+        <version>1.3.0.BUILD-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>spring-cloud-gcp-starter-security-firebase</artifactId>\n+    <name>Spring Cloud GCP Security Firebase Starter</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.springframework.cloud</groupId>\n+            <artifactId>spring-cloud-gcp-starter</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.cloud</groupId>\n+            <artifactId>spring-cloud-gcp-security-firebase</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-oauth2-resource-server</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a18caef20ad725d4b6f4325091356c53d5aaf04b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODcyNzk0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxNzo0NVrOFljyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxNzo0NVrOFljyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyNzkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n          \n          \n            \n            3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your Firebase project.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374927926", "createdAt": "2020-02-04T21:17:45Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODcyODQxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxNzo1NFrOFljyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxNzo1NFrOFljyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n          \n          \n            \n            This app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374928006", "createdAt": "2020-02-04T21:17:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODcyOTI1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODowOVrOFljzBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODowOVrOFljzBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODEzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Link to Google's public endpoint containing firebase public keys.\n          \n          \n            \n            \t * Link to Google's public endpoint containing Firebase public keys.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374928135", "createdAt": "2020-02-04T21:18:09Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProperties.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Firebase Authentication application properties.\n+ *\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+@ConfigurationProperties(\"spring.cloud.gcp.security.firebase\")\n+public class FirebaseAuthenticationProperties {\n+\n+\t/**\n+\t * Link to Google's public endpoint containing firebase public keys.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODcyOTgyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODoyMlrOFljzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODoyMlrOFljzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODIyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n          \n          \n            \n            4. Go to your Firebase project, select the web application you have created and enable two providers: `Google` and `email`", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374928222", "createdAt": "2020-02-04T21:18:22Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODczMTI4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODo1M1rOFlj0Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxODo1M1rOFlj0Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `Make sure you executed steps 2 & 3 from pre requisites section`\n          \n          \n            \n            Make sure you executed steps 2 & 3 from prerequisites section.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374928454", "createdAt": "2020-02-04T21:18:53Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n+5. (Optional) : You can add a few users to try this out if you rather not use the Google Provider authentication\n+\n+== Running\n+\n+`Make sure you executed steps 2 & 3 from pre requisites section`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODczMjU3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxOToxNVrOFlj1BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToxOToxNVrOFlj1BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There's single page app with an `ask` button, if you try to click it you should get an error message.\n          \n          \n            \n            There's a single page app with an \"ask\" button, and if you try to click it you should get an error message.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374928645", "createdAt": "2020-02-04T21:19:15Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n+5. (Optional) : You can add a few users to try this out if you rather not use the Google Provider authentication\n+\n+== Running\n+\n+`Make sure you executed steps 2 & 3 from pre requisites section`\n+\n+----\n+$ ./mvnw clean spring-boot:run\n+----\n+\n+Open your browser at http://localhost:8080\n+\n+There's single page app with an `ask` button, if you try to click it you should get an error message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODczNDc4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMDowNFrOFlj2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMDowNFrOFlj2VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyODk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Now login using the button at the top right corner. You can choose between using a valid Google credential, or a user you have added via the\n          \n          \n            \n            Now login using the button at the top right corner. You can choose between using a valid Google credential, or a user you have added via the Firebase authentication users menu.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374928980", "createdAt": "2020-02-04T21:20:04Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n+5. (Optional) : You can add a few users to try this out if you rather not use the Google Provider authentication\n+\n+== Running\n+\n+`Make sure you executed steps 2 & 3 from pre requisites section`\n+\n+----\n+$ ./mvnw clean spring-boot:run\n+----\n+\n+Open your browser at http://localhost:8080\n+\n+There's single page app with an `ask` button, if you try to click it you should get an error message.\n+\n+Also try to access the secure endpoint via curl:\n+\n+----\n+curl http://localhost:8080/answer\n+----\n+\n+You should get a 403 error.\n+\n+Now login using the button at the top right corner. You can choose between using a valid Google credential, or a user you have added via the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODczNTE5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMDoxMlrOFlj2kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMDoxMlrOFlj2kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyOTA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            firebase authentication users menu.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374929043", "createdAt": "2020-02-04T21:20:12Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n+5. (Optional) : You can add a few users to try this out if you rather not use the Google Provider authentication\n+\n+== Running\n+\n+`Make sure you executed steps 2 & 3 from pre requisites section`\n+\n+----\n+$ ./mvnw clean spring-boot:run\n+----\n+\n+Open your browser at http://localhost:8080\n+\n+There's single page app with an `ask` button, if you try to click it you should get an error message.\n+\n+Also try to access the secure endpoint via curl:\n+\n+----\n+curl http://localhost:8080/answer\n+----\n+\n+You should get a 403 error.\n+\n+Now login using the button at the top right corner. You can choose between using a valid Google credential, or a user you have added via the\n+firebase authentication users menu.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc0NDY0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-security-firebase/src/test/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoderTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyMzoxNFrOFlj8YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTowOToyNlrOFmqS4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDUyOQ==", "bodyText": "There's a lot of code duplication across these tests. Can we re-use some of the code?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374930529", "createdAt": "2020-02-04T21:23:14Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-security-firebase/src/test/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoderTests.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.security.PrivateKey;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSHeader;\n+import com.nimbusds.jose.JWSSigner;\n+import com.nimbusds.jose.crypto.RSASSASigner;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.PlainJWT;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.CacheControl;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.JwtIssuerValidator;\n+import org.springframework.security.oauth2.jwt.JwtTimestampValidator;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestOperations;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.isNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+\n+/**\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoderTests {\n+\n+\tprivate static RSAKeyGeneratorUtils keyGeneratorUtils;\n+\n+\t@BeforeClass\n+\tpublic static void setup() throws Exception {\n+\t\tkeyGeneratorUtils = new RSAKeyGeneratorUtils();\n+\t}\n+\n+\t@Test\n+\tpublic void unsignedTokenTests() {\n+\t\tJWTClaimsSet claimsSet = new JWTClaimsSet.Builder()\n+\t\t\t\t.subject(\"test-subject\")\n+\t\t\t\t.expirationTime(Date.from(Instant.now().plusSeconds(60)))\n+\t\t\t\t.build();\n+\t\tPlainJWT plainJWT = new PlainJWT(claimsSet);\n+\n+\t\tFirebaseJwtTokenDecoder decoder = new FirebaseJwtTokenDecoder(mock(RestOperations.class), \"https://spring.local\", mock(OAuth2TokenValidator.class));\n+\t\tassertThatExceptionOfType(JwtException.class)\n+\t\t\t\t.isThrownBy(() -> decoder.decode(plainJWT.serialize()))\n+\t\t\t\t.withMessageStartingWith(\"An error occurred while attempting to decode the Jwt\");\n+\t}\n+\n+\t@Test\n+\tpublic void signedTokenTests() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4MzE3MA==", "bodyText": "Let's do it in a follow up. #2179.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r376083170", "createdAt": "2020-02-06T21:09:26Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-security-firebase/src/test/java/org/springframework/cloud/gcp/security/firebase/FirebaseJwtTokenDecoderTests.java", "diffHunk": "@@ -0,0 +1,329 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.security.firebase;\n+\n+import java.security.PrivateKey;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSHeader;\n+import com.nimbusds.jose.JWSSigner;\n+import com.nimbusds.jose.crypto.RSASSASigner;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.PlainJWT;\n+import com.nimbusds.jwt.SignedJWT;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.CacheControl;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.oauth2.core.DelegatingOAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidator;\n+import org.springframework.security.oauth2.core.OAuth2TokenValidatorResult;\n+import org.springframework.security.oauth2.jwt.Jwt;\n+import org.springframework.security.oauth2.jwt.JwtException;\n+import org.springframework.security.oauth2.jwt.JwtIssuerValidator;\n+import org.springframework.security.oauth2.jwt.JwtTimestampValidator;\n+import org.springframework.web.client.RestClientException;\n+import org.springframework.web.client.RestOperations;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.isNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+\n+/**\n+ * @author Vinicius Carvalho\n+ * @since 1.3\n+ */\n+public class FirebaseJwtTokenDecoderTests {\n+\n+\tprivate static RSAKeyGeneratorUtils keyGeneratorUtils;\n+\n+\t@BeforeClass\n+\tpublic static void setup() throws Exception {\n+\t\tkeyGeneratorUtils = new RSAKeyGeneratorUtils();\n+\t}\n+\n+\t@Test\n+\tpublic void unsignedTokenTests() {\n+\t\tJWTClaimsSet claimsSet = new JWTClaimsSet.Builder()\n+\t\t\t\t.subject(\"test-subject\")\n+\t\t\t\t.expirationTime(Date.from(Instant.now().plusSeconds(60)))\n+\t\t\t\t.build();\n+\t\tPlainJWT plainJWT = new PlainJWT(claimsSet);\n+\n+\t\tFirebaseJwtTokenDecoder decoder = new FirebaseJwtTokenDecoder(mock(RestOperations.class), \"https://spring.local\", mock(OAuth2TokenValidator.class));\n+\t\tassertThatExceptionOfType(JwtException.class)\n+\t\t\t\t.isThrownBy(() -> decoder.decode(plainJWT.serialize()))\n+\t\t\t\t.withMessageStartingWith(\"An error occurred while attempting to decode the Jwt\");\n+\t}\n+\n+\t@Test\n+\tpublic void signedTokenTests() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMDUyOQ=="}, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc1MTI5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNTo0MFrOFlkAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyNTo0MFrOFlkAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMTU1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n          \n          \n            \n            This sample application demonstrates how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374931555", "createdAt": "2020-02-04T21:25:40Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc2MDkwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyODo0OVrOFlkGLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyODo0OVrOFlkGLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMzAzOA==", "bodyText": "Could you describe or link to how to find this value?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374933038", "createdAt": "2020-02-04T21:28:49Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc2NDYwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMDoxMlrOFlkIpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMDoxMlrOFlkIpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMzY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`\n          \n          \n            \n            4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `Email/Password`", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374933668", "createdAt": "2020-02-04T21:30:12Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n+3. Make sure that you are authenticated with `gcloud` and you have set the correct `projectId` to be the same project as your firebase project. This\n+app uses default login and will rely on that to extract the `projectId` using the `GcpProjectIdProvider`\n+4. Go to your firebase project, select the web application you have created and enable two providers: `Google` and `email`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODc3MzcxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMzoxNlrOFlkOHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTozMzoxNlrOFlkOHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzNTA3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value\n          \n          \n            \n                b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value for the application you set up in step 1.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2157#discussion_r374935071", "createdAt": "2020-02-04T21:33:16Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-security-firebase-sample/README.adoc", "diffHunk": "@@ -0,0 +1,50 @@\n+= Spring Cloud GCP Firebase Authentication Sample application\n+\n+This sample application demonstrate how to use link:../../spring-cloud-gcp-starters/spring-cloud-gcp-starter-security-firebase[Spring Cloud GCP Firebase Authentication Starter] to extract user identity from a signed https://firebase.google.com/[Firebase] JWT token.\n+\n+The application provides a secured controller that can only be reached if a valid JWT token is sent as an HTTP Header.\n+\n+This sample app provides simple login page using https://github.com/firebase/firebaseui-web[firebase-ui] to fetch the JWT token.\n+\n+== Pre requisites\n+\n+1. Create a new firebase project as instructed https://firebase.google.com/docs/web/setup[here]\n+2. Once you finish the process make sure you configure the following environment variables before running the app:\n+    a. FIREBASE_CONFIG_API_KEY: Should be your \"apiKey\" value\n+    b. FIREBASE_CONFIG_APP_ID: Should be your \"appId\" value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176c2e250a6f30dd6be83700ac90579bf06ad604"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2210, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}