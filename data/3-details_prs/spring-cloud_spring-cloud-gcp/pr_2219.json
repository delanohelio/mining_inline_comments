{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTQ1Mjcw", "number": 2219, "title": "\"Soft-delete\" filter support for Interleaved collections", "bodyText": "Fixes: #2202", "createdAt": "2020-02-26T22:44:43Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219", "merged": true, "mergeCommit": {"oid": "f911110a79dfadee565e23b1e1f12716bb30514f"}, "closed": true, "closedAt": "2020-03-17T21:36:12Z", "author": {"login": "s13o"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIOsChgH2gAyMzgwNTQ1MjcwOmUxMTE3NmJiOTgyNWNiNzJlYTI4ZjRiNDk2OGZkYjJhM2M5N2E4YjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOpsJagFqTM3NjQyMjUzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1", "committedDate": "2020-02-26T22:44:15Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzMxODgz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-365731883", "createdAt": "2020-02-27T14:55:18Z", "commit": {"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDo1NToxOFrOFvUs3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDo1ODo0OVrOFvU12g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NjU1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Return Where cause of the property. Could be null.\n          \n          \n            \n            \t * Return {@code WHERE} clause of the property. Could be {@code null}.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385166556", "createdAt": "2020-02-27T14:55:18Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,10 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return Where cause of the property. Could be null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NjYwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return an optional {@code Where} cause of the property.\n          \n          \n            \n            \t * @return an optional {@code WHERE} cause of the property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385166604", "createdAt": "2020-02-27T14:55:22Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,10 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return Where cause of the property. Could be null.\n+\t * @return an optional {@code Where} cause of the property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NzU0Mw==", "bodyText": "\"overwrites the class annotation\"?\nWhat does that mean?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385167543", "createdAt": "2020-02-27T14:56:39Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/Where.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.mapping;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static java.lang.annotation.ElementType.FIELD;\n+import static java.lang.annotation.ElementType.TYPE;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * Where clause to add to the element Entity or target entity of a collection.\n+ * The clause is written in SQL. A common use case here is for soft-deletes.\n+ * It can be used on class level or on interleaved list as well.\n+ * It overwrites the class annotation when used on an interleaved list of the same type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2ODg1OA==", "bodyText": "You are repeating these two lines in several places. Please create a private utility method to reduce duplication.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385168858", "createdAt": "2020-02-27T14:58:49Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -162,6 +165,11 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\t\t\t\t.getPersistentProperty(o.getProperty());\n \t\t\t\t\treturn (property != null) ? property.getColumnName() : o.getProperty();\n \t\t\t\t});\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e11176bb9825cb72ea28f4b4968fdb2a3c97a8b1"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07eeabedd5a38db52673153b8e034317100551c3", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/07eeabedd5a38db52673153b8e034317100551c3", "committedDate": "2020-02-27T15:21:10Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d037dfbca7958c41279b33e3669be055d7d596c3", "committedDate": "2020-02-27T16:25:39Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/Where.java\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODIyOTM1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-365822935", "createdAt": "2020-02-27T16:48:32Z", "commit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0ODozMlrOFvY34Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzowNzo0MVrOFvZm1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNDkxMw==", "bodyText": "Rename to combine to avoid confusion with sql JOIN", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385234913", "createdAt": "2020-02-27T16:48:32Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,27 +227,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\tor.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))\n+\t\t\t\t.map(Where::value).orElse(\"\");\n+\t\tString condition = join(or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\n+\t\t\t\t: or.stream().collect(Collectors.joining(\") OR (\", \"(\", \")\")), whereCause);\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ persistentEntity.tableName() + (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n+\tprivate static String join(String cond1, String cond2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzNzc0MQ==", "bodyText": "you don't need or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\nyou should be able to do something like or.stream().map(s -> \"(\"+s\")\").collect(Collectors.joining(\" OR \"))", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385237741", "createdAt": "2020-02-27T16:52:38Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,27 +227,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\tor.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))\n+\t\t\t\t.map(Where::value).orElse(\"\");\n+\t\tString condition = join(or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\n+\t\t\t\t: or.stream().collect(Collectors.joining(\") OR (\", \"(\", \")\")), whereCause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MDEwMg==", "bodyText": "You have exactly 2 parts at that point. Just return \"(\"+cond1+\") AND (\"+cond2+\")\"", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385240102", "createdAt": "2020-02-27T16:56:24Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,27 +227,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\tor.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString whereCause = Optional.ofNullable(persistentEntity.findAnnotation(Where.class))\n+\t\t\t\t.map(Where::value).orElse(\"\");\n+\t\tString condition = join(or.size() == 0 ? \"\" : or.size() == 1 ? or.get(0)\n+\t\t\t\t: or.stream().collect(Collectors.joining(\") OR (\", \"(\", \")\")), whereCause);\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ persistentEntity.tableName() + (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n+\tprivate static String join(String cond1, String cond2) {\n+\t\tif (cond1.isEmpty()) {\n+\t\t\treturn cond2;\n+\t\t}\n+\t\tif (cond2.isEmpty()) {\n+\t\t\treturn cond1;\n+\t\t}\n+\t\tStringJoiner where = new StringJoiner(\") AND (\", \"(\", \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0MjE5MQ==", "bodyText": "create getWhere() method in SpannerPersistentEntity and use it instead of findMergedAnnotation", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385242191", "createdAt": "2020-02-27T16:59:35Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -324,7 +351,11 @@ private static String getChildrenSubquery(\n \t\t\t\tClass childType = spannerPersistentProperty.getColumnInnerType();\n \t\t\t\tSpannerPersistentEntity childPersistentEntity = mappingContext.getPersistentEntity(childType);\n \t\t\t\tjoiner.add(getChildrenStructsQuery(\n-\t\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName()));\n+\t\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName(),\n+\t\t\t\t\t\tOptional.ofNullable(spannerPersistentProperty.getWhere().map(Where::value)\n+\t\t\t\t\t\t\t\t.orElseGet(() -> Optional.ofNullable(AnnotatedElementUtils\n+\t\t\t\t\t\t\t\t\t\t.findMergedAnnotation(childType, Where.class)).map(Where::value).orElse(null))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NDczMw==", "bodyText": "create getWhere() method in SpannerPersistentEntity", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385244733", "createdAt": "2020-02-27T17:03:51Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -213,9 +216,11 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\t\tSpannerPersistentEntity<T> persistentEntity) {\n \t\t//an entity is eligible if all of the following true:\n \t\t//1. entity has eager loaded properties\n-\t\t//2. there are no read options, as they can't be applied to a query\n-\t\t//3. key set does not have ranges, as they can't be used in a query\n+\t\t//2. entity has \"Where\" annotation\n+\t\t//3. there are no read options, as they can't be applied to a query\n+\t\t//4. key set does not have ranges, as they can't be used in a query\n \t\treturn persistentEntity.hasEagerlyLoadedProperties() &&\n+\t\t\t\tpersistentEntity.findAnnotation(Where.class) == null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI0NjkzNA==", "bodyText": "Could you explain why can't an entity be eagerly loaded if it is annotated with @Where?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385246934", "createdAt": "2020-02-27T17:07:41Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -213,9 +216,11 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\t\tSpannerPersistentEntity<T> persistentEntity) {\n \t\t//an entity is eligible if all of the following true:\n \t\t//1. entity has eager loaded properties\n-\t\t//2. there are no read options, as they can't be applied to a query\n-\t\t//3. key set does not have ranges, as they can't be used in a query\n+\t\t//2. entity has \"Where\" annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1OTg5ODM0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-365989834", "createdAt": "2020-02-27T20:53:29Z", "commit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDo1MzoyOVrOFvg0FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDo1MzoyOVrOFvg0FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM2NTAxMw==", "bodyText": "rename to orParts", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r385365013", "createdAt": "2020-02-27T20:53:29Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -201,14 +209,15 @@ private SpannerStatementQueryExecutor() {\n \tpublic static <T> Statement buildQuery(KeySet keySet,\n \t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n \t\t\tSpannerMappingContext mappingContext) {\n-\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n+\t\tList<String> or = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d037dfbca7958c41279b33e3669be055d7d596c3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12716af93b258549ae98e8a818697c4026906bdb", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/12716af93b258549ae98e8a818697c4026906bdb", "committedDate": "2020-03-03T07:58:27Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "841c0b476f6dddd57a169263f81190d20ca0b639", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/841c0b476f6dddd57a169263f81190d20ca0b639", "committedDate": "2020-03-03T08:01:48Z", "message": "Merge branch 'feature/2202' of https://github.com/s13o/spring-cloud-gcp into feature/2202\n\n\u0001 Conflicts:\n\u0001\tspring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/06998a141c352ba74aa6d7d4529cf99b5e40f448", "committedDate": "2020-03-03T10:40:14Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b18d6e77853847441ffdad239f688a634487af5", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7b18d6e77853847441ffdad239f688a634487af5", "committedDate": "2020-03-03T09:25:42Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}, "afterCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/06998a141c352ba74aa6d7d4529cf99b5e40f448", "committedDate": "2020-03-03T10:40:14Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDgwNzA4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-368080708", "createdAt": "2020-03-03T15:33:18Z", "commit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozMzoxOFrOFxKxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTozNDowOVrOFxKzqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTA3Ng==", "bodyText": "Soft Delete is just one application of this. The section should probably be called something like \"Declarative Filtering with @Where\"", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387101076", "createdAt": "2020-03-03T15:33:18Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,9 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Soft Delete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwMTYxMA==", "bodyText": "Our conventions is one sentence per line.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387101610", "createdAt": "2020-03-03T15:34:09Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,9 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Soft Delete\n+The `@Where` annotation could be applied to the entity class or to the interleaved property. This annotation provides an SQL where clause", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODY0MzQz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-368864343", "createdAt": "2020-03-04T15:16:33Z", "commit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNToxNjozM1rOFxxVgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNTozODoxMVrOFxySkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczMjg2Ng==", "bodyText": "This construction persistentEntity.getWhere().isEmpty() is used in multiple places.  Please create hasWhere() method to improve readability.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387732866", "createdAt": "2020-03-04T15:16:33Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -162,6 +164,9 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\t\t\t\t.getPersistentProperty(o.getProperty());\n \t\t\t\t\treturn (property != null) ? property.getColumnName() : o.getProperty();\n \t\t\t\t});\n+\t\tif (!persistentEntity.getWhere().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTM0NA==", "bodyText": "Move this method to SpannerQueryOptions class and rename to fromReadOptions", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387735344", "createdAt": "2020-03-04T15:20:09Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -209,14 +213,35 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t\treturn entities;\n \t}\n \n-\tprivate <T> boolean isEligibleForEagerFetch(KeySet keys, SpannerReadOptions options,\n-\t\t\tSpannerPersistentEntity<T> persistentEntity) {\n-\t\t//an entity is eligible if all of the following true:\n-\t\t//1. entity has eager loaded properties\n-\t\t//2. there are no read options, as they can't be applied to a query\n-\t\t//3. key set does not have ranges, as they can't be used in a query\n-\t\treturn persistentEntity.hasEagerlyLoadedProperties() &&\n-\t\t\t\toptions == null && !keys.getRanges().iterator().hasNext();\n+\t/**\n+\t * In many cases {@link KeySet} with {@link SpannerReadOptions} are compatible with\n+\t * {@link SpannerReadOptions}. The method throws exception when it is impossible.\n+\t * @param options read-parameters\n+\t * @return query-parameters\n+\t * @throws IllegalArgumentException when {@link SpannerQueryOptions} can't be converted to {@link SpannerQueryOptions}\n+\t * \tor {@code keys} have \"ranges\".\n+\t */\n+\tprivate static SpannerQueryOptions toQueryOption(KeySet keys, SpannerReadOptions options) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NDM0NA==", "bodyText": "typos, should be keyClause, whereClause", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387744344", "createdAt": "2020-03-04T15:32:24Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyCause = orParts.stream().collect(\n+\t\t\t\t() -> new StringJoiner(\") OR (\", \"(\", \")\").setEmptyValue(\"\"),\n+\t\t\t\tStringJoiner::add, StringJoiner::merge).toString();\n+\t\tString condition = combine(keyCause, whereCause != null ? whereCause : \"\");\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ (StringUtils.isEmpty(index) ? persistentEntity.tableName() : String.format(\"%s@{FORCE_INDEX=%s}\", persistentEntity.tableName(), index))\n+\t\t\t\t+ (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n \tprivate static <C, P> String getChildrenStructsQuery(\n \t\t\tSpannerPersistentEntity<C> childPersistentEntity,\n \t\t\tSpannerPersistentEntity<P> parentPersistentEntity, SpannerMappingContext mappingContext,\n-\t\t\tString columnName) {\n+\t\t\tString columnName, String whereCause) {\n \t\tString tableName = childPersistentEntity.tableName();\n \t\tList<SpannerPersistentProperty> parentKeyProperties = parentPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tString condition = parentKeyProperties.stream()\n+\t\tString keyCause = parentKeyProperties.stream()\n \t\t\t\t.map(keyProp -> tableName + \".\" + keyProp.getColumnName()\n \t\t\t\t\t\t+ \" = \"\n \t\t\t\t\t\t+ parentPersistentEntity.tableName() + \".\" + keyProp.getColumnName())\n \t\t\t\t.collect(Collectors.joining(\" AND \"));\n-\n+\t\tString condition = combine(keyCause, whereCause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0ODQ5Ng==", "bodyText": "Can we use orParts.stream().map(s -> \"(\"+s+\")\").collect(Collectors.joining(\" OR \")) instead?\nThat would be shorter and more readable.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r387748496", "createdAt": "2020-03-04T15:38:11Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,45 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyCause = orParts.stream().collect(\n+\t\t\t\t() -> new StringJoiner(\") OR (\", \"(\", \")\").setEmptyValue(\"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06998a141c352ba74aa6d7d4529cf99b5e40f448"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4e555ab6b5b56a10c8e238f3284f4697775b3e41", "committedDate": "2020-03-06T20:34:24Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDI2ODA2", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-372026806", "createdAt": "2020-03-10T14:51:50Z", "commit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1MTo1MFrOF0SdzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzoxMjozOFrOF0YxAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MjgxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `@Where` annotation could be applied to the entity class or to the interleaved property.\n          \n          \n            \n            The `@Where` annotation could be applied to an entity class or to an interleaved property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390372813", "createdAt": "2020-03-10T14:51:50Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,33 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Declarative Filtering with `@Where`\n+The `@Where` annotation could be applied to the entity class or to the interleaved property.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's think we have an `Agreement` with a list of `Participants` which could be changed at work on it.\n          \n          \n            \n            Let's say we have an `Agreement` entity with a list of `Participants` which could be associated with it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390375648", "createdAt": "2020-03-10T14:55:17Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,33 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Declarative Filtering with `@Where`\n+The `@Where` annotation could be applied to the entity class or to the interleaved property.\n+This annotation provides an SQL where clause that will be applied at the fetching of interleaved collections or the entity itself.\n+\n+Let's think we have an `Agreement` with a list of `Participants` which could be changed at work on it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3ODA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The business requirement is to fetch an actual list of participants but for a security reason, all records should remain in the database forever.\n          \n          \n            \n            We would like to fetch a list of currently active participants. For security reasons, all records should remain in the database forever, even if participants become inactive.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390378075", "createdAt": "2020-03-10T14:58:21Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,33 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Declarative Filtering with `@Where`\n+The `@Where` annotation could be applied to the entity class or to the interleaved property.\n+This annotation provides an SQL where clause that will be applied at the fetching of interleaved collections or the entity itself.\n+\n+Let's think we have an `Agreement` with a list of `Participants` which could be changed at work on it.\n+The business requirement is to fetch an actual list of participants but for a security reason, all records should remain in the database forever.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MDEzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The simplest way to do it is to use the `@Where` annotation like on the example below.\n          \n          \n            \n            That can be easily achieved with the `@Where` annotation, which is demonstrated by this example:", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390380130", "createdAt": "2020-03-10T15:00:54Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,33 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Declarative Filtering with `@Where`\n+The `@Where` annotation could be applied to the entity class or to the interleaved property.\n+This annotation provides an SQL where clause that will be applied at the fetching of interleaved collections or the entity itself.\n+\n+Let's think we have an `Agreement` with a list of `Participants` which could be changed at work on it.\n+The business requirement is to fetch an actual list of participants but for a security reason, all records should remain in the database forever.\n+The simplest way to do it is to use the `@Where` annotation like on the example below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MjY4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>\n          \n          \n            \n            \t *      <li>we need \"eager\" or \"Where\", {@code options} and {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390382681", "createdAt": "2020-03-10T15:04:19Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java", "diffHunk": "@@ -85,14 +86,24 @@\n \n \t/**\n \t * Finds objects stored from their keys.\n+\t * When the entity has a {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} class annotation\n+\t * or some property is eagerly interleaved the SQL query will be performed instead of the\n+\t * {@link ReadContext#read} to fetch such properties and satisfy the {@code sql where} condition.\n \t * @param entityClass the type of the object to retrieve.\n \t * @param keys the keys of the objects to retrieve.\n \t * @param options the Cloud Spanner read options with which to conduct the read operation.\n \t * @param <T> the type of the object to retrieve.\n \t * @return a list of objects that could be found using the given keys. If no keys could be\n \t * found the list will be empty.\n+\t * @throws IllegalArgumentException when a combination of provided parameters and annotations does not allow to take\n+\t *  unambiguous decision about the way to perform the operation. Such algorithm is used:\n+\t *  <ul>\n+\t *      <li>no need for \"eager\" or \"Where\" - we call {@link ReadContext#read}</li>\n+\t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4MzAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} can't be converted to {@link SpannerQueryOptions} - an exception will be thrown</li>\n          \n          \n            \n            \t *      <li>otherwise an exception will be thrown</li>", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390383031", "createdAt": "2020-03-10T15:04:50Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java", "diffHunk": "@@ -85,14 +86,24 @@\n \n \t/**\n \t * Finds objects stored from their keys.\n+\t * When the entity has a {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} class annotation\n+\t * or some property is eagerly interleaved the SQL query will be performed instead of the\n+\t * {@link ReadContext#read} to fetch such properties and satisfy the {@code sql where} condition.\n \t * @param entityClass the type of the object to retrieve.\n \t * @param keys the keys of the objects to retrieve.\n \t * @param options the Cloud Spanner read options with which to conduct the read operation.\n \t * @param <T> the type of the object to retrieve.\n \t * @return a list of objects that could be found using the given keys. If no keys could be\n \t * found the list will be empty.\n+\t * @throws IllegalArgumentException when a combination of provided parameters and annotations does not allow to take\n+\t *  unambiguous decision about the way to perform the operation. Such algorithm is used:\n+\t *  <ul>\n+\t *      <li>no need for \"eager\" or \"Where\" - we call {@link ReadContext#read}</li>\n+\t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} are compatible with {@link SpannerQueryOptions} - in this case we execute an SQL query</li>\n+\t *      <li>we need \"eager\" or \"Where\" and {@code options} with {@code keys} can't be converted to {@link SpannerQueryOptions} - an exception will be thrown</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NDU1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * The method does this conversion or throws an exception when such is impossible.\n          \n          \n            \n            \t * The method executes such conversion or throws an exception if it's impossible.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390384556", "createdAt": "2020-03-10T15:06:48Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerReadOptions.java", "diffHunk": "@@ -92,4 +93,27 @@ public SpannerReadOptions setAllowPartialRead(boolean allowPartialRead) {\n \t\treturn this.getOptions();\n \t}\n \n+\t/**\n+\t * In many cases a {@link SpannerReadOptions} class instance could be compatible with {@link SpannerQueryOptions}.\n+\t * The method does this conversion or throws an exception when such is impossible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM5MjgyNg==", "bodyText": "Use fully qualified name for toArray()", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390392826", "createdAt": "2020-03-10T15:17:31Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -473,35 +484,27 @@ private ResultSet performQuery(Statement statement, SpannerQueryOptions options)\n \t\treturn resultSet;\n \t}\n \n-\tprivate <T> List<T> executeReadQueryAndResolveChildren(KeySet keys, SpannerPersistentEntity<T> persistentEntity) {\n+\tprivate <T> List<T> executeReadQueryAndResolveChildren(KeySet keys, SpannerPersistentEntity<T> persistentEntity,\n+\t\t\tSpannerQueryOptions options, String index) {\n \t\tStatement statement = SpannerStatementQueryExecutor.buildQuery(keys, persistentEntity,\n \t\t\t\tthis.spannerEntityProcessor.getWriteConverter(),\n-\t\t\t\tthis.mappingContext);\n+\t\t\t\tthis.mappingContext, index);\n \n-\t\treturn resolveChildEntities(query(persistentEntity.getType(), statement, null), null);\n+\t\treturn resolveChildEntities(query(persistentEntity.getType(), statement, options), options.getIncludeProperties());\n \t}\n \n \tprivate ResultSet executeRead(String tableName, KeySet keys, Iterable<String> columns,\n \t\t\tSpannerReadOptions options) {\n \n \t\tlong startTime = LOGGER.isDebugEnabled() ? System.currentTimeMillis() : 0;\n \n-\t\tResultSet resultSet;\n-\n \t\tReadContext readContext = (options != null && options.getTimestampBound() != null)\n \t\t\t\t? getReadContext(options.getTimestampBound())\n \t\t\t\t: getReadContext();\n \n-\t\tif (options == null) {\n-\t\t\tresultSet = readContext.read(tableName, keys, columns);\n-\t\t}\n-\t\telse if (options.getIndex() != null) {\n-\t\t\tresultSet = readContext.readUsingIndex(tableName, options.getIndex(), keys,\n-\t\t\t\t\tcolumns, options.getOptions());\n-\t\t}\n-\t\telse {\n-\t\t\tresultSet = readContext.read(tableName, keys, columns, options.getOptions());\n-\t\t}\n+\t\tfinal ResultSet resultSet = options != null && options.getIndex() != null\n+\t\t\t\t? readContext.readUsingIndex(tableName, options.getIndex(), keys, columns, options.getOptions())\n+\t\t\t\t: readContext.read(tableName, keys, columns, options == null ? toArray() : options.getOptions());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NzI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Return {@code WHERE} clause of the interleaved property. Couldn't be {@code null} but an empty string.\n          \n          \n            \n            \t * Returns {@code WHERE} clause of the interleaved property or empty string if no value.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390447264", "createdAt": "2020-03-10T16:30:42Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,19 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return {@code WHERE} clause of the interleaved property. Couldn't be {@code null} but an empty string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NzU3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return a {@code Where} cause of the interleaved property or empty string.\n          \n          \n            \n            \t * @return a {@code Where} clause of the interleaved property or empty string.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390447575", "createdAt": "2020-03-10T16:31:05Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,19 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Return {@code WHERE} clause of the interleaved property. Couldn't be {@code null} but an empty string.\n+\t * @return a {@code Where} cause of the interleaved property or empty string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NTU0MQ==", "bodyText": "Please document that property's @Where overrides the chid entities' @Where", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390455541", "createdAt": "2020-03-10T16:42:45Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -316,19 +360,25 @@ public static String getColumnsStringForSelect(SpannerPersistentEntity<?> spanne\n \t\treturn fetchInterleaved ? sql + getChildrenSubquery(spannerPersistentEntity, mappingContext) : sql;\n \t}\n \n+\tprivate static String getWhere(SpannerPersistentProperty spannerPersistentProperty, SpannerPersistentEntity<?> childPersistentEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODQyOQ==", "bodyText": "Could you clarify what is this method for?\nAlso, if it ignores @Where why is it passed as a parameter String whereClause?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390458429", "createdAt": "2020-03-10T16:46:48Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -201,14 +210,37 @@ private SpannerStatementQueryExecutor() {\n \tpublic static <T> Statement buildQuery(KeySet keySet,\n \t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n \t\t\tSpannerMappingContext mappingContext) {\n-\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n+\t\treturn buildQuery(keySet, persistentEntity, writeConverter, mappingContext, persistentEntity.getWhere());\n+\t}\n+\n+\t/**\n+\t * Builds a query that returns the rows associated with a key set with additional SQL-where.\n+\t * But the {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} will be ignored.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODgwNA==", "bodyText": "Please add java doc", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390458804", "createdAt": "2020-03-10T16:47:27Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -201,14 +210,37 @@ private SpannerStatementQueryExecutor() {\n \tpublic static <T> Statement buildQuery(KeySet keySet,\n \t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n \t\t\tSpannerMappingContext mappingContext) {\n-\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n+\t\treturn buildQuery(keySet, persistentEntity, writeConverter, mappingContext, persistentEntity.getWhere());\n+\t}\n+\n+\t/**\n+\t * Builds a query that returns the rows associated with a key set with additional SQL-where.\n+\t * But the {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} will be ignored.\n+\t * @param keySet the key set whose members to get.\n+\t * @param persistentEntity the persistent entity of the table.\n+\t * @param <T> the type of the persistent entity\n+\t * @param writeConverter a converter to convert key values as needed to bind to the query statement.\n+\t * @param mappingContext mapping context\n+\t * @param whereClause SQL where clause\n+\t * @return the Spanner statement to perform the retrieval.\n+\t */\n+\tpublic static <T> Statement buildQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> persistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext, String whereClause) {\n+\t\treturn buildQuery(keySet, persistentEntity, writeConverter, mappingContext, whereClause, null);\n+\t}\n+\n+\tpublic static <T> Statement buildQuery(KeySet keySet,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MjU1MQ==", "bodyText": "Let's just remove this ternary operator.  orParts.get(0) : orParts.stream().map(s -> \"(\" + s + \")\").collect(Collectors.joining(\" OR \")) is sufficient.\nIt has a side effect of adding unnecessary parentheses if there is only one part, but that is not a problem.\nThis will make the code more readable.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390462551", "createdAt": "2020-03-10T16:52:57Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,44 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyClause = orParts.size() == 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3MDUwMw==", "bodyText": "I see this logic is repeated multiple times. We should introduce a method (let's call it buildWhere) that checks if a string is empty or null and if not, returns \" WHERE \" + string, otherwise returns \"\"", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390470503", "createdAt": "2020-03-10T17:04:27Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -253,10 +264,10 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t@Override\n \tpublic <T> List<T> queryAll(Class<T> entityClass,\n \t\t\tSpannerPageableQueryOptions options) {\n-\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n-\t\t\t\t.getPersistentEntity(entityClass);\n+\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext.getPersistentEntity(entityClass);\n+\t\tString condition = persistentEntity.hasWhere() ? \" WHERE \" + persistentEntity.getWhere() : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NTU4NQ==", "bodyText": "let's move this  whereClause != null ? whereClause : \"\" to the combine method and apply it to both arguments", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390475585", "createdAt": "2020-03-10T17:11:55Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,44 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyClause = orParts.size() == 1\n+\t\t\t\t? orParts.get(0) : orParts.stream().map(s -> \"(\" + s + \")\").collect(Collectors.joining(\" OR \"));\n+\t\tString condition = combine(keyClause, whereClause != null ? whereClause : \"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3NjAzMw==", "bodyText": "rename to combineWithAnd for clarity", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r390476033", "createdAt": "2020-03-10T17:12:38Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -218,32 +250,44 @@ private SpannerStatementQueryExecutor() {\n \t\t\t\tkeyParts.add(parentKeyParts.next());\n \t\t\t\ttagNum++;\n \t\t\t}\n-\t\t\torJoiner.add(andJoiner.toString());\n+\t\t\torParts.add(andJoiner.toString());\n \t\t}\n-\t\tString cond = orJoiner.toString();\n+\t\tString keyClause = orParts.size() == 1\n+\t\t\t\t? orParts.get(0) : orParts.stream().map(s -> \"(\" + s + \")\").collect(Collectors.joining(\" OR \"));\n+\t\tString condition = combine(keyClause, whereClause != null ? whereClause : \"\");\n \t\tString sb = \"SELECT \" + getColumnsStringForSelect(persistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ persistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\t\t\t+ (StringUtils.isEmpty(index) ? persistentEntity.tableName() : String.format(\"%s@{FORCE_INDEX=%s}\", persistentEntity.tableName(), index))\n+\t\t\t\t+ (condition.isEmpty() ? \"\" : \" WHERE \" + condition);\n \t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n \tprivate static <C, P> String getChildrenStructsQuery(\n \t\t\tSpannerPersistentEntity<C> childPersistentEntity,\n \t\t\tSpannerPersistentEntity<P> parentPersistentEntity, SpannerMappingContext mappingContext,\n-\t\t\tString columnName) {\n+\t\t\tString columnName, String whereClause) {\n \t\tString tableName = childPersistentEntity.tableName();\n \t\tList<SpannerPersistentProperty> parentKeyProperties = parentPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tString condition = parentKeyProperties.stream()\n+\t\tString keylCause = parentKeyProperties.stream()\n \t\t\t\t.map(keyProp -> tableName + \".\" + keyProp.getColumnName()\n \t\t\t\t\t\t+ \" = \"\n \t\t\t\t\t\t+ parentPersistentEntity.tableName() + \".\" + keyProp.getColumnName())\n \t\t\t\t.collect(Collectors.joining(\" AND \"));\n-\n+\t\tString condition = combine(keylCause, whereClause);\n \t\treturn \"ARRAY (SELECT AS STRUCT \" + getColumnsStringForSelect(childPersistentEntity, mappingContext, true) + \" FROM \"\n-\t\t\t\t+ tableName + \" WHERE \" + condition + \") as \" + columnName;\n+\t\t\t\t+ tableName + \" WHERE \" + condition + \") AS \" + columnName;\n \t}\n \n+\tprivate static String combine(String cond1, String cond2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e555ab6b5b56a10c8e238f3284f4697775b3e41"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef1a0ba73f7ef291ce2263dc5cc5705b44872704", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ef1a0ba73f7ef291ce2263dc5cc5705b44872704", "committedDate": "2020-03-11T21:23:18Z", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7029ea168fda11daf4279eb9f8ca4b161d09537", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f7029ea168fda11daf4279eb9f8ca4b161d09537", "committedDate": "2020-03-11T21:23:59Z", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "720f90b09c494dcecab1f4525725c7517b24f046", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/720f90b09c494dcecab1f4525725c7517b24f046", "committedDate": "2020-03-11T21:24:47Z", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ef09152f0ae2066ef6b599bf7f9ab20409db886", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7ef09152f0ae2066ef6b599bf7f9ab20409db886", "committedDate": "2020-03-11T21:25:28Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d157ff2353dc4796c81dd55c9a06b23a8033d35", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d157ff2353dc4796c81dd55c9a06b23a8033d35", "committedDate": "2020-03-12T23:57:05Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNjIwMTA4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-373620108", "createdAt": "2020-03-12T14:44:59Z", "commit": {"oid": "7ef09152f0ae2066ef6b599bf7f9ab20409db886"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo0NDo1OVrOF1hsng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo0NDo1OVrOF1hsng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3MDk0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's think we have an `Agreement` with a list of `Participants` which could be changed at work on it.\n          \n          \n            \n            Let's say we have an `Agreement` with a list of `Participants` which could be assigned to it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r391670942", "createdAt": "2020-03-12T14:44:59Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,33 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Declarative Filtering with `@Where`\n+The `@Where` annotation could be applied to an entity class or to an interleaved property.\n+This annotation provides an SQL where clause that will be applied at the fetching of interleaved collections or the entity itself.\n+\n+Let's think we have an `Agreement` with a list of `Participants` which could be changed at work on it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef09152f0ae2066ef6b599bf7f9ab20409db886"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cc4e59e801c08f35fdd34110af75d02ebe74365", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1cc4e59e801c08f35fdd34110af75d02ebe74365", "committedDate": "2020-03-16T17:06:53Z", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d276dc505fb1571eb87c09cfdb09895a8e26cd", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a3d276dc505fb1571eb87c09cfdb09895a8e26cd", "committedDate": "2020-03-16T17:11:36Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7865dc12d868b4804cb648aa63806e410fec8fd8", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7865dc12d868b4804cb648aa63806e410fec8fd8", "committedDate": "2020-03-16T17:11:59Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerReadOptions.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b49bd6db89a20f2964934d470b3218ad4e63237a", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b49bd6db89a20f2964934d470b3218ad4e63237a", "committedDate": "2020-03-16T17:15:32Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2cfc7784b17175b49fb0ac698a69db9d3edd6db", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f2cfc7784b17175b49fb0ac698a69db9d3edd6db", "committedDate": "2020-03-16T17:43:02Z", "message": "\"Soft-delete\" filter support for Interleaved collections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37888c878ca7fbbd541de6cae048f4bb0c8cade0", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/37888c878ca7fbbd541de6cae048f4bb0c8cade0", "committedDate": "2020-03-16T17:43:51Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b77b8681a9ed4d0e71971b64795320181df5c69", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8b77b8681a9ed4d0e71971b64795320181df5c69", "committedDate": "2020-03-16T18:15:18Z", "message": "javadoc improved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d54c206d0040c8e603dc2bfcddb3b6c6373d34c", "committedDate": "2020-03-16T18:15:49Z", "message": "Merge branch 'feature/2202' of https://github.com/s13o/spring-cloud-gcp into feature/2202"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjY4NTA0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-376268504", "createdAt": "2020-03-17T17:48:16Z", "commit": {"oid": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo0OToyM1rOF3nb-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNzo1OTozMFrOF3n1Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2MjEzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * or some property is eagerly interleaved the SQL query will be performed instead of the\n          \n          \n            \n            \t * or any of the properties is eagerly interleaved, the SQL query will be performed instead of the", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r393862137", "createdAt": "2020-03-17T17:49:23Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java", "diffHunk": "@@ -85,14 +86,24 @@\n \n \t/**\n \t * Finds objects stored from their keys.\n+\t * When the entity has a {@link org.springframework.cloud.gcp.data.spanner.core.mapping.Where} class annotation\n+\t * or some property is eagerly interleaved the SQL query will be performed instead of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2ODExNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return a {@code Where} clause of the interleaved property or empty string.\n          \n          \n            \n            \t * @return a {@code WHERE} clause of the interleaved property or empty string.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r393868117", "createdAt": "2020-03-17T17:58:52Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -120,4 +121,19 @@\n \t */\n \tboolean isEagerInterleaved();\n \n+\t/**\n+\t * Returns {@code WHERE} clause of the interleaved property or empty string if no value.\n+\t * @return a {@code Where} clause of the interleaved property or empty string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg2ODU1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            We would like to fetch a list of currently active participants. For security reasons, all records should remain in the database forever, even if participants become inactive.\n          \n          \n            \n            We would like to fetch a list of currently active participants.\n          \n          \n            \n            For security reasons, all records should remain in the database forever, even if participants become inactive.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#discussion_r393868550", "createdAt": "2020-03-17T17:59:30Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -420,6 +420,33 @@ If a property marked for lazy fetching is never retrieved, then it is also skipp\n \n If used inside a transaction, subsequent operations on lazily-fetched properties use the same transaction context as that of the original parent entity.\n \n+===== Declarative Filtering with `@Where`\n+The `@Where` annotation could be applied to an entity class or to an interleaved property.\n+This annotation provides an SQL where clause that will be applied at the fetching of interleaved collections or the entity itself.\n+\n+Let's say we have an `Agreement` with a list of `Participants` which could be assigned to it.\n+We would like to fetch a list of currently active participants. For security reasons, all records should remain in the database forever, even if participants become inactive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d54c206d0040c8e603dc2bfcddb3b6c6373d34c"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c4e81365391874550d07b95ce7a09d2fdadd08", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/09c4e81365391874550d07b95ce7a09d2fdadd08", "committedDate": "2020-03-17T18:07:33Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerOperations.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf2fe3001e50357099c5ed79cae41aa54774ef8", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1bf2fe3001e50357099c5ed79cae41aa54774ef8", "committedDate": "2020-03-17T18:07:45Z", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2dea9e7cb83ddd7fbd9c2cf9b14a821d68f088", "author": {"user": {"login": "s13o", "name": "Roman Solodovnichenko"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/aa2dea9e7cb83ddd7fbd9c2cf9b14a821d68f088", "committedDate": "2020-03-17T18:08:04Z", "message": "Update docs/src/main/asciidoc/spanner.adoc\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzU2ODEx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-376356811", "createdAt": "2020-03-17T19:52:57Z", "commit": {"oid": "aa2dea9e7cb83ddd7fbd9c2cf9b14a821d68f088"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDIyNTM5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2219#pullrequestreview-376422539", "createdAt": "2020-03-17T21:35:21Z", "commit": {"oid": "aa2dea9e7cb83ddd7fbd9c2cf9b14a821d68f088"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 553, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}