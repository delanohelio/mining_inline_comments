{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTgxMzkw", "number": 2132, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0MFrODajJvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NDozN1rODbs11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY1NTAxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentEntityImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0MVrOFhkG0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNjo1ODo0MVrOFhkG0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczODg5OQ==", "bodyText": "Can omit \"property.isInterleaved() \" condition here, since the previous condition would have caught it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370738899", "createdAt": "2020-01-24T16:58:41Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentEntityImpl.java", "diffHunk": "@@ -157,6 +159,9 @@ public void addPersistentProperty(SpannerPersistentProperty property) {\n \t\telse if (!property.isInterleaved()) {\n \t\t\tthis.columnNames.add(property.getColumnName());\n \t\t}\n+\t\telse if (property.isInterleaved() && !property.isLazyInterleaved()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY2MDA1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentEntityImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMDozM1rOFhkKKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowMDozM1rOFhkKKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDczOTc1NQ==", "bodyText": "Leave a comment about what should happen if the property is interleaved lazily (that it's skipped and not persistent)?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370739755", "createdAt": "2020-01-24T17:00:33Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentEntityImpl.java", "diffHunk": "@@ -157,6 +159,9 @@ public void addPersistentProperty(SpannerPersistentProperty property) {\n \t\telse if (!property.isInterleaved()) {\n \t\t\tthis.columnNames.add(property.getColumnName());\n \t\t}\n+\t\telse if (property.isInterleaved() && !property.isLazyInterleaved()) {\n+\t\t\tthis.hasEagerlyLoadedProperties = true;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY3NTI0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzowNTo1N1rOFhkT2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMDozMzoyNlrOFhprAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjIzNQ==", "bodyText": "I don't think I understand what happens if the number of parent key parts exceeds the number of child key parts. Is that even supposed to happen?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370742235", "createdAt": "2020-01-24T17:05:57Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3ODIwMg==", "bodyText": "No, it could never happen", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370778202", "createdAt": "2020-01-24T18:30:13Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjIzNQ=="}, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5Mzk1Mg==", "bodyText": "Thanks! Then the modulo operation can be removed.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370793952", "createdAt": "2020-01-24T19:05:28Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjIzNQ=="}, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgxNDA5NQ==", "bodyText": "It is there for a reason. When you have multiple keys in the keySet, you will get more key parts, because you have multiple parents. So wee need to repeat children parts for each parent.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370814095", "createdAt": "2020-01-24T19:52:11Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjIzNQ=="}, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgyODg0Ng==", "bodyText": "Would moving int tagNum = 0 to within the for loop scope work? Then it would start at 0 for every parent key.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370828846", "createdAt": "2020-01-24T20:30:01Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjIzNQ=="}, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMDA4MQ==", "bodyText": "That's not going to work, because tagNums have to be distinct. They are used for parameters binding.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370830081", "createdAt": "2020-01-24T20:33:26Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0MjIzNQ=="}, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY5MTk0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxMTo0NVrOFhkd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxMTo0NVrOFhkd_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NDgzMA==", "bodyText": "Let's check if I understand: the \"and\" conditions make sure the parent and child key for a single row match. And the \"or\" conditions match multiple rows' worth of keys?\nI would take my confusion as an opportunity to factor out some logic into helper methods. For example, the while loop could go into a method named \"singleRowKeyMatchCondition)\". Better yet, those could go into a helper class that could be unit tested.\nThe goal of this would be to make it trivial for someone troubleshooting a production issue to look at the code and understand what it's doing.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370744830", "createdAt": "2020-01-24T17:11:45Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());\n+\t\t\t\tString tagName = \"tag\" + tagNum;\n+\t\t\t\tandJoiner.add(keyProp.getColumnName() + \" = @\" + tagName);\n+\t\t\t\ttags.add(tagName);\n+\t\t\t\tkeyParts.add(parentKeyParts.next());\n+\t\t\t\ttagNum++;\n+\t\t\t}\n+\t\t\torJoiner.add(andJoiner.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY5NzMxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxMzo0OFrOFhkhSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxMzo0OFrOFhkhSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NTY3Mg==", "bodyText": "I wonder if it makes sense to pass string builders around as the query gets constructed instead of returning strings that have to, in turn, be concatenated. For a high-volume system, all this string concatenation will add up.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r370745672", "createdAt": "2020-01-24T17:13:48Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {\n+\t\t\tStringJoiner andJoiner = new StringJoiner(\" AND \", \"(\", \")\");\n+\t\t\tIterator parentKeyParts = key.getParts().iterator();\n+\t\t\twhile (parentKeyParts.hasNext()) {\n+\t\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum % childKeyProperties.size());\n+\t\t\t\tString tagName = \"tag\" + tagNum;\n+\t\t\t\tandJoiner.add(keyProp.getColumnName() + \" = @\" + tagName);\n+\t\t\t\ttags.add(tagName);\n+\t\t\t\tkeyParts.add(parentKeyParts.next());\n+\t\t\t\ttagNum++;\n+\t\t\t}\n+\t\t\torJoiner.add(andJoiner.toString());\n \t\t}\n-\t\treturn buildStatementFromSqlWithArgs(sb.toString() + sj.toString(), tags, null, writeConverter,\n+\t\tString cond = orJoiner.toString();\n+\t\tString sb = \"SELECT \" + getColumnsStringForSelect(childPersistentEntity, mappingContext) + \" FROM \"\n+\t\t\t\t+ childPersistentEntity.tableName() + (cond.isEmpty() ? \"\" : \" WHERE \" + cond);\n+\t\treturn buildStatementFromSqlWithArgs(sb, tags, null, writeConverter,\n \t\t\t\tkeyParts.toArray(), null);\n \t}\n \n+\tprivate static <C, P> String getChildrenStructsQuery(\n+\t\t\tSpannerPersistentEntity<C> childPersistentEntity,\n+\t\t\tSpannerPersistentEntity<P> parentPersistentEntity, SpannerMappingContext mappingContext,\n+\t\t\tString columnName) {\n+\t\tString tableName = childPersistentEntity.tableName();\n+\t\tList<SpannerPersistentProperty> parentKeyProperties = parentPersistentEntity\n+\t\t\t\t.getFlattenedPrimaryKeyProperties();\n+\t\tString condition = parentKeyProperties.stream()\n+\t\t\t\t.map(keyProp -> tableName + \".\" + keyProp.getColumnName()\n+\t\t\t\t\t\t+ \" = \"\n+\t\t\t\t\t\t+ parentPersistentEntity.tableName() + \".\" + keyProp.getColumnName())\n+\t\t\t\t.collect(Collectors.joining(\" AND \"));\n+\n+\t\treturn \"ARRAY (SELECT AS STRUCT \" + getColumnsStringForSelect(childPersistentEntity, mappingContext) + \" FROM \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ2NTE0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDowOTozNFrOFiP7wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDowOTozNFrOFiP7wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1Njk2MA==", "bodyText": "Comment that when options are there the new strategy is n/a.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r371456960", "createdAt": "2020-01-27T20:09:34Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -181,12 +181,20 @@ public long executePartitionedDmlStatement(Statement statement) {\n \t@Override\n \tpublic <T> List<T> read(Class<T> entityClass, KeySet keys,\n \t\t\tSpannerReadOptions options) {\n-\t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n+\t\tSpannerPersistentEntity<T> persistentEntity = (SpannerPersistentEntity<T>) this.mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n-\t\tList<T> entities = mapToListAndResolveChildren(executeRead(persistentEntity.tableName(), keys,\n-\t\t\t\tpersistentEntity.columns(), options), entityClass,\n-\t\t\t\t(options != null) ? options.getIncludeProperties() : null,\n-\t\t\t\toptions != null && options.isAllowPartialRead());\n+\t\tList<T> entities;\n+\n+\t\tif (options == null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQ5NjE4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoyMDoyMFrOFiQOkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDoyMDoyMFrOFiQOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2MTc3OA==", "bodyText": "Cast here to List.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r371461778", "createdAt": "2020-01-27T20:20:20Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -547,14 +563,20 @@ private void resolveChildEntity(Object entity, Set<String> includeProperties) {\n \t\t\t\t\t\t\t.contains(spannerPersistentEntity.getName())) {\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n+\t\t\t\t\tObject propertyValue = accessor.getProperty(spannerPersistentProperty);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjUzMjEzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDozMzowNlrOFiQkoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDozMzowNlrOFiQkoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2NzQyNA==", "bodyText": "Can you make the for loop and the while loop separate private methods for readability?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r371467424", "createdAt": "2020-01-27T20:33:06Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -169,32 +171,63 @@ private SpannerStatementQueryExecutor() {\n \t * @param <T> the type of the child persistent entity\n \t * @param writeConverter a converter to convert key values as needed to bind to the query\n \t *     statement.\n+\t * @param mappingContext mapping context\n \t * @return the Spanner statement to perform the retrieval.\n \t */\n \tpublic static <T> Statement getChildrenRowsQuery(Key parentKey,\n-\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter) {\n-\t\tStringBuilder sb = new StringBuilder(\n-\t\t\t\t\"SELECT \" + getColumnsStringForSelect(childPersistentEntity) + \" FROM \"\n-\t\t\t\t\t\t+ childPersistentEntity.tableName() + \" WHERE \");\n-\t\tStringJoiner sj = new StringJoiner(\" and \");\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\treturn getChildrenRowsQuery(KeySet.singleKey(parentKey), childPersistentEntity, writeConverter, mappingContext);\n+\t}\n+\n+\tpublic static <T> Statement getChildrenRowsQuery(KeySet keySet,\n+\t\t\tSpannerPersistentEntity<T> childPersistentEntity, SpannerCustomConverter writeConverter,\n+\t\t\tSpannerMappingContext mappingContext) {\n+\t\tStringJoiner orJoiner = new StringJoiner(\" OR \");\n \t\tList<String> tags = new ArrayList<>();\n \t\tList keyParts = new ArrayList();\n \t\tint tagNum = 0;\n \t\tList<SpannerPersistentProperty> childKeyProperties = childPersistentEntity\n \t\t\t\t.getFlattenedPrimaryKeyProperties();\n-\t\tIterator parentKeyParts = parentKey.getParts().iterator();\n-\t\twhile (parentKeyParts.hasNext()) {\n-\t\t\tSpannerPersistentProperty keyProp = childKeyProperties.get(tagNum);\n-\t\t\tString tagName = \"tag\" + tagNum;\n-\t\t\tsj.add(keyProp.getColumnName() + \" = @\" + tagName);\n-\t\t\ttags.add(tagName);\n-\t\t\tkeyParts.add(parentKeyParts.next());\n-\t\t\ttagNum++;\n+\n+\t\tfor (Key key : keySet.getKeys()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjUzNjcyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDozNDo1NFrOFiQnZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMDozNDo1NFrOFiQnZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ2ODEzNQ==", "bodyText": "isEagerlyInterleaved", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r371468135", "createdAt": "2020-01-27T20:34:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -260,9 +293,19 @@ private static void bindParameter(ValueBinder<Statement.Builder> bind,\n \t\t}\n \t}\n \n-\tpublic static String getColumnsStringForSelect(\n-\t\t\tSpannerPersistentEntity spannerPersistentEntity) {\n-\t\treturn String.join(\" , \", spannerPersistentEntity.columns());\n+\tpublic static String getColumnsStringForSelect(SpannerPersistentEntity spannerPersistentEntity, SpannerMappingContext mappingContext) {\n+\t\tStringJoiner joiner = new StringJoiner(\", \");\n+\t\tspannerPersistentEntity.doWithInterleavedProperties(persistentProperty -> {\n+\t\t\tSpannerPersistentProperty spannerPersistentProperty = (SpannerPersistentProperty) persistentProperty;\n+\t\t\tif (!spannerPersistentProperty.isLazyInterleaved()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "835a103c051328972e7ba010fc92e363b63e0580"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcyNTQyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MzozNFrOFjVjmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1MzozNFrOFjVjmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5NzY1Ng==", "bodyText": "Maybe isEagerInterleaved() to be consistent with isLazyInterleaved()?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r372597656", "createdAt": "2020-01-29T19:53:34Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentProperty.java", "diffHunk": "@@ -113,4 +113,11 @@\n \t * @return {@code true} if the property is lazily-fetched. {@code false} otherwise.\n \t */\n \tboolean isLazyInterleaved();\n+\n+\t/**\n+\t * Return whether this property is an eagerly-fetched interleaved property.\n+\t * @return {@code true} if the property is eagerly-fetched. {@code false} otherwise.\n+\t */\n+\tboolean isEagerlyInterleaved();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cf8019af0b5402d4c1e86493696e826f6eb6a5"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzcyODIzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentPropertyImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NDozN1rOFjVlfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1NDozN1rOFjVlfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5ODE0Mw==", "bodyText": "Can you move it closer to isLazyInterleaved definition?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2132#discussion_r372598143", "createdAt": "2020-01-29T19:54:37Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/mapping/SpannerPersistentPropertyImpl.java", "diffHunk": "@@ -149,6 +149,12 @@ public boolean isInterleaved() {\n \t\treturn findAnnotation(Interleaved.class) != null;\n \t}\n \n+\t@Override\n+\tpublic boolean isEagerlyInterleaved() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3cf8019af0b5402d4c1e86493696e826f6eb6a5"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2191, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}