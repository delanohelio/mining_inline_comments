{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNTA1MzE5", "number": 2391, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMToxMVrOEAtBNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzoxMjowNFrOEBFLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTczMDQ3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMToxMVrOGcJjxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMToxMVrOGcJjxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2OTkyNg==", "bodyText": "should this have havingValue = \"true\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432169926", "createdAt": "2020-05-28T23:01:11Z", "author": {"login": "saturnism"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTczNTAzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMzoxNFrOGcJmgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODo1MjoyNFrOGc0zLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDYyNQ==", "bodyText": "do we also need to produce the StackdriverMeterRegistry? Or has Spring Boot Actuator been updated to produce it automatically? (It was an open issue)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432170625", "createdAt": "2020-05-28T23:03:14Z", "author": {"login": "saturnism"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)\n+public class GcpStackdriverMetricsAutoConfiguration {\n+\n+\tprivate final StackdriverProperties stackdriverProperties;\n+\n+\tprivate final String projectId;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tpublic GcpStackdriverMetricsAutoConfiguration(GcpMetricsProperties gcpMetricsProperties,\n+\t\t\tStackdriverProperties stackdriverProperties, GcpProjectIdProvider gcpProjectIdProvider,\n+\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n+\t\tthis.stackdriverProperties = stackdriverProperties;\n+\t\tthis.projectId = (gcpMetricsProperties.getProjectId() != null)\n+\t\t\t\t? gcpMetricsProperties.getProjectId() : gcpProjectIdProvider.getProjectId();\n+\t\tthis.credentialsProvider = gcpMetricsProperties.getCredentials().hasKey()\n+\t\t\t\t? new DefaultCredentialsProvider(gcpMetricsProperties) : credentialsProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE4NDAxOQ==", "bodyText": "it is not required since we are performing this auto-configuration before the one provided by spring-boot. So, we just need to pre-configure the config so spring-boot takes it", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432184019", "createdAt": "2020-05-28T23:48:41Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)\n+public class GcpStackdriverMetricsAutoConfiguration {\n+\n+\tprivate final StackdriverProperties stackdriverProperties;\n+\n+\tprivate final String projectId;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tpublic GcpStackdriverMetricsAutoConfiguration(GcpMetricsProperties gcpMetricsProperties,\n+\t\t\tStackdriverProperties stackdriverProperties, GcpProjectIdProvider gcpProjectIdProvider,\n+\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n+\t\tthis.stackdriverProperties = stackdriverProperties;\n+\t\tthis.projectId = (gcpMetricsProperties.getProjectId() != null)\n+\t\t\t\t? gcpMetricsProperties.getProjectId() : gcpProjectIdProvider.getProjectId();\n+\t\tthis.credentialsProvider = gcpMetricsProperties.getCredentials().hasKey()\n+\t\t\t\t? new DefaultCredentialsProvider(gcpMetricsProperties) : credentialsProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDYyNQ=="}, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIwNDk4Nw==", "bodyText": "just added an assertion to make sure the meterRegistry bean is created", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432204987", "createdAt": "2020-05-29T01:10:42Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)\n+public class GcpStackdriverMetricsAutoConfiguration {\n+\n+\tprivate final StackdriverProperties stackdriverProperties;\n+\n+\tprivate final String projectId;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tpublic GcpStackdriverMetricsAutoConfiguration(GcpMetricsProperties gcpMetricsProperties,\n+\t\t\tStackdriverProperties stackdriverProperties, GcpProjectIdProvider gcpProjectIdProvider,\n+\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n+\t\tthis.stackdriverProperties = stackdriverProperties;\n+\t\tthis.projectId = (gcpMetricsProperties.getProjectId() != null)\n+\t\t\t\t? gcpMetricsProperties.getProjectId() : gcpProjectIdProvider.getProjectId();\n+\t\tthis.credentialsProvider = gcpMetricsProperties.getCredentials().hasKey()\n+\t\t\t\t? new DefaultCredentialsProvider(gcpMetricsProperties) : credentialsProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDYyNQ=="}, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3Njc3NQ==", "bodyText": "last time i used this, i needed to create my own registry bean, and documented here: https://micrometer.io/docs/registry/stackdriver\nmicrometer-metrics/micrometer-docs#115 (review)\nI'm unsure if actuator has been updated to autoconfigure the registry bean", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432876775", "createdAt": "2020-05-30T18:32:02Z", "author": {"login": "saturnism"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)\n+public class GcpStackdriverMetricsAutoConfiguration {\n+\n+\tprivate final StackdriverProperties stackdriverProperties;\n+\n+\tprivate final String projectId;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tpublic GcpStackdriverMetricsAutoConfiguration(GcpMetricsProperties gcpMetricsProperties,\n+\t\t\tStackdriverProperties stackdriverProperties, GcpProjectIdProvider gcpProjectIdProvider,\n+\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n+\t\tthis.stackdriverProperties = stackdriverProperties;\n+\t\tthis.projectId = (gcpMetricsProperties.getProjectId() != null)\n+\t\t\t\t? gcpMetricsProperties.getProjectId() : gcpProjectIdProvider.getProjectId();\n+\t\tthis.credentialsProvider = gcpMetricsProperties.getCredentials().hasKey()\n+\t\t\t\t? new DefaultCredentialsProvider(gcpMetricsProperties) : credentialsProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDYyNQ=="}, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NzU2Ng==", "bodyText": "this is the current auto-configuration for stackdriver in spring-booot https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/stackdriver/StackdriverMetricsExportAutoConfiguration.java", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432877566", "createdAt": "2020-05-30T18:41:43Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)\n+public class GcpStackdriverMetricsAutoConfiguration {\n+\n+\tprivate final StackdriverProperties stackdriverProperties;\n+\n+\tprivate final String projectId;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tpublic GcpStackdriverMetricsAutoConfiguration(GcpMetricsProperties gcpMetricsProperties,\n+\t\t\tStackdriverProperties stackdriverProperties, GcpProjectIdProvider gcpProjectIdProvider,\n+\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n+\t\tthis.stackdriverProperties = stackdriverProperties;\n+\t\tthis.projectId = (gcpMetricsProperties.getProjectId() != null)\n+\t\t\t\t? gcpMetricsProperties.getProjectId() : gcpProjectIdProvider.getProjectId();\n+\t\tthis.credentialsProvider = gcpMetricsProperties.getCredentials().hasKey()\n+\t\t\t\t? new DefaultCredentialsProvider(gcpMetricsProperties) : credentialsProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDYyNQ=="}, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3ODM4Mw==", "bodyText": "Oh nice!! Fixed in 2.3 \ud83d\udc4f\ud83d\udc4f", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432878383", "createdAt": "2020-05-30T18:52:24Z", "author": {"login": "saturnism"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)\n+@EnableConfigurationProperties({GcpMetricsProperties.class, StackdriverProperties.class})\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.metrics.enabled\", matchIfMissing = true)\n+public class GcpStackdriverMetricsAutoConfiguration {\n+\n+\tprivate final StackdriverProperties stackdriverProperties;\n+\n+\tprivate final String projectId;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tpublic GcpStackdriverMetricsAutoConfiguration(GcpMetricsProperties gcpMetricsProperties,\n+\t\t\tStackdriverProperties stackdriverProperties, GcpProjectIdProvider gcpProjectIdProvider,\n+\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n+\t\tthis.stackdriverProperties = stackdriverProperties;\n+\t\tthis.projectId = (gcpMetricsProperties.getProjectId() != null)\n+\t\t\t\t? gcpMetricsProperties.getProjectId() : gcpProjectIdProvider.getProjectId();\n+\t\tthis.credentialsProvider = gcpMetricsProperties.getCredentials().hasKey()\n+\t\t\t\t? new DefaultCredentialsProvider(gcpMetricsProperties) : credentialsProvider;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic StackdriverConfig stackdriverConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDYyNQ=="}, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjAyNzAyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwMjowMTozNVrOGcMbMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNDoyMjoyOVrOGcOVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxNjg4Mw==", "bodyText": "Do we need to enforce @AutoConfigureAfter on org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration, where Clock is provided?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432216883", "createdAt": "2020-05-29T02:01:35Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0ODE0NA==", "bodyText": "Don't think so. Since all of them are provided for spring-boot once actuator, micrometer and micrometer-stackdriver are declared. When the conditions meet this auto-config triggers just before the one spring-boot provides.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432248144", "createdAt": "2020-05-29T04:22:29Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpStackdriverMetricsAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import io.micrometer.core.instrument.Clock;\n+import io.micrometer.core.instrument.step.StepMeterRegistry;\n+import io.micrometer.stackdriver.StackdriverConfig;\n+\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverMetricsExportAutoConfiguration;\n+import org.springframework.boot.actuate.autoconfigure.metrics.export.stackdriver.StackdriverProperties;\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-detection for project.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(StackdriverMetricsExportAutoConfiguration.class)\n+@ConditionalOnClass({StepMeterRegistry.class, StackdriverConfig.class})\n+@ConditionalOnBean(Clock.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjIxNjg4Mw=="}, "originalCommit": {"oid": "0c14609a68fb2922a06adcabffcca2bdaf523741"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjIwODEzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/metrics.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNDowODowMVrOGcOIoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo0MzozNVrOGcdLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0NDg5Ng==", "bodyText": "Users would also need a dependency on actuator starter; otherwise Clock bean will not be autoconfigured, preventing our autoconfig from triggering.\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n\nOr should this be in the starter, since spring-cloud-gcp-starter-metrics is not useful without actuator?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432244896", "createdAt": "2020-05-29T04:08:01Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/metrics.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+== Stackdriver Monitoring\n+\n+Google Cloud Platform provides a service called https://cloud.google.com/monitoring/[Stackdriver Monitoring], and https://micrometer.io/docs/registry/stackdriver[Micrometer] can be used with it to easily instrument Spring Boot applications for observability.\n+\n+Spring Boot already provides auto-configuration for Stackdriver. This module enables to auto-detect the `project-id` and `credentials`. Also, it can be customized.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>org.springframework.cloud</groupId>\n+    <artifactId>spring-cloud-gcp-starter-metrics</artifactId>\n+</dependency>\n+----", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc124814e620595ef9d64d2822e1808f741e13a5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0ODg1OA==", "bodyText": "That's right, actuator is required. Even though the new starter will not make sense without the actuator dependency, I would prefer to let this clear in the docs so the developers are aware about what dependencies are declaring for this case. WDYT?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432248858", "createdAt": "2020-05-29T04:25:59Z", "author": {"login": "eddumelendez"}, "path": "docs/src/main/asciidoc/metrics.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+== Stackdriver Monitoring\n+\n+Google Cloud Platform provides a service called https://cloud.google.com/monitoring/[Stackdriver Monitoring], and https://micrometer.io/docs/registry/stackdriver[Micrometer] can be used with it to easily instrument Spring Boot applications for observability.\n+\n+Spring Boot already provides auto-configuration for Stackdriver. This module enables to auto-detect the `project-id` and `credentials`. Also, it can be customized.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>org.springframework.cloud</groupId>\n+    <artifactId>spring-cloud-gcp-starter-metrics</artifactId>\n+</dependency>\n+----", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0NDg5Ng=="}, "originalCommit": {"oid": "cc124814e620595ef9d64d2822e1808f741e13a5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5MTI4Ng==", "bodyText": "Yes, I agree. Just add a mention of it to the refdoc.\nOtherwise, looks great -- I tested the starter in a tiny sample app.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432491286", "createdAt": "2020-05-29T13:43:35Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/metrics.adoc", "diffHunk": "@@ -0,0 +1,45 @@\n+== Stackdriver Monitoring\n+\n+Google Cloud Platform provides a service called https://cloud.google.com/monitoring/[Stackdriver Monitoring], and https://micrometer.io/docs/registry/stackdriver[Micrometer] can be used with it to easily instrument Spring Boot applications for observability.\n+\n+Spring Boot already provides auto-configuration for Stackdriver. This module enables to auto-detect the `project-id` and `credentials`. Also, it can be customized.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+    <groupId>org.springframework.cloud</groupId>\n+    <artifactId>spring-cloud-gcp-starter-metrics</artifactId>\n+</dependency>\n+----", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI0NDg5Ng=="}, "originalCommit": {"oid": "cc124814e620595ef9d64d2822e1808f741e13a5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzkyODA0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/metrics.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNjo0MlrOGcfD5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNjo0MlrOGcfD5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMjIxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This starter depends on `org.springframework.boot:spring-boot-starter-actuator` dependency. Make sure the dependency is being declared.\n          \n          \n            \n            This starter requires `org.springframework.boot:spring-boot-starter-actuator` dependency to activate. Make sure the dependency is being declared.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432522214", "createdAt": "2020-05-29T14:26:42Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/metrics.adoc", "diffHunk": "@@ -26,6 +26,26 @@ dependencies {\n You must enable Stackdriver Monitoring API from the Google Cloud Console in order to capture metrics.\n Navigate to the https://console.cloud.google.com/apis/api/monitoring.googleapis.com/overview[Stackdriver Monitoring API] for your project and make sure it\u2019s enabled.\n \n+This starter depends on `org.springframework.boot:spring-boot-starter-actuator` dependency. Make sure the dependency is being declared.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e612ffc60d54f476f50cbb3c59cce606a04c2f9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NTY4OTAzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpMetricsProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzoxMjowNFrOGcwTrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQwMzoxMjowNFrOGcwTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjgwNDc4MA==", "bodyText": "Need to add @since 1.2.4. Same goes for all other new class files.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2391#discussion_r432804780", "createdAt": "2020-05-30T03:12:04Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/metrics/GcpMetricsProperties.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.metrics;\n+\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.NestedConfigurationProperty;\n+import org.springframework.cloud.gcp.core.Credentials;\n+import org.springframework.cloud.gcp.core.CredentialsSupplier;\n+import org.springframework.cloud.gcp.core.GcpScope;\n+\n+@ConfigurationProperties(prefix = \"spring.cloud.gcp.metrics\")\n+public class GcpMetricsProperties implements CredentialsSupplier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3da4e2829a630bffc1059dcd0be8799706f89495"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2125, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}