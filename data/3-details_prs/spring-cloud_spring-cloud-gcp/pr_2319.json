{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzcyODMy", "number": 2319, "title": "Suppress exception in Pub/Sub adapter in AUTO_ACK and MANUAL modes", "bodyText": "The current behavior of the Pub/Sub Spring Integration inbound adapter throwing an exception in AUTO_ACK and MANUAL modes results in client library reacting to the exception by nacking in its code.\nThis PR removes the exception and logs a warning instead, allowing the message to be redelivered according to Subscription ackDeadline setting and the client library's automatic deadline extension setting.\nFixes #2250.\nFollow-up to #2074.", "createdAt": "2020-04-14T19:31:00Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319", "merged": true, "mergeCommit": {"oid": "ac639ce29271fa77ac6d577db330d9a2ee78c106"}, "closed": true, "closedAt": "2020-04-15T16:31:27Z", "author": {"login": "elefeint"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXoaqeAH2gAyNDAzMzcyODMyOjY3NjhjZTc2YzY4OGVmYzZlMTU0MThhNjM1ZjBhMmFjZWU5ZmE3MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX6LrBgFqTM5MzkxMDQ3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f", "author": {"user": {"login": "elefeint", "name": "Elena Felder"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6768ce76c688efc6e15418a635f0a2acee9fa71f", "committedDate": "2020-04-14T19:11:40Z", "message": "suppress exception in AUTO_ACK and MANUAL modes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjQwNjg1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#pullrequestreview-393240685", "createdAt": "2020-04-14T19:44:00Z", "commit": {"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjc3NDg5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#pullrequestreview-393277489", "createdAt": "2020-04-14T20:38:38Z", "commit": {"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDozODozOFrOGFgAOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDo0MzozNVrOGFgLEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMDQxMA==", "bodyText": "It verifies that in AUTO_ACK mode, the message is neither acked nor nacked\n\nHow does it verify that it's not nacked?\nIf this test in fact takes around 2 minutes to pass, I think it's too much to add to the build.\nCan we just verify that the message is not redelivered immediately because that was the original problem anyway?\nIn fact, it doesn't look like this test is verifying that aspect at all? The message can be redelivered immediately, and it will pass.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408420410", "createdAt": "2020-04-14T20:38:38Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java", "diffHunk": "@@ -201,6 +205,57 @@ public void sendAndReceiveMessageManualAck() {\n \t\t});\n \t}\n \n+\t// If this test flakes, delete it.\n+\t// It verifies that in AUTO_ACK mode, the message is neither acked nor nacked, and that\n+\t// redelivery happens after subscription's ackDeadline passes.\n+\t// There is also a client library bug (https://github.com/googleapis/java-pubsub/issues/141) that\n+\t// results in ackDeadline being extended by 60 seconds even when maxAckExtensionPeriod is zero,\n+\t// making minimum redelivery time is ackDeadline + 60.\n+\t@Test\n+\tpublic void sendAndReceiveMessageAutoAckWithFailure() {\n+\t\tApplicationContextRunner customContextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(\n+\t\t\t\t\t\tGcpContextAutoConfiguration.class,\n+\t\t\t\t\t\tGcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(SubscribableConfiguration.class, CommonConfiguration.class);\n+\n+\t\tcustomContextRunner.run((context) -> {\n+\t\t\ttry {\n+\t\t\t\tcontext.getBean(PubSubInboundChannelAdapter.class).setAckMode(AckMode.AUTO_ACK);\n+\t\t\t\tcontext.getBean(\"inputChannel\", MessageChannel.class).send(\n+\t\t\t\t\t\tMessageBuilder.withPayload(\"This message is in trouble.\".getBytes()).build());\n+\n+\t\t\t\tSubscribableChannel channel = context.getBean(\"outputChannel\", SubscribableChannel.class);\n+\n+\t\t\t\tAtomicInteger numReceivedMessages = new AtomicInteger(0);\n+\t\t\t\tchannel.subscribe(msg -> {\n+\t\t\t\t\tif (numReceivedMessages.incrementAndGet() == 1) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"BOOM!\");\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\n+\t\t\t\t// wait for initial delivery\n+\t\t\t\tAwaitility.await().atMost(10, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 0);\n+\t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(1);\n+\n+\t\t\t\t// Expect redelivery within 2 minutes:\n+\t\t\t\t// 30 seconds subscription ackDeadline\n+\t\t\t\t// + 60 seconds https://github.com/googleapis/java-pubsub/issues/141\n+\t\t\t\t// + 30 seconds anti-flake buffer\n+\t\t\t\tAwaitility.await().atMost(120, TimeUnit.SECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMTk3Mw==", "bodyText": "Can we do this in @After this kind of code seems to be repeated across tests.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408421973", "createdAt": "2020-04-14T20:41:24Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java", "diffHunk": "@@ -201,6 +205,57 @@ public void sendAndReceiveMessageManualAck() {\n \t\t});\n \t}\n \n+\t// If this test flakes, delete it.\n+\t// It verifies that in AUTO_ACK mode, the message is neither acked nor nacked, and that\n+\t// redelivery happens after subscription's ackDeadline passes.\n+\t// There is also a client library bug (https://github.com/googleapis/java-pubsub/issues/141) that\n+\t// results in ackDeadline being extended by 60 seconds even when maxAckExtensionPeriod is zero,\n+\t// making minimum redelivery time is ackDeadline + 60.\n+\t@Test\n+\tpublic void sendAndReceiveMessageAutoAckWithFailure() {\n+\t\tApplicationContextRunner customContextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(\n+\t\t\t\t\t\tGcpContextAutoConfiguration.class,\n+\t\t\t\t\t\tGcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(SubscribableConfiguration.class, CommonConfiguration.class);\n+\n+\t\tcustomContextRunner.run((context) -> {\n+\t\t\ttry {\n+\t\t\t\tcontext.getBean(PubSubInboundChannelAdapter.class).setAckMode(AckMode.AUTO_ACK);\n+\t\t\t\tcontext.getBean(\"inputChannel\", MessageChannel.class).send(\n+\t\t\t\t\t\tMessageBuilder.withPayload(\"This message is in trouble.\".getBytes()).build());\n+\n+\t\t\t\tSubscribableChannel channel = context.getBean(\"outputChannel\", SubscribableChannel.class);\n+\n+\t\t\t\tAtomicInteger numReceivedMessages = new AtomicInteger(0);\n+\t\t\t\tchannel.subscribe(msg -> {\n+\t\t\t\t\tif (numReceivedMessages.incrementAndGet() == 1) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"BOOM!\");\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\n+\t\t\t\t// wait for initial delivery\n+\t\t\t\tAwaitility.await().atMost(10, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 0);\n+\t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(1);\n+\n+\t\t\t\t// Expect redelivery within 2 minutes:\n+\t\t\t\t// 30 seconds subscription ackDeadline\n+\t\t\t\t// + 60 seconds https://github.com/googleapis/java-pubsub/issues/141\n+\t\t\t\t// + 30 seconds anti-flake buffer\n+\t\t\t\tAwaitility.await().atMost(120, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 1);\n+\t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(2);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tcontext.getBean(PubSubInboundChannelAdapter.class).stop();\n+\t\t\t\tPubSubAdmin pubSubAdmin = context.getBean(PubSubAdmin.class);\n+\t\t\t\tpubSubAdmin.deleteSubscription((String) context.getBean(\"subscriptionName\"));\n+\t\t\t\tpubSubAdmin.deleteTopic((String) context.getBean(\"topicName\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMzE4Ng==", "bodyText": "In the interests of making this test pass faster, can we go lower than 30s?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408423186", "createdAt": "2020-04-14T20:43:35Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java", "diffHunk": "@@ -324,7 +390,7 @@ public SubscriberFactory defaultSubscriberFactory(\n \t\t\t\tGcpProjectIdProvider projectIdProvider,\n \t\t\t\tCredentialsProvider credentialsProvider) {\n \t\t\tif (pubSubAdmin.getSubscription(this.subscriptionName) == null) {\n-\t\t\t\tpubSubAdmin.createSubscription(this.subscriptionName, this.topicName);\n+\t\t\t\tpubSubAdmin.createSubscription(this.subscriptionName, this.topicName, 30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f"}, "originalPosition": 171}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "author": {"user": {"login": "elefeint", "name": "Elena Felder"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "committedDate": "2020-04-14T21:20:12Z", "message": "reduce test run; verify no immediate redelivery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65d763627021236bbf4aeeda662db7da731b36a7", "author": {"user": {"login": "elefeint", "name": "Elena Felder"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/65d763627021236bbf4aeeda662db7da731b36a7", "committedDate": "2020-04-14T21:28:52Z", "message": "update comment; err on the side of caution for minimum redelivery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzOTEwNDcx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#pullrequestreview-393910471", "createdAt": "2020-04-15T15:53:35Z", "commit": {"oid": "65d763627021236bbf4aeeda662db7da731b36a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 433, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}