{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDQyNDA5", "number": 2405, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozMToxMFrOEBIWkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxODoyNlrOEB6AaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjIwODgyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluatorTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozMToxMFrOGc0sug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozMToxMFrOGc0sug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NjczMA==", "bodyText": "missing .project-id", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r432876730", "createdAt": "2020-05-30T18:31:10Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluatorTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+\n+import org.junit.Test;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+\n+/**\n+ * @author Felipe M Amaral\n+ * @since 1.2.2\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluatorTests {\n+\n+\t/**\n+\t * Project ID used by GcpProjectIdProvider.\n+\t */\n+\tpublic static final String GCP_PROVIDER_PROJECT_ID = \"spring-gcp-test-project\";\n+\n+\t/**\n+\t * Project ID used by FirebaseAuthenticationProperties.\n+\t */\n+\tpublic static final String FIREBASE_PROJECT_ID = \"spring-firebase-test-project\";\n+\n+\t@Test\n+\tpublic void testFirebaseProjectIdNotSet() throws Exception {\n+\t\tnew ApplicationContextRunner()\n+\t\t\t\t.withBean(FirebaseAuthenticationProjectIdEvaluator.class)\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(TestConfig.class))\n+\t\t\t\t.run(context -> {\n+\t\t\t\t\tFirebaseAuthenticationProjectIdEvaluator evaluator = context.getBean(FirebaseAuthenticationProjectIdEvaluator.class);\n+\t\t\t\t\tassertThat(evaluator.getProjectId()).isEqualTo(GCP_PROVIDER_PROJECT_ID);\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testFirebaseProjectIdSet() throws Exception {\n+\t\tnew ApplicationContextRunner()\n+\t\t\t\t.withPropertyValues(\"spring.cloud.gcp.security.firebase=\" + FIREBASE_PROJECT_ID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b84218354dc40e11d45d8b236b7efeb1a95c7d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjIwODg5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozMToyNFrOGc0syQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMjo1Nzo1OVrOGdJhyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3Njc0NQ==", "bodyText": "1.2.4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r432876745", "createdAt": "2020-05-30T18:31:24Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b84218354dc40e11d45d8b236b7efeb1a95c7d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMjM2Mw==", "bodyText": "Doesn't look resolved?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r433202363", "createdAt": "2020-06-01T12:22:35Z", "author": {"login": "ttomsu"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3Njc0NQ=="}, "originalCommit": {"oid": "f2b84218354dc40e11d45d8b236b7efeb1a95c7d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxNzk5NQ==", "bodyText": "I'm so sorry, you are right. Just pushed the fix", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r433217995", "createdAt": "2020-06-01T12:57:59Z", "author": {"login": "femrtnz"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3Njc0NQ=="}, "originalCommit": {"oid": "f2b84218354dc40e11d45d8b236b7efeb1a95c7d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjIxMzYyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluatorTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxODozODo1MlrOGc0vJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMFQxOTo1MjoxN1rOGc1B3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NzM1MQ==", "bodyText": "I think, you can use @EnableConfigurationProperties(FirebaseAuthenticationProperties .class so you can remove the bean mocking FirebaseAuthenticationProperties", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r432877351", "createdAt": "2020-05-30T18:38:52Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluatorTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+\n+import org.junit.Test;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+\n+/**\n+ * @author Felipe M Amaral\n+ * @since 1.2.2\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluatorTests {\n+\n+\t/**\n+\t * Project ID used by GcpProjectIdProvider.\n+\t */\n+\tpublic static final String GCP_PROVIDER_PROJECT_ID = \"spring-gcp-test-project\";\n+\n+\t/**\n+\t * Project ID used by FirebaseAuthenticationProperties.\n+\t */\n+\tpublic static final String FIREBASE_PROJECT_ID = \"spring-firebase-test-project\";\n+\n+\t@Test\n+\tpublic void testFirebaseProjectIdNotSet() throws Exception {\n+\t\tnew ApplicationContextRunner()\n+\t\t\t\t.withBean(FirebaseAuthenticationProjectIdEvaluator.class)\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(TestConfig.class))\n+\t\t\t\t.run(context -> {\n+\t\t\t\t\tFirebaseAuthenticationProjectIdEvaluator evaluator = context.getBean(FirebaseAuthenticationProjectIdEvaluator.class);\n+\t\t\t\t\tassertThat(evaluator.getProjectId()).isEqualTo(GCP_PROVIDER_PROJECT_ID);\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testFirebaseProjectIdSet() throws Exception {\n+\t\tnew ApplicationContextRunner()\n+\t\t\t\t.withPropertyValues(\"spring.cloud.gcp.security.firebase=\" + FIREBASE_PROJECT_ID)\n+\t\t\t\t.withBean(FirebaseAuthenticationProjectIdEvaluator.class)\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(TestConfigWithFirebaseProjectId.class))\n+\t\t\t\t.run(context -> {\n+\t\t\t\t\tFirebaseAuthenticationProjectIdEvaluator evaluator = context.getBean(FirebaseAuthenticationProjectIdEvaluator.class);\n+\t\t\t\t\tassertThat(evaluator.getProjectId()).isEqualTo(FIREBASE_PROJECT_ID);\n+\t\t\t\t});\n+\t}\n+\n+\tstatic class TestConfig {\n+\n+\t\t@Bean\n+\t\tpublic GcpProjectIdProvider projectIdProvider() {\n+\t\t\treturn () -> GCP_PROVIDER_PROJECT_ID;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic FirebaseAuthenticationProperties firebaseAuthenticationProperties() {\n+\t\t\treturn mock(FirebaseAuthenticationProperties.class);\n+\t\t}\n+\n+\t}\n+\n+\tstatic class TestConfigWithFirebaseProjectId {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2b84218354dc40e11d45d8b236b7efeb1a95c7d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg4MjE0Mw==", "bodyText": "Great Idea, thanks. Updated.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r432882143", "createdAt": "2020-05-30T19:52:17Z", "author": {"login": "femrtnz"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluatorTests.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+\n+import org.junit.Test;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigurations;\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.annotation.Bean;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+\n+/**\n+ * @author Felipe M Amaral\n+ * @since 1.2.2\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluatorTests {\n+\n+\t/**\n+\t * Project ID used by GcpProjectIdProvider.\n+\t */\n+\tpublic static final String GCP_PROVIDER_PROJECT_ID = \"spring-gcp-test-project\";\n+\n+\t/**\n+\t * Project ID used by FirebaseAuthenticationProperties.\n+\t */\n+\tpublic static final String FIREBASE_PROJECT_ID = \"spring-firebase-test-project\";\n+\n+\t@Test\n+\tpublic void testFirebaseProjectIdNotSet() throws Exception {\n+\t\tnew ApplicationContextRunner()\n+\t\t\t\t.withBean(FirebaseAuthenticationProjectIdEvaluator.class)\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(TestConfig.class))\n+\t\t\t\t.run(context -> {\n+\t\t\t\t\tFirebaseAuthenticationProjectIdEvaluator evaluator = context.getBean(FirebaseAuthenticationProjectIdEvaluator.class);\n+\t\t\t\t\tassertThat(evaluator.getProjectId()).isEqualTo(GCP_PROVIDER_PROJECT_ID);\n+\t\t\t\t});\n+\t}\n+\n+\t@Test\n+\tpublic void testFirebaseProjectIdSet() throws Exception {\n+\t\tnew ApplicationContextRunner()\n+\t\t\t\t.withPropertyValues(\"spring.cloud.gcp.security.firebase=\" + FIREBASE_PROJECT_ID)\n+\t\t\t\t.withBean(FirebaseAuthenticationProjectIdEvaluator.class)\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(TestConfigWithFirebaseProjectId.class))\n+\t\t\t\t.run(context -> {\n+\t\t\t\t\tFirebaseAuthenticationProjectIdEvaluator evaluator = context.getBean(FirebaseAuthenticationProjectIdEvaluator.class);\n+\t\t\t\t\tassertThat(evaluator.getProjectId()).isEqualTo(FIREBASE_PROJECT_ID);\n+\t\t\t\t});\n+\t}\n+\n+\tstatic class TestConfig {\n+\n+\t\t@Bean\n+\t\tpublic GcpProjectIdProvider projectIdProvider() {\n+\t\t\treturn () -> GCP_PROVIDER_PROJECT_ID;\n+\t\t}\n+\n+\t\t@Bean\n+\t\tpublic FirebaseAuthenticationProperties firebaseAuthenticationProperties() {\n+\t\t\treturn mock(FirebaseAuthenticationProperties.class);\n+\t\t}\n+\n+\t}\n+\n+\tstatic class TestConfigWithFirebaseProjectId {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg3NzM1MQ=="}, "originalCommit": {"oid": "f2b84218354dc40e11d45d8b236b7efeb1a95c7d"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDIxMzU5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDo1ODozOFrOGdZ6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0MDozMlrOGeBVDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NjM5NA==", "bodyText": "Do we really need this class? In every other module we implement this feature directly in the auto-configuration class with code that looks something like this:\n\tpublic GcpPubSubAutoConfiguration(GcpPubSubProperties gcpPubSubProperties,\n\t\t\tGcpProjectIdProvider gcpProjectIdProvider,\n\t\t\tCredentialsProvider credentialsProvider) throws IOException {\n\t\tthis.gcpPubSubProperties = gcpPubSubProperties;\n\t\tthis.finalProjectIdProvider = (gcpPubSubProperties.getProjectId() != null)\n\t\t\t\t? gcpPubSubProperties::getProjectId\n\t\t\t\t: gcpProjectIdProvider;", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r433486394", "createdAt": "2020-06-01T20:58:38Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.4\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e5d56f669245b3aead4085abb5c9fa115a80217"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MDUwNA==", "bodyText": "Hi @meltsufin,\nI thought about this option when I started, however, I also noticed there are no unit tests for all similar places, so I applied a testable class.\nI agree that this option would be simpler though.\nPlease let me know your thoughts", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r433690504", "createdAt": "2020-06-02T07:59:15Z", "author": {"login": "femrtnz"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.4\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NjM5NA=="}, "originalCommit": {"oid": "4e5d56f669245b3aead4085abb5c9fa115a80217"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NzY1MQ==", "bodyText": "Since we have many modules in the project, I generally encourage consistency to make things more readable and maintainable. If something can be improved, then I would do it across the board. In this particular case, I would go with the existing approach, however flawed.\nEven though we might be missing some tests, I believe it should still be possible to test the existing approach.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r433877651", "createdAt": "2020-06-02T13:33:16Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.4\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NjM5NA=="}, "originalCommit": {"oid": "4e5d56f669245b3aead4085abb5c9fa115a80217"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzMjIzOQ==", "bodyText": "Fair enough. I will change to the simpler approach then. Thanks for the feedback.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r434132239", "createdAt": "2020-06-02T19:40:32Z", "author": {"login": "femrtnz"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationProjectIdEvaluator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.security;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ *\n+ * @author Felipe M Amaral\n+ * @since 1.2.4\n+ */\n+public class FirebaseAuthenticationProjectIdEvaluator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ4NjM5NA=="}, "originalCommit": {"oid": "4e5d56f669245b3aead4085abb5c9fa115a80217"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM0NDA5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxODoyNlrOGeCgXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo0MToyNlrOGeDNVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MTUxNw==", "bodyText": "I think parenthesis are not needed \ud83d\ude2c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r434151517", "createdAt": "2020-06-02T20:18:26Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationAutoConfiguration.java", "diffHunk": "@@ -58,13 +58,19 @@\n \n \tprivate static final String ISSUER_TEMPLATE = \"https://securetoken.google.com/%s\";\n \n+\tprivate final String projectId;\n+\n+\tpublic FirebaseAuthenticationAutoConfiguration(GcpProjectIdProvider gcpProjectIdProvider, FirebaseAuthenticationProperties properties) {\n+\t\tthis.projectId = (properties.getProjectId() != null) ? properties.getProjectId() : gcpProjectIdProvider.getProjectId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d0cb95f2cb46d103675bebe659a5f08fd4b20a4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MzAzMA==", "bodyText": "Indeed! I was just following the same pattern as suggested :)\nRemoved :)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2405#discussion_r434163030", "createdAt": "2020-06-02T20:41:26Z", "author": {"login": "femrtnz"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/security/FirebaseAuthenticationAutoConfiguration.java", "diffHunk": "@@ -58,13 +58,19 @@\n \n \tprivate static final String ISSUER_TEMPLATE = \"https://securetoken.google.com/%s\";\n \n+\tprivate final String projectId;\n+\n+\tpublic FirebaseAuthenticationAutoConfiguration(GcpProjectIdProvider gcpProjectIdProvider, FirebaseAuthenticationProperties properties) {\n+\t\tthis.projectId = (properties.getProjectId() != null) ? properties.getProjectId() : gcpProjectIdProvider.getProjectId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MTUxNw=="}, "originalCommit": {"oid": "8d0cb95f2cb46d103675bebe659a5f08fd4b20a4"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2136, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}