{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTIyNTY2", "number": 2287, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNjozNVrODsFoIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNjozNVrODsFoIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU2MTMwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/trace.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNjozNVrOF8zhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDoyOTowN1rOF9A3aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMjkxNw==", "bodyText": "Are we sure that the name is always async? Maybe just remove the warning altogether?\nIf we do keep this warning, can we mention how to disable them with spring.sleuth.scheduled.enabled=false?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2287#discussion_r399302917", "createdAt": "2020-03-27T14:26:35Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/trace.adoc", "diffHunk": "@@ -89,21 +89,21 @@ For example, when you are testing to see the traces are going through, you can s\n \n [source]\n ----\n-spring.sleuth.sampler.probability=1                     # Send 100% of the request traces to Stackdriver.\n+spring.sleuth.sampler.probability=1                     # Send 100% of the request traces to Cloud Trace.\n spring.sleuth.web.skipPattern=(^cleanup.*|.+favicon.*)  # Ignore some URL paths.\n spring.sleuth.scheduled.enabled=false                   # disable executor 'async' traces\n ----\n \n-WARNING: By default, Spring Cloud Sleuth auto-configuration instruments executor beans, which causes many traces with the name `async` to appear in Stackdriver Trace. This is especially a problem because our starter comes with an executor. To avoid this noise, please disable automatic instrumentation of executors via `spring.sleuth.scheduled.enabled=false` in your application configuration.\n+WARNING: By default, Spring Cloud Sleuth auto-configuration instruments executor beans, which may cause recurring traces with the name `async` to appear in Cloud Trace if your application or one of its dependencies introduces scheduler beans into Spring application context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61460af8ea736d4da141beaa4c1c6caec3700f7b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUyMTY0MQ==", "bodyText": "async is a default name. I've tested it with our pubsub starter, and yep, it was async, starting after the thread pool was first used.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2287#discussion_r399521641", "createdAt": "2020-03-27T20:29:07Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/trace.adoc", "diffHunk": "@@ -89,21 +89,21 @@ For example, when you are testing to see the traces are going through, you can s\n \n [source]\n ----\n-spring.sleuth.sampler.probability=1                     # Send 100% of the request traces to Stackdriver.\n+spring.sleuth.sampler.probability=1                     # Send 100% of the request traces to Cloud Trace.\n spring.sleuth.web.skipPattern=(^cleanup.*|.+favicon.*)  # Ignore some URL paths.\n spring.sleuth.scheduled.enabled=false                   # disable executor 'async' traces\n ----\n \n-WARNING: By default, Spring Cloud Sleuth auto-configuration instruments executor beans, which causes many traces with the name `async` to appear in Stackdriver Trace. This is especially a problem because our starter comes with an executor. To avoid this noise, please disable automatic instrumentation of executors via `spring.sleuth.scheduled.enabled=false` in your application configuration.\n+WARNING: By default, Spring Cloud Sleuth auto-configuration instruments executor beans, which may cause recurring traces with the name `async` to appear in Cloud Trace if your application or one of its dependencies introduces scheduler beans into Spring application context.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMjkxNw=="}, "originalCommit": {"oid": "61460af8ea736d4da141beaa4c1c6caec3700f7b"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2326, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}