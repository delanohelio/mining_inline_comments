{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODc1NTgz", "number": 2541, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxMjozNlrOErQSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxOToxNVrOEuigYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzkxMTYzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxMjozNlrOHd7Dfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjoxMjozNlrOHd7Dfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzODMwMw==", "bodyText": "Copyright 2017-2020", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501138303", "createdAt": "2020-10-07T16:12:36Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODAwMDc5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozNDowN1rOHd78Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0MTozNlrOHeAysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MjgwMw==", "bodyText": "I don't think this is quite the right approach; it seems a bit heavyweight to create a new class to hold a boolean.\nAlso the only method that returns this is nextPageAwareQuery; however, other query methods such as query, queryIterable, and queryByExample also return DatastoreResultsIterable but are not able to take advantage of the next-page-aware feature.\nI would try to get DatastoreResultsIterable to have access to the hasNextPage somehow.\nI would suggest a couple alternatives:\n\n\nIs it possible to add a method to DatastoreTemplate like hasNextPage(Cursor c) or hasNextPage(DatastoreResultsIterable i)? if so, the user can manually check for next page through usage of template.\n\n\nIf the query is cheap, you might as well pay the cost of nextPageExists(..) for each DatastoreResultsIterable; and build the hasNextPage parameter in there. no need for premature optimization\n\n\nAdd a method called hasNextPage() on the DatastoreResultsIterable which will run the query of checking if the cursor has a next page. This would require the Iterable obj have reference to the datastore client I suppose.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501152803", "createdAt": "2020-10-07T16:34:07Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+\n+/**\n+ * An iterable that contains a cursor for the next page and can be used to determine\n+ * if the next page exists.\n+ *\n+ * @author Dmitry Solomakha\n+ */\n+public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMjMwNg==", "bodyText": "+1\nCan we just extend DatastoreResultsIterable?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501232306", "createdAt": "2020-10-07T18:41:36Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+\n+/**\n+ * An iterable that contains a cursor for the next page and can be used to determine\n+ * if the next page exists.\n+ *\n+ * @author Dmitry Solomakha\n+ */\n+public class DatastoreNextPageAwareResultsIterable<T> implements Iterable<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MjgwMw=="}, "originalCommit": {"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODUwOTA5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0NDoyNFrOHeA4uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxODo0N1rOHeu7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzg1MQ==", "bodyText": "Can we just move this code to hasNextPage in the Iterable?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501233851", "createdAt": "2020-10-07T18:44:24Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -276,6 +277,21 @@ public long count(Class<?> entityClass) {\n \t\treturn resultsIterable;\n \t}\n \n+\t@Override\n+\tpublic <T> DatastoreNextPageAwareResultsIterable<?> nextPageAwareQuery(StructuredQuery query, Class<T> entityClass) {\n+\t\tDatastoreResultsIterable resultsIterable = queryKeysOrEntities(query, entityClass);\n+\n+\t\treturn new DatastoreNextPageAwareResultsIterable(resultsIterable, nextPageExists(query, resultsIterable.getCursor()));\n+\t}\n+\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4ODI2OQ==", "bodyText": "Same question as before.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501988269", "createdAt": "2020-10-08T20:18:47Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -276,6 +277,21 @@ public long count(Class<?> entityClass) {\n \t\treturn resultsIterable;\n \t}\n \n+\t@Override\n+\tpublic <T> DatastoreNextPageAwareResultsIterable<?> nextPageAwareQuery(StructuredQuery query, Class<T> entityClass) {\n+\t\tDatastoreResultsIterable resultsIterable = queryKeysOrEntities(query, entityClass);\n+\n+\t\treturn new DatastoreNextPageAwareResultsIterable(resultsIterable, nextPageExists(query, resultsIterable.getCursor()));\n+\t}\n+\n+\tprivate boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzMzg1MQ=="}, "originalCommit": {"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODUxNjk2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0Njo0N1rOHeA90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxODo0Njo0N1rOHeA90g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzNTE1NA==", "bodyText": "You can just return here without assigning to pageable.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501235154", "createdAt": "2020-10-07T18:46:47Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -248,21 +248,19 @@ private Slice executeSliceQuery(Object[] parameters) {\n \t\tStructuredQuery.Builder builder = getEntityOrProjectionQueryBuilder()\n \t\t\t\t.setKind(this.datastorePersistentEntity.kindName());\n \t\tStructuredQuery query = applyQueryBody(parameters, builder, false, false, null);\n-\t\tDatastoreResultsIterable<?> resultList = this.datastoreOperations.queryKeysOrEntities(query, this.entityType);\n-\n-\t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n-\n-\t\tPageable pageable = DatastorePageable.from(paramAccessor.getPageable(), resultList.getCursor(), null);\n-\n-\t\tEntityQuery.Builder builderNext = newEntityQueryBuilder().setKind(this.datastorePersistentEntity.kindName());\n-\t\tStructuredQuery queryNext = applyQueryBody(parameters, builderNext, false, true, resultList.getCursor());\n-\t\tIterable nextResult = this.datastoreOperations.query(queryNext, x -> x);\n+\t\tDatastoreNextPageAwareResultsIterable<?> results = this.datastoreOperations.nextPageAwareQuery(query, this.entityType);\n \n \t\tList<Object> result =\n-\t\t\t\t\t\tStreamSupport.stream(resultList.spliterator(), false).collect(Collectors.toList());\n+\t\t\t\tStreamSupport.stream(results.spliterator(), false).collect(Collectors.toList());\n \n \t\treturn (Slice) this.processRawObjectForProjection(\n-\t\t\t\tnew SliceImpl(result, pageable, nextResult.iterator().hasNext()));\n+\t\t\t\tnew SliceImpl(result, getPageable(parameters, results.getCursor()), results.hasNextPage()));\n+\t}\n+\n+\tprivate Pageable getPageable(Object[] parameters, Cursor cursor) {\n+\t\tParameterAccessor paramAccessor = new ParametersParameterAccessor(getQueryMethod().getParameters(), parameters);\n+\t\tPageable pageable = DatastorePageable.from(paramAccessor.getPageable(), cursor, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23c1e96ad4328ec3e0ef4fc91f0c9ebac56ed07"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzM2MTc5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxNDozMVrOHeuznA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjoyMjoyMFrOHgFTyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA==", "bodyText": "why not just\npublic boolean hasNextPage()?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501986204", "createdAt": "2020-10-08T20:14:31Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAxMzgzOQ==", "bodyText": "@meltsufin Because it is not always there. We can only compute it for StructuredQuery queries, and we can't compute it for GQL queries. So we need to represent 3 values - true, false, empty.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r502013839", "createdAt": "2020-10-08T21:09:18Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyOTM1MQ==", "bodyText": "@dmitry-s I must be missing something here. Both, GqlQuery and StructuredQuery, support cursors. So, I would image that it's possible to try to retrieve the next item using the cursor to determine hasNext(). How are they different in this respect?\nAlso, if there is a fundamental difference, then we should probably have two different classes for their results. So, maybe extend DatastoreResultsIterable and add hasNextPage()?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r502529351", "createdAt": "2020-10-09T16:01:43Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjYzMDg2NA==", "bodyText": "The problem with GqlQuery is we need to set limit to 1 to avoid fetching the whole next page, and GqlQuery doesn't allow to change that.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r502630864", "createdAt": "2020-10-09T19:26:45Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwMzQ2NA==", "bodyText": "So, for GqlQuery we would need to fetch the whole page? Is there a problem with that other than the potential performance overhead?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r503403464", "createdAt": "2020-10-12T16:22:20Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NjIwNA=="}, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzM2NTk3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxNTo0NlrOHeu2GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxNTo0NlrOHeu2GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4Njg0MQ==", "bodyText": "I don't think a public setter makes sense here. Can you just provide all the necessary objects to determine hasNextPage into the constructor?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501986841", "createdAt": "2020-10-08T20:15:46Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreResultsIterable.java", "diffHunk": "@@ -50,4 +61,20 @@ public Cursor getCursor() {\n \tpublic Iterable<T> getIterable() {\n \t\treturn this.iterable;\n \t}\n+\n+\tpublic Optional<Boolean> getHasNextPage() {\n+\t\treturn hasNextPage.get();\n+\t}\n+\n+\tpublic void setHasNextPageQuery(Supplier<Boolean> query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzM3MDc2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxNzoyMVrOHeu5AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoxNzoyMVrOHeu5AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4NzU4NQ==", "bodyText": "Instead of calling setHasNextPageQuery can this block of code just move to DatastoreResultsIterable?\nAlso, why does this only apply to StructuredQuery?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r501987585", "createdAt": "2020-10-08T20:17:21Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -272,10 +273,25 @@ public long count(Class<?> entityClass) {\n \t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n+\t\tif (query instanceof StructuredQuery) {\n+\t\t\tresultsIterable.setHasNextPageQuery(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3e46900e24604dda5e6d78a8ff293cdf2941e54"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM0MDU4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNDo1MFrOHhAnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNDo1MFrOHhAnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTEwNA==", "bodyText": "Never used.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375104", "createdAt": "2020-10-14T03:14:50Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;\n+\n+\tprivate Cursor cursor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM0MzYzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNjoyOFrOHhAo9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNjoyOFrOHhAo9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTU0Mw==", "bodyText": "DatastoreStructuredQueryResultsIterable maybe?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375543", "createdAt": "2020-10-14T03:16:28Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM0NDU5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNzowMVrOHhApgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNzowMVrOHhApgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTY4Mg==", "bodyText": "Please add class-level javadoc and @since 1.2.6.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375682", "createdAt": "2020-10-14T03:17:01Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM0NTY2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNzoyOVrOHhAqGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoxNzoyOVrOHhAqGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NTgzMw==", "bodyText": "Never used.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504375833", "createdAt": "2020-10-14T03:17:29Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;\n+\n+\tprivate Cursor cursor;\n+\n+\tprivate StructuredQuery structuredQuery;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM1NjE0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyMzoxNlrOHhAwMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyMzoxNlrOHhAwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3NzM5Mw==", "bodyText": "Javadoc missing\nqueryHasNextPage maybe?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504377393", "createdAt": "2020-10-14T03:23:16Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -266,16 +267,28 @@ public long count(Class<?> entityClass) {\n \t\tQueryResults results = getDatastoreReadWriter().run(query);\n \t\tDatastoreResultsIterable resultsIterable;\n \t\tif (results.getResultClass() == Key.class) {\n-\t\t\tresultsIterable = new DatastoreResultsIterable(results, results.getCursorAfter());\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable(results, results.getCursorAfter());\n \t\t}\n \t\telse {\n-\t\t\tresultsIterable = new DatastoreResultsIterable<>(convertEntitiesForRead(results, entityClass),\n+\t\t\tresultsIterable = new DatastoreSimpleResultsIterable<>(convertEntitiesForRead(results, entityClass),\n \t\t\t\t\tresults.getCursorAfter());\n \t\t}\n+\t\tif (query instanceof StructuredQuery) {\n+\t\t\tresultsIterable = new DatastoreNextPageAwareResultsIterable(\n+\t\t\t\t\tresultsIterable, results.getCursorAfter(), (StructuredQuery) query, this);\n+\t\t}\n \t\tmaybeEmitEvent(new AfterQueryEvent(resultsIterable, query));\n \t\treturn resultsIterable;\n \t}\n \n+\tpublic boolean nextPageExists(StructuredQuery query, Cursor cursorAfter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM2MjUxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyNjozM1rOHhAz4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyNjozM1rOHhAz4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODMzNw==", "bodyText": "I don't think you're gaining much by delegating to another iterable. I would just use the currently unused instance variables instead.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504378337", "createdAt": "2020-10-14T03:26:33Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreNextPageAwareResultsIterable.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+import com.google.cloud.datastore.StructuredQuery;\n+\n+import org.springframework.data.util.Lazy;\n+\n+public class DatastoreNextPageAwareResultsIterable<T> implements DatastoreResultsIterable<T> {\n+\tprivate DatastoreResultsIterable datastoreResultsIterable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM2MzQyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyNjo1NFrOHhA0XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzoyNjo1NFrOHhA0XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3ODQ2MA==", "bodyText": "javadoc missing", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504378460", "createdAt": "2020-10-14T03:26:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreSimpleResultsIterable.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.datastore.core;\n+\n+import java.util.Iterator;\n+\n+import com.google.cloud.datastore.Cursor;\n+\n+public class DatastoreSimpleResultsIterable<T> implements DatastoreResultsIterable<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTM2ODY2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzozMDoxM1rOHhA3kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTozMDoxNVrOHhtlUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTI4MQ==", "bodyText": "Does it make sense to make SliceImpl also evaluate hasNext() lazily?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504379281", "createdAt": "2020-10-14T03:30:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -245,24 +245,25 @@ private String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n+\t\tDatastoreNextPageAwareResultsIterable<?> results =\n+\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n+\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(\n+\t\t\t\tnew SliceImpl(results.toList(),\n+\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n+\t\t\t\t\t\tresults.hasNextPage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4Nzg5MA==", "bodyText": "It is a Spring Data class and expects a boolean parameter.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r504987890", "createdAt": "2020-10-14T21:40:05Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -245,24 +245,25 @@ private String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n+\t\tDatastoreNextPageAwareResultsIterable<?> results =\n+\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n+\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(\n+\t\t\t\tnew SliceImpl(results.toList(),\n+\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n+\t\t\t\t\t\tresults.hasNextPage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTI4MQ=="}, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTExMTg4OQ==", "bodyText": "Can we extend SliceImpl?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505111889", "createdAt": "2020-10-15T01:30:15Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -245,24 +245,25 @@ private String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n \t}\n \n \tprivate Slice executeSliceQuery(Object[] parameters) {\n+\t\tDatastoreNextPageAwareResultsIterable<?> results =\n+\t\t\t\t(DatastoreNextPageAwareResultsIterable<?>)\n+\t\t\t\t\t\tthis.datastoreOperations.queryKeysOrEntities(buildSliceQuey(parameters), this.entityType);\n+\n+\t\treturn (Slice) this.processRawObjectForProjection(\n+\t\t\t\tnew SliceImpl(results.toList(),\n+\t\t\t\t\t\tgetPageable(parameters, results.getCursor()),\n+\t\t\t\t\t\tresults.hasNextPage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM3OTI4MQ=="}, "originalCommit": {"oid": "b879f14210745398ae7ed33992b71a056a834dc5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTM4NzcyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjowMjoxM1rOHiipOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjowMjoxM1rOHiipOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MTI0MQ==", "bodyText": "Can you clarify which type to specify for key?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505981241", "createdAt": "2020-10-16T02:02:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTM5MDkyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjowMzozNVrOHiirUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjowMzozNVrOHiirUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MTc3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n          \n          \n            \n            \t * Resulting Slice can be used to get a Pageable for the next page or to determine if next the page exists.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505981776", "createdAt": "2020-10-16T02:03:35Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTM5NzI1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjowNjoxM1rOHiivaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjowNjoxM1rOHiivaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MjgyNA==", "bodyText": "Do we still need this method, since Slice has hasNextPage()?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505982824", "createdAt": "2020-10-16T02:06:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\n+\t/**\n+\t * Runs a query that checks if there is at least one entry after the cursor.\n+\t *\n+\t * @param query the query that returned the cursor\n+\t * @param cursorAfter the cursor\n+\t * @return true if next page exists for the given query and cursor\n+\t */\n+\tboolean nextPageExists(StructuredQuery query, Cursor cursorAfter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTQwNzk1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxMDowOVrOHii2lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowOToyNlrOHjAT3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDY2Mw==", "bodyText": "Can we extend SliceImpl such that hasNextPage() is lazy?\nFeel free to leave for another PR though.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505984663", "createdAt": "2020-10-16T02:10:09Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -261,6 +266,32 @@ public long count(Class<?> entityClass) {\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQxODIxMg==", "bodyText": "I don't think it is necessary because if you don't need  hasNextPage(), you could just use the queryKeysOrEntities method instead.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506418212", "createdAt": "2020-10-16T13:26:14Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -261,6 +266,32 @@ public long count(Class<?> entityClass) {\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDY2Mw=="}, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2NzI5NA==", "bodyText": "What about the use in repositories?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506467294", "createdAt": "2020-10-16T14:09:26Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -261,6 +266,32 @@ public long count(Class<?> entityClass) {\n \t\t\t\t: null;\n \t}\n \n+\t@Override\n+\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\t\treturn new SliceImpl<>(results.toList(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NDY2Mw=="}, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2OTQyNzAwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxNjoyNFrOHijDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzo1MToxMlrOHi--Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzkzOA==", "bodyText": "Can you remind me, what is the benefit of combining queryEntities() and queryKeys() into one method?\nSonar is identifying this as a \"code smell\".", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r505987938", "createdAt": "2020-10-16T02:16:24Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQyNDU1NA==", "bodyText": "The code would be identical for these cases, so we are avoiding duplication this way.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506424554", "createdAt": "2020-10-16T13:31:05Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzkzOA=="}, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ0NTQwMg==", "bodyText": "Let me see if I can refactor it to avoid duplication.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506445402", "createdAt": "2020-10-16T13:51:12Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -272,11 +275,31 @@\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if next page exists.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NzkzOA=="}, "originalCommit": {"oid": "16a9010be49dd26277edfa359322d0921d012b30"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjM0Mjg0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxNzoxMVrOHjAw2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxNzoxMVrOHjAw2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NDcxMw==", "bodyText": "Why don't you check for those types in the condition then? What if other query types are added in the future?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506474713", "createdAt": "2020-10-16T14:17:11Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -267,8 +268,21 @@ public long count(Class<?> entityClass) {\n \t}\n \n \t@Override\n-\tpublic <T> Slice<?> queryKeysOrEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n-\t\tDatastoreResultsIterable<?> results = queryKeysOrEntities(applyPageable(query, pageable), entityClass);\n+\tpublic <T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\treturn buildSlice(query, pageable, Key.class);\n+\t}\n+\n+\t@Override\n+\tpublic <T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable) {\n+\t\tif (query instanceof KeyQuery) {\n+\t\t\tthrow new DatastoreDataException(\"query must be an EntityQuery or a ProjectionEntityQuery\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600da902b69358aa181dc7161cd6f67f365ae6cb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MjM1Mjk2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDoxOToxNVrOHjA3gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMDoxNzo0NlrOHjOmIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NjQxOQ==", "bodyText": "Can we also deprecate this method and bifurcate it like you did for Slice? This can be in a separate PR.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506476419", "createdAt": "2020-10-16T14:19:15Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -269,14 +272,35 @@\n \t */\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n+\t/**\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n+\n+\t/**\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return an iterable containing found objects and a cursor\n \t */\n \t<T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "600da902b69358aa181dc7161cd6f67f365ae6cb"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwMTM0NA==", "bodyText": "created an issue: #2559", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2541#discussion_r506701344", "createdAt": "2020-10-16T20:17:46Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -269,14 +272,35 @@\n \t */\n \tDatastoreEntityConverter getDatastoreEntityConverter();\n \n+\t/**\n+\t * Finds keys by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<Key> queryKeysSlice(KeyQuery query, Class<T> entityClass, Pageable pageable);\n+\n+\t/**\n+\t * Finds entities by using a Cloud Datastore query.\n+\t * Resulting Slice can be used to get a Pageable for the next page or to determine if the next page exists.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param pageable that indicates page number and page size\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a Slice containing found objects\n+\t */\n+\t<T> Slice<T> queryEntitiesSlice(StructuredQuery query, Class<T> entityClass, Pageable pageable);\n+\n \t/**\n \t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n \t * returned.\n \t * @param query the query to execute.\n \t * @param entityClass the type of object to retrieve.\n \t * @param <T> the type of object to retrieve.\n-\t * @return a list of the objects found. If no keys could be found the list will be\n-\t * empty.\n+\t * @return an iterable containing found objects and a cursor\n \t */\n \t<T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ3NjQxOQ=="}, "originalCommit": {"oid": "600da902b69358aa181dc7161cd6f67f365ae6cb"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2065, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}