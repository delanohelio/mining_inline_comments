{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDY5NjI5", "number": 2168, "title": "Add initial secret manager property source implementation", "bodyText": "This is the initial scaffolding for setting up Secret Manager as a bootstrap property source.\nIn progress #2115.", "createdAt": "2020-02-02T23:28:37Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168", "merged": true, "mergeCommit": {"oid": "9c6cf5421175c13ae05ef45bce213aeac9abf6a2"}, "closed": true, "closedAt": "2020-02-07T15:52:36Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAg6XsAH2gAyMzcwMDY5NjI5OjljNmJiZDY0NzI3MmU1NWNlYzYyYjgzNWM5YWU2NTliODY1YWRmZjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBye67AFqTM1NDgxODEwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c6bbd647272e55cec62b835c9ae659b865adff2", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/9c6bbd647272e55cec62b835c9ae659b865adff2", "committedDate": "2020-02-02T23:26:48Z", "message": "Add Secret Manager as bootstrap property source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1", "committedDate": "2020-02-02T23:29:48Z", "message": "fix indents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNDYxMjM3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-352461237", "createdAt": "2020-02-03T18:20:18Z", "commit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMDoxOFrOFk7Fxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMTowN1rOFk7HYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTE5MA==", "bodyText": "In general, what we've been recommending to integrators downstream is the following transformation:\n:pid/:sid => projects/:pid/secrets/:sid/versions/latest\n:pid/:sid/:vid => projects/:pid/secrets/:sid/versions/:vid\nprojects/:pid/secrets/:sid => projects/:pid/secrets/:sid/versions/latest\nprojects/:pid/secrets/:sid/versions/:vid => projects/:pid/secrets/:sid/versions/:vid\n\nThat way, the result of the parsing is always a fully-qualified secret version reference which you can pass directly to AccessSecretVersion without needing to complicate that method.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374261190", "createdAt": "2020-02-03T18:20:18Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Extracts the Secret ID from the {@link Secret}. The secret ID refers to the unique ID\n+\t * given to the secret when it is saved under a GCP project.\n+\t *\n+\t * <p>\n+\t * The secret ID is extracted from the full secret name of the form:\n+\t * projects/${PROJECT_ID}/secrets/${SECRET_ID}\n+\t */\n+\tprivate static String extractSecretId(Secret secret) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA==", "bodyText": "Should probably document it in SpringBoot that only \"string\" secrets are accepted. Secret Manager accepts a wide character set for payload values.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374261600", "createdAt": "2020-02-03T18:21:07Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTE3NTA1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-352517505", "createdAt": "2020-02-03T19:50:27Z", "commit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1MDoyN1rOFk9zIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozMDo0NFrOFk-9pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTU2OQ==", "bodyText": "Please add javadoc / author / version.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374305569", "createdAt": "2020-02-03T19:50:27Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")\n+public class GcpSecretManagerBootstrapConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTk2NA==", "bodyText": "havingValue = \"true\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374305964", "createdAt": "2020-02-03T19:51:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMDgwNQ==", "bodyText": "javadoc pls", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374310805", "createdAt": "2020-02-03T20:00:47Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMTcyNw==", "bodyText": "Allow this to be configurable in GcpSecretManagerProperties?\nMaybe some people just want to load the properties directly without any prefix. Anything wrong with that?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374311727", "createdAt": "2020-02-03T20:02:39Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjgwNg==", "bodyText": "Maybe make this a constant?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374312806", "createdAt": "2020-02-03T20:04:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {\n+\n+\tprivate final SecretManagerServiceClient client;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tSecretManagerPropertySourceLocator(\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.client = client;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic PropertySource<?> locate(Environment environment) {\n+\t\treturn new SecretManagerPropertySource(\n+\t\t\t\t\"spring-cloud-gcp-secret-manager\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTQ4OA==", "bodyText": "You're loading properties in the constructor. Would it make sense to allow users to reload the properties by providing a public \"refresh\" method to do it?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374321488", "createdAt": "2020-02-03T20:23:31Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMjAyNA==", "bodyText": "public Object getProperty(String name)\nSo, I don't think we really need to convert all values to Strings. @dzou WDYT?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374322024", "createdAt": "2020-02-03T20:24:41Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMzc3Mw==", "bodyText": "Can we have a test for when it's false too?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374323773", "createdAt": "2020-02-03T20:28:43Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNDY0NA==", "bodyText": "This reminds me, do we want to create a SecretManagerTemplate? You would also put the secret reading in there.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374324644", "createdAt": "2020-02-03T20:30:44Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")\n+\t\t\t\t.run();\n+\n+\t\tthis.projectIdProvider = this.context.getBeanFactory().getBean(GcpProjectIdProvider.class);\n+\t\tthis.client = this.context.getBeanFactory().getBean(SecretManagerServiceClient.class);\n+\n+\t\tcreateSecret(TEST_SECRET_ID, \"the secret data\");\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testConfiguration() {\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"spring-cloud-gcp.secrets.my-secret\"))\n+\t\t\t\t.isEqualTo(\"the secret data.\");\n+\t}\n+\n+\t/**\n+\t * Creates the secret with the specified payload if the secret does not already exist.\n+\t */\n+\tprivate void createSecret(String secretId, String payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDIxNzI4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-353021728", "createdAt": "2020-02-04T14:34:56Z", "commit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDozNDo1NlrOFlWNEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxNjoxOVrOFlX1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg==", "bodyText": "I wonder if it makes sense to put this class into a new spring-cloud-gcp-secretmanager module. Then we could give people a single-dependency starter instead of having them bring in the autoconfiguration module combined with explicitly setting a property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374705426", "createdAt": "2020-02-04T14:34:56Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyOTc0OQ==", "bodyText": "More generally, test behavior of a@RefreshScope property in the sample. Ideally, triggering a refresh event should get those properties to expire.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374729749", "createdAt": "2020-02-04T15:12:42Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTQ4OA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMjEzOA==", "bodyText": "+1, and this would also go into the new module.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374732138", "createdAt": "2020-02-04T15:16:19Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")\n+\t\t\t\t.run();\n+\n+\t\tthis.projectIdProvider = this.context.getBeanFactory().getBean(GcpProjectIdProvider.class);\n+\t\tthis.client = this.context.getBeanFactory().getBean(SecretManagerServiceClient.class);\n+\n+\t\tcreateSecret(TEST_SECRET_ID, \"the secret data\");\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testConfiguration() {\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"spring-cloud-gcp.secrets.my-secret\"))\n+\t\t\t\t.isEqualTo(\"the secret data.\");\n+\t}\n+\n+\t/**\n+\t * Creates the secret with the specified payload if the secret does not already exist.\n+\t */\n+\tprivate void createSecret(String secretId, String payload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNDY0NA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe5e3f2752de6e7367567ce9750a2e469767dea", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/afe5e3f2752de6e7367567ce9750a2e469767dea", "committedDate": "2020-02-05T16:14:40Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/eedb338dd8f1b534402ce0896d9be151a37db9cb", "committedDate": "2020-02-05T16:15:57Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODY3MjAx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-353867201", "createdAt": "2020-02-05T16:40:02Z", "commit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MDowM1rOFl-4ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MDozM1rOFl-54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MTkzOQ==", "bodyText": "Non-blocking, but a potential future optimization would be to parallelize this.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375371939", "createdAt": "2020-02-05T16:40:03Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsNamespace) {\n+\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MjI1Ng==", "bodyText": "I think people will want to access specific secret versions. Defaulting to \"latest\" is not a production best practice.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375372256", "createdAt": "2020-02-05T16:40:33Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsNamespace) {\n+\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\tsecretsMap.put(secretsNamespace + secretId, secretPayload);\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static ByteString getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODc0MTEw", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-353874110", "createdAt": "2020-02-05T16:48:48Z", "commit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0ODo0OFrOFl_NUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0ODo0OFrOFl_NUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ==", "bodyText": "Asking the boot team if there is a better way than using a static method.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375377235", "createdAt": "2020-02-05T16:48:48Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97819565f546c5a7a126ab16405b6d302b78bc5e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/97819565f546c5a7a126ab16405b6d302b78bc5e", "committedDate": "2020-02-05T19:38:51Z", "message": "do alternate method for converted registration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTkwNzg3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-353990787", "createdAt": "2020-02-05T19:42:49Z", "commit": {"oid": "97819565f546c5a7a126ab16405b6d302b78bc5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0Mjo0OVrOFmEzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0Mjo0OVrOFmEzWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2ODg4OA==", "bodyText": "I wouldn't redefine a ConfigurableEnvironment bean. Just put it as a constuctor arg and call a method.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375468888", "createdAt": "2020-02-05T19:42:49Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t/**\n+\t * Registers {@link ByteString} type converters to convert to String and byte[].\n+\t */\n+\t@Bean\n+\tpublic ConfigurableEnvironment configurableEnvironment(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97819565f546c5a7a126ab16405b6d302b78bc5e"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfee77cdf981d912f1a5ef278452f913d2717cdc", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/cfee77cdf981d912f1a5ef278452f913d2717cdc", "committedDate": "2020-02-05T19:48:21Z", "message": "move converter registration to constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0afdf65a8add458475773ed799e440d4dd0c466a", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0afdf65a8add458475773ed799e440d4dd0c466a", "committedDate": "2020-02-05T19:53:25Z", "message": "change prefix string to empty as default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114eb1af71f06a8cbc52d24980eae0d048cd196e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/114eb1af71f06a8cbc52d24980eae0d048cd196e", "committedDate": "2020-02-05T19:58:07Z", "message": "Make secret prefix empty by default."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDcxMTk4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-354071198", "createdAt": "2020-02-05T22:00:05Z", "commit": {"oid": "114eb1af71f06a8cbc52d24980eae0d048cd196e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowMDowNVrOFmIrbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNDo0NFrOFmIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMjM5OA==", "bodyText": "This doesn't actually \"initialize\" the properties map because it has no side effect.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static Map<String, Object> initializePropertiesMap(\n          \n          \n            \n            \tprivate static Map<String, Object> readSecretsPropertiesMap(", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375532398", "createdAt": "2020-02-05T22:00:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114eb1af71f06a8cbc52d24980eae0d048cd196e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzI4NQ==", "bodyText": "Can we add a tracking issue to add a template?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375533285", "createdAt": "2020-02-05T22:02:01Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNDM5MQ==", "bodyText": "\"the secret data.\".getBytes() or something like that instead?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375534391", "createdAt": "2020-02-05T22:04:44Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.run();\n+\n+\t\tthis.projectIdProvider = this.context.getBeanFactory().getBean(GcpProjectIdProvider.class);\n+\t\tthis.client = this.context.getBeanFactory().getBean(SecretManagerServiceClient.class);\n+\n+\t\tcreateSecret(TEST_SECRET_ID, \"the secret data\");\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testConfiguration() {\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"my-secret\"))\n+\t\t\t\t.isEqualTo(\"the secret data.\");\n+\n+\t\tbyte[] byteArraySecret = this.context.getEnvironment().getProperty(\"my-secret\", byte[].class);\n+\n+\t\t// This byte array is the equivalent representation to \"the secret data.\"\n+\t\tassertThat(byteArraySecret).isEqualTo(\n+\t\t\t\tnew byte[] { 116, 104, 101, 32, 115, 101, 99, 114, 101, 116, 32, 100, 97, 116, 97, 46 });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114eb1af71f06a8cbc52d24980eae0d048cd196e"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45d9f2b3ce4ae1934de359afdf43b33f641ea7c9", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/45d9f2b3ce4ae1934de359afdf43b33f641ea7c9", "committedDate": "2020-02-05T22:35:48Z", "message": "pr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODEzMDc5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-354813079", "createdAt": "2020-02-06T22:19:09Z", "commit": {"oid": "45d9f2b3ce4ae1934de359afdf43b33f641ea7c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0ODE4MTA0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#pullrequestreview-354818104", "createdAt": "2020-02-06T22:29:02Z", "commit": {"oid": "45d9f2b3ce4ae1934de359afdf43b33f641ea7c9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 522, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}