{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Njg4NDcz", "number": 2158, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NTowMFrODcUwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NTowMFrODcUwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDI2ODQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/trace/StackdriverTraceAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo0NTowMFrOFkUcjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxODo1MDowM1rOFkUlMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyODA0NQ==", "bodyText": "Optional works here? I thought we have to use ObjectProvider.\ncc/ @artembilan", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2158#discussion_r373628045", "createdAt": "2020-01-31T18:45:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/trace/StackdriverTraceAutoConfiguration.java", "diffHunk": "@@ -121,19 +126,21 @@ public SleuthProperties stackdriverSleuthProperties(SleuthProperties sleuthPrope\n \t\treturn sleuthProperties;\n \t}\n \n-\t@Bean\n-\t@ConditionalOnMissingBean(name = \"traceSenderThreadPool\")\n-\tpublic ThreadPoolTaskScheduler traceSenderThreadPool(GcpTraceProperties traceProperties) {\n-\t\tThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();\n-\t\tscheduler.setPoolSize(traceProperties.getNumExecutorThreads());\n-\t\tscheduler.setThreadNamePrefix(\"gcp-trace-sender\");\n-\t\tscheduler.setDaemon(true);\n-\t\treturn scheduler;\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean(name = \"traceExecutorProvider\")\n-\tpublic ExecutorProvider traceExecutorProvider(@Qualifier(\"traceSenderThreadPool\") ThreadPoolTaskScheduler scheduler) {\n+\tpublic ExecutorProvider traceExecutorProvider(GcpTraceProperties traceProperties, @Qualifier(\"traceSenderThreadPool\") Optional<ThreadPoolTaskScheduler> userProvidedScheduler) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6814897dc7aad3d68f6ecb59de80a13b4551f487"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzMDI1OA==", "bodyText": "I think it's OK to stick with Optional for simple use-cases.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2158#discussion_r373630258", "createdAt": "2020-01-31T18:50:03Z", "author": {"login": "artembilan"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/trace/StackdriverTraceAutoConfiguration.java", "diffHunk": "@@ -121,19 +126,21 @@ public SleuthProperties stackdriverSleuthProperties(SleuthProperties sleuthPrope\n \t\treturn sleuthProperties;\n \t}\n \n-\t@Bean\n-\t@ConditionalOnMissingBean(name = \"traceSenderThreadPool\")\n-\tpublic ThreadPoolTaskScheduler traceSenderThreadPool(GcpTraceProperties traceProperties) {\n-\t\tThreadPoolTaskScheduler scheduler = new ThreadPoolTaskScheduler();\n-\t\tscheduler.setPoolSize(traceProperties.getNumExecutorThreads());\n-\t\tscheduler.setThreadNamePrefix(\"gcp-trace-sender\");\n-\t\tscheduler.setDaemon(true);\n-\t\treturn scheduler;\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean(name = \"traceExecutorProvider\")\n-\tpublic ExecutorProvider traceExecutorProvider(@Qualifier(\"traceSenderThreadPool\") ThreadPoolTaskScheduler scheduler) {\n+\tpublic ExecutorProvider traceExecutorProvider(GcpTraceProperties traceProperties, @Qualifier(\"traceSenderThreadPool\") Optional<ThreadPoolTaskScheduler> userProvidedScheduler) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYyODA0NQ=="}, "originalCommit": {"oid": "6814897dc7aad3d68f6ecb59de80a13b4551f487"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2213, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}