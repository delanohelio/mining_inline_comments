{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDMzNjA3", "number": 2302, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo1ODoyNlrODvKzkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMTowNVrODw1TxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzg2NzA0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo1ODoyNlrOGBb7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo1MToxOVrOGBsxLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTI2MA==", "bodyText": "s/projectId/secretId", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404159260", "createdAt": "2020-04-06T14:58:26Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {\n+\n+\t// This prefix string distinguishes whether a property should be queried from Secret Manager or not.\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String secretId;\n+\n+\tprivate final String version;\n+\n+\tSecretManagerPropertyIdentifier(String projectId, String secretId, String version) {\n+\t\tAssert.notNull(projectId, \"Project Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Secret Id of GCP Secret Manager secret must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNTI0Nw==", "bodyText": "Removed file in favor of using SecretVersionName", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404435247", "createdAt": "2020-04-06T22:51:19Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {\n+\n+\t// This prefix string distinguishes whether a property should be queried from Secret Manager or not.\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String secretId;\n+\n+\tprivate final String version;\n+\n+\tSecretManagerPropertyIdentifier(String projectId, String secretId, String version) {\n+\t\tAssert.notNull(projectId, \"Project Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Secret Id of GCP Secret Manager secret must not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTI2MA=="}, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzg2ODQ1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo1ODo0MFrOGBb78g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo1MTowMVrOGBswyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTQ3NA==", "bodyText": "s/projectId/version\nI leave these copy/paste problems all over the place when writing code; that's why I usually test trivial assert conditions -- they catch what I don't.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404159474", "createdAt": "2020-04-06T14:58:40Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {\n+\n+\t// This prefix string distinguishes whether a property should be queried from Secret Manager or not.\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String secretId;\n+\n+\tprivate final String version;\n+\n+\tSecretManagerPropertyIdentifier(String projectId, String secretId, String version) {\n+\t\tAssert.notNull(projectId, \"Project Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Secret Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Version of GCP Secret Manager secret must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNTE0NA==", "bodyText": "Nice catch :)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404435144", "createdAt": "2020-04-06T22:51:01Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {\n+\n+\t// This prefix string distinguishes whether a property should be queried from Secret Manager or not.\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String secretId;\n+\n+\tprivate final String version;\n+\n+\tSecretManagerPropertyIdentifier(String projectId, String secretId, String version) {\n+\t\tAssert.notNull(projectId, \"Project Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Secret Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Version of GCP Secret Manager secret must not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTQ3NA=="}, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzg5NTAxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowNDoyMFrOGBcMxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1MzowMVrOGBndzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2Mzc4MQ==", "bodyText": "Do we want to have both resolvable? The new version is more comprehensive. Or are we doing it for backwards compatibility?\nPerhaps we could automatically configure only the newest property source, and provide a \"legacy\" property for  loading the old one?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404163781", "createdAt": "2020-04-06T15:04:20Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -60,11 +61,22 @@ public void setVersions(Map<String, String> versions) {\n \n \t@Override\n \tpublic PropertySource<?> locate(Environment environment) {\n-\t\treturn new SecretManagerPropertySource(\n-\t\t\t\tSECRET_MANAGER_NAME,\n-\t\t\t\tthis.client,\n-\t\t\t\tthis.projectIdProvider,\n-\t\t\t\tthis.secretsPrefix,\n-\t\t\t\tthis.versions);\n+\t\tCompositePropertySource compositePropertySource = new CompositePropertySource(SECRET_MANAGER_NAME);\n+\n+\t\tcompositePropertySource.addPropertySource(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0ODM2NQ==", "bodyText": "Yeah I wasn't sure how to handle this. I think would prefer if we only have the new version. Maybe if it's ok, I'd like to just remove the existing functionality and replace it with the new method. @meltsufin\nI guess it doesn't make sense for both to co-exist since the legacy one already does the work of downloading all the secrets, and then if the new system exists they might redownload secrets they already loaded into their properties.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404348365", "createdAt": "2020-04-06T19:53:01Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -60,11 +61,22 @@ public void setVersions(Map<String, String> versions) {\n \n \t@Override\n \tpublic PropertySource<?> locate(Environment environment) {\n-\t\treturn new SecretManagerPropertySource(\n-\t\t\t\tSECRET_MANAGER_NAME,\n-\t\t\t\tthis.client,\n-\t\t\t\tthis.projectIdProvider,\n-\t\t\t\tthis.secretsPrefix,\n-\t\t\t\tthis.versions);\n+\t\tCompositePropertySource compositePropertySource = new CompositePropertySource(SECRET_MANAGER_NAME);\n+\n+\t\tcompositePropertySource.addPropertySource(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2Mzc4MQ=="}, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODY4MzMwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMDo0M1rOGBj6_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMDo0M1rOGBj6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDMwMw==", "bodyText": "Consider different prefix usage", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404290303", "createdAt": "2020-04-06T18:10:43Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -11,4 +11,9 @@ spring.cloud.gcp.secretmanager.secret-name-prefix=secrets.\n #spring.cloud.gcp.secretmanager.versions.application-secret=1\n \n # You can directly load the secret into a variable like this example\n-my-application-secret=${secrets.application-secret}\n+# This demonstrates multiple ways of loading the same application secret using template syntax.\n+my-application-secret-1=${secrets.application-secret}\n+my-application-secret-2=${gcp-secret/projects/my-kubernetes-codelab-217414/secrets/application-secret}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODY4NTk1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMTozMVrOGBj8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMTozMVrOGBj8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDc0MA==", "bodyText": "Can also be a project number for projects/ value", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404290740", "createdAt": "2020-04-06T18:11:31Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -11,4 +11,9 @@ spring.cloud.gcp.secretmanager.secret-name-prefix=secrets.\n #spring.cloud.gcp.secretmanager.versions.application-secret=1\n \n # You can directly load the secret into a variable like this example\n-my-application-secret=${secrets.application-secret}\n+# This demonstrates multiple ways of loading the same application secret using template syntax.\n+my-application-secret-1=${secrets.application-secret}\n+my-application-secret-2=${gcp-secret/projects/my-kubernetes-codelab-217414/secrets/application-secret}\n+my-application-secret-3=${gcp-secret/projects/my-kubernetes-codelab-217414/secrets/application-secret/version/latest}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODkwNTM3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToxMjoyMFrOGBmG2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMjo1MTo0MVrOGBsxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjEwNQ==", "bodyText": "I'm not sure you really need this class. Can you just use the existing SecretVersionName?\nI understand you need a place to put the parseFromProperty method somewhere, but maybe for now you can just put it as a static method in SecretManagerAccessPropertySource?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404326105", "createdAt": "2020-04-06T19:12:20Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQzNTM3NQ==", "bodyText": "Good call, done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404435375", "createdAt": "2020-04-06T22:51:41Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjEwNQ=="}, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAwNTM2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozMzo0NlrOGCDxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyNzo0OVrOGDBoKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA==", "bodyText": "Did the Secrets Manager team comment on this prefix? Have you looked into using sm://?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404812208", "createdAt": "2020-04-07T13:33:46Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg2Mjc0MA==", "bodyText": "Colon can't be used in a property name because it means something special in SPEL. I wouldn't want to try to escape the colon either; I think it would look worse with the back slashes.\nAm open to other secret prefixes though.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404862740", "createdAt": "2020-04-07T14:40:40Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMTgzNQ==", "bodyText": "I wonder if we can tap into that \"special meaning\" and configure it for our purpose.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405011835", "createdAt": "2020-04-07T18:09:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjkzMw==", "bodyText": "Colon is like the null-safety operator. If the left side of the colon is evaluated to null, then it defaults to the value on the right side.\nSo if i do gs://blah/blah - it firsts evaluates gs which it finds to be null, then returns the string //blah/blah.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405012933", "createdAt": "2020-04-07T18:11:11Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MDc5MA==", "bodyText": "This is only the case if SPEL is used, such as with @Value, right?\nNotice that with @Value on a Resource it's interpreted as a protocol instead.\nFor example, see the \"gs://\" implementation we have for Storage.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405050790", "createdAt": "2020-04-07T19:14:27Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2Mzk4MA==", "bodyText": "Ok so I found something interesting. It seems like doing the gcp-sm:// works but has slightly unexpected behavior.\n\n\nIf the secret exists, then doing the gcp-sm://path/to/secret works fine. It will load the secret without issue.\n\n\nIf the secret property source returns null for any secret property, then it will fallback to the evaluating the left-hand side and if that is null it will show the right hand side. See in our sample, we have secrets named application-secret, so in our sample, if the secrets are not present, you see that it will render //application-secret instead of the secret value.\n\n\n\nSo I guess if we move forward with throwing an exception in the cases where a secret is missing or the secret URL is not formatted correctly then user will never reach this unexpected behavior.\nWhat are your thoughts?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405163980", "createdAt": "2020-04-07T23:03:45Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzOTYxNA==", "bodyText": "I'm not following fully. Let's discuss.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405539614", "createdAt": "2020-04-08T13:49:42Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4NDY5NQ==", "bodyText": "I'll look a little more into to understand if it's fixable.\nJust to summarize our discussion this morning, using colon has the consequence where if we ever return null for a secret, it will interpret the colon as the null safety operator. This is why it was printing out //application-secret for the secret that did not exist, because the original string was gcp-sm://application-secret; after resolving it to null, it treated the contents of the right of the colon as the \"default value\".", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405684695", "createdAt": "2020-04-08T17:15:13Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY5NDA5OA==", "bodyText": "Ran the code through the debugger, the colon is a special character; i don't think this is configurable. I think we should avoid it to avoid unexpected behavior in the future with null values.\nI would be open to other choices of prefixes, maybe sm| or gcp-sm| these seem to all work. I recall Seth suggested using | as an alternative.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405694098", "createdAt": "2020-04-08T17:30:37Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNTMwMw==", "bodyText": "Should we ever return null though? Is there something wrong with throwing an exception for a property that doesn't exist?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405705303", "createdAt": "2020-04-08T17:50:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxNzIzNQ==", "bodyText": "Yeah I can see the argument where if a user specifies a secret using our syntax, there is the expectation that a secret is there; if it's missing then that's most likely an error and they probably don't want null there.\nI would be comfortable with either approach. We can still throw exception using | too by the way.\nTo me it seems the tradeoff here is purely cosmetic. I.e. if the cosmetic benefits of using : outweighs the risk that we need to change behavior to return null someday.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405717235", "createdAt": "2020-04-08T18:10:20Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyMTYyNQ==", "bodyText": "What's the prefix that the Secret Manager team suggested we use? There's value in being compatible with other libraries for this product. Let's confirm with the product team.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405721625", "createdAt": "2020-04-08T18:17:45Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyNTU3Nw==", "bodyText": "Based on discussion offline, looks like sm:// has precedent of being used, so I just changed it to that for now.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405825577", "createdAt": "2020-04-08T21:27:49Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAxNDQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozNTo0MlrOGCD3HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowNToyMlrOGCZR-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzU5Nw==", "bodyText": "Interesting that this still works.\nMaybe we should log a warning when this method is called?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404813597", "createdAt": "2020-04-07T13:35:42Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MDE3Mw==", "bodyText": "Can't unfortunately. This method gets called by framework code somewhere and will pollute the logs.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404880173", "createdAt": "2020-04-07T15:01:47Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzU5Nw=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAxMjA5Mg==", "bodyText": "Maybe at DEBUG or TRACE level? How often will this be called?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405012092", "createdAt": "2020-04-07T18:09:42Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzU5Nw=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDUzOQ==", "bodyText": "Hmm I don't think it's worth it; feel like it will just add noise. It is called at least 10 times per test run in the integration tests.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405164539", "createdAt": "2020-04-07T23:05:22Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzU5Nw=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAyMDY1OnYy", "diffSide": "LEFT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozNzoxMVrOGCD7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowNDowOVrOGCICYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNDYwNQ==", "bodyText": "Would it be so bad to let users overwrite the prefix?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404814605", "createdAt": "2020-04-07T13:37:11Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerProperties.java", "diffHunk": "@@ -39,17 +36,6 @@\n \t */\n \tprivate String projectId;\n \n-\t/**\n-\t * Defines a prefix String that will be prepended to the environment property names\n-\t * of secrets in Secret Manager.\n-\t */\n-\tprivate String secretNamePrefix = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MjAxOQ==", "bodyText": "I think it can only hurt users if they choose a bad prefix. It needs to be a unique/special string that lets us exit early so we know that it's definitely not a property we need to parse and attempt to query. So would prefer not leaving it in the hands of users.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404882019", "createdAt": "2020-04-07T15:04:09Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerProperties.java", "diffHunk": "@@ -39,17 +36,6 @@\n \t */\n \tprivate String projectId;\n \n-\t/**\n-\t * Defines a prefix String that will be prepended to the environment property names\n-\t * of secrets in Secret Manager.\n-\t */\n-\tprivate String secretNamePrefix = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNDYwNQ=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjAyNTUxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozODoxOFrOGCD-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowNTo1OVrOGCZSsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNTQxNw==", "bodyText": "Wouldn't this be considered an error if we got here? Not sure we should swallow the exception.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404815417", "createdAt": "2020-04-07T13:38:18Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDcyMw==", "bodyText": "Sure, let's throw exception, this might be good for supporting the gcp-sm:// prefix per our discussion above.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405164723", "createdAt": "2020-04-07T23:05:59Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNTQxNw=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA0MDY2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0MTozMlrOGCEHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowNjowNVrOGCZS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNzc3NA==", "bodyText": "Log an error or throw exception? Invalid format? etc.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404817774", "createdAt": "2020-04-07T13:41:32Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {\n+\t\tif (!property.startsWith(GCP_SECRET_PREFIX)) {\n+\t\t\treturn null;\n \t\t}\n \n-\t\treturn secretsMap;\n-\t}\n+\t\tString resourcePath = property.substring(GCP_SECRET_PREFIX.length());\n+\t\tString[] tokens = resourcePath.split(\"/\");\n \n-\tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tString projectId,\n-\t\t\tString secretId,\n-\t\t\tMap<String, String> versions) {\n+\t\tString projectId = projectIdProvider.getProjectId();\n+\t\tString secretId = null;\n+\t\tString version = \"latest\";\n \n-\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : LATEST_VERSION_STRING;\n+\t\tif (tokens.length == 1) {\n+\t\t\t// property is form \"gcp-secret/<secret-id>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t}\n+\t\telse if (tokens.length == 2) {\n+\t\t\t// property is form \"gcp-secret/<secret-id>/<version>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t\tversion = tokens[1];\n+\t\t}\n+\t\telse if (tokens.length == 3) {\n+\t\t\t// property is form \"gcp-secret/<project-id>/<secret-id>/<version-id>\"\n+\t\t\tprojectId = tokens[0];\n+\t\t\tsecretId = tokens[1];\n+\t\t\tversion = tokens[2];\n+\t\t}\n+\t\telse if (tokens.length == 4\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")) {\n+\t\t\t// property is form \"gcp-secret/projects/<project-id>/secrets/<secret-id>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t}\n+\t\telse if (tokens.length == 6\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")\n+\t\t\t\t&& tokens[4].equals(\"versions\")) {\n+\t\t\t// property is form \"gcp-secret/projects/<project-id>/secrets/<secret-id>/versions/<version>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t\tversion = tokens[5];\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDc1Mw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405164753", "createdAt": "2020-04-07T23:06:05Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {\n+\t\tif (!property.startsWith(GCP_SECRET_PREFIX)) {\n+\t\t\treturn null;\n \t\t}\n \n-\t\treturn secretsMap;\n-\t}\n+\t\tString resourcePath = property.substring(GCP_SECRET_PREFIX.length());\n+\t\tString[] tokens = resourcePath.split(\"/\");\n \n-\tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tString projectId,\n-\t\t\tString secretId,\n-\t\t\tMap<String, String> versions) {\n+\t\tString projectId = projectIdProvider.getProjectId();\n+\t\tString secretId = null;\n+\t\tString version = \"latest\";\n \n-\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : LATEST_VERSION_STRING;\n+\t\tif (tokens.length == 1) {\n+\t\t\t// property is form \"gcp-secret/<secret-id>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t}\n+\t\telse if (tokens.length == 2) {\n+\t\t\t// property is form \"gcp-secret/<secret-id>/<version>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t\tversion = tokens[1];\n+\t\t}\n+\t\telse if (tokens.length == 3) {\n+\t\t\t// property is form \"gcp-secret/<project-id>/<secret-id>/<version-id>\"\n+\t\t\tprojectId = tokens[0];\n+\t\t\tsecretId = tokens[1];\n+\t\t\tversion = tokens[2];\n+\t\t}\n+\t\telse if (tokens.length == 4\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")) {\n+\t\t\t// property is form \"gcp-secret/projects/<project-id>/secrets/<secret-id>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t}\n+\t\telse if (tokens.length == 6\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")\n+\t\t\t\t&& tokens[4].equals(\"versions\")) {\n+\t\t\t// property is form \"gcp-secret/projects/<project-id>/secrets/<secret-id>/versions/<version>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t\tversion = tokens[5];\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNzc3NA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA1ODM3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NToxN1rOGCESMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowNjoxMFrOGCZS8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMDUyOQ==", "bodyText": "Maybe add a test for just \"gcp-secret/\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404820529", "createdAt": "2020-04-07T13:45:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {\n+\n+\tprivate static final GcpProjectIdProvider DEFAULT_PROJECT_ID_PROVIDER = () -> \"defaultProject\";\n+\n+\t@Test\n+\tpublic void testNonSecret() {\n+\t\tString property = \"spring.cloud.datasource\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_secretId() {\n+\t\tString property = \"gcp-secret/the-secret\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDc4Nw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405164787", "createdAt": "2020-04-07T23:06:10Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {\n+\n+\tprivate static final GcpProjectIdProvider DEFAULT_PROJECT_ID_PROVIDER = () -> \"defaultProject\";\n+\n+\t@Test\n+\tpublic void testNonSecret() {\n+\t\tString property = \"spring.cloud.datasource\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_secretId() {\n+\t\tString property = \"gcp-secret/the-secret\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMDUyOQ=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA2MjY4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NjoxN1rOGCEVCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowNjoxNVrOGCZTCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTI1OA==", "bodyText": "The name doesn't match the class SecretManagerPropertySource.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404821258", "createdAt": "2020-04-07T13:46:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDgwOA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405164808", "createdAt": "2020-04-07T23:06:15Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTI1OA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA2NzIxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0NzoxM1rOGCEX6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowNzo1NlrOGCZVNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk5NA==", "bodyText": "Visible for testing?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404821994", "createdAt": "2020-04-07T13:47:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NTM2NQ==", "bodyText": "Added comment //visible for testing; can't add annotation though, it's guava.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405165365", "createdAt": "2020-04-07T23:07:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk5NA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjA3NzMxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0OToyM1rOGCEeYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzowOToyNVrOGCZXMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzY0OA==", "bodyText": "Missing a test for getSecretPayload.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404823648", "createdAt": "2020-04-07T13:49:23Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {\n+\n+\tprivate static final GcpProjectIdProvider DEFAULT_PROJECT_ID_PROVIDER = () -> \"defaultProject\";\n+\n+\t@Test\n+\tpublic void testNonSecret() {\n+\t\tString property = \"spring.cloud.datasource\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_secretId() {\n+\t\tString property = \"gcp-secret/the-secret\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"defaultProject\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"latest\");\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_projectSecretId() {\n+\t\tString property = \"gcp-secret/the-secret/the-version\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"defaultProject\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"the-version\");\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_projectSecretIdVersion() {\n+\t\tString property = \"gcp-secret/my-project/the-secret/2\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"2\");\n+\t}\n+\n+\t@Test\n+\tpublic void testLongProperty_projectSecret() {\n+\t\tString property = \"gcp-secret/projects/my-project/secrets/the-secret\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"latest\");\n+\t}\n+\n+\t@Test\n+\tpublic void testLongProperty_projectSecretVersion() {\n+\t\tString property = \"gcp-secret/projects/my-project/secrets/the-secret/versions/3\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"3\");\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NTg3Mw==", "bodyText": "We'll cover this directly in your configuration tests.\nI don't think it's worth making it non-private to write tests for it unlike the parseProperty method which had a lot more code.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405165873", "createdAt": "2020-04-07T23:09:25Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {\n+\n+\tprivate static final GcpProjectIdProvider DEFAULT_PROJECT_ID_PROVIDER = () -> \"defaultProject\";\n+\n+\t@Test\n+\tpublic void testNonSecret() {\n+\t\tString property = \"spring.cloud.datasource\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_secretId() {\n+\t\tString property = \"gcp-secret/the-secret\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"defaultProject\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"latest\");\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_projectSecretId() {\n+\t\tString property = \"gcp-secret/the-secret/the-version\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"defaultProject\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"the-version\");\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_projectSecretIdVersion() {\n+\t\tString property = \"gcp-secret/my-project/the-secret/2\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"2\");\n+\t}\n+\n+\t@Test\n+\tpublic void testLongProperty_projectSecret() {\n+\t\tString property = \"gcp-secret/projects/my-project/secrets/the-secret\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"latest\");\n+\t}\n+\n+\t@Test\n+\tpublic void testLongProperty_projectSecretVersion() {\n+\t\tString property = \"gcp-secret/projects/my-project/secrets/the-secret/versions/3\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"3\");\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzY0OA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU5Mjc2OnYy", "diffSide": "LEFT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0NzowM1rOGCwDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0NDoxOFrOGC30cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNzY4Ng==", "bodyText": "Docs need to be updated following this change.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405537686", "createdAt": "2020-04-08T13:47:03Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -48,7 +49,7 @@\n @Configuration\n @EnableConfigurationProperties(GcpSecretManagerProperties.class)\n @ConditionalOnClass(SecretManagerServiceClient.class)\n-@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.bootstrap.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f00e1c36d10185617d3f4c675ed2af477e19dd98"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2NDg4Mg==", "bodyText": "Done, updated docs.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405664882", "createdAt": "2020-04-08T16:44:18Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -48,7 +49,7 @@\n @Configuration\n @EnableConfigurationProperties(GcpSecretManagerProperties.class)\n @ConditionalOnClass(SecretManagerServiceClient.class)\n-@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.bootstrap.enabled\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNzY4Ng=="}, "originalCommit": {"oid": "f00e1c36d10185617d3f4c675ed2af477e19dd98"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzY3OTYyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMjo1NFrOGC6wLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxMzowNFrOGDBLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjk0Mg==", "bodyText": "Unused.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405712942", "createdAt": "2020-04-08T18:02:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -48,7 +49,7 @@\n @Configuration\n @EnableConfigurationProperties(GcpSecretManagerProperties.class)\n @ConditionalOnClass(SecretManagerServiceClient.class)\n-@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.bootstrap.enabled\")\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n public class GcpSecretManagerBootstrapConfiguration {\n \n \tprivate final GcpSecretManagerProperties properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODI4Mg==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405818282", "createdAt": "2020-04-08T21:13:04Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -48,7 +49,7 @@\n @Configuration\n @EnableConfigurationProperties(GcpSecretManagerProperties.class)\n @ConditionalOnClass(SecretManagerServiceClient.class)\n-@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.bootstrap.enabled\")\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n public class GcpSecretManagerBootstrapConfiguration {\n \n \tprivate final GcpSecretManagerProperties properties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjk0Mg=="}, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzcxMTc1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxMTo1N1rOGC7Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToyMTowNVrOGDBbaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODE3MQ==", "bodyText": "Should this move to SecretManagerTemplate? We probably want to reconsider all those additional methods for specifying project and version and use the fully qualified secret identifiers instead.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405718171", "createdAt": "2020-04-08T18:11:57Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,129 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\treturn response.getPayload().getData();\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\t// Visible for Testing\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgyMjMxMw==", "bodyText": "Done; I added these methods for getSecret, but for createSecret and secretExists it doesn't quite fit since those methods can accept project and secretId as valid inputs but are not fixed to a version.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405822313", "createdAt": "2020-04-08T21:21:05Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,129 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\treturn response.getPayload().getData();\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\t// Visible for Testing\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODE3MQ=="}, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzcyMTU0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxNDozNlrOGC7K5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMToxMzoxMVrOGDBL4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxOTc4MQ==", "bodyText": "Since now there is a single table of properties, we should move it up to be right under the dependency section, just like other chapters we have.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405719781", "createdAt": "2020-04-08T18:14:36Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -80,12 +99,14 @@ The auto-configured `SecretManagerTemplate` bean can be customized using configu\n By default, Spring Cloud GCP Secret Manager will authenticate using Application Default Credentials.\n This can be overridden using the authentication properties.\n \n+NOTE: All of the below settings must be specified in a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[`bootstrap.properties`] (or `bootstrap.yaml`) file which is the properties file used to configure settings for bootstrap-phase Spring configuration.\n+\n |===\n | Name | Description | Required | Default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgxODMzOA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405818338", "createdAt": "2020-04-08T21:13:11Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -80,12 +99,14 @@ The auto-configured `SecretManagerTemplate` bean can be customized using configu\n By default, Spring Cloud GCP Secret Manager will authenticate using Application Default Credentials.\n This can be overridden using the authentication properties.\n \n+NOTE: All of the below settings must be specified in a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[`bootstrap.properties`] (or `bootstrap.yaml`) file which is the properties file used to configure settings for bootstrap-phase Spring configuration.\n+\n |===\n | Name | Description | Required | Default value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxOTc4MQ=="}, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjMwMzk2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NzoxNFrOGDnTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MToyMlrOGEC04g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjg2Ng==", "bodyText": "Do we really need a separate method for getting by URI?\nWe can easily detect that something is a URI and do it all in the existing getSecretString(String).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406442866", "createdAt": "2020-04-09T19:57:14Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -78,15 +94,13 @@\n \tString getSecretString(String secretId);\n \n \t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n+\t * Gets the secret payload of the secret looked up by {@code secretUri}.\n \t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param secretUri the Uri string identifying the secret.\n+\t * \t\tSee the javadoc for {@link SecretManagerOperations} for a summary of the URI syntax.\n \t * @return The secret payload as String\n \t */\n-\tString getSecretString(String secretId, String versionName);\n+\tString getSecretStringByUri(String secretUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5Mzc5NA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406893794", "createdAt": "2020-04-10T18:51:22Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -78,15 +94,13 @@\n \tString getSecretString(String secretId);\n \n \t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n+\t * Gets the secret payload of the secret looked up by {@code secretUri}.\n \t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param secretUri the Uri string identifying the secret.\n+\t * \t\tSee the javadoc for {@link SecretManagerOperations} for a summary of the URI syntax.\n \t * @return The secret payload as String\n \t */\n-\tString getSecretString(String secretId, String versionName);\n+\tString getSecretStringByUri(String secretUri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjg2Ng=="}, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjMwNDQ4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NzoyNFrOGDnTyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MToyOVrOGEC1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjk1NA==", "bodyText": "Same here.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406442954", "createdAt": "2020-04-09T19:57:24Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -97,38 +111,13 @@\n \tbyte[] getSecretBytes(String secretId);\n \n \t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n+\t * Gets the secret payload of the secret looked up by {@code secretUri}.\n \t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param secretUri the Uri string identifying the secret.\n+\t * \t\tSee the javadoc for {@link SecretManagerOperations} for a summary of the URI syntax.\n \t * @return The secret payload as byte[]\n \t */\n-\tbyte[] getSecretBytes(String secretId, String versionName);\n-\n-\t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n-\t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-\t * @return The secret payload as {@link ByteString}\n-\t */\n-\tByteString getSecretByteString(String secretId, String versionName);\n-\n-\t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName} for a specific {@code projectId}.\n-\t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-\t * @param projectId unique identifier of your project.\n-\t * @return The secret payload as {@link ByteString}\n-\t */\n-\tByteString getSecretByteString(String secretId, String versionName, String projectId);\n+\tbyte[] getSecretBytesByUri(String secretUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5Mzg0Mw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406893843", "createdAt": "2020-04-10T18:51:29Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -97,38 +111,13 @@\n \tbyte[] getSecretBytes(String secretId);\n \n \t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n+\t * Gets the secret payload of the secret looked up by {@code secretUri}.\n \t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param secretUri the Uri string identifying the secret.\n+\t * \t\tSee the javadoc for {@link SecretManagerOperations} for a summary of the URI syntax.\n \t * @return The secret payload as byte[]\n \t */\n-\tbyte[] getSecretBytes(String secretId, String versionName);\n-\n-\t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n-\t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-\t * @return The secret payload as {@link ByteString}\n-\t */\n-\tByteString getSecretByteString(String secretId, String versionName);\n-\n-\t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName} for a specific {@code projectId}.\n-\t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-\t * @param projectId unique identifier of your project.\n-\t * @return The secret payload as {@link ByteString}\n-\t */\n-\tByteString getSecretByteString(String secretId, String versionName, String projectId);\n+\tbyte[] getSecretBytesByUri(String secretUri);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjk1NA=="}, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjMxNDg2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowMDozOFrOGDnaSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxODo1MTozM1rOGEC1Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NDYxOA==", "bodyText": "Can we wire in the template and use it here?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406444618", "createdAt": "2020-04-09T20:00:38Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n+ *\n+ * @author Daniel Zou\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ * @since 1.2.2\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5Mzg2Ng==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406893866", "createdAt": "2020-04-10T18:51:33Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n+ *\n+ * @author Daniel Zou\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ * @since 1.2.2\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NDYxOA=="}, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTMxNjUyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertyUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMTowNVrOGEDD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMzo1NlrOGEDICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NzYzOQ==", "bodyText": "Assert.hasText instead maybe?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406897639", "createdAt": "2020-04-10T19:01:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertyUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Utilities for parsing Secret Manager properties.\n+ *\n+ * @author Daniel Zou\n+ */\n+final class SecretManagerPropertyUtils {\n+\n+\tprivate static final String GCP_SECRET_PREFIX = \"sm://\";\n+\n+\tprivate SecretManagerPropertyUtils() { }\n+\n+\tstatic SecretVersionName getSecretVersionName(String input, GcpProjectIdProvider projectIdProvider) {\n+\t\tif (!input.startsWith(GCP_SECRET_PREFIX)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tString resourcePath = input.substring(GCP_SECRET_PREFIX.length());\n+\t\tString[] tokens = resourcePath.split(\"/\");\n+\n+\t\tString projectId = projectIdProvider.getProjectId();\n+\t\tString secretId = null;\n+\t\tString version = \"latest\";\n+\n+\t\tif (tokens.length == 1) {\n+\t\t\t// property is form \"sm://<secret-id>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t}\n+\t\telse if (tokens.length == 2) {\n+\t\t\t// property is form \"sm://<secret-id>/<version>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t\tversion = tokens[1];\n+\t\t}\n+\t\telse if (tokens.length == 3) {\n+\t\t\t// property is form \"sm://<project-id>/<secret-id>/<version-id>\"\n+\t\t\tprojectId = tokens[0];\n+\t\t\tsecretId = tokens[1];\n+\t\t\tversion = tokens[2];\n+\t\t}\n+\t\telse if (tokens.length == 4\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")) {\n+\t\t\t// property is form \"sm://projects/<project-id>/secrets/<secret-id>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t}\n+\t\telse if (tokens.length == 6\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")\n+\t\t\t\t&& tokens[4].equals(\"versions\")) {\n+\t\t\t// property is form \"sm://projects/<project-id>/secrets/<secret-id>/versions/<version>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t\tversion = tokens[5];\n+\t\t}\n+\t\telse {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Unrecognized format for specifying a GCP Secret Manager secret: \" + input);\n+\t\t}\n+\n+\t\tAssert.isTrue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a81143bbd26db0ae7760e8d9aa3147565232f034"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5ODY5OA==", "bodyText": "Gotcha, i'll change it.\nLet me submit this and i'll send a followup cleanup PR; some other stuff I want to cleanup too.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406898698", "createdAt": "2020-04-10T19:03:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertyUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Utilities for parsing Secret Manager properties.\n+ *\n+ * @author Daniel Zou\n+ */\n+final class SecretManagerPropertyUtils {\n+\n+\tprivate static final String GCP_SECRET_PREFIX = \"sm://\";\n+\n+\tprivate SecretManagerPropertyUtils() { }\n+\n+\tstatic SecretVersionName getSecretVersionName(String input, GcpProjectIdProvider projectIdProvider) {\n+\t\tif (!input.startsWith(GCP_SECRET_PREFIX)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tString resourcePath = input.substring(GCP_SECRET_PREFIX.length());\n+\t\tString[] tokens = resourcePath.split(\"/\");\n+\n+\t\tString projectId = projectIdProvider.getProjectId();\n+\t\tString secretId = null;\n+\t\tString version = \"latest\";\n+\n+\t\tif (tokens.length == 1) {\n+\t\t\t// property is form \"sm://<secret-id>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t}\n+\t\telse if (tokens.length == 2) {\n+\t\t\t// property is form \"sm://<secret-id>/<version>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t\tversion = tokens[1];\n+\t\t}\n+\t\telse if (tokens.length == 3) {\n+\t\t\t// property is form \"sm://<project-id>/<secret-id>/<version-id>\"\n+\t\t\tprojectId = tokens[0];\n+\t\t\tsecretId = tokens[1];\n+\t\t\tversion = tokens[2];\n+\t\t}\n+\t\telse if (tokens.length == 4\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")) {\n+\t\t\t// property is form \"sm://projects/<project-id>/secrets/<secret-id>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t}\n+\t\telse if (tokens.length == 6\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")\n+\t\t\t\t&& tokens[4].equals(\"versions\")) {\n+\t\t\t// property is form \"sm://projects/<project-id>/secrets/<secret-id>/versions/<version>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t\tversion = tokens[5];\n+\t\t}\n+\t\telse {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Unrecognized format for specifying a GCP Secret Manager secret: \" + input);\n+\t\t}\n+\n+\t\tAssert.isTrue(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NzYzOQ=="}, "originalCommit": {"oid": "a81143bbd26db0ae7760e8d9aa3147565232f034"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2338, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}