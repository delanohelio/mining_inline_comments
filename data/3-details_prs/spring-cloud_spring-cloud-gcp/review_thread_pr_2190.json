{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzI1MjQz", "number": 2190, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozOTowNVrODe2jUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNjo1MlrODe7OwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc3NjQ5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozOTowNVrOFoN5nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo0MToyOFrOFoUjcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNTEwMQ==", "bodyText": "This sounds more like the the refdoc.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377715101", "createdAt": "2020-02-11T15:39:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNDExNA==", "bodyText": "Removed this.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377824114", "createdAt": "2020-02-11T18:41:28Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNTEwMQ=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc4OTYxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0MjowM1rOFoOBog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyMjowNFrOFoV7dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzE1NA==", "bodyText": "@Value is usually used outside of the @ConfigurationProperties. I would instead demonstrate the use of a prefix like in the spring-cloud-gcp-config-sample.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377717154", "createdAt": "2020-02-11T15:42:03Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzUxNw==", "bodyText": "Since you no longer use the @ConfigurationProperties, this section needs to be amended.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377837517", "createdAt": "2020-02-11T19:05:25Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzE1NA=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjY0Ng==", "bodyText": "Done; instead of duplicating code snippet I just get a general summary of sample contents.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377846646", "createdAt": "2020-02-11T19:22:04Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzE1NA=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc5MjIxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0MjozNlrOFoODJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyMjowOVrOFoV7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzU0MA==", "bodyText": "Can you show the gcloud command to do this?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377717540", "createdAt": "2020-02-11T15:42:36Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjY5OQ==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377846699", "createdAt": "2020-02-11T19:22:09Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzU0MA=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjc5NzQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0Mzo0OVrOFoOGew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODozNzo1NVrOFoUcMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxODM5NQ==", "bodyText": "Maybe do something like secrets.password, which will map to MyAppProperties.password.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377718395", "createdAt": "2020-02-11T15:43:49Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.\n+\n+3. Authenticate in one of two ways:\n+\n+a. Use the Google Cloud SDK to https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login[authenticate with application default credentials].\n+This method is convenient but should only be used in local development.\n+b. https://cloud.google.com/iam/docs/creating-managing-service-accounts[Create a new service account], download its private key and point the `spring.cloud.gcp.secretmanager.credentials.location` property to it.\n++\n+Such as: `spring.cloud.gcp.secretmanager.credentials.location=file:/path/to/creds.json`\n+\n+4. Using the https://console.cloud.google.com/security/secret-manager[Secret Manager UI in Cloud Console], create a new secret named `application-secret` and set it to any value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgwMTE3OQ==", "bodyText": "It turns out that secret names stored in Secret Manager can only contain English letters (A-Z), numbers (0-9), dashes (-), and underscores (_); so storing secrets.password is not possible.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377801179", "createdAt": "2020-02-11T17:57:50Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.\n+\n+3. Authenticate in one of two ways:\n+\n+a. Use the Google Cloud SDK to https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login[authenticate with application default credentials].\n+This method is convenient but should only be used in local development.\n+b. https://cloud.google.com/iam/docs/creating-managing-service-accounts[Create a new service account], download its private key and point the `spring.cloud.gcp.secretmanager.credentials.location` property to it.\n++\n+Such as: `spring.cloud.gcp.secretmanager.credentials.location=file:/path/to/creds.json`\n+\n+4. Using the https://console.cloud.google.com/security/secret-manager[Secret Manager UI in Cloud Console], create a new secret named `application-secret` and set it to any value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxODM5NQ=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyMjI1Nw==", "bodyText": "I made the sample demonstrate the namespace setting using secrets.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377822257", "createdAt": "2020-02-11T18:37:55Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.\n+\n+3. Authenticate in one of two ways:\n+\n+a. Use the Google Cloud SDK to https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login[authenticate with application default credentials].\n+This method is convenient but should only be used in local development.\n+b. https://cloud.google.com/iam/docs/creating-managing-service-accounts[Create a new service account], download its private key and point the `spring.cloud.gcp.secretmanager.credentials.location` property to it.\n++\n+Such as: `spring.cloud.gcp.secretmanager.credentials.location=file:/path/to/creds.json`\n+\n+4. Using the https://console.cloud.google.com/security/secret-manager[Secret Manager UI in Cloud Console], create a new secret named `application-secret` and set it to any value.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxODM5NQ=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjgwMzQzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NToxNFrOFoOKMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NToxNFrOFoOKMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTM0NQ==", "bodyText": "You can also demonstrate the use of @Value here, just to inject a String property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377719345", "createdAt": "2020-02-11T15:45:14Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.Environment;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WebController {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzU0MTU1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNjoyNVrOFoVZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyMToyMlrOFoV5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODA1MQ==", "bodyText": "Why \"also\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377838051", "createdAt": "2020-02-11T19:06:25Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.env.Environment;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WebController {\n+\n+\t@Autowired\n+\tprivate Environment environment;\n+\n+\t@Autowired\n+\tprivate MyAppProperties properties;\n+\n+\t// Application secrets can also be accessed using @Value and passing in the secret name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjIyMg==", "bodyText": "Done, removed.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377846222", "createdAt": "2020-02-11T19:21:22Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.env.Environment;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WebController {\n+\n+\t@Autowired\n+\tprivate Environment environment;\n+\n+\t@Autowired\n+\tprivate MyAppProperties properties;\n+\n+\t// Application secrets can also be accessed using @Value and passing in the secret name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODA1MQ=="}, "originalCommit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzU0MzA1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNjo1MlrOFoVa4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyMToyOVrOFoV6LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODMwNA==", "bodyText": "Mention that it's optional?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377838304", "createdAt": "2020-02-11T19:06:52Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+# This setting adds a prefix to your secret names that get injected into", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NjMxNg==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377846316", "createdAt": "2020-02-11T19:21:29Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+# This setting adds a prefix to your secret names that get injected into", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODMwNA=="}, "originalCommit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2237, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}