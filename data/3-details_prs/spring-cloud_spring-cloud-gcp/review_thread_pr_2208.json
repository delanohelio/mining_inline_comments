{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDQ3OTI2", "number": 2208, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMTo1MFrODhsadQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0OTowNlrODi2MWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU3MjY5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMTo1MFrOFskrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMTo1MFrOFskrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MjUxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2017-2018 the original author or authors.\n          \n          \n            \n             * Copyright 2017-2020 the original author or authors.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r382282512", "createdAt": "2020-02-20T22:01:50Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2017-2018 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e0809b48a791d7c79f14a606537e214decce9e8"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU3MzI4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMjowM1rOFskrcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMjowM1rOFskrcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MjYxMQ==", "bodyText": "Please add @author.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r382282611", "createdAt": "2020-02-20T22:02:03Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2017-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.spanner.Value;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}.\n+ * It should be used when the database column has a Timestamp type with option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage when the PENDING_COMMIT_TIMESTAMP should be stored into this field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e0809b48a791d7c79f14a606537e214decce9e8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjYyNTU4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyMToxNlrOFslMBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyNzo0N1rOFslXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MDk1MQ==", "bodyText": "Do we really need this new converter? Seems like it would be the subject of another PR.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r382290951", "createdAt": "2020-02-20T22:21:16Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -143,17 +146,44 @@ public LocalDateTime convert(Timestamp timestamp) {\n \t// @formatter:off\n \tpublic static final Converter<java.util.Date, Timestamp>\n \t\t\tDATE_TIMESTAMP_CONVERTER = new Converter<java.util.Date, Timestamp>() {\n+\t\tfinal java.util.Date commitTimestamp = CommitTimestamp.of(java.util.Date.class);\n \t\t// @formatter:on\n \t\t@Nullable\n \t\t@Override\n \t\tpublic Timestamp convert(java.util.Date date) {\n-\t\t\tlong time = date.getTime();\n-\t\t\tlong secs = Math.floorDiv(time, 1000L);\n-\t\t\tint nanos = Math.toIntExact((time - secs * 1000L) * 1000000L);\n-\t\t\treturn Timestamp.ofTimeSecondsAndNanos(secs, nanos);\n+\t\t\tif (commitTimestamp == date) {\n+\t\t\t\treturn Value.COMMIT_TIMESTAMP;\n+\t\t\t}\n+\t\t\treturn toTimestamp(date);\n \t\t}\n \t};\n \n+\t/**\n+\t * A converter from {@link java.util.Date} to the Spanner timestamp type.\n+\t */\n+\t// @formatter:off\n+\tpublic static final Converter<java.sql.Date, Timestamp>\n+\t\t\tSQL_DATE_TIMESTAMP_CONVERTER = new Converter<java.sql.Date, Timestamp>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e0809b48a791d7c79f14a606537e214decce9e8"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5Mzc3Ng==", "bodyText": "There is some problem with such \"code\" converters - no one can overwrite them because of initialization restrictions...\nBasically I agree, I'll think about how to improve it better.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r382293776", "createdAt": "2020-02-20T22:27:47Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -143,17 +146,44 @@ public LocalDateTime convert(Timestamp timestamp) {\n \t// @formatter:off\n \tpublic static final Converter<java.util.Date, Timestamp>\n \t\t\tDATE_TIMESTAMP_CONVERTER = new Converter<java.util.Date, Timestamp>() {\n+\t\tfinal java.util.Date commitTimestamp = CommitTimestamp.of(java.util.Date.class);\n \t\t// @formatter:on\n \t\t@Nullable\n \t\t@Override\n \t\tpublic Timestamp convert(java.util.Date date) {\n-\t\t\tlong time = date.getTime();\n-\t\t\tlong secs = Math.floorDiv(time, 1000L);\n-\t\t\tint nanos = Math.toIntExact((time - secs * 1000L) * 1000000L);\n-\t\t\treturn Timestamp.ofTimeSecondsAndNanos(secs, nanos);\n+\t\t\tif (commitTimestamp == date) {\n+\t\t\t\treturn Value.COMMIT_TIMESTAMP;\n+\t\t\t}\n+\t\t\treturn toTimestamp(date);\n \t\t}\n \t};\n \n+\t/**\n+\t * A converter from {@link java.util.Date} to the Spanner timestamp type.\n+\t */\n+\t// @formatter:off\n+\tpublic static final Converter<java.sql.Date, Timestamp>\n+\t\t\tSQL_DATE_TIMESTAMP_CONVERTER = new Converter<java.sql.Date, Timestamp>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MDk1MQ=="}, "originalCommit": {"oid": "3e0809b48a791d7c79f14a606537e214decce9e8"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjYyNzAyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyMTo0MlrOFslM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjoyMTo0MlrOFslM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5MTE3MQ==", "bodyText": "Same for this one.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r382291171", "createdAt": "2020-02-20T22:21:42Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -167,17 +197,32 @@ public Timestamp convert(java.util.Date date) {\n \t\t\t\t\treturn timestamp.toDate();\n \t\t\t\t}\n \t\t\t};\n+\t/**\n+\t * A converter from the Spanner timestamp type to {@link java.util.Date}.\n+\t */\n+\t// @formatter:off\n+\tpublic static final Converter<Timestamp, java.sql.Date> TIMESTAMP_SQL_DATE_CONVERTER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e0809b48a791d7c79f14a606537e214decce9e8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMxMTEyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowMDoxNFrOFuRSsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo0MDo0M1rOFuSnOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjEyOQ==", "bodyText": "I don't think this class should be abstract, you never use it for inheritance.\nAlso, it should not be named CommitTimestampSupplier as it does not supply anything.\nIt seems that CommitTimestampDecorator would be a more appropriate name.\nDoes it make sense?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384062129", "createdAt": "2020-02-25T19:00:14Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.cloud.Timestamp;\n+import com.google.cloud.spanner.Value;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import static org.springframework.core.GenericTypeResolver.resolveTypeArgument;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link CommitTimestampSupplier}.\n+ * It should be used when a database column has type of Timestamp with an option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage in runtime when the PENDING_COMMIT_TIMESTAMP should be stored into this field.\n+ * The method {@link #register(CommitTimestampSupplier)} should be used to add a custom \"to timestamp\" converter\n+ * to the list of converters that support this \"CommitTimestamp\" feature.\n+ *\n+ * @author Roman Solodovnichenko\n+ *\n+ * @since 1.3.0\n+ */\n+public final class CommitTimestamp {\n+\tprivate static final Map<Object, Object> VALUES = new ConcurrentHashMap<>();\n+\n+\tstatic {\n+\t\tVALUES.put(com.google.cloud.Timestamp.class, Value.COMMIT_TIMESTAMP);\n+\t}\n+\n+\tprivate CommitTimestamp() {\n+\t}\n+\n+\t/**\n+\t * Creates a value for {@link Value#COMMIT_TIMESTAMP}.\n+\t * @param timestampClass a class to be presented as a Timestamp in the database column.\n+\t * @param <T> type of the class. Supported by-default types are:\n+\t * \t{@link com.google.cloud.Timestamp}, {@link java.sql.Timestamp}, {@link java.time.LocalDateTime},\n+\t * \t{@link java.time.Instant}, {@link java.util.Date}.\n+\t * @return a value that will be converted to {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}\n+\t * @throws IllegalArgumentException when the {@code timestampClass} was not registered\n+\t * \t with the method {@link #register(CommitTimestampSupplier)}.\n+\t * @see #register(CommitTimestampSupplier)\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T of(Class<T> timestampClass) throws IllegalArgumentException {\n+\t\treturn (T) VALUES.computeIfAbsent(timestampClass, key -> {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"\\\"CommitTimestamp\\\" is not supported for the type %s\", key));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * The method should be used when we need to register a custom \"to timestamp\" converter as {@link CommitTimestampSupplier}.\n+\t * @param converter the {@link Converter} to register as CommitTimestampSupplier\n+\t * @param <S> the \"source\" type of {@link Converter}\n+\t * @param <C> the type if {@link CommitTimestampSupplier}\n+\t * @return registered converter.\n+\t * @throws IllegalStateException when the typed argument of the {@code converter} already registered.\n+\t *   It is impossible to overwrite existing registrations because it could affect the core converters\n+\t *   of the {@link SpannerConverters} class.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <S, C extends CommitTimestampSupplier<S>> C register(C converter) throws IllegalStateException {\n+\t\tfinal Class<S> argument = (Class<S>) resolveTypeArgument(converter.getClass(), CommitTimestampSupplier.class);\n+\t\tVALUES.compute(argument, (key, old) -> {\n+\t\t\tif (old == null) {\n+\t\t\t\treturn converter.commitTimestamp;\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\tString.format(\"The value %s already registered as \\\"CommitTimestamp\\\" for the type %s\", old, key));\n+\t\t});\n+\t\treturn converter;\n+\t}\n+\n+\t/**\n+\t * A specific template of \"to timestamp\" converter that any custom converter should follow\n+\t * to support \"CommitTimestamp\" feature.\n+\t * @param <S> a source type of converter.\n+\t */\n+\tpublic static abstract class CommitTimestampSupplier<S> implements Converter<S, Timestamp> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NzQ3Ng==", "bodyText": "A better name is CommitTimestampConverter.\nIt should be abstract, yes, I've answered about it in the next comment.\nWe should mandatory extend it with final sources and target types - otherwise  org.springframework.data.convert.CustomConversions.StoreConversions#getRegistrationFor will not resolve TypeArguments of it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384077476", "createdAt": "2020-02-25T19:29:03Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.cloud.Timestamp;\n+import com.google.cloud.spanner.Value;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import static org.springframework.core.GenericTypeResolver.resolveTypeArgument;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link CommitTimestampSupplier}.\n+ * It should be used when a database column has type of Timestamp with an option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage in runtime when the PENDING_COMMIT_TIMESTAMP should be stored into this field.\n+ * The method {@link #register(CommitTimestampSupplier)} should be used to add a custom \"to timestamp\" converter\n+ * to the list of converters that support this \"CommitTimestamp\" feature.\n+ *\n+ * @author Roman Solodovnichenko\n+ *\n+ * @since 1.3.0\n+ */\n+public final class CommitTimestamp {\n+\tprivate static final Map<Object, Object> VALUES = new ConcurrentHashMap<>();\n+\n+\tstatic {\n+\t\tVALUES.put(com.google.cloud.Timestamp.class, Value.COMMIT_TIMESTAMP);\n+\t}\n+\n+\tprivate CommitTimestamp() {\n+\t}\n+\n+\t/**\n+\t * Creates a value for {@link Value#COMMIT_TIMESTAMP}.\n+\t * @param timestampClass a class to be presented as a Timestamp in the database column.\n+\t * @param <T> type of the class. Supported by-default types are:\n+\t * \t{@link com.google.cloud.Timestamp}, {@link java.sql.Timestamp}, {@link java.time.LocalDateTime},\n+\t * \t{@link java.time.Instant}, {@link java.util.Date}.\n+\t * @return a value that will be converted to {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}\n+\t * @throws IllegalArgumentException when the {@code timestampClass} was not registered\n+\t * \t with the method {@link #register(CommitTimestampSupplier)}.\n+\t * @see #register(CommitTimestampSupplier)\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T of(Class<T> timestampClass) throws IllegalArgumentException {\n+\t\treturn (T) VALUES.computeIfAbsent(timestampClass, key -> {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"\\\"CommitTimestamp\\\" is not supported for the type %s\", key));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * The method should be used when we need to register a custom \"to timestamp\" converter as {@link CommitTimestampSupplier}.\n+\t * @param converter the {@link Converter} to register as CommitTimestampSupplier\n+\t * @param <S> the \"source\" type of {@link Converter}\n+\t * @param <C> the type if {@link CommitTimestampSupplier}\n+\t * @return registered converter.\n+\t * @throws IllegalStateException when the typed argument of the {@code converter} already registered.\n+\t *   It is impossible to overwrite existing registrations because it could affect the core converters\n+\t *   of the {@link SpannerConverters} class.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <S, C extends CommitTimestampSupplier<S>> C register(C converter) throws IllegalStateException {\n+\t\tfinal Class<S> argument = (Class<S>) resolveTypeArgument(converter.getClass(), CommitTimestampSupplier.class);\n+\t\tVALUES.compute(argument, (key, old) -> {\n+\t\t\tif (old == null) {\n+\t\t\t\treturn converter.commitTimestamp;\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\tString.format(\"The value %s already registered as \\\"CommitTimestamp\\\" for the type %s\", old, key));\n+\t\t});\n+\t\treturn converter;\n+\t}\n+\n+\t/**\n+\t * A specific template of \"to timestamp\" converter that any custom converter should follow\n+\t * to support \"CommitTimestamp\" feature.\n+\t * @param <S> a source type of converter.\n+\t */\n+\tpublic static abstract class CommitTimestampSupplier<S> implements Converter<S, Timestamp> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjEyOQ=="}, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4Mzc2OA==", "bodyText": "I would prefer to call it a Decorator because it follows the Decorator design pattern (https://en.wikipedia.org/wiki/Decorator_pattern)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384083768", "createdAt": "2020-02-25T19:40:43Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.cloud.Timestamp;\n+import com.google.cloud.spanner.Value;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import static org.springframework.core.GenericTypeResolver.resolveTypeArgument;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link CommitTimestampSupplier}.\n+ * It should be used when a database column has type of Timestamp with an option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage in runtime when the PENDING_COMMIT_TIMESTAMP should be stored into this field.\n+ * The method {@link #register(CommitTimestampSupplier)} should be used to add a custom \"to timestamp\" converter\n+ * to the list of converters that support this \"CommitTimestamp\" feature.\n+ *\n+ * @author Roman Solodovnichenko\n+ *\n+ * @since 1.3.0\n+ */\n+public final class CommitTimestamp {\n+\tprivate static final Map<Object, Object> VALUES = new ConcurrentHashMap<>();\n+\n+\tstatic {\n+\t\tVALUES.put(com.google.cloud.Timestamp.class, Value.COMMIT_TIMESTAMP);\n+\t}\n+\n+\tprivate CommitTimestamp() {\n+\t}\n+\n+\t/**\n+\t * Creates a value for {@link Value#COMMIT_TIMESTAMP}.\n+\t * @param timestampClass a class to be presented as a Timestamp in the database column.\n+\t * @param <T> type of the class. Supported by-default types are:\n+\t * \t{@link com.google.cloud.Timestamp}, {@link java.sql.Timestamp}, {@link java.time.LocalDateTime},\n+\t * \t{@link java.time.Instant}, {@link java.util.Date}.\n+\t * @return a value that will be converted to {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}\n+\t * @throws IllegalArgumentException when the {@code timestampClass} was not registered\n+\t * \t with the method {@link #register(CommitTimestampSupplier)}.\n+\t * @see #register(CommitTimestampSupplier)\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T of(Class<T> timestampClass) throws IllegalArgumentException {\n+\t\treturn (T) VALUES.computeIfAbsent(timestampClass, key -> {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"\\\"CommitTimestamp\\\" is not supported for the type %s\", key));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * The method should be used when we need to register a custom \"to timestamp\" converter as {@link CommitTimestampSupplier}.\n+\t * @param converter the {@link Converter} to register as CommitTimestampSupplier\n+\t * @param <S> the \"source\" type of {@link Converter}\n+\t * @param <C> the type if {@link CommitTimestampSupplier}\n+\t * @return registered converter.\n+\t * @throws IllegalStateException when the typed argument of the {@code converter} already registered.\n+\t *   It is impossible to overwrite existing registrations because it could affect the core converters\n+\t *   of the {@link SpannerConverters} class.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <S, C extends CommitTimestampSupplier<S>> C register(C converter) throws IllegalStateException {\n+\t\tfinal Class<S> argument = (Class<S>) resolveTypeArgument(converter.getClass(), CommitTimestampSupplier.class);\n+\t\tVALUES.compute(argument, (key, old) -> {\n+\t\t\tif (old == null) {\n+\t\t\t\treturn converter.commitTimestamp;\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\tString.format(\"The value %s already registered as \\\"CommitTimestamp\\\" for the type %s\", old, key));\n+\t\t});\n+\t\treturn converter;\n+\t}\n+\n+\t/**\n+\t * A specific template of \"to timestamp\" converter that any custom converter should follow\n+\t * to support \"CommitTimestamp\" feature.\n+\t * @param <S> a source type of converter.\n+\t */\n+\tpublic static abstract class CommitTimestampSupplier<S> implements Converter<S, Timestamp> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjEyOQ=="}, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODMxNDgyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTowMToxNlrOFuRU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToyNzoxMFrOFuSKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjcxMw==", "bodyText": "Is it really necessary to use anonymous class?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384062713", "createdAt": "2020-02-25T19:01:16Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -112,16 +116,12 @@ public LocalDate convert(com.google.cloud.Date date) {\n \t/**\n \t * A converter from {@link LocalDateTime} to the Spanner timestamp type.\n \t */\n-\t// @formatter:off\n-\tpublic static final Converter<LocalDateTime, Timestamp>\n-\t\t\tLOCAL_DATE_TIME_TIMESTAMP_CONVERTER = new Converter<LocalDateTime, Timestamp>() {\n-\t\t// @formatter:on\n-\t\t@Nullable\n-\t\t@Override\n-\t\tpublic Timestamp convert(LocalDateTime dateTime) {\n-\t\t\treturn JAVA_TO_SPANNER_TIMESTAMP_CONVERTER.convert(java.sql.Timestamp.valueOf(dateTime));\n-\t\t}\n-\t};\n+\tpublic static final Converter<LocalDateTime, Timestamp> LOCAL_DATE_TIME_TIMESTAMP_CONVERTER =\n+\t\t\tCommitTimestamp.register(\n+\t\t\t\t\tnew CommitTimestampSupplier<LocalDateTime>(\n+\t\t\t\t\t\t\tValue.COMMIT_TIMESTAMP.toSqlTimestamp().toLocalDateTime(),\n+\t\t\t\t\t\t\tSpannerConverters::toTimestamp\n+\t\t\t\t\t) { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3NjQzNg==", "bodyText": "unfortunately, yes, it is necessary.\nToday any Converter should be mandatory a class, not a lambda-function - types of \"source\" and \"target\" are resolved from the class as TypeArguments :(\nTake a look at org.springframework.data.convert.CustomConversions.StoreConversions#getRegistrationFor", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384076436", "createdAt": "2020-02-25T19:27:10Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -112,16 +116,12 @@ public LocalDate convert(com.google.cloud.Date date) {\n \t/**\n \t * A converter from {@link LocalDateTime} to the Spanner timestamp type.\n \t */\n-\t// @formatter:off\n-\tpublic static final Converter<LocalDateTime, Timestamp>\n-\t\t\tLOCAL_DATE_TIME_TIMESTAMP_CONVERTER = new Converter<LocalDateTime, Timestamp>() {\n-\t\t// @formatter:on\n-\t\t@Nullable\n-\t\t@Override\n-\t\tpublic Timestamp convert(LocalDateTime dateTime) {\n-\t\t\treturn JAVA_TO_SPANNER_TIMESTAMP_CONVERTER.convert(java.sql.Timestamp.valueOf(dateTime));\n-\t\t}\n-\t};\n+\tpublic static final Converter<LocalDateTime, Timestamp> LOCAL_DATE_TIME_TIMESTAMP_CONVERTER =\n+\t\t\tCommitTimestamp.register(\n+\t\t\t\t\tnew CommitTimestampSupplier<LocalDateTime>(\n+\t\t\t\t\t\t\tValue.COMMIT_TIMESTAMP.toSqlTimestamp().toLocalDateTime(),\n+\t\t\t\t\t\t\tSpannerConverters::toTimestamp\n+\t\t\t\t\t) { });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjcxMw=="}, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM0NDc5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMDozMFrOFuRn_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMDozMFrOFuRn_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NzU4Mw==", "bodyText": "If any of those methods are used only once, please just inline them.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384067583", "createdAt": "2020-02-25T19:10:30Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -273,4 +257,46 @@ public ByteArray convert(byte[] bytes) {\n \t\t\t\t\tSPANNER_TO_JAVA_SQL_DATE_CONVERTER,\n \t\t\t\t\tTIMESTAMP_LOCAL_DATE_CONVERTER,\n \t\t\t\t\tTIMESTAMP_LOCAL_DATE_TIME_CONVERTER));\n+\n+\t/**\n+\t * An utility function to convert a value inherited from {@link java.util.Date} to the {@link Timestamp}.\n+\t * It also can be used to convert a {@link java.sql.Date} value.\n+\t * @param date the value to convert\n+\t * @param <D> the type of the value to convert\n+\t * @return the equivalent Timestamp value\n+\t */\n+\tpublic static <D extends java.util.Date> Timestamp toTimestamp(@NonNull D date) {\n+\t\tlong time = date.getTime();\n+\t\tlong secs = Math.floorDiv(time, 1000L);\n+\t\tint nanos = Math.toIntExact((time - secs * 1000L) * 1000000L);\n+\t\treturn Timestamp.ofTimeSecondsAndNanos(secs, nanos);\n+\t}\n+\n+\t/**\n+\t * An utility function to convert a {@link java.sql.Timestamp} value to the {@link Timestamp}.\n+\t * @param timestamp the value to convert\n+\t * @return the equivalent Timestamp value\n+\t */\n+\tpublic static Timestamp toTimestamp(@NonNull java.sql.Timestamp timestamp) {\n+\t\tlong secs = Math.floorDiv(timestamp.getTime(), 1000L);\n+\t\treturn Timestamp.ofTimeSecondsAndNanos(secs, timestamp.getNanos());\n+\t}\n+\n+\t/**\n+\t * An utility function to convert a {@link LocalDateTime} value to the {@link Timestamp}.\n+\t * @param dateTime the value to convert\n+\t * @return the equivalent Timestamp value\n+\t */\n+\tpublic static Timestamp toTimestamp(@NonNull LocalDateTime dateTime) {\n+\t\treturn toTimestamp(java.sql.Timestamp.valueOf(dateTime));\n+\t}\n+\n+\t/**\n+\t * An utility function to convert an {@link Instant} value to the {@link Timestamp}.\n+\t * @param instant the value to convert\n+\t * @return the equivalent Timestamp value\n+\t */\n+\tpublic static Timestamp toTimestamp(@NonNull Instant instant) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODM0OTU1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMTo1N1rOFuRq9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOToxMTo1N1rOFuRq9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODM0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *     Please note there is no sense to pass it as {@code true} when the {@code sql} already contains\n          \n          \n            \n            \t *     Please note, it doesn't make sense to pass it as {@code true} when the {@code sql} already contains", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384068340", "createdAt": "2020-02-25T19:11:57Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -133,7 +133,7 @@ private SpannerStatementQueryExecutor() {\n \t *     and underlying property names.\n \t * @param fetchInterleaved when {@code true} additional subqueries will be added\n \t *     to fetch eager-Interleaved lists with a single query.\n-\t *     Please note there is no sense to pass it as {@code true} when the {@param sql} already contains\n+\t *     Please note there is no sense to pass it as {@code true} when the {@code sql} already contains", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3b7ca60e4ff911a2e8a6b3280640d22aad79a2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1MTY4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoxMVrOFuUmWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoxMVrOFuUmWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjMxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * An utility function to convert a {@link java.sql.Timestamp} value to the {@link Timestamp}.\n          \n          \n            \n            \t * A utility function to convert a {@link java.sql.Timestamp} value to the {@link Timestamp}.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384116315", "createdAt": "2020-02-25T20:46:11Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/SpannerConverters.java", "diffHunk": "@@ -273,4 +262,15 @@ public ByteArray convert(byte[] bytes) {\n \t\t\t\t\tSPANNER_TO_JAVA_SQL_DATE_CONVERTER,\n \t\t\t\t\tTIMESTAMP_LOCAL_DATE_CONVERTER,\n \t\t\t\t\tTIMESTAMP_LOCAL_DATE_TIME_CONVERTER));\n+\n+\t/**\n+\t * An utility function to convert a {@link java.sql.Timestamp} value to the {@link Timestamp}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27078310e8834819e1d93861871af5a6103584f"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY2MDcyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0OTowNlrOFuUrtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1ODo1OVrOFuU-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzY4NA==", "bodyText": "is it possible call CommitTimestamp.register(this) here and avoid calling it from SpannerComvertors class?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384117684", "createdAt": "2020-02-25T20:49:06Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.cloud.Timestamp;\n+import com.google.cloud.spanner.Value;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import static org.springframework.core.GenericTypeResolver.resolveTypeArgument;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link CommitTimestampDecorator}.\n+ * It should be used when a database column has type of Timestamp with an option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage in runtime when the PENDING_COMMIT_TIMESTAMP should be stored into this field.\n+ * The method {@link #register(CommitTimestampDecorator)} should be used to add a custom \"to timestamp\" converter\n+ * to the list of converters that support this \"CommitTimestamp\" feature.\n+ *\n+ * @author Roman Solodovnichenko\n+ *\n+ * @since 1.3.0\n+ */\n+public final class CommitTimestamp {\n+\tprivate static final Map<Object, Object> VALUES = new ConcurrentHashMap<>();\n+\n+\tstatic {\n+\t\tVALUES.put(com.google.cloud.Timestamp.class, Value.COMMIT_TIMESTAMP);\n+\t}\n+\n+\tprivate CommitTimestamp() {\n+\t}\n+\n+\t/**\n+\t * Creates a value for {@link Value#COMMIT_TIMESTAMP}.\n+\t * @param timestampClass a class to be presented as a Timestamp in the database column.\n+\t * @param <T> type of the class. Supported by-default types are:\n+\t * \t{@link com.google.cloud.Timestamp}, {@link java.sql.Timestamp}, {@link java.time.LocalDateTime},\n+\t * \t{@link java.time.Instant}, {@link java.util.Date}.\n+\t * @return a value that will be converted to {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}\n+\t * @throws IllegalArgumentException when the {@code timestampClass} was not registered\n+\t * \t with the method {@link #register(CommitTimestampDecorator)}.\n+\t * @see #register(CommitTimestampDecorator)\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T of(Class<T> timestampClass) throws IllegalArgumentException {\n+\t\treturn (T) VALUES.computeIfAbsent(timestampClass, key -> {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"\\\"CommitTimestamp\\\" is not supported for the type %s\", key));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * The method should be used when we need to register a custom \"to timestamp\" converter as {@link CommitTimestampDecorator}.\n+\t * @param converter the {@link Converter} to register as CommitTimestampSupplier\n+\t * @param <S> the \"source\" type of {@link Converter}\n+\t * @param <C> the type if {@link CommitTimestampDecorator}\n+\t * @return registered converter.\n+\t * @throws IllegalStateException when the typed argument of the {@code converter} already registered.\n+\t *   It is impossible to overwrite existing registrations because it could affect the core converters\n+\t *   of the {@link SpannerConverters} class.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <S, C extends CommitTimestampDecorator<S>> C register(C converter) throws IllegalStateException {\n+\t\tfinal Class<S> argument = (Class<S>) resolveTypeArgument(converter.getClass(), CommitTimestampDecorator.class);\n+\t\tVALUES.compute(argument, (key, old) -> {\n+\t\t\tif (old == null) {\n+\t\t\t\treturn converter.commitTimestamp;\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\tString.format(\"The value %s already registered as \\\"CommitTimestamp\\\" for the type %s\", old, key));\n+\t\t});\n+\t\treturn converter;\n+\t}\n+\n+\t/**\n+\t * A specific decorator of the \"to timestamp\" function that any custom converter should follow\n+\t * to support \"CommitTimestamp\" feature.\n+\t * @param <S> a source type of converter.\n+\t */\n+\tpublic static abstract class CommitTimestampDecorator<S> implements Converter<S, Timestamp> {\n+\n+\t\tfinal S commitTimestamp;\n+\t\tprivate final Function<S, Timestamp> converter;\n+\n+\t\tprotected CommitTimestampDecorator(S commitTimestamp, Function<S, Timestamp> converter) {\n+\t\t\tthis.commitTimestamp = commitTimestamp;\n+\t\t\tthis.converter = converter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c27078310e8834819e1d93861871af5a6103584f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMjA0Ng==", "bodyText": "It was like you telling me from the very beginning.\nThen I changed it because I thought you will not like when constructor doing something not tightly related to the construction of the object", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384122046", "createdAt": "2020-02-25T20:58:19Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.cloud.Timestamp;\n+import com.google.cloud.spanner.Value;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import static org.springframework.core.GenericTypeResolver.resolveTypeArgument;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link CommitTimestampDecorator}.\n+ * It should be used when a database column has type of Timestamp with an option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage in runtime when the PENDING_COMMIT_TIMESTAMP should be stored into this field.\n+ * The method {@link #register(CommitTimestampDecorator)} should be used to add a custom \"to timestamp\" converter\n+ * to the list of converters that support this \"CommitTimestamp\" feature.\n+ *\n+ * @author Roman Solodovnichenko\n+ *\n+ * @since 1.3.0\n+ */\n+public final class CommitTimestamp {\n+\tprivate static final Map<Object, Object> VALUES = new ConcurrentHashMap<>();\n+\n+\tstatic {\n+\t\tVALUES.put(com.google.cloud.Timestamp.class, Value.COMMIT_TIMESTAMP);\n+\t}\n+\n+\tprivate CommitTimestamp() {\n+\t}\n+\n+\t/**\n+\t * Creates a value for {@link Value#COMMIT_TIMESTAMP}.\n+\t * @param timestampClass a class to be presented as a Timestamp in the database column.\n+\t * @param <T> type of the class. Supported by-default types are:\n+\t * \t{@link com.google.cloud.Timestamp}, {@link java.sql.Timestamp}, {@link java.time.LocalDateTime},\n+\t * \t{@link java.time.Instant}, {@link java.util.Date}.\n+\t * @return a value that will be converted to {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}\n+\t * @throws IllegalArgumentException when the {@code timestampClass} was not registered\n+\t * \t with the method {@link #register(CommitTimestampDecorator)}.\n+\t * @see #register(CommitTimestampDecorator)\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T of(Class<T> timestampClass) throws IllegalArgumentException {\n+\t\treturn (T) VALUES.computeIfAbsent(timestampClass, key -> {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"\\\"CommitTimestamp\\\" is not supported for the type %s\", key));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * The method should be used when we need to register a custom \"to timestamp\" converter as {@link CommitTimestampDecorator}.\n+\t * @param converter the {@link Converter} to register as CommitTimestampSupplier\n+\t * @param <S> the \"source\" type of {@link Converter}\n+\t * @param <C> the type if {@link CommitTimestampDecorator}\n+\t * @return registered converter.\n+\t * @throws IllegalStateException when the typed argument of the {@code converter} already registered.\n+\t *   It is impossible to overwrite existing registrations because it could affect the core converters\n+\t *   of the {@link SpannerConverters} class.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <S, C extends CommitTimestampDecorator<S>> C register(C converter) throws IllegalStateException {\n+\t\tfinal Class<S> argument = (Class<S>) resolveTypeArgument(converter.getClass(), CommitTimestampDecorator.class);\n+\t\tVALUES.compute(argument, (key, old) -> {\n+\t\t\tif (old == null) {\n+\t\t\t\treturn converter.commitTimestamp;\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\tString.format(\"The value %s already registered as \\\"CommitTimestamp\\\" for the type %s\", old, key));\n+\t\t});\n+\t\treturn converter;\n+\t}\n+\n+\t/**\n+\t * A specific decorator of the \"to timestamp\" function that any custom converter should follow\n+\t * to support \"CommitTimestamp\" feature.\n+\t * @param <S> a source type of converter.\n+\t */\n+\tpublic static abstract class CommitTimestampDecorator<S> implements Converter<S, Timestamp> {\n+\n+\t\tfinal S commitTimestamp;\n+\t\tprivate final Function<S, Timestamp> converter;\n+\n+\t\tprotected CommitTimestampDecorator(S commitTimestamp, Function<S, Timestamp> converter) {\n+\t\t\tthis.commitTimestamp = commitTimestamp;\n+\t\t\tthis.converter = converter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzY4NA=="}, "originalCommit": {"oid": "c27078310e8834819e1d93861871af5a6103584f"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMjM4NQ==", "bodyText": "changing back...", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2208#discussion_r384122385", "createdAt": "2020-02-25T20:58:59Z", "author": {"login": "s13o"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/CommitTimestamp.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.core.convert;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.cloud.Timestamp;\n+import com.google.cloud.spanner.Value;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import static org.springframework.core.GenericTypeResolver.resolveTypeArgument;\n+\n+/**\n+ * The factory method {@link #of(Class)} should be used to create a specific value of a pointed class\n+ * that will be converted then to the {@link Value#COMMIT_TIMESTAMP} by {@link CommitTimestampDecorator}.\n+ * It should be used when a database column has type of Timestamp with an option \"allow_commit_timestamp\"\n+ * and the business logic needs to manage in runtime when the PENDING_COMMIT_TIMESTAMP should be stored into this field.\n+ * The method {@link #register(CommitTimestampDecorator)} should be used to add a custom \"to timestamp\" converter\n+ * to the list of converters that support this \"CommitTimestamp\" feature.\n+ *\n+ * @author Roman Solodovnichenko\n+ *\n+ * @since 1.3.0\n+ */\n+public final class CommitTimestamp {\n+\tprivate static final Map<Object, Object> VALUES = new ConcurrentHashMap<>();\n+\n+\tstatic {\n+\t\tVALUES.put(com.google.cloud.Timestamp.class, Value.COMMIT_TIMESTAMP);\n+\t}\n+\n+\tprivate CommitTimestamp() {\n+\t}\n+\n+\t/**\n+\t * Creates a value for {@link Value#COMMIT_TIMESTAMP}.\n+\t * @param timestampClass a class to be presented as a Timestamp in the database column.\n+\t * @param <T> type of the class. Supported by-default types are:\n+\t * \t{@link com.google.cloud.Timestamp}, {@link java.sql.Timestamp}, {@link java.time.LocalDateTime},\n+\t * \t{@link java.time.Instant}, {@link java.util.Date}.\n+\t * @return a value that will be converted to {@link Value#COMMIT_TIMESTAMP} by {@link SpannerConverters}\n+\t * @throws IllegalArgumentException when the {@code timestampClass} was not registered\n+\t * \t with the method {@link #register(CommitTimestampDecorator)}.\n+\t * @see #register(CommitTimestampDecorator)\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T of(Class<T> timestampClass) throws IllegalArgumentException {\n+\t\treturn (T) VALUES.computeIfAbsent(timestampClass, key -> {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\tString.format(\"\\\"CommitTimestamp\\\" is not supported for the type %s\", key));\n+\t\t});\n+\t}\n+\n+\t/**\n+\t * The method should be used when we need to register a custom \"to timestamp\" converter as {@link CommitTimestampDecorator}.\n+\t * @param converter the {@link Converter} to register as CommitTimestampSupplier\n+\t * @param <S> the \"source\" type of {@link Converter}\n+\t * @param <C> the type if {@link CommitTimestampDecorator}\n+\t * @return registered converter.\n+\t * @throws IllegalStateException when the typed argument of the {@code converter} already registered.\n+\t *   It is impossible to overwrite existing registrations because it could affect the core converters\n+\t *   of the {@link SpannerConverters} class.\n+\t */\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <S, C extends CommitTimestampDecorator<S>> C register(C converter) throws IllegalStateException {\n+\t\tfinal Class<S> argument = (Class<S>) resolveTypeArgument(converter.getClass(), CommitTimestampDecorator.class);\n+\t\tVALUES.compute(argument, (key, old) -> {\n+\t\t\tif (old == null) {\n+\t\t\t\treturn converter.commitTimestamp;\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\tString.format(\"The value %s already registered as \\\"CommitTimestamp\\\" for the type %s\", old, key));\n+\t\t});\n+\t\treturn converter;\n+\t}\n+\n+\t/**\n+\t * A specific decorator of the \"to timestamp\" function that any custom converter should follow\n+\t * to support \"CommitTimestamp\" feature.\n+\t * @param <S> a source type of converter.\n+\t */\n+\tpublic static abstract class CommitTimestampDecorator<S> implements Converter<S, Timestamp> {\n+\n+\t\tfinal S commitTimestamp;\n+\t\tprivate final Function<S, Timestamp> converter;\n+\n+\t\tprotected CommitTimestampDecorator(S commitTimestamp, Function<S, Timestamp> converter) {\n+\t\t\tthis.commitTimestamp = commitTimestamp;\n+\t\t\tthis.converter = converter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNzY4NA=="}, "originalCommit": {"oid": "c27078310e8834819e1d93861871af5a6103584f"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2252, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}