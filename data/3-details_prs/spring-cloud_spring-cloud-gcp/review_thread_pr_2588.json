{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzcwNDA1", "number": 2588, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoyMzo0NFrOE3s-gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoyMzo0NFrOE3s-gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODQ0MDM0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-bigquery/src/test/java/org/springframework/cloud/gcp/bigquery/integration/outbound/BigQueryFileMessageHandlerIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoyMzo0NFrOHxM9xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxODowMjoyNFrOHxYa9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1NDY5NA==", "bodyText": "Is it possible that concurrent tests would mean this executor pool has size > 1? Is there something more meaningfully checked in the queue item?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2588#discussion_r521354694", "createdAt": "2020-11-11T13:23:44Z", "author": {"login": "ttomsu"}, "path": "spring-cloud-gcp-bigquery/src/test/java/org/springframework/cloud/gcp/bigquery/integration/outbound/BigQueryFileMessageHandlerIntegrationTests.java", "diffHunk": "@@ -85,6 +89,46 @@ public void setup() {\n \t\tthis.bigquery.delete(TableId.of(DATASET_NAME, TABLE_NAME));\n \t}\n \n+\t@Test\n+\tpublic void testLoadFileWithSchema() throws InterruptedException, ExecutionException {\n+\t\tSchema schema = Schema.of(\n+\t\t\t\tField.newBuilder(\"CountyId\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build(),\n+\t\t\t\tField.newBuilder(\"State\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build(),\n+\t\t\t\tField.newBuilder(\"County\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build()\n+\t\t);\n+\n+\t\tHashMap<String, Object> messageHeaders = new HashMap<>();\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.TABLE_NAME, TABLE_NAME);\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.FORMAT_OPTIONS, FormatOptions.csv());\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.TABLE_SCHEMA, schema);\n+\n+\t\tMessage<File> message = MessageBuilder.createMessage(\n+\t\t\t\tnew File(\"src/test/resources/data.csv\"),\n+\t\t\t\tnew MessageHeaders(messageHeaders));\n+\n+\t\tListenableFuture<Job> jobFuture =\n+\t\t\t\t(ListenableFuture<Job>) this.messageHandler.handleRequestMessage(message);\n+\n+\t\t// Assert that a BigQuery polling task is scheduled successfully.\n+\t\tawait().atMost(Duration.FIVE_SECONDS)\n+\t\t\t\t.untilAsserted(\n+\t\t\t\t\t\t() -> assertThat(\n+\t\t\t\t\t\t\t\tthis.taskScheduler.getScheduledThreadPoolExecutor().getQueue()).hasSize(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU0MjM5MA==", "bodyText": "Hmm as long as the tests in this file are not concurrent it should be okay. It should not interfere with any other tests run in other files since the pool is not shared.\nYeah the purpose of the check is just to verify a new Runnable was created in the task scheduler. Doesn't seem to be anything deeper I can verify about the object though.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2588#discussion_r521542390", "createdAt": "2020-11-11T18:02:24Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-bigquery/src/test/java/org/springframework/cloud/gcp/bigquery/integration/outbound/BigQueryFileMessageHandlerIntegrationTests.java", "diffHunk": "@@ -85,6 +89,46 @@ public void setup() {\n \t\tthis.bigquery.delete(TableId.of(DATASET_NAME, TABLE_NAME));\n \t}\n \n+\t@Test\n+\tpublic void testLoadFileWithSchema() throws InterruptedException, ExecutionException {\n+\t\tSchema schema = Schema.of(\n+\t\t\t\tField.newBuilder(\"CountyId\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build(),\n+\t\t\t\tField.newBuilder(\"State\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build(),\n+\t\t\t\tField.newBuilder(\"County\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build()\n+\t\t);\n+\n+\t\tHashMap<String, Object> messageHeaders = new HashMap<>();\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.TABLE_NAME, TABLE_NAME);\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.FORMAT_OPTIONS, FormatOptions.csv());\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.TABLE_SCHEMA, schema);\n+\n+\t\tMessage<File> message = MessageBuilder.createMessage(\n+\t\t\t\tnew File(\"src/test/resources/data.csv\"),\n+\t\t\t\tnew MessageHeaders(messageHeaders));\n+\n+\t\tListenableFuture<Job> jobFuture =\n+\t\t\t\t(ListenableFuture<Job>) this.messageHandler.handleRequestMessage(message);\n+\n+\t\t// Assert that a BigQuery polling task is scheduled successfully.\n+\t\tawait().atMost(Duration.FIVE_SECONDS)\n+\t\t\t\t.untilAsserted(\n+\t\t\t\t\t\t() -> assertThat(\n+\t\t\t\t\t\t\t\tthis.taskScheduler.getScheduledThreadPoolExecutor().getQueue()).hasSize(1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1NDY5NA=="}, "originalCommit": {"oid": "67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2070, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}