{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTM4NDM3", "number": 2394, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozNzozMVrOEAm9mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMTo0NlrOEA8DhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDczODE2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozNzozMVrOGb_wYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo1ODozN1rOGcIMVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwOTMxMw==", "bodyText": "I would rename this method to buildPartTreeSqlQuery since it is returning a custom object rather than a string.\nAlso see below; suggestions for renaming SqlAndTags which I think would be more clear.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432009313", "createdAt": "2020-05-28T17:37:31Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -419,8 +419,8 @@ private static String getChildrenSubquery(\n \t\treturn joiner.toString();\n \t}\n \n-\tprivate static Pair<String, List<String>> buildPartTreeSqlString(PartTree tree,\n-\t\t\tSpannerMappingContext spannerMappingContext, Class type) {\n+\tprivate static SqlAndTags buildPartTreeSqlString(PartTree tree,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NzU0Mw==", "bodyText": "I think the name reflects what this method does.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432147543", "createdAt": "2020-05-28T21:58:37Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -419,8 +419,8 @@ private static String getChildrenSubquery(\n \t\treturn joiner.toString();\n \t}\n \n-\tprivate static Pair<String, List<String>> buildPartTreeSqlString(PartTree tree,\n-\t\t\tSpannerMappingContext spannerMappingContext, Class type) {\n+\tprivate static SqlAndTags buildPartTreeSqlString(PartTree tree,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwOTMxMw=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc0Mzc3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzozOToxNVrOGb_0Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozNToyN1rOGcHlsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDI2Ng==", "bodyText": "I would rename this to SpannerPartTreeQuery or something to indicate that this object is the result of parsing the PartTree and was created from that.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432010266", "createdAt": "2020-05-28T17:39:15Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNzY1MA==", "bodyText": "I think it's better to name it based on how it's used instead of how it was created.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432137650", "createdAt": "2020-05-28T21:35:27Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDI2Ng=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc0ODAzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0MDoyM1rOGb_2qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0NTozN1rOGcH28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDkyMA==", "bodyText": "Also I think this class needs Javadoc explaining what the class is; where it's used etc. In particular it is not clear what \"tags\" refers to.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432010920", "createdAt": "2020-05-28T17:40:23Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MjA2NA==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432142064", "createdAt": "2020-05-28T21:45:37Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDkyMA=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc1MDAyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0MTowMFrOGb_37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozNDowNlrOGcHjOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTI0Ng==", "bodyText": "Visibility of this class and all methods should be package private to indicate it is only used in parttree context.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432011246", "createdAt": "2020-05-28T17:41:00Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNzAxNg==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432137016", "createdAt": "2020-05-28T21:34:06Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTI0Ng=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc3MzM2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0ODowOFrOGcAHOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo1MDoyNlrOGcH-ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTE2MQ==", "bodyText": "I think the dummyMethods here is starting to be unclear; (I see you're just following what was done previously).\nDo these represent methods in a repository? If so, I think you can rename it to something like testRepositoryMethodX to be more clear. Also the QueryHolder outer class should have a comment now to indicate what these dummy methods are used fo.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432015161", "createdAt": "2020-05-28T17:48:08Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -278,5 +358,26 @@ public long dummyMethod(Object tag0, Object tag1, Object tag2, Object tag3, Obje\n \t\t\t// tag12 is intentionally List<Integer> instead of List<Long> to trigger conversion.\n \t\t\treturn 0;\n \t\t}\n+\n+\t\tpublic long dummyMethod2(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Trade tag5, Object tag6) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NDAzNQ==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432144035", "createdAt": "2020-05-28T21:50:26Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -278,5 +358,26 @@ public long dummyMethod(Object tag0, Object tag1, Object tag2, Object tag3, Obje\n \t\t\t// tag12 is intentionally List<Integer> instead of List<Long> to trigger conversion.\n \t\t\treturn 0;\n \t\t}\n+\n+\t\tpublic long dummyMethod2(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Trade tag5, Object tag6) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTE2MQ=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDc3Njg4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzo0OToxNFrOGcAJhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo0NjoyNFrOGcH4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTc1MQ==", "bodyText": "can be made private", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432015751", "createdAt": "2020-05-28T17:49:14Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -209,13 +221,74 @@ public void compoundNameConventionCountTest() {\n \t}\n \n \t@Test\n-\tpublic void unspecifiedParametersTest() {\n+\tpublic void pageableTest() throws NoSuchMethodException {\n+\t\tObject[] params = new Object[] { 8.88, PageRequest.of(1, 10, Sort.by(\"traderId\")) };\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod5\",\n+\t\t\t\tDouble.class, Pageable.class);\n+\t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n+\t\t\t\t+ \"ORDER BY trader_id ASC LIMIT 10 OFFSET 10\";\n+\n+\t\trunPageableOrSortTest(params, method, expectedSql);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void sortTest() throws NoSuchMethodException {\n+\t\tObject[] params = new Object[] { 8.88, Sort.by(Order.desc(\"traderId\"), Order.asc(\"price\"), Order.desc(\"action\")) };\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod6\",\n+\t\t\t\tDouble.class, Sort.class);\n+\t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n+\t\t\t\t+ \"ORDER BY trader_id DESC , price ASC , action DESC\";\n+\n+\t\trunPageableOrSortTest(params, method, expectedSql);\n+\t}\n+\n+\tvoid runPageableOrSortTest(Object[] params, Method method, String expectedSql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MjQwNw==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432142407", "createdAt": "2020-05-28T21:46:24Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -209,13 +221,74 @@ public void compoundNameConventionCountTest() {\n \t}\n \n \t@Test\n-\tpublic void unspecifiedParametersTest() {\n+\tpublic void pageableTest() throws NoSuchMethodException {\n+\t\tObject[] params = new Object[] { 8.88, PageRequest.of(1, 10, Sort.by(\"traderId\")) };\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod5\",\n+\t\t\t\tDouble.class, Pageable.class);\n+\t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n+\t\t\t\t+ \"ORDER BY trader_id ASC LIMIT 10 OFFSET 10\";\n+\n+\t\trunPageableOrSortTest(params, method, expectedSql);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void sortTest() throws NoSuchMethodException {\n+\t\tObject[] params = new Object[] { 8.88, Sort.by(Order.desc(\"traderId\"), Order.asc(\"price\"), Order.desc(\"action\")) };\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod6\",\n+\t\t\t\tDouble.class, Sort.class);\n+\t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n+\t\t\t\t+ \"ORDER BY trader_id DESC , price ASC , action DESC\";\n+\n+\t\trunPageableOrSortTest(params, method, expectedSql);\n+\t}\n+\n+\tvoid runPageableOrSortTest(Object[] params, Method method, String expectedSql) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTc1MQ=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDg1MDEwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODoxMTo0NVrOGcA5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozMDozM1rOGcHcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNzk3Mg==", "bodyText": "I think this method would be more clear with shorter variable names; i.e.\n\tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(\n\t\t\tParameter[] queryMethodParams, SqlAndTags sqlAndTags) {\n\n\t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n\t\tfor (int i = 0; i < queryMethodParams.length; i++) {\n\t\t\tParameter param = queryMethodParams[i];\n\t\t\tif (param.getType() != Pageable.class && param.getType() != Sort.class) {\n\t\t\t\tparamMetadataMap.put(sqlAndTags.getTags().get(i), param);\n\t\t\t}\n\t\t}\n\t\treturn paramMetadataMap;\n\t}", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432027972", "createdAt": "2020-05-28T18:11:45Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -72,31 +73,34 @@ private SpannerStatementQueryExecutor() {\n \t * Executes a PartTree-based query.\n \t * @param type the type of the underlying entity\n \t * @param tree the parsed metadata of the query\n-\t * @param params the parameters of this specific query\n+\t * @param parameterAccessor the parameters of this specific query\n \t * @param queryMethodParamsMetadata parameter metadata from Query Method\n \t * @param spannerTemplate used to execute the query\n \t * @param spannerMappingContext used to get metadata about the entity type\n \t * @param <T> the type of the underlying entity\n \t * @return list of entities.\n \t */\n-\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, Object[] params,\n+\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, ParameterAccessor parameterAccessor,\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tPair<String, List<String>> sqlAndTags = buildPartTreeSqlString(tree,\n-\t\t\t\tspannerMappingContext, type);\n+\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n \t\t\t\tsqlAndTags);\n+\t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getFirst(), sqlAndTags.getSecond(), null,\n+\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n \tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tPair<String, List<String>> sqlAndTags) {\n+\t\t\tSqlAndTags sqlAndTags) {\n \t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n \t\tfor (int i = 0; i < queryMethodParamsMetadata.length; i++) {\n-\t\t\tparamMetadataMap.put(sqlAndTags.getSecond().get(i), queryMethodParamsMetadata[i]);\n+\t\t\tParameter queryMethodParamsMetadatum = queryMethodParamsMetadata[i];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNTM2Mw==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432135363", "createdAt": "2020-05-28T21:30:33Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -72,31 +73,34 @@ private SpannerStatementQueryExecutor() {\n \t * Executes a PartTree-based query.\n \t * @param type the type of the underlying entity\n \t * @param tree the parsed metadata of the query\n-\t * @param params the parameters of this specific query\n+\t * @param parameterAccessor the parameters of this specific query\n \t * @param queryMethodParamsMetadata parameter metadata from Query Method\n \t * @param spannerTemplate used to execute the query\n \t * @param spannerMappingContext used to get metadata about the entity type\n \t * @param <T> the type of the underlying entity\n \t * @return list of entities.\n \t */\n-\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, Object[] params,\n+\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, ParameterAccessor parameterAccessor,\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tPair<String, List<String>> sqlAndTags = buildPartTreeSqlString(tree,\n-\t\t\t\tspannerMappingContext, type);\n+\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n \t\t\t\tsqlAndTags);\n+\t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getFirst(), sqlAndTags.getSecond(), null,\n+\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n \tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tPair<String, List<String>> sqlAndTags) {\n+\t\t\tSqlAndTags sqlAndTags) {\n \t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n \t\tfor (int i = 0; i < queryMethodParamsMetadata.length; i++) {\n-\t\t\tparamMetadataMap.put(sqlAndTags.getSecond().get(i), queryMethodParamsMetadata[i]);\n+\t\t\tParameter queryMethodParamsMetadatum = queryMethodParamsMetadata[i];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNzk3Mg=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDg1MjI0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODoxMjoxOVrOGcA6ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozMDoyNVrOGcHcjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyODMxOA==", "bodyText": "I think a comment is necessary to explain why the params are filtered by queryMethodParamsMetadatum.getType() != Pageable.class && queryMethodParamsMetadatum.getType() != Sort.class", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432028318", "createdAt": "2020-05-28T18:12:19Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -72,31 +73,34 @@ private SpannerStatementQueryExecutor() {\n \t * Executes a PartTree-based query.\n \t * @param type the type of the underlying entity\n \t * @param tree the parsed metadata of the query\n-\t * @param params the parameters of this specific query\n+\t * @param parameterAccessor the parameters of this specific query\n \t * @param queryMethodParamsMetadata parameter metadata from Query Method\n \t * @param spannerTemplate used to execute the query\n \t * @param spannerMappingContext used to get metadata about the entity type\n \t * @param <T> the type of the underlying entity\n \t * @return list of entities.\n \t */\n-\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, Object[] params,\n+\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, ParameterAccessor parameterAccessor,\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tPair<String, List<String>> sqlAndTags = buildPartTreeSqlString(tree,\n-\t\t\t\tspannerMappingContext, type);\n+\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n \t\t\t\tsqlAndTags);\n+\t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getFirst(), sqlAndTags.getSecond(), null,\n+\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n \tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tPair<String, List<String>> sqlAndTags) {\n+\t\t\tSqlAndTags sqlAndTags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNTMxMA==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432135310", "createdAt": "2020-05-28T21:30:25Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -72,31 +73,34 @@ private SpannerStatementQueryExecutor() {\n \t * Executes a PartTree-based query.\n \t * @param type the type of the underlying entity\n \t * @param tree the parsed metadata of the query\n-\t * @param params the parameters of this specific query\n+\t * @param parameterAccessor the parameters of this specific query\n \t * @param queryMethodParamsMetadata parameter metadata from Query Method\n \t * @param spannerTemplate used to execute the query\n \t * @param spannerMappingContext used to get metadata about the entity type\n \t * @param <T> the type of the underlying entity\n \t * @return list of entities.\n \t */\n-\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, Object[] params,\n+\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, ParameterAccessor parameterAccessor,\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tPair<String, List<String>> sqlAndTags = buildPartTreeSqlString(tree,\n-\t\t\t\tspannerMappingContext, type);\n+\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n \t\t\t\tsqlAndTags);\n+\t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getFirst(), sqlAndTags.getSecond(), null,\n+\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n \tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tPair<String, List<String>> sqlAndTags) {\n+\t\t\tSqlAndTags sqlAndTags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyODMxOA=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDg2NTg1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxODoxNjozN1rOGcBDsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTozMjoyM1rOGcHgKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDY0Mw==", "bodyText": "since Pageable is the one containing the limit info, I would just pass in Pageable instead of the full ParamAccessor here.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432030643", "createdAt": "2020-05-28T18:16:37Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -582,12 +582,19 @@ else if (part.shouldIgnoreCase() != IgnoreCaseType.NEVER) {\n \t\t}\n \t}\n \n-\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder) {\n+\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, ParameterAccessor params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNjIzNA==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432136234", "createdAt": "2020-05-28T21:32:23Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -582,12 +582,19 @@ else if (part.shouldIgnoreCase() != IgnoreCaseType.NEVER) {\n \t\t}\n \t}\n \n-\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder) {\n+\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, ParameterAccessor params) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDY0Mw=="}, "originalCommit": {"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDE2OTU4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNToyN1rOGchdGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNToyN1rOGchdGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MTQzNQ==", "bodyText": "can do else if", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432561435", "createdAt": "2020-05-29T15:25:27Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -582,12 +585,18 @@ else if (part.shouldIgnoreCase() != IgnoreCaseType.NEVER) {\n \t\t}\n \t}\n \n-\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder) {\n+\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, Pageable pageable) {\n \t\tif (tree.isExistsProjection()) {\n \t\t\tstringBuilder.append(\" LIMIT 1\");\n \t\t}\n \t\telse if (tree.isLimiting()) {\n \t\t\tstringBuilder.append(\" LIMIT \").append(tree.getMaxResults());\n \t\t}\n+\t\telse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDE3MTkwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNjowMFrOGchegA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNjowMFrOGchegA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MTc5Mg==", "bodyText": "1.2.4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432561792", "createdAt": "2020-05-29T15:26:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDE3MzIyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNjoyMVrOGchfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNToyNjoyMVrOGchfZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MjAyMw==", "bodyText": "extra space", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432562023", "createdAt": "2020-05-29T15:26:21Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2\n+ */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDE5Mzk3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMTo0NlrOGchsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTozMTo0NlrOGchsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTM1Mg==", "bodyText": "If you want, add test for limit in the method name and page request in the params. Which takes precedence?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432565352", "createdAt": "2020-05-29T15:31:46Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java", "diffHunk": "@@ -181,6 +182,22 @@ public void queryMethodsTest() {\n \t\t\t\t.findByTraderId(\"trader2\");\n \t\tassertThat(trader2TradesRetrieved).containsExactlyInAnyOrderElementsOf(trader2Trades);\n \n+\t\tassertThat(this.tradeRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2128, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}