{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzOTI3NDYz", "number": 2322, "title": "rely on spring for nullability constraints checking", "bodyText": "fixes #2316", "createdAt": "2020-04-15T18:45:56Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322", "merged": true, "mergeCommit": {"oid": "57de2a1723cfb0d22b4c535f309a877ce43871bd"}, "closed": true, "closedAt": "2020-04-21T14:09:46Z", "author": {"login": "dmitry-s"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcX8ndugH2gAyNDAzOTI3NDYzOjJjMTVmN2FhNzFlZjZhNGU1NzZjZWViNjM2Yzc0NmY0NGJlMjBlNjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZokjXgFqTM5NjkwOTA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "committedDate": "2020-04-15T18:43:45Z", "message": "rely on spring for nullabiliy constraints checking"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDUwMjgx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#pullrequestreview-394050281", "createdAt": "2020-04-15T18:58:10Z", "commit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1ODoxMFrOGGHXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxOTowNjoxN1rOGGHpyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw==", "bodyText": "Can we keep the test but change the assertions?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409065277", "createdAt": "2020-04-15T18:58:10Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTU5MQ==", "bodyText": "What does this do?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409065591", "createdAt": "2020-04-15T18:58:40Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/package-info.java", "diffHunk": "@@ -0,0 +1,5 @@\n+/**\n+ * IT tests for spring-cloud-gcp-data-datastore.\n+ */\n+@org.springframework.lang.NonNullApi\n+package org.springframework.cloud.gcp.data.datastore.it;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjE2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Null Handling of Repository Methods\n          \n          \n            \n            ==== Empty result handling in repository methods", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409066168", "createdAt": "2020-04-15T18:59:34Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njc0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n          \n          \n            \n            Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty collection.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409066740", "createdAt": "2020-04-15T19:00:30Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ==", "bodyText": "Is this supposed to be a subsection of the above or a new section?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067139", "createdAt": "2020-04-15T19:01:11Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            They provide an opt-in null checks during runtime, as follows:\n          \n          \n            \n            They enable null checks during runtime, as follows:", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067503", "createdAt": "2020-04-15T19:01:55Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzkyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n          \n          \n            \n             . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where `@NonNullApi` applies).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067921", "createdAt": "2020-04-15T19:02:39Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ==", "bodyText": "Is there anything you can use at a class level or method level?\nWouldn't @NonNull on  a method work?\nThis sentence makes it sound like you can only make it work on methods by using the package-level annotation which is extremely inflexible and cumbersome.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409070025", "createdAt": "2020-04-15T19:06:17Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d416fae8c2c21d6ff593940d72e7cf9fa6c2c67e", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d416fae8c2c21d6ff593940d72e7cf9fa6c2c67e", "committedDate": "2020-04-15T19:13:39Z", "message": "rely on spring for nullabiliy constraints checking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8feec21beece7c50ad43c3282369a9996c5364a6", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8feec21beece7c50ad43c3282369a9996c5364a6", "committedDate": "2020-04-15T19:19:05Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTUxMzkz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#pullrequestreview-394151393", "createdAt": "2020-04-15T21:34:01Z", "commit": {"oid": "8feec21beece7c50ad43c3282369a9996c5364a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTozNDowMVrOGGMXTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMTozNTozNVrOGGMaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NzIxMw==", "bodyText": "My question is more on \"should it be\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147213", "createdAt": "2020-04-15T21:34:01Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NzM3Nw==", "bodyText": "Let's resolve this before merging.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147377", "createdAt": "2020-04-15T21:34:22Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0Nzk2OQ==", "bodyText": "Can it be moved to an integration test then?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147969", "createdAt": "2020-04-15T21:35:35Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}, "originalCommit": {"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508bcd7c1422820540ce943f10badd59a758dd86", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/508bcd7c1422820540ce943f10badd59a758dd86", "committedDate": "2020-04-17T18:56:21Z", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into datastore-nullability-constraints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fece5abac5055cf948c4aaa7a61c9d7a75224ce6", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/fece5abac5055cf948c4aaa7a61c9d7a75224ce6", "committedDate": "2020-04-17T18:57:09Z", "message": "Merge branch 'datastore-nullability-constraints' of github.com:spring-cloud/spring-cloud-gcp into datastore-nullability-constraints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "486ff863a5ace0715ca23400ed85845dda8fdd94", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/486ff863a5ace0715ca23400ed85845dda8fdd94", "committedDate": "2020-04-17T22:53:38Z", "message": "add spanner test and docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTEyMDMx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#pullrequestreview-396512031", "createdAt": "2020-04-20T14:33:28Z", "commit": {"oid": "486ff863a5ace0715ca23400ed85845dda8fdd94"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMzoyOFrOGIXk7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMzoyOFrOGIXk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODA3Nw==", "bodyText": "I took another look at this documentation and realized that this is part of core Spring and is not specific to Spring Data at all. Hence, I don't think we need to make a big deal out of it here. I think it's enough to mention that if you want null checks use null-safety annotations and link to them.\nAlso, please use the non-version-specific link: https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r411428077", "createdAt": "2020-04-20T14:33:28Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,37 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Empty result handling in repository methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty collection.\n+\n+===== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "486ff863a5ace0715ca23400ed85845dda8fdd94"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dae3df2d06ed6a3d20442d7d6fb11fa8885f795", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/9dae3df2d06ed6a3d20442d7d6fb11fa8885f795", "committedDate": "2020-04-20T17:07:01Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzA2Mjcx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#pullrequestreview-396706271", "createdAt": "2020-04-20T18:28:33Z", "commit": {"oid": "9dae3df2d06ed6a3d20442d7d6fb11fa8885f795"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyODozM1rOGIh7Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyODozM1rOGIh7Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU5NQ==", "bodyText": "I think you deleted too much. The part about empty result handling was useful in my opinion. I would just collapse the whole nullability section into what you have here. The rest was fine.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r411597595", "createdAt": "2020-04-20T18:28:33Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,8 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+NOTE: You can enable nullability checks. For more details please see https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability docs].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dae3df2d06ed6a3d20442d7d6fb11fa8885f795"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23f72f5370c98701ff4c41f548c4c27f202bea06", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/23f72f5370c98701ff4c41f548c4c27f202bea06", "committedDate": "2020-04-20T20:55:39Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTA5MDk4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#pullrequestreview-396909098", "createdAt": "2020-04-21T00:30:19Z", "commit": {"oid": "23f72f5370c98701ff4c41f548c4c27f202bea06"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 435, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}