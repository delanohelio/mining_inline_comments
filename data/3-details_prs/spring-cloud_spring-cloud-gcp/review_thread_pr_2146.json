{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MTg3ODgy", "number": 2146, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDoyMDoxN1rODbW9ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToxNjo1MlrODbYBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDE0MzMxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMDoyMDoxN1rOFizM-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjozMDoxN1rOFi25cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzNDgwOA==", "bodyText": "remove @Param annotation", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372034808", "createdAt": "2020-01-28T20:20:17Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java", "diffHunk": "@@ -107,6 +107,8 @@\n \t@Query(\"select * from  test_entities_ci where size = @size\")\n \tTestEntityProjection getBySize(@Param(\"size\") long size);\n \n+\tSlice<TestEntityProjection> findBySize(@Param(\"size\") long size, Pageable pageable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTM0Nw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372095347", "createdAt": "2020-01-28T22:30:17Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java", "diffHunk": "@@ -107,6 +107,8 @@\n \t@Query(\"select * from  test_entities_ci where size = @size\")\n \tTestEntityProjection getBySize(@Param(\"size\") long size);\n \n+\tSlice<TestEntityProjection> findBySize(@Param(\"size\") long size, Pageable pageable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzNDgwOA=="}, "originalCommit": {"oid": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDMxNjI4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMToxNjo1MlrOFi04Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjozMDowOVrOFi25Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjIzNQ==", "bodyText": "Add assert on the property values.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372062235", "createdAt": "2020-01-28T21:16:52Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "diffHunk": "@@ -793,6 +793,23 @@ public void sameClassDescendantsTest() {\n \t\tassertThat(readCompany.leaders).hasSize(1);\n \t\tassertThat(readCompany.leaders.get(0).id).isEqualTo(entity1.id);\n \t}\n+\n+\t@Test\n+\tpublic void testSlicedEntityProjections() {\n+\t\ttestEntityRepository.saveAll(this.allTestEntities);\n+\t\ttestEntityRepository.save(new TestEntity(123L, \"red\", 1L, Shape.CIRCLE, null));\n+\t\ttestEntityRepository.save(new TestEntity(456L, \"blue\", 2L, Shape.CIRCLE, null));\n+\n+\t\tSlice<TestEntityProjection> testEntityProjectionSlice =\n+\t\t\t\ttestEntityRepository.findBySize(1L, PageRequest.of(0, 1));\n+\n+\t\tList<TestEntityProjection> testEntityProjections =\n+\t\t\t\ttestEntityProjectionSlice.get().collect(Collectors.toList());\n+\n+\t\tassertThat(testEntityProjections).hasSize(1);\n+\t\tassertThat(testEntityProjections.get(0)).isInstanceOf(TestEntityProjection.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTI5MQ==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372095291", "createdAt": "2020-01-28T22:30:09Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "diffHunk": "@@ -793,6 +793,23 @@ public void sameClassDescendantsTest() {\n \t\tassertThat(readCompany.leaders).hasSize(1);\n \t\tassertThat(readCompany.leaders.get(0).id).isEqualTo(entity1.id);\n \t}\n+\n+\t@Test\n+\tpublic void testSlicedEntityProjections() {\n+\t\ttestEntityRepository.saveAll(this.allTestEntities);\n+\t\ttestEntityRepository.save(new TestEntity(123L, \"red\", 1L, Shape.CIRCLE, null));\n+\t\ttestEntityRepository.save(new TestEntity(456L, \"blue\", 2L, Shape.CIRCLE, null));\n+\n+\t\tSlice<TestEntityProjection> testEntityProjectionSlice =\n+\t\t\t\ttestEntityRepository.findBySize(1L, PageRequest.of(0, 1));\n+\n+\t\tList<TestEntityProjection> testEntityProjections =\n+\t\t\t\ttestEntityProjectionSlice.get().collect(Collectors.toList());\n+\n+\t\tassertThat(testEntityProjections).hasSize(1);\n+\t\tassertThat(testEntityProjections.get(0)).isInstanceOf(TestEntityProjection.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjIzNQ=="}, "originalCommit": {"oid": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2199, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}