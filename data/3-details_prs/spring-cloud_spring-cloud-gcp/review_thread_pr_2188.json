{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjI5NzIx", "number": 2188, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyMjo0MFrODel_Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyNzozMlrODemE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDA2MjcwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyMjo0MFrOFn0S3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyMjo0MFrOFn0S3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NTU4MA==", "bodyText": "Can you put the index creating logic in a helper function and then put it in the @BeforeClass of the test? So that in the future if we have another test that needs an index it will be clear how to add it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2188#discussion_r377295580", "createdAt": "2020-02-10T20:22:40Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "diffHunk": "@@ -845,15 +850,34 @@ public void testPageableGqlEntityProjectionsSlice() {\n \t\tassertThat(testEntityProjections.get(0).getColor()).isEqualTo(\"blue\");\n \t}\n \n-\t//An index containing both \"color\" and \"size\" is required\n-\t@Ignore\n-\t@Test\n-\tpublic void testSliceString() {\n-\t\tSlice<String> slice =\n-\t\t\t\tthis.testEntityRepository.getSliceStringBySize(2L, PageRequest.of(0, 3));\n+\t@Test(timeout = 10000L)\n+\tpublic void testSliceString() throws IOException, URISyntaxException, InterruptedException {\n+\t\tURL resource = this.getClass().getResource(\"/index.yaml\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39039d90d68a819f8885c7d47662a8358d0ed85b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDA3NzQxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyNzozMlrOFn0b6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDoyNzozMlrOFn0b6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5Nzg5Nw==", "bodyText": "I don't think you need the try/catch to print an extra message for the user; it would be just as clear to add a 1-liner comment that the test may fail if running for the first time since it takes time to create the index.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2188#discussion_r377297897", "createdAt": "2020-02-10T20:27:32Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "diffHunk": "@@ -845,15 +850,34 @@ public void testPageableGqlEntityProjectionsSlice() {\n \t\tassertThat(testEntityProjections.get(0).getColor()).isEqualTo(\"blue\");\n \t}\n \n-\t//An index containing both \"color\" and \"size\" is required\n-\t@Ignore\n-\t@Test\n-\tpublic void testSliceString() {\n-\t\tSlice<String> slice =\n-\t\t\t\tthis.testEntityRepository.getSliceStringBySize(2L, PageRequest.of(0, 3));\n+\t@Test(timeout = 10000L)\n+\tpublic void testSliceString() throws IOException, URISyntaxException, InterruptedException {\n+\t\tURL resource = this.getClass().getResource(\"/index.yaml\");\n+\t\tFile file = Paths.get(resource.toURI()).toFile();\n+\n+\t\tProcess process = new ProcessBuilder(\"gcloud\", \"datastore\", \"indexes\", \"create\", file.getAbsolutePath(), \"-q\")\n+\t\t\t\t.start();\n+\n+\t\tif (process.waitFor() != 0 ){\n+\t\t\tthrow new RuntimeException(\"Error while creating index.\");\n+\t\t}\n+\n+\t\tSlice<String> slice;\n+\t\ttry {\n+\t\t\tslice = this.testEntityRepository.getSliceStringBySize(2L, PageRequest.of(0, 3));\n+\t\t}\n+\t\tcatch (DatastoreException e) {\n+\t\t\tif (e.getMessage().contains(\"no matching index found\")) {\n+\t\t\t\tthrow new RuntimeException(\n+\t\t\t\t\t\t\"The required index is not found. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39039d90d68a819f8885c7d47662a8358d0ed85b"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2234, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}