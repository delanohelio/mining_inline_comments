{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTYwNjg4", "number": 2307, "title": "support for nested properties in PartTree methods", "bodyText": "fixes #2305", "createdAt": "2020-04-08T00:07:09Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307", "merged": true, "mergeCommit": {"oid": "3c4d6fc6c0a59156ba7ccea661c1dee9a7519f17"}, "closed": true, "closedAt": "2020-04-09T13:58:27Z", "author": {"login": "dmitry-s"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVcax2gH2gAyNDAwNTYwNjg4OjVjYmJjMDkzNTY3MGI4MGVlZTllNzYyMjYwNjZhYTZjY2U1NTA4OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV84yCgFqTM5MDgxNDE2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5cbbc0935670b80eee9e76226066aa6cce55088a", "committedDate": "2020-04-08T00:05:05Z", "message": "support for nested properties in PartTree methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjA0NzQ1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#pullrequestreview-389604745", "createdAt": "2020-04-08T01:59:27Z", "commit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTo1OToyN1rOGCcWGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjowOToyMFrOGCcgcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNDc0NA==", "bodyText": "is this instanceof still needed? The newly parameterized List<OrPart> assumes the type.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405214744", "createdAt": "2020-04-08T01:59:27Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -117,7 +118,7 @@ private void validateAndSetFilterParts() {\n \t\t\t\t\t\"Cloud Datastore structured queries do not support the Distinct keyword.\");\n \t\t}\n \n-\t\tList parts = this.tree.get().collect(Collectors.toList());\n+\t\tList<OrPart> parts = this.tree.get().collect(Collectors.toList());\n \t\tif (parts.size() > 0) {\n \t\t\tif (parts.get(0) instanceof OrPart && parts.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNjczOA==", "bodyText": "Will this be easier to read as a helper method?\n.map(this::findProperty)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405216738", "createdAt": "2020-04-08T02:07:06Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -319,11 +320,20 @@ else if (pageable instanceof DatastorePageable) {\n \tprivate void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\tIterator it = Arrays.asList(parameters).iterator();\n \t\tFilter[] filters = this.filterParts.stream().map((part) -> {\n-\t\t\tDatastorePersistentProperty persistentProperty = (DatastorePersistentProperty) this.datastorePersistentEntity\n-\t\t\t\t\t.getPersistentProperty(part.getProperty().getSegment());\n+\t\t\tIterable<PropertyPath> iterable = () -> part.getProperty().iterator();\n+\t\t\tList<DatastorePersistentProperty> properties =\n+\t\t\t\t\tStreamSupport.stream(iterable.spliterator(), false)\n+\t\t\t\t\t.map(propertyPath -> {\n+\t\t\t\t\t\tDatastorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\t\t\tthis.datastoreMappingContext.getPersistentEntity(propertyPath.getOwningType());\n+\t\t\t\t\t\treturn persistentEntity.getPersistentProperty(propertyPath.getSegment());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIxNzM5NA==", "bodyText": "Is there possibility of property name clashes if parent class and child class both have a property named, say, name?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405217394", "createdAt": "2020-04-08T02:09:20Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -335,9 +345,9 @@ private void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\t\t\t\t\t\"Too few parameters are provided for query method: \" + getQueryMethod().getName());\n \t\t\t}\n \n-\t\t\tValue convertedValue = convertParam(persistentProperty, it.next());\n+\t\t\tValue convertedValue = convertParam(properties.get(properties.size() - 1), it.next());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjY2NTAz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#pullrequestreview-390266503", "createdAt": "2020-04-08T19:26:58Z", "commit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyNjo1OVrOGC9sNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxOToyOTowNFrOGC9wpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MTA3OA==", "bodyText": "In Firestore you call the method getPropertyName but here it's getFieldName. Is it too late to make them consistent?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405761078", "createdAt": "2020-04-08T19:26:59Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -319,11 +320,20 @@ else if (pageable instanceof DatastorePageable) {\n \tprivate void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\tIterator it = Arrays.asList(parameters).iterator();\n \t\tFilter[] filters = this.filterParts.stream().map((part) -> {\n-\t\t\tDatastorePersistentProperty persistentProperty = (DatastorePersistentProperty) this.datastorePersistentEntity\n-\t\t\t\t\t.getPersistentProperty(part.getProperty().getSegment());\n+\t\t\tIterable<PropertyPath> iterable = () -> part.getProperty().iterator();\n+\t\t\tList<DatastorePersistentProperty> properties =\n+\t\t\t\t\tStreamSupport.stream(iterable.spliterator(), false)\n+\t\t\t\t\t.map(propertyPath -> {\n+\t\t\t\t\t\tDatastorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\t\t\tthis.datastoreMappingContext.getPersistentEntity(propertyPath.getOwningType());\n+\t\t\t\t\t\treturn persistentEntity.getPersistentProperty(propertyPath.getSegment());\n+\t\t\t\t\t}).collect(Collectors.toList());\n+\n+\t\t\tString fieldName = properties.stream().map(DatastorePersistentProperty::getFieldName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc2MjIxNA==", "bodyText": "Put this block into a separate helper private method buildName like you did for Firestore?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#discussion_r405762214", "createdAt": "2020-04-08T19:29:04Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -319,11 +320,20 @@ else if (pageable instanceof DatastorePageable) {\n \tprivate void applySelectWithFilter(Object[] parameters, Builder builder) {\n \t\tIterator it = Arrays.asList(parameters).iterator();\n \t\tFilter[] filters = this.filterParts.stream().map((part) -> {\n-\t\t\tDatastorePersistentProperty persistentProperty = (DatastorePersistentProperty) this.datastorePersistentEntity\n-\t\t\t\t\t.getPersistentProperty(part.getProperty().getSegment());\n+\t\t\tIterable<PropertyPath> iterable = () -> part.getProperty().iterator();\n+\t\t\tList<DatastorePersistentProperty> properties =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cbbc0935670b80eee9e76226066aa6cce55088a"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d34dbe8f33c275ba8e9c2ef579737f9eb0e2d333", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d34dbe8f33c275ba8e9c2ef579737f9eb0e2d333", "committedDate": "2020-04-08T23:01:40Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c31cd20379a90a0b3dd036b80d12b38a9da044b0", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c31cd20379a90a0b3dd036b80d12b38a9da044b0", "committedDate": "2020-04-08T23:06:23Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODE0MTY5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2307#pullrequestreview-390814169", "createdAt": "2020-04-09T13:54:49Z", "commit": {"oid": "c31cd20379a90a0b3dd036b80d12b38a9da044b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 599, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}