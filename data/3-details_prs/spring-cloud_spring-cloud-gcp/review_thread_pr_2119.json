{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzQ5NTU0", "number": 2119, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0Nzo1N1rODX33FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0ODoxOVrODX335w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU5MDYwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-storage/src/main/java/org/springframework/cloud/gcp/storage/integration/inbound/GcsStreamingMessageSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0Nzo1N1rOFdaBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNjowNzowNVrOFdc9Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTQ0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @since 1.3\n          \n          \n            \n            \t * @since 1.2\n          \n      \n    \n    \n  \n\nLet's put it into the 1.2 branch as well.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2119#discussion_r366379441", "createdAt": "2020-01-14T14:47:57Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-storage/src/main/java/org/springframework/cloud/gcp/storage/integration/inbound/GcsStreamingMessageSource.java", "diffHunk": "@@ -44,6 +44,14 @@ public GcsStreamingMessageSource(RemoteFileTemplate<BlobInfo> template) {\n \t\tthis(template, null);\n \t}\n \n+\t/**\n+\t * Creates a {@link GcsStreamingMessageSource} with a {@code comparator} which controls the order\n+\t * that files are processed in.\n+\t * @param template template making remote file calls to Google Cloud Storage\n+\t * @param comparator defines the order that files should be processed based on {@link BlobInfo}.\n+   *\n+\t * @since 1.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d330c16b64df0ab6865438827e1224f909902bec"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQyNzQzOA==", "bodyText": "Will do.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2119#discussion_r366427438", "createdAt": "2020-01-14T16:07:05Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-storage/src/main/java/org/springframework/cloud/gcp/storage/integration/inbound/GcsStreamingMessageSource.java", "diffHunk": "@@ -44,6 +44,14 @@ public GcsStreamingMessageSource(RemoteFileTemplate<BlobInfo> template) {\n \t\tthis(template, null);\n \t}\n \n+\t/**\n+\t * Creates a {@link GcsStreamingMessageSource} with a {@code comparator} which controls the order\n+\t * that files are processed in.\n+\t * @param template template making remote file calls to Google Cloud Storage\n+\t * @param comparator defines the order that files should be processed based on {@link BlobInfo}.\n+   *\n+\t * @since 1.3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTQ0MQ=="}, "originalCommit": {"oid": "d330c16b64df0ab6865438827e1224f909902bec"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzU5MjcxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-storage/src/test/java/org/springframework/cloud/gcp/storage/integration/inbound/GcsStreamingMessageSourceTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0ODoxOVrOFdaCxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo0ODoxOVrOFdaCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM3OTcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t  // This uses the channel adapter with a custom comparator.\n          \n          \n            \n            \t  \t  // This uses the channel adapter with a custom comparator.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2119#discussion_r366379716", "createdAt": "2020-01-14T14:48:19Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-storage/src/test/java/org/springframework/cloud/gcp/storage/integration/inbound/GcsStreamingMessageSourceTests.java", "diffHunk": "@@ -60,24 +61,58 @@\n public class GcsStreamingMessageSourceTests {\n \n \t@Autowired\n-\tprivate PollableChannel gcsChannel;\n+\tprivate PollableChannel unsortedChannel;\n+\n+\t@Autowired\n+\tprivate PollableChannel sortedChannel;\n \n \t@Test\n \tpublic void testInboundStreamingChannelAdapter() {\n-\t\tMessage<?> message = this.gcsChannel.receive(5000);\n+\t\tMessage<?> message = this.unsortedChannel.receive(5000);\n+\t\tassertThat(message).isNotNull();\n+\t\tassertThat(message.getPayload()).isInstanceOf(InputStream.class);\n+\t\tassertThat(message.getHeaders().get(FileHeaders.REMOTE_FILE)).isEqualTo(\"gamma\");\n+\n+\t\tmessage = this.unsortedChannel.receive(5000);\n+\t\tassertThat(message.getHeaders().get(FileHeaders.REMOTE_FILE)).isEqualTo(\"beta\");\n+\t\tassertThat(message.getPayload()).isInstanceOf(InputStream.class);\n+\n+\t\tmessage = this.unsortedChannel.receive(5000);\n+\t\tassertThat(message.getHeaders().get(FileHeaders.REMOTE_FILE)).isEqualTo(\"alpha/alpha\");\n+\t\tassertThat(message.getPayload()).isInstanceOf(InputStream.class);\n \n+\t\tmessage = this.unsortedChannel.receive(10);\n+\t\tassertThat(message).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testSortedInboundChannelAdapter() {\n+\t  // This uses the channel adapter with a custom comparator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d330c16b64df0ab6865438827e1224f909902bec"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2369, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}