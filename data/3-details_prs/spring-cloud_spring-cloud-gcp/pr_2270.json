{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNzAyMzk5", "number": 2270, "title": "Polish Secret Manager Code", "bodyText": "Followup to secret manager version feature changes.\nContents of PR:\n\nFixes integration tests\nRename 'version' property to 'default-version' : I feel this more accurately conveys that when a user specifies a specific version of a secret it will override the default.\nFixes bug where if the default version doesn't exist for a particular secret it will now correctly be skipped instead of throw error.\nGeneral polish.", "createdAt": "2020-03-24T00:04:29Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270", "merged": true, "mergeCommit": {"oid": "a30ac3f6edd9a0c1892cd5ef5f013fc1d1289196"}, "closed": true, "closedAt": "2020-03-26T23:15:54Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQnSsNgH2gAyMzkyNzAyMzk5OjNiOGVhOWQ2Y2I0ZGQxMmRhNzgwYjQ0YTI0NGQ1NjZjNWQ3OGVmOGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRkf2dAFqTM4MjQ4MzI2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "committedDate": "2020-03-23T23:55:35Z", "message": "Polish Secret Manager code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzE5MTYz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#pullrequestreview-380319163", "createdAt": "2020-03-24T13:42:28Z", "commit": {"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo0MjoyOFrOF6wwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo1MToxM1rOF6xJ9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MDY0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | The default version that secrets will be read at, if a specific version for the secret is not configured.version\n          \n          \n            \n            | The default version that secrets will be read at, if a specific version for the secret is not configured.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397160644", "createdAt": "2020-03-24T13:42:28Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -51,7 +51,10 @@ Spring Cloud GCP Secret Manager offers several configuration properties to custo\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n | `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n-| `spring.cloud.gcp.secretmanager.version` | Defines a specific version of secrets to read from Secret Manager | No | \"latest\"\n+| `spring.cloud.gcp.secretmanager.default-version`\n+| The default version that secrets will be read at, if a specific version for the secret is not configured.version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Mjc2NA==", "bodyText": "Why not just catch NotFoundException here?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397162764", "createdAt": "2020-03-24T13:45:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -87,43 +86,49 @@ public Object getProperty(String name) {\n \t}\n \n \tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String version, Map<String, String> versions) {\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String defaultVersion, Map<String, String> versions) {\n \n \t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\n \t\tMap<String, Object> secretsMap = new HashMap<>();\n \t\tfor (Secret secret : response.iterateAll()) {\n \t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = resolveSecretVersion(client, projectId, version, versions, secretId);\n-\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, defaultVersion, versions);\n+\t\t\tif (secretPayload != null) {\n+\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\t}\n \t\t}\n \n \t\treturn secretsMap;\n \t}\n \n-\tprivate static ByteString resolveSecretVersion(SecretManagerServiceClient client, String projectId, String version, Map<String, String> versions, String secretId) {\n-\t\tif (!versions.isEmpty() && versions.containsKey(secretId)) {\n-\t\t\tString secretVersion = versions.get(secretId);\n-\t\t\treturn getSecretPayload(client, projectId, secretId, secretVersion);\n-\t\t}\n-\t\treturn getSecretPayload(client, projectId, secretId, resolveVersion(version));\n-\t}\n-\n-\tprivate static String resolveVersion(String version) {\n-\t\treturn StringUtils.hasText(version) ? version : LATEST_VERSION_STRING;\n-\t}\n-\n \tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretId, String version) {\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tString projectId,\n+\t\t\tString secretId,\n+\t\t\tString defaultVersion,\n+\t\t\tMap<String, String> versions) {\n+\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : defaultVersion;\n \n \t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n \t\t\t\t.setProject(projectId)\n \t\t\t\t.setSecret(secretId)\n \t\t\t\t.setSecretVersion(version)\n \t\t\t\t.build();\n \n-\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n-\t\treturn response.getPayload().getData();\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng==", "bodyText": "Notice that this will also happen when a specific secret.version is specified.\nI fear that this make it hard to debug mistakes in the client code.\nConsider adding another property to chose whether to skip silently or fail.\nSomething like failOnMissingSecretVersion.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397166796", "createdAt": "2020-03-24T13:50:48Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -87,43 +86,49 @@ public Object getProperty(String name) {\n \t}\n \n \tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String version, Map<String, String> versions) {\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String defaultVersion, Map<String, String> versions) {\n \n \t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\n \t\tMap<String, Object> secretsMap = new HashMap<>();\n \t\tfor (Secret secret : response.iterateAll()) {\n \t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = resolveSecretVersion(client, projectId, version, versions, secretId);\n-\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, defaultVersion, versions);\n+\t\t\tif (secretPayload != null) {\n+\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\t}\n \t\t}\n \n \t\treturn secretsMap;\n \t}\n \n-\tprivate static ByteString resolveSecretVersion(SecretManagerServiceClient client, String projectId, String version, Map<String, String> versions, String secretId) {\n-\t\tif (!versions.isEmpty() && versions.containsKey(secretId)) {\n-\t\t\tString secretVersion = versions.get(secretId);\n-\t\t\treturn getSecretPayload(client, projectId, secretId, secretVersion);\n-\t\t}\n-\t\treturn getSecretPayload(client, projectId, secretId, resolveVersion(version));\n-\t}\n-\n-\tprivate static String resolveVersion(String version) {\n-\t\treturn StringUtils.hasText(version) ? version : LATEST_VERSION_STRING;\n-\t}\n-\n \tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretId, String version) {\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tString projectId,\n+\t\t\tString secretId,\n+\t\t\tString defaultVersion,\n+\t\t\tMap<String, String> versions) {\n+\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : defaultVersion;\n \n \t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n \t\t\t\t.setProject(projectId)\n \t\t\t\t.setSecret(secretId)\n \t\t\t\t.setSecretVersion(version)\n \t\t\t\t.build();\n \n-\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n-\t\treturn response.getPayload().getData();\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tif (e instanceof NotFoundException) {\n+\t\t\t\tLOGGER.debug(\"Skipped loading secret \" + secretId + \" because it does not have version \" + defaultVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2NzA5Mw==", "bodyText": "Again, why not just catch NotFoundException?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397167093", "createdAt": "2020-03-24T13:51:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -202,19 +185,21 @@ private void createSecretPayload(String data) {\n \t\tclient.addSecretVersion(payloadRequest);\n \t}\n \n-\tprivate boolean secretExists(String secretId, String version) {\n-\t\tString projectId = projectIdProvider.getProjectId();\n-\t\tProjectName projectName = ProjectName.of(projectId);\n+\tprivate boolean secretExists(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n \t\tListSecretsPagedResponse listSecretsResponse = this.client.listSecrets(projectName);\n \t\treturn StreamSupport.stream(listSecretsResponse.iterateAll().spliterator(), false)\n-\t\t\t\t.filter(secret -> secret.getName().contains(secretId))\n-\t\t\t\t.anyMatch(secret -> {\n-\t\t\t\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n-\t\t\t\t\t\t\t.setProject(projectId)\n-\t\t\t\t\t\t\t.setSecret(secretId)\n-\t\t\t\t\t\t\t.setSecretVersion(version)\n-\t\t\t\t\t\t\t.build();\n-\t\t\t\t\treturn this.client.accessSecretVersion(secretVersionName) != null;\n-\t\t\t\t});\n+\t\t\t\t.anyMatch(secret -> secret.getName().contains(secretId));\n+\t}\n+\n+\tprivate void deleteSecret(String secretId) {\n+\t\ttry {\n+\t\t\tthis.client.deleteSecret(SecretName.of(this.projectIdProvider.getProjectId(), secretId));\n+\t\t}\n+\t\tcatch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d"}, "originalPosition": 242}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a07f087fa4d85b2264719a110482496e7861a4c", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1a07f087fa4d85b2264719a110482496e7861a4c", "committedDate": "2020-03-24T15:00:01Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0effcb4445f876e1e8aeec7593ca59846a82e9a", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c0effcb4445f876e1e8aeec7593ca59846a82e9a", "committedDate": "2020-03-26T15:40:52Z", "message": "remove default version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c723c634e89804678537d20a463e487a3e799b", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f6c723c634e89804678537d20a463e487a3e799b", "committedDate": "2020-03-26T15:43:21Z", "message": "Merge branch 'master' into polish-secretmanager\n\n# Conflicts:\n#\tdocs/src/main/asciidoc/secretmanager.adoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjkyODY1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#pullrequestreview-382292865", "createdAt": "2020-03-26T18:24:17Z", "commit": {"oid": "f6c723c634e89804678537d20a463e487a3e799b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ef782e0859dcf8499f5f45f7b8a78bfe936745", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c7ef782e0859dcf8499f5f45f7b8a78bfe936745", "committedDate": "2020-03-26T23:02:18Z", "message": "fix build"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDgzMjY3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#pullrequestreview-382483267", "createdAt": "2020-03-26T23:14:10Z", "commit": {"oid": "c7ef782e0859dcf8499f5f45f7b8a78bfe936745"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 580, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}