{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDMzNjA3", "number": 2302, "title": "Create protocol for specifying secrets' project and versions", "bodyText": "This creates a protocol for specifying secrets' projects and versions.\nThe protocol format uses the same conventions as https://github.com/GoogleCloudPlatform/github-actions/tree/master/get-secretmanager-secrets#inputs\n# 1. Long form\nspring.property=${secret-prefix:projects/<project-id>/secrets/<secret-id>/versions/<version-id>}\n\n# 2.  Long form - \"latest\" version\nspring.property=${secret-prefix:projects/<project-id>/secrets/<secret-id>}\n\n# 3. Short form\nspring.property=${secret-prefix:<project-id>/<secret-id>/<version-id>}\n\n# 4. Short form - default project; specify secret + version\nspring.property=${secret-prefix:<secret-id>/<version>} \n\n# 5. Shortest form - \"latest\" version and default project.\nspring.property=${secret-prefix:<secret-id>}\n\nSome further questions:\n\n\nHow to introduce this feature? And how to deprecate old way of specifying secrets? Can they co-exist for some time?\n\n\nWhich of the two approaches for specifying the default project do you like here: #2283 (comment) The OP makes a good point about how the #4 form above might be better replaced by <secret-id>/<version> with it defaulting to a project instead. However this approach comes with the drawback that it diverges from the github actions convention.\n\n\nPerhaps people need <secret-id>/<version-id> more based on discussion offline.", "createdAt": "2020-04-03T23:59:58Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302", "merged": true, "mergeCommit": {"oid": "e5c1b086f84d1e468c5ee155f6a5f5d09453a2b7"}, "closed": true, "closedAt": "2020-04-10T19:04:45Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUJ35XAH2gAyMzk4NDMzNjA3OjIyMjU3NWQ5NTdkYWM5Mzg3MzQyMmFlOTQzMTVlNzI4YzIyZDMwN2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWV4NUgFqTM5MTYwNzgwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "222575d957dac93873422ae94315e728c22d307d", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/222575d957dac93873422ae94315e728c22d307d", "committedDate": "2020-04-03T23:54:46Z", "message": "Create protocol for specifying secrets"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzM1NTQ0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-388335544", "createdAt": "2020-04-06T14:58:26Z", "commit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo1ODoyNlrOGBb7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowNDoyMFrOGBcMxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTI2MA==", "bodyText": "s/projectId/secretId", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404159260", "createdAt": "2020-04-06T14:58:26Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {\n+\n+\t// This prefix string distinguishes whether a property should be queried from Secret Manager or not.\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String secretId;\n+\n+\tprivate final String version;\n+\n+\tSecretManagerPropertyIdentifier(String projectId, String secretId, String version) {\n+\t\tAssert.notNull(projectId, \"Project Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Secret Id of GCP Secret Manager secret must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1OTQ3NA==", "bodyText": "s/projectId/version\nI leave these copy/paste problems all over the place when writing code; that's why I usually test trivial assert conditions -- they catch what I don't.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404159474", "createdAt": "2020-04-06T14:58:40Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {\n+\n+\t// This prefix string distinguishes whether a property should be queried from Secret Manager or not.\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String secretId;\n+\n+\tprivate final String version;\n+\n+\tSecretManagerPropertyIdentifier(String projectId, String secretId, String version) {\n+\t\tAssert.notNull(projectId, \"Project Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Secret Id of GCP Secret Manager secret must not be null\");\n+\t\tAssert.notNull(projectId, \"Version of GCP Secret Manager secret must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2Mzc4MQ==", "bodyText": "Do we want to have both resolvable? The new version is more comprehensive. Or are we doing it for backwards compatibility?\nPerhaps we could automatically configure only the newest property source, and provide a \"legacy\" property for  loading the old one?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404163781", "createdAt": "2020-04-06T15:04:20Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -60,11 +61,22 @@ public void setVersions(Map<String, String> versions) {\n \n \t@Override\n \tpublic PropertySource<?> locate(Environment environment) {\n-\t\treturn new SecretManagerPropertySource(\n-\t\t\t\tSECRET_MANAGER_NAME,\n-\t\t\t\tthis.client,\n-\t\t\t\tthis.projectIdProvider,\n-\t\t\t\tthis.secretsPrefix,\n-\t\t\t\tthis.versions);\n+\t\tCompositePropertySource compositePropertySource = new CompositePropertySource(SECRET_MANAGER_NAME);\n+\n+\t\tcompositePropertySource.addPropertySource(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69ea656a3327bca3cbab58d8e791a732a9b4a360", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/69ea656a3327bca3cbab58d8e791a732a9b4a360", "committedDate": "2020-04-06T16:33:04Z", "message": "Fix assert notNull statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9c75921e9cdee2238c1388fd2dce7076741db71", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d9c75921e9cdee2238c1388fd2dce7076741db71", "committedDate": "2020-04-06T16:34:09Z", "message": "reduce visibility of SecretManagerPropertyIdentifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDk3NzUz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-388497753", "createdAt": "2020-04-06T18:10:42Z", "commit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMDo0M1rOGBj6_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMDo0M1rOGBj6_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDMwMw==", "bodyText": "Consider different prefix usage", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404290303", "createdAt": "2020-04-06T18:10:43Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -11,4 +11,9 @@ spring.cloud.gcp.secretmanager.secret-name-prefix=secrets.\n #spring.cloud.gcp.secretmanager.versions.application-secret=1\n \n # You can directly load the secret into a variable like this example\n-my-application-secret=${secrets.application-secret}\n+# This demonstrates multiple ways of loading the same application secret using template syntax.\n+my-application-secret-1=${secrets.application-secret}\n+my-application-secret-2=${gcp-secret/projects/my-kubernetes-codelab-217414/secrets/application-secret}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDk4MzI5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-388498329", "createdAt": "2020-04-06T18:11:31Z", "commit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMTozMVrOGBj8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODoxMTozMVrOGBj8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI5MDc0MA==", "bodyText": "Can also be a project number for projects/ value", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404290740", "createdAt": "2020-04-06T18:11:31Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -11,4 +11,9 @@ spring.cloud.gcp.secretmanager.secret-name-prefix=secrets.\n #spring.cloud.gcp.secretmanager.versions.application-secret=1\n \n # You can directly load the secret into a variable like this example\n-my-application-secret=${secrets.application-secret}\n+# This demonstrates multiple ways of loading the same application secret using template syntax.\n+my-application-secret-1=${secrets.application-secret}\n+my-application-secret-2=${gcp-secret/projects/my-kubernetes-codelab-217414/secrets/application-secret}\n+my-application-secret-3=${gcp-secret/projects/my-kubernetes-codelab-217414/secrets/application-secret/version/latest}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTQxNDk0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-388541494", "createdAt": "2020-04-06T19:12:20Z", "commit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToxMjoyMFrOGBmG2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToxMjoyMFrOGBmG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMyNjEwNQ==", "bodyText": "I'm not sure you really need this class. Can you just use the existing SecretVersionName?\nI understand you need a place to put the parseFromProperty method somewhere, but maybe for now you can just put it as a static method in SecretManagerAccessPropertySource?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404326105", "createdAt": "2020-04-06T19:12:20Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertyIdentifier.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Identifiers for specifying Secret Manager secrets using (project-id, secret-id, version).\n+ *\n+ * @author Daniel Zou\n+ * @since 1.2.3\n+ */\n+public class SecretManagerPropertyIdentifier {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222575d957dac93873422ae94315e728c22d307d"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3d87209b182bbe381cc24408c4b161df2fb44b1e", "committedDate": "2020-04-06T22:49:47Z", "message": "PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MDg4MDY3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-389088067", "createdAt": "2020-04-07T12:57:58Z", "commit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MTE5OTI0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-389119924", "createdAt": "2020-04-07T13:33:46Z", "commit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozMzo0NlrOGCDxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzo0OToyM1rOGCEeYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA==", "bodyText": "Did the Secrets Manager team comment on this prefix? Have you looked into using sm://?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404812208", "createdAt": "2020-04-07T13:33:46Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMzU5Nw==", "bodyText": "Interesting that this still works.\nMaybe we should log a warning when this method is called?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404813597", "createdAt": "2020-04-07T13:35:42Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNDYwNQ==", "bodyText": "Would it be so bad to let users overwrite the prefix?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404814605", "createdAt": "2020-04-07T13:37:11Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerProperties.java", "diffHunk": "@@ -39,17 +36,6 @@\n \t */\n \tprivate String projectId;\n \n-\t/**\n-\t * Defines a prefix String that will be prepended to the environment property names\n-\t * of secrets in Secret Manager.\n-\t */\n-\tprivate String secretNamePrefix = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNTQxNw==", "bodyText": "Wouldn't this be considered an error if we got here? Not sure we should swallow the exception.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404815417", "createdAt": "2020-04-07T13:38:18Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxNzc3NA==", "bodyText": "Log an error or throw exception? Invalid format? etc.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404817774", "createdAt": "2020-04-07T13:41:32Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {\n+\t\tif (!property.startsWith(GCP_SECRET_PREFIX)) {\n+\t\t\treturn null;\n \t\t}\n \n-\t\treturn secretsMap;\n-\t}\n+\t\tString resourcePath = property.substring(GCP_SECRET_PREFIX.length());\n+\t\tString[] tokens = resourcePath.split(\"/\");\n \n-\tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tString projectId,\n-\t\t\tString secretId,\n-\t\t\tMap<String, String> versions) {\n+\t\tString projectId = projectIdProvider.getProjectId();\n+\t\tString secretId = null;\n+\t\tString version = \"latest\";\n \n-\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : LATEST_VERSION_STRING;\n+\t\tif (tokens.length == 1) {\n+\t\t\t// property is form \"gcp-secret/<secret-id>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t}\n+\t\telse if (tokens.length == 2) {\n+\t\t\t// property is form \"gcp-secret/<secret-id>/<version>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t\tversion = tokens[1];\n+\t\t}\n+\t\telse if (tokens.length == 3) {\n+\t\t\t// property is form \"gcp-secret/<project-id>/<secret-id>/<version-id>\"\n+\t\t\tprojectId = tokens[0];\n+\t\t\tsecretId = tokens[1];\n+\t\t\tversion = tokens[2];\n+\t\t}\n+\t\telse if (tokens.length == 4\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")) {\n+\t\t\t// property is form \"gcp-secret/projects/<project-id>/secrets/<secret-id>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t}\n+\t\telse if (tokens.length == 6\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")\n+\t\t\t\t&& tokens[4].equals(\"versions\")) {\n+\t\t\t// property is form \"gcp-secret/projects/<project-id>/secrets/<secret-id>/versions/<version>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t\tversion = tokens[5];\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMDUyOQ==", "bodyText": "Maybe add a test for just \"gcp-secret/\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404820529", "createdAt": "2020-04-07T13:45:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {\n+\n+\tprivate static final GcpProjectIdProvider DEFAULT_PROJECT_ID_PROVIDER = () -> \"defaultProject\";\n+\n+\t@Test\n+\tpublic void testNonSecret() {\n+\t\tString property = \"spring.cloud.datasource\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_secretId() {\n+\t\tString property = \"gcp-secret/the-secret\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTI1OA==", "bodyText": "The name doesn't match the class SecretManagerPropertySource.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404821258", "createdAt": "2020-04-07T13:46:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMTk5NA==", "bodyText": "Visible for testing?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404821994", "createdAt": "2020-04-07T13:47:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n+\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgyMzY0OA==", "bodyText": "Missing a test for getSecretPayload.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r404823648", "createdAt": "2020-04-07T13:49:23Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretPropertySourceTests.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import org.junit.Test;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+public class SecretPropertySourceTests {\n+\n+\tprivate static final GcpProjectIdProvider DEFAULT_PROJECT_ID_PROVIDER = () -> \"defaultProject\";\n+\n+\t@Test\n+\tpublic void testNonSecret() {\n+\t\tString property = \"spring.cloud.datasource\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier).isNull();\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_secretId() {\n+\t\tString property = \"gcp-secret/the-secret\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"defaultProject\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"latest\");\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_projectSecretId() {\n+\t\tString property = \"gcp-secret/the-secret/the-version\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"defaultProject\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"the-version\");\n+\t}\n+\n+\t@Test\n+\tpublic void testShortProperty_projectSecretIdVersion() {\n+\t\tString property = \"gcp-secret/my-project/the-secret/2\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"2\");\n+\t}\n+\n+\t@Test\n+\tpublic void testLongProperty_projectSecret() {\n+\t\tString property = \"gcp-secret/projects/my-project/secrets/the-secret\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"latest\");\n+\t}\n+\n+\t@Test\n+\tpublic void testLongProperty_projectSecretVersion() {\n+\t\tString property = \"gcp-secret/projects/my-project/secrets/the-secret/versions/3\";\n+\t\tSecretVersionName secretIdentifier =\n+\t\t\t\tSecretManagerPropertySource.parseFromProperty(property, DEFAULT_PROJECT_ID_PROVIDER);\n+\n+\t\tassertThat(secretIdentifier.getProject()).isEqualTo(\"my-project\");\n+\t\tassertThat(secretIdentifier.getSecret()).isEqualTo(\"the-secret\");\n+\t\tassertThat(secretIdentifier.getSecretVersion()).isEqualTo(\"3\");\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8d5fd238652c18e527ebc76cd1a9bbc97e00724", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f8d5fd238652c18e527ebc76cd1a9bbc97e00724", "committedDate": "2020-04-07T20:53:01Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "231b2087389e620fabfce011e0ade54bac314d68", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/231b2087389e620fabfce011e0ade54bac314d68", "committedDate": "2020-04-07T21:11:06Z", "message": "update sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae2c459f121ef09d34021031822911a47cdc251", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4ae2c459f121ef09d34021031822911a47cdc251", "committedDate": "2020-04-07T21:17:55Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f2060917754868815e1121c8b67916ac4f60396", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1f2060917754868815e1121c8b67916ac4f60396", "committedDate": "2020-04-07T21:22:21Z", "message": "Fix sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02680909f30699e39f9bf54718b379a253b2a80", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f02680909f30699e39f9bf54718b379a253b2a80", "committedDate": "2020-04-07T21:22:48Z", "message": "make private visibility for sample fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b01c339f347873e2151f49a387f3bcd4fc747c9", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5b01c339f347873e2151f49a387f3bcd4fc747c9", "committedDate": "2020-04-07T22:39:00Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f00e1c36d10185617d3f4c675ed2af477e19dd98", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f00e1c36d10185617d3f4c675ed2af477e19dd98", "committedDate": "2020-04-07T23:07:23Z", "message": "add visible for testing comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5OTkwMjE4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-389990218", "createdAt": "2020-04-08T13:47:02Z", "commit": {"oid": "f00e1c36d10185617d3f4c675ed2af477e19dd98"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0NzowM1rOGCwDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0OTo0MlrOGCwLHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNzY4Ng==", "bodyText": "Docs need to be updated following this change.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405537686", "createdAt": "2020-04-08T13:47:03Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -48,7 +49,7 @@\n @Configuration\n @EnableConfigurationProperties(GcpSecretManagerProperties.class)\n @ConditionalOnClass(SecretManagerServiceClient.class)\n-@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.bootstrap.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f00e1c36d10185617d3f4c675ed2af477e19dd98"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzOTYxNA==", "bodyText": "I'm not following fully. Let's discuss.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405539614", "createdAt": "2020-04-08T13:49:42Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,119 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n+import com.google.api.gax.rpc.NotFoundException;\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMjIwOA=="}, "originalCommit": {"oid": "3d87209b182bbe381cc24408c4b161df2fb44b1e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32a816506706d3f565744e5d7ef72b36ce1bcad6", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/32a816506706d3f565744e5d7ef72b36ce1bcad6", "committedDate": "2020-04-08T16:43:48Z", "message": "documentation updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d54c7d62de05e664f0d6e10d5c6551ca4282786f", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d54c7d62de05e664f0d6e10d5c6551ca4282786f", "committedDate": "2020-04-08T17:07:19Z", "message": "Update secret manager enabled property name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8b145f1f2caa7f77e814cb1df68670b3d9857fa7", "committedDate": "2020-04-08T17:10:09Z", "message": "remove enabled property from tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjA3ODU1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-390207855", "createdAt": "2020-04-08T18:02:54Z", "commit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODowMjo1NFrOGC6wLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoxNDozNlrOGC7K5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxMjk0Mg==", "bodyText": "Unused.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405712942", "createdAt": "2020-04-08T18:02:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -48,7 +49,7 @@\n @Configuration\n @EnableConfigurationProperties(GcpSecretManagerProperties.class)\n @ConditionalOnClass(SecretManagerServiceClient.class)\n-@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.bootstrap.enabled\")\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n public class GcpSecretManagerBootstrapConfiguration {\n \n \tprivate final GcpSecretManagerProperties properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxODE3MQ==", "bodyText": "Should this move to SecretManagerTemplate? We probably want to reconsider all those additional methods for specifying project and version and use the fully qualified secret identifiers instead.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405718171", "createdAt": "2020-04-08T18:11:57Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -16,117 +16,129 @@\n \n package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n \n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n import com.google.protobuf.ByteString;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n \n import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.core.env.EnumerablePropertySource;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n- * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n  *\n  * @author Daniel Zou\n  * @author Edd\u00fa Mel\u00e9ndez\n  * @since 1.2.2\n  */\n public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySource.class);\n-\n-\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n-\n-\tprivate final Map<String, Object> properties;\n+\tprivate static final String GCP_SECRET_PREFIX = \"gcp-secret/\";\n \n-\tprivate final String[] propertyNames;\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n \n \tpublic SecretManagerPropertySource(\n \t\t\tString propertySourceName,\n \t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix) {\n-\t\tthis(propertySourceName, client, projectIdProvider, secretsPrefix, Collections.EMPTY_MAP);\n-\t}\n-\n-\tpublic SecretManagerPropertySource(\n-\t\t\tString propertySourceName,\n-\t\t\tSecretManagerServiceClient client,\n-\t\t\tGcpProjectIdProvider projectIdProvider,\n-\t\t\tString secretsPrefix,\n-\t\t\tMap<String, String> versions) {\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n \t\tsuper(propertySourceName, client);\n \n-\t\tMap<String, Object> propertiesMap = createSecretsPropertiesMap(\n-\t\t\t\tclient, projectIdProvider.getProjectId(), secretsPrefix, versions);\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier = parseFromProperty(name, this.projectIdProvider);\n \n-\t\tthis.properties = propertiesMap;\n-\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t\tif (secretIdentifier != null) {\n+\t\t\treturn getSecretPayload(secretIdentifier);\n+\t\t}\n+\t\telse {\n+\t\t\treturn null;\n+\t\t}\n \t}\n \n+\t/**\n+\t * The {@link SecretManagerPropertySource} is not enumerable, so this always returns an empty array.\n+\t * @return the empty array.\n+\t */\n \t@Override\n \tpublic String[] getPropertyNames() {\n-\t\treturn propertyNames;\n+\t\treturn new String[0];\n \t}\n \n-\t@Override\n-\tpublic Object getProperty(String name) {\n-\t\treturn properties.get(name);\n+\tprivate ByteString getSecretPayload(SecretVersionName secretIdentifier) {\n+\t\tAccessSecretVersionResponse response = getSource().accessSecretVersion(secretIdentifier);\n+\t\treturn response.getPayload().getData();\n \t}\n \n-\tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, Map<String, String> versions) {\n-\n-\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\t\tMap<String, Object> secretsMap = new HashMap<>();\n-\t\tfor (Secret secret : response.iterateAll()) {\n-\t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, versions);\n-\t\t\tif (secretPayload != null) {\n-\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n-\t\t\t}\n+\t// Visible for Testing\n+\tstatic SecretVersionName parseFromProperty(String property, GcpProjectIdProvider projectIdProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcxOTc4MQ==", "bodyText": "Since now there is a single table of properties, we should move it up to be right under the dependency section, just like other chapters we have.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r405719781", "createdAt": "2020-04-08T18:14:36Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -80,12 +99,14 @@ The auto-configured `SecretManagerTemplate` bean can be customized using configu\n By default, Spring Cloud GCP Secret Manager will authenticate using Application Default Credentials.\n This can be overridden using the authentication properties.\n \n+NOTE: All of the below settings must be specified in a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[`bootstrap.properties`] (or `bootstrap.yaml`) file which is the properties file used to configure settings for bootstrap-phase Spring configuration.\n+\n |===\n | Name | Description | Required | Default value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b145f1f2caa7f77e814cb1df68670b3d9857fa7"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce82cb0626e8f9d07afab84952b74b090be9f94", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2ce82cb0626e8f9d07afab84952b74b090be9f94", "committedDate": "2020-04-08T19:00:49Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41c83f0d38bfe5a45f906d4e8df982ac3ed0351e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/41c83f0d38bfe5a45f906d4e8df982ac3ed0351e", "committedDate": "2020-04-08T21:02:22Z", "message": "template changes + refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1116fb8905b6bd3b96e10b94284e1250d928d4d3", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1116fb8905b6bd3b96e10b94284e1250d928d4d3", "committedDate": "2020-04-08T21:03:57Z", "message": "secret manager prefix change to sm://"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48a3a58c3ff64fe5b61ad13d1cababbb403607e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c48a3a58c3ff64fe5b61ad13d1cababbb403607e", "committedDate": "2020-04-08T21:11:04Z", "message": "add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/968e44a4c680abe0efe121122ea63b74cf374806", "committedDate": "2020-04-08T21:16:08Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDkwMDA3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-391090007", "createdAt": "2020-04-09T19:57:14Z", "commit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NzoxNFrOGDnTcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDowMDozOFrOGDnaSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjg2Ng==", "bodyText": "Do we really need a separate method for getting by URI?\nWe can easily detect that something is a URI and do it all in the existing getSecretString(String).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406442866", "createdAt": "2020-04-09T19:57:14Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -78,15 +94,13 @@\n \tString getSecretString(String secretId);\n \n \t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n+\t * Gets the secret payload of the secret looked up by {@code secretUri}.\n \t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param secretUri the Uri string identifying the secret.\n+\t * \t\tSee the javadoc for {@link SecretManagerOperations} for a summary of the URI syntax.\n \t * @return The secret payload as String\n \t */\n-\tString getSecretString(String secretId, String versionName);\n+\tString getSecretStringByUri(String secretUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0Mjk1NA==", "bodyText": "Same here.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406442954", "createdAt": "2020-04-09T19:57:24Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -97,38 +111,13 @@\n \tbyte[] getSecretBytes(String secretId);\n \n \t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n+\t * Gets the secret payload of the secret looked up by {@code secretUri}.\n \t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param secretUri the Uri string identifying the secret.\n+\t * \t\tSee the javadoc for {@link SecretManagerOperations} for a summary of the URI syntax.\n \t * @return The secret payload as byte[]\n \t */\n-\tbyte[] getSecretBytes(String secretId, String versionName);\n-\n-\t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName}.\n-\t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-\t * @return The secret payload as {@link ByteString}\n-\t */\n-\tByteString getSecretByteString(String secretId, String versionName);\n-\n-\t/**\n-\t * Gets the secret payload of the specified {@code secretId} at version\n-\t * {@code versionName} for a specific {@code projectId}.\n-\t *\n-\t * @param secretId unique identifier of your secret in Secret Manager.\n-\t * @param versionName which version of the secret to load. The version can be a version\n-\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n-\t * @param projectId unique identifier of your project.\n-\t * @return The secret payload as {@link ByteString}\n-\t */\n-\tByteString getSecretByteString(String secretId, String versionName, String projectId);\n+\tbyte[] getSecretBytesByUri(String secretUri);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0NDYxOA==", "bodyText": "Can we wire in the template and use it here?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406444618", "createdAt": "2020-04-09T20:00:38Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * A property source for Secret Manager which accesses the Secret Manager APIs when {@link #getProperty} is called.\n+ *\n+ * @author Daniel Zou\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ * @since 1.2.2\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\tSecretVersionName secretIdentifier =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968e44a4c680abe0efe121122ea63b74cf374806"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a81143bbd26db0ae7760e8d9aa3147565232f034", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a81143bbd26db0ae7760e8d9aa3147565232f034", "committedDate": "2020-04-10T18:49:42Z", "message": "PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjA3ODA4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#pullrequestreview-391607808", "createdAt": "2020-04-10T19:01:04Z", "commit": {"oid": "a81143bbd26db0ae7760e8d9aa3147565232f034"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMTowNVrOGEDD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxOTowMTowNVrOGEDD5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg5NzYzOQ==", "bodyText": "Assert.hasText instead maybe?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2302#discussion_r406897639", "createdAt": "2020-04-10T19:01:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerPropertyUtils.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Utilities for parsing Secret Manager properties.\n+ *\n+ * @author Daniel Zou\n+ */\n+final class SecretManagerPropertyUtils {\n+\n+\tprivate static final String GCP_SECRET_PREFIX = \"sm://\";\n+\n+\tprivate SecretManagerPropertyUtils() { }\n+\n+\tstatic SecretVersionName getSecretVersionName(String input, GcpProjectIdProvider projectIdProvider) {\n+\t\tif (!input.startsWith(GCP_SECRET_PREFIX)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tString resourcePath = input.substring(GCP_SECRET_PREFIX.length());\n+\t\tString[] tokens = resourcePath.split(\"/\");\n+\n+\t\tString projectId = projectIdProvider.getProjectId();\n+\t\tString secretId = null;\n+\t\tString version = \"latest\";\n+\n+\t\tif (tokens.length == 1) {\n+\t\t\t// property is form \"sm://<secret-id>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t}\n+\t\telse if (tokens.length == 2) {\n+\t\t\t// property is form \"sm://<secret-id>/<version>\"\n+\t\t\tsecretId = tokens[0];\n+\t\t\tversion = tokens[1];\n+\t\t}\n+\t\telse if (tokens.length == 3) {\n+\t\t\t// property is form \"sm://<project-id>/<secret-id>/<version-id>\"\n+\t\t\tprojectId = tokens[0];\n+\t\t\tsecretId = tokens[1];\n+\t\t\tversion = tokens[2];\n+\t\t}\n+\t\telse if (tokens.length == 4\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")) {\n+\t\t\t// property is form \"sm://projects/<project-id>/secrets/<secret-id>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t}\n+\t\telse if (tokens.length == 6\n+\t\t\t\t&& tokens[0].equals(\"projects\")\n+\t\t\t\t&& tokens[2].equals(\"secrets\")\n+\t\t\t\t&& tokens[4].equals(\"versions\")) {\n+\t\t\t// property is form \"sm://projects/<project-id>/secrets/<secret-id>/versions/<version>\"\n+\t\t\tprojectId = tokens[1];\n+\t\t\tsecretId = tokens[3];\n+\t\t\tversion = tokens[5];\n+\t\t}\n+\t\telse {\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"Unrecognized format for specifying a GCP Secret Manager secret: \" + input);\n+\t\t}\n+\n+\t\tAssert.isTrue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a81143bbd26db0ae7760e8d9aa3147565232f034"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 595, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}