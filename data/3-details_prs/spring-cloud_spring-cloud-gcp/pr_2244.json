{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzQ5OTk2", "number": 2244, "title": "Setup the Autoconfiguration for Firestore Emulator", "bodyText": "Add support for using the Firestore emulator.\n\nIt is now enabled with spring.cloud.gcp.firestore.emulator.enabled=true and host port set via spring.cloud.gcp.firestore.host-port=xxxx.\nIn order to get it to work, we must disable stream tokens in the firestore template if the emulator is disabled; see notes below.\n\nFixes #1956.\n\nPrevious Notes:\nIf you try to run the reactive firestore sample with the emulator, you will get the error:\n\"Resuming streams is not supported, do not set stream ID.\"\n\nThe emulator will throw an error if you attempt to set stream/resume tokens in the request. However, our reactive Firestore Template uses this functionality and includes these tokens in the requests: see code\nSo resolving #1956 may not be possible in the end. Maybe this could benefit from a second set of eyes too.", "createdAt": "2020-03-09T18:29:20Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244", "merged": true, "mergeCommit": {"oid": "85ff410f762de3fd56fd537fe634d3473101a135"}, "closed": true, "closedAt": "2020-04-21T13:58:51Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMCJBJAH2gAyMzg1NzQ5OTk2OmYwZjFjYjI4MjA1NWM4NTVmNTE1YWRhMGNiMjc3NWUyNjE4Mjc5YWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZxUQqAFqTM5NzIwNzUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0f1cb282055c855f515ada0cb2775e2618279ad", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f0f1cb282055c855f515ada0cb2775e2618279ad", "committedDate": "2020-03-09T18:22:50Z", "message": "Firestore Emulator setup WIP."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f48f9225d7fe2397f7e55066837cd6a756dbc7", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/06f48f9225d7fe2397f7e55066837cd6a756dbc7", "committedDate": "2020-04-13T18:47:19Z", "message": "Merge branch 'master' into firestore-emulator-wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6012dbac38e65556d2f30b8f87d2f912ba94889", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c6012dbac38e65556d2f30b8f87d2f912ba94889", "committedDate": "2020-04-13T20:27:49Z", "message": "fix property for emulator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b22c30a7b935e8166f52bcbe463032e822fa2981", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b22c30a7b935e8166f52bcbe463032e822fa2981", "committedDate": "2020-04-15T18:13:59Z", "message": "Merge branch 'master' into firestore-emulator-wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/641444a2d706aa20b7701b67b3ec038e932bd21b", "committedDate": "2020-04-15T18:35:35Z", "message": "template changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MDQ0MjY0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-394044264", "createdAt": "2020-04-15T18:49:58Z", "commit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0OTo1OFrOGGHDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MjoxMFrOGGHIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDE4Ng==", "bodyText": "-2020?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409060186", "createdAt": "2020-04-15T18:49:58Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDU4Mg==", "bodyText": "this property should be added in additional-spring-configuration-metadata.json", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409060582", "createdAt": "2020-04-15T18:50:41Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MTQ1Nw==", "bodyText": "emulatorCredentials sounds better. WDYT?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409061457", "createdAt": "2020-04-15T18:52:10Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore({\n+\t\tFirestoreReactiveAutoConfiguration.class, GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(fakeCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreGrpc.FirestoreStub firestoreGrpcStub() throws IOException {\n+\t\tManagedChannel channel = ManagedChannelBuilder\n+\t\t\t\t.forTarget(this.hostPort)\n+\t\t\t\t.usePlaintext()\n+\t\t\t\t.build();\n+\n+\t\treturn FirestoreGrpc.newStub(channel)\n+\t\t\t\t.withCallCredentials(MoreCallCredentials.from(fakeCredentials()))\n+\t\t\t\t.withExecutor(Runnable::run);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreTemplate firestoreTemplate(FirestoreGrpc.FirestoreStub firestoreStub,\n+\t\t\tFirestoreClassMapper classMapper, FirestoreMappingContext firestoreMappingContext) {\n+\t\tFirestoreTemplate template = new FirestoreTemplate(\n+\t\t\t\tfirestoreStub, this.firestoreRootPath, classMapper, firestoreMappingContext);\n+\t\ttemplate.setUsingStreamTokens(false);\n+\t\treturn template;\n+\t}\n+\n+\n+\tprivate static Credentials fakeCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c76a34be07d75da288c7c74e06c01e50255b01", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e9c76a34be07d75da288c7c74e06c01e50255b01", "committedDate": "2020-04-15T19:49:58Z", "message": "add best-effort tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef44d548a4df64ffc60157a5db3b62a395eb2502", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ef44d548a4df64ffc60157a5db3b62a395eb2502", "committedDate": "2020-04-15T20:10:37Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d7abd65152df32fc225f5065dcd18a714eedddd", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d7abd65152df32fc225f5065dcd18a714eedddd", "committedDate": "2020-04-15T20:15:07Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76548a81462b6ec697a76af5e1313e5163d511d", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c76548a81462b6ec697a76af5e1313e5163d511d", "committedDate": "2020-04-15T20:21:02Z", "message": "checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c3ec70929c023b978f4d9a21381a227dd6144d15", "committedDate": "2020-04-15T20:22:53Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MTE2MTcz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-394116173", "createdAt": "2020-04-15T20:37:00Z", "commit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozNzowMFrOGGKm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0MDozNVrOGGKt4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExODQxOQ==", "bodyText": "Don't need curly braces for a single class.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409118419", "createdAt": "2020-04-15T20:37:00Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTE1NA==", "bodyText": "property itself does not have a default value, does it?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409119154", "createdAt": "2020-04-15T20:38:28Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -54,6 +54,7 @@ The Spring Boot starter for Google Cloud Firestore provides the following config\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.firestore.enabled` | Enables or disables Firestore auto-configuration | No | `true`\n | `spring.cloud.gcp.firestore.project-id` | GCP project ID where the Google Cloud Firestore API is hosted, if different from the one in the <<spring-cloud-gcp-core,Spring Cloud GCP Core Module>> | No |\n+| `spring.cloud.gcp.firestore.host-port` | The host and port of the Firestore service; can be overridden to specify connecting to an already-running https://firebase.google.com/docs/emulator-suite/install_and_configure[Firestore emulator] instance. | No | `firestore.googleapis.com:443` (the host/port of official Firestore service)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw==", "bodyText": "\"my-project\" -- is it because it's a fake value that's unused? Can you leave a comment about that?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409119793", "createdAt": "2020-04-15T20:39:45Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDIyNA==", "bodyText": "static?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409120224", "createdAt": "2020-04-15T20:40:35Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));\n+\n+\t\treturn new Credentials() {\n+\t\t\t@Override\n+\t\t\tpublic String getAuthenticationType() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Map<String, List<String>> getRequestMetadata(URI uri) {\n+\t\t\t\treturn headerMap;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadata() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadataOnly() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void refresh() {\n+\t\t\t\t// no-op\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Reactive Firestore autoconfiguration to enable emulator use.\n+\t */\n+\t@ConditionalOnClass({ FirestoreGrpc.FirestoreStub.class, Flux.class })\n+\t@AutoConfigureBefore({ FirestoreReactiveAutoConfiguration.class })\n+\tclass ReactiveFirestoreEmulatorAutoConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NjU3OTk3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-394657997", "createdAt": "2020-04-16T13:56:30Z", "commit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo1NjozMFrOGGmkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjowMToxN1rOGGsYKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ==", "bodyText": "This is inconsistent with the Datastore emulator autoconfiguration that uses spring.cloud.gcp.datastore.emulator.enabled. We should instead use spring.cloud.gcp.firestore.emulator.enabled.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409576451", "createdAt": "2020-04-16T13:56:30Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTcyMA==", "bodyText": "Is there some better way to automatically detect that we're using the emulator by inspecting the FirestoreStub and looking for the host or something?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409671720", "createdAt": "2020-04-16T16:01:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -82,6 +82,8 @@\n \n \tprivate int writeBufferSize = FIRESTORE_WRITE_MAX_SIZE;\n \n+\tprivate boolean usingStreamTokens = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f017e12cd71848a76e4a748c7e7707b322377508", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f017e12cd71848a76e4a748c7e7707b322377508", "committedDate": "2020-04-17T22:10:28Z", "message": "PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTUxMjQw", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-396551240", "createdAt": "2020-04-20T15:15:11Z", "commit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxNToxMVrOGIZnHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxNToxMVrOGIZnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MTQwNw==", "bodyText": "Maybe just hardcode \"unused\" as project ID?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411461407", "createdAt": "2020-04-20T15:15:11Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzE5MjI3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-396719227", "createdAt": "2020-04-20T18:47:16Z", "commit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0NzoxN1rOGIioPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo1MTo1MlrOGIizfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTE0OQ==", "bodyText": "Can we have a little tiny section on Firestore Emulator, primary for discoverability?\nI think we have something similar for other emulators.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411609149", "createdAt": "2020-04-20T18:47:17Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -54,6 +54,7 @@ The Spring Boot starter for Google Cloud Firestore provides the following config\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.firestore.enabled` | Enables or disables Firestore auto-configuration | No | `true`\n | `spring.cloud.gcp.firestore.project-id` | GCP project ID where the Google Cloud Firestore API is hosted, if different from the one in the <<spring-cloud-gcp-core,Spring Cloud GCP Core Module>> | No |\n+| `spring.cloud.gcp.firestore.host-port` | The host and port of the Firestore service; can be overridden to specify connecting to an already-running https://firebase.google.com/docs/emulator-suite/install_and_configure[Firestore emulator] instance. | No | `firestore.googleapis.com:443` (the host/port of official Firestore service)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTU4OA==", "bodyText": "It still says @ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\").", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411609588", "createdAt": "2020-04-20T18:48:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMDgzNg==", "bodyText": "@since 1.2.3?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411610836", "createdAt": "2020-04-20T18:49:58Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -129,6 +131,24 @@ public int getWriteBufferSize() {\n \t\treturn this.writeBufferSize;\n \t}\n \n+\t/**\n+\t * Sets whether the {@link FirestoreTemplate} should attach stream resume tokens to write\n+\t * requests.\n+\t *\n+\t * <p>Note that this should always be set to true unless you are using the\n+\t * Firestore emulator in which case it should be set to false because the emulator\n+\t * does not support using resume tokens.\n+\t *\n+\t * @param usingStreamTokens whether the template\n+\t */\n+\tpublic void setUsingStreamTokens(boolean usingStreamTokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMjAzMA==", "bodyText": "Can we have some basic test for this class, even if we don't actually start the emulator as part of it? For example, we can test that the property used to turn it on actually works.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411612030", "createdAt": "2020-04-20T18:51:52Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0589fd236f2b2611e8796e7158656dc2d513683", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e0589fd236f2b2611e8796e7158656dc2d513683", "committedDate": "2020-04-20T20:47:36Z", "message": "add docs and test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTA5NzM5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-396909739", "createdAt": "2020-04-21T00:32:33Z", "commit": {"oid": "e0589fd236f2b2611e8796e7158656dc2d513683"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjA3NTEy", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#pullrequestreview-397207512", "createdAt": "2020-04-21T10:41:40Z", "commit": {"oid": "e0589fd236f2b2611e8796e7158656dc2d513683"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 570, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}