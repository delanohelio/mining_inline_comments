{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDY5NjI5", "number": 2168, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMDoxOFrODculsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNDo0NFrODdf4Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDUwMDMyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMDoxOFrOFk7Fxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoxMTowNVrOFl9w4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTE5MA==", "bodyText": "In general, what we've been recommending to integrators downstream is the following transformation:\n:pid/:sid => projects/:pid/secrets/:sid/versions/latest\n:pid/:sid/:vid => projects/:pid/secrets/:sid/versions/:vid\nprojects/:pid/secrets/:sid => projects/:pid/secrets/:sid/versions/latest\nprojects/:pid/secrets/:sid/versions/:vid => projects/:pid/secrets/:sid/versions/:vid\n\nThat way, the result of the parsing is always a fully-qualified secret version reference which you can pass directly to AccessSecretVersion without needing to complicate that method.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374261190", "createdAt": "2020-02-03T18:20:18Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Extracts the Secret ID from the {@link Secret}. The secret ID refers to the unique ID\n+\t * given to the secret when it is saved under a GCP project.\n+\t *\n+\t * <p>\n+\t * The secret ID is extracted from the full secret name of the form:\n+\t * projects/${PROJECT_ID}/secrets/${SECRET_ID}\n+\t */\n+\tprivate static String extractSecretId(Secret secret) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1MzU3MA==", "bodyText": "Noted, I simplified the method a bit more, but the .split() I am doing is somewhat inevitable because I need to get the shortened secret name which is used as the Key of the Spring environment property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375353570", "createdAt": "2020-02-05T16:11:05Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Extracts the Secret ID from the {@link Secret}. The secret ID refers to the unique ID\n+\t * given to the secret when it is saved under a GCP project.\n+\t *\n+\t * <p>\n+\t * The secret ID is extracted from the full secret name of the form:\n+\t * projects/${PROJECT_ID}/secrets/${SECRET_ID}\n+\t */\n+\tprivate static String extractSecretId(Secret secret) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTE5MA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDUwMzIyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxODoyMTowN1rOFk7HYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoxODoyM1rOFl-C7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA==", "bodyText": "Should probably document it in SpringBoot that only \"string\" secrets are accepted. Secret Manager accepts a wide character set for payload values.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374261600", "createdAt": "2020-02-03T18:21:07Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMjAyNA==", "bodyText": "public Object getProperty(String name)\nSo, I don't think we really need to convert all values to Strings. @dzou WDYT?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374322024", "createdAt": "2020-02-03T20:24:41Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNjg4Nw==", "bodyText": "Ah good point. I could just leave it as the SecretPayload which would be more flexible. Users would then be injecting/reading SecretPayload from the environment properties (instead of us forcing strings) and can convert the values to string or their preferred payload.\nDo you feel this is a reasonable approach?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374326887", "createdAt": "2020-02-03T20:36:01Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyODIwNg==", "bodyText": "Well, I think there might be problems with mapping to @ConfigurationProperties classes that have Strings and other basic Java types. It's something that we should test.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374328206", "createdAt": "2020-02-03T20:39:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyOTAwNw==", "bodyText": "You wouldn't want SecretPayload leaking into user code.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374329007", "createdAt": "2020-02-03T20:40:53Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMzMTAzMA==", "bodyText": "Spring does the conversion automatically. If there isn't a SecretPayload encode/decoder it would fail.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374331030", "createdAt": "2020-02-03T20:45:43Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMzMTYzOQ==", "bodyText": "Ohh ok, this SecretPayload object can really just be converted to two options: String or byte[].\n@spencergibb - How do I hook into this encode/decoder concept? (like which interfaces do I implement/register?) Is it possible for me to override getProperty(String propertyName, Class<T> targetType) such that if targetType is String I decode to string, and if the target type is byte[] I decode to byte[]?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374331639", "createdAt": "2020-02-03T20:46:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1ODE5MA==", "bodyText": "String and byte[] properties are now supported through registering custom SecretPayload converters. See: https://github.com/spring-cloud/spring-cloud-gcp/pull/2168/files#diff-04e47cc423dee80f0eb313f527e9f5b2R74-R90", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375358190", "createdAt": "2020-02-05T16:18:23Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(SecretManagerServiceClient client, String projectId) {\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tif (secretId != null) {\n+\t\t\t\tString secretName = SECRETS_NAMESPACE + secretId;\n+\t\t\t\tString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\t\tsecretsMap.put(secretName, secretPayload);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static String getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)\n+\t\t\t\t.build();\n+\n+\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\treturn response.getPayload().getData().toStringUtf8();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2MTYwMA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDc3ODA5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1MDoyN1rOFk9zIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1MDoyN1rOFk9zIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTU2OQ==", "bodyText": "Please add javadoc / author / version.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374305569", "createdAt": "2020-02-03T19:50:27Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")\n+public class GcpSecretManagerBootstrapConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDc4MDUzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxOTo1MToxN1rOFk90rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyMjozOFrOFl-Ncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTk2NA==", "bodyText": "havingValue = \"true\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374305964", "createdAt": "2020-02-03T19:51:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5MjQ4NQ==", "bodyText": "I think this should be disabled by default like our config management; otherwise all applications would be making RPCs to secret manager to list the secrets even if none exist.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374892485", "createdAt": "2020-02-04T20:01:34Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTk2NA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg5NTA2MA==", "bodyText": "Are there any required properties in GcpSecretManagerProperties?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374895060", "createdAt": "2020-02-04T20:07:16Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTk2NA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM1Mzg4Mw==", "bodyText": "There are no required properties.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375353883", "createdAt": "2020-02-05T16:11:35Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTk2NA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MDg4Mg==", "bodyText": "Added matchIfMIssing= true to enable by default and then also added @ConditionalOnClass(SecretManagerServiceClient.class) to make conditional on the addition of secret manager class to classpath.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375360882", "createdAt": "2020-02-05T16:22:38Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnProperty(\"spring.cloud.gcp.secretmanager.enabled\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMwNTk2NA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDgxMTcxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowMDo0N1rOFk-HlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowMDo0N1rOFk-HlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMDgwNQ==", "bodyText": "javadoc pls", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374310805", "createdAt": "2020-02-03T20:00:47Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDgxNzIwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowMjozOVrOFk-LLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyMjo1NlrOFl-OSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMTcyNw==", "bodyText": "Allow this to be configurable in GcpSecretManagerProperties?\nMaybe some people just want to load the properties directly without any prefix. Anything wrong with that?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374311727", "createdAt": "2020-02-03T20:02:39Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MTA5Ng==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375361096", "createdAt": "2020-02-05T16:22:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMTcyNw=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDgyNDAzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowNDo1NFrOFk-PZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyMzoyM1rOFl-PTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjgwNg==", "bodyText": "Maybe make this a constant?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374312806", "createdAt": "2020-02-03T20:04:54Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {\n+\n+\tprivate final SecretManagerServiceClient client;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tSecretManagerPropertySourceLocator(\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.client = client;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic PropertySource<?> locate(Environment environment) {\n+\t\treturn new SecretManagerPropertySource(\n+\t\t\t\t\"spring-cloud-gcp-secret-manager\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MTM1Nw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375361357", "createdAt": "2020-02-05T16:23:23Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {\n+\n+\tprivate final SecretManagerServiceClient client;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tSecretManagerPropertySourceLocator(\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.client = client;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic PropertySource<?> locate(Environment environment) {\n+\t\treturn new SecretManagerPropertySource(\n+\t\t\t\t\"spring-cloud-gcp-secret-manager\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjgwNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDg4MDA3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDoyMzozMVrOFk-xUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyNDoxOVrOFl-R1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTQ4OA==", "bodyText": "You're loading properties in the constructor. Would it make sense to allow users to reload the properties by providing a public \"refresh\" method to do it?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374321488", "createdAt": "2020-02-03T20:23:31Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcyOTc0OQ==", "bodyText": "More generally, test behavior of a@RefreshScope property in the sample. Ideally, triggering a refresh event should get those properties to expire.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374729749", "createdAt": "2020-02-04T15:12:42Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTQ4OA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MjAwNg==", "bodyText": "Regarding the refresh functionality, can I verify this in a separate PR? This would be something to verify through the addition of the sample app and a Properties class.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375362006", "createdAt": "2020-02-05T16:24:19Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String SECRETS_NAMESPACE = \"spring-cloud-gcp.secrets.\";\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(client, projectIdProvider.getProjectId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTQ4OA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDg5NDY5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDoyODo0M1rOFk-6PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjoyMzoxNFrOFl-PAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMzc3Mw==", "bodyText": "Can we have a test for when it's false too?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374323773", "createdAt": "2020-02-03T20:28:43Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MTI4Mw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375361283", "createdAt": "2020-02-05T16:23:14Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMzc3Mw=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDg5OTk4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozMDo0NFrOFk-9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNToxNjoxOVrOFlX1ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNDY0NA==", "bodyText": "This reminds me, do we want to create a SecretManagerTemplate? You would also put the secret reading in there.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374324644", "createdAt": "2020-02-03T20:30:44Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")\n+\t\t\t\t.run();\n+\n+\t\tthis.projectIdProvider = this.context.getBeanFactory().getBean(GcpProjectIdProvider.class);\n+\t\tthis.client = this.context.getBeanFactory().getBean(SecretManagerServiceClient.class);\n+\n+\t\tcreateSecret(TEST_SECRET_ID, \"the secret data\");\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testConfiguration() {\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"spring-cloud-gcp.secrets.my-secret\"))\n+\t\t\t\t.isEqualTo(\"the secret data.\");\n+\t}\n+\n+\t/**\n+\t * Creates the secret with the specified payload if the secret does not already exist.\n+\t */\n+\tprivate void createSecret(String secretId, String payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczMjEzOA==", "bodyText": "+1, and this would also go into the new module.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374732138", "createdAt": "2020-02-04T15:16:19Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.properties(\"spring.cloud.gcp.secretmanager.enabled=true\")\n+\t\t\t\t.run();\n+\n+\t\tthis.projectIdProvider = this.context.getBeanFactory().getBean(GcpProjectIdProvider.class);\n+\t\tthis.client = this.context.getBeanFactory().getBean(SecretManagerServiceClient.class);\n+\n+\t\tcreateSecret(TEST_SECRET_ID, \"the secret data\");\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testConfiguration() {\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"spring-cloud-gcp.secrets.my-secret\"))\n+\t\t\t\t.isEqualTo(\"the secret data.\");\n+\t}\n+\n+\t/**\n+\t * Creates the secret with the specified payload if the secret does not already exist.\n+\t */\n+\tprivate void createSecret(String secretId, String payload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNDY0NA=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzMzODYyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDozNDo1NlrOFlWNEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjozMDozN1rOFmJcNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg==", "bodyText": "I wonder if it makes sense to put this class into a new spring-cloud-gcp-secretmanager module. Then we could give people a single-dependency starter instead of having them bring in the autoconfiguration module combined with explicitly setting a property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374705426", "createdAt": "2020-02-04T14:34:56Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNjE2Nw==", "bodyText": "Shouldn't it just be conditional on class of the secret manager api rather than setting a property?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374736167", "createdAt": "2020-02-04T15:21:36Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDczNzI4NQ==", "bodyText": "+1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r374737285", "createdAt": "2020-02-04T15:23:20Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM2MjEzMg==", "bodyText": "Sounds good, we can discuss moving this in the next PR with the addition of secret template which will necessitate creating a the new secretmanager module. For now I am keeping the door open if we decide not to add a template class then this will mirror how our spring config support is organized (in which all the relevant classes are kept in autoconfigure/config).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375362132", "createdAt": "2020-02-05T16:24:33Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzI4NQ==", "bodyText": "Can we add a tracking issue to add a template?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375533285", "createdAt": "2020-02-05T22:02:01Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0NDg4NQ==", "bodyText": "Yes, this is tracked in #2176", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375544885", "createdAt": "2020-02-05T22:30:37Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySourceLocator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+\n+public class SecretManagerPropertySourceLocator implements PropertySourceLocator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwNTQyNg=="}, "originalCommit": {"oid": "d713b8c3f2e0c90be9acc82ad8d1e994e1e25fd1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU2MDc3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MDowM1rOFl-4ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo1NzoyNVrOFl_hHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MTkzOQ==", "bodyText": "Non-blocking, but a potential future optimization would be to parallelize this.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375371939", "createdAt": "2020-02-05T16:40:03Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsNamespace) {\n+\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4MjMwMA==", "bodyText": "Noted, added to #2176 to track.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375382300", "createdAt": "2020-02-05T16:57:25Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsNamespace) {\n+\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MTkzOQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU2MjY4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0MDozM1rOFl-54A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMzozN1rOFl_vkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MjI1Ng==", "bodyText": "I think people will want to access specific secret versions. Defaulting to \"latest\" is not a production best practice.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375372256", "createdAt": "2020-02-05T16:40:33Z", "author": {"login": "sethvargo"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsNamespace) {\n+\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\tsecretsMap.put(secretsNamespace + secretId, secretPayload);\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static ByteString getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NjAwMw==", "bodyText": "Ah good point, we'll definitely need an answer for this. I think we'll have to discuss a bit more in-depth with our team what is the best way to let users specify which secret versions they want to load into the environment; I guess we wouldn't want to load all versions of all secrets by default.\nI added this point to #2176 to track; we will definitely implement this before releasing to users. I just want this PR to setup the initial scaffolding.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375386003", "createdAt": "2020-02-05T17:03:37Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsNamespace) {\n+\n+\t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n+\n+\t\tHashMap<String, Object> secretsMap = new HashMap<>();\n+\t\tfor (Secret secret : response.iterateAll()) {\n+\t\t\tString secretId = extractSecretId(secret);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId);\n+\t\t\tsecretsMap.put(secretsNamespace + secretId, secretPayload);\n+\t\t}\n+\n+\t\treturn secretsMap;\n+\t}\n+\n+\tprivate static ByteString getSecretPayload(\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretId) {\n+\n+\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n+\t\t\t\t.setProject(projectId)\n+\t\t\t\t.setSecret(secretId)\n+\t\t\t\t.setSecretVersion(LATEST_VERSION_STRING)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3MjI1Ng=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTU5MzE0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNjo0ODo0OFrOFl_NUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozOTo0NlrOFmEs7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ==", "bodyText": "Asking the boot team if there is a better way than using a static method.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375377235", "createdAt": "2020-02-05T16:48:48Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4MTE2MA==", "bodyText": "If I'm not mistaken, you should just be able to register these as beans.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375381160", "createdAt": "2020-02-05T16:55:35Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4ODc3MA==", "bodyText": "Unfortunately this does not work; I did something like this:\npublic class GcpSecretManagerBootstrapConfiguration {\n\n  ... other beans ...\n\n\t@Bean\n\tpublic Converter<ByteString, String> getConverterA() {\n\t\treturn new Converter<ByteString, String>() {\n\t\t\t@Override\n\t\t\tpublic String convert(ByteString source) {\n\t\t\t\treturn source.toStringUtf8();\n\t\t\t}\n\t\t};\n\t}\n\n\t@Bean\n\tpublic Converter<ByteString, byte[]> getConverterB() {\n\t\treturn new Converter<ByteString, byte[]>() {\n\t\t\t@Override\n\t\t\tpublic byte[] convert(ByteString source) {\n\t\t\t\treturn source.toByteArray();\n\t\t\t}\n\t\t};\n\t}\n}", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375388770", "createdAt": "2020-02-05T17:08:29Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NjMwMg==", "bodyText": "Hmm, maybe injecting ConfigurableEnvironment and using ConfigurableEnvironment.getConversionService() rather than the static method then?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375396302", "createdAt": "2020-02-05T17:21:35Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTE0MA==", "bodyText": "I think the beans have to be annotated with @ConfigurationPropertiesBinding to be discoverable (based on this spring boot autodiscovery).", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375425140", "createdAt": "2020-02-05T18:18:13Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1OTI4NQ==", "bodyText": "that's specific to binding and ByteString isn't used in binding.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375459285", "createdAt": "2020-02-05T19:24:35Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2NzI0NA==", "bodyText": "The ConfigurableEnvironment method worked for me!", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375467244", "createdAt": "2020-02-05T19:39:46Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import javax.annotation.PostConstruct;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.convert.ApplicationConversionService;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterRegistry;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t@PostConstruct\n+\tpublic void init() {\n+\t\t// In this method, we register the converters which convert SecretPayload objects to\n+\t\t// Strings and byte[].\n+\t\tConverterRegistry converterRegistry = (ConverterRegistry) ApplicationConversionService.getSharedInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM3NzIzNQ=="}, "originalCommit": {"oid": "eedb338dd8f1b534402ce0896d9be151a37db9cb"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjE2MDY3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0Mjo0OVrOFmEzWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0ODo1MFrOFmE_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2ODg4OA==", "bodyText": "I wouldn't redefine a ConfigurableEnvironment bean. Just put it as a constuctor arg and call a method.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375468888", "createdAt": "2020-02-05T19:42:49Z", "author": {"login": "spencergibb"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t/**\n+\t * Registers {@link ByteString} type converters to convert to String and byte[].\n+\t */\n+\t@Bean\n+\tpublic ConfigurableEnvironment configurableEnvironment(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97819565f546c5a7a126ab16405b6d302b78bc5e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3MjAxMw==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375472013", "createdAt": "2020-02-05T19:48:50Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/GcpSecretManagerBootstrapConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.io.IOException;\n+\n+import com.google.api.gax.core.CredentialsProvider;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceSettings;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.bootstrap.config.PropertySourceLocator;\n+import org.springframework.cloud.gcp.core.DefaultCredentialsProvider;\n+import org.springframework.cloud.gcp.core.DefaultGcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.core.UserAgentHeaderProvider;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+\n+/**\n+ * Bootstrap Autoconfiguration for GCP Secret Manager which enables loading secrets as\n+ * properties into the application {@link org.springframework.core.env.Environment}.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+@Configuration\n+@EnableConfigurationProperties(GcpSecretManagerProperties.class)\n+@ConditionalOnClass(SecretManagerServiceClient.class)\n+@ConditionalOnProperty(value = \"spring.cloud.gcp.secretmanager.enabled\", matchIfMissing = true)\n+public class GcpSecretManagerBootstrapConfiguration {\n+\n+\tprivate final GcpSecretManagerProperties properties;\n+\n+\tprivate final CredentialsProvider credentialsProvider;\n+\n+\tprivate final GcpProjectIdProvider gcpProjectIdProvider;\n+\n+\tpublic GcpSecretManagerBootstrapConfiguration(GcpSecretManagerProperties properties)\n+\t\t\tthrows IOException {\n+\n+\t\tthis.properties = properties;\n+\t\tthis.credentialsProvider = new DefaultCredentialsProvider(properties);\n+\t\tthis.gcpProjectIdProvider = properties.getProjectId() != null\n+\t\t\t\t? properties::getProjectId\n+\t\t\t\t: new DefaultGcpProjectIdProvider();\n+\t}\n+\n+\t/**\n+\t * Registers {@link ByteString} type converters to convert to String and byte[].\n+\t */\n+\t@Bean\n+\tpublic ConfigurableEnvironment configurableEnvironment(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2ODg4OA=="}, "originalCommit": {"oid": "97819565f546c5a7a126ab16405b6d302b78bc5e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjU2MzkxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowMDowNVrOFmIrbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowMDowNVrOFmIrbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMjM5OA==", "bodyText": "This doesn't actually \"initialize\" the properties map because it has no side effect.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tprivate static Map<String, Object> initializePropertiesMap(\n          \n          \n            \n            \tprivate static Map<String, Object> readSecretsPropertiesMap(", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375532398", "createdAt": "2020-02-05T22:00:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.core.env.EnumerablePropertySource;\n+\n+/**\n+ * Retrieves secrets from GCP Secret Manager under the current GCP project.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerPropertySource extends EnumerablePropertySource<SecretManagerServiceClient> {\n+\n+\tprivate static final String LATEST_VERSION_STRING = \"latest\";\n+\n+\tprivate final Map<String, Object> properties;\n+\n+\tprivate final String[] propertyNames;\n+\n+\tpublic SecretManagerPropertySource(\n+\t\t\tString propertySourceName,\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tGcpProjectIdProvider projectIdProvider,\n+\t\t\tString secretsNamespace) {\n+\n+\t\tsuper(propertySourceName, client);\n+\n+\t\tMap<String, Object> propertiesMap = initializePropertiesMap(\n+\t\t\t\tclient, projectIdProvider.getProjectId(), secretsNamespace);\n+\n+\t\tthis.properties = propertiesMap;\n+\t\tthis.propertyNames = propertiesMap.keySet().toArray(new String[propertiesMap.size()]);\n+\t}\n+\n+\t@Override\n+\tpublic String[] getPropertyNames() {\n+\t\treturn propertyNames;\n+\t}\n+\n+\t@Override\n+\tpublic Object getProperty(String name) {\n+\t\treturn properties.get(name);\n+\t}\n+\n+\tprivate static Map<String, Object> initializePropertiesMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114eb1af71f06a8cbc52d24980eae0d048cd196e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjU3NjMxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNDo0NFrOFmIzNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowNDo0NFrOFmIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNDM5MQ==", "bodyText": "\"the secret data.\".getBytes() or something like that instead?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2168#discussion_r375534391", "createdAt": "2020-02-05T22:04:44Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.secretmanager.it;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.protobuf.ByteString;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.springframework.boot.WebApplicationType;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.cloud.gcp.autoconfigure.core.GcpContextAutoConfiguration;\n+import org.springframework.cloud.gcp.autoconfigure.secretmanager.GcpSecretManagerBootstrapConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.context.ConfigurableApplicationContext;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assumptions.assumeThat;\n+\n+public class SecretManagerIntegrationTests {\n+\n+\tprivate static final String TEST_SECRET_ID = \"my-secret\";\n+\n+\tprivate ConfigurableApplicationContext context;\n+\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\tprivate SecretManagerServiceClient client;\n+\n+\t@BeforeClass\n+\tpublic static void prepare() {\n+\t\tassumeThat(System.getProperty(\"it.secretmanager\"))\n+\t\t\t\t.as(\"Secret manager integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.secretmanager=true' to enable them.\")\n+\t\t\t\t.isEqualTo(\"true\");\n+\t}\n+\n+\t@Before\n+\tpublic void setupSecretManager() {\n+\t\tthis.context = new SpringApplicationBuilder()\n+\t\t\t\t.sources(GcpContextAutoConfiguration.class, GcpSecretManagerBootstrapConfiguration.class)\n+\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t.run();\n+\n+\t\tthis.projectIdProvider = this.context.getBeanFactory().getBean(GcpProjectIdProvider.class);\n+\t\tthis.client = this.context.getBeanFactory().getBean(SecretManagerServiceClient.class);\n+\n+\t\tcreateSecret(TEST_SECRET_ID, \"the secret data\");\n+\t}\n+\n+\t@After\n+\tpublic void close() {\n+\t\tif (this.context != null) {\n+\t\t\tthis.context.close();\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testConfiguration() {\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"my-secret\"))\n+\t\t\t\t.isEqualTo(\"the secret data.\");\n+\n+\t\tbyte[] byteArraySecret = this.context.getEnvironment().getProperty(\"my-secret\", byte[].class);\n+\n+\t\t// This byte array is the equivalent representation to \"the secret data.\"\n+\t\tassertThat(byteArraySecret).isEqualTo(\n+\t\t\t\tnew byte[] { 116, 104, 101, 32, 115, 101, 99, 114, 101, 116, 32, 100, 97, 116, 97, 46 });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114eb1af71f06a8cbc52d24980eae0d048cd196e"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2221, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}