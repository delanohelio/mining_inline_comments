{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDMxNTY5", "number": 2335, "title": "Datastore Projections should restrict query to contain only the necessary fields", "bodyText": "fixes #2145", "createdAt": "2020-04-27T11:16:23Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335", "merged": true, "mergeCommit": {"oid": "048e60e6141de16a17a5933498ed90389a282245"}, "closed": true, "closedAt": "2020-04-28T21:01:04Z", "author": {"login": "dmitry-s"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbtULGAH2gAyNDA5NDMxNTY5OjJlYTQyZTIyODdhMTYwNjA5ZjQ0NzU0ZGQwYjg1YmE2NmU4MGUyYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccIcMkAFqTQwMjExNTUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2ea42e2287a160609f44754dd0b85ba66e80e2c3", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2ea42e2287a160609f44754dd0b85ba66e80e2c3", "committedDate": "2020-04-27T11:09:48Z", "message": "request only the fields that a projection needs in for PartTree queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb89279ae33792f8a9337be180c3f9b1f21021e", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/bdb89279ae33792f8a9337be180c3f9b1f21021e", "committedDate": "2020-04-27T11:13:55Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/231cbcc0089dcfdaabbcc4461974828edda68bd4", "committedDate": "2020-04-27T11:21:16Z", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into datastore-projection-fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMDM5NDEy", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#pullrequestreview-401039412", "createdAt": "2020-04-27T15:00:01Z", "commit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTowMDowMVrOGMnzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTowMDowMVrOGMnzeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4ODI0OA==", "bodyText": "Combine with the line above?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r415888248", "createdAt": "2020-04-27T15:00:01Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjkwMTkx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#pullrequestreview-401290191", "createdAt": "2020-04-27T20:12:13Z", "commit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxMjoxM1rOGM1rPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyMzoyNVrOGM2GGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNTUxOQ==", "bodyText": "Maybe add an additional few words describing what the purpose of projection factory/what its used for here?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416115519", "createdAt": "2020-04-27T20:12:13Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -99,15 +107,17 @@\n \t * @param datastoreTemplate used to execute the given query.\n \t * @param datastoreMappingContext used to provide metadata for mapping results to objects.\n \t * @param entityType the result domain type.\n+\t * @param projectionFactory the projection factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNzUwNA==", "bodyText": "This parameters variable is never used?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416117504", "createdAt": "2020-04-27T20:15:38Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExODc5Mw==", "bodyText": "In what cases would the returned projectInformation be null?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416118793", "createdAt": "2020-04-27T20:17:38Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTYxNw==", "bodyText": "Maybe add a javadoc comment to help describe what this helper method is doing? I guess it's looking at what fields will be needed from the return obj and then constructing a query object containing only those fields?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416119617", "createdAt": "2020-04-27T20:18:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyMjM5NQ==", "bodyText": "This is optional but I am starting to get confused with the Supplier thing - maybe if you find you're always calling getQueryBuilderSupplier(parameters).get() here, you can take the opportunity to just have getQueryBuilder() return the query builder directly rather than a supplier and then call .get().\nBut if it's gonna be a big refactor job then just ignore this comment.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416122395", "createdAt": "2020-04-27T20:23:25Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&\n+\t\t\t\tprojectionInformation.getType() != this.entityType\n+\t\t\t\t&& projectionInformation.isClosed()) {\n+\t\t\tProjectionEntityQuery.Builder projectionEntityQueryBuilder = Query.newProjectionEntityQueryBuilder();\n+\t\t\tprojectionInformation.getInputProperties().forEach(propertyDescriptor -> {\n+\t\t\t\tprojectionEntityQueryBuilder.addProjection(mapToFieldName(propertyDescriptor));\n+\t\t\t});\n+\t\t\tqueryBuilderSupplier = () -> projectionEntityQueryBuilder;\n+\t\t}\n+\t\treturn queryBuilderSupplier;\n+\t}\n+\n+\n+\tprivate String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n+\t\tString name = propertyDescriptor.getName();\n+\t\tDatastorePersistentProperty persistentProperty =\n+\t\t\t\t(DatastorePersistentProperty) this.datastorePersistentEntity.getPersistentProperty(name);\n+\t\treturn persistentProperty.getFieldName();\n+\t}\n+\n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tEntityQuery.Builder builder = StructuredQuery.newEntityQueryBuilder()\n+\t\tStructuredQuery.Builder builder = getQueryBuilderSupplier(parameters).get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43dee9effcddbd24154fd18d4f1410f1d65a4f04", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/43dee9effcddbd24154fd18d4f1410f1d65a4f04", "committedDate": "2020-04-27T20:36:51Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e4bf91f4bb976061e1e6f66897b9829380c31c7", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6e4bf91f4bb976061e1e6f66897b9829380c31c7", "committedDate": "2020-04-27T22:41:04Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f702246316b61a2f66ae1b5f68e6015e88333f80", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f702246316b61a2f66ae1b5f68e6015e88333f80", "committedDate": "2020-04-27T23:32:38Z", "message": "PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8b02bffe235fee6c576c8c09014208da6aef2140", "committedDate": "2020-04-28T11:49:37Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODMwMTEx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#pullrequestreview-401830111", "createdAt": "2020-04-28T13:24:21Z", "commit": {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDoyMVrOGNT0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDo0NlrOGNT1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwOTM1Mw==", "bodyText": "There's way too much conditional logic in this method and many fragments are repeated.\nI think it needs to be refactored to be more readable and maintainable.\nWe can do it in a meeting, if you want.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416609353", "createdAt": "2020-04-28T13:24:21Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -176,37 +185,29 @@ public Object execute(Object[] parameters) {\n \t}\n \n \tprivate Object execute(Object[] parameters, Class returnedElementType, Class<?> collectionType, boolean total) {\n-\t\tSupplier<StructuredQuery.Builder<?>> queryBuilderSupplier = StructuredQuery::newKeyQueryBuilder;\n-\t\tFunction<T, ?> mapper = Function.identity();\n-\n \t\tboolean returnedTypeIsNumber = Number.class.isAssignableFrom(returnedElementType)\n \t\t\t\t|| returnedElementType == int.class || returnedElementType == long.class;\n \n \t\tboolean isCountingQuery = this.tree.isCountProjection()\n \t\t\t\t|| (this.tree.isDelete() && returnedTypeIsNumber) || total;\n \n-\t\tCollector<?, ?, ?> collector = Collectors.toList();\n-\t\tif (isCountingQuery && !this.tree.isDelete()) {\n-\t\t\tcollector = Collectors.counting();\n-\t\t}\n-\t\telse if (this.tree.isExistsProjection()) {\n-\t\t\tcollector = Collectors.collectingAndThen(Collectors.counting(), (count) -> count > 0);\n-\t\t}\n-\t\telse if (!returnedTypeIsNumber) {\n-\t\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n-\t\t\tmapper = this::processRawObjectForProjection;\n-\t\t}\n+\t\tStructuredQuery.Builder<?> structuredQueryBuilder =\n+\t\t\t\t!((isCountingQuery && !this.tree.isDelete()) || this.tree.isExistsProjection())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwOTY4Mg==", "bodyText": "Can we come up with a better name for the method?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416609682", "createdAt": "2020-04-28T13:24:46Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +224,49 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Collector<?, ?, ?> getCollector(boolean isCountingQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140"}, "originalPosition": 122}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d41d5aaed50191e871e6f18b1bbe06d46bce6fa3", "author": {"user": {"login": "dmitry-s", "name": null}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d41d5aaed50191e871e6f18b1bbe06d46bce6fa3", "committedDate": "2020-04-28T16:29:39Z", "message": "Revert \"PR comments\"\n\nThis reverts commit 8b02bffe235fee6c576c8c09014208da6aef2140."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMTEzODk3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#pullrequestreview-402113897", "createdAt": "2020-04-28T18:43:49Z", "commit": {"oid": "d41d5aaed50191e871e6f18b1bbe06d46bce6fa3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMTE1NTEy", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#pullrequestreview-402115512", "createdAt": "2020-04-28T18:46:00Z", "commit": {"oid": "d41d5aaed50191e871e6f18b1bbe06d46bce6fa3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 440, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}