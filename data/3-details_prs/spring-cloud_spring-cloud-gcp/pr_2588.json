{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzcwNDA1", "number": 2588, "title": "(Cherrypick) Allow for manually specifying BigQuery table schema", "bodyText": "This adds an interface method to the BigQueryTemplate which allows you to specify an explicit schema if you don't want to rely on schema autodetection on your dataset.\nFixes #2576\n(cherry picked from commit 283cd16)\nSource: GoogleCloudPlatform/spring-cloud-gcp#108", "createdAt": "2020-11-10T21:19:47Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2588", "merged": true, "mergeCommit": {"oid": "a5c85093f08b1e9bb6412011a57e3236b22e1ab4"}, "closed": true, "closedAt": "2020-11-11T18:02:49Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbQEOOgH2gAyNTE4NzcwNDA1OjY3YTBhYjA2ZjI0MjVkY2ZiYjk4ZWQzMjQ5ZjBjNmU1NmE5NGNhMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbd6UMAFqTUyODE2Njg2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23", "committedDate": "2020-11-10T21:16:17Z", "message": "Allow for manually specifying BigQuery table schema (#108)\n\nRelates to https://github.com/spring-cloud/spring-cloud-gcp/issues/2576\n\n(cherry picked from commit 283cd16effa144262c57846e55c6a6169ba0dbc1)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NjIwMDYw", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2588#pullrequestreview-527620060", "createdAt": "2020-11-10T21:26:07Z", "commit": {"oid": "67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTY2ODYx", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2588#pullrequestreview-528166861", "createdAt": "2020-11-11T13:23:44Z", "commit": {"oid": "67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoyMzo0NFrOHxM9xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzoyMzo0NFrOHxM9xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM1NDY5NA==", "bodyText": "Is it possible that concurrent tests would mean this executor pool has size > 1? Is there something more meaningfully checked in the queue item?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2588#discussion_r521354694", "createdAt": "2020-11-11T13:23:44Z", "author": {"login": "ttomsu"}, "path": "spring-cloud-gcp-bigquery/src/test/java/org/springframework/cloud/gcp/bigquery/integration/outbound/BigQueryFileMessageHandlerIntegrationTests.java", "diffHunk": "@@ -85,6 +89,46 @@ public void setup() {\n \t\tthis.bigquery.delete(TableId.of(DATASET_NAME, TABLE_NAME));\n \t}\n \n+\t@Test\n+\tpublic void testLoadFileWithSchema() throws InterruptedException, ExecutionException {\n+\t\tSchema schema = Schema.of(\n+\t\t\t\tField.newBuilder(\"CountyId\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build(),\n+\t\t\t\tField.newBuilder(\"State\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build(),\n+\t\t\t\tField.newBuilder(\"County\", StandardSQLTypeName.STRING).setMode(Mode.NULLABLE).build()\n+\t\t);\n+\n+\t\tHashMap<String, Object> messageHeaders = new HashMap<>();\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.TABLE_NAME, TABLE_NAME);\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.FORMAT_OPTIONS, FormatOptions.csv());\n+\t\tmessageHeaders.put(BigQuerySpringMessageHeaders.TABLE_SCHEMA, schema);\n+\n+\t\tMessage<File> message = MessageBuilder.createMessage(\n+\t\t\t\tnew File(\"src/test/resources/data.csv\"),\n+\t\t\t\tnew MessageHeaders(messageHeaders));\n+\n+\t\tListenableFuture<Job> jobFuture =\n+\t\t\t\t(ListenableFuture<Job>) this.messageHandler.handleRequestMessage(message);\n+\n+\t\t// Assert that a BigQuery polling task is scheduled successfully.\n+\t\tawait().atMost(Duration.FIVE_SECONDS)\n+\t\t\t\t.untilAsserted(\n+\t\t\t\t\t\t() -> assertThat(\n+\t\t\t\t\t\t\t\tthis.taskScheduler.getScheduledThreadPoolExecutor().getQueue()).hasSize(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a0ab06f2425dcfbb98ed3249f0c6e56a94ca23"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 422, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}