{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODcwODcx", "number": 2471, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyODoxNFrOEQuZIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyOToyMlrOEQuavg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTcyNzcwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyODoxNFrOG1CbPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDo0NjowMVrOG1JH9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzQ1NQ==", "bodyText": "So the check for value instanceof NullValue is not needed?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458267455", "createdAt": "2020-07-21T17:28:14Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -765,31 +767,13 @@ private DatastoreReaderWriter getDatastoreReadWriter() {\n \t\tmatcherAccessor.getPropertySpecifiers();\n \t\tLinkedList<StructuredQuery.Filter> filters = new LinkedList<>();\n \t\tpersistentEntity.doWithColumnBackedProperties((persistentProperty) -> {\n-\n-\t\t\tif (!example.getMatcher().isIgnoredPath(persistentProperty.getName())) {\n-\t\t\t\t// ID properties are not stored as regular fields in Datastore.\n-\t\t\t\tString fieldName = persistentProperty.getFieldName();\n-\t\t\t\tValue<?> value;\n-\t\t\t\tif (persistentProperty.isIdProperty()) {\n-\t\t\t\t\tPersistentPropertyAccessor accessor = persistentEntity.getPropertyAccessor(probe);\n-\t\t\t\t\tObject property = accessor.getProperty(persistentProperty);\n-\t\t\t\t\tvalue = property != null\n-\t\t\t\t\t\t\t\t\t? KeyValue.of(createKey(persistentEntity.kindName(), property))\n-\t\t\t\t\t\t\t\t\t: NullValue.of();\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tvalue = probeEntity.getValue(fieldName);\n-\t\t\t\t}\n-\t\t\t\tif (value instanceof NullValue\n-\t\t\t\t\t\t&& example.getMatcher().getNullHandler() != ExampleMatcher.NullHandler.INCLUDE) {\n-\t\t\t\t\t//skip null value\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tfilters.add(StructuredQuery.PropertyFilter.eq(fieldName, value));\n+\t\t\tif (notIgnoredProperty(example, persistentProperty)) {\n+\t\t\t\tValue<?> value = getValue(example, probeEntity, persistentEntity, persistentProperty);\n+\t\t\t\tNullHandler nullHandler = example.getMatcher().getNullHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf279d7fa1135764545c8ffe4c791a98a4ef243"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NDM5MA==", "bodyText": "It is still required. NullHandler just indicates if we need to include null valued fields or not, and value instanceof NullValue is a check to see if a field holds a null value.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458344390", "createdAt": "2020-07-21T19:43:44Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -765,31 +767,13 @@ private DatastoreReaderWriter getDatastoreReadWriter() {\n \t\tmatcherAccessor.getPropertySpecifiers();\n \t\tLinkedList<StructuredQuery.Filter> filters = new LinkedList<>();\n \t\tpersistentEntity.doWithColumnBackedProperties((persistentProperty) -> {\n-\n-\t\t\tif (!example.getMatcher().isIgnoredPath(persistentProperty.getName())) {\n-\t\t\t\t// ID properties are not stored as regular fields in Datastore.\n-\t\t\t\tString fieldName = persistentProperty.getFieldName();\n-\t\t\t\tValue<?> value;\n-\t\t\t\tif (persistentProperty.isIdProperty()) {\n-\t\t\t\t\tPersistentPropertyAccessor accessor = persistentEntity.getPropertyAccessor(probe);\n-\t\t\t\t\tObject property = accessor.getProperty(persistentProperty);\n-\t\t\t\t\tvalue = property != null\n-\t\t\t\t\t\t\t\t\t? KeyValue.of(createKey(persistentEntity.kindName(), property))\n-\t\t\t\t\t\t\t\t\t: NullValue.of();\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tvalue = probeEntity.getValue(fieldName);\n-\t\t\t\t}\n-\t\t\t\tif (value instanceof NullValue\n-\t\t\t\t\t\t&& example.getMatcher().getNullHandler() != ExampleMatcher.NullHandler.INCLUDE) {\n-\t\t\t\t\t//skip null value\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tfilters.add(StructuredQuery.PropertyFilter.eq(fieldName, value));\n+\t\t\tif (notIgnoredProperty(example, persistentProperty)) {\n+\t\t\t\tValue<?> value = getValue(example, probeEntity, persistentEntity, persistentProperty);\n+\t\t\t\tNullHandler nullHandler = example.getMatcher().getNullHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzQ1NQ=="}, "originalCommit": {"oid": "5bf279d7fa1135764545c8ffe4c791a98a4ef243"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzIwNw==", "bodyText": "Oh, it's in addFilter now. I missed it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458377207", "createdAt": "2020-07-21T20:46:01Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -765,31 +767,13 @@ private DatastoreReaderWriter getDatastoreReadWriter() {\n \t\tmatcherAccessor.getPropertySpecifiers();\n \t\tLinkedList<StructuredQuery.Filter> filters = new LinkedList<>();\n \t\tpersistentEntity.doWithColumnBackedProperties((persistentProperty) -> {\n-\n-\t\t\tif (!example.getMatcher().isIgnoredPath(persistentProperty.getName())) {\n-\t\t\t\t// ID properties are not stored as regular fields in Datastore.\n-\t\t\t\tString fieldName = persistentProperty.getFieldName();\n-\t\t\t\tValue<?> value;\n-\t\t\t\tif (persistentProperty.isIdProperty()) {\n-\t\t\t\t\tPersistentPropertyAccessor accessor = persistentEntity.getPropertyAccessor(probe);\n-\t\t\t\t\tObject property = accessor.getProperty(persistentProperty);\n-\t\t\t\t\tvalue = property != null\n-\t\t\t\t\t\t\t\t\t? KeyValue.of(createKey(persistentEntity.kindName(), property))\n-\t\t\t\t\t\t\t\t\t: NullValue.of();\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tvalue = probeEntity.getValue(fieldName);\n-\t\t\t\t}\n-\t\t\t\tif (value instanceof NullValue\n-\t\t\t\t\t\t&& example.getMatcher().getNullHandler() != ExampleMatcher.NullHandler.INCLUDE) {\n-\t\t\t\t\t//skip null value\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tfilters.add(StructuredQuery.PropertyFilter.eq(fieldName, value));\n+\t\t\tif (notIgnoredProperty(example, persistentProperty)) {\n+\t\t\t\tValue<?> value = getValue(example, probeEntity, persistentEntity, persistentProperty);\n+\t\t\t\tNullHandler nullHandler = example.getMatcher().getNullHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzQ1NQ=="}, "originalCommit": {"oid": "5bf279d7fa1135764545c8ffe4c791a98a4ef243"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTczMTgyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyOToyMlrOG1Cd5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyOToyMlrOG1Cd5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODEzMw==", "bodyText": "It may be easier to read as isIgnoredProperty(), removing the negation here and putting the negation in getDatastoreReadWriter() method instead. Our brains are very used to the isBlah pattern.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458268133", "createdAt": "2020-07-21T17:29:22Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -799,6 +783,43 @@ private DatastoreReaderWriter getDatastoreReadWriter() {\n \t\treturn builder.build();\n \t}\n \n+\tprivate <T> Value<?> getValue(Example<T> example, FullEntity<IncompleteKey> probeEntity,\n+\t\t\t\t\tDatastorePersistentEntity<?> persistentEntity, DatastorePersistentProperty persistentProperty) {\n+\t\tValue<?> value;\n+\t\tif (persistentProperty.isIdProperty()) {\n+\t\t\tvalue = getIdValue(example, persistentEntity, persistentProperty);\n+\t\t}\n+\t\telse {\n+\t\t\tvalue = probeEntity.getValue(persistentProperty.getFieldName());\n+\t\t}\n+\t\treturn value;\n+\t}\n+\n+\tprivate <T> boolean notIgnoredProperty(Example<T> example, DatastorePersistentProperty persistentProperty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bf279d7fa1135764545c8ffe4c791a98a4ef243"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2183, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}