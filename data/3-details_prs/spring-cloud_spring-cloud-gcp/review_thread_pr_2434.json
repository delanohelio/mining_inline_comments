{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDk5MzI0", "number": 2434, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MDoyM1rOEGLqJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyODowOFrOEIz8dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE3OTI2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MDoyM1rOGk0hlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MDoyM1rOGk0hlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjQ4Ng==", "bodyText": "The actual return type is Flux though?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262486", "createdAt": "2020-06-17T03:40:23Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE3OTg0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MDo1MFrOGk0h-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MDo1MFrOGk0h-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjU4Ng==", "bodyText": "No Mono returned.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262586", "createdAt": "2020-06-17T03:40:50Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */\n+\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+\t/**\n+\t * Creates FirestoreReactiveOperations object with a provided parent.\n+\t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n+\t * @param <T> the type param of the parent.\n+\t * @param parent the query builder.\n+\t * @return {@link Mono} signaling when operation has completed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE4MTUyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MTo1M1rOGk0i9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MTo1M1rOGk0i9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjgzOA==", "bodyText": "And version don't seem accurate.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262838", "createdAt": "2020-06-17T03:41:53Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for Datastore property that indicates it holds child entities that are\n+ * linked to this entity by the Cloud Datastore Ancestor relationship.\n+ *\n+ * @author Chengyuan Zhao", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE4MTk0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MjoxNlrOGk0jQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MjoxNlrOGk0jQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjkxNA==", "bodyText": "Add @since 1.2.4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262914", "createdAt": "2020-06-17T03:42:16Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE4MjM0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MjoyOVrOGk0jfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0MjoyOVrOGk0jfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2Mjk3NA==", "bodyText": "Add @since 1.2.4", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262974", "createdAt": "2020-06-17T03:42:29Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */\n+\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+\t/**\n+\t * Creates FirestoreReactiveOperations object with a provided parent.\n+\t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n+\t * @param <T> the type param of the parent.\n+\t * @param parent the query builder.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE5MTAwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0ODoyN1rOGk0o0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0ODoyN1rOGk0o0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NDMzNg==", "bodyText": "Where is this used? I don't see it.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441264336", "createdAt": "2020-06-17T03:48:27Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for Datastore property that indicates it holds child entities that are\n+ * linked to this entity by the Cloud Datastore Ancestor relationship.\n+ *\n+ * @author Chengyuan Zhao\n+ *\n+ * @since 1.1\n+ */\n+@Documented\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Subcollection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTE5Mjc2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0OTo0MFrOGk0p8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMzo0OTo0MFrOGk0p8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NDYyNA==", "bodyText": "How is this related to subcollections?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441264624", "createdAt": "2020-06-17T03:49:40Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */\n+\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09b9a144f677935f315ff893bcd96064925e7b89"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjE4OTYwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozODo1OFrOGlSUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo1MDo0NVrOGlW80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDU3Nw==", "bodyText": "Are you sure this statement is correct? If I delete a document in the Firestore UI in pantheon it will delete the subcollections of the document.\nOtherwise... should we consider a recursive delete? I guess we should match our behavior to what the client libraries do.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441750577", "createdAt": "2020-06-17T18:38:58Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -255,6 +255,29 @@ Now when you call the methods annotated with `@Transactional` on your service ob\n If an error occurs during the execution of a method annotated with `@Transactional`, the transaction will be rolled back. \n If no error occurs, the transaction will be committed.\n \n+==== Subcollections\n+A subcollection is a collection associated with a specific entity.\n+Documents in subcollections can contain subcollections as well, allowing you to further nest data. You can nest data up to 100 levels deep.\n+\n+WARNING: Deleting a document does not delete its subcollections!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyNjUxNA==", "bodyText": "see https://firebase.google.com/docs/firestore/data-model\n\nWarning: Deleting a document does not delete its subcollections!\n\n\nWhen you delete a document that has subcollections, those subcollections are not deleted. For example, there may be a document located at coll/doc/subcoll/subdoc even though the document coll/doc no longer exists. If you want to delete documents in subcollections when deleting a parent document, you must do so manually, as shown in Delete Collections.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441826514", "createdAt": "2020-06-17T20:50:45Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -255,6 +255,29 @@ Now when you call the methods annotated with `@Transactional` on your service ob\n If an error occurs during the execution of a method annotated with `@Transactional`, the transaction will be rolled back. \n If no error occurs, the transaction will be committed.\n \n+==== Subcollections\n+A subcollection is a collection associated with a specific entity.\n+Documents in subcollections can contain subcollections as well, allowing you to further nest data. You can nest data up to 100 levels deep.\n+\n+WARNING: Deleting a document does not delete its subcollections!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDU3Nw=="}, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM0NzAwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToxNzozMlrOGlT9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMToxNjo1MFrOGlXu-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng==", "bodyText": "I think you may need to invent a new abstraction here which implements FirestoreReactiveOperations and just has a reference to the subcollection and the FirestoreTemplate and then delegates calls to the firestoretemplate.\nI think copying the whole FirestoreTemplate object is too heavyweight for just setting the root; feels like there is too much redundant information being copied each time the method is called. Another reason why it doesn't feel quite right is because you are also going to need to call all the setter methods to copy over the settings that were set outside the constructor to do this right.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441777456", "createdAt": "2020-06-17T19:17:32Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n+\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyODI1OQ==", "bodyText": "It only \"copies\" references. What setter do you mean?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441828259", "createdAt": "2020-06-17T20:54:14Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n+\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng=="}, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzMzA0Mw==", "bodyText": "FirestoreTemplate has settings like bufferSize or useTokens which are not set through constructor but setters, these would have to be copied as well", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441833043", "createdAt": "2020-06-17T21:03:42Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n+\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng=="}, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzOTM1Mg==", "bodyText": "I guess for now you can just call the setters so that you set the properties of the child template in the same way as the parent; and if the future if we need to optimize we can do it later.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441839352", "createdAt": "2020-06-17T21:16:50Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n+\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng=="}, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM3NjAyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOToyNjo0M1rOGlUPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMDo1NDo1OFrOGlXFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MjE2Mw==", "bodyText": "I think you should add to docs how you intend users to use this method. I am imagining something like this:\n@Autowired\nFirestoreTemplate template;\n\ntemplate.withRoot(user1).delete(...)\ntemplate.withRoot(user2).find(...)\n\nAlso I think we should consider renaming it from operationsWithParent to something like: withCollectionRoot(...), withRoot(...), or withParent(..), etc. The method name should be short and also be clear that we are doing our operations from a different parent other than /.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441782163", "createdAt": "2020-06-17T19:26:43Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyODYzNA==", "bodyText": "the docs are there in the docs submodule", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441828634", "createdAt": "2020-06-17T20:54:58Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MjE2Mw=="}, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjM4ODM3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMDo0OFrOGlUXoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozMDo0OFrOGlUXoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NDIyNA==", "bodyText": "This also needs a @Override.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441784224", "createdAt": "2020-06-17T19:30:48Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjQxNjM5OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozOToyNFrOGlUpPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxOTozOToyNFrOGlUpPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4ODczNQ==", "bodyText": "Can you rename your pull request to \"Add subcollection support for FirestoreTemplate\" to be more specific?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441788735", "createdAt": "2020-06-17T19:39:24Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -255,6 +255,29 @@ Now when you call the methods annotated with `@Transactional` on your service ob\n If an error occurs during the execution of a method annotated with `@Transactional`, the transaction will be rolled back. \n If no error occurs, the transaction will be committed.\n \n+==== Subcollections", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db497c96eb900d30e03f81bf40304935488fd5da"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDAxODcxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOToyMjo0MVrOGmfF0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOToyMjo0MVrOGmfF0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwODQ2NA==", "bodyText": "indents need to be fixed to tabs instead of spaces.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r443008464", "createdAt": "2020-06-19T19:22:41Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,24 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+  /**\n+   * Executes a query represented as query builder and returns results of the given domain type.\n+   * @param <T> the type param of the domain type.\n+   * @param builder the query builder.\n+   * @param entityClass the domain type of entities.\n+   * @return {@link Flux} emitting the found entities.\n+   * @since 1.2.4\n+   */\n+  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MDAyMDkyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxOToyMzo1MlrOGmfHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMToyNzowMFrOGpMY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwODg0OA==", "bodyText": "This javadoc needs a little bit more description; I think you have to define \"parent\" more clearly.\nThere needs to be something that says that by default the template operates at the root level collection / and then once you pass an entity in here, a new template is created with that entity at the root collection and that all operations/queries will be scoped to that document's subcollections.\nAlso need to clarify what happens if you pass in an entity in here that is not a child of the current parent with withParent(..) - does it still work?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r443008848", "createdAt": "2020-06-19T19:23:52Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,24 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+  /**\n+   * Executes a query represented as query builder and returns results of the given domain type.\n+   * @param <T> the type param of the domain type.\n+   * @param builder the query builder.\n+   * @param entityClass the domain type of entities.\n+   * @return {@link Flux} emitting the found entities.\n+   * @since 1.2.4\n+   */\n+  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+  /**\n+   * Creates FirestoreReactiveOperations object with a provided parent.\n+   * The parent doesn't have to exist in Firestore, but should have a non-empty id field.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0Nzc3Mg==", "bodyText": "The \"scope\" actually explains it. When you save any entity, it is saved within the scope of this parent's subcollections.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r445847772", "createdAt": "2020-06-25T21:27:00Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,24 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+  /**\n+   * Executes a query represented as query builder and returns results of the given domain type.\n+   * @param <T> the type param of the domain type.\n+   * @param builder the query builder.\n+   * @param entityClass the domain type of entities.\n+   * @return {@link Flux} emitting the found entities.\n+   * @since 1.2.4\n+   */\n+  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+  /**\n+   * Creates FirestoreReactiveOperations object with a provided parent.\n+   * The parent doesn't have to exist in Firestore, but should have a non-empty id field.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwODg0OA=="}, "originalCommit": {"oid": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Njc1MTI3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyODowOFrOGpACPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNToyODowOFrOGpACPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NTM3NQ==", "bodyText": "tabs vs spaces", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r445645375", "createdAt": "2020-06-25T15:28:08Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,17 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2152, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}