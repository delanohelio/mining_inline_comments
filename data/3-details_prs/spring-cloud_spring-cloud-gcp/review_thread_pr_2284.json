{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjM1NDk4", "number": 2284, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo0NTozN1rODrvGGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMDozOTowMFrODsWYPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTg2OTY5OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo0NTozN1rOF8QQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyOToxM1rOF8cy7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNTMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory\n          \n          \n            \n            Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398725308", "createdAt": "2020-03-26T16:45:37Z", "author": {"login": "meltsufin"}, "path": "CONTRIBUTING.adoc", "diffHunk": "@@ -47,7 +47,7 @@ Install the plugin `Eclipse Code Formatter`.\n You can find it by searching in \"Browse Repositories\", under `Settings > Plugins` within IDEA (Once installed, you will need to reboot IDEA for it to take effect).\n \n Then navigate to `Settings > Other Settings` (this might be under `Preferences` on Mac) and select the Eclipse Code Formatter.\n-Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order`.\n+Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMDY2OA==", "bodyText": "done in newer commit", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398930668", "createdAt": "2020-03-26T22:29:13Z", "author": {"login": "guillaumeblaquiere"}, "path": "CONTRIBUTING.adoc", "diffHunk": "@@ -47,7 +47,7 @@ Install the plugin `Eclipse Code Formatter`.\n You can find it by searching in \"Browse Repositories\", under `Settings > Plugins` within IDEA (Once installed, you will need to reboot IDEA for it to take effect).\n \n Then navigate to `Settings > Other Settings` (this might be under `Preferences` on Mac) and select the Eclipse Code Formatter.\n-Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order`.\n+Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNTMwOA=="}, "originalCommit": {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTg3NDM1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjo0Njo0MVrOF8QTyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyOTowNlrOF8cyvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNjA4OA==", "bodyText": "I would just create an overloaded method createSecret(secretId, payload, projectId)", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398726088", "createdAt": "2020-03-26T16:46:41Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -40,6 +40,21 @@\n \t */\n \tvoid createSecret(String secretId, String payload);\n \n+\t/**\n+\t * Creates a new secret or a new version of existing secret with the provided\n+\t * {@code payload} for a specific {@code projectId}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload string.\n+\t * @param projectId unique identifier of your project.\n+\t */\n+\tvoid createSecretWithProject(String secretId, String payload, String projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMDYyMg==", "bodyText": "done in newer commit", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398930622", "createdAt": "2020-03-26T22:29:06Z", "author": {"login": "guillaumeblaquiere"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -40,6 +40,21 @@\n \t */\n \tvoid createSecret(String secretId, String payload);\n \n+\t/**\n+\t * Creates a new secret or a new version of existing secret with the provided\n+\t * {@code payload} for a specific {@code projectId}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload string.\n+\t * @param projectId unique identifier of your project.\n+\t */\n+\tvoid createSecretWithProject(String secretId, String payload, String projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNjA4OA=="}, "originalCommit": {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTk5NDU5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplateTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoxMzoyNVrOF8Rg-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjoyODo1NVrOF8cycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NTg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testCreateSecretIfMissingWithProject() {\n          \n          \n            \n            \tpublic void testCreateSecretIfMissing_withProject() {\n          \n      \n    \n    \n  \n\nMinor style - if you could make modify the test name to be _withProject I think it is more clear that it refers to using the project parameter", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398745851", "createdAt": "2020-03-26T17:13:25Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplateTests.java", "diffHunk": "@@ -90,6 +90,35 @@ public void testCreateSecretIfMissing() {\n \t\tverify(this.client).addSecretVersion(addSecretVersionRequest);\n \t}\n \n+\t@Test\n+\tpublic void testCreateSecretIfMissingWithProject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMDU0NQ==", "bodyText": "done in newer commit", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398930545", "createdAt": "2020-03-26T22:28:55Z", "author": {"login": "guillaumeblaquiere"}, "path": "spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplateTests.java", "diffHunk": "@@ -90,6 +90,35 @@ public void testCreateSecretIfMissing() {\n \t\tverify(this.client).addSecretVersion(addSecretVersionRequest);\n \t}\n \n+\t@Test\n+\tpublic void testCreateSecretIfMissingWithProject() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NTg1MQ=="}, "originalCommit": {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzE4NTA0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo0NToyNFrOF8dK4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMjo1Mjo1M1rOF8dVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjgwMQ==", "bodyText": "Oh yup, I see. We would prefer all uppercase name here: LATEST_VERSION.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398936801", "createdAt": "2020-03-26T22:45:24Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -40,6 +40,11 @@\n  */\n public class SecretManagerTemplate implements SecretManagerOperations {\n \n+\t/**\n+\t * Default value for the latest version of the secret.\n+\t */\n+\tpublic static final String latestVersion = \"latest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5190f2591a055590a5977df143c7b18a6b3b0eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzOTQ0OQ==", "bodyText": "Pushed", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398939449", "createdAt": "2020-03-26T22:52:53Z", "author": {"login": "guillaumeblaquiere"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -40,6 +40,11 @@\n  */\n public class SecretManagerTemplate implements SecretManagerOperations {\n \n+\t/**\n+\t * Default value for the latest version of the secret.\n+\t */\n+\tpublic static final String latestVersion = \"latest\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjgwMQ=="}, "originalCommit": {"oid": "e5190f2591a055590a5977df143c7b18a6b3b0eb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzAzODg2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMToxMToyMlrOF9B-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMjowNjoxOFrOF9DMkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTgzNA==", "bodyText": "Are we missing String getSecretString(String secretId, String projectId) variation or would this be too much?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399539834", "createdAt": "2020-03-27T21:11:22Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -73,6 +103,18 @@\n \t */\n \tString getSecretString(String secretId, String versionName);\n \n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName} for a specific {@code projectId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param projectId unique identifier of your project.\n+\t * @return The secret payload as String\n+\t */\n+\tString getSecretString(String secretId, String versionName, String projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTgyNA==", "bodyText": "No, it's not missing. We discussed previously about this.\n\nJava method signature are on the type, not on the param name and there were a conflict between these (for example):\n  @Override\n  public String getSecretString(String secretId, String versionName) {....}\n\n  @Override\n  public String getSecretString(String secretId, String projectId) {....}\n\n\nSo we choose to only propose the projectId with the version. And that's why I also introduced a static public variable LATEST_VERSION for helping the developers when they want to get the secret without care about the version\nBut, we can explore another solution.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399559824", "createdAt": "2020-03-27T22:06:18Z", "author": {"login": "guillaumeblaquiere"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -73,6 +103,18 @@\n \t */\n \tString getSecretString(String secretId, String versionName);\n \n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName} for a specific {@code projectId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param projectId unique identifier of your project.\n+\t * @return The secret payload as String\n+\t */\n+\tString getSecretString(String secretId, String versionName, String projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTgzNA=="}, "originalCommit": {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzA0NTI5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMToxMzo1MlrOF9CCiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMjo1Nzo1OVrOF9JSmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ==", "bodyText": "Does it make sense to have secretExists(String secretId, String versionName, String projectId)?\nThis would check if a specific version of the secret exists.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399540875", "createdAt": "2020-03-27T21:13:52Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -111,4 +177,14 @@\n \t * @return true if the secret exists in Secret Manager; false otherwise\n \t */\n \tboolean secretExists(String secretId);\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP {@code projectId} with the\n+\t * {@code secretId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param projectId unique identifier of your project.\n+\t * @return true if the secret exists in Secret Manager; false otherwise\n+\t */\n+\tboolean secretExists(String secretId, String projectId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MjA1Nw==", "bodyText": "I guess that the primary use of this function is internal for the secret creation (create a new secret or add a version to an existing secret). Thereby, the version is useless in this context.\nHowever, if we want to offer a convenient interface to developer, it could be interesting. If you agree, I propose these interfaces:\nboolean secretExists(String secretId);// Check latest version in default project\nboolean secretExists(String secretId, String version); // Check specific version in default project\nboolean secretExists(String secretId, String version, String projectId);// // Check specific version in specific project\n\nLike for your getSecretString comment, I won't be able to keep boolean secretExists(String secretId, String projectId); because of method signature conflict with boolean secretExists(String secretId, String version);\nLet me know.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399562057", "createdAt": "2020-03-27T22:13:50Z", "author": {"login": "guillaumeblaquiere"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -111,4 +177,14 @@\n \t * @return true if the secret exists in Secret Manager; false otherwise\n \t */\n \tboolean secretExists(String secretId);\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP {@code projectId} with the\n+\t * {@code secretId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param projectId unique identifier of your project.\n+\t * @return true if the secret exists in Secret Manager; false otherwise\n+\t */\n+\tboolean secretExists(String secretId, String projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ=="}, "originalCommit": {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTI0OA==", "bodyText": "Yeah let's omit adding secretExists(String secretId, String versionName, String projectId), since it would conflict with existing method signature and I think its value is relatively limited as you say with it being primarily internal.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399585248", "createdAt": "2020-03-27T23:45:06Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -111,4 +177,14 @@\n \t * @return true if the secret exists in Secret Manager; false otherwise\n \t */\n \tboolean secretExists(String secretId);\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP {@code projectId} with the\n+\t * {@code secretId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param projectId unique identifier of your project.\n+\t * @return true if the secret exists in Secret Manager; false otherwise\n+\t */\n+\tboolean secretExists(String secretId, String projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ=="}, "originalCommit": {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTY3Mg==", "bodyText": "Sorry for the noise, you are absolutely right about the method signature collisions. I didn't think of that.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399659672", "createdAt": "2020-03-28T12:57:59Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -111,4 +177,14 @@\n \t * @return true if the secret exists in Secret Manager; false otherwise\n \t */\n \tboolean secretExists(String secretId);\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP {@code projectId} with the\n+\t * {@code secretId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param projectId unique identifier of your project.\n+\t * @return true if the secret exists in Secret Manager; false otherwise\n+\t */\n+\tboolean secretExists(String secretId, String projectId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ=="}, "originalCommit": {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODMwNTkxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQyMDozOTowMFrOF9MLTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1ODo1OFrOF9rGZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjk1OA==", "bodyText": "Should we remove this variant of getSecretString as well? Same goes for getSecretBytes.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399706958", "createdAt": "2020-03-28T20:39:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "diffHunk": "@@ -46,25 +48,58 @@\n \t@Value(\"${secrets.application-secret}\")\n \tprivate String applicationSecretValue;\n \n+\t// Application secret is set into the properties file and get here using @Value\n+\t@Value(\"${my-application-secret}\")\n+\tprivate String myApplicationSecretValue;\n+\n \t@GetMapping(\"/\")\n \tpublic ModelAndView renderIndex(ModelMap map) {\n \t\tmap.put(\"applicationSecret\", this.applicationSecretValue);\n+\t\tmap.put(\"myApplicationSecret\", this.myApplicationSecretValue);\n \t\treturn new ModelAndView(\"index.html\", map);\n \t}\n \n \t@GetMapping(\"/getSecret\")\n \t@ResponseBody\n-\tpublic String getSecret(@RequestParam String secretId, ModelMap map) {\n-\t\tString secretPayload = this.secretManagerTemplate.getSecretString(secretId);\n+\tpublic String getSecret(\n+\t\t\t@RequestParam String secretId,\n+\t\t\t@RequestParam(required = false) String version,\n+\t\t\t@RequestParam(required = false) String projectId,\n+\t\t\tModelMap map) {\n+\n+\t\tif (StringUtils.isEmpty(version)) {\n+\t\t\tversion = SecretManagerTemplate.LATEST_VERSION;\n+\t\t}\n+\n+\t\tString secretPayload;\n+\t\tif (StringUtils.isEmpty(projectId)) {\n+\t\t\tsecretPayload = this.secretManagerTemplate.getSecretString(secretId, version);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea11dc8f01f819d2d2c15fd8dd63bd9381eb02c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3NTY1Mw==", "bodyText": "These variants exist in the version 1.2.2. We shouldn't remove them to ensure the downward compatibility.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r400175653", "createdAt": "2020-03-30T13:07:04Z", "author": {"login": "guillaumeblaquiere"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "diffHunk": "@@ -46,25 +48,58 @@\n \t@Value(\"${secrets.application-secret}\")\n \tprivate String applicationSecretValue;\n \n+\t// Application secret is set into the properties file and get here using @Value\n+\t@Value(\"${my-application-secret}\")\n+\tprivate String myApplicationSecretValue;\n+\n \t@GetMapping(\"/\")\n \tpublic ModelAndView renderIndex(ModelMap map) {\n \t\tmap.put(\"applicationSecret\", this.applicationSecretValue);\n+\t\tmap.put(\"myApplicationSecret\", this.myApplicationSecretValue);\n \t\treturn new ModelAndView(\"index.html\", map);\n \t}\n \n \t@GetMapping(\"/getSecret\")\n \t@ResponseBody\n-\tpublic String getSecret(@RequestParam String secretId, ModelMap map) {\n-\t\tString secretPayload = this.secretManagerTemplate.getSecretString(secretId);\n+\tpublic String getSecret(\n+\t\t\t@RequestParam String secretId,\n+\t\t\t@RequestParam(required = false) String version,\n+\t\t\t@RequestParam(required = false) String projectId,\n+\t\t\tModelMap map) {\n+\n+\t\tif (StringUtils.isEmpty(version)) {\n+\t\t\tversion = SecretManagerTemplate.LATEST_VERSION;\n+\t\t}\n+\n+\t\tString secretPayload;\n+\t\tif (StringUtils.isEmpty(projectId)) {\n+\t\t\tsecretPayload = this.secretManagerTemplate.getSecretString(secretId, version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjk1OA=="}, "originalCommit": {"oid": "bea11dc8f01f819d2d2c15fd8dd63bd9381eb02c"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzYwNA==", "bodyText": "Ah, didn't realize that. Thanks!", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r400213604", "createdAt": "2020-03-30T13:58:58Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "diffHunk": "@@ -46,25 +48,58 @@\n \t@Value(\"${secrets.application-secret}\")\n \tprivate String applicationSecretValue;\n \n+\t// Application secret is set into the properties file and get here using @Value\n+\t@Value(\"${my-application-secret}\")\n+\tprivate String myApplicationSecretValue;\n+\n \t@GetMapping(\"/\")\n \tpublic ModelAndView renderIndex(ModelMap map) {\n \t\tmap.put(\"applicationSecret\", this.applicationSecretValue);\n+\t\tmap.put(\"myApplicationSecret\", this.myApplicationSecretValue);\n \t\treturn new ModelAndView(\"index.html\", map);\n \t}\n \n \t@GetMapping(\"/getSecret\")\n \t@ResponseBody\n-\tpublic String getSecret(@RequestParam String secretId, ModelMap map) {\n-\t\tString secretPayload = this.secretManagerTemplate.getSecretString(secretId);\n+\tpublic String getSecret(\n+\t\t\t@RequestParam String secretId,\n+\t\t\t@RequestParam(required = false) String version,\n+\t\t\t@RequestParam(required = false) String projectId,\n+\t\t\tModelMap map) {\n+\n+\t\tif (StringUtils.isEmpty(version)) {\n+\t\t\tversion = SecretManagerTemplate.LATEST_VERSION;\n+\t\t}\n+\n+\t\tString secretPayload;\n+\t\tif (StringUtils.isEmpty(projectId)) {\n+\t\t\tsecretPayload = this.secretManagerTemplate.getSecretString(secretId, version);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjk1OA=="}, "originalCommit": {"oid": "bea11dc8f01f819d2d2c15fd8dd63bd9381eb02c"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2323, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}