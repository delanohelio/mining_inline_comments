{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODM0OTY4", "number": 2356, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1NjowN1rOD51CZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1Njo1OVrOD6Qt9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTY0MzkwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzo1NjowN1rOGRUQyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo1MDowM1rOGRcKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxMDk1NQ==", "bodyText": "If we don't set SpannerOptions.emulatorHost, then the client library will connect to the real Spanner instance, which may incur costs.\nI'd rather fail loudly here if emulator host is not available.\n@dmitry-s @meltsufin I recall a discussion recently about using .enabled vs the property used for something. Do you remember which style was decided on?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r420810955", "createdAt": "2020-05-06T13:56:07Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.spanner;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.SpannerOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-configuration to use the Spanner emulator if enabled.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(GcpSpannerAutoConfiguration.class)\n+@EnableConfigurationProperties(GcpSpannerProperties.class)\n+@ConditionalOnProperty(prefix = \"spring.cloud.gcp.spanner.emulator\", name = \"enabled\", havingValue = \"true\")\n+public class GcpSpannerEmulatorAutoConfiguration {\n+\n+\tprivate final GcpSpannerProperties properties;\n+\n+\tpublic GcpSpannerEmulatorAutoConfiguration(GcpSpannerProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SpannerOptions spannerOptions() {\n+\t\tSpannerOptions.Builder builder = SpannerOptions.newBuilder()\n+\t\t\t\t.setProjectId(this.properties.getProjectId())\n+\t\t\t\t.setCredentials(NoCredentials.getInstance());\n+\t\tif (this.properties.getEmulatorHost() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27bfbe708c03f972bd3e0374e3861a60c4ffe54a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg1MjUxMg==", "bodyText": "the client library resolves the SPANNER_EMULATOR_HOST environment variable. But, I agree it can be dismiss. I think we can validate if the environment variable or the property is set, otherwise we can fail and say neither environment variable or property was set. WDYT?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r420852512", "createdAt": "2020-05-06T14:49:11Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.spanner;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.SpannerOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-configuration to use the Spanner emulator if enabled.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(GcpSpannerAutoConfiguration.class)\n+@EnableConfigurationProperties(GcpSpannerProperties.class)\n+@ConditionalOnProperty(prefix = \"spring.cloud.gcp.spanner.emulator\", name = \"enabled\", havingValue = \"true\")\n+public class GcpSpannerEmulatorAutoConfiguration {\n+\n+\tprivate final GcpSpannerProperties properties;\n+\n+\tpublic GcpSpannerEmulatorAutoConfiguration(GcpSpannerProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SpannerOptions spannerOptions() {\n+\t\tSpannerOptions.Builder builder = SpannerOptions.newBuilder()\n+\t\t\t\t.setProjectId(this.properties.getProjectId())\n+\t\t\t\t.setCredentials(NoCredentials.getInstance());\n+\t\tif (this.properties.getEmulatorHost() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxMDk1NQ=="}, "originalCommit": {"oid": "27bfbe708c03f972bd3e0374e3861a60c4ffe54a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg2ODU0OQ==", "bodyText": "Since we're providing NoCredentials, there is no risk of connecting to the real Spanner and incurring costs.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r420868549", "createdAt": "2020-05-06T15:09:13Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.spanner;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.SpannerOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-configuration to use the Spanner emulator if enabled.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(GcpSpannerAutoConfiguration.class)\n+@EnableConfigurationProperties(GcpSpannerProperties.class)\n+@ConditionalOnProperty(prefix = \"spring.cloud.gcp.spanner.emulator\", name = \"enabled\", havingValue = \"true\")\n+public class GcpSpannerEmulatorAutoConfiguration {\n+\n+\tprivate final GcpSpannerProperties properties;\n+\n+\tpublic GcpSpannerEmulatorAutoConfiguration(GcpSpannerProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SpannerOptions spannerOptions() {\n+\t\tSpannerOptions.Builder builder = SpannerOptions.newBuilder()\n+\t\t\t\t.setProjectId(this.properties.getProjectId())\n+\t\t\t\t.setCredentials(NoCredentials.getInstance());\n+\t\tif (this.properties.getEmulatorHost() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxMDk1NQ=="}, "originalCommit": {"oid": "27bfbe708c03f972bd3e0374e3861a60c4ffe54a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDg5Njg4Nw==", "bodyText": "In regard to  \".enabled vs the property\" - .enabled is the way to go.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r420896887", "createdAt": "2020-05-06T15:46:49Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.spanner;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.SpannerOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-configuration to use the Spanner emulator if enabled.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(GcpSpannerAutoConfiguration.class)\n+@EnableConfigurationProperties(GcpSpannerProperties.class)\n+@ConditionalOnProperty(prefix = \"spring.cloud.gcp.spanner.emulator\", name = \"enabled\", havingValue = \"true\")\n+public class GcpSpannerEmulatorAutoConfiguration {\n+\n+\tprivate final GcpSpannerProperties properties;\n+\n+\tpublic GcpSpannerEmulatorAutoConfiguration(GcpSpannerProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SpannerOptions spannerOptions() {\n+\t\tSpannerOptions.Builder builder = SpannerOptions.newBuilder()\n+\t\t\t\t.setProjectId(this.properties.getProjectId())\n+\t\t\t\t.setCredentials(NoCredentials.getInstance());\n+\t\tif (this.properties.getEmulatorHost() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxMDk1NQ=="}, "originalCommit": {"oid": "27bfbe708c03f972bd3e0374e3861a60c4ffe54a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0MDM2Nw==", "bodyText": "Yes, let's fail if \"enabled\" is set but \"emulatorHost\" is missing, since there is no way to make that configuration work. Assert.notEmpty should work.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r420940367", "createdAt": "2020-05-06T16:50:03Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.spanner;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.SpannerOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides auto-configuration to use the Spanner emulator if enabled.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@Configuration\n+@AutoConfigureBefore(GcpSpannerAutoConfiguration.class)\n+@EnableConfigurationProperties(GcpSpannerProperties.class)\n+@ConditionalOnProperty(prefix = \"spring.cloud.gcp.spanner.emulator\", name = \"enabled\", havingValue = \"true\")\n+public class GcpSpannerEmulatorAutoConfiguration {\n+\n+\tprivate final GcpSpannerProperties properties;\n+\n+\tpublic GcpSpannerEmulatorAutoConfiguration(GcpSpannerProperties properties) {\n+\t\tthis.properties = properties;\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic SpannerOptions spannerOptions() {\n+\t\tSpannerOptions.Builder builder = SpannerOptions.newBuilder()\n+\t\t\t\t.setProjectId(this.properties.getProjectId())\n+\t\t\t\t.setCredentials(NoCredentials.getInstance());\n+\t\tif (this.properties.getEmulatorHost() != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxMDk1NQ=="}, "originalCommit": {"oid": "27bfbe708c03f972bd3e0374e3861a60c4ffe54a"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzQ5ODI0OnYy", "diffSide": "LEFT", "path": "docs/src/main/asciidoc/spanner.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1NjoyMlrOGR5Pag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1NToyOFrOGR_v6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjgxMA==", "bodyText": "Not sure if we want to remove this.\nSetting/unsetting the variable is a quick way to switch all your tests to using the emulator and back to normal. Might be still useful.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r421416810", "createdAt": "2020-05-07T10:56:22Z", "author": {"login": "dmitry-s"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -1435,10 +1437,11 @@ This command can be used to create Cloud Spanner instances:\n $ gcloud spanner instances create <instance-name> --config=emulator-config --description=\"<description>\" --nodes=1\n ----\n \n-Remember that you need to set the `SPANNER_EMULATOR_HOST` environment variable to use the emulator:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c52a64307d2d4280fbfcb2da9a03e762ee183"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMzQzMg==", "bodyText": "I'm fine with removing it. Even though it's available, it's not consistent with the other emulators. We can leave a note about it, but I'm afraid it will only confuse people.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r421523432", "createdAt": "2020-05-07T13:55:28Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -1435,10 +1437,11 @@ This command can be used to create Cloud Spanner instances:\n $ gcloud spanner instances create <instance-name> --config=emulator-config --description=\"<description>\" --nodes=1\n ----\n \n-Remember that you need to set the `SPANNER_EMULATOR_HOST` environment variable to use the emulator:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjgxMA=="}, "originalCommit": {"oid": "6c5c52a64307d2d4280fbfcb2da9a03e762ee183"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDE1OTgyOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/spanner.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1Mjo1OVrOGR_oVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1Mjo1OVrOGR_oVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyMTQ5NA==", "bodyText": "@dmitry-s @elefeint Can we pick a consistent name for the emulator host property?\nI see spring.cloud.gcp.datastore.host and spring.cloud.gcp.pubsub.emulator-host and spring.cloud.gcp.firestore.host-port.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r421521494", "createdAt": "2020-05-07T13:52:59Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/spanner.adoc", "diffHunk": "@@ -88,6 +88,8 @@ The schema for the tables will be \"ON DELETE NO ACTION\" if `false`. | No | `true\n | `spring.cloud.gcp.spanner.writeSessionsFraction` | Fraction of sessions to be kept prepared for write transactions | No | 0.2 - Determined by Cloud Spanner client library\n | `spring.cloud.gcp.spanner.keepAliveIntervalMinutes` | How long to keep idle sessions alive | No | 30 - Determined by Cloud Spanner client library\n | `spring.cloud.gcp.spanner.failIfPoolExhausted` |  If all sessions are in use, fail the request by throwing an exception. Otherwise, by default, block until a session becomes available. | No | `false`\n+| `spring.cloud.gcp.spanner.emulator.enabled` |  Enables the usage of an emulator. If this is set to true, then you should set the `spring.cloud.gcp.spanner.host-port` to the host:port of your locally running emulator instance. | No | `false`\n+| `spring.cloud.gcp.spanner.host-port` |  The host and port of the Spanner service; can be overridden to specify connecting to an already-running https://cloud.google.com/spanner/docs/emulator#installing_and_running_the_emulator[Spanner emulator] instance. | No |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c52a64307d2d4280fbfcb2da9a03e762ee183"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDE3NTI0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1NjoxNVrOGR_yJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1NjoxNVrOGR_yJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyNDAwNA==", "bodyText": "Please add\n@since 1.2.3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r421524004", "createdAt": "2020-05-07T13:56:15Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.spanner;\n+\n+import com.google.cloud.NoCredentials;\n+import com.google.cloud.spanner.SpannerOptions;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * Provides auto-configuration to use the Spanner emulator if enabled.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c52a64307d2d4280fbfcb2da9a03e762ee183"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDE3OTExOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1Njo1OVrOGR_0ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzo1Njo1OVrOGR_0ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUyNDYxOA==", "bodyText": "Please add a comment above like the other props.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2356#discussion_r421524618", "createdAt": "2020-05-07T13:56:59Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/spanner/GcpSpannerProperties.java", "diffHunk": "@@ -70,6 +71,8 @@\n \t// Otherwise, by default, block until a session becomes available.\n \tprivate boolean failIfPoolExhausted = false;\n \n+\tprivate String hostPort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c5c52a64307d2d4280fbfcb2da9a03e762ee183"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2114, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}