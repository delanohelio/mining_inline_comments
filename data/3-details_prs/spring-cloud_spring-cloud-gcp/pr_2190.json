{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzI1MjQz", "number": 2190, "title": "Add sample for the Secret Manager integration", "bodyText": "Adds a secret manager sample demonstrating how to add secrets to the application as a property source.\nContributes to #2176.", "createdAt": "2020-02-10T20:02:29Z", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190", "merged": true, "mergeCommit": {"oid": "f06e9f1daa024efebf62beadebc11590781f5c3f"}, "closed": true, "closedAt": "2020-02-11T21:34:46Z", "author": {"login": "dzou"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDCvKpgH2gAyMzczMzI1MjQzOmE3ZGViNDZmY2U0NzljMWJhMjg2ZGExNjgyOTJkZWU0MTJjNzhjNmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDXBx-gFqTM1NjkzODQ4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a7deb46fce479c1ba286da168292dee412c78c6c", "committedDate": "2020-02-10T19:59:11Z", "message": "Add Secret Manager Sample"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NzYwNzc1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#pullrequestreview-356760775", "createdAt": "2020-02-11T15:39:05Z", "commit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTozOTowNVrOFoN5nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTo0NToxNFrOFoOKMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNTEwMQ==", "bodyText": "This sounds more like the the refdoc.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377715101", "createdAt": "2020-02-11T15:39:05Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzE1NA==", "bodyText": "@Value is usually used outside of the @ConfigurationProperties. I would instead demonstrate the use of a prefix like in the spring-cloud-gcp-config-sample.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377717154", "createdAt": "2020-02-11T15:42:03Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzU0MA==", "bodyText": "Can you show the gcloud command to do this?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377717540", "createdAt": "2020-02-11T15:42:36Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxODM5NQ==", "bodyText": "Maybe do something like secrets.password, which will map to MyAppProperties.password.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377718395", "createdAt": "2020-02-11T15:43:49Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")\n+\tprivate String applicationSecret;\n+\t...\n+}\n+```\n+\n+== Running the Sample\n+\n+1. Create a Google Cloud Platform project with https://cloud.google.com/billing/docs/how-to/modify-project#enable-billing[billing enabled], if you don't have one already.\n+\n+2. Enable the Secret Manager API from the \"APIs & Services\" menu of the Google Cloud Console.\n+\n+3. Authenticate in one of two ways:\n+\n+a. Use the Google Cloud SDK to https://cloud.google.com/sdk/gcloud/reference/auth/application-default/login[authenticate with application default credentials].\n+This method is convenient but should only be used in local development.\n+b. https://cloud.google.com/iam/docs/creating-managing-service-accounts[Create a new service account], download its private key and point the `spring.cloud.gcp.secretmanager.credentials.location` property to it.\n++\n+Such as: `spring.cloud.gcp.secretmanager.credentials.location=file:/path/to/creds.json`\n+\n+4. Using the https://console.cloud.google.com/security/secret-manager[Secret Manager UI in Cloud Console], create a new secret named `application-secret` and set it to any value.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxOTM0NQ==", "bodyText": "You can also demonstrate the use of @Value here, just to inject a String property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377719345", "createdAt": "2020-02-11T15:45:14Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.Environment;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WebController {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6dd61c874a3591c2543dd0435088fa56330db2e", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e6dd61c874a3591c2543dd0435088fa56330db2e", "committedDate": "2020-02-11T18:40:45Z", "message": "PR Comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9516d29dea676313db7806ac2e6c320efea5c9", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3d9516d29dea676313db7806ac2e6c320efea5c9", "committedDate": "2020-02-11T18:44:29Z", "message": "add comment about namespace setting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/30c93878e5921f731bc42f76b2efd3d60c8a3f5d", "committedDate": "2020-02-11T19:01:46Z", "message": "Remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTE2Mzg3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#pullrequestreview-356916387", "createdAt": "2020-02-11T19:05:25Z", "commit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNToyNVrOFoVXzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOTowNjo1MlrOFoVa4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzNzUxNw==", "bodyText": "Since you no longer use the @ConfigurationProperties, this section needs to be amended.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377837517", "createdAt": "2020-02-11T19:05:25Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/README.adoc", "diffHunk": "@@ -0,0 +1,54 @@\n+= Spring Cloud GCP Secret Manager Sample Application\n+\n+This code sample demonstrates how to use the Spring Cloud GCP Secret Manager integration.\n+\n+To begin using Secret Manager support, first add the `spring-cloud-gcp-starter-secretmanager` dependency to the project:\n+\n+```\n+<dependency>\n+\t<groupId>org.springframework.cloud</groupId>\n+\t<artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+```\n+\n+Adding the starter dependency will automatically cause your GCP Project's secrets to be injected into your application's environment at bootstrap time.\n+\n+This sample application defines a `@ConfigurationProperties` in order to access and use the secret values.\n+\n+```\n+@ConfigurationProperties\n+public class MyAppProperties {\n+\n+\t@Value(\"${application-secret}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzcxNzE1NA=="}, "originalCommit": {"oid": "a7deb46fce479c1ba286da168292dee412c78c6c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODA1MQ==", "bodyText": "Why \"also\"?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377838051", "createdAt": "2020-02-11T19:06:25Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/WebController.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.core.env.Environment;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class WebController {\n+\n+\t@Autowired\n+\tprivate Environment environment;\n+\n+\t@Autowired\n+\tprivate MyAppProperties properties;\n+\n+\t// Application secrets can also be accessed using @Value and passing in the secret name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzODMwNA==", "bodyText": "Mention that it's optional?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#discussion_r377838304", "createdAt": "2020-02-11T19:06:52Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/resources/bootstrap.properties", "diffHunk": "@@ -0,0 +1,3 @@\n+# This setting adds a prefix to your secret names that get injected into", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c93878e5921f731bc42f76b2efd3d60c8a3f5d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "745086be296102a52a6367fc545ec748e7d24be0", "author": {"user": {"login": "dzou", "name": "Daniel Zou"}}, "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/745086be296102a52a6367fc545ec748e7d24be0", "committedDate": "2020-02-11T19:20:27Z", "message": "PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTM4NDgz", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2190#pullrequestreview-356938483", "createdAt": "2020-02-11T19:37:37Z", "commit": {"oid": "745086be296102a52a6367fc545ec748e7d24be0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 532, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}