{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NDMxNTY5", "number": 2335, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTowMDowMVrOD2uyGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDo0NlrOD3MW6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NzE2MTg3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTowMDowMVrOGMnzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNTowMDowMVrOGMnzeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg4ODI0OA==", "bodyText": "Combine with the line above?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r415888248", "createdAt": "2020-04-27T15:00:01Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODY3OTU0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxMjoxM1rOGM1rPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjo0OTo0MVrOGM68cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNTUxOQ==", "bodyText": "Maybe add an additional few words describing what the purpose of projection factory/what its used for here?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416115519", "createdAt": "2020-04-27T20:12:13Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -99,15 +107,17 @@\n \t * @param datastoreTemplate used to execute the given query.\n \t * @param datastoreMappingContext used to provide metadata for mapping results to objects.\n \t * @param entityType the result domain type.\n+\t * @param projectionFactory the projection factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMTg0MQ==", "bodyText": "done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416201841", "createdAt": "2020-04-27T22:49:41Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -99,15 +107,17 @@\n \t * @param datastoreTemplate used to execute the given query.\n \t * @param datastoreMappingContext used to provide metadata for mapping results to objects.\n \t * @param entityType the result domain type.\n+\t * @param projectionFactory the projection factory.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNTUxOQ=="}, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODY5Mjk0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxNTozOFrOGM1zAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjo1MDozNFrOGM69tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNzUwNA==", "bodyText": "This parameters variable is never used?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416117504", "createdAt": "2020-04-27T20:15:38Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwMjE2NQ==", "bodyText": "removed", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416202165", "createdAt": "2020-04-27T22:50:34Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExNzUwNA=="}, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODcwMTUwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxNzozOFrOGM14CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMzozMDoxOFrOGM7-Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExODc5Mw==", "bodyText": "In what cases would the returned projectInformation be null?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416118793", "createdAt": "2020-04-27T20:17:38Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIxODY3OQ==", "bodyText": "it happens in some tests", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416218679", "createdAt": "2020-04-27T23:30:18Z", "author": {"login": "dmitry-s"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExODc5Mw=="}, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODcwNzA1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxODo1NlrOGM17QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoxODo1NlrOGM17QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjExOTYxNw==", "bodyText": "Maybe add a javadoc comment to help describe what this helper method is doing? I guess it's looking at what fields will be needed from the return obj and then constructing a query object containing only those fields?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416119617", "createdAt": "2020-04-27T20:18:56Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODcyNTU0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyMzoyNVrOGM2GGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMDoyMzoyNVrOGM2GGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEyMjM5NQ==", "bodyText": "This is optional but I am starting to get confused with the Supplier thing - maybe if you find you're always calling getQueryBuilderSupplier(parameters).get() here, you can take the opportunity to just have getQueryBuilder() return the query builder directly rather than a supplier and then call .get().\nBut if it's gonna be a big refactor job then just ignore this comment.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416122395", "createdAt": "2020-04-27T20:23:25Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +233,34 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Supplier<Builder<?>> getQueryBuilderSupplier(Object[] parameters) {\n+\t\tSupplier<Builder<?>> queryBuilderSupplier;\n+\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n+\t\tProjectionInformation projectionInformation =\n+\t\t\t\tthis.projectionFactory.getProjectionInformation(this.queryMethod.getReturnedObjectType());\n+\n+\t\tif (projectionInformation != null &&\n+\t\t\t\tprojectionInformation.getType() != this.entityType\n+\t\t\t\t&& projectionInformation.isClosed()) {\n+\t\t\tProjectionEntityQuery.Builder projectionEntityQueryBuilder = Query.newProjectionEntityQueryBuilder();\n+\t\t\tprojectionInformation.getInputProperties().forEach(propertyDescriptor -> {\n+\t\t\t\tprojectionEntityQueryBuilder.addProjection(mapToFieldName(propertyDescriptor));\n+\t\t\t});\n+\t\t\tqueryBuilderSupplier = () -> projectionEntityQueryBuilder;\n+\t\t}\n+\t\treturn queryBuilderSupplier;\n+\t}\n+\n+\n+\tprivate String mapToFieldName(PropertyDescriptor propertyDescriptor) {\n+\t\tString name = propertyDescriptor.getName();\n+\t\tDatastorePersistentProperty persistentProperty =\n+\t\t\t\t(DatastorePersistentProperty) this.datastorePersistentEntity.getPersistentProperty(name);\n+\t\treturn persistentProperty.getFieldName();\n+\t}\n+\n \tprivate Slice executeSliceQuery(Object[] parameters) {\n-\t\tEntityQuery.Builder builder = StructuredQuery.newEntityQueryBuilder()\n+\t\tStructuredQuery.Builder builder = getQueryBuilderSupplier(parameters).get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "231cbcc0089dcfdaabbcc4461974828edda68bd4"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjAwNTQ2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDoyMVrOGNT0SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDoyMVrOGNT0SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwOTM1Mw==", "bodyText": "There's way too much conditional logic in this method and many fragments are repeated.\nI think it needs to be refactored to be more readable and maintainable.\nWe can do it in a meeting, if you want.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416609353", "createdAt": "2020-04-28T13:24:21Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -176,37 +185,29 @@ public Object execute(Object[] parameters) {\n \t}\n \n \tprivate Object execute(Object[] parameters, Class returnedElementType, Class<?> collectionType, boolean total) {\n-\t\tSupplier<StructuredQuery.Builder<?>> queryBuilderSupplier = StructuredQuery::newKeyQueryBuilder;\n-\t\tFunction<T, ?> mapper = Function.identity();\n-\n \t\tboolean returnedTypeIsNumber = Number.class.isAssignableFrom(returnedElementType)\n \t\t\t\t|| returnedElementType == int.class || returnedElementType == long.class;\n \n \t\tboolean isCountingQuery = this.tree.isCountProjection()\n \t\t\t\t|| (this.tree.isDelete() && returnedTypeIsNumber) || total;\n \n-\t\tCollector<?, ?, ?> collector = Collectors.toList();\n-\t\tif (isCountingQuery && !this.tree.isDelete()) {\n-\t\t\tcollector = Collectors.counting();\n-\t\t}\n-\t\telse if (this.tree.isExistsProjection()) {\n-\t\t\tcollector = Collectors.collectingAndThen(Collectors.counting(), (count) -> count > 0);\n-\t\t}\n-\t\telse if (!returnedTypeIsNumber) {\n-\t\t\tqueryBuilderSupplier = StructuredQuery::newEntityQueryBuilder;\n-\t\t\tmapper = this::processRawObjectForProjection;\n-\t\t}\n+\t\tStructuredQuery.Builder<?> structuredQueryBuilder =\n+\t\t\t\t!((isCountingQuery && !this.tree.isDelete()) || this.tree.isExistsProjection())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MjAwNzQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDo0NlrOGNT1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzoyNDo0NlrOGNT1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYwOTY4Mg==", "bodyText": "Can we come up with a better name for the method?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2335#discussion_r416609682", "createdAt": "2020-04-28T13:24:46Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQuery.java", "diffHunk": "@@ -223,8 +224,49 @@ else if (isCountingQuery && this.tree.isDelete()) {\n \t\t}\n \t}\n \n+\tprivate Collector<?, ?, ?> getCollector(boolean isCountingQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b02bffe235fee6c576c8c09014208da6aef2140"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2099, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}