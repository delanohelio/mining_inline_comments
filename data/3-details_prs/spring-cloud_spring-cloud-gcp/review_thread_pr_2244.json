{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzQ5OTk2", "number": 2244, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0OTo1OFrODyMzfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo1MTo1MVrODz33TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY1MTgxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0OTo1OFrOGGHDWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDoyOTo0NFrOGGKYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDE4Ng==", "bodyText": "-2020?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409060186", "createdAt": "2020-04-15T18:49:58Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNDcxOQ==", "bodyText": "Nice catch, thanks.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409114719", "createdAt": "2020-04-15T20:29:44Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDE4Ng=="}, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY1NDI0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MDo0MVrOGGHE5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozMTowMVrOGGKbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDU4Mg==", "bodyText": "this property should be added in additional-spring-configuration-metadata.json", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409060582", "createdAt": "2020-04-15T18:50:41Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNTQwNQ==", "bodyText": "Thanks. I ultimately decided to rely on our other property spring.cloud.gcp.firestore.host-port being set to enable the configuration and removed this property.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409115405", "createdAt": "2020-04-15T20:31:01Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDU4Mg=="}, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTY1OTg1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo1MjoxMFrOGGHIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozMTowOVrOGGKbTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MTQ1Nw==", "bodyText": "emulatorCredentials sounds better. WDYT?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409061457", "createdAt": "2020-04-15T18:52:10Z", "author": {"login": "eddumelendez"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore({\n+\t\tFirestoreReactiveAutoConfiguration.class, GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(fakeCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreGrpc.FirestoreStub firestoreGrpcStub() throws IOException {\n+\t\tManagedChannel channel = ManagedChannelBuilder\n+\t\t\t\t.forTarget(this.hostPort)\n+\t\t\t\t.usePlaintext()\n+\t\t\t\t.build();\n+\n+\t\treturn FirestoreGrpc.newStub(channel)\n+\t\t\t\t.withCallCredentials(MoreCallCredentials.from(fakeCredentials()))\n+\t\t\t\t.withExecutor(Runnable::run);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreTemplate firestoreTemplate(FirestoreGrpc.FirestoreStub firestoreStub,\n+\t\t\tFirestoreClassMapper classMapper, FirestoreMappingContext firestoreMappingContext) {\n+\t\tFirestoreTemplate template = new FirestoreTemplate(\n+\t\t\t\tfirestoreStub, this.firestoreRootPath, classMapper, firestoreMappingContext);\n+\t\ttemplate.setUsingStreamTokens(false);\n+\t\treturn template;\n+\t}\n+\n+\n+\tprivate static Credentials fakeCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNTQ2OQ==", "bodyText": "Done, sounds good.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409115469", "createdAt": "2020-04-15T20:31:09Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore({\n+\t\tFirestoreReactiveAutoConfiguration.class, GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(fakeCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreGrpc.FirestoreStub firestoreGrpcStub() throws IOException {\n+\t\tManagedChannel channel = ManagedChannelBuilder\n+\t\t\t\t.forTarget(this.hostPort)\n+\t\t\t\t.usePlaintext()\n+\t\t\t\t.build();\n+\n+\t\treturn FirestoreGrpc.newStub(channel)\n+\t\t\t\t.withCallCredentials(MoreCallCredentials.from(fakeCredentials()))\n+\t\t\t\t.withExecutor(Runnable::run);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreTemplate firestoreTemplate(FirestoreGrpc.FirestoreStub firestoreStub,\n+\t\t\tFirestoreClassMapper classMapper, FirestoreMappingContext firestoreMappingContext) {\n+\t\tFirestoreTemplate template = new FirestoreTemplate(\n+\t\t\t\tfirestoreStub, this.firestoreRootPath, classMapper, firestoreMappingContext);\n+\t\ttemplate.setUsingStreamTokens(false);\n+\t\treturn template;\n+\t}\n+\n+\n+\tprivate static Credentials fakeCredentials() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MTQ1Nw=="}, "originalCommit": {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAxMTI2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozNzowMFrOGGKm0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoxMToxOVrOGHelPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExODQxOQ==", "bodyText": "Don't need curly braces for a single class.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409118419", "createdAt": "2020-04-15T20:37:00Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDI2OA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410494268", "createdAt": "2020-04-17T22:11:19Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExODQxOQ=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAxNjEwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozODoyOFrOGGKpsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoxMTo1NFrOGHel4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTE1NA==", "bodyText": "property itself does not have a default value, does it?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409119154", "createdAt": "2020-04-15T20:38:28Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -54,6 +54,7 @@ The Spring Boot starter for Google Cloud Firestore provides the following config\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.firestore.enabled` | Enables or disables Firestore auto-configuration | No | `true`\n | `spring.cloud.gcp.firestore.project-id` | GCP project ID where the Google Cloud Firestore API is hosted, if different from the one in the <<spring-cloud-gcp-core,Spring Cloud GCP Core Module>> | No |\n+| `spring.cloud.gcp.firestore.host-port` | The host and port of the Firestore service; can be overridden to specify connecting to an already-running https://firebase.google.com/docs/emulator-suite/install_and_configure[Firestore emulator] instance. | No | `firestore.googleapis.com:443` (the host/port of official Firestore service)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDQzMw==", "bodyText": "Yeah it has a default value; it's just the host-port we plug into the GRPC client, so the default is firestore.googleapis.com:443.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410494433", "createdAt": "2020-04-17T22:11:54Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -54,6 +54,7 @@ The Spring Boot starter for Google Cloud Firestore provides the following config\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.firestore.enabled` | Enables or disables Firestore auto-configuration | No | `true`\n | `spring.cloud.gcp.firestore.project-id` | GCP project ID where the Google Cloud Firestore API is hosted, if different from the one in the <<spring-cloud-gcp-core,Spring Cloud GCP Core Module>> | No |\n+| `spring.cloud.gcp.firestore.host-port` | The host and port of the Firestore service; can be overridden to specify connecting to an already-running https://firebase.google.com/docs/emulator-suite/install_and_configure[Firestore emulator] instance. | No | `firestore.googleapis.com:443` (the host/port of official Firestore service)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTE1NA=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAyMDMzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDozOTo0NVrOGGKsMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNToxNToxMVrOGIZnHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw==", "bodyText": "\"my-project\" -- is it because it's a fake value that's unused? Can you leave a comment about that?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409119793", "createdAt": "2020-04-15T20:39:45Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDU4Mg==", "bodyText": "Done. I just changed it to plug in the current project-id. I guess this is more technically correct.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410494582", "createdAt": "2020-04-17T22:12:21Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTY1OA==", "bodyText": "Or maybe I should make this so the emulator config doesn't require a real project (and not inject a projectIdProvider into the configuration)... Maybe that would make more sense; what do you think?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410495658", "createdAt": "2020-04-17T22:15:49Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MTQwNw==", "bodyText": "Maybe just hardcode \"unused\" as project ID?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411461407", "createdAt": "2020-04-20T15:15:11Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDAyMzEwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMDo0MDozNVrOGGKt4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoxNjo0MFrOGHersQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDIyNA==", "bodyText": "static?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409120224", "createdAt": "2020-04-15T20:40:35Z", "author": {"login": "elefeint"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));\n+\n+\t\treturn new Credentials() {\n+\t\t\t@Override\n+\t\t\tpublic String getAuthenticationType() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Map<String, List<String>> getRequestMetadata(URI uri) {\n+\t\t\t\treturn headerMap;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadata() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadataOnly() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void refresh() {\n+\t\t\t\t// no-op\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Reactive Firestore autoconfiguration to enable emulator use.\n+\t */\n+\t@ConditionalOnClass({ FirestoreGrpc.FirestoreStub.class, Flux.class })\n+\t@AutoConfigureBefore({ FirestoreReactiveAutoConfiguration.class })\n+\tclass ReactiveFirestoreEmulatorAutoConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTkyMQ==", "bodyText": "Right now I depend on the hostPort instance variable of the parent so I couldn't make static unfortunately.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410495921", "createdAt": "2020-04-17T22:16:40Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));\n+\n+\t\treturn new Credentials() {\n+\t\t\t@Override\n+\t\t\tpublic String getAuthenticationType() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Map<String, List<String>> getRequestMetadata(URI uri) {\n+\t\t\t\treturn headerMap;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadata() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadataOnly() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void refresh() {\n+\t\t\t\t// no-op\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Reactive Firestore autoconfiguration to enable emulator use.\n+\t */\n+\t@ConditionalOnClass({ FirestoreGrpc.FirestoreStub.class, Flux.class })\n+\t@AutoConfigureBefore({ FirestoreReactiveAutoConfiguration.class })\n+\tclass ReactiveFirestoreEmulatorAutoConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDIyNA=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjk1MDI4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo1NjozMFrOGGmkAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo1NzozNFrOGInYiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ==", "bodyText": "This is inconsistent with the Datastore emulator autoconfiguration that uses spring.cloud.gcp.datastore.emulator.enabled. We should instead use spring.cloud.gcp.firestore.emulator.enabled.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409576451", "createdAt": "2020-04-16T13:56:30Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTk1OA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410495958", "createdAt": "2020-04-17T22:16:47Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTU4OA==", "bodyText": "It still says @ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\").", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411609588", "createdAt": "2020-04-20T18:48:00Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NzA0OQ==", "bodyText": "Done. Sorry. forgot to push my last commit!", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411687049", "createdAt": "2020-04-20T20:57:34Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzUzNTg2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjowMToxN1rOGGsYKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjoyNDowNFrOGHezvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTcyMA==", "bodyText": "Is there some better way to automatically detect that we're using the emulator by inspecting the FirestoreStub and looking for the host or something?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409671720", "createdAt": "2020-04-16T16:01:17Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -82,6 +82,8 @@\n \n \tprivate int writeBufferSize = FIRESTORE_WRITE_MAX_SIZE;\n \n+\tprivate boolean usingStreamTokens = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzk4MQ==", "bodyText": "Yeah this method would work.\nHowever I am not sure if I like the coupling this introduces and what kind of logic is needed to make it robust. I feel it's cleaner to just let the emulator autoconfiguration configure whether the template should include the stream token or not.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410497981", "createdAt": "2020-04-17T22:24:04Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -82,6 +82,8 @@\n \n \tprivate int writeBufferSize = FIRESTORE_WRITE_MAX_SIZE;\n \n+\tprivate boolean usingStreamTokens = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTcyMA=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzE3MzIzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/firestore.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0NzoxN1rOGIioPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo1Njo1M1rOGInXLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTE0OQ==", "bodyText": "Can we have a little tiny section on Firestore Emulator, primary for discoverability?\nI think we have something similar for other emulators.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411609149", "createdAt": "2020-04-20T18:47:17Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -54,6 +54,7 @@ The Spring Boot starter for Google Cloud Firestore provides the following config\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.firestore.enabled` | Enables or disables Firestore auto-configuration | No | `true`\n | `spring.cloud.gcp.firestore.project-id` | GCP project ID where the Google Cloud Firestore API is hosted, if different from the one in the <<spring-cloud-gcp-core,Spring Cloud GCP Core Module>> | No |\n+| `spring.cloud.gcp.firestore.host-port` | The host and port of the Firestore service; can be overridden to specify connecting to an already-running https://firebase.google.com/docs/emulator-suite/install_and_configure[Firestore emulator] instance. | No | `firestore.googleapis.com:443` (the host/port of official Firestore service)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NjcwMA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411686700", "createdAt": "2020-04-20T20:56:53Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -54,6 +54,7 @@ The Spring Boot starter for Google Cloud Firestore provides the following config\n | Name | Description | Required | Default value\n | `spring.cloud.gcp.firestore.enabled` | Enables or disables Firestore auto-configuration | No | `true`\n | `spring.cloud.gcp.firestore.project-id` | GCP project ID where the Google Cloud Firestore API is hosted, if different from the one in the <<spring-cloud-gcp-core,Spring Cloud GCP Core Module>> | No |\n+| `spring.cloud.gcp.firestore.host-port` | The host and port of the Firestore service; can be overridden to specify connecting to an already-running https://firebase.google.com/docs/emulator-suite/install_and_configure[Firestore emulator] instance. | No | `firestore.googleapis.com:443` (the host/port of official Firestore service)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTE0OQ=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzE4NDUzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0OTo1OFrOGIiu1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo1Nzo0MlrOGInY2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMDgzNg==", "bodyText": "@since 1.2.3?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411610836", "createdAt": "2020-04-20T18:49:58Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -129,6 +131,24 @@ public int getWriteBufferSize() {\n \t\treturn this.writeBufferSize;\n \t}\n \n+\t/**\n+\t * Sets whether the {@link FirestoreTemplate} should attach stream resume tokens to write\n+\t * requests.\n+\t *\n+\t * <p>Note that this should always be set to true unless you are using the\n+\t * Firestore emulator in which case it should be set to false because the emulator\n+\t * does not support using resume tokens.\n+\t *\n+\t * @param usingStreamTokens whether the template\n+\t */\n+\tpublic void setUsingStreamTokens(boolean usingStreamTokens) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NzEzMA==", "bodyText": "Done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411687130", "createdAt": "2020-04-20T20:57:42Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -129,6 +131,24 @@ public int getWriteBufferSize() {\n \t\treturn this.writeBufferSize;\n \t}\n \n+\t/**\n+\t * Sets whether the {@link FirestoreTemplate} should attach stream resume tokens to write\n+\t * requests.\n+\t *\n+\t * <p>Note that this should always be set to true unless you are using the\n+\t * Firestore emulator in which case it should be set to false because the emulator\n+\t * does not support using resume tokens.\n+\t *\n+\t * @param usingStreamTokens whether the template\n+\t */\n+\tpublic void setUsingStreamTokens(boolean usingStreamTokens) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMDgzNg=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzE5MjQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo1MTo1MlrOGIizfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQyMDo1Nzo0N1rOGInZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMjAzMA==", "bodyText": "Can we have some basic test for this class, even if we don't actually start the emulator as part of it? For example, we can test that the property used to turn it on actually works.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411612030", "createdAt": "2020-04-20T18:51:52Z", "author": {"login": "meltsufin"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NzE4Mg==", "bodyText": "Done", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411687182", "createdAt": "2020-04-20T20:57:47Z", "author": {"login": "dzou"}, "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMjAzMA=="}, "originalCommit": {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2301, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}