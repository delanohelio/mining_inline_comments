{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjE3NTA2", "number": 2224, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzoyODo0MFrODj_66Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMDoyMlrODkbJ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MDI1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzoyODo0MFrOFwHXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzoyODo0MFrOFwHXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjY1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n          \n          \n            \n            * A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r385996652", "createdAt": "2020-02-29T03:28:40Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDc0MDc1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMDoyNFrOFwHXug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMzozMDoyNFrOFwHXug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk5NjczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All secrets will be loaded into the application environment using their `secretId` as the property's names.\n          \n          \n            \n            All secrets will be loaded into the application environment using their `secretId` as the property name.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r385996730", "createdAt": "2020-02-29T03:30:24Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property's names.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDg4MDY4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyNjowNlrOFwsPNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxMDo1NFrOFwtnOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMDc1OA==", "bodyText": "Maybe add a NOTE: box saying that bootstrap has to be explicitly enabled.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386600758", "createdAt": "2020-03-02T19:26:06Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyMzI5MA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386623290", "createdAt": "2020-03-02T20:10:54Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMDc1OA=="}, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDg4MTQ2OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyNjoyMFrOFwsPuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOToyNjoyMFrOFwsPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYwMDg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. | No | `true`\n          \n          \n            \n            | `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. | No | `false`", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386600889", "createdAt": "2020-03-02T19:26:20Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,80 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A convenience starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+After adding the starter dependency to your project, Spring Cloud GCP will automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property's names.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. | No | `true`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad37d00b53d27bba9ddf80c65d527c657321e35f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAzNzEwOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjowOFrOFwtxCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjowOFrOFwtxCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTgwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n          \n          \n            \n            NOTE: To begin using this feature, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled=true` because this feature is disabled by default.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386625800", "createdAt": "2020-03-02T20:16:08Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTAzODc1OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNjozOFrOFwtyFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1NTo1OVrOFwu7rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjA2OQ==", "bodyText": "I'd move\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n          \n          \n            \n            NOTE: This feature disabled by default; to use it, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386626069", "createdAt": "2020-03-02T20:16:38Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NDkxMA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386644910", "createdAt": "2020-03-02T20:55:59Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjA2OQ=="}, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA0MjEzOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxNzo0OVrOFwt0HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1NjoxNFrOFwu8Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjU4OQ==", "bodyText": "I am not sure I can english properly today, so check that this makes sense grammatically.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n          \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating to the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386626589", "createdAt": "2020-03-02T20:17:49Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NTAzOQ==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386645039", "createdAt": "2020-03-02T20:56:14Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNjU4OQ=="}, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA0NTc4OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoxOTowM1rOFwt2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1NjowOFrOFwu8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n          \n          \n            \n            | `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating to the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386627171", "createdAt": "2020-03-02T20:19:03Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NDk5NA==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386644994", "createdAt": "2020-03-02T20:56:08Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzE3MQ=="}, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA4MzY0OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozMToxNVrOFwuNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1NjoyMlrOFwu8dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzE1Nw==", "bodyText": "Should we just vaguely say \"inject\" instead of \"autowire... using autowired\" despite showing an example of it?\nIn production code, autowire would not be commonly used.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386633157", "createdAt": "2020-03-02T20:31:15Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.project-id` | The GCP Project used to access Secret Manager API. | No | By default, infers the project from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+\n+=== Secret Manager Template\n+\n+The `SecretManagerTemplate` class simplifies operations of creating, updating, and reading secrets.\n+\n+To begin using this class, you may autowire an instance of the class using `@Autowired` after adding the starter dependency to your project.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NTExMQ==", "bodyText": "Done.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386645111", "createdAt": "2020-03-02T20:56:22Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.project-id` | The GCP Project used to access Secret Manager API. | No | By default, infers the project from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+\n+=== Secret Manager Template\n+\n+The `SecretManagerTemplate` class simplifies operations of creating, updating, and reading secrets.\n+\n+To begin using this class, you may autowire an instance of the class using `@Autowired` after adding the starter dependency to your project.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzE1Nw=="}, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTA4NjQ3OnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDozMjoxOVrOFwuPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDo1NzowNVrOFwu9tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzYxOQ==", "bodyText": "Is this section a duplicate?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386633619", "createdAt": "2020-03-02T20:32:19Z", "author": {"login": "elefeint"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.project-id` | The GCP Project used to access Secret Manager API. | No | By default, infers the project from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+\n+=== Secret Manager Template\n+\n+The `SecretManagerTemplate` class simplifies operations of creating, updating, and reading secrets.\n+\n+To begin using this class, you may autowire an instance of the class using `@Autowired` after adding the starter dependency to your project.\n+\n+[source, java]\n+----\n+@Autowired\n+private SecretManagerTemplate secretManagerTemplate;\n+----\n+\n+Please consult https://github.com/spring-cloud/spring-cloud-gcp/blob/master/spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java[`SecretManagerOperations`] for information on what operations are available for the Secret Manager template.\n+\n+|===", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY0NTQyOQ==", "bodyText": "Parts of it were duplicated; I reorganized the properties so the duplicated authentication-related properties now appear in 1 place at the bottom.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386645429", "createdAt": "2020-03-02T20:57:05Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,83 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: To begin using this feature, you must set the setting `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**, this feature disabled by default.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.credentials.location` | OAuth2 credentials for authenticating with the Google Cloud Secret Manager API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.credentials.encoded-key` | Base64-encoded contents of OAuth2 account private key for authenticating with the Google Cloud Storage API. | No | By default, infers credentials from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.project-id` | The GCP Project used to access Secret Manager API. | No | By default, infers the project from https://cloud.google.com/docs/authentication/production[Application Default Credentials].\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+\n+=== Secret Manager Template\n+\n+The `SecretManagerTemplate` class simplifies operations of creating, updating, and reading secrets.\n+\n+To begin using this class, you may autowire an instance of the class using `@Autowired` after adding the starter dependency to your project.\n+\n+[source, java]\n+----\n+@Autowired\n+private SecretManagerTemplate secretManagerTemplate;\n+----\n+\n+Please consult https://github.com/spring-cloud/spring-cloud-gcp/blob/master/spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java[`SecretManagerOperations`] for information on what operations are available for the Secret Manager template.\n+\n+|===", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYzMzYxOQ=="}, "originalCommit": {"oid": "cecd785609472701e7babc1a5021ed684e072c48"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTIwMjExOnYy", "diffSide": "RIGHT", "path": "docs/src/main/asciidoc/secretmanager.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToxMDoyMlrOFwvWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMToyNzoyOVrOFwv3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MTc1Mg==", "bodyText": "I'm afraid people may now miss the fact that auth settings are available.\nMaybe add a link here saying see auth setting below?", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386651752", "createdAt": "2020-03-02T21:10:22Z", "author": {"login": "meltsufin"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: This feature disabled by default; to use it, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f41ee2ea4741f8b7ec0b215aa8a556800d5338b7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY2MDM1MQ==", "bodyText": "Added blurb about seeing the Authentication settings section below.", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2224#discussion_r386660351", "createdAt": "2020-03-02T21:27:29Z", "author": {"login": "dzou"}, "path": "docs/src/main/asciidoc/secretmanager.adoc", "diffHunk": "@@ -0,0 +1,89 @@\n+== Secret Manager\n+\n+https://cloud.google.com/secret-manager[Google Cloud Secret Manager] is a secure and convenient method for storing API keys, passwords, certificates, and other sensitive data.\n+A detailed summary of its features can be found in the https://cloud.google.com/blog/products/identity-security/introducing-google-clouds-secret-manager[Secret Manager documentation].\n+\n+Spring Cloud GCP provides:\n+\n+* A Spring Boot starter which automatically loads the secrets of your GCP project into your application context as a https://cloud.spring.io/spring-cloud-commons/multi/multi__spring_cloud_context_application_context_services.html#_the_bootstrap_application_context[Bootstrap Property Source].\n+* A `SecretManagerTemplate` which allows you to read, write, and update secrets in Secret Manager.\n+\n+=== Dependency Setup\n+\n+To begin using this library, add the `spring-cloud-gcp-starter-secretmanager` artifact to your project.\n+\n+Maven coordinates, using <<getting-started.adoc#_bill_of_materials, Spring Cloud GCP BOM>>:\n+\n+[source,xml]\n+----\n+<dependency>\n+  <groupId>org.springframework.cloud</groupId>\n+  <artifactId>spring-cloud-gcp-starter-secretmanager</artifactId>\n+</dependency>\n+----\n+\n+Gradle coordinates:\n+\n+[source]\n+----\n+dependencies {\n+  compile group: 'org.springframework.cloud', name: 'spring-cloud-gcp-starter-secretmanager'\n+}\n+----\n+\n+=== Secret Manager Property Source\n+\n+The Spring Cloud GCP integration for Google Cloud Secret Manager enables you to use Secret Manager as a bootstrap property source.\n+\n+This feature allows you to automatically load your GCP project's secrets as properties into the application context during the https://cloud.spring.io/spring-cloud-commons/reference/html/#the-bootstrap-application-context[Bootstrap Phase], which refers to the initial phase when a Spring application is being loaded.\n+\n+NOTE: This feature disabled by default; to use it, you must set `spring.cloud.gcp.secretmanager.bootstrap.enabled` to **true**.\n+\n+Spring Cloud GCP will load the **latest** version of each secret into the application context.\n+\n+All secrets will be loaded into the application environment using their `secretId` as the property name.\n+For example, if your secret's id is `my-secret` then it will be accessible as a property using the name `my-secret`.\n+If you would like to append a prefix string to all property names imported from Secret Manager, you may use the `spring.cloud.gcp.secretmanager.secret-name-prefix` setting described below.\n+\n+Spring Cloud GCP Secret Manager offers several configuration properties to customize the behavior.\n+\n+|===\n+| Name | Description | Required | Default value\n+| `spring.cloud.gcp.secretmanager.bootstrap.enabled` | Enables loading secrets from Secret Manager as a bootstrap property source. Set this to **true** to enable the feature. | No | `false`\n+| `spring.cloud.gcp.secretmanager.secret-name-prefix` | A prefix string to prepend to the property names of secrets read from Secret Manager | No | \"\" (empty string)\n+|===\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY1MTc1Mg=="}, "originalCommit": {"oid": "f41ee2ea4741f8b7ec0b215aa8a556800d5338b7"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2281, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}